
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 36 02 c0       	mov    eax,0xc0023684
c0000025:	3d 84 36 02 c0       	cmp    eax,0xc0023684
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 36 02 c0       	push   0xc0023684
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 36 02 c0       	mov    eax,0xc0023684
c0000051:	2d 84 36 02 c0       	sub    eax,0xc0023684
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 36 02 c0       	push   0xc0023684
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc fd 01 c0       	mov    ebx,0xc001fdfc
c0000097:	81 eb f8 fd 01 c0    	sub    ebx,0xc001fdf8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 fd 01 c0       	mov    esi,0xc001fdf8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 36 02 c0       	push   0xc0023684
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 84 36 02 c0       	push   0xc0023684
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 43 50 01 00       	call   c00152f0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 21 50 01 00       	call   c00152f0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 2e 55 01 00       	call   c001581c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 ed 5b 01 00       	call   c0015ee4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 69 0e 01 00       	jmp    c00111e8 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0200],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0200],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0200],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00fc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 ea 76 01 00       	jmp    c001948c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 14 77 01 00       	jmp    c00194cc <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 35 77 01 00       	jmp    c001950c <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdffa0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffa0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 9c 26 02 c0       	mov    edx,0xc002269c
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c ff 01 c0       	mov    edx,0xc001ff1c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 ff 01 c0       	mov    eax,0xc001ff22
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 ff 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0020]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b ff 01 c0       	mov    eax,0xc001ff2b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffa0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 ff 01 c0       	mov    eax,0xc001ffb0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 ff 01 c0       	mov    ebx,0xc001ffa0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 ff 01 c0       	mov    eax,0xc001ff90
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 ff 01 c0       	mov    edx,0xc001ff32
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e ff 01 c0       	mov    edx,0xc001ff3e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 ff 01 c0       	mov    edx,0xc001ff52
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020380
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020380
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 01 02 c0       	mov    eax,0xc0020180
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 00 02 c0       	mov    eax,0xc00200c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff80]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 04 02 c0       	push   0xc0020480
c000611b:	e8 08 3d 01 00       	call   c0019e28 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 04 02 c0       	push   0xc002048e
c0006153:	e8 d0 3c 01 00       	call   c0019e28 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 39 3c 01 00       	call   c0019dcc <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 04 02 c0       	push   0xc002049d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 04 02 c0       	push   0xc00204a0
c0006812:	e8 11 36 01 00       	call   c0019e28 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 25 36 01 00       	call   c0019e44 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 04 02 c0 	mov    DWORD PTR [esp],0xc00204a5
c000682c:	e8 f7 35 01 00       	call   c0019e28 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 07 36 01 00       	call   c0019e44 <iso_kprintfd>
c000683d:	c7 04 24 ab 04 02 c0 	mov    DWORD PTR [esp],0xc00204ab
c0006844:	e8 df 35 01 00       	call   c0019e28 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 ef 35 01 00       	call   c0019e44 <iso_kprintfd>
c0006855:	c7 04 24 b1 04 02 c0 	mov    DWORD PTR [esp],0xc00204b1
c000685c:	e8 c7 35 01 00       	call   c0019e28 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 d7 35 01 00       	call   c0019e44 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 04 02 c0       	push   0xc002049d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 04 02 c0       	push   0xc00204ba
c0006a31:	e8 f2 33 01 00       	call   c0019e28 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 04 02 c0       	push   0xc00204c5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 04 02 c0       	push   0xc00204cc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 04 02 c0       	push   0xc00204d3
c0006b48:	e8 db 32 01 00       	call   c0019e28 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 04 02 c0       	push   0xc00204de
c0006b63:	e8 c0 32 01 00       	call   c0019e28 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 fd 9d 00 00       	call   c0010a6f <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 8f 5a 00 00       	call   c000c710 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 ef 04 02 c0       	push   0xc00204ef
c0006cb2:	e8 6f 9e 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0006cd1:	50                   	push   eax
c0006cd2:	68 08 05 02 c0       	push   0xc0020508
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 69 e9 00 00       	call   c0015648 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 78 eb 00 00       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 90 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a490
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 54 63 01 c0       	push   0xc0016354
c0006d03:	52                   	push   edx
c0006d04:	e8 63 eb 00 00       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c0006d11:	68 04 06 02 c0       	push   0xc0020604
c0006d16:	e8 0b 9e 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 8f a6 00 00       	call   c00113b6 <KeInitRand()>
c0006d27:	e8 4b fa 00 00       	call   c0016777 <Vm::initialise8086()>
c0006d2c:	e8 d9 47 00 00       	call   c000b50a <Fs::initVFS()>
c0006d31:	c7 04 24 15 05 02 c0 	mov    DWORD PTR [esp],0xc0020515
c0006d38:	e8 e9 9d 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 04 06 02 c0       	push   0xc0020604
c0006d5c:	e8 c5 9d 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0006d61:	e8 9e 41 00 00       	call   c000af04 <KeInitialiseSymlinks()>
c0006d66:	e8 f5 a2 00 00       	call   c0011060 <KeLoadSystemEnv()>
c0006d6b:	e8 52 a5 00 00       	call   c00112c2 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 2f 05 02 c0       	push   0xc002052f
c0006d7a:	68 38 05 02 c0       	push   0xc0020538
c0006d7f:	e8 10 cb 00 00       	call   c0013894 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 e4 52 00 00       	call   c000c070 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 28 06 02 c0 	mov    DWORD PTR [esp],0xc0020628
c0006d93:	e8 8e 9d 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 64 59 00 00       	call   c000c70e <Device::loadDriversForAll()>
c0006daa:	c7 04 24 40 05 02 c0 	mov    DWORD PTR [esp],0xc0020540
c0006db1:	e8 70 9d 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 51 05 02 c0       	push   0xc0020551
c0006dc5:	e8 94 e2 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 bc e4 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 f0 ee 00 00       	call   c0015cd0 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 6d 05 02 c0       	push   0xc002056d
c0006df5:	50                   	push   eax
c0006df6:	e8 8f 59 00 00       	call   c000c78a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 74 06 02 c0       	mov    edx,0xc0020674
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 01 7f 01 00       	call   c001edf6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 51 90 00 00       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 2a 90 00 00       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 08 90 00 00       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 e6 8f 00 00       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 f3 8e 00 00       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 ce 8e 00 00       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 60 7d 01 00       	call   c001edb0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 ae 79 01 00       	call   c001ea20 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 e4 8e 00 00       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 76 05 02 c0       	push   0xc0020576
c00070e2:	e8 16 a1 00 00       	call   c00111fd <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 7c 05 02 c0       	push   0xc002057c
c000711e:	e8 da a0 00 00       	call   c00111fd <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 31 88 00 00       	jmp    c000f99c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 82 05 02 c0       	push   0xc0020582
c00071c3:	0f 94 05 e0 2e 02 c0 	sete   BYTE PTR ds:0xc0022ee0
c00071ca:	e8 57 99 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 2b 83 00 00       	call   c000f510 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 fe 53 00 00       	call   c000c5f2 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 9a 05 02 c0 	mov    DWORD PTR [esp],0xc002059a
c000720d:	e8 14 99 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 14 8e 00 00       	call   c001003c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 bb 53 00 00       	call   c000c5f2 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 48 06 02 c0       	push   0xc0020648
c0007254:	e8 cd 98 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c0007259:	e8 56 07 01 00       	call   c00179b4 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 b4 05 02 c0 	mov    DWORD PTR [esp],0xc00205b4
c0007265:	e8 bc 98 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 22 e7 00 00       	call   c0015998 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 cf 05 02 c0       	push   0xc00205cf
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 e0 05 02 c0       	push   0xc00205e0
c00072ed:	e8 0b 9f 00 00       	call   c00111fd <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 ed 05 02 c0       	push   0xc00205ed
c0007302:	e8 f6 9e 00 00       	call   c00111fd <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 f7 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205f7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 dc 9e 00 00       	jmp    c00111fd <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007505:	48                   	dec    eax
c0007506:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 6d 01 01 00       	call   c0017680 <HalSystemIdle()>
c0007513:	e8 9a 7e 01 00       	call   c001f3b2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 b0 ea 01 c0       	push   0xc001eab0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 c0 ea 01 c0       	push   0xc001eac0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 ca ea 01 c0       	push   0xc001eaca
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 d4 ea 01 c0       	push   0xc001ead4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 de ea 01 c0       	push   0xc001eade
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 e8 ea 01 c0       	push   0xc001eae8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 f2 ea 01 c0       	push   0xc001eaf2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 fc ea 01 c0       	push   0xc001eafc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 06 eb 01 c0       	push   0xc001eb06
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 0e eb 01 c0       	push   0xc001eb0e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 18 eb 01 c0       	push   0xc001eb18
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 20 eb 01 c0       	push   0xc001eb20
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 28 eb 01 c0       	push   0xc001eb28
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 30 eb 01 c0       	push   0xc001eb30
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 4a eb 01 c0       	push   0xc001eb4a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 52 eb 01 c0       	push   0xc001eb52
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 5c eb 01 c0       	push   0xc001eb5c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 66 eb 01 c0       	push   0xc001eb66
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 70 eb 01 c0       	push   0xc001eb70
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 0a ec 01 c0       	push   0xc001ec0a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 11 ec 01 c0       	push   0xc001ec11
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 fc eb 01 c0       	push   0xc001ebfc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 03 ec 01 c0       	push   0xc001ec03
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 7a eb 01 c0       	push   0xc001eb7a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 84 eb 01 c0       	push   0xc001eb84
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 8e eb 01 c0       	push   0xc001eb8e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 98 eb 01 c0       	push   0xc001eb98
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 a2 eb 01 c0       	push   0xc001eba2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 ac eb 01 c0       	push   0xc001ebac
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 b6 eb 01 c0       	push   0xc001ebb6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 c0 eb 01 c0       	push   0xc001ebc0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 ca eb 01 c0       	push   0xc001ebca
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 d4 eb 01 c0       	push   0xc001ebd4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 de eb 01 c0       	push   0xc001ebde
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 e8 eb 01 c0       	push   0xc001ebe8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 f2 eb 01 c0       	push   0xc001ebf2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 4c ed 01 c0       	push   0xc001ed4c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 56 ed 01 c0       	push   0xc001ed56
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 60 ed 01 c0       	push   0xc001ed60
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 6a ed 01 c0       	push   0xc001ed6a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 74 ed 01 c0       	push   0xc001ed74
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 7e ed 01 c0       	push   0xc001ed7e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 88 ed 01 c0       	push   0xc001ed88
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 92 ed 01 c0       	push   0xc001ed92
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 06 eb 01 c0       	push   0xc001eb06
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 cc 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ecc
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d cc 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022ecc
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 cc 2e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022ecc,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 98 06 02 c0       	push   0xc0020698
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 c8 06 02 c0       	push   0xc00206c8
c0007a27:	e8 d1 97 00 00       	call   c00111fd <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 cd 06 02 c0       	push   0xc00206cd
c0007a3d:	e8 bb 97 00 00       	call   c00111fd <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 68 a4 02 c0 01 	add    DWORD PTR ds:0xc002a468,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 d4 06 02 c0       	push   0xc00206d4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 41 8f 00 00       	call   c0010aaa <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 8f 8e 00 00       	call   c0010a19 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 aa 77 01 00       	call   c001f34a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ec 06 02 c0       	push   0xc00206ec
c0007c31:	e8 c7 95 00 00       	call   c00111fd <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ec 06 02 c0       	push   0xc00206ec
c0007ca2:	e8 56 95 00 00       	call   c00111fd <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 d0 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022ed0
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d d0 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ed0
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 d0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ed0
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 91 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020791
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 50 94 00 00       	jmp    c00111fd <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 14 07 02 c0       	push   0xc0020714
c0007e31:	e8 c7 93 00 00       	call   c00111fd <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 a7 07 02 c0       	push   0xc00207a7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 44 07 02 c0       	push   0xc0020744
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 68 07 02 c0       	push   0xc0020768
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 cd 07 02 c0       	push   0xc00207cd
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 bf 07 02 c0       	push   0xc00207bf
c000813c:	e8 bc 90 00 00       	call   c00111fd <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 e9 07 02 c0       	push   0xc00207e9
c0008311:	e8 e7 8e 00 00       	call   c00111fd <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000835a:	e8 5d d7 00 00       	call   c0015abc <schedule()>
c000835f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0008364:	48                   	dec    eax
c0008365:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 39 6e 01 00       	call   c001f230 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 08 02 c0       	push   0xc0020806
c000840c:	e8 ec 8d 00 00       	call   c00111fd <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 08 02 c0       	mov    edx,0xc0020874
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 d6 4f 00 00       	call   c000d4cc <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 58 03 01 00       	call   c0018874 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 00 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd100]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 00 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd100]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 b8 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd248]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 90 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd270]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 8a 00 01 00       	call   c0018708 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 e7 00 01 00       	jmp    c0018810 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020840
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 87 8a 00 00       	jmp    c00111fd <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 44 37 00 00       	jmp    c000c017 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 4e 08 02 c0       	mov    esi,0xc002084e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 ee fb 00 00       	call   c0018810 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 74 08 02 c0       	mov    edx,0xc0020874
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 5f 08 02 c0       	push   0xc002085f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 65 08 02 c0       	push   0xc0020865
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 40 2f 02 c0    	mov    DWORD PTR ds:0xc0022f40,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 17 62 01 00       	call   c001f418 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 58 09 02 c0       	mov    edx,0xc0020958
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 17 61 01 00       	call   c001f4ec <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 0b 61 01 00       	call   c001f4f4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 11 60 01 00       	call   c001f418 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 14 09 02 c0       	push   0xc0020914
c000942c:	e8 cc 7d 00 00       	call   c00111fd <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 58 09 02 c0       	mov    edx,0xc0020958
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 16 60 01 00       	call   c001f4ec <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 a3 60 01 00       	call   c001f596 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 61 5e 01 00       	call   c001f3d6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 c8 2e 02 c0       	push   0xc0022ec8
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 d4 f3 01 c0       	push   0xc001f3d4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 48 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f48
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 48 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f48
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 44 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f44
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 44 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022f44,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 44 2f 02 c0    	mov    DWORD PTR ds:0xc0022f44,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 6c 09 02 c0       	push   0xc002096c
c0009689:	e8 6f 7b 00 00       	call   c00111fd <KePanic(char const*)>
c000968e:	8b 35 44 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f44
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 44 2f 02 c0    	mov    DWORD PTR ds:0xc0022f44,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 44 2f 02 c0    	mov    DWORD PTR ds:0xc0022f44,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 44 2f 02 c0       	mov    ds:0xc0022f44,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 4c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f4c
c000975f:	8b 0d 54 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f54
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 4c 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f4c
c000977a:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 50 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f50,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 00 0c 02 c0       	push   0xc0020c00
c00097c0:	e8 38 7a 00 00       	call   c00111fd <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 17 0c 02 c0       	push   0xc0020c17
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 50 2f 02 c0    	mov    DWORD PTR ds:0xc0022f50,ebx
c0009864:	c6 05 58 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022f58,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 54 2f 02 c0       	mov    ds:0xc0022f54,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 4c 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022f4c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c0009896:	f7 35 4c 2f 02 c0    	div    DWORD PTR ds:0xc0022f4c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 8c 09 02 c0       	push   0xc002098c
c00098d1:	e8 27 79 00 00       	call   c00111fd <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 2e 0c 02 c0       	push   0xc0020c2e
c00099a3:	e8 55 78 00 00       	call   c00111fd <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 b0 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc00209b0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 f2 77 00 00       	jmp    c00111fd <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 4a 0c 02 c0       	push   0xc0020c4a
c0009a18:	e8 e0 77 00 00       	call   c00111fd <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 66 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c66
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 96 77 00 00       	jmp    c00111fd <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 d4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009d10:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 f8 09 02 c0       	push   0xc00209f8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 60 0a 02 c0       	push   0xc0020a60
c0009dad:	e8 4b 74 00 00       	call   c00111fd <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 84 0a 02 c0       	push   0xc0020a84
c0009e99:	e8 5f 73 00 00       	call   c00111fd <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 b0 0a 02 c0       	push   0xc0020ab0
c0009fed:	e8 0b 72 00 00       	call   c00111fd <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 62 26 00 00       	call   c000c886 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 80 0c 02 c0       	push   0xc0020c80
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 4c 2f 02 c0       	mov    eax,ds:0xc0022f4c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 58 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f58
c000a2fd:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a304:	50                   	push   eax
c000a305:	e8 36 37 00 00       	call   c000da40 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 4c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f4c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 d4 0a 02 c0       	push   0xc0020ad4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 8e 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020c8e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 b1 0c 02 c0       	push   0xc0020cb1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 9f 0c 02 c0       	push   0xc0020c9f
c000a3db:	e8 1d 6e 00 00       	call   c00111fd <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 b1 0c 02 c0       	push   0xc0020cb1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 4c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f4c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 58 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f58
c000a47a:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a481:	50                   	push   eax
c000a482:	e8 4d 35 00 00       	call   c000d9d4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 4c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f4c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 04 0b 02 c0       	push   0xc0020b04
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 24 0b 02 c0       	push   0xc0020b24
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 84 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b84
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 d9 0c 02 c0       	push   0xc0020cd9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ed 0c 02 c0       	push   0xc0020ced
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 00 0d 02 c0       	push   0xc0020d00
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 0d 0d 02 c0       	push   0xc0020d0d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 26 0d 02 c0       	push   0xc0020d26
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 26 0d 02 c0       	push   0xc0020d26
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 2e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d2e
c000a7f8:	e8 00 6a 00 00       	call   c00111fd <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 46 0d 02 c0       	push   0xc0020d46
c000a80a:	e8 ee 69 00 00       	call   c00111fd <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 4f 08 02 c0       	mov    esi,0xc002084f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 4e 08 02 c0       	mov    al,ds:0xc002084e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 5c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf2a4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 ac 0e 02 c0       	push   0xc0020eac
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 c0 0e 02 c0       	push   0xc0020ec0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ca 0e 02 c0       	push   0xc0020eca
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 d4 0e 02 c0       	push   0xc0020ed4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 18 10 02 c0       	push   0xc0021018
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 de 0e 02 c0       	push   0xc0020ede
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 38 10 02 c0       	push   0xc0021038
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 f3 0e 02 c0       	push   0xc0020ef3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 0d 0f 02 c0       	push   0xc0020f0d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 60 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0a0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 60 10 02 c0       	push   0xc0021060
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 18 10 02 c0       	push   0xc0021018
c000abb4:	e8 44 66 00 00       	call   c00111fd <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 a8 10 02 c0       	push   0xc00210a8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 a8 10 02 c0       	push   0xc00210a8
c000abe3:	e8 15 66 00 00       	call   c00111fd <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 18 0f 02 c0       	push   0xc0020f18
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 18 0f 02 c0       	push   0xc0020f18
c000ac0f:	e8 e9 65 00 00       	call   c00111fd <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 35 0f 02 c0       	push   0xc0020f35
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 35 0f 02 c0       	push   0xc0020f35
c000ac3b:	e8 bd 65 00 00       	call   c00111fd <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 c8 10 02 c0       	push   0xc00210c8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 c8 10 02 c0       	push   0xc00210c8
c000ac67:	e8 91 65 00 00       	call   c00111fd <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ec 10 02 c0       	push   0xc00210ec
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ec 10 02 c0       	push   0xc00210ec
c000ac93:	e8 65 65 00 00       	call   c00111fd <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 51 0f 02 c0       	push   0xc0020f51
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 51 0f 02 c0       	push   0xc0020f51
c000acbf:	e8 39 65 00 00       	call   c00111fd <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 6d 0f 02 c0       	push   0xc0020f6d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 6d 0f 02 c0       	push   0xc0020f6d
c000aceb:	e8 0d 65 00 00       	call   c00111fd <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 0c 11 02 c0       	push   0xc002110c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 0c 11 02 c0       	push   0xc002110c
c000ad17:	e8 e1 64 00 00       	call   c00111fd <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 30 11 02 c0       	push   0xc0021130
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 30 11 02 c0       	push   0xc0021130
c000ad43:	e8 b5 64 00 00       	call   c00111fd <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 ed 65 00 00       	call   c001134b <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 60 70 02 c0    	mov    ebp,DWORD PTR ds:0xc0027060
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 60 70 02 c0    	mov    DWORD PTR ds:0xc0027060,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 4f 11 02 c0       	push   0xc002114f
c000ad97:	e8 61 64 00 00       	call   c00111fd <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000add7:	68 58 11 02 c0       	push   0xc0021158
c000addc:	50                   	push   eax
c000addd:	e8 08 09 00 00       	call   c000b6ea <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 76 11 02 c0       	push   0xc0021176
c000adf1:	e8 07 64 00 00       	call   c00111fd <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 a3 09 00 00       	call   c000b7a6 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 90 11 02 c0       	push   0xc0021190
c000ae12:	e8 e6 63 00 00       	call   c00111fd <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 aa 11 02 c0       	push   0xc00211aa
c000ae59:	e8 9f 63 00 00       	call   c00111fd <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d 09 00 00       	call   c000b804 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 60 60 02 c0       	add    eax,0xc0026060
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 60 60 02 c0       	add    eax,0xc0026060
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 0f             	cmp    eax,0xf
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KeInitialiseSymlinks()>:
c000af04:	53                   	push   ebx
c000af05:	83 ec 10             	sub    esp,0x10
c000af08:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000af12:	6a 00                	push   0x0
c000af14:	68 90 ae 00 c0       	push   0xc000ae90
c000af19:	e8 1d 5b 00 00       	call   c0010a3b <KeRegisterAtexit(void (*)(void*), void*)>
c000af1e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af25:	e8 8c cb ff ff       	call   c0007ab6 <malloc>
c000af2a:	83 c4 0c             	add    esp,0xc
c000af2d:	89 c3                	mov    ebx,eax
c000af2f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000af35:	68 58 11 02 c0       	push   0xc0021158
c000af3a:	50                   	push   eax
c000af3b:	e8 aa 07 00 00       	call   c000b6ea <File::File(char const*, Process*)>
c000af40:	83 c4 10             	add    esp,0x10
c000af43:	85 db                	test   ebx,ebx
c000af45:	75 10                	jne    c000af57 <KeInitialiseSymlinks()+0x53>
c000af47:	83 ec 0c             	sub    esp,0xc
c000af4a:	68 c4 11 02 c0       	push   0xc00211c4
c000af4f:	e8 a9 62 00 00       	call   c00111fd <KePanic(char const*)>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	83 ec 0c             	sub    esp,0xc
c000af5a:	53                   	push   ebx
c000af5b:	e8 0a 0b 00 00       	call   c000ba6a <File::exists()>
c000af60:	83 c4 10             	add    esp,0x10
c000af63:	84 c0                	test   al,al
c000af65:	75 2d                	jne    c000af94 <KeInitialiseSymlinks()+0x90>
c000af67:	51                   	push   ecx
c000af68:	51                   	push   ecx
c000af69:	6a 12                	push   0x12
c000af6b:	53                   	push   ebx
c000af6c:	e8 35 08 00 00       	call   c000b7a6 <File::open(FileOpenMode)>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	85 c0                	test   eax,eax
c000af76:	74 10                	je     c000af88 <KeInitialiseSymlinks()+0x84>
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	68 e1 11 02 c0       	push   0xc00211e1
c000af80:	e8 78 62 00 00       	call   c00111fd <KePanic(char const*)>
c000af85:	83 c4 10             	add    esp,0x10
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	53                   	push   ebx
c000af8c:	e8 73 08 00 00       	call   c000b804 <File::close()>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	85 db                	test   ebx,ebx
c000af96:	74 0c                	je     c000afa4 <KeInitialiseSymlinks()+0xa0>
c000af98:	83 ec 0c             	sub    esp,0xc
c000af9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af9d:	53                   	push   ebx
c000af9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afa1:	83 c4 10             	add    esp,0x10
c000afa4:	83 c4 08             	add    esp,0x8
c000afa7:	5b                   	pop    ebx
c000afa8:	c3                   	ret    

c000afa9 <KiIsSymlinkRegistered(char const*)>:
c000afa9:	31 c0                	xor    eax,eax
c000afab:	31 d2                	xor    edx,edx
c000afad:	c3                   	ret    

c000afae <KeDereferenceSymlink(char const*, char*)>:
c000afae:	55                   	push   ebp
c000afaf:	57                   	push   edi
c000afb0:	56                   	push   esi
c000afb1:	53                   	push   ebx
c000afb2:	83 ec 50             	sub    esp,0x50
c000afb5:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000afb9:	55                   	push   ebp
c000afba:	e8 ea ff ff ff       	call   c000afa9 <KiIsSymlinkRegistered(char const*)>
c000afbf:	5b                   	pop    ebx
c000afc0:	5e                   	pop    esi
c000afc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afc5:	09 d0                	or     eax,edx
c000afc7:	75 07                	jne    c000afd0 <KeDereferenceSymlink(char const*, char*)+0x22>
c000afc9:	31 ed                	xor    ebp,ebp
c000afcb:	e9 86 01 00 00       	jmp    c000b156 <KeDereferenceSymlink(char const*, char*)+0x1a8>
c000afd0:	83 ec 0c             	sub    esp,0xc
c000afd3:	89 d7                	mov    edi,edx
c000afd5:	68 14 01 00 00       	push   0x114
c000afda:	e8 d7 ca ff ff       	call   c0007ab6 <malloc>
c000afdf:	83 c4 0c             	add    esp,0xc
c000afe2:	89 c3                	mov    ebx,eax
c000afe4:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000afea:	55                   	push   ebp
c000afeb:	50                   	push   eax
c000afec:	e8 f9 06 00 00       	call   c000b6ea <File::File(char const*, Process*)>
c000aff1:	83 c4 10             	add    esp,0x10
c000aff4:	85 db                	test   ebx,ebx
c000aff6:	0f 84 41 01 00 00    	je     c000b13d <KeDereferenceSymlink(char const*, char*)+0x18f>
c000affc:	51                   	push   ecx
c000affd:	51                   	push   ecx
c000affe:	6a 01                	push   0x1
c000b000:	53                   	push   ebx
c000b001:	e8 a0 07 00 00       	call   c000b7a6 <File::open(FileOpenMode)>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	85 c0                	test   eax,eax
c000b00b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b00d:	74 09                	je     c000b018 <KeDereferenceSymlink(char const*, char*)+0x6a>
c000b00f:	83 ec 0c             	sub    esp,0xc
c000b012:	53                   	push   ebx
c000b013:	e9 1f 01 00 00       	jmp    c000b137 <KeDereferenceSymlink(char const*, char*)+0x189>
c000b018:	83 ec 0c             	sub    esp,0xc
c000b01b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000b01f:	56                   	push   esi
c000b020:	8d 6c 24 47          	lea    ebp,[esp+0x47]
c000b024:	55                   	push   ebp
c000b025:	6a 00                	push   0x0
c000b027:	6a 08                	push   0x8
c000b029:	53                   	push   ebx
c000b02a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b02d:	83 c4 20             	add    esp,0x20
c000b030:	85 c0                	test   eax,eax
c000b032:	0f 85 f1 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b038:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b03d:	0f 85 e6 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b043:	52                   	push   edx
c000b044:	52                   	push   edx
c000b045:	68 fe 11 02 c0       	push   0xc00211fe
c000b04a:	55                   	push   ebp
c000b04b:	e8 00 57 ff ff       	call   c0000750 <strcmp>
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	89 c5                	mov    ebp,eax
c000b055:	85 c0                	test   eax,eax
c000b057:	0f 85 cc 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b05d:	83 ec 0c             	sub    esp,0xc
c000b060:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b062:	56                   	push   esi
c000b063:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000b067:	51                   	push   ecx
c000b068:	6a 00                	push   0x0
c000b06a:	6a 08                	push   0x8
c000b06c:	53                   	push   ebx
c000b06d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b070:	83 c4 20             	add    esp,0x20
c000b073:	85 c0                	test   eax,eax
c000b075:	0f 85 ae 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b07b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b080:	0f 85 a3 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b086:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000b08a:	0f 85 39 ff ff ff    	jne    c000afc9 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b094:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000b098:	0f 85 2b ff ff ff    	jne    c000afc9 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b09e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b0a6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b0ae:	50                   	push   eax
c000b0af:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b0b3:	50                   	push   eax
c000b0b4:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b0b8:	50                   	push   eax
c000b0b9:	53                   	push   ebx
c000b0ba:	e8 e9 09 00 00       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c000b0bf:	83 c4 10             	add    esp,0x10
c000b0c2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b0c7:	85 c0                	test   eax,eax
c000b0c9:	75 5e                	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b0cb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b0cf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b0d3:	b9 0f 00 00 00       	mov    ecx,0xf
c000b0d8:	89 c2                	mov    edx,eax
c000b0da:	39 f1                	cmp    ecx,esi
c000b0dc:	19 fa                	sbb    edx,edi
c000b0de:	73 49                	jae    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b0e0:	83 c6 f0             	add    esi,0xfffffff0
c000b0e3:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0e8:	83 d7 ff             	adc    edi,0xffffffff
c000b0eb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b0ef:	39 f1                	cmp    ecx,esi
c000b0f1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b0f5:	19 f8                	sbb    eax,edi
c000b0f7:	72 44                	jb     c000b13d <KeDereferenceSymlink(char const*, char*)+0x18f>
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0fe:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b102:	51                   	push   ecx
c000b103:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b107:	57                   	push   edi
c000b108:	56                   	push   esi
c000b109:	53                   	push   ebx
c000b10a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b10d:	83 c4 20             	add    esp,0x20
c000b110:	85 c0                	test   eax,eax
c000b112:	75 15                	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b118:	89 c7                	mov    edi,eax
c000b11a:	c1 ff 1f             	sar    edi,0x1f
c000b11d:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b121:	75 06                	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b123:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b127:	74 19                	je     c000b142 <KeDereferenceSymlink(char const*, char*)+0x194>
c000b129:	83 ec 0c             	sub    esp,0xc
c000b12c:	53                   	push   ebx
c000b12d:	e8 d2 06 00 00       	call   c000b804 <File::close()>
c000b132:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b137:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b13a:	83 c4 10             	add    esp,0x10
c000b13d:	83 cd ff             	or     ebp,0xffffffff
c000b140:	eb 14                	jmp    c000b156 <KeDereferenceSymlink(char const*, char*)+0x1a8>
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	53                   	push   ebx
c000b146:	e8 b9 06 00 00       	call   c000b804 <File::close()>
c000b14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b14d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	83 c4 4c             	add    esp,0x4c
c000b159:	89 e8                	mov    eax,ebp
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	89 c3                	mov    ebx,eax
c000b17a:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	50                   	push   eax
c000b185:	e8 60 05 00 00       	call   c000b6ea <File::File(char const*, Process*)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	b8 01 00 00 00       	mov    eax,0x1
c000b192:	85 db                	test   ebx,ebx
c000b194:	0f 84 fb 00 00 00    	je     c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19a:	52                   	push   edx
c000b19b:	52                   	push   edx
c000b19c:	6a 12                	push   0x12
c000b19e:	53                   	push   ebx
c000b19f:	e8 02 06 00 00       	call   c000b7a6 <File::open(FileOpenMode)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	85 c0                	test   eax,eax
c000b1a9:	74 0b                	je     c000b1b6 <KeCreateSymlink(char const*, char const*)+0x56>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b0:	53                   	push   ebx
c000b1b1:	e9 d4 00 00 00       	jmp    c000b28a <KeCreateSymlink(char const*, char const*)+0x12a>
c000b1b6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1ba:	be 06 12 02 c0       	mov    esi,0xc0021206
c000b1bf:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c4:	fc                   	cld    
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	56                   	push   esi
c000b1d1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d5:	52                   	push   edx
c000b1d6:	6a 00                	push   0x0
c000b1d8:	6a 08                	push   0x8
c000b1da:	53                   	push   ebx
c000b1db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1de:	83 c4 20             	add    esp,0x20
c000b1e1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e6:	0f 85 90 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ec:	85 c0                	test   eax,eax
c000b1ee:	0f 85 88 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f4:	e8 57 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b200:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 5e                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 5a                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 2d                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 29                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b253:	50                   	push   eax
c000b254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b260:	e8 30 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	e8 97 05 00 00       	call   c000b804 <File::close()>
c000b26d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	31 c0                	xor    eax,eax
c000b27a:	eb 19                	jmp    c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 7f 05 00 00       	call   c000b804 <File::close()>
c000b285:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	b8 01 00 00 00       	mov    eax,0x1
c000b295:	83 c4 2c             	add    esp,0x2c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    
c000b29d:	90                   	nop

c000b29e <File::read(unsigned long long, void*, int*)>:
c000b29e:	53                   	push   ebx
c000b29f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2a7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2ae:	83 f8 19             	cmp    eax,0x19
c000b2b1:	77 35                	ja     c000b2e8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2b3:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b2ba:	85 c0                	test   eax,eax
c000b2bc:	74 2a                	je     c000b2e8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2be:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2c4:	85 c0                	test   eax,eax
c000b2c6:	74 20                	je     c000b2e8 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2cc:	74 21                	je     c000b2ef <File::read(unsigned long long, void*, int*)+0x51>
c000b2ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2d0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2d4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2e2:	5b                   	pop    ebx
c000b2e3:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2e6:	ff e0                	jmp    eax
c000b2e8:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ed:	eb 05                	jmp    c000b2f4 <File::read(unsigned long long, void*, int*)+0x56>
c000b2ef:	b8 05 00 00 00       	mov    eax,0x5
c000b2f4:	5b                   	pop    ebx
c000b2f5:	c3                   	ret    

c000b2f6 <File::write(unsigned long long, void*, int*)>:
c000b2f6:	53                   	push   ebx
c000b2f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b306:	83 f8 19             	cmp    eax,0x19
c000b309:	77 35                	ja     c000b340 <File::write(unsigned long long, void*, int*)+0x4a>
c000b30b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b312:	85 c0                	test   eax,eax
c000b314:	74 2a                	je     c000b340 <File::write(unsigned long long, void*, int*)+0x4a>
c000b316:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b31c:	85 c0                	test   eax,eax
c000b31e:	74 20                	je     c000b340 <File::write(unsigned long long, void*, int*)+0x4a>
c000b320:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b324:	74 21                	je     c000b347 <File::write(unsigned long long, void*, int*)+0x51>
c000b326:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b328:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b32c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b336:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b33a:	5b                   	pop    ebx
c000b33b:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b33e:	ff e0                	jmp    eax
c000b340:	b8 0b 00 00 00       	mov    eax,0xb
c000b345:	eb 05                	jmp    c000b34c <File::write(unsigned long long, void*, int*)+0x56>
c000b347:	b8 05 00 00 00       	mov    eax,0x5
c000b34c:	5b                   	pop    ebx
c000b34d:	c3                   	ret    

c000b34e <Directory::read(unsigned long long, void*, int*)>:
c000b34e:	53                   	push   ebx
c000b34f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b353:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b357:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b35e:	83 f8 19             	cmp    eax,0x19
c000b361:	77 35                	ja     c000b398 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b363:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b36a:	85 c0                	test   eax,eax
c000b36c:	74 2a                	je     c000b398 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b36e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b374:	85 c0                	test   eax,eax
c000b376:	74 20                	je     c000b398 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b378:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37c:	74 21                	je     c000b39f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b37e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b380:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b384:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b38a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b38e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b392:	5b                   	pop    ebx
c000b393:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b396:	ff e0                	jmp    eax
c000b398:	b8 0b 00 00 00       	mov    eax,0xb
c000b39d:	eb 05                	jmp    c000b3a4 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b39f:	b8 05 00 00 00       	mov    eax,0x5
c000b3a4:	5b                   	pop    ebx
c000b3a5:	c3                   	ret    

c000b3a6 <Directory::write(unsigned long long, void*, int*)>:
c000b3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3aa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b3b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b3b6:	83 fa 19             	cmp    edx,0x19
c000b3b9:	77 18                	ja     c000b3d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3bb:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b3c2:	85 d2                	test   edx,edx
c000b3c4:	74 0d                	je     c000b3d3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3c6:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3cd:	19 c0                	sbb    eax,eax
c000b3cf:	83 e0 0a             	and    eax,0xa
c000b3d2:	40                   	inc    eax
c000b3d3:	c3                   	ret    

c000b3d4 <File::isAtty()>:
c000b3d4:	31 c0                	xor    eax,eax
c000b3d6:	c3                   	ret    
c000b3d7:	90                   	nop

c000b3d8 <Directory::isAtty()>:
c000b3d8:	31 c0                	xor    eax,eax
c000b3da:	c3                   	ret    
c000b3db:	90                   	nop

c000b3dc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3dc:	b8 0a 00 00 00       	mov    eax,0xa
c000b3e1:	c3                   	ret    

c000b3e2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3e2:	b8 0a 00 00 00       	mov    eax,0xa
c000b3e7:	c3                   	ret    

c000b3e8 <Filesystem::allocateSwapfile(char const*, int)>:
c000b3e8:	31 c0                	xor    eax,eax
c000b3ea:	31 d2                	xor    edx,edx
c000b3ec:	c3                   	ret    
c000b3ed:	90                   	nop

c000b3ee <File::~File()>:
c000b3ee:	83 ec 0c             	sub    esp,0xc
c000b3f1:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fa:	89 10                	mov    DWORD PTR [eax],edx
c000b3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	50                   	push   eax
c000b404:	e8 9b df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b409:	83 c4 10             	add    esp,0x10
c000b40c:	90                   	nop
c000b40d:	83 c4 0c             	add    esp,0xc
c000b410:	c3                   	ret    
c000b411:	90                   	nop

c000b412 <File::~File()>:
c000b412:	83 ec 0c             	sub    esp,0xc
c000b415:	83 ec 0c             	sub    esp,0xc
c000b418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41c:	e8 cd ff ff ff       	call   c000b3ee <File::~File()>
c000b421:	83 c4 10             	add    esp,0x10
c000b424:	83 ec 08             	sub    esp,0x8
c000b427:	68 14 01 00 00       	push   0x114
c000b42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b430:	e8 e3 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b435:	83 c4 10             	add    esp,0x10
c000b438:	83 c4 0c             	add    esp,0xc
c000b43b:	c3                   	ret    

c000b43c <Directory::~Directory()>:
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	ba a0 12 02 c0       	mov    edx,0xc00212a0
c000b444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b448:	89 10                	mov    DWORD PTR [eax],edx
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	83 ec 0c             	sub    esp,0xc
c000b451:	50                   	push   eax
c000b452:	e8 4d df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	90                   	nop
c000b45b:	83 c4 0c             	add    esp,0xc
c000b45e:	c3                   	ret    
c000b45f:	90                   	nop

c000b460 <Directory::~Directory()>:
c000b460:	83 ec 0c             	sub    esp,0xc
c000b463:	83 ec 0c             	sub    esp,0xc
c000b466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46a:	e8 cd ff ff ff       	call   c000b43c <Directory::~Directory()>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	83 ec 08             	sub    esp,0x8
c000b475:	68 14 01 00 00       	push   0x114
c000b47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47e:	e8 95 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	83 c4 0c             	add    esp,0xc
c000b489:	c3                   	ret    

c000b48a <Filesystem::Filesystem()>:
c000b48a:	ba 18 12 02 c0       	mov    edx,0xc0021218
c000b48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b493:	89 10                	mov    DWORD PTR [eax],edx
c000b495:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000b49b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b49f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a6:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c000b4ab:	90                   	nop
c000b4ac:	c3                   	ret    
c000b4ad:	90                   	nop

c000b4ae <Filesystem::~Filesystem()>:
c000b4ae:	ba 18 12 02 c0       	mov    edx,0xc0021218
c000b4b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4b7:	89 10                	mov    DWORD PTR [eax],edx
c000b4b9:	90                   	nop
c000b4ba:	c3                   	ret    
c000b4bb:	90                   	nop

c000b4bc <Filesystem::~Filesystem()>:
c000b4bc:	83 ec 0c             	sub    esp,0xc
c000b4bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4c3:	e8 e6 ff ff ff       	call   c000b4ae <Filesystem::~Filesystem()>
c000b4c8:	83 c4 04             	add    esp,0x4
c000b4cb:	83 ec 08             	sub    esp,0x8
c000b4ce:	6a 08                	push   0x8
c000b4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d4:	e8 3f f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4d9:	83 c4 10             	add    esp,0x10
c000b4dc:	83 c4 0c             	add    esp,0xc
c000b4df:	c3                   	ret    

c000b4e0 <Fs::getcwd(Process*, char*, int)>:
c000b4e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4e4:	31 c0                	xor    eax,eax
c000b4e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4e9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4ed:	7d 15                	jge    c000b504 <Fs::getcwd(Process*, char*, int)+0x24>
c000b4ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4f3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4fa:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4fd:	84 c9                	test   cl,cl
c000b4ff:	74 06                	je     c000b507 <Fs::getcwd(Process*, char*, int)+0x27>
c000b501:	40                   	inc    eax
c000b502:	eb e2                	jmp    c000b4e6 <Fs::getcwd(Process*, char*, int)+0x6>
c000b504:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b507:	31 c0                	xor    eax,eax
c000b509:	c3                   	ret    

c000b50a <Fs::initVFS()>:
c000b50a:	83 ec 18             	sub    esp,0x18
c000b50d:	6a 08                	push   0x8
c000b50f:	e8 a2 c5 ff ff       	call   c0007ab6 <malloc>
c000b514:	89 04 24             	mov    DWORD PTR [esp],eax
c000b517:	e8 0c e1 00 00       	call   c0019628 <FAT::FAT()>
c000b51c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b523:	e8 8e c5 ff ff       	call   c0007ab6 <malloc>
c000b528:	89 04 24             	mov    DWORD PTR [esp],eax
c000b52b:	e8 24 f0 00 00       	call   c001a554 <ISO9660::ISO9660()>
c000b530:	83 c4 1c             	add    esp,0x1c
c000b533:	c3                   	ret    

c000b534 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b534:	55                   	push   ebp
c000b535:	57                   	push   edi
c000b536:	56                   	push   esi
c000b537:	53                   	push   ebx
c000b538:	81 ec 10 04 00 00    	sub    esp,0x410
c000b53e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b545:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b54c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b553:	68 00 04 00 00       	push   0x400
c000b558:	6a 00                	push   0x0
c000b55a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b55e:	56                   	push   esi
c000b55f:	e8 8c 4f ff ff       	call   c00004f0 <memset>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b56b:	75 0b                	jne    c000b578 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b56d:	50                   	push   eax
c000b56e:	50                   	push   eax
c000b56f:	57                   	push   edi
c000b570:	56                   	push   esi
c000b571:	e8 ca 50 ff ff       	call   c0000640 <strcpy>
c000b576:	eb 44                	jmp    c000b5bc <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b578:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b57b:	83 f8 5c             	cmp    eax,0x5c
c000b57e:	74 05                	je     c000b585 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b580:	83 f8 2f             	cmp    eax,0x2f
c000b583:	75 18                	jne    c000b59d <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b585:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b588:	3c 60                	cmp    al,0x60
c000b58a:	7e 03                	jle    c000b58f <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b58c:	83 e8 20             	sub    eax,0x20
c000b58f:	88 04 24             	mov    BYTE PTR [esp],al
c000b592:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b599:	50                   	push   eax
c000b59a:	50                   	push   eax
c000b59b:	eb 18                	jmp    c000b5b5 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b59d:	50                   	push   eax
c000b59e:	50                   	push   eax
c000b59f:	55                   	push   ebp
c000b5a0:	56                   	push   esi
c000b5a1:	e8 9a 50 ff ff       	call   c0000640 <strcpy>
c000b5a6:	5a                   	pop    edx
c000b5a7:	59                   	pop    ecx
c000b5a8:	68 b8 21 02 c0       	push   0xc00221b8
c000b5ad:	56                   	push   esi
c000b5ae:	e8 8d 52 ff ff       	call   c0000840 <strcat>
c000b5b3:	5d                   	pop    ebp
c000b5b4:	58                   	pop    eax
c000b5b5:	57                   	push   edi
c000b5b6:	56                   	push   esi
c000b5b7:	e8 84 52 ff ff       	call   c0000840 <strcat>
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b5c2:	3c 60                	cmp    al,0x60
c000b5c4:	7e 03                	jle    c000b5c9 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b5c6:	83 e8 20             	sub    eax,0x20
c000b5c9:	88 04 24             	mov    BYTE PTR [esp],al
c000b5cc:	88 03                	mov    BYTE PTR [ebx],al
c000b5ce:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5d5:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5db:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5df:	bf 03 00 00 00       	mov    edi,0x3
c000b5e4:	b8 03 00 00 00       	mov    eax,0x3
c000b5e9:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b5ed:	89 ea                	mov    edx,ebp
c000b5ef:	85 ed                	test   ebp,ebp
c000b5f1:	0f 84 97 00 00 00    	je     c000b68e <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b5f7:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b5fa:	83 fd 5c             	cmp    ebp,0x5c
c000b5fd:	74 05                	je     c000b604 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b5ff:	83 fd 2f             	cmp    ebp,0x2f
c000b602:	75 12                	jne    c000b616 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b604:	89 c5                	mov    ebp,eax
c000b606:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b60b:	74 09                	je     c000b616 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b60d:	40                   	inc    eax
c000b60e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b612:	89 cf                	mov    edi,ecx
c000b614:	eb d3                	jmp    c000b5e9 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b616:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b61b:	0f be ea             	movsx  ebp,dl
c000b61e:	75 5e                	jne    c000b67e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b620:	83 fd 2e             	cmp    ebp,0x2e
c000b623:	75 59                	jne    c000b67e <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b625:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b629:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b62e:	74 18                	je     c000b648 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b630:	83 fd 2e             	cmp    ebp,0x2e
c000b633:	74 53                	je     c000b688 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b635:	89 f9                	mov    ecx,edi
c000b637:	41                   	inc    ecx
c000b638:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b63c:	83 fa 2f             	cmp    edx,0x2f
c000b63f:	74 f6                	je     c000b637 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b641:	83 fa 5c             	cmp    edx,0x5c
c000b644:	74 f1                	je     c000b637 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b646:	eb ca                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b648:	83 fd 2e             	cmp    ebp,0x2e
c000b64b:	74 3b                	je     c000b688 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b64d:	83 f8 03             	cmp    eax,0x3
c000b650:	74 c0                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b652:	41                   	inc    ecx
c000b653:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b657:	83 fa 2f             	cmp    edx,0x2f
c000b65a:	74 f6                	je     c000b652 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b65c:	83 fa 5c             	cmp    edx,0x5c
c000b65f:	74 f1                	je     c000b652 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b661:	48                   	dec    eax
c000b662:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b666:	75 06                	jne    c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b668:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b66c:	eb f3                	jmp    c000b661 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b66e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b672:	74 07                	je     c000b67b <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b674:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b678:	48                   	dec    eax
c000b679:	eb f3                	jmp    c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b67b:	40                   	inc    eax
c000b67c:	eb 94                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b67e:	83 fd 2f             	cmp    ebp,0x2f
c000b681:	74 8f                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b683:	83 fd 5c             	cmp    ebp,0x5c
c000b686:	74 8a                	je     c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b688:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b68b:	40                   	inc    eax
c000b68c:	eb 84                	jmp    c000b612 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b68e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b692:	83 ec 0c             	sub    esp,0xc
c000b695:	53                   	push   ebx
c000b696:	e8 d5 4e ff ff       	call   c0000570 <strlen>
c000b69b:	83 c4 10             	add    esp,0x10
c000b69e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6a3:	75 26                	jne    c000b6cb <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6a5:	83 ec 0c             	sub    esp,0xc
c000b6a8:	53                   	push   ebx
c000b6a9:	e8 c2 4e ff ff       	call   c0000570 <strlen>
c000b6ae:	83 c4 10             	add    esp,0x10
c000b6b1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6b6:	74 26                	je     c000b6de <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	53                   	push   ebx
c000b6bc:	e8 af 4e ff ff       	call   c0000570 <strlen>
c000b6c1:	83 c4 10             	add    esp,0x10
c000b6c4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6c9:	eb c7                	jmp    c000b692 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b6cb:	83 ec 0c             	sub    esp,0xc
c000b6ce:	53                   	push   ebx
c000b6cf:	e8 9c 4e ff ff       	call   c0000570 <strlen>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6dc:	74 c7                	je     c000b6a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b6de:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b6e4:	5b                   	pop    ebx
c000b6e5:	5e                   	pop    esi
c000b6e6:	5f                   	pop    edi
c000b6e7:	5d                   	pop    ebp
c000b6e8:	c3                   	ret    
c000b6e9:	90                   	nop

c000b6ea <File::File(char const*, Process*)>:
c000b6ea:	83 ec 0c             	sub    esp,0xc
c000b6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f1:	83 ec 08             	sub    esp,0x8
c000b6f4:	6a 00                	push   0x0
c000b6f6:	50                   	push   eax
c000b6f7:	e8 c2 da ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b6fc:	83 c4 10             	add    esp,0x10
c000b6ff:	ba 84 12 02 c0       	mov    edx,0xc0021284
c000b704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b708:	89 10                	mov    DWORD PTR [eax],edx
c000b70a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b70e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b718:	83 c0 0d             	add    eax,0xd
c000b71b:	83 ec 04             	sub    esp,0x4
c000b71e:	52                   	push   edx
c000b71f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b723:	50                   	push   eax
c000b724:	e8 0b fe ff ff       	call   c000b534 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b729:	83 c4 10             	add    esp,0x10
c000b72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b730:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b733:	83 e8 41             	sub    eax,0x41
c000b736:	88 c2                	mov    dl,al
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b746:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b754:	0f b6 c0             	movzx  eax,al
c000b757:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b75e:	85 c0                	test   eax,eax
c000b760:	74 3e                	je     c000b7a0 <File::File(char const*, Process*)+0xb6>
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b76c:	0f b6 c0             	movzx  eax,al
c000b76f:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b776:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b77c:	85 c0                	test   eax,eax
c000b77e:	75 20                	jne    c000b7a0 <File::File(char const*, Process*)+0xb6>
c000b780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b784:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b78a:	0f b6 c0             	movzx  eax,al
c000b78d:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	50                   	push   eax
c000b798:	e8 75 21 00 00       	call   c000d912 <LogicalDisk::mount()>
c000b79d:	83 c4 10             	add    esp,0x10
c000b7a0:	90                   	nop
c000b7a1:	83 c4 0c             	add    esp,0xc
c000b7a4:	c3                   	ret    
c000b7a5:	90                   	nop

c000b7a6 <File::open(FileOpenMode)>:
c000b7a6:	53                   	push   ebx
c000b7a7:	b8 0b 00 00 00       	mov    eax,0xb
c000b7ac:	83 ec 08             	sub    esp,0x8
c000b7af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7ba:	83 fa 19             	cmp    edx,0x19
c000b7bd:	77 40                	ja     c000b7ff <File::open(FileOpenMode)+0x59>
c000b7bf:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b7c6:	85 d2                	test   edx,edx
c000b7c8:	74 35                	je     c000b7ff <File::open(FileOpenMode)+0x59>
c000b7ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7d0:	85 d2                	test   edx,edx
c000b7d2:	74 2b                	je     c000b7ff <File::open(FileOpenMode)+0x59>
c000b7d4:	b8 06 00 00 00       	mov    eax,0x6
c000b7d9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7dd:	75 20                	jne    c000b7ff <File::open(FileOpenMode)+0x59>
c000b7df:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7eb:	51                   	push   ecx
c000b7ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7ef:	51                   	push   ecx
c000b7f0:	52                   	push   edx
c000b7f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b7f4:	83 c4 10             	add    esp,0x10
c000b7f7:	85 c0                	test   eax,eax
c000b7f9:	75 04                	jne    c000b7ff <File::open(FileOpenMode)+0x59>
c000b7fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7ff:	83 c4 08             	add    esp,0x8
c000b802:	5b                   	pop    ebx
c000b803:	c3                   	ret    

c000b804 <File::close()>:
c000b804:	53                   	push   ebx
c000b805:	b8 0b 00 00 00       	mov    eax,0xb
c000b80a:	83 ec 08             	sub    esp,0x8
c000b80d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b811:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b818:	83 f9 19             	cmp    ecx,0x19
c000b81b:	77 41                	ja     c000b85e <File::close()+0x5a>
c000b81d:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b824:	85 db                	test   ebx,ebx
c000b826:	74 36                	je     c000b85e <File::close()+0x5a>
c000b828:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b82f:	74 2d                	je     c000b85e <File::close()+0x5a>
c000b831:	b8 05 00 00 00       	mov    eax,0x5
c000b836:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b83a:	74 22                	je     c000b85e <File::close()+0x5a>
c000b83c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b840:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000b847:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b84d:	53                   	push   ebx
c000b84e:	53                   	push   ebx
c000b84f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b851:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b857:	50                   	push   eax
c000b858:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b85b:	83 c4 10             	add    esp,0x10
c000b85e:	83 c4 08             	add    esp,0x8
c000b861:	5b                   	pop    ebx
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <File::seek(unsigned long long)>:
c000b864:	56                   	push   esi
c000b865:	53                   	push   ebx
c000b866:	b8 0b 00 00 00       	mov    eax,0xb
c000b86b:	51                   	push   ecx
c000b86c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b870:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b874:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b87b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b87f:	83 fa 19             	cmp    edx,0x19
c000b882:	77 31                	ja     c000b8b5 <File::seek(unsigned long long)+0x51>
c000b884:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b88b:	85 d2                	test   edx,edx
c000b88d:	74 26                	je     c000b8b5 <File::seek(unsigned long long)+0x51>
c000b88f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b895:	85 d2                	test   edx,edx
c000b897:	74 1c                	je     c000b8b5 <File::seek(unsigned long long)+0x51>
c000b899:	b8 05 00 00 00       	mov    eax,0x5
c000b89e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8a2:	74 11                	je     c000b8b5 <File::seek(unsigned long long)+0x51>
c000b8a4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8a6:	53                   	push   ebx
c000b8a7:	51                   	push   ecx
c000b8a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8ae:	52                   	push   edx
c000b8af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	5a                   	pop    edx
c000b8b6:	5b                   	pop    ebx
c000b8b7:	5e                   	pop    esi
c000b8b8:	c3                   	ret    
c000b8b9:	90                   	nop

c000b8ba <File::truncate(unsigned long long)>:
c000b8ba:	56                   	push   esi
c000b8bb:	53                   	push   ebx
c000b8bc:	b8 0b 00 00 00       	mov    eax,0xb
c000b8c1:	51                   	push   ecx
c000b8c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8ca:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8d5:	83 fa 19             	cmp    edx,0x19
c000b8d8:	77 31                	ja     c000b90b <File::truncate(unsigned long long)+0x51>
c000b8da:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b8e1:	85 d2                	test   edx,edx
c000b8e3:	74 26                	je     c000b90b <File::truncate(unsigned long long)+0x51>
c000b8e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8eb:	85 d2                	test   edx,edx
c000b8ed:	74 1c                	je     c000b90b <File::truncate(unsigned long long)+0x51>
c000b8ef:	b8 05 00 00 00       	mov    eax,0x5
c000b8f4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8f8:	74 11                	je     c000b90b <File::truncate(unsigned long long)+0x51>
c000b8fa:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8fc:	53                   	push   ebx
c000b8fd:	51                   	push   ecx
c000b8fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b904:	52                   	push   edx
c000b905:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b908:	83 c4 10             	add    esp,0x10
c000b90b:	5a                   	pop    edx
c000b90c:	5b                   	pop    ebx
c000b90d:	5e                   	pop    esi
c000b90e:	c3                   	ret    
c000b90f:	90                   	nop

c000b910 <File::tell(unsigned long long*)>:
c000b910:	83 ec 0c             	sub    esp,0xc
c000b913:	b8 0b 00 00 00       	mov    eax,0xb
c000b918:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b91c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b923:	83 fa 19             	cmp    edx,0x19
c000b926:	77 34                	ja     c000b95c <File::tell(unsigned long long*)+0x4c>
c000b928:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b92f:	85 d2                	test   edx,edx
c000b931:	74 29                	je     c000b95c <File::tell(unsigned long long*)+0x4c>
c000b933:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b939:	85 d2                	test   edx,edx
c000b93b:	74 1f                	je     c000b95c <File::tell(unsigned long long*)+0x4c>
c000b93d:	b8 05 00 00 00       	mov    eax,0x5
c000b942:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b946:	74 14                	je     c000b95c <File::tell(unsigned long long*)+0x4c>
c000b948:	50                   	push   eax
c000b949:	8b 02                	mov    eax,DWORD PTR [edx]
c000b94b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b94f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b955:	52                   	push   edx
c000b956:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b959:	83 c4 10             	add    esp,0x10
c000b95c:	83 c4 0c             	add    esp,0xc
c000b95f:	c3                   	ret    

c000b960 <File::rewind()>:
c000b960:	83 ec 10             	sub    esp,0x10
c000b963:	6a 00                	push   0x0
c000b965:	6a 00                	push   0x0
c000b967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b96b:	e8 f4 fe ff ff       	call   c000b864 <File::seek(unsigned long long)>
c000b970:	83 c4 1c             	add    esp,0x1c
c000b973:	c3                   	ret    

c000b974 <File::unlink()>:
c000b974:	83 ec 0c             	sub    esp,0xc
c000b977:	b8 0b 00 00 00       	mov    eax,0xb
c000b97c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b980:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b987:	83 f9 19             	cmp    ecx,0x19
c000b98a:	77 2f                	ja     c000b9bb <File::unlink()+0x47>
c000b98c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b993:	85 c9                	test   ecx,ecx
c000b995:	74 24                	je     c000b9bb <File::unlink()+0x47>
c000b997:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b99d:	85 c9                	test   ecx,ecx
c000b99f:	74 1a                	je     c000b9bb <File::unlink()+0x47>
c000b9a1:	b8 06 00 00 00       	mov    eax,0x6
c000b9a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9aa:	75 0f                	jne    c000b9bb <File::unlink()+0x47>
c000b9ac:	83 c2 0d             	add    edx,0xd
c000b9af:	50                   	push   eax
c000b9b0:	50                   	push   eax
c000b9b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9b3:	52                   	push   edx
c000b9b4:	51                   	push   ecx
c000b9b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	83 c4 0c             	add    esp,0xc
c000b9be:	c3                   	ret    
c000b9bf:	90                   	nop

c000b9c0 <File::rename(char const*)>:
c000b9c0:	83 ec 0c             	sub    esp,0xc
c000b9c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b9c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9d3:	83 f9 19             	cmp    ecx,0x19
c000b9d6:	77 32                	ja     c000ba0a <File::rename(char const*)+0x4a>
c000b9d8:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9df:	85 c9                	test   ecx,ecx
c000b9e1:	74 27                	je     c000ba0a <File::rename(char const*)+0x4a>
c000b9e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9e9:	85 c9                	test   ecx,ecx
c000b9eb:	74 1d                	je     c000ba0a <File::rename(char const*)+0x4a>
c000b9ed:	b8 06 00 00 00       	mov    eax,0x6
c000b9f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9f6:	75 12                	jne    c000ba0a <File::rename(char const*)+0x4a>
c000b9f8:	83 c2 0d             	add    edx,0xd
c000b9fb:	50                   	push   eax
c000b9fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba02:	52                   	push   edx
c000ba03:	51                   	push   ecx
c000ba04:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	83 c4 0c             	add    esp,0xc
c000ba0d:	c3                   	ret    

c000ba0e <File::chfatattr(unsigned char, unsigned char)>:
c000ba0e:	57                   	push   edi
c000ba0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ba14:	56                   	push   esi
c000ba15:	53                   	push   ebx
c000ba16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba1a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba29:	83 f9 19             	cmp    ecx,0x19
c000ba2c:	77 37                	ja     c000ba65 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba2e:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba35:	85 c9                	test   ecx,ecx
c000ba37:	74 2c                	je     c000ba65 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba39:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba3f:	85 c9                	test   ecx,ecx
c000ba41:	74 22                	je     c000ba65 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba43:	b8 06 00 00 00       	mov    eax,0x6
c000ba48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba4c:	75 17                	jne    c000ba65 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba4e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba50:	89 f0                	mov    eax,esi
c000ba52:	83 c2 0d             	add    edx,0xd
c000ba55:	0f b6 f0             	movzx  esi,al
c000ba58:	0f b6 db             	movzx  ebx,bl
c000ba5b:	56                   	push   esi
c000ba5c:	53                   	push   ebx
c000ba5d:	52                   	push   edx
c000ba5e:	51                   	push   ecx
c000ba5f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba62:	83 c4 10             	add    esp,0x10
c000ba65:	5b                   	pop    ebx
c000ba66:	5e                   	pop    esi
c000ba67:	5f                   	pop    edi
c000ba68:	c3                   	ret    
c000ba69:	90                   	nop

c000ba6a <File::exists()>:
c000ba6a:	83 ec 0c             	sub    esp,0xc
c000ba6d:	31 c0                	xor    eax,eax
c000ba6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba73:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba7a:	83 f9 19             	cmp    ecx,0x19
c000ba7d:	77 24                	ja     c000baa3 <File::exists()+0x39>
c000ba7f:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba86:	85 c9                	test   ecx,ecx
c000ba88:	74 19                	je     c000baa3 <File::exists()+0x39>
c000ba8a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba90:	85 c9                	test   ecx,ecx
c000ba92:	74 0f                	je     c000baa3 <File::exists()+0x39>
c000ba94:	83 c2 0d             	add    edx,0xd
c000ba97:	50                   	push   eax
c000ba98:	50                   	push   eax
c000ba99:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba9b:	52                   	push   edx
c000ba9c:	51                   	push   ecx
c000ba9d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000baa0:	83 c4 10             	add    esp,0x10
c000baa3:	83 c4 0c             	add    esp,0xc
c000baa6:	c3                   	ret    
c000baa7:	90                   	nop

c000baa8 <File::stat(unsigned long long*, bool*)>:
c000baa8:	56                   	push   esi
c000baa9:	53                   	push   ebx
c000baaa:	50                   	push   eax
c000baab:	b8 0b 00 00 00       	mov    eax,0xb
c000bab0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bab4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bab8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000babf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bac3:	83 f9 19             	cmp    ecx,0x19
c000bac6:	77 3d                	ja     c000bb05 <File::stat(unsigned long long*, bool*)+0x5d>
c000bac8:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bacf:	85 c9                	test   ecx,ecx
c000bad1:	74 32                	je     c000bb05 <File::stat(unsigned long long*, bool*)+0x5d>
c000bad3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bad9:	85 c9                	test   ecx,ecx
c000badb:	74 28                	je     c000bb05 <File::stat(unsigned long long*, bool*)+0x5d>
c000badd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000badf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bae3:	74 13                	je     c000baf8 <File::stat(unsigned long long*, bool*)+0x50>
c000bae5:	83 ec 04             	sub    esp,0x4
c000bae8:	56                   	push   esi
c000bae9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000baef:	51                   	push   ecx
c000baf0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000baf3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000baf6:	eb 0a                	jmp    c000bb02 <File::stat(unsigned long long*, bool*)+0x5a>
c000baf8:	53                   	push   ebx
c000baf9:	83 c2 0d             	add    edx,0xd
c000bafc:	56                   	push   esi
c000bafd:	52                   	push   edx
c000bafe:	51                   	push   ecx
c000baff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb02:	83 c4 10             	add    esp,0x10
c000bb05:	5a                   	pop    edx
c000bb06:	5b                   	pop    ebx
c000bb07:	5e                   	pop    esi
c000bb08:	c3                   	ret    

c000bb09 <Fs::setcwd(Process*, char*)>:
c000bb09:	55                   	push   ebp
c000bb0a:	57                   	push   edi
c000bb0b:	56                   	push   esi
c000bb0c:	53                   	push   ebx
c000bb0d:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb13:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb1a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb20:	57                   	push   edi
c000bb21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb28:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb2c:	56                   	push   esi
c000bb2d:	e8 02 fa ff ff       	call   c000b534 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb32:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb35:	e8 36 4a ff ff       	call   c0000570 <strlen>
c000bb3a:	83 c4 10             	add    esp,0x10
c000bb3d:	83 f8 02             	cmp    eax,0x2
c000bb40:	77 15                	ja     c000bb57 <Fs::setcwd(Process*, char*)+0x4e>
c000bb42:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb47:	83 eb 41             	sub    ebx,0x41
c000bb4a:	8b 04 9d e0 94 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb51:	85 c0                	test   eax,eax
c000bb53:	75 1c                	jne    c000bb71 <Fs::setcwd(Process*, char*)+0x68>
c000bb55:	eb 2f                	jmp    c000bb86 <Fs::setcwd(Process*, char*)+0x7d>
c000bb57:	83 ec 0c             	sub    esp,0xc
c000bb5a:	56                   	push   esi
c000bb5b:	e8 10 4a ff ff       	call   c0000570 <strlen>
c000bb60:	83 c4 10             	add    esp,0x10
c000bb63:	83 f8 03             	cmp    eax,0x3
c000bb66:	75 57                	jne    c000bbbf <Fs::setcwd(Process*, char*)+0xb6>
c000bb68:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb6d:	75 50                	jne    c000bbbf <Fs::setcwd(Process*, char*)+0xb6>
c000bb6f:	eb d1                	jmp    c000bb42 <Fs::setcwd(Process*, char*)+0x39>
c000bb71:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb78:	75 0c                	jne    c000bb86 <Fs::setcwd(Process*, char*)+0x7d>
c000bb7a:	83 ec 0c             	sub    esp,0xc
c000bb7d:	50                   	push   eax
c000bb7e:	e8 8f 1d 00 00       	call   c000d912 <LogicalDisk::mount()>
c000bb83:	83 c4 10             	add    esp,0x10
c000bb86:	b8 03 00 00 00       	mov    eax,0x3
c000bb8b:	83 fb 19             	cmp    ebx,0x19
c000bb8e:	0f 87 c6 00 00 00    	ja     c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bb94:	8b 14 9d e0 94 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb9b:	b8 05 00 00 00       	mov    eax,0x5
c000bba0:	85 d2                	test   edx,edx
c000bba2:	0f 84 b2 00 00 00    	je     c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bba8:	b8 06 00 00 00       	mov    eax,0x6
c000bbad:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bbb4:	0f 85 92 00 00 00    	jne    c000bc4c <Fs::setcwd(Process*, char*)+0x143>
c000bbba:	e9 9b 00 00 00       	jmp    c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bbbf:	83 ec 0c             	sub    esp,0xc
c000bbc2:	68 14 01 00 00       	push   0x114
c000bbc7:	e8 ea be ff ff       	call   c0007ab6 <malloc>
c000bbcc:	83 c4 0c             	add    esp,0xc
c000bbcf:	89 c3                	mov    ebx,eax
c000bbd1:	55                   	push   ebp
c000bbd2:	56                   	push   esi
c000bbd3:	50                   	push   eax
c000bbd4:	e8 11 fb ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c000bbd9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbde:	83 c4 0c             	add    esp,0xc
c000bbe1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbe5:	50                   	push   eax
c000bbe6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bbea:	50                   	push   eax
c000bbeb:	53                   	push   ebx
c000bbec:	e8 b7 fe ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c000bbf1:	83 c4 10             	add    esp,0x10
c000bbf4:	83 f8 02             	cmp    eax,0x2
c000bbf7:	74 27                	je     c000bc20 <Fs::setcwd(Process*, char*)+0x117>
c000bbf9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bbfe:	75 1c                	jne    c000bc1c <Fs::setcwd(Process*, char*)+0x113>
c000bc00:	b8 02 00 00 00       	mov    eax,0x2
c000bc05:	85 db                	test   ebx,ebx
c000bc07:	74 51                	je     c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bc09:	83 ec 0c             	sub    esp,0xc
c000bc0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc0e:	53                   	push   ebx
c000bc0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc12:	83 c4 10             	add    esp,0x10
c000bc15:	b8 02 00 00 00       	mov    eax,0x2
c000bc1a:	eb 3e                	jmp    c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bc1c:	85 c0                	test   eax,eax
c000bc1e:	74 1c                	je     c000bc3c <Fs::setcwd(Process*, char*)+0x133>
c000bc20:	b8 01 00 00 00       	mov    eax,0x1
c000bc25:	85 db                	test   ebx,ebx
c000bc27:	74 31                	je     c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bc29:	83 ec 0c             	sub    esp,0xc
c000bc2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc2e:	53                   	push   ebx
c000bc2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	b8 01 00 00 00       	mov    eax,0x1
c000bc3a:	eb 1e                	jmp    c000bc5a <Fs::setcwd(Process*, char*)+0x151>
c000bc3c:	85 db                	test   ebx,ebx
c000bc3e:	74 0c                	je     c000bc4c <Fs::setcwd(Process*, char*)+0x143>
c000bc40:	83 ec 0c             	sub    esp,0xc
c000bc43:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc45:	53                   	push   ebx
c000bc46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc49:	83 c4 10             	add    esp,0x10
c000bc4c:	50                   	push   eax
c000bc4d:	50                   	push   eax
c000bc4e:	56                   	push   esi
c000bc4f:	57                   	push   edi
c000bc50:	e8 eb 49 ff ff       	call   c0000640 <strcpy>
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	31 c0                	xor    eax,eax
c000bc5a:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc60:	5b                   	pop    ebx
c000bc61:	5e                   	pop    esi
c000bc62:	5f                   	pop    edi
c000bc63:	5d                   	pop    ebp
c000bc64:	c3                   	ret    
c000bc65:	90                   	nop

c000bc66 <Directory::Directory(char const*, Process*)>:
c000bc66:	83 ec 0c             	sub    esp,0xc
c000bc69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6d:	83 ec 08             	sub    esp,0x8
c000bc70:	6a 00                	push   0x0
c000bc72:	50                   	push   eax
c000bc73:	e8 46 d5 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bc78:	83 c4 10             	add    esp,0x10
c000bc7b:	ba a0 12 02 c0       	mov    edx,0xc00212a0
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	89 10                	mov    DWORD PTR [eax],edx
c000bc86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc94:	83 c0 0d             	add    eax,0xd
c000bc97:	83 ec 04             	sub    esp,0x4
c000bc9a:	52                   	push   edx
c000bc9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9f:	50                   	push   eax
c000bca0:	e8 8f f8 ff ff       	call   c000b534 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bcaf:	83 e8 41             	sub    eax,0x41
c000bcb2:	88 c2                	mov    dl,al
c000bcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcca:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcd0:	0f b6 c0             	movzx  eax,al
c000bcd3:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcda:	85 c0                	test   eax,eax
c000bcdc:	74 3e                	je     c000bd1c <Directory::Directory(char const*, Process*)+0xb6>
c000bcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bce8:	0f b6 c0             	movzx  eax,al
c000bceb:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcf2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bcf8:	85 c0                	test   eax,eax
c000bcfa:	75 20                	jne    c000bd1c <Directory::Directory(char const*, Process*)+0xb6>
c000bcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd06:	0f b6 c0             	movzx  eax,al
c000bd09:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bd10:	83 ec 0c             	sub    esp,0xc
c000bd13:	50                   	push   eax
c000bd14:	e8 f9 1b 00 00       	call   c000d912 <LogicalDisk::mount()>
c000bd19:	83 c4 10             	add    esp,0x10
c000bd1c:	90                   	nop
c000bd1d:	83 c4 0c             	add    esp,0xc
c000bd20:	c3                   	ret    
c000bd21:	90                   	nop

c000bd22 <Directory::open()>:
c000bd22:	53                   	push   ebx
c000bd23:	b8 0b 00 00 00       	mov    eax,0xb
c000bd28:	83 ec 08             	sub    esp,0x8
c000bd2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd2f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd36:	83 fa 19             	cmp    edx,0x19
c000bd39:	77 3d                	ja     c000bd78 <Directory::open()+0x56>
c000bd3b:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000bd42:	85 d2                	test   edx,edx
c000bd44:	74 32                	je     c000bd78 <Directory::open()+0x56>
c000bd46:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd4c:	85 d2                	test   edx,edx
c000bd4e:	74 28                	je     c000bd78 <Directory::open()+0x56>
c000bd50:	b8 06 00 00 00       	mov    eax,0x6
c000bd55:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd59:	75 1d                	jne    c000bd78 <Directory::open()+0x56>
c000bd5b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd61:	50                   	push   eax
c000bd62:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd64:	51                   	push   ecx
c000bd65:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd68:	51                   	push   ecx
c000bd69:	52                   	push   edx
c000bd6a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	85 c0                	test   eax,eax
c000bd72:	75 04                	jne    c000bd78 <Directory::open()+0x56>
c000bd74:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd78:	83 c4 08             	add    esp,0x8
c000bd7b:	5b                   	pop    ebx
c000bd7c:	c3                   	ret    
c000bd7d:	90                   	nop

c000bd7e <Directory::close()>:
c000bd7e:	53                   	push   ebx
c000bd7f:	b8 0b 00 00 00       	mov    eax,0xb
c000bd84:	83 ec 08             	sub    esp,0x8
c000bd87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd8b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd92:	83 f9 19             	cmp    ecx,0x19
c000bd95:	77 41                	ja     c000bdd8 <Directory::close()+0x5a>
c000bd97:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bd9e:	85 db                	test   ebx,ebx
c000bda0:	74 36                	je     c000bdd8 <Directory::close()+0x5a>
c000bda2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bda9:	74 2d                	je     c000bdd8 <Directory::close()+0x5a>
c000bdab:	b8 05 00 00 00       	mov    eax,0x5
c000bdb0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdb4:	74 22                	je     c000bdd8 <Directory::close()+0x5a>
c000bdb6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bdba:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdc1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdc7:	53                   	push   ebx
c000bdc8:	53                   	push   ebx
c000bdc9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdcb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdd1:	50                   	push   eax
c000bdd2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bdd5:	83 c4 10             	add    esp,0x10
c000bdd8:	83 c4 08             	add    esp,0x8
c000bddb:	5b                   	pop    ebx
c000bddc:	c3                   	ret    
c000bddd:	90                   	nop

c000bdde <Directory::unlink()>:
c000bdde:	83 ec 0c             	sub    esp,0xc
c000bde1:	b8 0b 00 00 00       	mov    eax,0xb
c000bde6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdf1:	83 f9 19             	cmp    ecx,0x19
c000bdf4:	77 2f                	ja     c000be25 <Directory::unlink()+0x47>
c000bdf6:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdfd:	85 c9                	test   ecx,ecx
c000bdff:	74 24                	je     c000be25 <Directory::unlink()+0x47>
c000be01:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be07:	85 c9                	test   ecx,ecx
c000be09:	74 1a                	je     c000be25 <Directory::unlink()+0x47>
c000be0b:	b8 06 00 00 00       	mov    eax,0x6
c000be10:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be14:	75 0f                	jne    c000be25 <Directory::unlink()+0x47>
c000be16:	83 c2 0d             	add    edx,0xd
c000be19:	50                   	push   eax
c000be1a:	50                   	push   eax
c000be1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be1d:	52                   	push   edx
c000be1e:	51                   	push   ecx
c000be1f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be22:	83 c4 10             	add    esp,0x10
c000be25:	83 c4 0c             	add    esp,0xc
c000be28:	c3                   	ret    
c000be29:	90                   	nop

c000be2a <Directory::rename(char const*)>:
c000be2a:	83 ec 0c             	sub    esp,0xc
c000be2d:	b8 0b 00 00 00       	mov    eax,0xb
c000be32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be3d:	83 f9 19             	cmp    ecx,0x19
c000be40:	77 32                	ja     c000be74 <Directory::rename(char const*)+0x4a>
c000be42:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be49:	85 c9                	test   ecx,ecx
c000be4b:	74 27                	je     c000be74 <Directory::rename(char const*)+0x4a>
c000be4d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be53:	85 c9                	test   ecx,ecx
c000be55:	74 1d                	je     c000be74 <Directory::rename(char const*)+0x4a>
c000be57:	b8 06 00 00 00       	mov    eax,0x6
c000be5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be60:	75 12                	jne    c000be74 <Directory::rename(char const*)+0x4a>
c000be62:	83 c2 0d             	add    edx,0xd
c000be65:	50                   	push   eax
c000be66:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be6c:	52                   	push   edx
c000be6d:	51                   	push   ecx
c000be6e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be71:	83 c4 10             	add    esp,0x10
c000be74:	83 c4 0c             	add    esp,0xc
c000be77:	c3                   	ret    

c000be78 <Directory::exists()>:
c000be78:	83 ec 0c             	sub    esp,0xc
c000be7b:	31 c0                	xor    eax,eax
c000be7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be81:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be88:	83 f9 19             	cmp    ecx,0x19
c000be8b:	77 24                	ja     c000beb1 <Directory::exists()+0x39>
c000be8d:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be94:	85 c9                	test   ecx,ecx
c000be96:	74 19                	je     c000beb1 <Directory::exists()+0x39>
c000be98:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be9e:	85 c9                	test   ecx,ecx
c000bea0:	74 0f                	je     c000beb1 <Directory::exists()+0x39>
c000bea2:	83 c2 0d             	add    edx,0xd
c000bea5:	50                   	push   eax
c000bea6:	50                   	push   eax
c000bea7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bea9:	52                   	push   edx
c000beaa:	51                   	push   ecx
c000beab:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000beae:	83 c4 10             	add    esp,0x10
c000beb1:	83 c4 0c             	add    esp,0xc
c000beb4:	c3                   	ret    
c000beb5:	90                   	nop

c000beb6 <Directory::read(dirent*)>:
c000beb6:	83 ec 1c             	sub    esp,0x1c
c000beb9:	b8 0b 00 00 00       	mov    eax,0xb
c000bebe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bec2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bec9:	83 f9 19             	cmp    ecx,0x19
c000becc:	77 30                	ja     c000befe <Directory::read(dirent*)+0x48>
c000bece:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bed5:	85 c9                	test   ecx,ecx
c000bed7:	74 25                	je     c000befe <Directory::read(dirent*)+0x48>
c000bed9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bee0:	74 1c                	je     c000befe <Directory::read(dirent*)+0x48>
c000bee2:	83 ec 0c             	sub    esp,0xc
c000bee5:	8b 02                	mov    eax,DWORD PTR [edx]
c000bee7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000beeb:	51                   	push   ecx
c000beec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bef0:	6a 00                	push   0x0
c000bef2:	68 10 01 00 00       	push   0x110
c000bef7:	52                   	push   edx
c000bef8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000befb:	83 c4 20             	add    esp,0x20
c000befe:	83 c4 1c             	add    esp,0x1c
c000bf01:	c3                   	ret    

c000bf02 <Directory::create()>:
c000bf02:	83 ec 0c             	sub    esp,0xc
c000bf05:	b8 0b 00 00 00       	mov    eax,0xb
c000bf0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf15:	83 f9 19             	cmp    ecx,0x19
c000bf18:	77 2f                	ja     c000bf49 <Directory::create()+0x47>
c000bf1a:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bf21:	85 c9                	test   ecx,ecx
c000bf23:	74 24                	je     c000bf49 <Directory::create()+0x47>
c000bf25:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf2b:	85 c9                	test   ecx,ecx
c000bf2d:	74 1a                	je     c000bf49 <Directory::create()+0x47>
c000bf2f:	b8 06 00 00 00       	mov    eax,0x6
c000bf34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf38:	75 0f                	jne    c000bf49 <Directory::create()+0x47>
c000bf3a:	83 c2 0d             	add    edx,0xd
c000bf3d:	50                   	push   eax
c000bf3e:	50                   	push   eax
c000bf3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf41:	52                   	push   edx
c000bf42:	51                   	push   ecx
c000bf43:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf46:	83 c4 10             	add    esp,0x10
c000bf49:	83 c4 0c             	add    esp,0xc
c000bf4c:	c3                   	ret    
c000bf4d:	90                   	nop

c000bf4e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf4e:	b8 0a 00 00 00       	mov    eax,0xa
c000bf53:	c3                   	ret    

c000bf54 <Bus::Bus(char const*)>:
c000bf54:	83 ec 0c             	sub    esp,0xc
c000bf57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf5b:	83 ec 08             	sub    esp,0x8
c000bf5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf62:	50                   	push   eax
c000bf63:	e8 22 08 00 00       	call   c000c78a <Device::Device(char const*)>
c000bf68:	83 c4 10             	add    esp,0x10
c000bf6b:	ba bc 12 02 c0       	mov    edx,0xc00212bc
c000bf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf74:	89 10                	mov    DWORD PTR [eax],edx
c000bf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf7a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf84:	90                   	nop
c000bf85:	83 c4 0c             	add    esp,0xc
c000bf88:	c3                   	ret    
c000bf89:	90                   	nop
c000bf8a:	66 90                	xchg   ax,ax

c000bf8c <Bus::~Bus()>:
c000bf8c:	83 ec 0c             	sub    esp,0xc
c000bf8f:	ba bc 12 02 c0       	mov    edx,0xc00212bc
c000bf94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf98:	89 10                	mov    DWORD PTR [eax],edx
c000bf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	50                   	push   eax
c000bfa2:	e8 4d 05 00 00       	call   c000c4f4 <Device::~Device()>
c000bfa7:	83 c4 10             	add    esp,0x10
c000bfaa:	90                   	nop
c000bfab:	83 c4 0c             	add    esp,0xc
c000bfae:	c3                   	ret    
c000bfaf:	90                   	nop

c000bfb0 <Bus::~Bus()>:
c000bfb0:	83 ec 0c             	sub    esp,0xc
c000bfb3:	83 ec 0c             	sub    esp,0xc
c000bfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfba:	e8 cd ff ff ff       	call   c000bf8c <Bus::~Bus()>
c000bfbf:	83 c4 10             	add    esp,0x10
c000bfc2:	83 ec 08             	sub    esp,0x8
c000bfc5:	68 58 01 00 00       	push   0x158
c000bfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfce:	e8 45 e8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000bfd3:	83 c4 10             	add    esp,0x10
c000bfd6:	83 c4 0c             	add    esp,0xc
c000bfd9:	c3                   	ret    

c000bfda <beepThread(void*)>:
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000bfe2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfe6:	48                   	dec    eax
c000bfe7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000bfec:	75 01                	jne    c000bfef <beepThread(void*)+0x15>
c000bfee:	fb                   	sti    
c000bfef:	83 ec 0c             	sub    esp,0xc
c000bff2:	6b c2 0a             	imul   eax,edx,0xa
c000bff5:	50                   	push   eax
c000bff6:	e8 f1 9d 00 00       	call   c0015dec <milliTenthSleep(unsigned int)>
c000bffb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c002:	e8 40 bd 00 00       	call   c0017d47 <HalMakeBeep(int)>
c000c007:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c00f:	83 c4 1c             	add    esp,0x1c
c000c012:	e9 b9 9c 00 00       	jmp    c0015cd0 <blockTask(TaskState)>

c000c017 <Krnl::beep(int, int, bool)>:
c000c017:	56                   	push   esi
c000c018:	53                   	push   ebx
c000c019:	83 ec 10             	sub    esp,0x10
c000c01c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c028:	e8 1a bd 00 00       	call   c0017d47 <HalMakeBeep(int)>
c000c02d:	83 c4 10             	add    esp,0x10
c000c030:	89 f0                	mov    eax,esi
c000c032:	84 c0                	test   al,al
c000c034:	74 1e                	je     c000c054 <Krnl::beep(int, int, bool)+0x3d>
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	6b db 0a             	imul   ebx,ebx,0xa
c000c03c:	53                   	push   ebx
c000c03d:	e8 aa 9d 00 00       	call   c0015dec <milliTenthSleep(unsigned int)>
c000c042:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c04a:	83 c4 14             	add    esp,0x14
c000c04d:	5b                   	pop    ebx
c000c04e:	5e                   	pop    esi
c000c04f:	e9 f3 bc 00 00       	jmp    c0017d47 <HalMakeBeep(int)>
c000c054:	68 e6 00 00 00       	push   0xe6
c000c059:	53                   	push   ebx
c000c05a:	68 da bf 00 c0       	push   0xc000bfda
c000c05f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c065:	e8 02 98 00 00       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c000c06a:	83 c4 14             	add    esp,0x14
c000c06d:	5b                   	pop    ebx
c000c06e:	5e                   	pop    esi
c000c06f:	c3                   	ret    

c000c070 <User::loadClockSettings(int)>:
c000c070:	53                   	push   ebx
c000c071:	83 ec 14             	sub    esp,0x14
c000c074:	68 14 01 00 00       	push   0x114
c000c079:	e8 38 ba ff ff       	call   c0007ab6 <malloc>
c000c07e:	83 c4 0c             	add    esp,0xc
c000c081:	89 c3                	mov    ebx,eax
c000c083:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c089:	68 e0 12 02 c0       	push   0xc00212e0
c000c08e:	50                   	push   eax
c000c08f:	e8 56 f6 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c000c094:	58                   	pop    eax
c000c095:	5a                   	pop    edx
c000c096:	6a 01                	push   0x1
c000c098:	53                   	push   ebx
c000c099:	e8 08 f7 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c000c09e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0a1:	e8 5e f7 ff ff       	call   c000b804 <File::close()>
c000c0a6:	83 c4 10             	add    esp,0x10
c000c0a9:	85 db                	test   ebx,ebx
c000c0ab:	74 0f                	je     c000c0bc <User::loadClockSettings(int)+0x4c>
c000c0ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0b6:	83 c4 08             	add    esp,0x8
c000c0b9:	5b                   	pop    ebx
c000c0ba:	ff e0                	jmp    eax
c000c0bc:	83 c4 08             	add    esp,0x8
c000c0bf:	5b                   	pop    ebx
c000c0c0:	c3                   	ret    
c000c0c1:	90                   	nop

c000c0c2 <Clock::Clock(char const*)>:
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c9:	83 ec 08             	sub    esp,0x8
c000c0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d0:	50                   	push   eax
c000c0d1:	e8 b4 06 00 00       	call   c000c78a <Device::Device(char const*)>
c000c0d6:	83 c4 10             	add    esp,0x10
c000c0d9:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000c0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e2:	89 10                	mov    DWORD PTR [eax],edx
c000c0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c0f2:	90                   	nop
c000c0f3:	83 c4 0c             	add    esp,0xc
c000c0f6:	c3                   	ret    
c000c0f7:	90                   	nop

c000c0f8 <Clock::~Clock()>:
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	ba 08 13 02 c0       	mov    edx,0xc0021308
c000c100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c104:	89 10                	mov    DWORD PTR [eax],edx
c000c106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10a:	83 ec 0c             	sub    esp,0xc
c000c10d:	50                   	push   eax
c000c10e:	e8 e1 03 00 00       	call   c000c4f4 <Device::~Device()>
c000c113:	83 c4 10             	add    esp,0x10
c000c116:	90                   	nop
c000c117:	83 c4 0c             	add    esp,0xc
c000c11a:	c3                   	ret    
c000c11b:	90                   	nop

c000c11c <Clock::~Clock()>:
c000c11c:	83 ec 0c             	sub    esp,0xc
c000c11f:	83 ec 0c             	sub    esp,0xc
c000c122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c126:	e8 cd ff ff ff       	call   c000c0f8 <Clock::~Clock()>
c000c12b:	83 c4 10             	add    esp,0x10
c000c12e:	83 ec 08             	sub    esp,0x8
c000c131:	68 58 01 00 00       	push   0x158
c000c136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c13a:	e8 d9 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c13f:	83 c4 10             	add    esp,0x10
c000c142:	83 c4 0c             	add    esp,0xc
c000c145:	c3                   	ret    

c000c146 <Clock::timeInSecondsLocal()>:
c000c146:	53                   	push   ebx
c000c147:	83 ec 14             	sub    esp,0x14
c000c14a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c14e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c150:	50                   	push   eax
c000c151:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c154:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c15b:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c161:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c167:	89 cb                	mov    ebx,ecx
c000c169:	c1 fb 1f             	sar    ebx,0x1f
c000c16c:	01 c8                	add    eax,ecx
c000c16e:	11 da                	adc    edx,ebx
c000c170:	83 c4 10             	add    esp,0x10
c000c173:	31 c9                	xor    ecx,ecx
c000c175:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c17c:	74 05                	je     c000c183 <Clock::timeInSecondsLocal()+0x3d>
c000c17e:	b9 08 07 00 00       	mov    ecx,0x708
c000c183:	31 db                	xor    ebx,ebx
c000c185:	01 c8                	add    eax,ecx
c000c187:	11 da                	adc    edx,ebx
c000c189:	83 c4 08             	add    esp,0x8
c000c18c:	5b                   	pop    ebx
c000c18d:	c3                   	ret    

c000c18e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c18e:	57                   	push   edi
c000c18f:	56                   	push   esi
c000c190:	53                   	push   ebx
c000c191:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c195:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c199:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c19b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c19f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1a2:	0f b6 05 68 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027068
c000c1a9:	03 05 6c 70 02 c0    	add    eax,DWORD PTR ds:0xc002706c
c000c1af:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1b5:	99                   	cdq    
c000c1b6:	29 c6                	sub    esi,eax
c000c1b8:	19 d7                	sbb    edi,edx
c000c1ba:	89 f0                	mov    eax,esi
c000c1bc:	89 fa                	mov    edx,edi
c000c1be:	31 f6                	xor    esi,esi
c000c1c0:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c1c7:	74 05                	je     c000c1ce <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1c9:	be 08 07 00 00       	mov    esi,0x708
c000c1ce:	31 ff                	xor    edi,edi
c000c1d0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1d4:	29 f0                	sub    eax,esi
c000c1d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1da:	19 fa                	sbb    edx,edi
c000c1dc:	89 d8                	mov    eax,ebx
c000c1de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e2:	5b                   	pop    ebx
c000c1e3:	5e                   	pop    esi
c000c1e4:	5f                   	pop    edi
c000c1e5:	ff e0                	jmp    eax

c000c1e7 <datetimeToSeconds(datetime_t)>:
c000c1e7:	55                   	push   ebp
c000c1e8:	57                   	push   edi
c000c1e9:	56                   	push   esi
c000c1ea:	53                   	push   ebx
c000c1eb:	83 ec 0c             	sub    esp,0xc
c000c1ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c1f2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c1f6:	89 d6                	mov    esi,edx
c000c1f8:	0f b6 c7             	movzx  eax,bh
c000c1fb:	c1 ee 10             	shr    esi,0x10
c000c1fe:	6b e8 3c             	imul   ebp,eax,0x3c
c000c201:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c207:	0f b6 ce             	movzx  ecx,dh
c000c20a:	89 df                	mov    edi,ebx
c000c20c:	49                   	dec    ecx
c000c20d:	c1 ef 10             	shr    edi,0x10
c000c210:	0f b6 db             	movzx  ebx,bl
c000c213:	89 f8                	mov    eax,edi
c000c215:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c21b:	0f b6 f8             	movzx  edi,al
c000c21e:	0f b6 d2             	movzx  edx,dl
c000c221:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c225:	01 d8                	add    eax,ebx
c000c227:	0f b7 de             	movzx  ebx,si
c000c22a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c22d:	c1 f8 1f             	sar    eax,0x1f
c000c230:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c234:	0f b6 c1             	movzx  eax,cl
c000c237:	8b 0c 85 40 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdecc0]
c000c23e:	83 f8 01             	cmp    eax,0x1
c000c241:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c245:	76 27                	jbe    c000c26e <datetimeToSeconds(datetime_t)+0x87>
c000c247:	83 e6 03             	and    esi,0x3
c000c24a:	75 22                	jne    c000c26e <datetimeToSeconds(datetime_t)+0x87>
c000c24c:	31 d2                	xor    edx,edx
c000c24e:	be 64 00 00 00       	mov    esi,0x64
c000c253:	89 d8                	mov    eax,ebx
c000c255:	f7 f6                	div    esi
c000c257:	85 d2                	test   edx,edx
c000c259:	75 12                	jne    c000c26d <datetimeToSeconds(datetime_t)+0x86>
c000c25b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c261:	be 90 01 00 00       	mov    esi,0x190
c000c266:	99                   	cdq    
c000c267:	f7 fe                	idiv   esi
c000c269:	85 d2                	test   edx,edx
c000c26b:	75 01                	jne    c000c26e <datetimeToSeconds(datetime_t)+0x87>
c000c26d:	41                   	inc    ecx
c000c26e:	83 fb 46             	cmp    ebx,0x46
c000c271:	76 48                	jbe    c000c2bb <datetimeToSeconds(datetime_t)+0xd4>
c000c273:	be 46 00 00 00       	mov    esi,0x46
c000c278:	bf 64 00 00 00       	mov    edi,0x64
c000c27d:	bd 90 01 00 00       	mov    ebp,0x190
c000c282:	b8 6d 01 00 00       	mov    eax,0x16d
c000c287:	f7 c6 03 00 00 00    	test   esi,0x3
c000c28d:	75 23                	jne    c000c2b2 <datetimeToSeconds(datetime_t)+0xcb>
c000c28f:	89 f0                	mov    eax,esi
c000c291:	99                   	cdq    
c000c292:	f7 ff                	idiv   edi
c000c294:	b8 6e 01 00 00       	mov    eax,0x16e
c000c299:	85 d2                	test   edx,edx
c000c29b:	75 15                	jne    c000c2b2 <datetimeToSeconds(datetime_t)+0xcb>
c000c29d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2a3:	99                   	cdq    
c000c2a4:	f7 fd                	idiv   ebp
c000c2a6:	83 fa 01             	cmp    edx,0x1
c000c2a9:	19 c0                	sbb    eax,eax
c000c2ab:	f7 d0                	not    eax
c000c2ad:	05 6e 01 00 00       	add    eax,0x16e
c000c2b2:	01 c1                	add    ecx,eax
c000c2b4:	46                   	inc    esi
c000c2b5:	39 de                	cmp    esi,ebx
c000c2b7:	7c c9                	jl     c000c282 <datetimeToSeconds(datetime_t)+0x9b>
c000c2b9:	eb 34                	jmp    c000c2ef <datetimeToSeconds(datetime_t)+0x108>
c000c2bb:	74 32                	je     c000c2ef <datetimeToSeconds(datetime_t)+0x108>
c000c2bd:	b8 45 00 00 00       	mov    eax,0x45
c000c2c2:	89 c2                	mov    edx,eax
c000c2c4:	83 e2 03             	and    edx,0x3
c000c2c7:	39 d8                	cmp    eax,ebx
c000c2c9:	7e 0f                	jle    c000c2da <datetimeToSeconds(datetime_t)+0xf3>
c000c2cb:	83 fa 01             	cmp    edx,0x1
c000c2ce:	19 d2                	sbb    edx,edx
c000c2d0:	48                   	dec    eax
c000c2d1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2d8:	eb e8                	jmp    c000c2c2 <datetimeToSeconds(datetime_t)+0xdb>
c000c2da:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2df:	85 d2                	test   edx,edx
c000c2e1:	75 0a                	jne    c000c2ed <datetimeToSeconds(datetime_t)+0x106>
c000c2e3:	83 fb 01             	cmp    ebx,0x1
c000c2e6:	19 c0                	sbb    eax,eax
c000c2e8:	05 6e 01 00 00       	add    eax,0x16e
c000c2ed:	29 c1                	sub    ecx,eax
c000c2ef:	b8 80 51 01 00       	mov    eax,0x15180
c000c2f4:	f7 e9                	imul   ecx
c000c2f6:	03 04 24             	add    eax,DWORD PTR [esp]
c000c2f9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c2fd:	83 c4 0c             	add    esp,0xc
c000c300:	5b                   	pop    ebx
c000c301:	5e                   	pop    esi
c000c302:	5f                   	pop    edi
c000c303:	5d                   	pop    ebp
c000c304:	c3                   	ret    
c000c305:	90                   	nop

c000c306 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c306:	57                   	push   edi
c000c307:	56                   	push   esi
c000c308:	53                   	push   ebx
c000c309:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c30d:	8b 06                	mov    eax,DWORD PTR [esi]
c000c30f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c316:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c31a:	e8 c8 fe ff ff       	call   c000c1e7 <datetimeToSeconds(datetime_t)>
c000c31f:	59                   	pop    ecx
c000c320:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c327:	5b                   	pop    ebx
c000c328:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c32e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c334:	89 cb                	mov    ebx,ecx
c000c336:	c1 fb 1f             	sar    ebx,0x1f
c000c339:	29 c8                	sub    eax,ecx
c000c33b:	19 da                	sbb    edx,ebx
c000c33d:	31 c9                	xor    ecx,ecx
c000c33f:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c346:	74 05                	je     c000c34d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c348:	b9 08 07 00 00       	mov    ecx,0x708
c000c34d:	31 db                	xor    ebx,ebx
c000c34f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c353:	29 c8                	sub    eax,ecx
c000c355:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c359:	19 da                	sbb    edx,ebx
c000c35b:	89 f8                	mov    eax,edi
c000c35d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c361:	5b                   	pop    ebx
c000c362:	5e                   	pop    esi
c000c363:	5f                   	pop    edi
c000c364:	ff e0                	jmp    eax

c000c366 <secondsToDatetime(unsigned long long)>:
c000c366:	55                   	push   ebp
c000c367:	57                   	push   edi
c000c368:	56                   	push   esi
c000c369:	53                   	push   ebx
c000c36a:	83 ec 1c             	sub    esp,0x1c
c000c36d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c371:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c375:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c379:	6a 00                	push   0x0
c000c37b:	68 80 51 01 00       	push   0x15180
c000c380:	55                   	push   ebp
c000c381:	57                   	push   edi
c000c382:	e8 a9 2d 01 00       	call   c001f130 <__udivdi3>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c394:	6a 00                	push   0x0
c000c396:	68 80 51 01 00       	push   0x15180
c000c39b:	55                   	push   ebp
c000c39c:	57                   	push   edi
c000c39d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3a2:	e8 89 2e 01 00       	call   c001f230 <__umoddi3>
c000c3a7:	83 c4 10             	add    esp,0x10
c000c3aa:	99                   	cdq    
c000c3ab:	f7 ff                	idiv   edi
c000c3ad:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3b2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3b5:	89 d0                	mov    eax,edx
c000c3b7:	99                   	cdq    
c000c3b8:	f7 ff                	idiv   edi
c000c3ba:	85 db                	test   ebx,ebx
c000c3bc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3bf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3c2:	79 11                	jns    c000c3d5 <secondsToDatetime(unsigned long long)+0x6f>
c000c3c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3c8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3ce:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3d3:	eb 07                	jmp    c000c3dc <secondsToDatetime(unsigned long long)+0x76>
c000c3d5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3da:	89 d8                	mov    eax,ebx
c000c3dc:	bf b4 05 00 00       	mov    edi,0x5b4
c000c3e1:	99                   	cdq    
c000c3e2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c3e7:	f7 f9                	idiv   ecx
c000c3e9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c3ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3f2:	31 d2                	xor    edx,edx
c000c3f4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c3fc:	01 c3                	add    ebx,eax
c000c3fe:	89 d8                	mov    eax,ebx
c000c400:	f7 f1                	div    ecx
c000c402:	31 d2                	xor    edx,edx
c000c404:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c407:	89 d8                	mov    eax,ebx
c000c409:	f7 f7                	div    edi
c000c40b:	31 d2                	xor    edx,edx
c000c40d:	29 c1                	sub    ecx,eax
c000c40f:	89 d8                	mov    eax,ebx
c000c411:	f7 f5                	div    ebp
c000c413:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c418:	29 c1                	sub    ecx,eax
c000c41a:	31 d2                	xor    edx,edx
c000c41c:	89 c8                	mov    eax,ecx
c000c41e:	f7 f5                	div    ebp
c000c420:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c429:	31 d2                	xor    edx,edx
c000c42b:	89 c8                	mov    eax,ecx
c000c42d:	f7 f5                	div    ebp
c000c42f:	31 d2                	xor    edx,edx
c000c431:	01 c3                	add    ebx,eax
c000c433:	89 c8                	mov    eax,ecx
c000c435:	f7 f7                	div    edi
c000c437:	bf 99 00 00 00       	mov    edi,0x99
c000c43c:	29 c3                	sub    ebx,eax
c000c43e:	31 d2                	xor    edx,edx
c000c440:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c448:	29 c3                	sub    ebx,eax
c000c44a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c44d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c450:	bb 05 00 00 00       	mov    ebx,0x5
c000c455:	83 c1 02             	add    ecx,0x2
c000c458:	89 c8                	mov    eax,ecx
c000c45a:	f7 f7                	div    edi
c000c45c:	31 d2                	xor    edx,edx
c000c45e:	89 c7                	mov    edi,eax
c000c460:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c466:	83 c0 02             	add    eax,0x2
c000c469:	f7 f3                	div    ebx
c000c46b:	89 eb                	mov    ebx,ebp
c000c46d:	29 c3                	sub    ebx,eax
c000c46f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c475:	88 1e                	mov    BYTE PTR [esi],bl
c000c477:	19 c0                	sbb    eax,eax
c000c479:	31 d2                	xor    edx,edx
c000c47b:	83 e0 0c             	and    eax,0xc
c000c47e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c482:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c48a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c48e:	83 f9 01             	cmp    ecx,0x1
c000c491:	0f 96 c2             	setbe  dl
c000c494:	41                   	inc    ecx
c000c495:	01 d0                	add    eax,edx
c000c497:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c49a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c49e:	83 c4 1c             	add    esp,0x1c
c000c4a1:	89 f0                	mov    eax,esi
c000c4a3:	5b                   	pop    ebx
c000c4a4:	5e                   	pop    esi
c000c4a5:	5f                   	pop    edi
c000c4a6:	5d                   	pop    ebp
c000c4a7:	c2 04 00             	ret    0x4

c000c4aa <Clock::timeInDatetimeLocal()>:
c000c4aa:	53                   	push   ebx
c000c4ab:	83 ec 14             	sub    esp,0x14
c000c4ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4b6:	e8 8b fc ff ff       	call   c000c146 <Clock::timeInSecondsLocal()>
c000c4bb:	83 c4 0c             	add    esp,0xc
c000c4be:	52                   	push   edx
c000c4bf:	50                   	push   eax
c000c4c0:	53                   	push   ebx
c000c4c1:	e8 a0 fe ff ff       	call   c000c366 <secondsToDatetime(unsigned long long)>
c000c4c6:	89 d8                	mov    eax,ebx
c000c4c8:	83 c4 14             	add    esp,0x14
c000c4cb:	5b                   	pop    ebx
c000c4cc:	c2 04 00             	ret    0x4
c000c4cf:	90                   	nop

c000c4d0 <Device::hibernate()>:
c000c4d0:	c3                   	ret    
c000c4d1:	90                   	nop

c000c4d2 <Device::wake()>:
c000c4d2:	c3                   	ret    
c000c4d3:	90                   	nop

c000c4d4 <Device::detect()>:
c000c4d4:	c3                   	ret    
c000c4d5:	90                   	nop

c000c4d6 <Device::disableLegacy()>:
c000c4d6:	c3                   	ret    
c000c4d7:	90                   	nop

c000c4d8 <Device::powerSaving(PowerSavingLevel)>:
c000c4d8:	c3                   	ret    
c000c4d9:	90                   	nop

c000c4da <DriverlessDevice::close(int, int, void*)>:
c000c4da:	31 c0                	xor    eax,eax
c000c4dc:	c3                   	ret    
c000c4dd:	90                   	nop

c000c4de <DriverlessDevice::detect()>:
c000c4de:	c3                   	ret    
c000c4df:	90                   	nop

c000c4e0 <DriverlessDevice::open(int, int, void*)>:
c000c4e0:	83 ec 18             	sub    esp,0x18
c000c4e3:	68 70 13 02 c0       	push   0xc0021370
c000c4e8:	e8 10 4d 00 00       	call   c00111fd <KePanic(char const*)>
c000c4ed:	83 c8 ff             	or     eax,0xffffffff
c000c4f0:	83 c4 1c             	add    esp,0x1c
c000c4f3:	c3                   	ret    

c000c4f4 <Device::~Device()>:
c000c4f4:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c000c4f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4fd:	89 10                	mov    DWORD PTR [eax],edx
c000c4ff:	90                   	nop
c000c500:	c3                   	ret    
c000c501:	90                   	nop

c000c502 <Device::~Device()>:
c000c502:	83 ec 0c             	sub    esp,0xc
c000c505:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c509:	e8 e6 ff ff ff       	call   c000c4f4 <Device::~Device()>
c000c50e:	83 c4 04             	add    esp,0x4
c000c511:	83 ec 08             	sub    esp,0x8
c000c514:	68 58 01 00 00       	push   0x158
c000c519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51d:	e8 f6 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c522:	83 c4 10             	add    esp,0x10
c000c525:	83 c4 0c             	add    esp,0xc
c000c528:	c3                   	ret    
c000c529:	90                   	nop

c000c52a <Device::findAndLoadDriver()>:
c000c52a:	c7 44 24 04 8e 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002138e
c000c532:	e9 0e e4 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c537:	90                   	nop

c000c538 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c538:	57                   	push   edi
c000c539:	b9 09 00 00 00       	mov    ecx,0x9
c000c53e:	56                   	push   esi
c000c53f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c543:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c547:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c551:	81 c7 18 01 00 00    	add    edi,0x118
c000c557:	fc                   	cld    
c000c558:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c55a:	5e                   	pop    esi
c000c55b:	5f                   	pop    edi
c000c55c:	c3                   	ret    
c000c55d:	90                   	nop

c000c55e <Device::preOpenACPI(void*, char*, char*)>:
c000c55e:	57                   	push   edi
c000c55f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c564:	56                   	push   esi
c000c565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c569:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c56d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c577:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c57d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c583:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c589:	b9 0e 00 00 00       	mov    ecx,0xe
c000c58e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c598:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c59a:	5e                   	pop    esi
c000c59b:	5f                   	pop    edi
c000c59c:	c3                   	ret    
c000c59d:	90                   	nop

c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c59e:	53                   	push   ebx
c000c59f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c5af:	0f b6 c0             	movzx  eax,al
c000c5b2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5be:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5c2:	5b                   	pop    ebx
c000c5c3:	e9 a8 05 00 00       	jmp    c000cb70 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5c8 <Device::getParent()>:
c000c5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5cc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5d2:	c3                   	ret    
c000c5d3:	90                   	nop

c000c5d4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5dc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5e1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5ed:	e9 e6 06 00 00       	jmp    c000ccd8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c5f2 <Device::addChild(Device*)>:
c000c5f2:	53                   	push   ebx
c000c5f3:	83 ec 08             	sub    esp,0x8
c000c5f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5fe:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c604:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c60a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c60c:	85 d2                	test   edx,edx
c000c60e:	74 04                	je     c000c614 <Device::addChild(Device*)+0x22>
c000c610:	89 d3                	mov    ebx,edx
c000c612:	eb f6                	jmp    c000c60a <Device::addChild(Device*)+0x18>
c000c614:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c617:	83 ec 0c             	sub    esp,0xc
c000c61a:	6a 08                	push   0x8
c000c61c:	e8 95 b4 ff ff       	call   c0007ab6 <malloc>
c000c621:	89 03                	mov    DWORD PTR [ebx],eax
c000c623:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c629:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c630:	83 c4 18             	add    esp,0x18
c000c633:	5b                   	pop    ebx
c000c634:	c3                   	ret    
c000c635:	90                   	nop

c000c636 <Device::removeAllChildren()>:
c000c636:	56                   	push   esi
c000c637:	53                   	push   ebx
c000c638:	52                   	push   edx
c000c639:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c63d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c643:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c646:	74 17                	je     c000c65f <Device::removeAllChildren()+0x29>
c000c648:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c64b:	85 c0                	test   eax,eax
c000c64d:	74 0c                	je     c000c65b <Device::removeAllChildren()+0x25>
c000c64f:	83 ec 0c             	sub    esp,0xc
c000c652:	8b 10                	mov    edx,DWORD PTR [eax]
c000c654:	50                   	push   eax
c000c655:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c658:	83 c4 10             	add    esp,0x10
c000c65b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c65d:	eb e4                	jmp    c000c643 <Device::removeAllChildren()+0xd>
c000c65f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c665:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c66b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c671:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c678:	58                   	pop    eax
c000c679:	5b                   	pop    ebx
c000c67a:	5e                   	pop    esi
c000c67b:	c3                   	ret    

c000c67c <Device::hibernateAll()>:
c000c67c:	53                   	push   ebx
c000c67d:	83 ec 14             	sub    esp,0x14
c000c680:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c684:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c686:	53                   	push   ebx
c000c687:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c68a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c696:	74 0f                	je     c000c6a7 <Device::hibernateAll()+0x2b>
c000c698:	83 ec 0c             	sub    esp,0xc
c000c69b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c69e:	e8 d9 ff ff ff       	call   c000c67c <Device::hibernateAll()>
c000c6a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6a5:	eb e9                	jmp    c000c690 <Device::hibernateAll()+0x14>
c000c6a7:	83 c4 08             	add    esp,0x8
c000c6aa:	5b                   	pop    ebx
c000c6ab:	c3                   	ret    

c000c6ac <Device::wakeAll()>:
c000c6ac:	53                   	push   ebx
c000c6ad:	83 ec 14             	sub    esp,0x14
c000c6b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6b6:	53                   	push   ebx
c000c6b7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6c0:	83 c4 10             	add    esp,0x10
c000c6c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6c6:	74 0f                	je     c000c6d7 <Device::wakeAll()+0x2b>
c000c6c8:	83 ec 0c             	sub    esp,0xc
c000c6cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6ce:	e8 d9 ff ff ff       	call   c000c6ac <Device::wakeAll()>
c000c6d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6d5:	eb e9                	jmp    c000c6c0 <Device::wakeAll()+0x14>
c000c6d7:	83 c4 08             	add    esp,0x8
c000c6da:	5b                   	pop    ebx
c000c6db:	c3                   	ret    

c000c6dc <Device::detectAll()>:
c000c6dc:	53                   	push   ebx
c000c6dd:	83 ec 14             	sub    esp,0x14
c000c6e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6e6:	53                   	push   ebx
c000c6e7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c6ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6f0:	83 c4 10             	add    esp,0x10
c000c6f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6f6:	74 0f                	je     c000c707 <Device::detectAll()+0x2b>
c000c6f8:	83 ec 0c             	sub    esp,0xc
c000c6fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6fe:	e8 d9 ff ff ff       	call   c000c6dc <Device::detectAll()>
c000c703:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c705:	eb e9                	jmp    c000c6f0 <Device::detectAll()+0x14>
c000c707:	83 c4 08             	add    esp,0x8
c000c70a:	5b                   	pop    ebx
c000c70b:	c3                   	ret    

c000c70c <Device::disableLegacyAll()>:
c000c70c:	c3                   	ret    
c000c70d:	90                   	nop

c000c70e <Device::loadDriversForAll()>:
c000c70e:	c3                   	ret    
c000c70f:	90                   	nop

c000c710 <Device::closeAll()>:
c000c710:	53                   	push   ebx
c000c711:	83 ec 08             	sub    esp,0x8
c000c714:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c718:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c71a:	6a 00                	push   0x0
c000c71c:	6a 00                	push   0x0
c000c71e:	6a 00                	push   0x0
c000c720:	53                   	push   ebx
c000c721:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c724:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c730:	74 0f                	je     c000c741 <Device::closeAll()+0x31>
c000c732:	83 ec 0c             	sub    esp,0xc
c000c735:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c738:	e8 d3 ff ff ff       	call   c000c710 <Device::closeAll()>
c000c73d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c73f:	eb e9                	jmp    c000c72a <Device::closeAll()+0x1a>
c000c741:	83 c4 08             	add    esp,0x8
c000c744:	5b                   	pop    ebx
c000c745:	c3                   	ret    

c000c746 <Device::powerSavingAll(PowerSavingLevel)>:
c000c746:	56                   	push   esi
c000c747:	53                   	push   ebx
c000c748:	83 ec 0c             	sub    esp,0xc
c000c74b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c74f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c753:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c755:	56                   	push   esi
c000c756:	53                   	push   ebx
c000c757:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c75a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c760:	83 c4 10             	add    esp,0x10
c000c763:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c766:	74 0f                	je     c000c777 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c768:	52                   	push   edx
c000c769:	52                   	push   edx
c000c76a:	56                   	push   esi
c000c76b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c76e:	e8 d3 ff ff ff       	call   c000c746 <Device::powerSavingAll(PowerSavingLevel)>
c000c773:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c775:	eb e9                	jmp    c000c760 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c777:	58                   	pop    eax
c000c778:	5b                   	pop    ebx
c000c779:	5e                   	pop    esi
c000c77a:	c3                   	ret    
c000c77b:	90                   	nop

c000c77c <Device::setName(char const*)>:
c000c77c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c784:	e9 b7 3e ff ff       	jmp    c0000640 <strcpy>
c000c789:	90                   	nop

c000c78a <Device::Device(char const*)>:
c000c78a:	83 ec 1c             	sub    esp,0x1c
c000c78d:	ba d0 13 02 c0       	mov    edx,0xc00213d0
c000c792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c796:	89 10                	mov    DWORD PTR [eax],edx
c000c798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7aa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7c6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7d0:	83 ec 08             	sub    esp,0x8
c000c7d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7db:	e8 9c ff ff ff       	call   c000c77c <Device::setName(char const*)>
c000c7e0:	83 c4 10             	add    esp,0x10
c000c7e3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c7eb:	83 ec 0c             	sub    esp,0xc
c000c7ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7f2:	e8 bf b2 ff ff       	call   c0007ab6 <malloc>
c000c7f7:	83 c4 10             	add    esp,0x10
c000c7fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c800:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c807:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c80b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c815:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c81b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c825:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c82b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c836:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c841:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c868:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c876:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c880:	90                   	nop
c000c881:	83 c4 1c             	add    esp,0x1c
c000c884:	c3                   	ret    
c000c885:	90                   	nop

c000c886 <Device::getName()>:
c000c886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c88a:	05 d0 00 00 00       	add    eax,0xd0
c000c88f:	c3                   	ret    

c000c890 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c890:	83 ec 0c             	sub    esp,0xc
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	83 ec 08             	sub    esp,0x8
c000c89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c89e:	50                   	push   eax
c000c89f:	e8 e6 fe ff ff       	call   c000c78a <Device::Device(char const*)>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	89 10                	mov    DWORD PTR [eax],edx
c000c8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8c0:	90                   	nop
c000c8c1:	83 c4 0c             	add    esp,0xc
c000c8c4:	c3                   	ret    
c000c8c5:	90                   	nop

c000c8c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8c6:	57                   	push   edi
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8d5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8db:	75 0c                	jne    c000c8e9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8dd:	52                   	push   edx
c000c8de:	52                   	push   edx
c000c8df:	53                   	push   ebx
c000c8e0:	56                   	push   esi
c000c8e1:	e8 fc 2c 01 00       	call   c001f5e2 <LinkedList<Device>::addElement(Device*)>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8f2:	74 12                	je     c000c906 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c8f4:	50                   	push   eax
c000c8f5:	57                   	push   edi
c000c8f6:	56                   	push   esi
c000c8f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8fa:	e8 c7 ff ff ff       	call   c000c8c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c8ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c901:	83 c4 10             	add    esp,0x10
c000c904:	eb e9                	jmp    c000c8ef <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c906:	5b                   	pop    ebx
c000c907:	5e                   	pop    esi
c000c908:	5f                   	pop    edi
c000c909:	c3                   	ret    

c000c90a <getDevicesOfType(DeviceType)>:
c000c90a:	53                   	push   ebx
c000c90b:	83 ec 14             	sub    esp,0x14
c000c90e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c912:	53                   	push   ebx
c000c913:	e8 a6 2d 01 00       	call   c001f6be <LinkedList<Device>::LinkedList()>
c000c918:	83 c4 0c             	add    esp,0xc
c000c91b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c91f:	53                   	push   ebx
c000c920:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c926:	e8 9b ff ff ff       	call   c000c8c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c92b:	89 d8                	mov    eax,ebx
c000c92d:	83 c4 18             	add    esp,0x18
c000c930:	5b                   	pop    ebx
c000c931:	c2 04 00             	ret    0x4

c000c934 <HardDiskController::HardDiskController(char const*)>:
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93b:	83 ec 08             	sub    esp,0x8
c000c93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c942:	50                   	push   eax
c000c943:	e8 42 fe ff ff       	call   c000c78a <Device::Device(char const*)>
c000c948:	83 c4 10             	add    esp,0x10
c000c94b:	ba 28 14 02 c0       	mov    edx,0xc0021428
c000c950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c954:	89 10                	mov    DWORD PTR [eax],edx
c000c956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c964:	90                   	nop
c000c965:	83 c4 0c             	add    esp,0xc
c000c968:	c3                   	ret    
c000c969:	90                   	nop
c000c96a:	66 90                	xchg   ax,ax

c000c96c <HardDiskController::~HardDiskController()>:
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	ba 28 14 02 c0       	mov    edx,0xc0021428
c000c974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c978:	89 10                	mov    DWORD PTR [eax],edx
c000c97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c97e:	83 ec 0c             	sub    esp,0xc
c000c981:	50                   	push   eax
c000c982:	e8 6d fb ff ff       	call   c000c4f4 <Device::~Device()>
c000c987:	83 c4 10             	add    esp,0x10
c000c98a:	90                   	nop
c000c98b:	83 c4 0c             	add    esp,0xc
c000c98e:	c3                   	ret    
c000c98f:	90                   	nop

c000c990 <HardDiskController::~HardDiskController()>:
c000c990:	83 ec 0c             	sub    esp,0xc
c000c993:	83 ec 0c             	sub    esp,0xc
c000c996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c99a:	e8 cd ff ff ff       	call   c000c96c <HardDiskController::~HardDiskController()>
c000c99f:	83 c4 10             	add    esp,0x10
c000c9a2:	83 ec 08             	sub    esp,0x8
c000c9a5:	68 58 01 00 00       	push   0x158
c000c9aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ae:	e8 65 de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	83 c4 0c             	add    esp,0xc
c000c9b9:	c3                   	ret    

c000c9ba <PhysicalDisk::eject()>:
c000c9ba:	83 c8 ff             	or     eax,0xffffffff
c000c9bd:	c3                   	ret    

c000c9be <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9be:	83 ec 0c             	sub    esp,0xc
c000c9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c5:	83 ec 08             	sub    esp,0x8
c000c9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cc:	50                   	push   eax
c000c9cd:	e8 b8 fd ff ff       	call   c000c78a <Device::Device(char const*)>
c000c9d2:	83 c4 10             	add    esp,0x10
c000c9d5:	ba 54 14 02 c0       	mov    edx,0xc0021454
c000c9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9de:	89 10                	mov    DWORD PTR [eax],edx
c000c9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ef:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca0c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca20:	90                   	nop
c000ca21:	83 c4 0c             	add    esp,0xc
c000ca24:	c3                   	ret    
c000ca25:	90                   	nop

c000ca26 <PhysicalDisk::startCache()>:
c000ca26:	56                   	push   esi
c000ca27:	53                   	push   ebx
c000ca28:	83 ec 10             	sub    esp,0x10
c000ca2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca2f:	6a 44                	push   0x44
c000ca31:	e8 80 b0 ff ff       	call   c0007ab6 <malloc>
c000ca36:	89 c6                	mov    esi,eax
c000ca38:	58                   	pop    eax
c000ca39:	5a                   	pop    edx
c000ca3a:	53                   	push   ebx
c000ca3b:	56                   	push   esi
c000ca3c:	e8 7b 17 00 00       	call   c000e1bc <VCache::VCache(PhysicalDisk*)>
c000ca41:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca47:	83 c4 14             	add    esp,0x14
c000ca4a:	5b                   	pop    ebx
c000ca4b:	5e                   	pop    esi
c000ca4c:	c3                   	ret    
c000ca4d:	90                   	nop

c000ca4e <PhysicalDisk::~PhysicalDisk()>:
c000ca4e:	83 ec 0c             	sub    esp,0xc
c000ca51:	ba 54 14 02 c0       	mov    edx,0xc0021454
c000ca56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca5a:	89 10                	mov    DWORD PTR [eax],edx
c000ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca60:	83 ec 0c             	sub    esp,0xc
c000ca63:	50                   	push   eax
c000ca64:	e8 8b fa ff ff       	call   c000c4f4 <Device::~Device()>
c000ca69:	83 c4 10             	add    esp,0x10
c000ca6c:	90                   	nop
c000ca6d:	83 c4 0c             	add    esp,0xc
c000ca70:	c3                   	ret    
c000ca71:	90                   	nop

c000ca72 <PhysicalDisk::~PhysicalDisk()>:
c000ca72:	83 ec 0c             	sub    esp,0xc
c000ca75:	83 ec 0c             	sub    esp,0xc
c000ca78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7c:	e8 cd ff ff ff       	call   c000ca4e <PhysicalDisk::~PhysicalDisk()>
c000ca81:	83 c4 10             	add    esp,0x10
c000ca84:	83 ec 08             	sub    esp,0x8
c000ca87:	68 6c 01 00 00       	push   0x16c
c000ca8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca90:	e8 83 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ca95:	83 c4 10             	add    esp,0x10
c000ca98:	83 c4 0c             	add    esp,0xc
c000ca9b:	c3                   	ret    

c000ca9c <int_handler>:
c000ca9c:	55                   	push   ebp
c000ca9d:	57                   	push   edi
c000ca9e:	56                   	push   esi
c000ca9f:	53                   	push   ebx
c000caa0:	83 ec 0c             	sub    esp,0xc
c000caa3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000caa7:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000caae:	74 0b                	je     c000cabb <int_handler+0x1f>
c000cab0:	fa                   	cli    
c000cab1:	f4                   	hlt    
c000cab2:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000cab9:	75 f5                	jne    c000cab0 <int_handler+0x14>
c000cabb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cabe:	8d 46 e0             	lea    eax,[esi-0x20]
c000cac1:	83 f8 17             	cmp    eax,0x17
c000cac4:	76 40                	jbe    c000cb06 <int_handler+0x6a>
c000cac6:	c1 e6 04             	shl    esi,0x4
c000cac9:	31 db                	xor    ebx,ebx
c000cacb:	8d ae 80 80 02 c0    	lea    ebp,[esi-0x3ffd7f80]
c000cad1:	81 c6 80 70 02 c0    	add    esi,0xc0027080
c000cad7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cadb:	85 c0                	test   eax,eax
c000cadd:	74 13                	je     c000caf2 <int_handler+0x56>
c000cadf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cae2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cae6:	74 2c                	je     c000cb14 <int_handler+0x78>
c000cae8:	83 ec 08             	sub    esp,0x8
c000caeb:	52                   	push   edx
c000caec:	57                   	push   edi
c000caed:	ff d0                	call   eax
c000caef:	83 c4 10             	add    esp,0x10
c000caf2:	83 c3 01             	add    ebx,0x1
c000caf5:	83 fb 04             	cmp    ebx,0x4
c000caf8:	75 dd                	jne    c000cad7 <int_handler+0x3b>
c000cafa:	83 c4 0c             	add    esp,0xc
c000cafd:	31 c0                	xor    eax,eax
c000caff:	5b                   	pop    ebx
c000cb00:	31 d2                	xor    edx,edx
c000cb02:	5e                   	pop    esi
c000cb03:	5f                   	pop    edi
c000cb04:	5d                   	pop    ebp
c000cb05:	c3                   	ret    
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	50                   	push   eax
c000cb0a:	e8 75 b2 00 00       	call   c0017d84 <HalEndOfInterrupt(int)>
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	eb b2                	jmp    c000cac6 <int_handler+0x2a>
c000cb14:	83 ec 08             	sub    esp,0x8
c000cb17:	52                   	push   edx
c000cb18:	57                   	push   edi
c000cb19:	ff d0                	call   eax
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	83 c4 0c             	add    esp,0xc
c000cb21:	5b                   	pop    ebx
c000cb22:	5e                   	pop    esi
c000cb23:	5f                   	pop    edi
c000cb24:	5d                   	pop    ebp
c000cb25:	c3                   	ret    

c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb26:	56                   	push   esi
c000cb27:	31 c0                	xor    eax,eax
c000cb29:	53                   	push   ebx
c000cb2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb32:	89 ca                	mov    edx,ecx
c000cb34:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb38:	c1 e2 04             	shl    edx,0x4
c000cb3b:	83 bc 82 80 80 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7f80],0x0
c000cb43:	74 17                	je     c000cb5c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb45:	83 c0 01             	add    eax,0x1
c000cb48:	83 f8 04             	cmp    eax,0x4
c000cb4b:	75 ee                	jne    c000cb3b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb4d:	c7 44 24 0c 84 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021484
c000cb55:	5b                   	pop    ebx
c000cb56:	5e                   	pop    esi
c000cb57:	e9 a1 46 00 00       	jmp    c00111fd <KePanic(char const*)>
c000cb5c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb5f:	89 1c 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],ebx
c000cb66:	89 34 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],esi
c000cb6d:	5b                   	pop    ebx
c000cb6e:	5e                   	pop    esi
c000cb6f:	c3                   	ret    

c000cb70 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb70:	57                   	push   edi
c000cb71:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb77:	56                   	push   esi
c000cb78:	53                   	push   ebx
c000cb79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cb81:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cb88:	74 54                	je     c000cbde <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cb8a:	89 c7                	mov    edi,eax
c000cb8c:	84 c0                	test   al,al
c000cb8e:	74 1d                	je     c000cbad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cb90:	83 fe 0f             	cmp    esi,0xf
c000cb93:	0f 8f d5 00 00 00    	jg     c000cc6e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cb99:	0f b6 b6 88 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd078]
c000cba0:	0f b7 bc 36 20 98 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd67e0]
c000cba8:	d1 ef                	shr    edi,1
c000cbaa:	83 e7 01             	and    edi,0x1
c000cbad:	83 ec 08             	sub    esp,0x8
c000cbb0:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbb5:	31 db                	xor    ebx,ebx
c000cbb7:	50                   	push   eax
c000cbb8:	68 91 14 02 c0       	push   0xc0021491
c000cbbd:	e8 83 dd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cbc2:	83 c4 10             	add    esp,0x10
c000cbc5:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbca:	85 c0                	test   eax,eax
c000cbcc:	7f 55                	jg     c000cc23 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	68 a8 14 02 c0       	push   0xc00214a8
c000cbd6:	e8 22 46 00 00       	call   c00111fd <KePanic(char const*)>
c000cbdb:	83 c4 10             	add    esp,0x10
c000cbde:	8d 7e 20             	lea    edi,[esi+0x20]
c000cbe1:	89 f8                	mov    eax,edi
c000cbe3:	31 d2                	xor    edx,edx
c000cbe5:	c1 e0 04             	shl    eax,0x4
c000cbe8:	8b 8c 90 80 80 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd7f80]
c000cbef:	85 c9                	test   ecx,ecx
c000cbf1:	0f 84 8e 00 00 00    	je     c000cc85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cbf7:	83 c2 01             	add    edx,0x1
c000cbfa:	83 fa 04             	cmp    edx,0x4
c000cbfd:	75 e9                	jne    c000cbe8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cbff:	83 ec 0c             	sub    esp,0xc
c000cc02:	68 fc 14 02 c0       	push   0xc00214fc
c000cc07:	e8 f1 45 00 00       	call   c00111fd <KePanic(char const*)>
c000cc0c:	83 c4 10             	add    esp,0x10
c000cc0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc14:	5b                   	pop    ebx
c000cc15:	5e                   	pop    esi
c000cc16:	5f                   	pop    edi
c000cc17:	c3                   	ret    
c000cc18:	83 c3 01             	add    ebx,0x1
c000cc1b:	39 1d 60 ae 02 c0    	cmp    DWORD PTR ds:0xc002ae60,ebx
c000cc21:	7e ab                	jle    c000cbce <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cc23:	83 ec 08             	sub    esp,0x8
c000cc26:	8b 04 9d 80 ae 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5180]
c000cc2d:	56                   	push   esi
c000cc2e:	50                   	push   eax
c000cc2f:	e8 da 18 01 00       	call   c001e50e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc34:	83 c4 10             	add    esp,0x10
c000cc37:	84 c0                	test   al,al
c000cc39:	74 dd                	je     c000cc18 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cc3b:	83 ec 04             	sub    esp,0x4
c000cc3e:	89 f8                	mov    eax,edi
c000cc40:	8b 1c 9d 80 ae 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5180]
c000cc47:	0f b6 f8             	movzx  edi,al
c000cc4a:	57                   	push   edi
c000cc4b:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc4e:	6a 00                	push   0x0
c000cc50:	89 f8                	mov    eax,edi
c000cc52:	0f b6 c0             	movzx  eax,al
c000cc55:	50                   	push   eax
c000cc56:	89 f0                	mov    eax,esi
c000cc58:	6a 00                	push   0x0
c000cc5a:	0f b6 c0             	movzx  eax,al
c000cc5d:	6a 00                	push   0x0
c000cc5f:	50                   	push   eax
c000cc60:	53                   	push   ebx
c000cc61:	e8 14 1a 01 00       	call   c001e67a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc66:	83 c4 20             	add    esp,0x20
c000cc69:	e9 73 ff ff ff       	jmp    c000cbe1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cc6e:	83 ec 0c             	sub    esp,0xc
c000cc71:	31 ff                	xor    edi,edi
c000cc73:	68 c4 14 02 c0       	push   0xc00214c4
c000cc78:	e8 80 45 00 00       	call   c00111fd <KePanic(char const*)>
c000cc7d:	83 c4 10             	add    esp,0x10
c000cc80:	e9 28 ff ff ff       	jmp    c000cbad <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cc85:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cc88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc8c:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c000cc93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cc97:	5b                   	pop    ebx
c000cc98:	89 14 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],edx
c000cc9f:	89 f0                	mov    eax,esi
c000cca1:	5e                   	pop    esi
c000cca2:	5f                   	pop    edi
c000cca3:	c3                   	ret    

c000cca4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ccac:	c1 e0 04             	shl    eax,0x4
c000ccaf:	8d 50 10             	lea    edx,[eax+0x10]
c000ccb2:	39 88 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ecx
c000ccb8:	74 08                	je     c000ccc2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccba:	83 c0 04             	add    eax,0x4
c000ccbd:	39 d0                	cmp    eax,edx
c000ccbf:	75 f1                	jne    c000ccb2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccc1:	c3                   	ret    
c000ccc2:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cccc:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000ccd6:	eb e2                	jmp    c000ccba <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ccd8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ccd8:	53                   	push   ebx
c000ccd9:	83 ec 08             	sub    esp,0x8
c000ccdc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cce0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cce5:	74 0e                	je     c000ccf5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cce7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ccec:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ccf3:	75 37                	jne    c000cd2c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ccf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf9:	83 c0 20             	add    eax,0x20
c000ccfc:	c1 e0 04             	shl    eax,0x4
c000ccff:	8d 50 10             	lea    edx,[eax+0x10]
c000cd02:	39 98 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ebx
c000cd08:	74 0c                	je     c000cd16 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cd0a:	83 c0 04             	add    eax,0x4
c000cd0d:	39 d0                	cmp    eax,edx
c000cd0f:	75 f1                	jne    c000cd02 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cd11:	83 c4 08             	add    esp,0x8
c000cd14:	5b                   	pop    ebx
c000cd15:	c3                   	ret    
c000cd16:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd20:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd2a:	eb de                	jmp    c000cd0a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cd2c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cd31:	7f 11                	jg     c000cd44 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd37:	0f b6 80 88 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd078]
c000cd3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd42:	eb b1                	jmp    c000ccf5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	68 b5 14 02 c0       	push   0xc00214b5
c000cd4c:	e8 ac 44 00 00       	call   c00111fd <KePanic(char const*)>
c000cd51:	83 c4 10             	add    esp,0x10
c000cd54:	eb 9f                	jmp    c000ccf5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cd56 <setupINTS()>:
c000cd56:	31 c0                	xor    eax,eax
c000cd58:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd62:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd6c:	c7 80 84 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f7c],0x0
c000cd76:	c7 80 84 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f7c],0x0
c000cd80:	c7 80 88 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f78],0x0
c000cd8a:	c7 80 88 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f78],0x0
c000cd94:	c7 80 8c 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f74],0x0
c000cd9e:	c7 80 8c 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f74],0x0
c000cda8:	83 c0 10             	add    eax,0x10
c000cdab:	3d 00 10 00 00       	cmp    eax,0x1000
c000cdb0:	75 a6                	jne    c000cd58 <setupINTS()+0x2>
c000cdb2:	c3                   	ret    

c000cdb3 <convertLegacyIRQNumber(int)>:
c000cdb3:	83 ec 0c             	sub    esp,0xc
c000cdb6:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdc7:	74 0c                	je     c000cdd5 <convertLegacyIRQNumber(int)+0x22>
c000cdc9:	83 f8 0f             	cmp    eax,0xf
c000cdcc:	7f 0b                	jg     c000cdd9 <convertLegacyIRQNumber(int)+0x26>
c000cdce:	0f b6 80 88 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd078]
c000cdd5:	83 c4 0c             	add    esp,0xc
c000cdd8:	c3                   	ret    
c000cdd9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cddd:	83 ec 0c             	sub    esp,0xc
c000cde0:	68 c4 14 02 c0       	push   0xc00214c4
c000cde5:	e8 13 44 00 00       	call   c00111fd <KePanic(char const*)>
c000cdea:	83 c4 10             	add    esp,0x10
c000cded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf1:	83 c4 0c             	add    esp,0xc
c000cdf4:	c3                   	ret    
c000cdf5:	90                   	nop

c000cdf6 <startGUI(void*)>:
c000cdf6:	55                   	push   ebp
c000cdf7:	89 e5                	mov    ebp,esp
c000cdf9:	53                   	push   ebx
c000cdfa:	83 ec 04             	sub    esp,0x4
c000cdfd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce02:	83 e8 01             	sub    eax,0x1
c000ce05:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce0a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce0f:	85 c0                	test   eax,eax
c000ce11:	75 01                	jne    c000ce14 <startGUI(void*)+0x1e>
c000ce13:	fb                   	sti    
c000ce14:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce1a:	83 ec 08             	sub    esp,0x8
c000ce1d:	6a 01                	push   0x1
c000ce1f:	68 21 15 02 c0       	push   0xc0021521
c000ce24:	e8 35 82 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000ce29:	83 c4 10             	add    esp,0x10
c000ce2c:	83 ec 08             	sub    esp,0x8
c000ce2f:	53                   	push   ebx
c000ce30:	50                   	push   eax
c000ce31:	e8 59 84 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000ce36:	83 c4 10             	add    esp,0x10
c000ce39:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce3f:	83 ec 08             	sub    esp,0x8
c000ce42:	6a 01                	push   0x1
c000ce44:	68 3b 15 02 c0       	push   0xc002153b
c000ce49:	e8 10 82 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000ce4e:	83 c4 10             	add    esp,0x10
c000ce51:	83 ec 08             	sub    esp,0x8
c000ce54:	53                   	push   ebx
c000ce55:	50                   	push   eax
c000ce56:	e8 34 84 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000ce5b:	83 c4 10             	add    esp,0x10
c000ce5e:	90                   	nop
c000ce5f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce62:	c9                   	leave  
c000ce63:	c3                   	ret    

c000ce64 <startGUIVESA(void*)>:
c000ce64:	55                   	push   ebp
c000ce65:	89 e5                	mov    ebp,esp
c000ce67:	53                   	push   ebx
c000ce68:	83 ec 04             	sub    esp,0x4
c000ce6b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce70:	83 e8 01             	sub    eax,0x1
c000ce73:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce78:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce7d:	85 c0                	test   eax,eax
c000ce7f:	75 01                	jne    c000ce82 <startGUIVESA(void*)+0x1e>
c000ce81:	fb                   	sti    
c000ce82:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce88:	83 ec 08             	sub    esp,0x8
c000ce8b:	6a 01                	push   0x1
c000ce8d:	68 59 15 02 c0       	push   0xc0021559
c000ce92:	e8 c7 81 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	83 ec 08             	sub    esp,0x8
c000ce9d:	53                   	push   ebx
c000ce9e:	50                   	push   eax
c000ce9f:	e8 eb 83 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cead:	83 ec 08             	sub    esp,0x8
c000ceb0:	6a 01                	push   0x1
c000ceb2:	68 3b 15 02 c0       	push   0xc002153b
c000ceb7:	e8 a2 81 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000cebc:	83 c4 10             	add    esp,0x10
c000cebf:	83 ec 08             	sub    esp,0x8
c000cec2:	53                   	push   ebx
c000cec3:	50                   	push   eax
c000cec4:	e8 c6 83 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	90                   	nop
c000cecd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ced0:	c9                   	leave  
c000ced1:	c3                   	ret    

c000ced2 <sendKeyToTerminal(unsigned char)>:
c000ced2:	55                   	push   ebp
c000ced3:	89 e5                	mov    ebp,esp
c000ced5:	83 ec 28             	sub    esp,0x28
c000ced8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cede:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cee3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cee7:	83 ec 08             	sub    esp,0x8
c000ceea:	52                   	push   edx
c000ceeb:	50                   	push   eax
c000ceec:	e8 c5 be ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cef1:	83 c4 10             	add    esp,0x10
c000cef4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cef8:	83 f8 0a             	cmp    eax,0xa
c000cefb:	74 16                	je     c000cf13 <sendKeyToTerminal(unsigned char)+0x41>
c000cefd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf01:	83 f8 03             	cmp    eax,0x3
c000cf04:	74 0d                	je     c000cf13 <sendKeyToTerminal(unsigned char)+0x41>
c000cf06:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf0a:	83 f8 1c             	cmp    eax,0x1c
c000cf0d:	0f 85 97 00 00 00    	jne    c000cfaa <sendKeyToTerminal(unsigned char)+0xd8>
c000cf13:	fa                   	cli    
c000cf14:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf19:	83 c0 01             	add    eax,0x1
c000cf1c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf21:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf26:	83 c0 01             	add    eax,0x1
c000cf29:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf2e:	a1 80 90 02 c0       	mov    eax,ds:0xc0029080
c000cf33:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf36:	c7 05 80 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029080,0x0
c000cf40:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf44:	74 1f                	je     c000cf65 <sendKeyToTerminal(unsigned char)+0x93>
c000cf46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf52:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf55:	83 ec 0c             	sub    esp,0xc
c000cf58:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf5b:	e8 74 90 00 00       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c000cf60:	83 c4 10             	add    esp,0x10
c000cf63:	eb db                	jmp    c000cf40 <sendKeyToTerminal(unsigned char)+0x6e>
c000cf65:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf6a:	83 e8 01             	sub    eax,0x1
c000cf6d:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf72:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf77:	85 c0                	test   eax,eax
c000cf79:	75 18                	jne    c000cf93 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf7b:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c000cf80:	85 c0                	test   eax,eax
c000cf82:	74 0f                	je     c000cf93 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf84:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000cf8e:	e8 29 8b 00 00       	call   c0015abc <schedule()>
c000cf93:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf98:	83 e8 01             	sub    eax,0x1
c000cf9b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cfa0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cfa5:	85 c0                	test   eax,eax
c000cfa7:	75 01                	jne    c000cfaa <sendKeyToTerminal(unsigned char)+0xd8>
c000cfa9:	fb                   	sti    
c000cfaa:	90                   	nop
c000cfab:	c9                   	leave  
c000cfac:	c3                   	ret    

c000cfad <sendKeyboardToken(KeyboardToken)>:
c000cfad:	55                   	push   ebp
c000cfae:	89 e5                	mov    ebp,esp
c000cfb0:	83 ec 18             	sub    esp,0x18
c000cfb3:	e8 95 42 00 00       	call   c001124d <KeUserIOReceived()>
c000cfb8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfbe:	0f b7 c0             	movzx  eax,ax
c000cfc1:	83 f2 01             	xor    edx,0x1
c000cfc4:	88 90 a0 90 02 c0    	mov    BYTE PTR [eax-0x3ffd6f60],dl
c000cfca:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000cfcf:	85 c0                	test   eax,eax
c000cfd1:	74 24                	je     c000cff7 <sendKeyboardToken(KeyboardToken)+0x4a>
c000cfd3:	8b 0d 88 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029088
c000cfd9:	83 ec 04             	sub    esp,0x4
c000cfdc:	68 a0 90 02 c0       	push   0xc00290a0
c000cfe1:	83 ec 08             	sub    esp,0x8
c000cfe4:	89 e2                	mov    edx,esp
c000cfe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfe9:	89 02                	mov    DWORD PTR [edx],eax
c000cfeb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfee:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cff2:	ff d1                	call   ecx
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cffb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000cffe:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d003:	0f b6 d2             	movzx  edx,dl
c000d006:	0f b6 c0             	movzx  eax,al
c000d009:	39 c2                	cmp    edx,eax
c000d00b:	74 1c                	je     c000d029 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d00d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d010:	a2 a8 94 02 c0       	mov    ds:0xc00294a8,al
c000d015:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d01a:	0f b6 c0             	movzx  eax,al
c000d01d:	83 ec 0c             	sub    esp,0xc
c000d020:	50                   	push   eax
c000d021:	e8 dc b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d026:	83 c4 10             	add    esp,0x10
c000d029:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d02c:	0f b6 c0             	movzx  eax,al
c000d02f:	85 c0                	test   eax,eax
c000d031:	0f 84 da 00 00 00    	je     c000d111 <sendKeyboardToken(KeyboardToken)+0x164>
c000d037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d03a:	0f b7 c0             	movzx  eax,ax
c000d03d:	3d 18 03 00 00       	cmp    eax,0x318
c000d042:	75 06                	jne    c000d04a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d044:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d04a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04d:	0f b7 c0             	movzx  eax,ax
c000d050:	3d 19 03 00 00       	cmp    eax,0x319
c000d055:	75 06                	jne    c000d05d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d057:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d060:	0f b7 c0             	movzx  eax,ax
c000d063:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d068:	75 06                	jne    c000d070 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d06a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d073:	0f b7 c0             	movzx  eax,ax
c000d076:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d07b:	75 06                	jne    c000d083 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d07d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d086:	0f b7 c0             	movzx  eax,ax
c000d089:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d08e:	75 06                	jne    c000d096 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d090:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d099:	0f b7 c0             	movzx  eax,ax
c000d09c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0a1:	75 06                	jne    c000d0a9 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0a3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0ac:	0f b7 c0             	movzx  eax,ax
c000d0af:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0b4:	75 06                	jne    c000d0bc <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0b6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0bf:	0f b7 c0             	movzx  eax,ax
c000d0c2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0c7:	75 06                	jne    c000d0cf <sendKeyboardToken(KeyboardToken)+0x122>
c000d0c9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0d2:	0f b7 c0             	movzx  eax,ax
c000d0d5:	3d 20 03 00 00       	cmp    eax,0x320
c000d0da:	75 06                	jne    c000d0e2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d0dc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d0e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e5:	0f b7 c0             	movzx  eax,ax
c000d0e8:	3d 21 03 00 00       	cmp    eax,0x321
c000d0ed:	75 06                	jne    c000d0f5 <sendKeyboardToken(KeyboardToken)+0x148>
c000d0ef:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f8:	0f b7 c0             	movzx  eax,ax
c000d0fb:	3d 22 03 00 00       	cmp    eax,0x322
c000d100:	0f 85 f1 00 00 00    	jne    c000d1f7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d106:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d10c:	e9 e6 00 00 00       	jmp    c000d1f7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d114:	0f b7 c0             	movzx  eax,ax
c000d117:	3d 18 03 00 00       	cmp    eax,0x318
c000d11c:	75 0a                	jne    c000d128 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d11e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d124:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d12b:	0f b7 c0             	movzx  eax,ax
c000d12e:	3d 19 03 00 00       	cmp    eax,0x319
c000d133:	75 0a                	jne    c000d13f <sendKeyboardToken(KeyboardToken)+0x192>
c000d135:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d13b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d13f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d142:	0f b7 c0             	movzx  eax,ax
c000d145:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d14a:	75 0a                	jne    c000d156 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d14c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d152:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d159:	0f b7 c0             	movzx  eax,ax
c000d15c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d161:	75 0a                	jne    c000d16d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d163:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d169:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d16d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d170:	0f b7 c0             	movzx  eax,ax
c000d173:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d178:	75 0a                	jne    c000d184 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d17a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d180:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d187:	0f b7 c0             	movzx  eax,ax
c000d18a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d18f:	75 0a                	jne    c000d19b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d191:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d197:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d19b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d19e:	0f b7 c0             	movzx  eax,ax
c000d1a1:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1a6:	75 0a                	jne    c000d1b2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d1a8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d1ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b5:	0f b7 c0             	movzx  eax,ax
c000d1b8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1bd:	75 0a                	jne    c000d1c9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1bf:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cc:	0f b7 c0             	movzx  eax,ax
c000d1cf:	3d 20 03 00 00       	cmp    eax,0x320
c000d1d4:	75 0a                	jne    c000d1e0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d1d6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d1dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e3:	0f b7 c0             	movzx  eax,ax
c000d1e6:	3d 21 03 00 00       	cmp    eax,0x321
c000d1eb:	75 0a                	jne    c000d1f7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1ed:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d1f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1fa:	0f b7 c0             	movzx  eax,ax
c000d1fd:	3d 00 02 00 00       	cmp    eax,0x200
c000d202:	75 2f                	jne    c000d233 <sendKeyboardToken(KeyboardToken)+0x286>
c000d204:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d209:	83 f0 01             	xor    eax,0x1
c000d20c:	0f b6 c0             	movzx  eax,al
c000d20f:	85 c0                	test   eax,eax
c000d211:	74 20                	je     c000d233 <sendKeyboardToken(KeyboardToken)+0x286>
c000d213:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d218:	6a 01                	push   0x1
c000d21a:	6a 00                	push   0x0
c000d21c:	68 f6 cd 00 c0       	push   0xc000cdf6
c000d221:	50                   	push   eax
c000d222:	e8 45 86 00 00       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c000d227:	83 c4 10             	add    esp,0x10
c000d22a:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d231:	eb 3a                	jmp    c000d26d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d236:	0f b7 c0             	movzx  eax,ax
c000d239:	3d 01 02 00 00       	cmp    eax,0x201
c000d23e:	75 2d                	jne    c000d26d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d240:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d245:	83 f0 01             	xor    eax,0x1
c000d248:	0f b6 c0             	movzx  eax,al
c000d24b:	85 c0                	test   eax,eax
c000d24d:	74 1e                	je     c000d26d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d24f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d254:	6a 01                	push   0x1
c000d256:	6a 00                	push   0x0
c000d258:	68 64 ce 00 c0       	push   0xc000ce64
c000d25d:	50                   	push   eax
c000d25e:	e8 09 86 00 00       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c000d263:	83 c4 10             	add    esp,0x10
c000d266:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d26d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d270:	0f b7 c0             	movzx  eax,ax
c000d273:	3d 25 03 00 00       	cmp    eax,0x325
c000d278:	75 06                	jne    c000d280 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d27a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d283:	0f b7 c0             	movzx  eax,ax
c000d286:	3d 24 03 00 00       	cmp    eax,0x324
c000d28b:	75 06                	jne    c000d293 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d28d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d296:	0f b7 c0             	movzx  eax,ax
c000d299:	3d 23 03 00 00       	cmp    eax,0x323
c000d29e:	75 06                	jne    c000d2a6 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2a0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a9:	0f b7 c0             	movzx  eax,ax
c000d2ac:	3d 26 03 00 00       	cmp    eax,0x326
c000d2b1:	75 06                	jne    c000d2b9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2b3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bc:	0f b7 c0             	movzx  eax,ax
c000d2bf:	3d 27 03 00 00       	cmp    eax,0x327
c000d2c4:	75 06                	jne    c000d2cc <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2c6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cf:	0f b7 c0             	movzx  eax,ax
c000d2d2:	3d 22 03 00 00       	cmp    eax,0x322
c000d2d7:	75 06                	jne    c000d2df <sendKeyboardToken(KeyboardToken)+0x332>
c000d2d9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d2df:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d2e3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d2e6:	83 f0 01             	xor    eax,0x1
c000d2e9:	0f b6 c0             	movzx  eax,al
c000d2ec:	85 c0                	test   eax,eax
c000d2ee:	74 7c                	je     c000d36c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d2f0:	a0 a1 91 02 c0       	mov    al,ds:0xc00291a1
c000d2f5:	0f b6 c0             	movzx  eax,al
c000d2f8:	85 c0                	test   eax,eax
c000d2fa:	74 43                	je     c000d33f <sendKeyboardToken(KeyboardToken)+0x392>
c000d2fc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d300:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d304:	85 c0                	test   eax,eax
c000d306:	74 2b                	je     c000d333 <sendKeyboardToken(KeyboardToken)+0x386>
c000d308:	8b 15 a4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294a4
c000d30e:	89 d0                	mov    eax,edx
c000d310:	c1 e0 02             	shl    eax,0x2
c000d313:	01 d0                	add    eax,edx
c000d315:	01 c0                	add    eax,eax
c000d317:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d31c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d31f:	0f b7 c0             	movzx  eax,ax
c000d322:	8d 50 d0             	lea    edx,[eax-0x30]
c000d325:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d32a:	01 d0                	add    eax,edx
c000d32c:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d331:	eb 71                	jmp    c000d3a4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d333:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d33d:	eb 65                	jmp    c000d3a4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d33f:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d344:	85 c0                	test   eax,eax
c000d346:	74 18                	je     c000d360 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d348:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d34d:	0f b6 c0             	movzx  eax,al
c000d350:	83 ec 0c             	sub    esp,0xc
c000d353:	50                   	push   eax
c000d354:	e8 79 fb ff ff       	call   c000ced2 <sendKeyToTerminal(unsigned char)>
c000d359:	83 c4 10             	add    esp,0x10
c000d35c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d360:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d36a:	eb 38                	jmp    c000d3a4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d36f:	0f b7 c0             	movzx  eax,ax
c000d372:	3d 01 01 00 00       	cmp    eax,0x101
c000d377:	75 2b                	jne    c000d3a4 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d379:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d37e:	85 c0                	test   eax,eax
c000d380:	74 18                	je     c000d39a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d382:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d387:	0f b6 c0             	movzx  eax,al
c000d38a:	83 ec 0c             	sub    esp,0xc
c000d38d:	50                   	push   eax
c000d38e:	e8 3f fb ff ff       	call   c000ced2 <sendKeyToTerminal(unsigned char)>
c000d393:	83 c4 10             	add    esp,0x10
c000d396:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d39a:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d3a4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3a7:	83 f0 01             	xor    eax,0x1
c000d3aa:	0f b6 c0             	movzx  eax,al
c000d3ad:	85 c0                	test   eax,eax
c000d3af:	74 5a                	je     c000d40b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3b4:	83 f0 01             	xor    eax,0x1
c000d3b7:	0f b6 c0             	movzx  eax,al
c000d3ba:	85 c0                	test   eax,eax
c000d3bc:	74 4d                	je     c000d40b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3be:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d3c3:	83 f0 01             	xor    eax,0x1
c000d3c6:	0f b6 c0             	movzx  eax,al
c000d3c9:	85 c0                	test   eax,eax
c000d3cb:	74 3e                	je     c000d40b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d0:	0f b7 c0             	movzx  eax,ax
c000d3d3:	83 f8 1f             	cmp    eax,0x1f
c000d3d6:	76 0b                	jbe    c000d3e3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d3d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3db:	0f b7 c0             	movzx  eax,ax
c000d3de:	83 f8 7e             	cmp    eax,0x7e
c000d3e1:	76 16                	jbe    c000d3f9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e6:	0f b7 c0             	movzx  eax,ax
c000d3e9:	83 f8 0a             	cmp    eax,0xa
c000d3ec:	74 0b                	je     c000d3f9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f1:	0f b7 c0             	movzx  eax,ax
c000d3f4:	83 f8 08             	cmp    eax,0x8
c000d3f7:	75 12                	jne    c000d40b <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fc:	0f b6 c0             	movzx  eax,al
c000d3ff:	83 ec 0c             	sub    esp,0xc
c000d402:	50                   	push   eax
c000d403:	e8 ca fa ff ff       	call   c000ced2 <sendKeyToTerminal(unsigned char)>
c000d408:	83 c4 10             	add    esp,0x10
c000d40b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d40e:	83 f0 01             	xor    eax,0x1
c000d411:	0f b6 c0             	movzx  eax,al
c000d414:	85 c0                	test   eax,eax
c000d416:	74 5d                	je     c000d475 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d418:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d41b:	83 f0 01             	xor    eax,0x1
c000d41e:	0f b6 c0             	movzx  eax,al
c000d421:	85 c0                	test   eax,eax
c000d423:	74 50                	je     c000d475 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d425:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d42a:	0f b6 c0             	movzx  eax,al
c000d42d:	85 c0                	test   eax,eax
c000d42f:	74 44                	je     c000d475 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d434:	0f b7 c0             	movzx  eax,ax
c000d437:	83 f8 3f             	cmp    eax,0x3f
c000d43a:	76 39                	jbe    c000d475 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43f:	0f b7 c0             	movzx  eax,ax
c000d442:	83 f8 7f             	cmp    eax,0x7f
c000d445:	77 2e                	ja     c000d475 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44a:	88 c2                	mov    dl,al
c000d44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44f:	0f b7 c0             	movzx  eax,ax
c000d452:	83 f8 5f             	cmp    eax,0x5f
c000d455:	76 04                	jbe    c000d45b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d457:	b0 20                	mov    al,0x20
c000d459:	eb 02                	jmp    c000d45d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d45b:	b0 00                	mov    al,0x0
c000d45d:	89 d1                	mov    ecx,edx
c000d45f:	29 c1                	sub    ecx,eax
c000d461:	89 c8                	mov    eax,ecx
c000d463:	83 e8 40             	sub    eax,0x40
c000d466:	0f b6 c0             	movzx  eax,al
c000d469:	83 ec 0c             	sub    esp,0xc
c000d46c:	50                   	push   eax
c000d46d:	e8 60 fa ff ff       	call   c000ced2 <sendKeyToTerminal(unsigned char)>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d478:	0f b7 c0             	movzx  eax,ax
c000d47b:	3d 00 03 00 00       	cmp    eax,0x300
c000d480:	75 12                	jne    c000d494 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d482:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d485:	83 f0 01             	xor    eax,0x1
c000d488:	0f b6 c0             	movzx  eax,al
c000d48b:	85 c0                	test   eax,eax
c000d48d:	74 05                	je     c000d494 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d48f:	e8 6f b0 ff ff       	call   c0008503 <doTerminalCycle()>
c000d494:	90                   	nop
c000d495:	c9                   	leave  
c000d496:	c3                   	ret    

c000d497 <clearInternalKeybuffer(VgaText*)>:
c000d497:	55                   	push   ebp
c000d498:	89 e5                	mov    ebp,esp
c000d49a:	83 ec 08             	sub    esp,0x8
c000d49d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a0:	05 02 01 00 00       	add    eax,0x102
c000d4a5:	83 ec 0c             	sub    esp,0xc
c000d4a8:	50                   	push   eax
c000d4a9:	e8 c2 30 ff ff       	call   c0000570 <strlen>
c000d4ae:	83 c4 10             	add    esp,0x10
c000d4b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4b4:	81 c2 02 01 00 00    	add    edx,0x102
c000d4ba:	83 ec 04             	sub    esp,0x4
c000d4bd:	50                   	push   eax
c000d4be:	6a 00                	push   0x0
c000d4c0:	52                   	push   edx
c000d4c1:	e8 2a 30 ff ff       	call   c00004f0 <memset>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	90                   	nop
c000d4ca:	c9                   	leave  
c000d4cb:	c3                   	ret    

c000d4cc <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4cc:	55                   	push   ebp
c000d4cd:	89 e5                	mov    ebp,esp
c000d4cf:	83 ec 18             	sub    esp,0x18
c000d4d2:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000d4d7:	85 c0                	test   eax,eax
c000d4d9:	74 2a                	je     c000d505 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d4db:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d4e1:	8b 0d 88 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029088
c000d4e7:	83 ec 04             	sub    esp,0x4
c000d4ea:	68 a0 90 02 c0       	push   0xc00290a0
c000d4ef:	83 ec 08             	sub    esp,0x8
c000d4f2:	89 e2                	mov    edx,esp
c000d4f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d4f7:	89 02                	mov    DWORD PTR [edx],eax
c000d4f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d4fc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d500:	ff d1                	call   ecx
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	fb                   	sti    
c000d506:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d50d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d511:	0f 84 0d 01 00 00    	je     c000d624 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d520:	0f be c0             	movsx  eax,al
c000d523:	85 c0                	test   eax,eax
c000d525:	75 2c                	jne    c000d553 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d527:	fa                   	cli    
c000d528:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d52d:	83 c0 01             	add    eax,0x1
c000d530:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d535:	e8 82 85 00 00       	call   c0015abc <schedule()>
c000d53a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d53f:	83 e8 01             	sub    eax,0x1
c000d542:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d547:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d54c:	85 c0                	test   eax,eax
c000d54e:	75 c7                	jne    c000d517 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d550:	fb                   	sti    
c000d551:	eb c4                	jmp    c000d517 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d553:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d556:	8d 50 01             	lea    edx,[eax+0x1]
c000d559:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d55c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d55f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d565:	88 10                	mov    BYTE PTR [eax],dl
c000d567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d570:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d573:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d577:	83 f8 03             	cmp    eax,0x3
c000d57a:	75 1e                	jne    c000d59a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d57c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d581:	8b 00                	mov    eax,DWORD PTR [eax]
c000d583:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d586:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d58c:	83 ec 08             	sub    esp,0x8
c000d58f:	6a 02                	push   0x2
c000d591:	50                   	push   eax
c000d592:	e8 07 41 00 00       	call   c001169e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d597:	83 c4 10             	add    esp,0x10
c000d59a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d59e:	83 f8 1c             	cmp    eax,0x1c
c000d5a1:	75 1e                	jne    c000d5c1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5a3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5ad:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5b3:	83 ec 08             	sub    esp,0x8
c000d5b6:	6a 09                	push   0x9
c000d5b8:	50                   	push   eax
c000d5b9:	e8 e0 40 00 00       	call   c001169e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5be:	83 c4 10             	add    esp,0x10
c000d5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c4:	05 02 01 00 00       	add    eax,0x102
c000d5c9:	83 ec 0c             	sub    esp,0xc
c000d5cc:	50                   	push   eax
c000d5cd:	e8 9e 2f ff ff       	call   c0000570 <strlen>
c000d5d2:	83 c4 10             	add    esp,0x10
c000d5d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5d8:	81 c2 02 01 00 00    	add    edx,0x102
c000d5de:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5e4:	81 c2 02 01 00 00    	add    edx,0x102
c000d5ea:	83 ec 04             	sub    esp,0x4
c000d5ed:	50                   	push   eax
c000d5ee:	51                   	push   ecx
c000d5ef:	52                   	push   edx
c000d5f0:	e8 db 2d ff ff       	call   c00003d0 <memmove>
c000d5f5:	83 c4 10             	add    esp,0x10
c000d5f8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d5fc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d600:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d604:	83 f8 0a             	cmp    eax,0xa
c000d607:	74 16                	je     c000d61f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d609:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d60d:	83 f8 03             	cmp    eax,0x3
c000d610:	74 0d                	je     c000d61f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d612:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d616:	83 f8 1c             	cmp    eax,0x1c
c000d619:	0f 85 ee fe ff ff    	jne    c000d50d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d61f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d622:	eb 03                	jmp    c000d627 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d624:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d627:	c9                   	leave  
c000d628:	c3                   	ret    
c000d629:	90                   	nop

c000d62a <Keyboard::Keyboard(char const*)>:
c000d62a:	83 ec 0c             	sub    esp,0xc
c000d62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d631:	83 ec 08             	sub    esp,0x8
c000d634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d638:	50                   	push   eax
c000d639:	e8 4c f1 ff ff       	call   c000c78a <Device::Device(char const*)>
c000d63e:	83 c4 10             	add    esp,0x10
c000d641:	ba 7c 15 02 c0       	mov    edx,0xc002157c
c000d646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d64a:	89 10                	mov    DWORD PTR [eax],edx
c000d64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d650:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d65a:	c6 05 84 90 02 c0 01 	mov    BYTE PTR ds:0xc0029084,0x1
c000d661:	90                   	nop
c000d662:	83 c4 0c             	add    esp,0xc
c000d665:	c3                   	ret    

c000d666 <Keyboard::~Keyboard()>:
c000d666:	83 ec 0c             	sub    esp,0xc
c000d669:	ba 7c 15 02 c0       	mov    edx,0xc002157c
c000d66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d672:	89 10                	mov    DWORD PTR [eax],edx
c000d674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d678:	83 ec 0c             	sub    esp,0xc
c000d67b:	50                   	push   eax
c000d67c:	e8 73 ee ff ff       	call   c000c4f4 <Device::~Device()>
c000d681:	83 c4 10             	add    esp,0x10
c000d684:	90                   	nop
c000d685:	83 c4 0c             	add    esp,0xc
c000d688:	c3                   	ret    
c000d689:	90                   	nop

c000d68a <Keyboard::~Keyboard()>:
c000d68a:	83 ec 0c             	sub    esp,0xc
c000d68d:	83 ec 0c             	sub    esp,0xc
c000d690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d694:	e8 cd ff ff ff       	call   c000d666 <Keyboard::~Keyboard()>
c000d699:	83 c4 10             	add    esp,0x10
c000d69c:	83 ec 08             	sub    esp,0x8
c000d69f:	68 5c 01 00 00       	push   0x15c
c000d6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a8:	e8 6b d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d6ad:	83 c4 10             	add    esp,0x10
c000d6b0:	83 c4 0c             	add    esp,0xc
c000d6b3:	c3                   	ret    

c000d6b4 <LogicalDisk::close(int, int, void*)>:
c000d6b4:	83 c8 ff             	or     eax,0xffffffff
c000d6b7:	c3                   	ret    

c000d6b8 <LogicalDisk::~LogicalDisk()>:
c000d6b8:	83 ec 0c             	sub    esp,0xc
c000d6bb:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c000d6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c4:	89 10                	mov    DWORD PTR [eax],edx
c000d6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ca:	83 ec 0c             	sub    esp,0xc
c000d6cd:	50                   	push   eax
c000d6ce:	e8 21 ee ff ff       	call   c000c4f4 <Device::~Device()>
c000d6d3:	83 c4 10             	add    esp,0x10
c000d6d6:	90                   	nop
c000d6d7:	83 c4 0c             	add    esp,0xc
c000d6da:	c3                   	ret    
c000d6db:	90                   	nop

c000d6dc <LogicalDisk::~LogicalDisk()>:
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	83 ec 0c             	sub    esp,0xc
c000d6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e6:	e8 cd ff ff ff       	call   c000d6b8 <LogicalDisk::~LogicalDisk()>
c000d6eb:	83 c4 10             	add    esp,0x10
c000d6ee:	83 ec 08             	sub    esp,0x8
c000d6f1:	68 78 01 00 00       	push   0x178
c000d6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6fa:	e8 19 d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d6ff:	83 c4 10             	add    esp,0x10
c000d702:	83 c4 0c             	add    esp,0xc
c000d705:	c3                   	ret    

c000d706 <LogicalDisk::open(int, int, void*)>:
c000d706:	83 ec 18             	sub    esp,0x18
c000d709:	68 a8 15 02 c0       	push   0xc00215a8
c000d70e:	e8 ea 3a 00 00       	call   c00111fd <KePanic(char const*)>
c000d713:	83 c8 ff             	or     eax,0xffffffff
c000d716:	83 c4 1c             	add    esp,0x1c
c000d719:	c3                   	ret    

c000d71a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d71a:	53                   	push   ebx
c000d71b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d71f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d723:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d727:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d72d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d733:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d739:	77 10                	ja     c000d74b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d73b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d741:	89 d3                	mov    ebx,edx
c000d743:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d749:	72 05                	jb     c000d750 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d74b:	83 c8 ff             	or     eax,0xffffffff
c000d74e:	89 c2                	mov    edx,eax
c000d750:	5b                   	pop    ebx
c000d751:	c3                   	ret    

c000d752 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d752:	56                   	push   esi
c000d753:	83 c8 ff             	or     eax,0xffffffff
c000d756:	53                   	push   ebx
c000d757:	89 c2                	mov    edx,eax
c000d759:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d75d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d761:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d765:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d76b:	77 27                	ja     c000d794 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d76d:	89 d8                	mov    eax,ebx
c000d76f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d775:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d77b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d780:	89 c2                	mov    edx,eax
c000d782:	73 10                	jae    c000d794 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d784:	89 c8                	mov    eax,ecx
c000d786:	89 da                	mov    edx,ebx
c000d788:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d78e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d794:	5b                   	pop    ebx
c000d795:	5e                   	pop    esi
c000d796:	c3                   	ret    
c000d797:	90                   	nop

c000d798 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d798:	83 ec 1c             	sub    esp,0x1c
c000d79b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d79f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7af:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7be:	83 ec 08             	sub    esp,0x8
c000d7c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7c5:	50                   	push   eax
c000d7c6:	e8 bf ef ff ff       	call   c000c78a <Device::Device(char const*)>
c000d7cb:	83 c4 10             	add    esp,0x10
c000d7ce:	ba f4 15 02 c0       	mov    edx,0xc00215f4
c000d7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d7:	89 10                	mov    DWORD PTR [eax],edx
c000d7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7dd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d7ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fe:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d808:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d80c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d810:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d814:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d81a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d820:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d824:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d827:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d82b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d831:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d83b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d83f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d849:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d853:	90                   	nop
c000d854:	83 c4 1c             	add    esp,0x1c
c000d857:	c3                   	ret    

c000d858 <LogicalDisk::assignDriveLetter()>:
c000d858:	55                   	push   ebp
c000d859:	57                   	push   edi
c000d85a:	56                   	push   esi
c000d85b:	53                   	push   ebx
c000d85c:	83 ec 14             	sub    esp,0x14
c000d85f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d863:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d869:	b0 41                	mov    al,0x41
c000d86b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d871:	84 d2                	test   dl,dl
c000d873:	75 02                	jne    c000d877 <LogicalDisk::assignDriveLetter()+0x1f>
c000d875:	b0 43                	mov    al,0x43
c000d877:	8b 3d c0 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c0
c000d87d:	0f b6 ca             	movzx  ecx,dl
c000d880:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d884:	0f be e8             	movsx  ebp,al
c000d887:	8b 3d c4 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c4
c000d88d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d891:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d895:	3c 43                	cmp    al,0x43
c000d897:	75 10                	jne    c000d8a9 <LogicalDisk::assignDriveLetter()+0x51>
c000d899:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8a0:	75 5a                	jne    c000d8fc <LogicalDisk::assignDriveLetter()+0xa4>
c000d8a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8a7:	75 53                	jne    c000d8fc <LogicalDisk::assignDriveLetter()+0xa4>
c000d8a9:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d8ac:	ba 01 00 00 00       	mov    edx,0x1
c000d8b1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8b4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8b7:	d3 e2                	shl    edx,cl
c000d8b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8bd:	89 d7                	mov    edi,edx
c000d8bf:	89 d6                	mov    esi,edx
c000d8c1:	c1 ff 1f             	sar    edi,0x1f
c000d8c4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8c8:	21 f9                	and    ecx,edi
c000d8ca:	09 d1                	or     ecx,edx
c000d8cc:	75 2e                	jne    c000d8fc <LogicalDisk::assignDriveLetter()+0xa4>
c000d8ce:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8d6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d8dc:	09 f2                	or     edx,esi
c000d8de:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d8e1:	89 15 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,edx
c000d8e7:	89 1c b5 e0 94 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6b20],ebx
c000d8ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d8f2:	09 fa                	or     edx,edi
c000d8f4:	89 15 c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edx
c000d8fa:	eb 0d                	jmp    c000d909 <LogicalDisk::assignDriveLetter()+0xb1>
c000d8fc:	8d 50 01             	lea    edx,[eax+0x1]
c000d8ff:	45                   	inc    ebp
c000d900:	88 d0                	mov    al,dl
c000d902:	80 fa 5b             	cmp    dl,0x5b
c000d905:	75 8e                	jne    c000d895 <LogicalDisk::assignDriveLetter()+0x3d>
c000d907:	31 c0                	xor    eax,eax
c000d909:	83 c4 14             	add    esp,0x14
c000d90c:	5b                   	pop    ebx
c000d90d:	5e                   	pop    esi
c000d90e:	5f                   	pop    edi
c000d90f:	5d                   	pop    ebp
c000d910:	c3                   	ret    
c000d911:	90                   	nop

c000d912 <LogicalDisk::mount()>:
c000d912:	56                   	push   esi
c000d913:	53                   	push   ebx
c000d914:	53                   	push   ebx
c000d915:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d919:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c000d91f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d929:	85 db                	test   ebx,ebx
c000d92b:	74 27                	je     c000d954 <LogicalDisk::mount()+0x42>
c000d92d:	51                   	push   ecx
c000d92e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d935:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d937:	83 e8 41             	sub    eax,0x41
c000d93a:	50                   	push   eax
c000d93b:	56                   	push   esi
c000d93c:	53                   	push   ebx
c000d93d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	84 c0                	test   al,al
c000d945:	74 08                	je     c000d94f <LogicalDisk::mount()+0x3d>
c000d947:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d94d:	eb 07                	jmp    c000d956 <LogicalDisk::mount()+0x44>
c000d94f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d952:	eb d5                	jmp    c000d929 <LogicalDisk::mount()+0x17>
c000d954:	31 c0                	xor    eax,eax
c000d956:	5a                   	pop    edx
c000d957:	5b                   	pop    ebx
c000d958:	5e                   	pop    esi
c000d959:	c3                   	ret    

c000d95a <LogicalDisk::unmount()>:
c000d95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d95e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d968:	c3                   	ret    
c000d969:	90                   	nop

c000d96a <LogicalDisk::eject()>:
c000d96a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d96e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d974:	8b 10                	mov    edx,DWORD PTR [eax]
c000d976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d97a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d97d:	90                   	nop

c000d97e <LogicalDisk::unassignDriveLetter()>:
c000d97e:	57                   	push   edi
c000d97f:	56                   	push   esi
c000d980:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d984:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d98b:	85 c9                	test   ecx,ecx
c000d98d:	75 0f                	jne    c000d99e <LogicalDisk::unassignDriveLetter()+0x20>
c000d98f:	c7 44 24 0c cc 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc00215cc
c000d997:	5e                   	pop    esi
c000d998:	5f                   	pop    edi
c000d999:	e9 5f 38 00 00       	jmp    c00111fd <KePanic(char const*)>
c000d99e:	83 e9 41             	sub    ecx,0x41
c000d9a1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d9a8:	b8 01 00 00 00       	mov    eax,0x1
c000d9ad:	c7 04 8d e0 94 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6b20],0x0
c000d9b8:	d3 e0                	shl    eax,cl
c000d9ba:	89 c7                	mov    edi,eax
c000d9bc:	f7 d0                	not    eax
c000d9be:	c1 ff 1f             	sar    edi,0x1f
c000d9c1:	21 05 c0 94 02 c0    	and    DWORD PTR ds:0xc00294c0,eax
c000d9c7:	89 fe                	mov    esi,edi
c000d9c9:	f7 d6                	not    esi
c000d9cb:	21 35 c4 94 02 c0    	and    DWORD PTR ds:0xc00294c4,esi
c000d9d1:	5e                   	pop    esi
c000d9d2:	5f                   	pop    edi
c000d9d3:	c3                   	ret    

c000d9d4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9d4:	57                   	push   edi
c000d9d5:	56                   	push   esi
c000d9d6:	53                   	push   ebx
c000d9d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9df:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9e7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d9ed:	77 41                	ja     c000da30 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d9ef:	99                   	cdq    
c000d9f0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d9f6:	01 c8                	add    eax,ecx
c000d9f8:	11 da                	adc    edx,ebx
c000d9fa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da00:	19 d7                	sbb    edi,edx
c000da02:	72 33                	jb     c000da37 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da04:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da0a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da10:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da14:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da18:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da1e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da28:	5b                   	pop    ebx
c000da29:	5e                   	pop    esi
c000da2a:	5f                   	pop    edi
c000da2b:	e9 c6 0a 00 00       	jmp    c000e4f6 <VCache::read(unsigned long long, int, void*)>
c000da30:	b8 05 00 00 00       	mov    eax,0x5
c000da35:	eb 05                	jmp    c000da3c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da37:	b8 07 00 00 00       	mov    eax,0x7
c000da3c:	5b                   	pop    ebx
c000da3d:	5e                   	pop    esi
c000da3e:	5f                   	pop    edi
c000da3f:	c3                   	ret    

c000da40 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da40:	57                   	push   edi
c000da41:	56                   	push   esi
c000da42:	53                   	push   ebx
c000da43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da4b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da53:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da59:	77 41                	ja     c000da9c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da5b:	99                   	cdq    
c000da5c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da62:	01 c8                	add    eax,ecx
c000da64:	11 da                	adc    edx,ebx
c000da66:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da6c:	19 d7                	sbb    edi,edx
c000da6e:	72 33                	jb     c000daa3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da70:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da76:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da7c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da80:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da84:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da94:	5b                   	pop    ebx
c000da95:	5e                   	pop    esi
c000da96:	5f                   	pop    edi
c000da97:	e9 6c 09 00 00       	jmp    c000e408 <VCache::write(unsigned long long, int, void*)>
c000da9c:	b8 05 00 00 00       	mov    eax,0x5
c000daa1:	eb 05                	jmp    c000daa8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000daa3:	b8 07 00 00 00       	mov    eax,0x7
c000daa8:	5b                   	pop    ebx
c000daa9:	5e                   	pop    esi
c000daaa:	5f                   	pop    edi
c000daab:	c3                   	ret    

c000daac <Mouse::Mouse(char const*)>:
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab3:	83 ec 08             	sub    esp,0x8
c000dab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daba:	50                   	push   eax
c000dabb:	e8 ca ec ff ff       	call   c000c78a <Device::Device(char const*)>
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	ba 20 16 02 c0       	mov    edx,0xc0021620
c000dac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dacc:	89 10                	mov    DWORD PTR [eax],edx
c000dace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dadc:	90                   	nop
c000dadd:	83 c4 0c             	add    esp,0xc
c000dae0:	c3                   	ret    
c000dae1:	90                   	nop
c000dae2:	66 90                	xchg   ax,ax

c000dae4 <Mouse::~Mouse()>:
c000dae4:	83 ec 0c             	sub    esp,0xc
c000dae7:	ba 20 16 02 c0       	mov    edx,0xc0021620
c000daec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf0:	89 10                	mov    DWORD PTR [eax],edx
c000daf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf6:	83 ec 0c             	sub    esp,0xc
c000daf9:	50                   	push   eax
c000dafa:	e8 f5 e9 ff ff       	call   c000c4f4 <Device::~Device()>
c000daff:	83 c4 10             	add    esp,0x10
c000db02:	90                   	nop
c000db03:	83 c4 0c             	add    esp,0xc
c000db06:	c3                   	ret    
c000db07:	90                   	nop

c000db08 <Mouse::~Mouse()>:
c000db08:	83 ec 0c             	sub    esp,0xc
c000db0b:	83 ec 0c             	sub    esp,0xc
c000db0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db12:	e8 cd ff ff ff       	call   c000dae4 <Mouse::~Mouse()>
c000db17:	83 c4 10             	add    esp,0x10
c000db1a:	83 ec 08             	sub    esp,0x8
c000db1d:	68 58 01 00 00       	push   0x158
c000db22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db26:	e8 ed cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db2b:	83 c4 10             	add    esp,0x10
c000db2e:	83 c4 0c             	add    esp,0xc
c000db31:	c3                   	ret    

c000db32 <NIC::getMAC()>:
c000db32:	31 c0                	xor    eax,eax
c000db34:	31 d2                	xor    edx,edx
c000db36:	c3                   	ret    
c000db37:	90                   	nop

c000db38 <NIC::write(int, unsigned char*, int*)>:
c000db38:	b8 01 00 00 00       	mov    eax,0x1
c000db3d:	c3                   	ret    

c000db3e <NIC::NIC(char const*)>:
c000db3e:	83 ec 0c             	sub    esp,0xc
c000db41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db45:	83 ec 08             	sub    esp,0x8
c000db48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4c:	50                   	push   eax
c000db4d:	e8 38 ec ff ff       	call   c000c78a <Device::Device(char const*)>
c000db52:	83 c4 10             	add    esp,0x10
c000db55:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000db5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5e:	89 10                	mov    DWORD PTR [eax],edx
c000db60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db64:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db6e:	90                   	nop
c000db6f:	83 c4 0c             	add    esp,0xc
c000db72:	c3                   	ret    
c000db73:	90                   	nop

c000db74 <NIC::~NIC()>:
c000db74:	83 ec 0c             	sub    esp,0xc
c000db77:	ba 4c 16 02 c0       	mov    edx,0xc002164c
c000db7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db80:	89 10                	mov    DWORD PTR [eax],edx
c000db82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db86:	83 ec 0c             	sub    esp,0xc
c000db89:	50                   	push   eax
c000db8a:	e8 65 e9 ff ff       	call   c000c4f4 <Device::~Device()>
c000db8f:	83 c4 10             	add    esp,0x10
c000db92:	90                   	nop
c000db93:	83 c4 0c             	add    esp,0xc
c000db96:	c3                   	ret    
c000db97:	90                   	nop

c000db98 <NIC::~NIC()>:
c000db98:	83 ec 0c             	sub    esp,0xc
c000db9b:	83 ec 0c             	sub    esp,0xc
c000db9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba2:	e8 cd ff ff ff       	call   c000db74 <NIC::~NIC()>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	83 ec 08             	sub    esp,0x8
c000dbad:	68 58 01 00 00       	push   0x158
c000dbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb6:	e8 5d cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	83 c4 0c             	add    esp,0xc
c000dbc1:	c3                   	ret    

c000dbc2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbc2:	55                   	push   ebp
c000dbc3:	57                   	push   edi
c000dbc4:	56                   	push   esi
c000dbc5:	53                   	push   ebx
c000dbc6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbcc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dbd3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dbda:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dbe1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dbe8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbf0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dbf7:	e8 8a ec ff ff       	call   c000c886 <Device::getName()>
c000dbfc:	5a                   	pop    edx
c000dbfd:	59                   	pop    ecx
c000dbfe:	50                   	push   eax
c000dbff:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc03:	55                   	push   ebp
c000dc04:	e8 37 2a ff ff       	call   c0000640 <strcpy>
c000dc09:	5b                   	pop    ebx
c000dc0a:	58                   	pop    eax
c000dc0b:	68 78 16 02 c0       	push   0xc0021678
c000dc10:	55                   	push   ebp
c000dc11:	e8 2a 2c ff ff       	call   c0000840 <strcat>
c000dc16:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc1d:	e8 94 9e ff ff       	call   c0007ab6 <malloc>
c000dc22:	83 c4 0c             	add    esp,0xc
c000dc25:	89 c3                	mov    ebx,eax
c000dc27:	57                   	push   edi
c000dc28:	56                   	push   esi
c000dc29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc31:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc38:	55                   	push   ebp
c000dc39:	50                   	push   eax
c000dc3a:	e8 59 fb ff ff       	call   c000d798 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc3f:	83 c4 14             	add    esp,0x14
c000dc42:	53                   	push   ebx
c000dc43:	e8 10 fc ff ff       	call   c000d858 <LogicalDisk::assignDriveLetter()>
c000dc48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc4b:	e8 c2 fc ff ff       	call   c000d912 <LogicalDisk::mount()>
c000dc50:	58                   	pop    eax
c000dc51:	5a                   	pop    edx
c000dc52:	53                   	push   ebx
c000dc53:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc5a:	e8 93 e9 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c000dc5f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc65:	5b                   	pop    ebx
c000dc66:	5e                   	pop    esi
c000dc67:	5f                   	pop    edi
c000dc68:	5d                   	pop    ebp
c000dc69:	c3                   	ret    

c000dc6a <createPartitionsForDisk(PhysicalDisk*)>:
c000dc6a:	55                   	push   ebp
c000dc6b:	57                   	push   edi
c000dc6c:	56                   	push   esi
c000dc6d:	53                   	push   ebx
c000dc6e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc74:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dc7b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc81:	3d 00 02 00 00       	cmp    eax,0x200
c000dc86:	74 27                	je     c000dcaf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dc88:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dc8e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dc94:	83 ec 10             	sub    esp,0x10
c000dc97:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dc9b:	99                   	cdq    
c000dc9c:	c1 e6 0a             	shl    esi,0xa
c000dc9f:	52                   	push   edx
c000dca0:	89 fd                	mov    ebp,edi
c000dca2:	50                   	push   eax
c000dca3:	55                   	push   ebp
c000dca4:	56                   	push   esi
c000dca5:	e8 86 14 01 00       	call   c001f130 <__udivdi3>
c000dcaa:	e9 b9 00 00 00       	jmp    c000dd68 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcaf:	83 ec 0c             	sub    esp,0xc
c000dcb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcb4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dcb8:	56                   	push   esi
c000dcb9:	6a 01                	push   0x1
c000dcbb:	6a 00                	push   0x0
c000dcbd:	6a 00                	push   0x0
c000dcbf:	53                   	push   ebx
c000dcc0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcc3:	83 c4 20             	add    esp,0x20
c000dcc6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcce:	75 0a                	jne    c000dcda <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dcd0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dcd8:	74 2c                	je     c000dd06 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dcda:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dce0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dce6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dcec:	83 ec 10             	sub    esp,0x10
c000dcef:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dcf3:	89 f7                	mov    edi,esi
c000dcf5:	c1 e0 0a             	shl    eax,0xa
c000dcf8:	c1 ff 1f             	sar    edi,0x1f
c000dcfb:	57                   	push   edi
c000dcfc:	56                   	push   esi
c000dcfd:	52                   	push   edx
c000dcfe:	50                   	push   eax
c000dcff:	e8 2c 14 01 00       	call   c001f130 <__udivdi3>
c000dd04:	eb 62                	jmp    c000dd68 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd06:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd0d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd14:	89 cf                	mov    edi,ecx
c000dd16:	83 e2 7f             	and    edx,0x7f
c000dd19:	83 e7 7f             	and    edi,0x7f
c000dd1c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd23:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd26:	83 e0 7f             	and    eax,0x7f
c000dd29:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd2c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd33:	83 e0 7f             	and    eax,0x7f
c000dd36:	01 d0                	add    eax,edx
c000dd38:	89 c5                	mov    ebp,eax
c000dd3a:	84 c0                	test   al,al
c000dd3c:	74 41                	je     c000dd7f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd3e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd44:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd4a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd50:	83 ec 10             	sub    esp,0x10
c000dd53:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd57:	89 f7                	mov    edi,esi
c000dd59:	c1 e0 0a             	shl    eax,0xa
c000dd5c:	c1 ff 1f             	sar    edi,0x1f
c000dd5f:	57                   	push   edi
c000dd60:	56                   	push   esi
c000dd61:	52                   	push   edx
c000dd62:	50                   	push   eax
c000dd63:	e8 c8 13 01 00       	call   c001f130 <__udivdi3>
c000dd68:	83 c4 14             	add    esp,0x14
c000dd6b:	52                   	push   edx
c000dd6c:	50                   	push   eax
c000dd6d:	6a 00                	push   0x0
c000dd6f:	6a 00                	push   0x0
c000dd71:	53                   	push   ebx
c000dd72:	e8 4b fe ff ff       	call   c000dbc2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd77:	83 c4 20             	add    esp,0x20
c000dd7a:	e9 73 01 00 00       	jmp    c000def2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dd7f:	89 f0                	mov    eax,esi
c000dd81:	31 c9                	xor    ecx,ecx
c000dd83:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dd8a:	75 02                	jne    c000dd8e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dd8c:	89 cd                	mov    ebp,ecx
c000dd8e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dd95:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000dd9c:	c1 e2 08             	shl    edx,0x8
c000dd9f:	c1 e6 10             	shl    esi,0x10
c000dda2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ddaa:	09 f2                	or     edx,esi
c000ddac:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ddb4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ddbb:	83 c0 10             	add    eax,0x10
c000ddbe:	09 f2                	or     edx,esi
c000ddc0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddc7:	c1 e6 18             	shl    esi,0x18
c000ddca:	09 f2                	or     edx,esi
c000ddcc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ddd3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ddd7:	c1 e6 10             	shl    esi,0x10
c000ddda:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000dde1:	c1 e2 08             	shl    edx,0x8
c000dde4:	09 f2                	or     edx,esi
c000dde6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000dded:	09 f2                	or     edx,esi
c000ddef:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ddf6:	c1 e6 18             	shl    esi,0x18
c000ddf9:	09 f2                	or     edx,esi
c000ddfb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ddff:	41                   	inc    ecx
c000de00:	83 f9 04             	cmp    ecx,0x4
c000de03:	0f 85 7a ff ff ff    	jne    c000dd83 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de0d:	83 f0 01             	xor    eax,0x1
c000de10:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de14:	75 4f                	jne    c000de65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de1a:	83 f0 01             	xor    eax,0x1
c000de1d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de21:	75 42                	jne    c000de65 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de39:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de3f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de45:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de49:	89 f7                	mov    edi,esi
c000de4b:	c1 e0 0a             	shl    eax,0xa
c000de4e:	c1 ff 1f             	sar    edi,0x1f
c000de51:	57                   	push   edi
c000de52:	56                   	push   esi
c000de53:	52                   	push   edx
c000de54:	50                   	push   eax
c000de55:	e8 d6 12 01 00       	call   c001f130 <__udivdi3>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de65:	89 e8                	mov    eax,ebp
c000de67:	0f b6 e8             	movzx  ebp,al
c000de6a:	85 ed                	test   ebp,ebp
c000de6c:	74 50                	je     c000debe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de72:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de76:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de7a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de86:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000de8a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000de8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de92:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de9a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000de9e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dea2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dea6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000deae:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000deb2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000deb6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000deba:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000debe:	31 ed                	xor    ebp,ebp
c000dec0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000dec4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000dec8:	89 f8                	mov    eax,edi
c000deca:	09 f0                	or     eax,esi
c000decc:	74 1e                	je     c000deec <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dece:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000ded2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000ded6:	89 d1                	mov    ecx,edx
c000ded8:	09 c1                	or     ecx,eax
c000deda:	74 10                	je     c000deec <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dedc:	83 ec 0c             	sub    esp,0xc
c000dedf:	57                   	push   edi
c000dee0:	56                   	push   esi
c000dee1:	52                   	push   edx
c000dee2:	50                   	push   eax
c000dee3:	53                   	push   ebx
c000dee4:	e8 d9 fc ff ff       	call   c000dbc2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dee9:	83 c4 20             	add    esp,0x20
c000deec:	45                   	inc    ebp
c000deed:	83 fd 04             	cmp    ebp,0x4
c000def0:	75 ce                	jne    c000dec0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000def2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000def8:	5b                   	pop    ebx
c000def9:	5e                   	pop    esi
c000defa:	5f                   	pop    edi
c000defb:	5d                   	pop    ebp
c000defc:	c3                   	ret    
c000defd:	66 90                	xchg   ax,ax
c000deff:	90                   	nop

c000df00 <Serial::Serial(char const*)>:
c000df00:	83 ec 0c             	sub    esp,0xc
c000df03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df07:	83 ec 08             	sub    esp,0x8
c000df0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df0e:	50                   	push   eax
c000df0f:	e8 76 e8 ff ff       	call   c000c78a <Device::Device(char const*)>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c000df1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df20:	89 10                	mov    DWORD PTR [eax],edx
c000df22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df26:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df30:	90                   	nop
c000df31:	83 c4 0c             	add    esp,0xc
c000df34:	c3                   	ret    
c000df35:	90                   	nop
c000df36:	66 90                	xchg   ax,ax

c000df38 <Serial::~Serial()>:
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c000df40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df44:	89 10                	mov    DWORD PTR [eax],edx
c000df46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4a:	83 ec 0c             	sub    esp,0xc
c000df4d:	50                   	push   eax
c000df4e:	e8 a1 e5 ff ff       	call   c000c4f4 <Device::~Device()>
c000df53:	83 c4 10             	add    esp,0x10
c000df56:	90                   	nop
c000df57:	83 c4 0c             	add    esp,0xc
c000df5a:	c3                   	ret    
c000df5b:	90                   	nop

c000df5c <Serial::~Serial()>:
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	83 ec 0c             	sub    esp,0xc
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	e8 cd ff ff ff       	call   c000df38 <Serial::~Serial()>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	83 ec 08             	sub    esp,0x8
c000df71:	68 58 01 00 00       	push   0x158
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	e8 99 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	83 c4 0c             	add    esp,0xc
c000df85:	c3                   	ret    
c000df86:	66 90                	xchg   ax,ax

c000df88 <Timer::Timer(char const*)>:
c000df88:	83 ec 0c             	sub    esp,0xc
c000df8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8f:	83 ec 08             	sub    esp,0x8
c000df92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df96:	50                   	push   eax
c000df97:	e8 ee e7 ff ff       	call   c000c78a <Device::Device(char const*)>
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000dfa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa8:	89 10                	mov    DWORD PTR [eax],edx
c000dfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfae:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfb8:	90                   	nop
c000dfb9:	83 c4 0c             	add    esp,0xc
c000dfbc:	c3                   	ret    
c000dfbd:	90                   	nop
c000dfbe:	66 90                	xchg   ax,ax

c000dfc0 <Timer::~Timer()>:
c000dfc0:	83 ec 0c             	sub    esp,0xc
c000dfc3:	ba d0 16 02 c0       	mov    edx,0xc00216d0
c000dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcc:	89 10                	mov    DWORD PTR [eax],edx
c000dfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	50                   	push   eax
c000dfd6:	e8 19 e5 ff ff       	call   c000c4f4 <Device::~Device()>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	90                   	nop
c000dfdf:	83 c4 0c             	add    esp,0xc
c000dfe2:	c3                   	ret    
c000dfe3:	90                   	nop

c000dfe4 <Timer::~Timer()>:
c000dfe4:	83 ec 0c             	sub    esp,0xc
c000dfe7:	83 ec 0c             	sub    esp,0xc
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	e8 cd ff ff ff       	call   c000dfc0 <Timer::~Timer()>
c000dff3:	83 c4 10             	add    esp,0x10
c000dff6:	83 ec 08             	sub    esp,0x8
c000dff9:	68 5c 01 00 00       	push   0x15c
c000dffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e002:	e8 11 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	83 c4 0c             	add    esp,0xc
c000e00d:	c3                   	ret    

c000e00e <Timer::read()>:
c000e00e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e012:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e018:	c3                   	ret    

c000e019 <setupTimer(int)>:
c000e019:	53                   	push   ebx
c000e01a:	83 ec 14             	sub    esp,0x14
c000e01d:	68 5c 01 00 00       	push   0x15c
c000e022:	e8 8f 9a ff ff       	call   c0007ab6 <malloc>
c000e027:	89 04 24             	mov    DWORD PTR [esp],eax
c000e02a:	89 c3                	mov    ebx,eax
c000e02c:	e8 67 09 01 00       	call   c001e998 <PIT::PIT()>
c000e031:	58                   	pop    eax
c000e032:	5a                   	pop    edx
c000e033:	53                   	push   ebx
c000e034:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e03a:	e8 b3 e5 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c000e03f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e041:	6a 00                	push   0x0
c000e043:	6a 00                	push   0x0
c000e045:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e049:	53                   	push   ebx
c000e04a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e04d:	89 d8                	mov    eax,ebx
c000e04f:	83 c4 28             	add    esp,0x28
c000e052:	5b                   	pop    ebx
c000e053:	c3                   	ret    

c000e054 <timerHandler(unsigned int)>:
c000e054:	56                   	push   esi
c000e055:	53                   	push   ebx
c000e056:	51                   	push   ecx
c000e057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05b:	01 05 4c 95 02 c0    	add    DWORD PTR ds:0xc002954c,eax
c000e061:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e068:	0f 84 4a 01 00 00    	je     c000e1b8 <timerHandler(unsigned int)+0x164>
c000e06e:	fa                   	cli    
c000e06f:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e075:	83 ec 0c             	sub    esp,0xc
c000e078:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c000e07e:	68 78 a4 02 c0       	push   0xc002a478
c000e083:	e8 78 16 01 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	84 c0                	test   al,al
c000e08d:	0f 85 a1 00 00 00    	jne    c000e134 <timerHandler(unsigned int)+0xe0>
c000e093:	83 ec 0c             	sub    esp,0xc
c000e096:	68 78 a4 02 c0       	push   0xc002a478
c000e09b:	e8 7c 16 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0a0:	83 c4 10             	add    esp,0x10
c000e0a3:	89 c6                	mov    esi,eax
c000e0a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0a8:	83 ec 0c             	sub    esp,0xc
c000e0ab:	68 78 a4 02 c0       	push   0xc002a478
c000e0b0:	e8 67 16 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0b5:	c7 04 24 78 a4 02 c0 	mov    DWORD PTR [esp],0xc002a478
c000e0bc:	89 c3                	mov    ebx,eax
c000e0be:	e8 61 16 01 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0c3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0c6:	83 c4 10             	add    esp,0x10
c000e0c9:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c000e0cf:	77 23                	ja     c000e0f4 <timerHandler(unsigned int)+0xa0>
c000e0d1:	83 ec 0c             	sub    esp,0xc
c000e0d4:	53                   	push   ebx
c000e0d5:	e8 fa 7e 00 00       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c000e0da:	83 c4 10             	add    esp,0x10
c000e0dd:	39 de                	cmp    esi,ebx
c000e0df:	75 27                	jne    c000e108 <timerHandler(unsigned int)+0xb4>
c000e0e1:	83 ec 0c             	sub    esp,0xc
c000e0e4:	68 78 a4 02 c0       	push   0xc002a478
c000e0e9:	e8 2e 16 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0ee:	89 c6                	mov    esi,eax
c000e0f0:	eb 12                	jmp    c000e104 <timerHandler(unsigned int)+0xb0>
c000e0f2:	66 90                	xchg   ax,ax
c000e0f4:	52                   	push   edx
c000e0f5:	52                   	push   edx
c000e0f6:	53                   	push   ebx
c000e0f7:	68 78 a4 02 c0       	push   0xc002a478
c000e0fc:	e8 df 16 01 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e101:	8d 76 00             	lea    esi,[esi+0x0]
c000e104:	83 c4 10             	add    esp,0x10
c000e107:	90                   	nop
c000e108:	83 ec 0c             	sub    esp,0xc
c000e10b:	68 78 a4 02 c0       	push   0xc002a478
c000e110:	e8 eb 15 01 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e115:	83 c4 10             	add    esp,0x10
c000e118:	84 c0                	test   al,al
c000e11a:	75 18                	jne    c000e134 <timerHandler(unsigned int)+0xe0>
c000e11c:	83 ec 0c             	sub    esp,0xc
c000e11f:	68 78 a4 02 c0       	push   0xc002a478
c000e124:	e8 f3 15 01 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e129:	83 c4 10             	add    esp,0x10
c000e12c:	39 f0                	cmp    eax,esi
c000e12e:	0f 85 74 ff ff ff    	jne    c000e0a8 <timerHandler(unsigned int)+0x54>
c000e134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e139:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e13d:	74 41                	je     c000e180 <timerHandler(unsigned int)+0x12c>
c000e13f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e146:	74 38                	je     c000e180 <timerHandler(unsigned int)+0x12c>
c000e148:	fa                   	cli    
c000e149:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e14f:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c000e154:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e15a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e15d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e163:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e166:	72 08                	jb     c000e170 <timerHandler(unsigned int)+0x11c>
c000e168:	e8 4f 79 00 00       	call   c0015abc <schedule()>
c000e16d:	8d 76 00             	lea    esi,[esi+0x0]
c000e170:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e175:	48                   	dec    eax
c000e176:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e17b:	75 03                	jne    c000e180 <timerHandler(unsigned int)+0x12c>
c000e17d:	fb                   	sti    
c000e17e:	66 90                	xchg   ax,ax
c000e180:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000e185:	48                   	dec    eax
c000e186:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000e18b:	75 1b                	jne    c000e1a8 <timerHandler(unsigned int)+0x154>
c000e18d:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c000e194:	74 12                	je     c000e1a8 <timerHandler(unsigned int)+0x154>
c000e196:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000e1a0:	e8 17 79 00 00       	call   c0015abc <schedule()>
c000e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e1ad:	48                   	dec    eax
c000e1ae:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e1b3:	75 03                	jne    c000e1b8 <timerHandler(unsigned int)+0x164>
c000e1b5:	fb                   	sti    
c000e1b6:	66 90                	xchg   ax,ax
c000e1b8:	58                   	pop    eax
c000e1b9:	5b                   	pop    ebx
c000e1ba:	5e                   	pop    esi
c000e1bb:	c3                   	ret    

c000e1bc <VCache::VCache(PhysicalDisk*)>:
c000e1bc:	53                   	push   ebx
c000e1bd:	83 ec 18             	sub    esp,0x18
c000e1c0:	ba 00 17 02 c0       	mov    edx,0xc0021700
c000e1c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c9:	89 10                	mov    DWORD PTR [eax],edx
c000e1cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1cf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1da:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e1e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e1ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e1f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e1fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e209:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e214:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e223:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e236:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e23a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e246:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e24d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e255:	83 ec 0c             	sub    esp,0xc
c000e258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e25c:	e8 55 98 ff ff       	call   c0007ab6 <malloc>
c000e261:	83 c4 10             	add    esp,0x10
c000e264:	89 c3                	mov    ebx,eax
c000e266:	83 ec 0c             	sub    esp,0xc
c000e269:	53                   	push   ebx
c000e26a:	e8 e9 75 00 00       	call   c0015858 <Mutex::Mutex()>
c000e26f:	83 c4 10             	add    esp,0x10
c000e272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e276:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e27d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e281:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e288:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e28f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e293:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2a4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e2aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2b4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2b7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2cc:	05 00 02 00 00       	add    eax,0x200
c000e2d1:	c1 e0 03             	shl    eax,0x3
c000e2d4:	83 ec 0c             	sub    esp,0xc
c000e2d7:	50                   	push   eax
c000e2d8:	e8 d9 97 ff ff       	call   c0007ab6 <malloc>
c000e2dd:	83 c4 10             	add    esp,0x10
c000e2e0:	89 c2                	mov    edx,eax
c000e2e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e2e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ed:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e2fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e300:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e306:	89 d0                	mov    eax,edx
c000e308:	c1 e0 02             	shl    eax,0x2
c000e30b:	01 d0                	add    eax,edx
c000e30d:	c1 e0 04             	shl    eax,0x4
c000e310:	83 ec 0c             	sub    esp,0xc
c000e313:	50                   	push   eax
c000e314:	e8 9d 97 ff ff       	call   c0007ab6 <malloc>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	89 c2                	mov    edx,eax
c000e31e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e322:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e325:	90                   	nop
c000e326:	83 c4 18             	add    esp,0x18
c000e329:	5b                   	pop    ebx
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <VCache::invalidateReadBuffer()>:
c000e32c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e330:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e336:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e33a:	c3                   	ret    
c000e33b:	90                   	nop

c000e33c <VCache::writeWriteBuffer()>:
c000e33c:	53                   	push   ebx
c000e33d:	83 ec 08             	sub    esp,0x8
c000e340:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e344:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e348:	74 1e                	je     c000e368 <VCache::writeWriteBuffer()+0x2c>
c000e34a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e34d:	83 ec 0c             	sub    esp,0xc
c000e350:	8b 10                	mov    edx,DWORD PTR [eax]
c000e352:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e355:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e358:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e35b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e35e:	50                   	push   eax
c000e35f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e362:	83 c4 20             	add    esp,0x20
c000e365:	8d 76 00             	lea    esi,[esi+0x0]
c000e368:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e36f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e376:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e37a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e381:	83 c4 08             	add    esp,0x8
c000e384:	5b                   	pop    ebx
c000e385:	c3                   	ret    
c000e386:	66 90                	xchg   ax,ax

c000e388 <VCache::~VCache()>:
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	ba 00 17 02 c0       	mov    edx,0xc0021700
c000e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e394:	89 10                	mov    DWORD PTR [eax],edx
c000e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e39d:	0f b6 c0             	movzx  eax,al
c000e3a0:	85 c0                	test   eax,eax
c000e3a2:	74 10                	je     c000e3b4 <VCache::~VCache()+0x2c>
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ab:	e8 8c ff ff ff       	call   c000e33c <VCache::writeWriteBuffer()>
c000e3b0:	83 c4 10             	add    esp,0x10
c000e3b3:	90                   	nop
c000e3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3bb:	83 ec 0c             	sub    esp,0xc
c000e3be:	50                   	push   eax
c000e3bf:	e8 02 97 ff ff       	call   c0007ac6 <free>
c000e3c4:	83 c4 10             	add    esp,0x10
c000e3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3ce:	83 ec 0c             	sub    esp,0xc
c000e3d1:	50                   	push   eax
c000e3d2:	e8 ef 96 ff ff       	call   c0007ac6 <free>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	90                   	nop
c000e3db:	83 c4 0c             	add    esp,0xc
c000e3de:	c3                   	ret    
c000e3df:	90                   	nop

c000e3e0 <VCache::~VCache()>:
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	83 ec 0c             	sub    esp,0xc
c000e3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ea:	e8 99 ff ff ff       	call   c000e388 <VCache::~VCache()>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	83 ec 08             	sub    esp,0x8
c000e3f5:	6a 44                	push   0x44
c000e3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3fb:	e8 18 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e400:	83 c4 10             	add    esp,0x10
c000e403:	83 c4 0c             	add    esp,0xc
c000e406:	c3                   	ret    
c000e407:	90                   	nop

c000e408 <VCache::write(unsigned long long, int, void*)>:
c000e408:	55                   	push   ebp
c000e409:	57                   	push   edi
c000e40a:	56                   	push   esi
c000e40b:	53                   	push   ebx
c000e40c:	83 ec 1c             	sub    esp,0x1c
c000e40f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e413:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e417:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e41b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e41f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e423:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e427:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e42b:	74 07                	je     c000e434 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e42d:	53                   	push   ebx
c000e42e:	e8 f9 fe ff ff       	call   c000e32c <VCache::invalidateReadBuffer()>
c000e433:	58                   	pop    eax
c000e434:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e438:	74 62                	je     c000e49c <VCache::write(unsigned long long, int, void*)+0x94>
c000e43a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e43d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e441:	99                   	cdq    
c000e442:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e446:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e449:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e44c:	31 c1                	xor    ecx,eax
c000e44e:	89 d0                	mov    eax,edx
c000e450:	89 ca                	mov    edx,ecx
c000e452:	31 e8                	xor    eax,ebp
c000e454:	09 c2                	or     edx,eax
c000e456:	75 38                	jne    c000e490 <VCache::write(unsigned long long, int, void*)+0x88>
c000e458:	83 ff 01             	cmp    edi,0x1
c000e45b:	75 33                	jne    c000e490 <VCache::write(unsigned long long, int, void*)+0x88>
c000e45d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e464:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e46a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e46d:	0f af c8             	imul   ecx,eax
c000e470:	01 cf                	add    edi,ecx
c000e472:	89 c1                	mov    ecx,eax
c000e474:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e476:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e479:	40                   	inc    eax
c000e47a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e47d:	83 f8 50             	cmp    eax,0x50
c000e480:	75 6a                	jne    c000e4ec <VCache::write(unsigned long long, int, void*)+0xe4>
c000e482:	83 ec 0c             	sub    esp,0xc
c000e485:	53                   	push   ebx
c000e486:	e8 b1 fe ff ff       	call   c000e33c <VCache::writeWriteBuffer()>
c000e48b:	83 c4 10             	add    esp,0x10
c000e48e:	eb 5c                	jmp    c000e4ec <VCache::write(unsigned long long, int, void*)+0xe4>
c000e490:	83 ec 0c             	sub    esp,0xc
c000e493:	53                   	push   ebx
c000e494:	e8 a3 fe ff ff       	call   c000e33c <VCache::writeWriteBuffer()>
c000e499:	83 c4 10             	add    esp,0x10
c000e49c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e49f:	83 ff 4f             	cmp    edi,0x4f
c000e4a2:	7f 20                	jg     c000e4c4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e4a4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4ab:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e4ae:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e4b1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4b5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4b8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4c0:	eb 2a                	jmp    c000e4ec <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4c2:	66 90                	xchg   ax,ax
c000e4c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4ca:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4ce:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4d2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e4d6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e4da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4de:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e4e1:	83 c4 1c             	add    esp,0x1c
c000e4e4:	5b                   	pop    ebx
c000e4e5:	5e                   	pop    esi
c000e4e6:	5f                   	pop    edi
c000e4e7:	5d                   	pop    ebp
c000e4e8:	ff e0                	jmp    eax
c000e4ea:	66 90                	xchg   ax,ax
c000e4ec:	83 c4 1c             	add    esp,0x1c
c000e4ef:	31 c0                	xor    eax,eax
c000e4f1:	5b                   	pop    ebx
c000e4f2:	5e                   	pop    esi
c000e4f3:	5f                   	pop    edi
c000e4f4:	5d                   	pop    ebp
c000e4f5:	c3                   	ret    

c000e4f6 <VCache::read(unsigned long long, int, void*)>:
c000e4f6:	55                   	push   ebp
c000e4f7:	57                   	push   edi
c000e4f8:	56                   	push   esi
c000e4f9:	53                   	push   ebx
c000e4fa:	83 ec 1c             	sub    esp,0x1c
c000e4fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e501:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e505:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e509:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e50d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e515:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e519:	74 0d                	je     c000e528 <VCache::read(unsigned long long, int, void*)+0x32>
c000e51b:	83 ec 0c             	sub    esp,0xc
c000e51e:	57                   	push   edi
c000e51f:	e8 18 fe ff ff       	call   c000e33c <VCache::writeWriteBuffer()>
c000e524:	83 c4 10             	add    esp,0x10
c000e527:	90                   	nop
c000e528:	83 fd 01             	cmp    ebp,0x1
c000e52b:	0f 85 93 00 00 00    	jne    c000e5c4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e531:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e534:	89 04 24             	mov    DWORD PTR [esp],eax
c000e537:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e53e:	0f 85 80 00 00 00    	jne    c000e5c4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e544:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e547:	89 e9                	mov    ecx,ebp
c000e549:	f7 d9                	neg    ecx
c000e54b:	89 c8                	mov    eax,ecx
c000e54d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e551:	c1 f8 1f             	sar    eax,0x1f
c000e554:	21 d9                	and    ecx,ebx
c000e556:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e55a:	89 c8                	mov    eax,ecx
c000e55c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e560:	21 f1                	and    ecx,esi
c000e562:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e566:	89 ca                	mov    edx,ecx
c000e568:	74 2e                	je     c000e598 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e56a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e56d:	75 29                	jne    c000e598 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e56f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e572:	75 24                	jne    c000e598 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e574:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e577:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e57d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e580:	8d 70 ff             	lea    esi,[eax-0x1]
c000e583:	21 f3                	and    ebx,esi
c000e585:	0f af d9             	imul   ebx,ecx
c000e588:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e58b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e58f:	89 de                	mov    esi,ebx
c000e591:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e593:	31 c0                	xor    eax,eax
c000e595:	eb 61                	jmp    c000e5f8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e597:	90                   	nop
c000e598:	83 ec 0c             	sub    esp,0xc
c000e59b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e59f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5a3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5a6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e5a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e5ab:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e5ae:	55                   	push   ebp
c000e5af:	52                   	push   edx
c000e5b0:	50                   	push   eax
c000e5b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e5b8:	83 c4 20             	add    esp,0x20
c000e5bb:	85 c0                	test   eax,eax
c000e5bd:	75 39                	jne    c000e5f8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5bf:	eb b3                	jmp    c000e574 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c4:	83 ec 0c             	sub    esp,0xc
c000e5c7:	57                   	push   edi
c000e5c8:	e8 5f fd ff ff       	call   c000e32c <VCache::invalidateReadBuffer()>
c000e5cd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5d4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5d6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e5da:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e5de:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e5e2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e5e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e5ea:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e5ed:	83 c4 2c             	add    esp,0x2c
c000e5f0:	5b                   	pop    ebx
c000e5f1:	5e                   	pop    esi
c000e5f2:	5f                   	pop    edi
c000e5f3:	5d                   	pop    ebp
c000e5f4:	ff e0                	jmp    eax
c000e5f6:	66 90                	xchg   ax,ax
c000e5f8:	83 c4 1c             	add    esp,0x1c
c000e5fb:	5b                   	pop    ebx
c000e5fc:	5e                   	pop    esi
c000e5fd:	5f                   	pop    edi
c000e5fe:	5d                   	pop    ebp
c000e5ff:	c3                   	ret    

c000e600 <Video::putrect(int, int, int, int, unsigned int)>:
c000e600:	55                   	push   ebp
c000e601:	57                   	push   edi
c000e602:	56                   	push   esi
c000e603:	53                   	push   ebx
c000e604:	83 ec 1c             	sub    esp,0x1c
c000e607:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e60b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e60f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e613:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e617:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e61b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e61f:	01 df                	add    edi,ebx
c000e621:	39 fb                	cmp    ebx,edi
c000e623:	7d 1f                	jge    c000e644 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e625:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e629:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e62d:	7d 12                	jge    c000e641 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e62f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e631:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e635:	53                   	push   ebx
c000e636:	55                   	push   ebp
c000e637:	45                   	inc    ebp
c000e638:	56                   	push   esi
c000e639:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e63c:	83 c4 10             	add    esp,0x10
c000e63f:	eb e8                	jmp    c000e629 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e641:	43                   	inc    ebx
c000e642:	eb dd                	jmp    c000e621 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e644:	83 c4 1c             	add    esp,0x1c
c000e647:	5b                   	pop    ebx
c000e648:	5e                   	pop    esi
c000e649:	5f                   	pop    edi
c000e64a:	5d                   	pop    ebp
c000e64b:	c3                   	ret    

c000e64c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e64c:	55                   	push   ebp
c000e64d:	57                   	push   edi
c000e64e:	31 ff                	xor    edi,edi
c000e650:	56                   	push   esi
c000e651:	53                   	push   ebx
c000e652:	83 ec 1c             	sub    esp,0x1c
c000e655:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e659:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e65d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e664:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e66d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e671:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e675:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e678:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e67c:	01 f9                	add    ecx,edi
c000e67e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e682:	7d 2f                	jge    c000e6b3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e684:	31 f6                	xor    esi,esi
c000e686:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e68a:	01 f2                	add    edx,esi
c000e68c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e690:	7d 1a                	jge    c000e6ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e692:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e695:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e698:	46                   	inc    esi
c000e699:	51                   	push   ecx
c000e69a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e69e:	52                   	push   edx
c000e69f:	55                   	push   ebp
c000e6a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6a3:	83 c4 10             	add    esp,0x10
c000e6a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6aa:	eb da                	jmp    c000e686 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e6ac:	47                   	inc    edi
c000e6ad:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6b1:	eb c5                	jmp    c000e678 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6b3:	83 c4 1c             	add    esp,0x1c
c000e6b6:	5b                   	pop    ebx
c000e6b7:	5e                   	pop    esi
c000e6b8:	5f                   	pop    edi
c000e6b9:	5d                   	pop    ebp
c000e6ba:	c3                   	ret    
c000e6bb:	90                   	nop

c000e6bc <Video::blit(unsigned int*, int, int, int, int)>:
c000e6bc:	55                   	push   ebp
c000e6bd:	57                   	push   edi
c000e6be:	56                   	push   esi
c000e6bf:	53                   	push   ebx
c000e6c0:	83 ec 1c             	sub    esp,0x1c
c000e6c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6cb:	85 c0                	test   eax,eax
c000e6cd:	79 02                	jns    c000e6d1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e6cf:	31 c0                	xor    eax,eax
c000e6d1:	c1 e0 02             	shl    eax,0x2
c000e6d4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e6d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6e0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e6e4:	39 d8                	cmp    eax,ebx
c000e6e6:	7e 49                	jle    c000e731 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e6e8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e6ee:	7c 41                	jl     c000e731 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e6f0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e6f4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e6f8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6fc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e700:	39 f9                	cmp    ecx,edi
c000e702:	7e 22                	jle    c000e726 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e704:	83 c5 04             	add    ebp,0x4
c000e707:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e70d:	7c 14                	jl     c000e723 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e70f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e711:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e714:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e718:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e71c:	56                   	push   esi
c000e71d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e720:	83 c4 10             	add    esp,0x10
c000e723:	47                   	inc    edi
c000e724:	eb d2                	jmp    c000e6f8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72a:	43                   	inc    ebx
c000e72b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e72f:	eb ab                	jmp    c000e6dc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e731:	83 c4 1c             	add    esp,0x1c
c000e734:	5b                   	pop    ebx
c000e735:	5e                   	pop    esi
c000e736:	5f                   	pop    edi
c000e737:	5d                   	pop    ebp
c000e738:	c3                   	ret    
c000e739:	90                   	nop

c000e73a <Video::clearScreen(unsigned int)>:
c000e73a:	57                   	push   edi
c000e73b:	56                   	push   esi
c000e73c:	53                   	push   ebx
c000e73d:	31 db                	xor    ebx,ebx
c000e73f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e743:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e749:	7e 1f                	jle    c000e76a <Video::clearScreen(unsigned int)+0x30>
c000e74b:	31 ff                	xor    edi,edi
c000e74d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e753:	7e 12                	jle    c000e767 <Video::clearScreen(unsigned int)+0x2d>
c000e755:	8b 06                	mov    eax,DWORD PTR [esi]
c000e757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e75b:	53                   	push   ebx
c000e75c:	57                   	push   edi
c000e75d:	47                   	inc    edi
c000e75e:	56                   	push   esi
c000e75f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e762:	83 c4 10             	add    esp,0x10
c000e765:	eb e6                	jmp    c000e74d <Video::clearScreen(unsigned int)+0x13>
c000e767:	43                   	inc    ebx
c000e768:	eb d9                	jmp    c000e743 <Video::clearScreen(unsigned int)+0x9>
c000e76a:	5b                   	pop    ebx
c000e76b:	5e                   	pop    esi
c000e76c:	5f                   	pop    edi
c000e76d:	c3                   	ret    

c000e76e <Video::putpixel(int, int, unsigned int)>:
c000e76e:	c7 44 24 04 08 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021708
c000e776:	e9 82 2a 00 00       	jmp    c00111fd <KePanic(char const*)>
c000e77b:	90                   	nop

c000e77c <Video::readPixelApprox(int, int)>:
c000e77c:	83 ec 18             	sub    esp,0x18
c000e77f:	68 29 17 02 c0       	push   0xc0021729
c000e784:	e8 74 2a 00 00       	call   c00111fd <KePanic(char const*)>
c000e789:	31 c0                	xor    eax,eax
c000e78b:	83 c4 1c             	add    esp,0x1c
c000e78e:	c3                   	ret    
c000e78f:	90                   	nop

c000e790 <Video::Video(char const*)>:
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e797:	83 ec 08             	sub    esp,0x8
c000e79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e79e:	50                   	push   eax
c000e79f:	e8 e6 df ff ff       	call   c000c78a <Device::Device(char const*)>
c000e7a4:	83 c4 10             	add    esp,0x10
c000e7a7:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c000e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b0:	89 10                	mov    DWORD PTR [eax],edx
c000e7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7c0:	90                   	nop
c000e7c1:	83 c4 0c             	add    esp,0xc
c000e7c4:	c3                   	ret    
c000e7c5:	90                   	nop

c000e7c6 <Video::~Video()>:
c000e7c6:	83 ec 0c             	sub    esp,0xc
c000e7c9:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c000e7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d2:	89 10                	mov    DWORD PTR [eax],edx
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	83 ec 0c             	sub    esp,0xc
c000e7db:	50                   	push   eax
c000e7dc:	e8 13 dd ff ff       	call   c000c4f4 <Device::~Device()>
c000e7e1:	83 c4 10             	add    esp,0x10
c000e7e4:	90                   	nop
c000e7e5:	83 c4 0c             	add    esp,0xc
c000e7e8:	c3                   	ret    
c000e7e9:	90                   	nop

c000e7ea <Video::~Video()>:
c000e7ea:	83 ec 0c             	sub    esp,0xc
c000e7ed:	83 ec 0c             	sub    esp,0xc
c000e7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f4:	e8 cd ff ff ff       	call   c000e7c6 <Video::~Video()>
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	83 ec 08             	sub    esp,0x8
c000e7ff:	68 64 01 00 00       	push   0x164
c000e804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e808:	e8 0b c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e80d:	83 c4 10             	add    esp,0x10
c000e810:	83 c4 0c             	add    esp,0xc
c000e813:	c3                   	ret    

c000e814 <Video::isMonochrome()>:
c000e814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e818:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e81e:	c3                   	ret    
c000e81f:	90                   	nop

c000e820 <Video::getWidth()>:
c000e820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e82a:	c3                   	ret    
c000e82b:	90                   	nop

c000e82c <Video::getHeight()>:
c000e82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e830:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e836:	c3                   	ret    
c000e837:	90                   	nop

c000e838 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e838:	55                   	push   ebp
c000e839:	57                   	push   edi
c000e83a:	56                   	push   esi
c000e83b:	53                   	push   ebx
c000e83c:	83 ec 2c             	sub    esp,0x2c
c000e83f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e843:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e847:	83 f8 01             	cmp    eax,0x1
c000e84a:	19 c9                	sbb    ecx,ecx
c000e84c:	31 db                	xor    ebx,ebx
c000e84e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e852:	89 cd                	mov    ebp,ecx
c000e854:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e85c:	f7 d5                	not    ebp
c000e85e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e864:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e868:	01 d8                	add    eax,ebx
c000e86a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e86e:	56                   	push   esi
c000e86f:	e8 b8 ff ff ff       	call   c000e82c <Video::getHeight()>
c000e874:	59                   	pop    ecx
c000e875:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e879:	7e 70                	jle    c000e8eb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e87b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e87f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e883:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e886:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e88a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e88e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e895:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e899:	89 f8                	mov    eax,edi
c000e89b:	83 c0 20             	add    eax,0x20
c000e89e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8a2:	56                   	push   esi
c000e8a3:	e8 78 ff ff ff       	call   c000e820 <Video::getWidth()>
c000e8a8:	5a                   	pop    edx
c000e8a9:	39 c7                	cmp    edi,eax
c000e8ab:	7d 34                	jge    c000e8e1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e8ad:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8b2:	74 05                	je     c000e8b9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8b4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8b6:	55                   	push   ebp
c000e8b7:	eb 0d                	jmp    c000e8c6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8b9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8be:	74 12                	je     c000e8d2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8c0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8ca:	57                   	push   edi
c000e8cb:	56                   	push   esi
c000e8cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8cf:	83 c4 10             	add    esp,0x10
c000e8d2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e8d6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e8da:	47                   	inc    edi
c000e8db:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e8df:	75 c1                	jne    c000e8a2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e8e1:	43                   	inc    ebx
c000e8e2:	83 fb 20             	cmp    ebx,0x20
c000e8e5:	0f 85 79 ff ff ff    	jne    c000e864 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e8eb:	83 c4 2c             	add    esp,0x2c
c000e8ee:	5b                   	pop    ebx
c000e8ef:	5e                   	pop    esi
c000e8f0:	5f                   	pop    edi
c000e8f1:	5d                   	pop    ebp
c000e8f2:	c3                   	ret    
c000e8f3:	90                   	nop

c000e8f4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e8f4:	55                   	push   ebp
c000e8f5:	57                   	push   edi
c000e8f6:	56                   	push   esi
c000e8f7:	53                   	push   ebx
c000e8f8:	83 ec 28             	sub    esp,0x28
c000e8fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e8ff:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e903:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e907:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e90b:	c1 e6 08             	shl    esi,0x8
c000e90e:	01 c6                	add    esi,eax
c000e910:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e914:	c1 e0 08             	shl    eax,0x8
c000e917:	01 d0                	add    eax,edx
c000e919:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e91d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e921:	0f af c6             	imul   eax,esi
c000e924:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e92b:	50                   	push   eax
c000e92c:	e8 85 91 ff ff       	call   c0007ab6 <malloc>
c000e931:	83 c4 10             	add    esp,0x10
c000e934:	89 c7                	mov    edi,eax
c000e936:	85 c0                	test   eax,eax
c000e938:	75 10                	jne    c000e94a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e93a:	83 ec 0c             	sub    esp,0xc
c000e93d:	68 54 17 02 c0       	push   0xc0021754
c000e942:	e8 b6 28 00 00       	call   c00111fd <KePanic(char const*)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e94e:	ba 12 00 00 00       	mov    edx,0x12
c000e953:	85 c0                	test   eax,eax
c000e955:	74 11                	je     c000e968 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e957:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e95b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e95f:	c1 fa 03             	sar    edx,0x3
c000e962:	0f af d1             	imul   edx,ecx
c000e965:	83 c2 12             	add    edx,0x12
c000e968:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e96c:	74 04                	je     c000e972 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e96e:	85 f6                	test   esi,esi
c000e970:	75 12                	jne    c000e984 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e972:	83 ec 0c             	sub    esp,0xc
c000e975:	68 64 17 02 c0       	push   0xc0021764
c000e97a:	e8 c6 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000e97f:	e9 b8 00 00 00       	jmp    c000ea3c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e984:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e988:	83 f9 02             	cmp    ecx,0x2
c000e98b:	0f 85 96 00 00 00    	jne    c000ea27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e991:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e996:	75 0e                	jne    c000e9a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e998:	85 c0                	test   eax,eax
c000e99a:	75 0a                	jne    c000e9a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e99c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e99f:	83 e8 18             	sub    eax,0x18
c000e9a2:	a8 f7                	test   al,0xf7
c000e9a4:	74 0a                	je     c000e9b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9a6:	83 ec 0c             	sub    esp,0xc
c000e9a9:	68 79 17 02 c0       	push   0xc0021779
c000e9ae:	eb 7f                	jmp    c000ea2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9c0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e9c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9cc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e9d0:	75 0c                	jne    c000e9de <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e9d2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e9d7:	c1 e0 18             	shl    eax,0x18
c000e9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9de:	45                   	inc    ebp
c000e9df:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e9e4:	c1 e1 10             	shl    ecx,0x10
c000e9e7:	89 c8                	mov    eax,ecx
c000e9e9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e9ee:	c1 e1 08             	shl    ecx,0x8
c000e9f1:	09 c1                	or     ecx,eax
c000e9f3:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e9f7:	09 c1                	or     ecx,eax
c000e9f9:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e9fd:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ea01:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea05:	c1 f8 03             	sar    eax,0x3
c000ea08:	01 c2                	add    edx,eax
c000ea0a:	89 e8                	mov    eax,ebp
c000ea0c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea10:	39 c6                	cmp    esi,eax
c000ea12:	7f b0                	jg     c000e9c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea14:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea1c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea1f:	7e 22                	jle    c000ea43 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea21:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ea25:	eb 99                	jmp    c000e9c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea27:	50                   	push   eax
c000ea28:	50                   	push   eax
c000ea29:	51                   	push   ecx
c000ea2a:	68 87 17 02 c0       	push   0xc0021787
c000ea2f:	e8 11 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea34:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ea37:	e8 8a 90 ff ff       	call   c0007ac6 <free>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	31 ff                	xor    edi,edi
c000ea41:	eb 0f                	jmp    c000ea52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea47:	89 30                	mov    DWORD PTR [eax],esi
c000ea49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea4d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ea50:	89 30                	mov    DWORD PTR [eax],esi
c000ea52:	83 c4 1c             	add    esp,0x1c
c000ea55:	89 f8                	mov    eax,edi
c000ea57:	5b                   	pop    ebx
c000ea58:	5e                   	pop    esi
c000ea59:	5f                   	pop    edi
c000ea5a:	5d                   	pop    ebp
c000ea5b:	c3                   	ret    

c000ea5c <Video::putTGA(int, int, unsigned char*, int)>:
c000ea5c:	55                   	push   ebp
c000ea5d:	57                   	push   edi
c000ea5e:	56                   	push   esi
c000ea5f:	53                   	push   ebx
c000ea60:	83 ec 28             	sub    esp,0x28
c000ea63:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ea67:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea6b:	50                   	push   eax
c000ea6c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea70:	50                   	push   eax
c000ea71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea79:	56                   	push   esi
c000ea7a:	e8 75 fe ff ff       	call   c000e8f4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ea7f:	83 c4 20             	add    esp,0x20
c000ea82:	85 c0                	test   eax,eax
c000ea84:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea88:	74 35                	je     c000eabf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ea8a:	89 c7                	mov    edi,eax
c000ea8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea90:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ea94:	39 d8                	cmp    eax,ebx
c000ea96:	7e 27                	jle    c000eabf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ea98:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eaa0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eaa4:	39 e8                	cmp    eax,ebp
c000eaa6:	7e 14                	jle    c000eabc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eaa8:	8b 06                	mov    eax,DWORD PTR [esi]
c000eaaa:	83 c7 04             	add    edi,0x4
c000eaad:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eab0:	53                   	push   ebx
c000eab1:	55                   	push   ebp
c000eab2:	45                   	inc    ebp
c000eab3:	56                   	push   esi
c000eab4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eab7:	83 c4 10             	add    esp,0x10
c000eaba:	eb e0                	jmp    c000ea9c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eabc:	43                   	inc    ebx
c000eabd:	eb cd                	jmp    c000ea8c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eabf:	83 c4 1c             	add    esp,0x1c
c000eac2:	5b                   	pop    ebx
c000eac3:	5e                   	pop    esi
c000eac4:	5f                   	pop    edi
c000eac5:	5d                   	pop    ebp
c000eac6:	c3                   	ret    
c000eac7:	90                   	nop

c000eac8 <ACPI::close(int, int, void*)>:
c000eac8:	83 ec 1c             	sub    esp,0x1c
c000eacb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ead3:	74 0b                	je     c000eae0 <ACPI::close(int, int, void*)+0x18>
c000ead5:	b8 00 00 00 00       	mov    eax,0x0
c000eada:	e9 99 00 00 00       	jmp    c000eb78 <ACPI::close(int, int, void*)+0xb0>
c000eadf:	90                   	nop
c000eae0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eae5:	75 29                	jne    c000eb10 <ACPI::close(int, int, void*)+0x48>
c000eae7:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eaec:	85 c0                	test   eax,eax
c000eaee:	74 08                	je     c000eaf8 <ACPI::close(int, int, void*)+0x30>
c000eaf0:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eaf5:	ff d0                	call   eax
c000eaf7:	90                   	nop
c000eaf8:	83 ec 0c             	sub    esp,0xc
c000eafb:	68 e8 17 02 c0       	push   0xc00217e8
c000eb00:	e8 f8 26 00 00       	call   c00111fd <KePanic(char const*)>
c000eb05:	83 c4 10             	add    esp,0x10
c000eb08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb0d:	eb 69                	jmp    c000eb78 <ACPI::close(int, int, void*)+0xb0>
c000eb0f:	90                   	nop
c000eb10:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb15:	75 59                	jne    c000eb70 <ACPI::close(int, int, void*)+0xa8>
c000eb17:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb1c:	85 c0                	test   eax,eax
c000eb1e:	74 08                	je     c000eb28 <ACPI::close(int, int, void*)+0x60>
c000eb20:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb25:	ff d0                	call   eax
c000eb27:	90                   	nop
c000eb28:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb30:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb35:	83 e0 02             	and    eax,0x2
c000eb38:	74 1e                	je     c000eb58 <ACPI::close(int, int, void*)+0x90>
c000eb3a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb45:	89 c2                	mov    edx,eax
c000eb47:	ec                   	in     al,dx
c000eb48:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb4c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb50:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb54:	eb da                	jmp    c000eb30 <ACPI::close(int, int, void*)+0x68>
c000eb56:	66 90                	xchg   ax,ax
c000eb58:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb5f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb64:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb6c:	ee                   	out    dx,al
c000eb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb75:	8d 76 00             	lea    esi,[esi+0x0]
c000eb78:	83 c4 1c             	add    esp,0x1c
c000eb7b:	c3                   	ret    

c000eb7c <findRSDP()>:
c000eb7c:	83 ec 1c             	sub    esp,0x1c
c000eb7f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb84:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb8a:	83 e0 04             	and    eax,0x4
c000eb8d:	0f b6 c0             	movzx  eax,al
c000eb90:	85 c0                	test   eax,eax
c000eb92:	75 08                	jne    c000eb9c <findRSDP()+0x20>
c000eb94:	b8 00 00 00 00       	mov    eax,0x0
c000eb99:	eb 75                	jmp    c000ec10 <findRSDP()+0x94>
c000eb9b:	90                   	nop
c000eb9c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000eba1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000eba6:	7f 1c                	jg     c000ebc4 <findRSDP()+0x48>
c000eba8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebb3:	83 e2 fb             	and    edx,0xfffffffb
c000ebb6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebbc:	b8 00 00 00 00       	mov    eax,0x0
c000ebc1:	eb 4d                	jmp    c000ec10 <findRSDP()+0x94>
c000ebc3:	90                   	nop
c000ebc4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebcc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ebd4:	77 32                	ja     c000ec08 <findRSDP()+0x8c>
c000ebd6:	83 ec 04             	sub    esp,0x4
c000ebd9:	6a 08                	push   0x8
c000ebdb:	68 83 18 02 c0       	push   0xc0021883
c000ebe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebe4:	e8 97 17 ff ff       	call   c0000380 <memcmp>
c000ebe9:	83 c4 10             	add    esp,0x10
c000ebec:	85 c0                	test   eax,eax
c000ebee:	0f 94 c0             	sete   al
c000ebf1:	0f b6 c0             	movzx  eax,al
c000ebf4:	85 c0                	test   eax,eax
c000ebf6:	74 08                	je     c000ec00 <findRSDP()+0x84>
c000ebf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebfc:	eb 12                	jmp    c000ec10 <findRSDP()+0x94>
c000ebfe:	66 90                	xchg   ax,ax
c000ec00:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec05:	eb c5                	jmp    c000ebcc <findRSDP()+0x50>
c000ec07:	90                   	nop
c000ec08:	b8 00 00 00 00       	mov    eax,0x0
c000ec0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec10:	83 c4 1c             	add    esp,0x1c
c000ec13:	c3                   	ret    

c000ec14 <loadACPITables(unsigned char*)>:
c000ec14:	57                   	push   edi
c000ec15:	56                   	push   esi
c000ec16:	53                   	push   ebx
c000ec17:	83 ec 60             	sub    esp,0x60
c000ec1a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec1f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec25:	83 e0 04             	and    eax,0x4
c000ec28:	0f b6 c0             	movzx  eax,al
c000ec2b:	85 c0                	test   eax,eax
c000ec2d:	0f 84 41 02 00 00    	je     c000ee74 <loadACPITables(unsigned char*)+0x260>
c000ec33:	a0 80 97 02 c0       	mov    al,ds:0xc0029780
c000ec38:	0f b6 c0             	movzx  eax,al
c000ec3b:	85 c0                	test   eax,eax
c000ec3d:	74 79                	je     c000ecb8 <loadACPITables(unsigned char*)+0xa4>
c000ec3f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec43:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec4e:	83 e8 24             	sub    eax,0x24
c000ec51:	c1 e8 03             	shr    eax,0x3
c000ec54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec58:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec64:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec68:	0f 8d ba 00 00 00    	jge    c000ed28 <loadACPITables(unsigned char*)+0x114>
c000ec6e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec72:	83 c0 24             	add    eax,0x24
c000ec75:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ec79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec7d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ec81:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec85:	c1 e0 03             	shl    eax,0x3
c000ec88:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ec8c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ec90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec93:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec95:	89 c1                	mov    ecx,eax
c000ec97:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ec9c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec9f:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000eca5:	89 ca                	mov    edx,ecx
c000eca7:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ecae:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ecb3:	eb ab                	jmp    c000ec60 <loadACPITables(unsigned char*)+0x4c>
c000ecb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecbc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ecc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecc7:	83 e8 24             	sub    eax,0x24
c000ecca:	c1 e8 02             	shr    eax,0x2
c000eccd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecd1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ecd9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecdc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ece0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ece4:	7d 42                	jge    c000ed28 <loadACPITables(unsigned char*)+0x114>
c000ece6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecea:	83 c0 24             	add    eax,0x24
c000eced:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ecf1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecf5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ecf9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ecfd:	c1 e0 02             	shl    eax,0x2
c000ed00:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed08:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed0a:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed0f:	8d 50 01             	lea    edx,[eax+0x1]
c000ed12:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ed18:	89 ca                	mov    edx,ecx
c000ed1a:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ed21:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed26:	eb b4                	jmp    c000ecdc <loadACPITables(unsigned char*)+0xc8>
c000ed28:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed30:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed35:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed39:	0f 8d 39 01 00 00    	jge    c000ee78 <loadACPITables(unsigned char*)+0x264>
c000ed3f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed43:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000ed4a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed5a:	25 ff 0f 00 00       	and    eax,0xfff
c000ed5f:	89 c6                	mov    esi,eax
c000ed61:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed67:	83 ec 0c             	sub    esp,0xc
c000ed6a:	6a 01                	push   0x1
c000ed6c:	e8 9c a8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ed71:	83 c4 10             	add    esp,0x10
c000ed74:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ed78:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ed7e:	83 ec 0c             	sub    esp,0xc
c000ed81:	6a 01                	push   0x1
c000ed83:	6a 01                	push   0x1
c000ed85:	50                   	push   eax
c000ed86:	52                   	push   edx
c000ed87:	53                   	push   ebx
c000ed88:	e8 8d b1 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed8d:	83 c4 20             	add    esp,0x20
c000ed90:	09 f0                	or     eax,esi
c000ed92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed96:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed9a:	c1 e0 03             	shl    eax,0x3
c000ed9d:	05 80 95 02 c0       	add    eax,0xc0029580
c000eda2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eda6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000edae:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000edb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edca:	89 c6                	mov    esi,eax
c000edcc:	89 d7                	mov    edi,edx
c000edce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000edd0:	89 c8                	mov    eax,ecx
c000edd2:	89 fa                	mov    edx,edi
c000edd4:	89 f3                	mov    ebx,esi
c000edd6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000edda:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000edde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ede2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ede9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000edf1:	05 00 10 00 00       	add    eax,0x1000
c000edf6:	c1 e8 0c             	shr    eax,0xc
c000edf9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000edfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee09:	25 ff 0f 00 00       	and    eax,0xfff
c000ee0e:	89 c6                	mov    esi,eax
c000ee10:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee16:	83 ec 0c             	sub    esp,0xc
c000ee19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee1d:	e8 eb a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee29:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee2f:	83 ec 0c             	sub    esp,0xc
c000ee32:	6a 01                	push   0x1
c000ee34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee38:	50                   	push   eax
c000ee39:	52                   	push   edx
c000ee3a:	53                   	push   ebx
c000ee3b:	e8 da b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee40:	83 c4 20             	add    esp,0x20
c000ee43:	09 f0                	or     eax,esi
c000ee45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee4d:	83 ec 0c             	sub    esp,0xc
c000ee50:	50                   	push   eax
c000ee51:	e8 d5 aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee61:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ee68:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee6d:	e9 be fe ff ff       	jmp    c000ed30 <loadACPITables(unsigned char*)+0x11c>
c000ee72:	66 90                	xchg   ax,ax
c000ee74:	90                   	nop
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]
c000ee78:	83 c4 60             	add    esp,0x60
c000ee7b:	5b                   	pop    ebx
c000ee7c:	5e                   	pop    esi
c000ee7d:	5f                   	pop    edi
c000ee7e:	c3                   	ret    
c000ee7f:	90                   	nop

c000ee80 <findRSDT(unsigned char*)>:
c000ee80:	57                   	push   edi
c000ee81:	56                   	push   esi
c000ee82:	53                   	push   ebx
c000ee83:	83 ec 50             	sub    esp,0x50
c000ee86:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ee8b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee91:	83 e0 04             	and    eax,0x4
c000ee94:	0f b6 c0             	movzx  eax,al
c000ee97:	85 c0                	test   eax,eax
c000ee99:	75 0d                	jne    c000eea8 <findRSDT(unsigned char*)+0x28>
c000ee9b:	b8 00 00 00 00       	mov    eax,0x0
c000eea0:	e9 2b 01 00 00       	jmp    c000efd0 <findRSDT(unsigned char*)+0x150>
c000eea5:	8d 76 00             	lea    esi,[esi+0x0]
c000eea8:	89 e0                	mov    eax,esp
c000eeaa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eeb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eeb6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eebe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eec2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eec6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eeca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eece:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eed2:	89 c6                	mov    esi,eax
c000eed4:	89 d7                	mov    edi,edx
c000eed6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eed8:	89 c8                	mov    eax,ecx
c000eeda:	89 fa                	mov    edx,edi
c000eedc:	89 f3                	mov    ebx,esi
c000eede:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000eee2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000eee6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eeea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eeee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000eef2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000eefa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eefe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef0a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef12:	25 ff 0f 00 00       	and    eax,0xfff
c000ef17:	89 c6                	mov    esi,eax
c000ef19:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef1f:	83 ec 0c             	sub    esp,0xc
c000ef22:	6a 02                	push   0x2
c000ef24:	e8 e4 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef29:	83 c4 10             	add    esp,0x10
c000ef2c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef30:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef36:	83 ec 0c             	sub    esp,0xc
c000ef39:	6a 01                	push   0x1
c000ef3b:	6a 02                	push   0x2
c000ef3d:	50                   	push   eax
c000ef3e:	52                   	push   edx
c000ef3f:	53                   	push   ebx
c000ef40:	e8 d5 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	09 f0                	or     eax,esi
c000ef4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef52:	25 ff 0f 00 00       	and    eax,0xfff
c000ef57:	89 c6                	mov    esi,eax
c000ef59:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef5f:	83 ec 0c             	sub    esp,0xc
c000ef62:	6a 02                	push   0x2
c000ef64:	e8 a4 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ef70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef76:	83 ec 0c             	sub    esp,0xc
c000ef79:	6a 01                	push   0x1
c000ef7b:	6a 02                	push   0x2
c000ef7d:	50                   	push   eax
c000ef7e:	52                   	push   edx
c000ef7f:	53                   	push   ebx
c000ef80:	e8 95 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef85:	83 c4 20             	add    esp,0x20
c000ef88:	09 f0                	or     eax,esi
c000ef8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef8e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ef93:	85 c0                	test   eax,eax
c000ef95:	75 11                	jne    c000efa8 <findRSDT(unsigned char*)+0x128>
c000ef97:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c000ef9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efa2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efa6:	eb 24                	jmp    c000efcc <findRSDT(unsigned char*)+0x14c>
c000efa8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efad:	83 f8 02             	cmp    eax,0x2
c000efb0:	75 12                	jne    c000efc4 <findRSDT(unsigned char*)+0x144>
c000efb2:	c6 05 80 97 02 c0 01 	mov    BYTE PTR ds:0xc0029780,0x1
c000efb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efbd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efc1:	eb 09                	jmp    c000efcc <findRSDT(unsigned char*)+0x14c>
c000efc3:	90                   	nop
c000efc4:	b8 00 00 00 00       	mov    eax,0x0
c000efc9:	eb 05                	jmp    c000efd0 <findRSDT(unsigned char*)+0x150>
c000efcb:	90                   	nop
c000efcc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000efd0:	83 c4 50             	add    esp,0x50
c000efd3:	5b                   	pop    ebx
c000efd4:	5e                   	pop    esi
c000efd5:	5f                   	pop    edi
c000efd6:	c3                   	ret    
c000efd7:	90                   	nop

c000efd8 <findDataTable(unsigned char*, char*)>:
c000efd8:	83 ec 1c             	sub    esp,0x1c
c000efdb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efe0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efe6:	83 e0 04             	and    eax,0x4
c000efe9:	0f b6 c0             	movzx  eax,al
c000efec:	85 c0                	test   eax,eax
c000efee:	75 08                	jne    c000eff8 <findDataTable(unsigned char*, char*)+0x20>
c000eff0:	b8 00 00 00 00       	mov    eax,0x0
c000eff5:	eb 5d                	jmp    c000f054 <findDataTable(unsigned char*, char*)+0x7c>
c000eff7:	90                   	nop
c000eff8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f000:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000f005:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f009:	7d 41                	jge    c000f04c <findDataTable(unsigned char*, char*)+0x74>
c000f00b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f00f:	c1 e0 03             	shl    eax,0x3
c000f012:	05 80 95 02 c0       	add    eax,0xc0029580
c000f017:	83 ec 04             	sub    esp,0x4
c000f01a:	6a 04                	push   0x4
c000f01c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f020:	50                   	push   eax
c000f021:	e8 5a 13 ff ff       	call   c0000380 <memcmp>
c000f026:	83 c4 10             	add    esp,0x10
c000f029:	85 c0                	test   eax,eax
c000f02b:	0f 94 c0             	sete   al
c000f02e:	0f b6 c0             	movzx  eax,al
c000f031:	85 c0                	test   eax,eax
c000f033:	74 0f                	je     c000f044 <findDataTable(unsigned char*, char*)+0x6c>
c000f035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f039:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000f040:	eb 12                	jmp    c000f054 <findDataTable(unsigned char*, char*)+0x7c>
c000f042:	66 90                	xchg   ax,ax
c000f044:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f049:	eb b5                	jmp    c000f000 <findDataTable(unsigned char*, char*)+0x28>
c000f04b:	90                   	nop
c000f04c:	b8 00 00 00 00       	mov    eax,0x0
c000f051:	8d 76 00             	lea    esi,[esi+0x0]
c000f054:	83 c4 1c             	add    esp,0x1c
c000f057:	c3                   	ret    

c000f058 <scanMADT()>:
c000f058:	53                   	push   ebx
c000f059:	83 ec 38             	sub    esp,0x38
c000f05c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f061:	25 00 04 00 00       	and    eax,0x400
c000f066:	74 14                	je     c000f07c <scanMADT()+0x24>
c000f068:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f06d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f073:	83 e2 fb             	and    edx,0xfffffffb
c000f076:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f07c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f081:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f087:	83 e0 04             	and    eax,0x4
c000f08a:	0f b6 c0             	movzx  eax,al
c000f08d:	85 c0                	test   eax,eax
c000f08f:	0f 84 6b 04 00 00    	je     c000f500 <scanMADT()+0x4a8>
c000f095:	e8 e2 fa ff ff       	call   c000eb7c <findRSDP()>
c000f09a:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c000f09f:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0a4:	85 c0                	test   eax,eax
c000f0a6:	75 1c                	jne    c000f0c4 <scanMADT()+0x6c>
c000f0a8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0ad:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0b3:	83 e2 fb             	and    edx,0xfffffffb
c000f0b6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0bc:	e9 47 04 00 00       	jmp    c000f508 <scanMADT()+0x4b0>
c000f0c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0c4:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0c9:	83 ec 0c             	sub    esp,0xc
c000f0cc:	50                   	push   eax
c000f0cd:	e8 ae fd ff ff       	call   c000ee80 <findRSDT(unsigned char*)>
c000f0d2:	83 c4 10             	add    esp,0x10
c000f0d5:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f0da:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f0df:	85 c0                	test   eax,eax
c000f0e1:	75 19                	jne    c000f0fc <scanMADT()+0xa4>
c000f0e3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0e8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0ee:	83 e2 fb             	and    edx,0xfffffffb
c000f0f1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0f7:	e9 0c 04 00 00       	jmp    c000f508 <scanMADT()+0x4b0>
c000f0fc:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f101:	83 ec 0c             	sub    esp,0xc
c000f104:	50                   	push   eax
c000f105:	e8 0a fb ff ff       	call   c000ec14 <loadACPITables(unsigned char*)>
c000f10a:	83 c4 10             	add    esp,0x10
c000f10d:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f112:	83 ec 08             	sub    esp,0x8
c000f115:	68 8c 18 02 c0       	push   0xc002188c
c000f11a:	50                   	push   eax
c000f11b:	e8 b8 fe ff ff       	call   c000efd8 <findDataTable(unsigned char*, char*)>
c000f120:	83 c4 10             	add    esp,0x10
c000f123:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f127:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f12c:	75 1a                	jne    c000f148 <scanMADT()+0xf0>
c000f12e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f133:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f139:	83 e2 fe             	and    edx,0xfffffffe
c000f13c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f142:	e9 c1 03 00 00       	jmp    c000f508 <scanMADT()+0x4b0>
c000f147:	90                   	nop
c000f148:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f150:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f157:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f15b:	0f 87 a7 03 00 00    	ja     c000f508 <scanMADT()+0x4b0>
c000f161:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f169:	0f 87 99 03 00 00    	ja     c000f508 <scanMADT()+0x4b0>
c000f16f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f173:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f177:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f17b:	8d 50 01             	lea    edx,[eax+0x1]
c000f17e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f182:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f186:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f18a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f18e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f192:	8d 50 01             	lea    edx,[eax+0x1]
c000f195:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f199:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f19d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1a1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1a5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f1aa:	83 f8 02             	cmp    eax,0x2
c000f1ad:	0f 86 51 03 00 00    	jbe    c000f504 <scanMADT()+0x4ac>
c000f1b3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1b8:	85 c0                	test   eax,eax
c000f1ba:	75 58                	jne    c000f214 <scanMADT()+0x1bc>
c000f1bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1c0:	8d 50 01             	lea    edx,[eax+0x1]
c000f1c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1c7:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1cd:	0f b6 d2             	movzx  edx,dl
c000f1d0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1d4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f1d8:	88 82 c0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6640],al
c000f1de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1e2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1e9:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1ef:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f1f2:	88 0d 80 99 02 c0    	mov    BYTE PTR ds:0xc0029980,cl
c000f1f8:	0f b6 d2             	movzx  edx,dl
c000f1fb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1ff:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f203:	88 82 a0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6660],al
c000f209:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f20e:	e9 d9 02 00 00       	jmp    c000f4ec <scanMADT()+0x494>
c000f213:	90                   	nop
c000f214:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f219:	83 f8 01             	cmp    eax,0x1
c000f21c:	0f 85 1a 01 00 00    	jne    c000f33c <scanMADT()+0x2e4>
c000f222:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f226:	8d 50 01             	lea    edx,[eax+0x1]
c000f229:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f22d:	8a 15 40 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029840
c000f233:	0f b6 d2             	movzx  edx,dl
c000f236:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f23a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f23e:	88 82 60 98 02 c0    	mov    BYTE PTR [edx-0x3ffd67a0],al
c000f244:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f249:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f24d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f251:	01 d0                	add    eax,edx
c000f253:	83 c0 2c             	add    eax,0x2c
c000f256:	8a 00                	mov    al,BYTE PTR [eax]
c000f258:	0f b6 d0             	movzx  edx,al
c000f25b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f25f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f262:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f266:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f26a:	0f b6 c0             	movzx  eax,al
c000f26d:	c1 e0 08             	shl    eax,0x8
c000f270:	89 d1                	mov    ecx,edx
c000f272:	09 c1                	or     ecx,eax
c000f274:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f278:	8d 50 02             	lea    edx,[eax+0x2]
c000f27b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f27f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f283:	0f b6 c0             	movzx  eax,al
c000f286:	c1 e0 10             	shl    eax,0x10
c000f289:	09 c1                	or     ecx,eax
c000f28b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f28f:	8d 50 03             	lea    edx,[eax+0x3]
c000f292:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f296:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f29a:	0f b6 c0             	movzx  eax,al
c000f29d:	c1 e0 18             	shl    eax,0x18
c000f2a0:	09 c1                	or     ecx,eax
c000f2a2:	89 ca                	mov    edx,ecx
c000f2a4:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f2a9:	0f b6 c0             	movzx  eax,al
c000f2ac:	89 14 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],edx
c000f2b3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2c0:	01 d0                	add    eax,edx
c000f2c2:	83 c0 2c             	add    eax,0x2c
c000f2c5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2c7:	0f b6 d0             	movzx  edx,al
c000f2ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ce:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2d9:	0f b6 c0             	movzx  eax,al
c000f2dc:	c1 e0 08             	shl    eax,0x8
c000f2df:	89 d1                	mov    ecx,edx
c000f2e1:	09 c1                	or     ecx,eax
c000f2e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2e7:	8d 50 02             	lea    edx,[eax+0x2]
c000f2ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2f2:	0f b6 c0             	movzx  eax,al
c000f2f5:	c1 e0 10             	shl    eax,0x10
c000f2f8:	09 c1                	or     ecx,eax
c000f2fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2fe:	8d 50 03             	lea    edx,[eax+0x3]
c000f301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f305:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f309:	0f b6 c0             	movzx  eax,al
c000f30c:	c1 e0 18             	shl    eax,0x18
c000f30f:	09 c1                	or     ecx,eax
c000f311:	89 ca                	mov    edx,ecx
c000f313:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f318:	0f b6 c0             	movzx  eax,al
c000f31b:	89 14 85 00 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6700],edx
c000f322:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f327:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f32c:	83 c0 01             	add    eax,0x1
c000f32f:	a2 40 98 02 c0       	mov    ds:0xc0029840,al
c000f334:	e9 b3 01 00 00       	jmp    c000f4ec <scanMADT()+0x494>
c000f339:	8d 76 00             	lea    esi,[esi+0x0]
c000f33c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f341:	83 f8 02             	cmp    eax,0x2
c000f344:	0f 85 ea 00 00 00    	jne    c000f434 <scanMADT()+0x3dc>
c000f34a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f34e:	8d 50 01             	lea    edx,[eax+0x1]
c000f351:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f355:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f359:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f35d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f361:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f365:	8d 50 01             	lea    edx,[eax+0x1]
c000f368:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f36c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f370:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f374:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f378:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f37c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f380:	01 d0                	add    eax,edx
c000f382:	83 c0 2c             	add    eax,0x2c
c000f385:	8a 00                	mov    al,BYTE PTR [eax]
c000f387:	0f b6 d0             	movzx  edx,al
c000f38a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f38e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f391:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f395:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f399:	0f b6 c0             	movzx  eax,al
c000f39c:	c1 e0 08             	shl    eax,0x8
c000f39f:	89 d1                	mov    ecx,edx
c000f3a1:	09 c1                	or     ecx,eax
c000f3a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a7:	8d 50 02             	lea    edx,[eax+0x2]
c000f3aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3b2:	0f b6 c0             	movzx  eax,al
c000f3b5:	c1 e0 10             	shl    eax,0x10
c000f3b8:	09 c1                	or     ecx,eax
c000f3ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3be:	8d 50 03             	lea    edx,[eax+0x3]
c000f3c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3c9:	0f b6 c0             	movzx  eax,al
c000f3cc:	c1 e0 18             	shl    eax,0x18
c000f3cf:	09 c8                	or     eax,ecx
c000f3d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f3d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e2:	01 d0                	add    eax,edx
c000f3e4:	83 c0 2c             	add    eax,0x2c
c000f3e7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3e9:	0f b6 c0             	movzx  eax,al
c000f3ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f3f0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f3f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3f7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f3fb:	0f b6 d2             	movzx  edx,dl
c000f3fe:	c1 e2 08             	shl    edx,0x8
c000f401:	09 d0                	or     eax,edx
c000f403:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f408:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f40d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f412:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f416:	88 90 88 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd078],dl
c000f41c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f421:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f426:	66 89 84 12 20 98 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd67e0],ax
c000f42e:	e9 b9 00 00 00       	jmp    c000f4ec <scanMADT()+0x494>
c000f433:	90                   	nop
c000f434:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f439:	83 f8 04             	cmp    eax,0x4
c000f43c:	0f 85 9a 00 00 00    	jne    c000f4dc <scanMADT()+0x484>
c000f442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f446:	8d 50 01             	lea    edx,[eax+0x1]
c000f449:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f44d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f451:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f455:	0f b6 c0             	movzx  eax,al
c000f458:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f45c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f464:	01 d0                	add    eax,edx
c000f466:	83 c0 2c             	add    eax,0x2c
c000f469:	8a 00                	mov    al,BYTE PTR [eax]
c000f46b:	0f b6 d0             	movzx  edx,al
c000f46e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f472:	8d 48 01             	lea    ecx,[eax+0x1]
c000f475:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f479:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f47d:	0f b6 c0             	movzx  eax,al
c000f480:	c1 e0 08             	shl    eax,0x8
c000f483:	09 d0                	or     eax,edx
c000f485:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f489:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f48e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f492:	8d 50 01             	lea    edx,[eax+0x1]
c000f495:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f499:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f49d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4a1:	0f b6 c0             	movzx  eax,al
c000f4a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ac:	c1 e0 08             	shl    eax,0x8
c000f4af:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4b3:	89 c1                	mov    ecx,eax
c000f4b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4b9:	c1 e0 18             	shl    eax,0x18
c000f4bc:	89 c3                	mov    ebx,eax
c000f4be:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c000f4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c6:	89 15 90 97 02 c0    	mov    DWORD PTR ds:0xc0029790,edx
c000f4cc:	09 d9                	or     ecx,ebx
c000f4ce:	89 ca                	mov    edx,ecx
c000f4d0:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c000f4d7:	eb 13                	jmp    c000f4ec <scanMADT()+0x494>
c000f4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4e1:	83 f8 05             	cmp    eax,0x5
c000f4e4:	75 06                	jne    c000f4ec <scanMADT()+0x494>
c000f4e6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f4eb:	90                   	nop
c000f4ec:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f4f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f4f5:	01 d0                	add    eax,edx
c000f4f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f4fb:	e9 50 fc ff ff       	jmp    c000f150 <scanMADT()+0xf8>
c000f500:	90                   	nop
c000f501:	eb 05                	jmp    c000f508 <scanMADT()+0x4b0>
c000f503:	90                   	nop
c000f504:	90                   	nop
c000f505:	8d 76 00             	lea    esi,[esi+0x0]
c000f508:	83 c4 38             	add    esp,0x38
c000f50b:	5b                   	pop    ebx
c000f50c:	c3                   	ret    
c000f50d:	90                   	nop
c000f50e:	66 90                	xchg   ax,ax

c000f510 <ACPI::ACPI()>:
c000f510:	83 ec 0c             	sub    esp,0xc
c000f513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f517:	83 ec 08             	sub    esp,0x8
c000f51a:	68 91 18 02 c0       	push   0xc0021891
c000f51f:	50                   	push   eax
c000f520:	e8 65 d2 ff ff       	call   c000c78a <Device::Device(char const*)>
c000f525:	83 c4 10             	add    esp,0x10
c000f528:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c000f52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f531:	89 10                	mov    DWORD PTR [eax],edx
c000f533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f537:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f542:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f550:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f55a:	e8 f9 fa ff ff       	call   c000f058 <scanMADT()>
c000f55f:	90                   	nop
c000f560:	83 c4 0c             	add    esp,0xc
c000f563:	c3                   	ret    

c000f564 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f564:	83 ec 2c             	sub    esp,0x2c
c000f567:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f56b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f56f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f573:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f577:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f57c:	88 d0                	mov    al,dl
c000f57e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f582:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f587:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f58f:	90                   	nop
c000f590:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f594:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f59a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f59e:	0f 8d b0 00 00 00    	jge    c000f654 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5ac:	83 c2 2a             	add    edx,0x2a
c000f5af:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5b8:	0f b7 c0             	movzx  eax,ax
c000f5bb:	39 c2                	cmp    edx,eax
c000f5bd:	0f 85 85 00 00 00    	jne    c000f648 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5cb:	83 c2 2a             	add    edx,0x2a
c000f5ce:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f5d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f5d7:	0f b6 c0             	movzx  eax,al
c000f5da:	39 c2                	cmp    edx,eax
c000f5dc:	75 6a                	jne    c000f648 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5de:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f5e3:	85 c0                	test   eax,eax
c000f5e5:	74 3d                	je     c000f624 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f5e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5ef:	83 c2 2a             	add    edx,0x2a
c000f5f2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f5f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5fd:	39 c2                	cmp    edx,eax
c000f5ff:	74 13                	je     c000f614 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f601:	83 ec 0c             	sub    esp,0xc
c000f604:	68 0c 18 02 c0       	push   0xc002180c
c000f609:	e8 ef 1b 00 00       	call   c00111fd <KePanic(char const*)>
c000f60e:	83 c4 10             	add    esp,0x10
c000f611:	8d 76 00             	lea    esi,[esi+0x0]
c000f614:	83 ec 0c             	sub    esp,0xc
c000f617:	68 96 18 02 c0       	push   0xc0021896
c000f61c:	e8 dc 1b 00 00       	call   c00111fd <KePanic(char const*)>
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f62c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f630:	83 c2 2a             	add    edx,0x2a
c000f633:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f637:	8b 02                	mov    eax,DWORD PTR [edx]
c000f639:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f63c:	89 01                	mov    DWORD PTR [ecx],eax
c000f63e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f641:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f646:	66 90                	xchg   ax,ax
c000f648:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f64d:	e9 3e ff ff ff       	jmp    c000f590 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f652:	66 90                	xchg   ax,ax
c000f654:	90                   	nop
c000f655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f659:	83 c4 2c             	add    esp,0x2c
c000f65c:	c2 04 00             	ret    0x4
c000f65f:	90                   	nop

c000f660 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f660:	83 ec 1c             	sub    esp,0x1c
c000f663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f667:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f66b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f66f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f674:	88 c8                	mov    al,cl
c000f676:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f67a:	88 d0                	mov    al,dl
c000f67c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f684:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f68e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f691:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f695:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f69d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f6a7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f6ae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6b7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6bd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6c1:	83 c0 01             	add    eax,0x1
c000f6c4:	88 c1                	mov    cl,al
c000f6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ca:	83 c2 2a             	add    edx,0x2a
c000f6cd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f6d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6d5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6df:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6e6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f6ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ee:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6fb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f701:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f705:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f70b:	3d 00 02 00 00       	cmp    eax,0x200
c000f710:	75 12                	jne    c000f724 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f712:	83 ec 0c             	sub    esp,0xc
c000f715:	68 a5 18 02 c0       	push   0xc00218a5
c000f71a:	e8 de 1a 00 00       	call   c00111fd <KePanic(char const*)>
c000f71f:	83 c4 10             	add    esp,0x10
c000f722:	66 90                	xchg   ax,ax
c000f724:	90                   	nop
c000f725:	83 c4 1c             	add    esp,0x1c
c000f728:	c3                   	ret    
c000f729:	90                   	nop
c000f72a:	66 90                	xchg   ax,ax

c000f72c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f72c:	b8 00 00 00 00       	mov    eax,0x0
c000f731:	c3                   	ret    
c000f732:	66 90                	xchg   ax,ax

c000f734 <ACPI::detectPCI()>:
c000f734:	53                   	push   ebx
c000f735:	83 ec 28             	sub    esp,0x28
c000f738:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f73d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f742:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f747:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f74d:	83 e0 04             	and    eax,0x4
c000f750:	0f b6 c0             	movzx  eax,al
c000f753:	85 c0                	test   eax,eax
c000f755:	74 2d                	je     c000f784 <ACPI::detectPCI()+0x50>
c000f757:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f75c:	83 ec 08             	sub    esp,0x8
c000f75f:	68 c2 18 02 c0       	push   0xc00218c2
c000f764:	50                   	push   eax
c000f765:	e8 6e f8 ff ff       	call   c000efd8 <findDataTable(unsigned char*, char*)>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f771:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f776:	74 0c                	je     c000f784 <ACPI::detectPCI()+0x50>
c000f778:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f77d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f782:	66 90                	xchg   ax,ax
c000f784:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f78c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f790:	8a 00                	mov    al,BYTE PTR [eax]
c000f792:	0f b6 c0             	movzx  eax,al
c000f795:	83 f8 01             	cmp    eax,0x1
c000f798:	75 0e                	jne    c000f7a8 <ACPI::detectPCI()+0x74>
c000f79a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f79f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7a4:	eb 2e                	jmp    c000f7d4 <ACPI::detectPCI()+0xa0>
c000f7a6:	66 90                	xchg   ax,ax
c000f7a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ac:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ae:	0f b6 c0             	movzx  eax,al
c000f7b1:	83 f8 02             	cmp    eax,0x2
c000f7b4:	75 1e                	jne    c000f7d4 <ACPI::detectPCI()+0xa0>
c000f7b6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7bb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7c0:	85 c0                	test   eax,eax
c000f7c2:	74 10                	je     c000f7d4 <ACPI::detectPCI()+0xa0>
c000f7c4:	83 ec 0c             	sub    esp,0xc
c000f7c7:	68 3c 18 02 c0       	push   0xc002183c
c000f7cc:	e8 2c 1a 00 00       	call   c00111fd <KePanic(char const*)>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f7d8:	83 f0 01             	xor    eax,0x1
c000f7db:	0f b6 c0             	movzx  eax,al
c000f7de:	85 c0                	test   eax,eax
c000f7e0:	74 46                	je     c000f828 <ACPI::detectPCI()+0xf4>
c000f7e2:	e8 49 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f7e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f7f0:	75 0e                	jne    c000f800 <ACPI::detectPCI()+0xcc>
c000f7f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7f7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7fc:	eb 2a                	jmp    c000f828 <ACPI::detectPCI()+0xf4>
c000f7fe:	66 90                	xchg   ax,ax
c000f800:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f805:	75 21                	jne    c000f828 <ACPI::detectPCI()+0xf4>
c000f807:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f80c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f811:	85 c0                	test   eax,eax
c000f813:	74 13                	je     c000f828 <ACPI::detectPCI()+0xf4>
c000f815:	83 ec 0c             	sub    esp,0xc
c000f818:	68 3c 18 02 c0       	push   0xc002183c
c000f81d:	e8 db 19 00 00       	call   c00111fd <KePanic(char const*)>
c000f822:	83 c4 10             	add    esp,0x10
c000f825:	8d 76 00             	lea    esi,[esi+0x0]
c000f828:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f82d:	85 c0                	test   eax,eax
c000f82f:	0f 84 87 00 00 00    	je     c000f8bc <ACPI::detectPCI()+0x188>
c000f835:	83 ec 0c             	sub    esp,0xc
c000f838:	68 c7 18 02 c0       	push   0xc00218c7
c000f83d:	e8 e4 12 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f84d:	83 ec 0c             	sub    esp,0xc
c000f850:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f854:	e8 5d 82 ff ff       	call   c0007ab6 <malloc>
c000f859:	83 c4 10             	add    esp,0x10
c000f85c:	89 c3                	mov    ebx,eax
c000f85e:	83 ec 0c             	sub    esp,0xc
c000f861:	53                   	push   ebx
c000f862:	e8 2d b3 00 00       	call   c001ab94 <PCI::PCI()>
c000f867:	83 c4 10             	add    esp,0x10
c000f86a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f86e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f872:	83 ec 08             	sub    esp,0x8
c000f875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f879:	50                   	push   eax
c000f87a:	e8 73 cd ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c000f87f:	83 c4 10             	add    esp,0x10
c000f882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f886:	8b 00                	mov    eax,DWORD PTR [eax]
c000f888:	83 c0 08             	add    eax,0x8
c000f88b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f88d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f892:	85 d2                	test   edx,edx
c000f894:	74 0a                	je     c000f8a0 <ACPI::detectPCI()+0x16c>
c000f896:	ba 01 00 00 00       	mov    edx,0x1
c000f89b:	eb 0b                	jmp    c000f8a8 <ACPI::detectPCI()+0x174>
c000f89d:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a0:	ba 02 00 00 00       	mov    edx,0x2
c000f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a8:	6a 00                	push   0x0
c000f8aa:	6a 00                	push   0x0
c000f8ac:	52                   	push   edx
c000f8ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8b1:	ff d0                	call   eax
c000f8b3:	83 c4 10             	add    esp,0x10
c000f8b6:	e9 91 00 00 00       	jmp    c000f94c <ACPI::detectPCI()+0x218>
c000f8bb:	90                   	nop
c000f8bc:	83 ec 0c             	sub    esp,0xc
c000f8bf:	68 df 18 02 c0       	push   0xc00218df
c000f8c4:	e8 5d 12 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000f8c9:	83 c4 10             	add    esp,0x10
c000f8cc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f8d3:	83 ec 0c             	sub    esp,0xc
c000f8d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8da:	e8 d7 81 ff ff       	call   c0007ab6 <malloc>
c000f8df:	83 c4 10             	add    esp,0x10
c000f8e2:	89 c3                	mov    ebx,eax
c000f8e4:	83 ec 0c             	sub    esp,0xc
c000f8e7:	53                   	push   ebx
c000f8e8:	e8 41 be 00 00       	call   c001b72e <IDE::IDE()>
c000f8ed:	83 c4 10             	add    esp,0x10
c000f8f0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f8f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8f8:	83 ec 08             	sub    esp,0x8
c000f8fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f8ff:	50                   	push   eax
c000f900:	e8 ed cc ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c000f905:	83 c4 10             	add    esp,0x10
c000f908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f90c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f91a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f923:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f927:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f934:	8b 00                	mov    eax,DWORD PTR [eax]
c000f936:	83 c0 08             	add    eax,0x8
c000f939:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93b:	6a 00                	push   0x0
c000f93d:	6a 00                	push   0x0
c000f93f:	6a 00                	push   0x0
c000f941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f945:	ff d0                	call   eax
c000f947:	83 c4 10             	add    esp,0x10
c000f94a:	66 90                	xchg   ax,ax
c000f94c:	90                   	nop
c000f94d:	83 c4 28             	add    esp,0x28
c000f950:	5b                   	pop    ebx
c000f951:	c3                   	ret    
c000f952:	66 90                	xchg   ax,ax

c000f954 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f954:	83 ec 1c             	sub    esp,0x1c
c000f957:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f95b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f95e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f962:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f967:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f96c:	83 ec 08             	sub    esp,0x8
c000f96f:	52                   	push   edx
c000f970:	50                   	push   eax
c000f971:	e8 02 78 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f97d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f982:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f987:	83 ec 04             	sub    esp,0x4
c000f98a:	6a 01                	push   0x1
c000f98c:	52                   	push   edx
c000f98d:	50                   	push   eax
c000f98e:	e8 ff 78 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f993:	83 c4 10             	add    esp,0x10
c000f996:	90                   	nop
c000f997:	83 c4 1c             	add    esp,0x1c
c000f99a:	c3                   	ret    
c000f99b:	90                   	nop

c000f99c <ACPI::sleep()>:
c000f99c:	83 ec 0c             	sub    esp,0xc
c000f99f:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9a4:	85 c0                	test   eax,eax
c000f9a6:	74 08                	je     c000f9b0 <ACPI::sleep()+0x14>
c000f9a8:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f9ad:	ff d0                	call   eax
c000f9af:	90                   	nop
c000f9b0:	90                   	nop
c000f9b1:	83 c4 0c             	add    esp,0xc
c000f9b4:	c3                   	ret    
c000f9b5:	90                   	nop
c000f9b6:	66 90                	xchg   ax,ax

c000f9b8 <ACPI::open(int, int, void*)>:
c000f9b8:	57                   	push   edi
c000f9b9:	56                   	push   esi
c000f9ba:	53                   	push   ebx
c000f9bb:	81 ec 70 01 00 00    	sub    esp,0x170
c000f9c1:	83 ec 0c             	sub    esp,0xc
c000f9c4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f9cb:	e8 64 fd ff ff       	call   c000f734 <ACPI::detectPCI()>
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	83 ec 0c             	sub    esp,0xc
c000f9d6:	68 64 18 02 c0       	push   0xc0021864
c000f9db:	e8 46 11 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000f9e0:	83 c4 10             	add    esp,0x10
c000f9e3:	b8 4c 05 00 00       	mov    eax,0x54c
c000f9e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f9ea:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f9f1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f9f9:	83 f8 01             	cmp    eax,0x1
c000f9fc:	75 12                	jne    c000fa10 <ACPI::open(int, int, void*)+0x58>
c000f9fe:	83 ec 0c             	sub    esp,0xc
c000fa01:	68 f4 18 02 c0       	push   0xc00218f4
c000fa06:	e8 d9 4b 00 00       	call   c00145e4 <Thr::loadKernelSymbolTable(char const*)>
c000fa0b:	83 c4 10             	add    esp,0x10
c000fa0e:	eb 34                	jmp    c000fa44 <ACPI::open(int, int, void*)+0x8c>
c000fa10:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa18:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa1d:	75 15                	jne    c000fa34 <ACPI::open(int, int, void*)+0x7c>
c000fa1f:	83 ec 0c             	sub    esp,0xc
c000fa22:	68 12 19 02 c0       	push   0xc0021912
c000fa27:	e8 b8 4b 00 00       	call   c00145e4 <Thr::loadKernelSymbolTable(char const*)>
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	eb 13                	jmp    c000fa44 <ACPI::open(int, int, void*)+0x8c>
c000fa31:	8d 76 00             	lea    esi,[esi+0x0]
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	68 30 19 02 c0       	push   0xc0021930
c000fa3c:	e8 bc 17 00 00       	call   c00111fd <KePanic(char const*)>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fa4c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fa57:	83 ec 0c             	sub    esp,0xc
c000fa5a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fa61:	e8 50 80 ff ff       	call   c0007ab6 <malloc>
c000fa66:	83 c4 10             	add    esp,0x10
c000fa69:	89 c3                	mov    ebx,eax
c000fa6b:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fa70:	83 ec 04             	sub    esp,0x4
c000fa73:	50                   	push   eax
c000fa74:	68 4a 19 02 c0       	push   0xc002194a
c000fa79:	53                   	push   ebx
c000fa7a:	e8 6b bc ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c000fa7f:	83 c4 10             	add    esp,0x10
c000fa82:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fa89:	83 ec 08             	sub    esp,0x8
c000fa8c:	6a 01                	push   0x1
c000fa8e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fa95:	e8 0c bd ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c000fa9a:	83 c4 10             	add    esp,0x10
c000fa9d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000faa4:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000faac:	75 16                	jne    c000fac4 <ACPI::open(int, int, void*)+0x10c>
c000faae:	83 ec 0c             	sub    esp,0xc
c000fab1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fab8:	e8 47 bd ff ff       	call   c000b804 <File::close()>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	eb 0a                	jmp    c000facc <ACPI::open(int, int, void*)+0x114>
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000facc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fad4:	74 1e                	je     c000faf4 <ACPI::open(int, int, void*)+0x13c>
c000fad6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fadd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fadf:	83 c0 08             	add    eax,0x8
c000fae2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fae4:	83 ec 0c             	sub    esp,0xc
c000fae7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000faee:	ff d0                	call   eax
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	90                   	nop
c000faf4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fafb:	83 f0 01             	xor    eax,0x1
c000fafe:	0f b6 c0             	movzx  eax,al
c000fb01:	85 c0                	test   eax,eax
c000fb03:	74 43                	je     c000fb48 <ACPI::open(int, int, void*)+0x190>
c000fb05:	83 ec 0c             	sub    esp,0xc
c000fb08:	68 68 19 02 c0       	push   0xc0021968
c000fb0d:	e8 14 10 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	83 ec 04             	sub    esp,0x4
c000fb18:	6a 0c                	push   0xc
c000fb1a:	68 83 19 02 c0       	push   0xc0021983
c000fb1f:	68 94 19 02 c0       	push   0xc0021994
c000fb24:	e8 6b 3d 00 00       	call   c0013894 <Reg::readIntWithDefault(char*, char*, int)>
c000fb29:	83 c4 10             	add    esp,0x10
c000fb2c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fb3d:	e8 fa 9c ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	8d 76 00             	lea    esi,[esi+0x0]
c000fb48:	83 ec 0c             	sub    esp,0xc
c000fb4b:	68 15 05 02 c0       	push   0xc0020515
c000fb50:	e8 d1 0f 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fb5f:	83 ec 08             	sub    esp,0x8
c000fb62:	6a 13                	push   0x13
c000fb64:	50                   	push   eax
c000fb65:	e8 a0 cd ff ff       	call   c000c90a <getDevicesOfType(DeviceType)>
c000fb6a:	83 c4 0c             	add    esp,0xc
c000fb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb70:	83 ec 0c             	sub    esp,0xc
c000fb73:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fb7a:	50                   	push   eax
c000fb7b:	e8 90 fd 00 00       	call   c001f910 <LinkedList<Device>::isEmpty()>
c000fb80:	83 c4 10             	add    esp,0x10
c000fb83:	83 f0 01             	xor    eax,0x1
c000fb86:	0f b6 c0             	movzx  eax,al
c000fb89:	85 c0                	test   eax,eax
c000fb8b:	0f 84 47 01 00 00    	je     c000fcd8 <ACPI::open(int, int, void*)+0x320>
c000fb91:	83 ec 0c             	sub    esp,0xc
c000fb94:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fb9b:	50                   	push   eax
c000fb9c:	e8 8b fd 00 00       	call   c001f92c <LinkedList<Device>::getFirstElement()>
c000fba1:	83 c4 10             	add    esp,0x10
c000fba4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fbab:	83 ec 0c             	sub    esp,0xc
c000fbae:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbb5:	50                   	push   eax
c000fbb6:	e8 79 fd 00 00       	call   c001f934 <LinkedList<Device>::removeFirst()>
c000fbbb:	83 c4 10             	add    esp,0x10
c000fbbe:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fbc5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fbcc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fbd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fbd7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fbdd:	ba 09 00 00 00       	mov    edx,0x9
c000fbe2:	fc                   	cld    
c000fbe3:	89 c7                	mov    edi,eax
c000fbe5:	89 de                	mov    esi,ebx
c000fbe7:	89 d1                	mov    ecx,edx
c000fbe9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fbeb:	83 ec 08             	sub    esp,0x8
c000fbee:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fbf2:	50                   	push   eax
c000fbf3:	83 ec 24             	sub    esp,0x24
c000fbf6:	89 e0                	mov    eax,esp
c000fbf8:	89 c3                	mov    ebx,eax
c000fbfa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fbfe:	ba 09 00 00 00       	mov    edx,0x9
c000fc03:	89 df                	mov    edi,ebx
c000fc05:	89 c6                	mov    esi,eax
c000fc07:	89 d1                	mov    ecx,edx
c000fc09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc0b:	e8 6e b4 00 00       	call   c001b07e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc10:	83 c4 30             	add    esp,0x30
c000fc13:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fc1a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fc22:	0f 84 48 ff ff ff    	je     c000fb70 <ACPI::open(int, int, void*)+0x1b8>
c000fc28:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fc33:	83 ec 0c             	sub    esp,0xc
c000fc36:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc3d:	e8 74 7e ff ff       	call   c0007ab6 <malloc>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	89 c3                	mov    ebx,eax
c000fc47:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fc4c:	83 ec 04             	sub    esp,0x4
c000fc4f:	50                   	push   eax
c000fc50:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc57:	53                   	push   ebx
c000fc58:	e8 8d ba ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c000fc5d:	83 c4 10             	add    esp,0x10
c000fc60:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fc67:	83 ec 0c             	sub    esp,0xc
c000fc6a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc71:	e8 f4 bd ff ff       	call   c000ba6a <File::exists()>
c000fc76:	83 c4 10             	add    esp,0x10
c000fc79:	0f b6 c0             	movzx  eax,al
c000fc7c:	85 c0                	test   eax,eax
c000fc7e:	74 28                	je     c000fca8 <ACPI::open(int, int, void*)+0x2f0>
c000fc80:	83 ec 08             	sub    esp,0x8
c000fc83:	6a 01                	push   0x1
c000fc85:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fc8c:	e8 cd 53 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	83 ec 08             	sub    esp,0x8
c000fc97:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fc9e:	50                   	push   eax
c000fc9f:	e8 eb 55 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	90                   	nop
c000fca8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fcb0:	0f 84 ba fe ff ff    	je     c000fb70 <ACPI::open(int, int, void*)+0x1b8>
c000fcb6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fcbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcbf:	83 c0 08             	add    eax,0x8
c000fcc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcce:	ff d0                	call   eax
c000fcd0:	83 c4 10             	add    esp,0x10
c000fcd3:	e9 98 fe ff ff       	jmp    c000fb70 <ACPI::open(int, int, void*)+0x1b8>
c000fcd8:	83 ec 0c             	sub    esp,0xc
c000fcdb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fce2:	50                   	push   eax
c000fce3:	e8 24 fc 00 00       	call   c001f90c <LinkedList<Device>::~LinkedList()>
c000fce8:	83 c4 10             	add    esp,0x10
c000fceb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fcf1:	83 ec 08             	sub    esp,0x8
c000fcf4:	6a 01                	push   0x1
c000fcf6:	68 9b 19 02 c0       	push   0xc002199b
c000fcfb:	e8 5e 53 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000fd00:	83 c4 10             	add    esp,0x10
c000fd03:	83 ec 08             	sub    esp,0x8
c000fd06:	53                   	push   ebx
c000fd07:	50                   	push   eax
c000fd08:	e8 82 55 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000fd0d:	83 c4 10             	add    esp,0x10
c000fd10:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd15:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd1b:	83 e0 04             	and    eax,0x4
c000fd1e:	0f b6 c0             	movzx  eax,al
c000fd21:	85 c0                	test   eax,eax
c000fd23:	0f 84 1b 01 00 00    	je     c000fe44 <ACPI::open(int, int, void*)+0x48c>
c000fd29:	83 ec 0c             	sub    esp,0xc
c000fd2c:	68 b8 19 02 c0       	push   0xc00219b8
c000fd31:	e8 f0 0d 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fd4e:	e8 63 7d ff ff       	call   c0007ab6 <malloc>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	89 c3                	mov    ebx,eax
c000fd58:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fd5d:	83 ec 04             	sub    esp,0x4
c000fd60:	50                   	push   eax
c000fd61:	68 d5 19 02 c0       	push   0xc00219d5
c000fd66:	53                   	push   ebx
c000fd67:	e8 7e b9 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fd76:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fd7e:	74 20                	je     c000fda0 <ACPI::open(int, int, void*)+0x3e8>
c000fd80:	83 ec 0c             	sub    esp,0xc
c000fd83:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fd8a:	e8 db bc ff ff       	call   c000ba6a <File::exists()>
c000fd8f:	83 c4 10             	add    esp,0x10
c000fd92:	0f b6 c0             	movzx  eax,al
c000fd95:	85 c0                	test   eax,eax
c000fd97:	74 07                	je     c000fda0 <ACPI::open(int, int, void*)+0x3e8>
c000fd99:	b0 01                	mov    al,0x1
c000fd9b:	eb 07                	jmp    c000fda4 <ACPI::open(int, int, void*)+0x3ec>
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fda0:	b0 00                	mov    al,0x0
c000fda2:	66 90                	xchg   ax,ax
c000fda4:	0f b6 c0             	movzx  eax,al
c000fda7:	85 c0                	test   eax,eax
c000fda9:	74 25                	je     c000fdd0 <ACPI::open(int, int, void*)+0x418>
c000fdab:	83 ec 08             	sub    esp,0x8
c000fdae:	6a 01                	push   0x1
c000fdb0:	68 d5 19 02 c0       	push   0xc00219d5
c000fdb5:	e8 a4 52 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	83 ec 08             	sub    esp,0x8
c000fdc0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fdc7:	50                   	push   eax
c000fdc8:	e8 c2 54 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdd8:	74 2a                	je     c000fe04 <ACPI::open(int, int, void*)+0x44c>
c000fdda:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fde2:	74 20                	je     c000fe04 <ACPI::open(int, int, void*)+0x44c>
c000fde4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000fdeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fded:	83 c0 08             	add    eax,0x8
c000fdf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf2:	83 ec 0c             	sub    esp,0xc
c000fdf5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fdfc:	ff d0                	call   eax
c000fdfe:	83 c4 10             	add    esp,0x10
c000fe01:	8d 76 00             	lea    esi,[esi+0x0]
c000fe04:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fe09:	83 ec 08             	sub    esp,0x8
c000fe0c:	68 f2 19 02 c0       	push   0xc00219f2
c000fe11:	50                   	push   eax
c000fe12:	e8 c1 f1 ff ff       	call   c000efd8 <findDataTable(unsigned char*, char*)>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fe21:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fe29:	74 19                	je     c000fe44 <ACPI::open(int, int, void*)+0x48c>
c000fe2b:	83 ec 08             	sub    esp,0x8
c000fe2e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe35:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe3c:	e8 13 fb ff ff       	call   c000f954 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe41:	83 c4 10             	add    esp,0x10
c000fe44:	b8 00 00 00 00       	mov    eax,0x0
c000fe49:	81 c4 70 01 00 00    	add    esp,0x170
c000fe4f:	5b                   	pop    ebx
c000fe50:	5e                   	pop    esi
c000fe51:	5f                   	pop    edi
c000fe52:	c3                   	ret    
c000fe53:	90                   	nop

c000fe54 <CPU::close(int, int, void*)>:
c000fe54:	31 c0                	xor    eax,eax
c000fe56:	c3                   	ret    
c000fe57:	90                   	nop

c000fe58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fe58:	60                   	pusha  
c000fe59:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe65:	9c                   	pushf  
c000fe66:	fa                   	cli    
c000fe67:	0f 09                	wbinvd 
c000fe69:	0f 30                	wrmsr  
c000fe6b:	9d                   	popf   
c000fe6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe70:	89 02                	mov    DWORD PTR [edx],eax
c000fe72:	61                   	popa   
c000fe73:	c3                   	ret    

c000fe74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fe74:	60                   	pusha  
c000fe75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe79:	9c                   	pushf  
c000fe7a:	fa                   	cli    
c000fe7b:	0f 09                	wbinvd 
c000fe7d:	31 c0                	xor    eax,eax
c000fe7f:	31 d2                	xor    edx,edx
c000fe81:	0f 32                	rdmsr  
c000fe83:	9d                   	popf   
c000fe84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe88:	89 02                	mov    DWORD PTR [edx],eax
c000fe8a:	61                   	popa   
c000fe8b:	c3                   	ret    

c000fe8c <CPU::AMD_K6_writeback(int, int, int)>:
c000fe8c:	56                   	push   esi
c000fe8d:	53                   	push   ebx
c000fe8e:	83 ec 10             	sub    esp,0x10
c000fe91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe95:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fe9a:	75 5d                	jne    c000fef9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe9c:	83 f8 08             	cmp    eax,0x8
c000fe9f:	75 09                	jne    c000feaa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fea1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fea6:	7e 13                	jle    c000febb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fea8:	eb 30                	jmp    c000feda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000feaa:	83 f8 06             	cmp    eax,0x6
c000fead:	7c 4a                	jl     c000fef9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000feaf:	83 f8 07             	cmp    eax,0x7
c000feb2:	7e 07                	jle    c000febb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000feb4:	83 f8 09             	cmp    eax,0x9
c000feb7:	74 21                	je     c000feda <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000feb9:	eb 3e                	jmp    c000fef9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000febb:	89 e6                	mov    esi,esp
c000febd:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000fec3:	56                   	push   esi
c000fec4:	c1 eb 15             	shr    ebx,0x15
c000fec7:	68 82 00 00 c0       	push   0xc0000082
c000fecc:	83 e3 7e             	and    ebx,0x7e
c000fecf:	e8 a0 ff ff ff       	call   c000fe74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fed4:	56                   	push   esi
c000fed5:	6a 00                	push   0x0
c000fed7:	53                   	push   ebx
c000fed8:	eb 12                	jmp    c000feec <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000feda:	89 e3                	mov    ebx,esp
c000fedc:	53                   	push   ebx
c000fedd:	68 82 00 00 c0       	push   0xc0000082
c000fee2:	e8 8d ff ff ff       	call   c000fe74 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fee7:	53                   	push   ebx
c000fee8:	6a 00                	push   0x0
c000feea:	6a 00                	push   0x0
c000feec:	68 82 00 00 c0       	push   0xc0000082
c000fef1:	e8 62 ff ff ff       	call   c000fe58 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fef6:	83 c4 18             	add    esp,0x18
c000fef9:	83 c4 10             	add    esp,0x10
c000fefc:	5b                   	pop    ebx
c000fefd:	5e                   	pop    esi
c000fefe:	c3                   	ret    
c000feff:	90                   	nop

c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff00:	55                   	push   ebp
c000ff01:	57                   	push   edi
c000ff02:	56                   	push   esi
c000ff03:	53                   	push   ebx
c000ff04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff0c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff10:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff14:	39 05 98 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f98,eax
c000ff1a:	75 23                	jne    c000ff3f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff1c:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c000ff21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff25:	89 06                	mov    DWORD PTR [esi],eax
c000ff27:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c000ff2c:	89 07                	mov    DWORD PTR [edi],eax
c000ff2e:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c000ff33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff36:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c000ff3b:	89 02                	mov    DWORD PTR [edx],eax
c000ff3d:	eb 3f                	jmp    c000ff7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff3f:	31 c9                	xor    ecx,ecx
c000ff41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff45:	0f a2                	cpuid  
c000ff47:	89 06                	mov    DWORD PTR [esi],eax
c000ff49:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff4f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff52:	89 10                	mov    DWORD PTR [eax],edx
c000ff54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff58:	a3 98 2f 02 c0       	mov    ds:0xc0022f98,eax
c000ff5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff5f:	a3 ec 99 02 c0       	mov    ds:0xc00299ec,eax
c000ff64:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff66:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c000ff6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff6e:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c000ff73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff77:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff79:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c000ff7e:	5b                   	pop    ebx
c000ff7f:	5e                   	pop    esi
c000ff80:	5f                   	pop    edi
c000ff81:	5d                   	pop    ebp
c000ff82:	c3                   	ret    
c000ff83:	90                   	nop

c000ff84 <CPU::cpuidCheckEDX(unsigned int)>:
c000ff84:	83 ec 10             	sub    esp,0x10
c000ff87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff8b:	50                   	push   eax
c000ff8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff90:	50                   	push   eax
c000ff91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff95:	50                   	push   eax
c000ff96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff9a:	50                   	push   eax
c000ff9b:	6a 01                	push   0x1
c000ff9d:	e8 5e ff ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffa6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ffaa:	0f 95 c0             	setne  al
c000ffad:	83 c4 24             	add    esp,0x24
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <CPU::cpuidCheckECX(unsigned int)>:
c000ffb2:	83 ec 10             	sub    esp,0x10
c000ffb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb9:	50                   	push   eax
c000ffba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffbe:	50                   	push   eax
c000ffbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc3:	50                   	push   eax
c000ffc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc8:	50                   	push   eax
c000ffc9:	6a 01                	push   0x1
c000ffcb:	e8 30 ff ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffd4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffd8:	0f 95 c0             	setne  al
c000ffdb:	83 c4 24             	add    esp,0x24
c000ffde:	c3                   	ret    
c000ffdf:	90                   	nop

c000ffe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ffe0:	83 ec 10             	sub    esp,0x10
c000ffe3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe7:	50                   	push   eax
c000ffe8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffec:	50                   	push   eax
c000ffed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff1:	50                   	push   eax
c000fff2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff6:	50                   	push   eax
c000fff7:	6a 07                	push   0x7
c000fff9:	e8 02 ff ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fffe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010002:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010006:	0f 95 c0             	setne  al
c0010009:	83 c4 24             	add    esp,0x24
c001000c:	c3                   	ret    
c001000d:	90                   	nop

c001000e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010015:	50                   	push   eax
c0010016:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001a:	50                   	push   eax
c001001b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001f:	50                   	push   eax
c0010020:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010024:	50                   	push   eax
c0010025:	6a 07                	push   0x7
c0010027:	e8 d4 fe ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001002c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010030:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010034:	0f 95 c0             	setne  al
c0010037:	83 c4 24             	add    esp,0x24
c001003a:	c3                   	ret    
c001003b:	90                   	nop

c001003c <CPU::CPU()>:
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010043:	83 ec 08             	sub    esp,0x8
c0010046:	68 15 1b 02 c0       	push   0xc0021b15
c001004b:	50                   	push   eax
c001004c:	e8 39 c7 ff ff       	call   c000c78a <Device::Device(char const*)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c0010059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005d:	89 10                	mov    DWORD PTR [eax],edx
c001005f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010063:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001006d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010071:	05 78 01 00 00       	add    eax,0x178
c0010076:	83 ec 0c             	sub    esp,0xc
c0010079:	50                   	push   eax
c001007a:	e8 dd 72 ff ff       	call   c000735c <GDT::GDT()>
c001007f:	83 c4 10             	add    esp,0x10
c0010082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010086:	05 7c 09 00 00       	add    eax,0x97c
c001008b:	83 ec 0c             	sub    esp,0xc
c001008e:	50                   	push   eax
c001008f:	e8 18 75 ff ff       	call   c00075ac <IDT::IDT()>
c0010094:	83 c4 10             	add    esp,0x10
c0010097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009b:	05 7c 11 00 00       	add    eax,0x117c
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	50                   	push   eax
c00100a4:	e8 9b 8e ff ff       	call   c0008f44 <TSS::TSS()>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00100b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100bb:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00100c5:	90                   	nop
c00100c6:	83 c4 0c             	add    esp,0xc
c00100c9:	c3                   	ret    

c00100ca <CPU::displayFeatures()>:
c00100ca:	c3                   	ret    
c00100cb:	90                   	nop

c00100cc <CPU::detectFeatures()>:
c00100cc:	55                   	push   ebp
c00100cd:	57                   	push   edi
c00100ce:	56                   	push   esi
c00100cf:	53                   	push   ebx
c00100d0:	83 ec 30             	sub    esp,0x30
c00100d3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00100d7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00100e1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00100e8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00100ee:	6a 0d                	push   0xd
c00100f0:	6a 00                	push   0x0
c00100f2:	55                   	push   ebp
c00100f3:	e8 f8 03 ff ff       	call   c00004f0 <memset>
c00100f8:	83 c4 10             	add    esp,0x10
c00100fb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010100:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010107:	0f 84 db 05 00 00    	je     c00106e8 <CPU::detectFeatures()+0x61c>
c001010d:	83 ec 0c             	sub    esp,0xc
c0010110:	89 ef                	mov    edi,ebp
c0010112:	6a 10                	push   0x10
c0010114:	e8 6b fe ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c0010119:	83 e0 01             	and    eax,0x1
c001011c:	8d 14 00             	lea    edx,[eax+eax*1]
c001011f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010125:	83 e0 fd             	and    eax,0xfffffffd
c0010128:	09 d0                	or     eax,edx
c001012a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010130:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010137:	e8 48 fe ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c001013c:	83 e0 01             	and    eax,0x1
c001013f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010146:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001014c:	83 e0 fb             	and    eax,0xfffffffb
c001014f:	09 d0                	or     eax,edx
c0010151:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010157:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001015e:	e8 21 fe ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c0010163:	83 e0 01             	and    eax,0x1
c0010166:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001016d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010173:	83 e0 f7             	and    eax,0xfffffff7
c0010176:	09 d0                	or     eax,edx
c0010178:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001017e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010185:	e8 fa fd ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c001018a:	83 e0 01             	and    eax,0x1
c001018d:	c1 e0 04             	shl    eax,0x4
c0010190:	89 c2                	mov    edx,eax
c0010192:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010198:	83 e0 ef             	and    eax,0xffffffef
c001019b:	09 d0                	or     eax,edx
c001019d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101a3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00101aa:	e8 d5 fd ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c00101af:	83 e0 01             	and    eax,0x1
c00101b2:	c1 e0 05             	shl    eax,0x5
c00101b5:	89 c2                	mov    edx,eax
c00101b7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101bd:	83 e0 df             	and    eax,0xffffffdf
c00101c0:	09 d0                	or     eax,edx
c00101c2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101c8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00101cf:	e8 b0 fd ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c00101d4:	83 e0 01             	and    eax,0x1
c00101d7:	8d 14 00             	lea    edx,[eax+eax*1]
c00101da:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101e0:	83 e0 fd             	and    eax,0xfffffffd
c00101e3:	09 d0                	or     eax,edx
c00101e5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101eb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00101f2:	e8 8d fd ff ff       	call   c000ff84 <CPU::cpuidCheckEDX(unsigned int)>
c00101f7:	83 e0 01             	and    eax,0x1
c00101fa:	c1 e0 06             	shl    eax,0x6
c00101fd:	89 c2                	mov    edx,eax
c00101ff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010205:	83 e0 bf             	and    eax,0xffffffbf
c0010208:	09 d0                	or     eax,edx
c001020a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010210:	58                   	pop    eax
c0010211:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010215:	50                   	push   eax
c0010216:	8d 44 24 28          	lea    eax,[esp+0x28]
c001021a:	50                   	push   eax
c001021b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001021f:	56                   	push   esi
c0010220:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010224:	50                   	push   eax
c0010225:	6a 00                	push   0x0
c0010227:	e8 d4 fc ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001022c:	b8 04 00 00 00       	mov    eax,0x4
c0010231:	89 c1                	mov    ecx,eax
c0010233:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010235:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001023b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001023f:	89 c1                	mov    ecx,eax
c0010241:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010243:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010249:	8d 74 24 38          	lea    esi,[esp+0x38]
c001024d:	89 c1                	mov    ecx,eax
c001024f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010251:	83 c4 18             	add    esp,0x18
c0010254:	68 24 1a 02 c0       	push   0xc0021a24
c0010259:	55                   	push   ebp
c001025a:	e8 f1 04 ff ff       	call   c0000750 <strcmp>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	85 c0                	test   eax,eax
c0010264:	75 0f                	jne    c0010275 <CPU::detectFeatures()+0x1a9>
c0010266:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010270:	e9 22 02 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c0010275:	50                   	push   eax
c0010276:	50                   	push   eax
c0010277:	68 31 1a 02 c0       	push   0xc0021a31
c001027c:	55                   	push   ebp
c001027d:	e8 ce 04 ff ff       	call   c0000750 <strcmp>
c0010282:	83 c4 10             	add    esp,0x10
c0010285:	85 c0                	test   eax,eax
c0010287:	74 dd                	je     c0010266 <CPU::detectFeatures()+0x19a>
c0010289:	50                   	push   eax
c001028a:	50                   	push   eax
c001028b:	68 3e 1a 02 c0       	push   0xc0021a3e
c0010290:	55                   	push   ebp
c0010291:	e8 ba 04 ff ff       	call   c0000750 <strcmp>
c0010296:	83 c4 10             	add    esp,0x10
c0010299:	85 c0                	test   eax,eax
c001029b:	74 2a                	je     c00102c7 <CPU::detectFeatures()+0x1fb>
c001029d:	50                   	push   eax
c001029e:	50                   	push   eax
c001029f:	68 4b 1a 02 c0       	push   0xc0021a4b
c00102a4:	55                   	push   ebp
c00102a5:	e8 a6 04 ff ff       	call   c0000750 <strcmp>
c00102aa:	83 c4 10             	add    esp,0x10
c00102ad:	85 c0                	test   eax,eax
c00102af:	74 16                	je     c00102c7 <CPU::detectFeatures()+0x1fb>
c00102b1:	50                   	push   eax
c00102b2:	50                   	push   eax
c00102b3:	68 58 1a 02 c0       	push   0xc0021a58
c00102b8:	55                   	push   ebp
c00102b9:	e8 92 04 ff ff       	call   c0000750 <strcmp>
c00102be:	83 c4 10             	add    esp,0x10
c00102c1:	85 c0                	test   eax,eax
c00102c3:	74 48                	je     c001030d <CPU::detectFeatures()+0x241>
c00102c5:	eb 0f                	jmp    c00102d6 <CPU::detectFeatures()+0x20a>
c00102c7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00102d1:	e9 c1 01 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c00102d6:	50                   	push   eax
c00102d7:	50                   	push   eax
c00102d8:	68 65 1a 02 c0       	push   0xc0021a65
c00102dd:	55                   	push   ebp
c00102de:	e8 6d 04 ff ff       	call   c0000750 <strcmp>
c00102e3:	83 c4 10             	add    esp,0x10
c00102e6:	85 c0                	test   eax,eax
c00102e8:	74 23                	je     c001030d <CPU::detectFeatures()+0x241>
c00102ea:	57                   	push   edi
c00102eb:	57                   	push   edi
c00102ec:	68 72 1a 02 c0       	push   0xc0021a72
c00102f1:	55                   	push   ebp
c00102f2:	e8 59 04 ff ff       	call   c0000750 <strcmp>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	85 c0                	test   eax,eax
c00102fc:	75 1e                	jne    c001031c <CPU::detectFeatures()+0x250>
c00102fe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010308:	e9 8a 01 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c001030d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010317:	e9 7b 01 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c001031c:	56                   	push   esi
c001031d:	56                   	push   esi
c001031e:	68 7f 1a 02 c0       	push   0xc0021a7f
c0010323:	55                   	push   ebp
c0010324:	e8 27 04 ff ff       	call   c0000750 <strcmp>
c0010329:	83 c4 10             	add    esp,0x10
c001032c:	85 c0                	test   eax,eax
c001032e:	75 0f                	jne    c001033f <CPU::detectFeatures()+0x273>
c0010330:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001033a:	e9 58 01 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c001033f:	51                   	push   ecx
c0010340:	51                   	push   ecx
c0010341:	68 3e 1a 02 c0       	push   0xc0021a3e
c0010346:	55                   	push   ebp
c0010347:	e8 04 04 ff ff       	call   c0000750 <strcmp>
c001034c:	83 c4 10             	add    esp,0x10
c001034f:	85 c0                	test   eax,eax
c0010351:	75 0f                	jne    c0010362 <CPU::detectFeatures()+0x296>
c0010353:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001035d:	e9 35 01 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c0010362:	52                   	push   edx
c0010363:	52                   	push   edx
c0010364:	68 8c 1a 02 c0       	push   0xc0021a8c
c0010369:	55                   	push   ebp
c001036a:	e8 e1 03 ff ff       	call   c0000750 <strcmp>
c001036f:	83 c4 10             	add    esp,0x10
c0010372:	85 c0                	test   eax,eax
c0010374:	75 0f                	jne    c0010385 <CPU::detectFeatures()+0x2b9>
c0010376:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010380:	e9 12 01 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c0010385:	50                   	push   eax
c0010386:	50                   	push   eax
c0010387:	68 99 1a 02 c0       	push   0xc0021a99
c001038c:	55                   	push   ebp
c001038d:	e8 be 03 ff ff       	call   c0000750 <strcmp>
c0010392:	83 c4 10             	add    esp,0x10
c0010395:	85 c0                	test   eax,eax
c0010397:	75 0f                	jne    c00103a8 <CPU::detectFeatures()+0x2dc>
c0010399:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00103a3:	e9 ef 00 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c00103a8:	50                   	push   eax
c00103a9:	50                   	push   eax
c00103aa:	68 a6 1a 02 c0       	push   0xc0021aa6
c00103af:	55                   	push   ebp
c00103b0:	e8 9b 03 ff ff       	call   c0000750 <strcmp>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	85 c0                	test   eax,eax
c00103ba:	75 0f                	jne    c00103cb <CPU::detectFeatures()+0x2ff>
c00103bc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00103c6:	e9 cc 00 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c00103cb:	50                   	push   eax
c00103cc:	50                   	push   eax
c00103cd:	68 b3 1a 02 c0       	push   0xc0021ab3
c00103d2:	55                   	push   ebp
c00103d3:	e8 78 03 ff ff       	call   c0000750 <strcmp>
c00103d8:	83 c4 10             	add    esp,0x10
c00103db:	85 c0                	test   eax,eax
c00103dd:	75 0f                	jne    c00103ee <CPU::detectFeatures()+0x322>
c00103df:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00103e9:	e9 a9 00 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c00103ee:	50                   	push   eax
c00103ef:	50                   	push   eax
c00103f0:	68 c0 1a 02 c0       	push   0xc0021ac0
c00103f5:	55                   	push   ebp
c00103f6:	e8 55 03 ff ff       	call   c0000750 <strcmp>
c00103fb:	83 c4 10             	add    esp,0x10
c00103fe:	85 c0                	test   eax,eax
c0010400:	75 0f                	jne    c0010411 <CPU::detectFeatures()+0x345>
c0010402:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001040c:	e9 86 00 00 00       	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c0010411:	50                   	push   eax
c0010412:	50                   	push   eax
c0010413:	68 cd 1a 02 c0       	push   0xc0021acd
c0010418:	55                   	push   ebp
c0010419:	e8 32 03 ff ff       	call   c0000750 <strcmp>
c001041e:	83 c4 10             	add    esp,0x10
c0010421:	85 c0                	test   eax,eax
c0010423:	75 0c                	jne    c0010431 <CPU::detectFeatures()+0x365>
c0010425:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001042f:	eb 66                	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c0010431:	50                   	push   eax
c0010432:	50                   	push   eax
c0010433:	68 da 1a 02 c0       	push   0xc0021ada
c0010438:	55                   	push   ebp
c0010439:	e8 12 03 ff ff       	call   c0000750 <strcmp>
c001043e:	83 c4 10             	add    esp,0x10
c0010441:	85 c0                	test   eax,eax
c0010443:	75 0c                	jne    c0010451 <CPU::detectFeatures()+0x385>
c0010445:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001044f:	eb 46                	jmp    c0010497 <CPU::detectFeatures()+0x3cb>
c0010451:	57                   	push   edi
c0010452:	57                   	push   edi
c0010453:	68 e7 1a 02 c0       	push   0xc0021ae7
c0010458:	55                   	push   ebp
c0010459:	e8 f2 02 ff ff       	call   c0000750 <strcmp>
c001045e:	83 c4 10             	add    esp,0x10
c0010461:	85 c0                	test   eax,eax
c0010463:	74 e0                	je     c0010445 <CPU::detectFeatures()+0x379>
c0010465:	56                   	push   esi
c0010466:	56                   	push   esi
c0010467:	68 f4 1a 02 c0       	push   0xc0021af4
c001046c:	55                   	push   ebp
c001046d:	e8 de 02 ff ff       	call   c0000750 <strcmp>
c0010472:	83 c4 10             	add    esp,0x10
c0010475:	85 c0                	test   eax,eax
c0010477:	74 cc                	je     c0010445 <CPU::detectFeatures()+0x379>
c0010479:	51                   	push   ecx
c001047a:	51                   	push   ecx
c001047b:	68 01 1b 02 c0       	push   0xc0021b01
c0010480:	55                   	push   ebp
c0010481:	e8 ca 02 ff ff       	call   c0000750 <strcmp>
c0010486:	83 c4 10             	add    esp,0x10
c0010489:	85 c0                	test   eax,eax
c001048b:	74 b8                	je     c0010445 <CPU::detectFeatures()+0x379>
c001048d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010497:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001049c:	0f 86 be 00 00 00    	jbe    c0010560 <CPU::detectFeatures()+0x494>
c00104a2:	83 ec 0c             	sub    esp,0xc
c00104a5:	68 80 00 00 00       	push   0x80
c00104aa:	e8 31 fb ff ff       	call   c000ffe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104af:	83 e0 01             	and    eax,0x1
c00104b2:	c1 e0 06             	shl    eax,0x6
c00104b5:	89 c2                	mov    edx,eax
c00104b7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104bd:	83 e0 bf             	and    eax,0xffffffbf
c00104c0:	09 d0                	or     eax,edx
c00104c2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104c8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00104cf:	e8 0c fb ff ff       	call   c000ffe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104d4:	83 e0 01             	and    eax,0x1
c00104d7:	c1 e0 04             	shl    eax,0x4
c00104da:	89 c2                	mov    edx,eax
c00104dc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104e2:	83 e0 ef             	and    eax,0xffffffef
c00104e5:	09 d0                	or     eax,edx
c00104e7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104ed:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00104f4:	e8 e7 fa ff ff       	call   c000ffe0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104f9:	89 c2                	mov    edx,eax
c00104fb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010501:	c1 e2 07             	shl    edx,0x7
c0010504:	83 e0 7f             	and    eax,0x7f
c0010507:	09 d0                	or     eax,edx
c0010509:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001050f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010516:	e8 f3 fa ff ff       	call   c001000e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001051b:	83 e0 01             	and    eax,0x1
c001051e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010525:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001052b:	83 e0 f7             	and    eax,0xfffffff7
c001052e:	09 d0                	or     eax,edx
c0010530:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010536:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001053d:	e8 cc fa ff ff       	call   c001000e <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	83 e0 01             	and    eax,0x1
c0010548:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001054f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010555:	83 e0 fb             	and    eax,0xfffffffb
c0010558:	09 d0                	or     eax,edx
c001055a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010567:	50                   	push   eax
c0010568:	8d 44 24 28          	lea    eax,[esp+0x28]
c001056c:	50                   	push   eax
c001056d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010571:	57                   	push   edi
c0010572:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010576:	56                   	push   esi
c0010577:	6a 01                	push   0x1
c0010579:	e8 82 f9 ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001057e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010582:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010588:	89 c1                	mov    ecx,eax
c001058a:	83 e2 f0             	and    edx,0xfffffff0
c001058d:	83 e1 0f             	and    ecx,0xf
c0010590:	09 ca                	or     edx,ecx
c0010592:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010598:	89 c2                	mov    edx,eax
c001059a:	c1 ea 04             	shr    edx,0x4
c001059d:	83 e2 0f             	and    edx,0xf
c00105a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105a4:	89 d1                	mov    ecx,edx
c00105a6:	83 c4 20             	add    esp,0x20
c00105a9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00105af:	c1 e1 06             	shl    ecx,0x6
c00105b2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00105b8:	09 ca                	or     edx,ecx
c00105ba:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00105c1:	89 c2                	mov    edx,eax
c00105c3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00105c9:	c1 ea 08             	shr    edx,0x8
c00105cc:	83 e1 3f             	and    ecx,0x3f
c00105cf:	83 e2 0f             	and    edx,0xf
c00105d2:	89 d5                	mov    ebp,edx
c00105d4:	83 e5 03             	and    ebp,0x3
c00105d7:	c1 e5 06             	shl    ebp,0x6
c00105da:	09 e9                	or     ecx,ebp
c00105dc:	89 d5                	mov    ebp,edx
c00105de:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00105e4:	c1 ed 02             	shr    ebp,0x2
c00105e7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00105ed:	83 e1 c0             	and    ecx,0xffffffc0
c00105f0:	09 e9                	or     ecx,ebp
c00105f2:	89 c5                	mov    ebp,eax
c00105f4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00105fa:	c1 ed 08             	shr    ebp,0x8
c00105fd:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010603:	83 e5 30             	and    ebp,0x30
c0010606:	83 e1 cf             	and    ecx,0xffffffcf
c0010609:	09 e9                	or     ecx,ebp
c001060b:	83 fa 06             	cmp    edx,0x6
c001060e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010614:	74 05                	je     c001061b <CPU::detectFeatures()+0x54f>
c0010616:	83 fa 0f             	cmp    edx,0xf
c0010619:	75 64                	jne    c001067f <CPU::detectFeatures()+0x5b3>
c001061b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010621:	89 c1                	mov    ecx,eax
c0010623:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010629:	c1 e9 10             	shr    ecx,0x10
c001062c:	c1 e1 04             	shl    ecx,0x4
c001062f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010633:	0f b6 c9             	movzx  ecx,cl
c0010636:	c1 e1 06             	shl    ecx,0x6
c0010639:	09 e9                	or     ecx,ebp
c001063b:	83 fa 0f             	cmp    edx,0xf
c001063e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010645:	75 38                	jne    c001067f <CPU::detectFeatures()+0x5b3>
c0010647:	c1 e8 14             	shr    eax,0x14
c001064a:	83 c0 0f             	add    eax,0xf
c001064d:	0f b6 c0             	movzx  eax,al
c0010650:	89 c2                	mov    edx,eax
c0010652:	c1 e8 02             	shr    eax,0x2
c0010655:	83 e2 03             	and    edx,0x3
c0010658:	89 d1                	mov    ecx,edx
c001065a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010660:	c1 e1 06             	shl    ecx,0x6
c0010663:	83 e2 3f             	and    edx,0x3f
c0010666:	09 ca                	or     edx,ecx
c0010668:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001066e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010674:	83 e2 c0             	and    edx,0xffffffc0
c0010677:	09 d0                	or     eax,edx
c0010679:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001067f:	83 ec 0c             	sub    esp,0xc
c0010682:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010688:	83 c8 07             	or     eax,0x7
c001068b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010691:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010695:	50                   	push   eax
c0010696:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001069a:	55                   	push   ebp
c001069b:	57                   	push   edi
c001069c:	56                   	push   esi
c001069d:	68 00 00 00 80       	push   0x80000000
c00106a2:	e8 59 f8 ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106a7:	83 c4 20             	add    esp,0x20
c00106aa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00106b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00106b6:	76 1e                	jbe    c00106d6 <CPU::detectFeatures()+0x60a>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	50                   	push   eax
c00106bc:	55                   	push   ebp
c00106bd:	57                   	push   edi
c00106be:	56                   	push   esi
c00106bf:	68 01 00 00 80       	push   0x80000001
c00106c4:	e8 37 f8 ff ff       	call   c000ff00 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106c9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00106d3:	83 c4 20             	add    esp,0x20
c00106d6:	52                   	push   edx
c00106d7:	52                   	push   edx
c00106d8:	68 0d 1b 02 c0       	push   0xc0021b0d
c00106dd:	53                   	push   ebx
c00106de:	e8 99 c0 ff ff       	call   c000c77c <Device::setName(char const*)>
c00106e3:	83 c4 10             	add    esp,0x10
c00106e6:	eb 69                	jmp    c0010751 <CPU::detectFeatures()+0x685>
c00106e8:	50                   	push   eax
c00106e9:	50                   	push   eax
c00106ea:	68 72 1a 02 c0       	push   0xc0021a72
c00106ef:	55                   	push   ebp
c00106f0:	e8 4b ff fe ff       	call   c0000640 <strcpy>
c00106f5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106ff:	e8 bf fa fe ff       	call   c00001c3 <is486>
c0010704:	83 c4 10             	add    esp,0x10
c0010707:	85 c0                	test   eax,eax
c0010709:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001070f:	74 1f                	je     c0010730 <CPU::detectFeatures()+0x664>
c0010711:	83 c8 07             	or     eax,0x7
c0010714:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001071a:	0f 20 c0             	mov    eax,cr0
c001071d:	83 e0 14             	and    eax,0x14
c0010720:	83 f8 04             	cmp    eax,0x4
c0010723:	75 10                	jne    c0010735 <CPU::detectFeatures()+0x669>
c0010725:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001072b:	83 e0 fd             	and    eax,0xfffffffd
c001072e:	eb 1b                	jmp    c001074b <CPU::detectFeatures()+0x67f>
c0010730:	83 e0 f8             	and    eax,0xfffffff8
c0010733:	eb df                	jmp    c0010714 <CPU::detectFeatures()+0x648>
c0010735:	e8 64 fa fe ff       	call   c000019e <hasLegacyFPU>
c001073a:	83 e0 01             	and    eax,0x1
c001073d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010740:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010746:	83 e0 fd             	and    eax,0xfffffffd
c0010749:	09 d0                	or     eax,edx
c001074b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010751:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010758:	74 17                	je     c0010771 <CPU::detectFeatures()+0x6a5>
c001075a:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010760:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010766:	83 c8 10             	or     eax,0x10
c0010769:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001076f:	eb 20                	jmp    c0010791 <CPU::detectFeatures()+0x6c5>
c0010771:	e8 28 fa fe ff       	call   c000019e <hasLegacyFPU>
c0010776:	83 e0 01             	and    eax,0x1
c0010779:	8d 14 00             	lea    edx,[eax+eax*1]
c001077c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010782:	83 e0 fd             	and    eax,0xfffffffd
c0010785:	09 d0                	or     eax,edx
c0010787:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001078d:	a8 02                	test   al,0x2
c001078f:	75 c9                	jne    c001075a <CPU::detectFeatures()+0x68e>
c0010791:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010798:	83 c4 2c             	add    esp,0x2c
c001079b:	5b                   	pop    ebx
c001079c:	5e                   	pop    esi
c001079d:	5f                   	pop    edi
c001079e:	5d                   	pop    ebp
c001079f:	c3                   	ret    

c00107a0 <CPU::setupSMEP()>:
c00107a0:	0f 20 e0             	mov    eax,cr4
c00107a3:	0d 00 00 10 00       	or     eax,0x100000
c00107a8:	0f 22 e0             	mov    cr4,eax
c00107ab:	c3                   	ret    

c00107ac <CPU::setupUMIP()>:
c00107ac:	0f 20 e0             	mov    eax,cr4
c00107af:	80 cc 08             	or     ah,0x8
c00107b2:	0f 22 e0             	mov    cr4,eax
c00107b5:	c3                   	ret    

c00107b6 <CPU::setupTSC()>:
c00107b6:	0f 20 e0             	mov    eax,cr4
c00107b9:	83 c8 04             	or     eax,0x4
c00107bc:	0f 22 e0             	mov    cr4,eax
c00107bf:	c3                   	ret    

c00107c0 <CPU::setupLargePages()>:
c00107c0:	0f 20 e0             	mov    eax,cr4
c00107c3:	83 c8 10             	or     eax,0x10
c00107c6:	0f 22 e0             	mov    cr4,eax
c00107c9:	c3                   	ret    

c00107ca <CPU::setupPAT()>:
c00107ca:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00107cf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00107d6:	74 2c                	je     c0010804 <CPU::setupPAT()+0x3a>
c00107d8:	53                   	push   ebx
c00107d9:	83 ec 10             	sub    esp,0x10
c00107dc:	68 77 02 00 00       	push   0x277
c00107e1:	50                   	push   eax
c00107e2:	e8 d9 68 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00107e7:	83 e2 f8             	and    edx,0xfffffff8
c00107ea:	83 ca 01             	or     edx,0x1
c00107ed:	52                   	push   edx
c00107ee:	50                   	push   eax
c00107ef:	68 77 02 00 00       	push   0x277
c00107f4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00107fa:	e8 ed 68 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c00107ff:	83 c4 28             	add    esp,0x28
c0010802:	5b                   	pop    ebx
c0010803:	c3                   	ret    
c0010804:	c3                   	ret    
c0010805:	90                   	nop

c0010806 <CPU::setupMTRR()>:
c0010806:	c3                   	ret    
c0010807:	90                   	nop

c0010808 <CPU::setupGlobalPages()>:
c0010808:	0f 20 e0             	mov    eax,cr4
c001080b:	0c 80                	or     al,0x80
c001080d:	0f 22 e0             	mov    cr4,eax
c0010810:	c3                   	ret    
c0010811:	90                   	nop

c0010812 <CPU::allowUsermodeDataAccess()>:
c0010812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010816:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001081d:	74 03                	je     c0010822 <CPU::allowUsermodeDataAccess()+0x10>
c001081f:	0f 01 cb             	stac   
c0010822:	c3                   	ret    
c0010823:	90                   	nop

c0010824 <CPU::prohibitUsermodeDataAccess()>:
c0010824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010828:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001082f:	74 03                	je     c0010834 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010831:	0f 01 ca             	clac   
c0010834:	c3                   	ret    
c0010835:	90                   	nop

c0010836 <CPU::setupSMAP()>:
c0010836:	0f 20 e0             	mov    eax,cr4
c0010839:	0d 00 00 20 00       	or     eax,0x200000
c001083e:	0f 22 e0             	mov    cr4,eax
c0010841:	eb e1                	jmp    c0010824 <CPU::prohibitUsermodeDataAccess()>
c0010843:	90                   	nop

c0010844 <CPU::setupFeatures()>:
c0010844:	53                   	push   ebx
c0010845:	83 ec 08             	sub    esp,0x8
c0010848:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001084c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010853:	74 18                	je     c001086d <CPU::setupFeatures()+0x29>
c0010855:	83 ec 0c             	sub    esp,0xc
c0010858:	68 19 1b 02 c0       	push   0xc0021b19
c001085d:	e8 e3 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010865:	e8 42 ff ff ff       	call   c00107ac <CPU::setupUMIP()>
c001086a:	83 c4 10             	add    esp,0x10
c001086d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010874:	74 18                	je     c001088e <CPU::setupFeatures()+0x4a>
c0010876:	83 ec 0c             	sub    esp,0xc
c0010879:	68 23 1b 02 c0       	push   0xc0021b23
c001087e:	e8 c2 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010886:	e8 2b ff ff ff       	call   c00107b6 <CPU::setupTSC()>
c001088b:	83 c4 10             	add    esp,0x10
c001088e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010895:	74 18                	je     c00108af <CPU::setupFeatures()+0x6b>
c0010897:	83 ec 0c             	sub    esp,0xc
c001089a:	68 2c 1b 02 c0       	push   0xc0021b2c
c001089f:	e8 a1 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108a7:	e8 14 ff ff ff       	call   c00107c0 <CPU::setupLargePages()>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00108b6:	74 18                	je     c00108d0 <CPU::setupFeatures()+0x8c>
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	68 35 1b 02 c0       	push   0xc0021b35
c00108c0:	e8 80 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108c8:	e8 3b ff ff ff       	call   c0010808 <CPU::setupGlobalPages()>
c00108cd:	83 c4 10             	add    esp,0x10
c00108d0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00108d7:	74 18                	je     c00108f1 <CPU::setupFeatures()+0xad>
c00108d9:	83 ec 0c             	sub    esp,0xc
c00108dc:	68 47 1b 02 c0       	push   0xc0021b47
c00108e1:	e8 5f a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108e9:	e8 dc fe ff ff       	call   c00107ca <CPU::setupPAT()>
c00108ee:	83 c4 10             	add    esp,0x10
c00108f1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00108f8:	74 11                	je     c001090b <CPU::setupFeatures()+0xc7>
c00108fa:	c7 44 24 10 50 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b50
c0010902:	83 c4 08             	add    esp,0x8
c0010905:	5b                   	pop    ebx
c0010906:	e9 3a a0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c001090b:	83 c4 08             	add    esp,0x8
c001090e:	5b                   	pop    ebx
c001090f:	c3                   	ret    

c0010910 <CPU::open(int, int, void*)>:
c0010910:	55                   	push   ebp
c0010911:	57                   	push   edi
c0010912:	56                   	push   esi
c0010913:	53                   	push   ebx
c0010914:	83 ec 18             	sub    esp,0x18
c0010917:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001091b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001091f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010923:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010929:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001092f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010935:	50                   	push   eax
c0010936:	e8 83 6a ff ff       	call   c00073be <GDT::setup()>
c001093b:	83 c4 0c             	add    esp,0xc
c001093e:	6a 00                	push   0x0
c0010940:	68 ef be ad de       	push   0xdeadbeef
c0010945:	55                   	push   ebp
c0010946:	e8 3d 86 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c001094b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001094e:	e8 15 86 ff ff       	call   c0008f68 <TSS::flush()>
c0010953:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010959:	89 04 24             	mov    DWORD PTR [esp],eax
c001095c:	e8 c1 6c ff ff       	call   c0007622 <IDT::setup()>
c0010961:	b8 00 04 00 00       	mov    eax,0x400
c0010966:	0f 23 f8             	mov    db7,eax
c0010969:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010973:	e8 47 74 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010978:	83 c4 10             	add    esp,0x10
c001097b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010981:	85 f6                	test   esi,esi
c0010983:	89 38                	mov    DWORD PTR [eax],edi
c0010985:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001098b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001098e:	74 10                	je     c00109a0 <CPU::open(int, int, void*)+0x90>
c0010990:	50                   	push   eax
c0010991:	50                   	push   eax
c0010992:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010998:	56                   	push   esi
c0010999:	e8 10 8f ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c001099e:	eb 0d                	jmp    c00109ad <CPU::open(int, int, void*)+0x9d>
c00109a0:	83 ec 0c             	sub    esp,0xc
c00109a3:	68 5a 1b 02 c0       	push   0xc0021b5a
c00109a8:	e8 50 08 00 00       	call   c00111fd <KePanic(char const*)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	68 68 1b 02 c0       	push   0xc0021b68
c00109b8:	e8 69 01 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c00109bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109c0:	e8 07 f7 ff ff       	call   c00100cc <CPU::detectFeatures()>
c00109c5:	c7 04 24 8b 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b8b
c00109cc:	e8 55 01 00 00       	call   c0010b26 <KeSetBootMessage(char const*)>
c00109d1:	e8 bb 71 00 00       	call   c0017b91 <HalInitialise()>
c00109d6:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c00109db:	83 e0 10             	and    eax,0x10
c00109de:	83 f8 01             	cmp    eax,0x1
c00109e1:	19 c0                	sbb    eax,eax
c00109e3:	83 e0 46             	and    eax,0x46
c00109e6:	83 c0 1e             	add    eax,0x1e
c00109e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ec:	e8 28 d6 ff ff       	call   c000e019 <setupTimer(int)>
c00109f1:	83 c4 10             	add    esp,0x10
c00109f4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00109fa:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a01:	74 0c                	je     c0010a0f <CPU::open(int, int, void*)+0xff>
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	53                   	push   ebx
c0010a07:	e8 38 fe ff ff       	call   c0010844 <CPU::setupFeatures()>
c0010a0c:	83 c4 10             	add    esp,0x10
c0010a0f:	83 c4 0c             	add    esp,0xc
c0010a12:	31 c0                	xor    eax,eax
c0010a14:	5b                   	pop    ebx
c0010a15:	5e                   	pop    esi
c0010a16:	5f                   	pop    edi
c0010a17:	5d                   	pop    ebp
c0010a18:	c3                   	ret    

c0010a19 <KeInitialiseAtexit()>:
c0010a19:	83 ec 10             	sub    esp,0x10
c0010a1c:	c7 05 00 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a00,0x0
c0010a26:	68 00 01 00 00       	push   0x100
c0010a2b:	6a 00                	push   0x0
c0010a2d:	68 20 9b 02 c0       	push   0xc0029b20
c0010a32:	e8 b9 fa fe ff       	call   c00004f0 <memset>
c0010a37:	83 c4 1c             	add    esp,0x1c
c0010a3a:	c3                   	ret    

c0010a3b <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a3b:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0010a40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a44:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c0010a4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a4f:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c0010a56:	40                   	inc    eax
c0010a57:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c0010a5c:	83 f8 3f             	cmp    eax,0x3f
c0010a5f:	7e 0d                	jle    c0010a6e <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a61:	c7 44 24 04 cc 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bcc
c0010a69:	e9 8f 07 00 00       	jmp    c00111fd <KePanic(char const*)>
c0010a6e:	c3                   	ret    

c0010a6f <KeExecuteAtexit()>:
c0010a6f:	53                   	push   ebx
c0010a70:	31 db                	xor    ebx,ebx
c0010a72:	83 ec 08             	sub    esp,0x8
c0010a75:	39 1d 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,ebx
c0010a7b:	7e 28                	jle    c0010aa5 <KeExecuteAtexit()+0x36>
c0010a7d:	8b 04 9d 20 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd64e0]
c0010a84:	85 c0                	test   eax,eax
c0010a86:	74 1a                	je     c0010aa2 <KeExecuteAtexit()+0x33>
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	ff 34 9d 20 9a 02 c0 	push   DWORD PTR [ebx*4-0x3ffd65e0]
c0010a92:	ff d0                	call   eax
c0010a94:	c7 04 9d 20 9b 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd64e0],0x0
c0010a9f:	83 c4 10             	add    esp,0x10
c0010aa2:	43                   	inc    ebx
c0010aa3:	eb d0                	jmp    c0010a75 <KeExecuteAtexit()+0x6>
c0010aa5:	83 c4 08             	add    esp,0x8
c0010aa8:	5b                   	pop    ebx
c0010aa9:	c3                   	ret    

c0010aaa <KeDisplaySplashScreen()>:
c0010aaa:	55                   	push   ebp
c0010aab:	bd 05 00 00 00       	mov    ebp,0x5
c0010ab0:	57                   	push   edi
c0010ab1:	bf 0a 00 00 00       	mov    edi,0xa
c0010ab6:	56                   	push   esi
c0010ab7:	31 f6                	xor    esi,esi
c0010ab9:	53                   	push   ebx
c0010aba:	31 db                	xor    ebx,ebx
c0010abc:	83 ec 0c             	sub    esp,0xc
c0010abf:	0f b6 96 a0 2f 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd060]
c0010ac6:	89 d0                	mov    eax,edx
c0010ac8:	85 d2                	test   edx,edx
c0010aca:	74 52                	je     c0010b1e <KeDisplaySplashScreen()+0x74>
c0010acc:	80 bb d6 2f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd02a],0xdb
c0010ad3:	75 13                	jne    c0010ae8 <KeDisplaySplashScreen()+0x3e>
c0010ad5:	0f b6 8b d5 2f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd02b]
c0010adc:	83 e1 fe             	and    ecx,0xfffffffe
c0010adf:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ae5:	75 01                	jne    c0010ae8 <KeDisplaySplashScreen()+0x3e>
c0010ae7:	47                   	inc    edi
c0010ae8:	83 fa 0d             	cmp    edx,0xd
c0010aeb:	74 28                	je     c0010b15 <KeDisplaySplashScreen()+0x6b>
c0010aed:	83 fa 0a             	cmp    edx,0xa
c0010af0:	75 0a                	jne    c0010afc <KeDisplaySplashScreen()+0x52>
c0010af2:	45                   	inc    ebp
c0010af3:	bf 0a 00 00 00       	mov    edi,0xa
c0010af8:	31 db                	xor    ebx,ebx
c0010afa:	eb 19                	jmp    c0010b15 <KeDisplaySplashScreen()+0x6b>
c0010afc:	83 ec 0c             	sub    esp,0xc
c0010aff:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b02:	55                   	push   ebp
c0010b03:	0f be c0             	movsx  eax,al
c0010b06:	52                   	push   edx
c0010b07:	43                   	inc    ebx
c0010b08:	6a 00                	push   0x0
c0010b0a:	6a 0e                	push   0xe
c0010b0c:	50                   	push   eax
c0010b0d:	e8 fe 7c 00 00       	call   c0018810 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b12:	83 c4 20             	add    esp,0x20
c0010b15:	46                   	inc    esi
c0010b16:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b1c:	75 a1                	jne    c0010abf <KeDisplaySplashScreen()+0x15>
c0010b1e:	83 c4 0c             	add    esp,0xc
c0010b21:	5b                   	pop    ebx
c0010b22:	5e                   	pop    esi
c0010b23:	5f                   	pop    edi
c0010b24:	5d                   	pop    ebp
c0010b25:	c3                   	ret    

c0010b26 <KeSetBootMessage(char const*)>:
c0010b26:	57                   	push   edi
c0010b27:	56                   	push   esi
c0010b28:	53                   	push   ebx
c0010b29:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b2f:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b36:	68 9e 00 00 00       	push   0x9e
c0010b3b:	6a 00                	push   0x0
c0010b3d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b41:	56                   	push   esi
c0010b42:	e8 a9 f9 fe ff       	call   c00004f0 <memset>
c0010b47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b4a:	e8 21 fa fe ff       	call   c0000570 <strlen>
c0010b4f:	ba 50 00 00 00       	mov    edx,0x50
c0010b54:	83 c4 10             	add    esp,0x10
c0010b57:	29 c2                	sub    edx,eax
c0010b59:	31 c9                	xor    ecx,ecx
c0010b5b:	83 e2 fe             	and    edx,0xfffffffe
c0010b5e:	01 f2                	add    edx,esi
c0010b60:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010b65:	84 c0                	test   al,al
c0010b67:	74 0a                	je     c0010b73 <KeSetBootMessage(char const*)+0x4d>
c0010b69:	80 cc 0f             	or     ah,0xf
c0010b6c:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010b70:	41                   	inc    ecx
c0010b71:	eb ed                	jmp    c0010b60 <KeSetBootMessage(char const*)+0x3a>
c0010b73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010b78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010b7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010b85:	5b                   	pop    ebx
c0010b86:	5e                   	pop    esi
c0010b87:	5f                   	pop    edi
c0010b88:	c3                   	ret    
c0010b89:	66 90                	xchg   ax,ax
c0010b8b:	90                   	nop

c0010b8c <Krnl::handlePowerButton()>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	e8 c4 06 00 00       	call   c0011258 <KeHandlePowerButton()>
c0010b94:	90                   	nop
c0010b95:	83 c4 0c             	add    esp,0xc
c0010b98:	c3                   	ret    
c0010b99:	8d 76 00             	lea    esi,[esi+0x0]

c0010b9c <Krnl::handleSleepButton()>:
c0010b9c:	83 ec 0c             	sub    esp,0xc
c0010b9f:	e8 e9 06 00 00       	call   c001128d <KeHandleSleepButton()>
c0010ba4:	90                   	nop
c0010ba5:	83 c4 0c             	add    esp,0xc
c0010ba8:	c3                   	ret    
c0010ba9:	90                   	nop

c0010baa <EnvVarContainer::getEnv(char const*)>:
c0010baa:	57                   	push   edi
c0010bab:	56                   	push   esi
c0010bac:	53                   	push   ebx
c0010bad:	31 db                	xor    ebx,ebx
c0010baf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bb3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010bb5:	7e 2b                	jle    c0010be2 <EnvVarContainer::getEnv(char const*)+0x38>
c0010bb7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010bbe:	50                   	push   eax
c0010bbf:	50                   	push   eax
c0010bc0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010bc3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010bc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010bca:	e8 81 fb fe ff       	call   c0000750 <strcmp>
c0010bcf:	83 c4 10             	add    esp,0x10
c0010bd2:	85 c0                	test   eax,eax
c0010bd4:	75 09                	jne    c0010bdf <EnvVarContainer::getEnv(char const*)+0x35>
c0010bd6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010bd9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010bdd:	eb 05                	jmp    c0010be4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010bdf:	43                   	inc    ebx
c0010be0:	eb d1                	jmp    c0010bb3 <EnvVarContainer::getEnv(char const*)+0x9>
c0010be2:	31 c0                	xor    eax,eax
c0010be4:	5b                   	pop    ebx
c0010be5:	5e                   	pop    esi
c0010be6:	5f                   	pop    edi
c0010be7:	c3                   	ret    

c0010be8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010be8:	55                   	push   ebp
c0010be9:	57                   	push   edi
c0010bea:	56                   	push   esi
c0010beb:	53                   	push   ebx
c0010bec:	83 ec 28             	sub    esp,0x28
c0010bef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010bf3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010bf7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010bfb:	56                   	push   esi
c0010bfc:	e8 6f f9 fe ff       	call   c0000570 <strlen>
c0010c01:	40                   	inc    eax
c0010c02:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c05:	e8 ac 6e ff ff       	call   c0007ab6 <malloc>
c0010c0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c11:	e8 5a f9 fe ff       	call   c0000570 <strlen>
c0010c16:	40                   	inc    eax
c0010c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c1a:	e8 97 6e ff ff       	call   c0007ab6 <malloc>
c0010c1f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c26:	e8 45 f9 fe ff       	call   c0000570 <strlen>
c0010c2b:	83 c4 0c             	add    esp,0xc
c0010c2e:	40                   	inc    eax
c0010c2f:	50                   	push   eax
c0010c30:	6a 00                	push   0x0
c0010c32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010c36:	e8 b5 f8 fe ff       	call   c00004f0 <memset>
c0010c3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c3e:	e8 2d f9 fe ff       	call   c0000570 <strlen>
c0010c43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c47:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c4f:	89 de                	mov    esi,ebx
c0010c51:	e8 1a f9 fe ff       	call   c0000570 <strlen>
c0010c56:	83 c4 0c             	add    esp,0xc
c0010c59:	40                   	inc    eax
c0010c5a:	50                   	push   eax
c0010c5b:	6a 00                	push   0x0
c0010c5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c61:	e8 8a f8 fe ff       	call   c00004f0 <memset>
c0010c66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c69:	e8 02 f9 fe ff       	call   c0000570 <strlen>
c0010c6e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c72:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c7a:	40                   	inc    eax
c0010c7b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010c7e:	c1 e0 03             	shl    eax,0x3
c0010c81:	5a                   	pop    edx
c0010c82:	59                   	pop    ecx
c0010c83:	50                   	push   eax
c0010c84:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010c87:	e8 16 6e ff ff       	call   c0007aa2 <realloc>
c0010c8c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010c90:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010c93:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010c96:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010c9a:	b9 08 00 00 00       	mov    ecx,0x8
c0010c9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ca1:	83 c4 2c             	add    esp,0x2c
c0010ca4:	5b                   	pop    ebx
c0010ca5:	5e                   	pop    esi
c0010ca6:	5f                   	pop    edi
c0010ca7:	5d                   	pop    ebp
c0010ca8:	c3                   	ret    
c0010ca9:	90                   	nop

c0010caa <EnvVarContainer::deleteEnv(char const*)>:
c0010caa:	c3                   	ret    
c0010cab:	90                   	nop

c0010cac <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010cac:	55                   	push   ebp
c0010cad:	57                   	push   edi
c0010cae:	56                   	push   esi
c0010caf:	53                   	push   ebx
c0010cb0:	81 ec 38 01 00 00    	sub    esp,0x138
c0010cb6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010cbd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010cc4:	68 14 01 00 00       	push   0x114
c0010cc9:	e8 e8 6d ff ff       	call   c0007ab6 <malloc>
c0010cce:	83 c4 0c             	add    esp,0xc
c0010cd1:	89 c3                	mov    ebx,eax
c0010cd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010cd6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010cdd:	50                   	push   eax
c0010cde:	e8 07 aa ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0010ce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce6:	e8 7f ad ff ff       	call   c000ba6a <File::exists()>
c0010ceb:	83 c4 10             	add    esp,0x10
c0010cee:	84 c0                	test   al,al
c0010cf0:	75 31                	jne    c0010d23 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010cf2:	50                   	push   eax
c0010cf3:	50                   	push   eax
c0010cf4:	6a 12                	push   0x12
c0010cf6:	53                   	push   ebx
c0010cf7:	e8 aa aa ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0010cfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cfe:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d01:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d04:	e8 67 f8 fe ff       	call   c0000570 <strlen>
c0010d09:	5a                   	pop    edx
c0010d0a:	31 d2                	xor    edx,edx
c0010d0c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d10:	51                   	push   ecx
c0010d11:	56                   	push   esi
c0010d12:	52                   	push   edx
c0010d13:	50                   	push   eax
c0010d14:	53                   	push   ebx
c0010d15:	ff d7                	call   edi
c0010d17:	83 c4 14             	add    esp,0x14
c0010d1a:	53                   	push   ebx
c0010d1b:	e8 e4 aa ff ff       	call   c000b804 <File::close()>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	56                   	push   esi
c0010d24:	31 f6                	xor    esi,esi
c0010d26:	68 00 01 00 00       	push   0x100
c0010d2b:	6a 00                	push   0x0
c0010d2d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d31:	50                   	push   eax
c0010d32:	e8 b9 f7 fe ff       	call   c00004f0 <memset>
c0010d37:	5f                   	pop    edi
c0010d38:	58                   	pop    eax
c0010d39:	6a 01                	push   0x1
c0010d3b:	53                   	push   ebx
c0010d3c:	e8 65 aa ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d4c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d54:	83 ec 0c             	sub    esp,0xc
c0010d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d59:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d5d:	51                   	push   ecx
c0010d5e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010d62:	52                   	push   edx
c0010d63:	6a 00                	push   0x0
c0010d65:	6a 01                	push   0x1
c0010d67:	53                   	push   ebx
c0010d68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d6b:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010d70:	83 c4 20             	add    esp,0x20
c0010d73:	89 c2                	mov    edx,eax
c0010d75:	85 c0                	test   eax,eax
c0010d77:	0f 84 36 01 00 00    	je     c0010eb3 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010d7d:	83 f8 0d             	cmp    eax,0xd
c0010d80:	0f 84 22 01 00 00    	je     c0010ea8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010d86:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d8b:	0f 84 f0 00 00 00    	je     c0010e81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010d91:	83 f8 0a             	cmp    eax,0xa
c0010d94:	74 13                	je     c0010da9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d96:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010d9b:	74 0c                	je     c0010da9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d9d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010da3:	0f 8e f6 00 00 00    	jle    c0010e9f <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010da9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dad:	83 ec 0c             	sub    esp,0xc
c0010db0:	8d 78 01             	lea    edi,[eax+0x1]
c0010db3:	57                   	push   edi
c0010db4:	e8 fd 6c ff ff       	call   c0007ab6 <malloc>
c0010db9:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010dbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010dc1:	8d 56 04             	lea    edx,[esi+0x4]
c0010dc4:	89 14 24             	mov    DWORD PTR [esp],edx
c0010dc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010dcb:	e8 e6 6c ff ff       	call   c0007ab6 <malloc>
c0010dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010dd4:	83 c4 0c             	add    esp,0xc
c0010dd7:	57                   	push   edi
c0010dd8:	6a 00                	push   0x0
c0010dda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010dde:	e8 0d f7 fe ff       	call   c00004f0 <memset>
c0010de3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010de7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010deb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010def:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df1:	83 c4 0c             	add    esp,0xc
c0010df4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010df8:	52                   	push   edx
c0010df9:	6a 00                	push   0x0
c0010dfb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010dff:	e8 ec f6 fe ff       	call   c00004f0 <memset>
c0010e04:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e08:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010e0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e0f:	e8 5c f7 fe ff       	call   c0000570 <strlen>
c0010e14:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e18:	89 c1                	mov    ecx,eax
c0010e1a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e1c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e1f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e22:	40                   	inc    eax
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e29:	85 d2                	test   edx,edx
c0010e2b:	75 0c                	jne    c0010e39 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e2d:	83 ec 0c             	sub    esp,0xc
c0010e30:	6a 08                	push   0x8
c0010e32:	e8 7f 6c ff ff       	call   c0007ab6 <malloc>
c0010e37:	eb 0c                	jmp    c0010e45 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e39:	c1 e0 03             	shl    eax,0x3
c0010e3c:	51                   	push   ecx
c0010e3d:	51                   	push   ecx
c0010e3e:	50                   	push   eax
c0010e3f:	52                   	push   edx
c0010e40:	e8 5d 6c ff ff       	call   c0007aa2 <realloc>
c0010e45:	83 c4 10             	add    esp,0x10
c0010e48:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e4b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e4e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010e51:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e55:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e59:	b9 08 00 00 00       	mov    ecx,0x8
c0010e5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e60:	31 f6                	xor    esi,esi
c0010e62:	50                   	push   eax
c0010e63:	68 00 01 00 00       	push   0x100
c0010e68:	6a 00                	push   0x0
c0010e6a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e6e:	50                   	push   eax
c0010e6f:	e8 7c f6 fe ff       	call   c00004f0 <memset>
c0010e74:	83 c4 10             	add    esp,0x10
c0010e77:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e7f:	eb 27                	jmp    c0010ea8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e81:	83 f8 3d             	cmp    eax,0x3d
c0010e84:	74 1e                	je     c0010ea4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010e86:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e8c:	7f 07                	jg     c0010e95 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e8e:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010e92:	46                   	inc    esi
c0010e93:	eb 13                	jmp    c0010ea8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e95:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010e9d:	eb 09                	jmp    c0010ea8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e9f:	83 f8 3d             	cmp    eax,0x3d
c0010ea2:	75 ea                	jne    c0010e8e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010ea4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010ea8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010ead:	0f 85 99 fe ff ff    	jne    c0010d4c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010eb3:	83 ec 0c             	sub    esp,0xc
c0010eb6:	53                   	push   ebx
c0010eb7:	e8 48 a9 ff ff       	call   c000b804 <File::close()>
c0010ebc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ebe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ec1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ec4:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010eca:	5b                   	pop    ebx
c0010ecb:	5e                   	pop    esi
c0010ecc:	5f                   	pop    edi
c0010ecd:	5d                   	pop    ebp
c0010ece:	c3                   	ret    
c0010ecf:	90                   	nop

c0010ed0 <EnvVarContainer::__loadSystem()>:
c0010ed0:	83 ec 10             	sub    esp,0x10
c0010ed3:	68 00 31 02 c0       	push   0xc0023100
c0010ed8:	68 e5 1b 02 c0       	push   0xc0021be5
c0010edd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee1:	e8 c6 fd ff ff       	call   c0010cac <EnvVarContainer::loadFrom(char const*, char const*)>
c0010ee6:	83 c4 1c             	add    esp,0x1c
c0010ee9:	c3                   	ret    

c0010eea <EnvVarContainer::__loadUser()>:
c0010eea:	c3                   	ret    
c0010eeb:	90                   	nop

c0010eec <EnvVarContainer::EnvVarContainer(Process*)>:
c0010eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ef0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010efa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010efe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f0c:	90                   	nop
c0010f0d:	c3                   	ret    

c0010f0e <EnvVarContainer::~EnvVarContainer()>:
c0010f0e:	83 ec 0c             	sub    esp,0xc
c0010f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f18:	85 c0                	test   eax,eax
c0010f1a:	74 1d                	je     c0010f39 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f22:	85 c0                	test   eax,eax
c0010f24:	74 13                	je     c0010f39 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f2d:	83 ec 0c             	sub    esp,0xc
c0010f30:	50                   	push   eax
c0010f31:	e8 90 6b ff ff       	call   c0007ac6 <free>
c0010f36:	83 c4 10             	add    esp,0x10
c0010f39:	90                   	nop
c0010f3a:	83 c4 0c             	add    esp,0xc
c0010f3d:	c3                   	ret    

c0010f3e <KeGetEnv(Process*, char const*)>:
c0010f3e:	53                   	push   ebx
c0010f3f:	83 ec 08             	sub    esp,0x8
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f4a:	39 05 90 a4 02 c0    	cmp    DWORD PTR ds:0xc002a490,eax
c0010f50:	74 04                	je     c0010f56 <KeGetEnv(Process*, char const*)+0x18>
c0010f52:	85 c0                	test   eax,eax
c0010f54:	75 0b                	jne    c0010f61 <KeGetEnv(Process*, char const*)+0x23>
c0010f56:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010f5b:	85 c0                	test   eax,eax
c0010f5d:	75 19                	jne    c0010f78 <KeGetEnv(Process*, char const*)+0x3a>
c0010f5f:	eb 27                	jmp    c0010f88 <KeGetEnv(Process*, char const*)+0x4a>
c0010f61:	52                   	push   edx
c0010f62:	52                   	push   edx
c0010f63:	53                   	push   ebx
c0010f64:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010f6a:	e8 3b fc ff ff       	call   c0010baa <EnvVarContainer::getEnv(char const*)>
c0010f6f:	83 c4 10             	add    esp,0x10
c0010f72:	85 c0                	test   eax,eax
c0010f74:	75 28                	jne    c0010f9e <KeGetEnv(Process*, char const*)+0x60>
c0010f76:	eb de                	jmp    c0010f56 <KeGetEnv(Process*, char const*)+0x18>
c0010f78:	52                   	push   edx
c0010f79:	52                   	push   edx
c0010f7a:	53                   	push   ebx
c0010f7b:	50                   	push   eax
c0010f7c:	e8 29 fc ff ff       	call   c0010baa <EnvVarContainer::getEnv(char const*)>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	85 c0                	test   eax,eax
c0010f86:	75 16                	jne    c0010f9e <KeGetEnv(Process*, char const*)+0x60>
c0010f88:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f8c:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c0010f91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010f95:	83 c4 08             	add    esp,0x8
c0010f98:	5b                   	pop    ebx
c0010f99:	e9 0c fc ff ff       	jmp    c0010baa <EnvVarContainer::getEnv(char const*)>
c0010f9e:	83 c4 08             	add    esp,0x8
c0010fa1:	5b                   	pop    ebx
c0010fa2:	c3                   	ret    

c0010fa3 <KeSetEnvSystem(char const*, char const*)>:
c0010fa3:	83 ec 10             	sub    esp,0x10
c0010fa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010faa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fae:	ff 35 24 9c 02 c0    	push   DWORD PTR ds:0xc0029c24
c0010fb4:	e8 2f fc ff ff       	call   c0010be8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fb9:	83 c4 1c             	add    esp,0x1c
c0010fbc:	c3                   	ret    

c0010fbd <KeSetEnvUser(char const*, char const*)>:
c0010fbd:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010fc2:	85 c0                	test   eax,eax
c0010fc4:	74 15                	je     c0010fdb <KeSetEnvUser(char const*, char const*)+0x1e>
c0010fc6:	83 ec 10             	sub    esp,0x10
c0010fc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fd1:	50                   	push   eax
c0010fd2:	e8 11 fc ff ff       	call   c0010be8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fd7:	83 c4 1c             	add    esp,0x1c
c0010fda:	c3                   	ret    
c0010fdb:	c3                   	ret    

c0010fdc <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe0:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010fe6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fea:	e9 f9 fb ff ff       	jmp    c0010be8 <EnvVarContainer::setEnv(char const*, char const*)>

c0010fef <KeDeleteEnvSystem(char const*)>:
c0010fef:	c3                   	ret    

c0010ff0 <KeDeleteEnvUser(char const*)>:
c0010ff0:	c3                   	ret    

c0010ff1 <KeDeleteEnvProcess(Process*, char const*)>:
c0010ff1:	c3                   	ret    

c0010ff2 <KeNewProcessEnv(Process*)>:
c0010ff2:	83 ec 28             	sub    esp,0x28
c0010ff5:	6a 0c                	push   0xc
c0010ff7:	e8 ba 6a ff ff       	call   c0007ab6 <malloc>
c0010ffc:	5a                   	pop    edx
c0010ffd:	59                   	pop    ecx
c0010ffe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011002:	50                   	push   eax
c0011003:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011007:	e8 e0 fe ff ff       	call   c0010eec <EnvVarContainer::EnvVarContainer(Process*)>
c001100c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011010:	83 c4 2c             	add    esp,0x2c
c0011013:	c3                   	ret    

c0011014 <KeCopyProcessEnv(Process*, Process*)>:
c0011014:	57                   	push   edi
c0011015:	56                   	push   esi
c0011016:	53                   	push   ebx
c0011017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101b:	83 ec 0c             	sub    esp,0xc
c001101e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011024:	6a 0c                	push   0xc
c0011026:	e8 8b 6a ff ff       	call   c0007ab6 <malloc>
c001102b:	89 c3                	mov    ebx,eax
c001102d:	58                   	pop    eax
c001102e:	5a                   	pop    edx
c001102f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011033:	53                   	push   ebx
c0011034:	e8 b3 fe ff ff       	call   c0010eec <EnvVarContainer::EnvVarContainer(Process*)>
c0011039:	8b 07                	mov    eax,DWORD PTR [edi]
c001103b:	89 03                	mov    DWORD PTR [ebx],eax
c001103d:	c1 e0 03             	shl    eax,0x3
c0011040:	89 04 24             	mov    DWORD PTR [esp],eax
c0011043:	e8 6e 6a ff ff       	call   c0007ab6 <malloc>
c0011048:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001104b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001104d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011050:	c1 e1 03             	shl    ecx,0x3
c0011053:	89 c7                	mov    edi,eax
c0011055:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011057:	83 c4 10             	add    esp,0x10
c001105a:	89 d8                	mov    eax,ebx
c001105c:	5b                   	pop    ebx
c001105d:	5e                   	pop    esi
c001105e:	5f                   	pop    edi
c001105f:	c3                   	ret    

c0011060 <KeLoadSystemEnv()>:
c0011060:	53                   	push   ebx
c0011061:	83 ec 14             	sub    esp,0x14
c0011064:	6a 0c                	push   0xc
c0011066:	e8 4b 6a ff ff       	call   c0007ab6 <malloc>
c001106b:	89 c3                	mov    ebx,eax
c001106d:	58                   	pop    eax
c001106e:	5a                   	pop    edx
c001106f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011075:	53                   	push   ebx
c0011076:	e8 71 fe ff ff       	call   c0010eec <EnvVarContainer::EnvVarContainer(Process*)>
c001107b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001107e:	89 1d 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,ebx
c0011084:	e8 47 fe ff ff       	call   c0010ed0 <EnvVarContainer::__loadSystem()>
c0011089:	83 c4 18             	add    esp,0x18
c001108c:	5b                   	pop    ebx
c001108d:	c3                   	ret    

c001108e <KeLoadUserEnv()>:
c001108e:	53                   	push   ebx
c001108f:	83 ec 14             	sub    esp,0x14
c0011092:	6a 0c                	push   0xc
c0011094:	e8 1d 6a ff ff       	call   c0007ab6 <malloc>
c0011099:	89 c3                	mov    ebx,eax
c001109b:	58                   	pop    eax
c001109c:	5a                   	pop    edx
c001109d:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00110a3:	53                   	push   ebx
c00110a4:	e8 43 fe ff ff       	call   c0010eec <EnvVarContainer::EnvVarContainer(Process*)>
c00110a9:	89 1d 20 9c 02 c0    	mov    DWORD PTR ds:0xc0029c20,ebx
c00110af:	83 c4 18             	add    esp,0x18
c00110b2:	5b                   	pop    ebx
c00110b3:	c3                   	ret    

c00110b4 <KeFlushEnv()>:
c00110b4:	c3                   	ret    

c00110b5 <KeGetProcessTotalEnvCount(Process*)>:
c00110b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110b9:	8b 15 20 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029c20
c00110bf:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110c5:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c00110ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00110cc:	03 01                	add    eax,DWORD PTR [ecx]
c00110ce:	85 d2                	test   edx,edx
c00110d0:	74 02                	je     c00110d4 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00110d2:	03 02                	add    eax,DWORD PTR [edx]
c00110d4:	c3                   	ret    

c00110d5 <KeGetProcessEnvPair(Process*, int)>:
c00110d5:	57                   	push   edi
c00110d6:	56                   	push   esi
c00110d7:	8b 35 20 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c20
c00110dd:	53                   	push   ebx
c00110de:	85 f6                	test   esi,esi
c00110e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110e8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00110f2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110f4:	75 16                	jne    c001110c <KeGetProcessEnvPair(Process*, int)+0x37>
c00110f6:	39 c2                	cmp    edx,eax
c00110f8:	7c 16                	jl     c0011110 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110fa:	8b 0d 24 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c24
c0011100:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011102:	01 c6                	add    esi,eax
c0011104:	39 d6                	cmp    esi,edx
c0011106:	7e 3c                	jle    c0011144 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011108:	29 c2                	sub    edx,eax
c001110a:	eb 04                	jmp    c0011110 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001110c:	39 c2                	cmp    edx,eax
c001110e:	7d 05                	jge    c0011115 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011110:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011113:	eb 20                	jmp    c0011135 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011115:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011117:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001111a:	39 d1                	cmp    ecx,edx
c001111c:	7e 04                	jle    c0011122 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001111e:	29 c2                	sub    edx,eax
c0011120:	eb 10                	jmp    c0011132 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011122:	8b 35 24 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c24
c0011128:	03 0e                	add    ecx,DWORD PTR [esi]
c001112a:	39 d1                	cmp    ecx,edx
c001112c:	7e 16                	jle    c0011144 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001112e:	29 c2                	sub    edx,eax
c0011130:	29 fa                	sub    edx,edi
c0011132:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011135:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011138:	8b 02                	mov    eax,DWORD PTR [edx]
c001113a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001113d:	89 03                	mov    DWORD PTR [ebx],eax
c001113f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011142:	eb 1d                	jmp    c0011161 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011144:	83 ec 0c             	sub    esp,0xc
c0011147:	68 07 1c 02 c0       	push   0xc0021c07
c001114c:	e8 ac 00 00 00       	call   c00111fd <KePanic(char const*)>
c0011151:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011157:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001115e:	83 c4 10             	add    esp,0x10
c0011161:	89 d8                	mov    eax,ebx
c0011163:	5b                   	pop    ebx
c0011164:	5e                   	pop    esi
c0011165:	5f                   	pop    edi
c0011166:	c2 04 00             	ret    0x4

c0011169 <CPU::current()>:
c0011169:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001116e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011174:	c3                   	ret    

c0011175 <operator new(unsigned long)>:
c0011175:	e9 3c 69 ff ff       	jmp    c0007ab6 <malloc>

c001117a <operator delete(void*)>:
c001117a:	e9 57 69 ff ff       	jmp    c0007ad6 <rfree>

c001117f <disableIRQs()>:
c001117f:	fa                   	cli    
c0011180:	c3                   	ret    

c0011181 <enableIRQs()>:
c0011181:	fb                   	sti    
c0011182:	c3                   	ret    

c0011183 <lockScheduler()>:
c0011183:	fa                   	cli    
c0011184:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001118a:	c3                   	ret    

c001118b <unlockScheduler()>:
c001118b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011190:	48                   	dec    eax
c0011191:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011196:	75 01                	jne    c0011199 <unlockScheduler()+0xe>
c0011198:	fb                   	sti    
c0011199:	c3                   	ret    

c001119a <lockStuff()>:
c001119a:	fa                   	cli    
c001119b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00111a1:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c00111a7:	c3                   	ret    

c00111a8 <unlockStuff()>:
c00111a8:	83 ec 0c             	sub    esp,0xc
c00111ab:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00111b0:	48                   	dec    eax
c00111b1:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00111b6:	75 18                	jne    c00111d0 <unlockStuff()+0x28>
c00111b8:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c00111bf:	74 0f                	je     c00111d0 <unlockStuff()+0x28>
c00111c1:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00111cb:	e8 ec 48 00 00       	call   c0015abc <schedule()>
c00111d0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00111d5:	48                   	dec    eax
c00111d6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00111db:	75 01                	jne    c00111de <unlockStuff()+0x36>
c00111dd:	fb                   	sti    
c00111de:	83 c4 0c             	add    esp,0xc
c00111e1:	c3                   	ret    

c00111e2 <Virt::getAKernelVAS()>:
c00111e2:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00111e7:	c3                   	ret    

c00111e8 <__not_memcpy>:
c00111e8:	57                   	push   edi
c00111e9:	56                   	push   esi
c00111ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111f6:	89 c7                	mov    edi,eax
c00111f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111fa:	5e                   	pop    esi
c00111fb:	5f                   	pop    edi
c00111fc:	c3                   	ret    

c00111fd <KePanic(char const*)>:
c00111fd:	c6 05 28 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c28,0x1
c0011204:	e9 59 68 00 00       	jmp    c0017a62 <HalPanic(char const*)>

c0011209 <KePowerThread(void*)>:
c0011209:	83 ec 0c             	sub    esp,0xc
c001120c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011211:	48                   	dec    eax
c0011212:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011217:	75 01                	jne    c001121a <KePowerThread(void*)+0x11>
c0011219:	fb                   	sti    
c001121a:	83 ec 0c             	sub    esp,0xc
c001121d:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011224:	6a 0a                	push   0xa
c0011226:	e8 d5 4b 00 00       	call   c0015e00 <sleep(unsigned int)>
c001122b:	83 05 84 9c 02 c0 0a 	add    DWORD PTR ds:0xc0029c84,0xa
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	eb e3                	jmp    c001121a <KePowerThread(void*)+0x11>

c0011237 <KeChangePowerSettings(PowerSettings)>:
c0011237:	57                   	push   edi
c0011238:	b9 09 00 00 00       	mov    ecx,0x9
c001123d:	56                   	push   esi
c001123e:	bf 60 9c 02 c0       	mov    edi,0xc0029c60
c0011243:	fc                   	cld    
c0011244:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011248:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001124a:	5e                   	pop    esi
c001124b:	5f                   	pop    edi
c001124c:	c3                   	ret    

c001124d <KeUserIOReceived()>:
c001124d:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c0011257:	c3                   	ret    

c0011258 <KeHandlePowerButton()>:
c0011258:	83 ec 0c             	sub    esp,0xc
c001125b:	a1 60 9c 02 c0       	mov    eax,ds:0xc0029c60
c0011260:	83 f8 02             	cmp    eax,0x2
c0011263:	75 10                	jne    c0011275 <KeHandlePowerButton()+0x1d>
c0011265:	83 ec 0c             	sub    esp,0xc
c0011268:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001126e:	e8 b5 5e ff ff       	call   c0007128 <Computer::shutdown()>
c0011273:	eb 11                	jmp    c0011286 <KeHandlePowerButton()+0x2e>
c0011275:	48                   	dec    eax
c0011276:	75 11                	jne    c0011289 <KeHandlePowerButton()+0x31>
c0011278:	83 ec 0c             	sub    esp,0xc
c001127b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011281:	e8 d2 5e ff ff       	call   c0007158 <Computer::sleep()>
c0011286:	83 c4 10             	add    esp,0x10
c0011289:	83 c4 0c             	add    esp,0xc
c001128c:	c3                   	ret    

c001128d <KeHandleSleepButton()>:
c001128d:	83 ec 0c             	sub    esp,0xc
c0011290:	a1 64 9c 02 c0       	mov    eax,ds:0xc0029c64
c0011295:	83 f8 02             	cmp    eax,0x2
c0011298:	75 10                	jne    c00112aa <KeHandleSleepButton()+0x1d>
c001129a:	83 ec 0c             	sub    esp,0xc
c001129d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112a3:	e8 80 5e ff ff       	call   c0007128 <Computer::shutdown()>
c00112a8:	eb 11                	jmp    c00112bb <KeHandleSleepButton()+0x2e>
c00112aa:	48                   	dec    eax
c00112ab:	75 11                	jne    c00112be <KeHandleSleepButton()+0x31>
c00112ad:	83 ec 0c             	sub    esp,0xc
c00112b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112b6:	e8 9d 5e ff ff       	call   c0007158 <Computer::sleep()>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 c4 0c             	add    esp,0xc
c00112c1:	c3                   	ret    

c00112c2 <KeSetupPowerManager()>:
c00112c2:	83 ec 0c             	sub    esp,0xc
c00112c5:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c00112cf:	68 f0 00 00 00       	push   0xf0
c00112d4:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c00112db:	6a 00                	push   0x0
c00112dd:	68 09 12 01 c0       	push   0xc0011209
c00112e2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00112e8:	e8 7f 45 00 00       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c00112ed:	c7 05 60 9c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029c60,0x2
c00112f7:	c7 05 64 9c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029c64,0x1
c0011301:	c7 05 68 9c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029c68,0x3
c001130b:	c7 05 6c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c6c,0x0
c0011315:	c7 05 78 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c78,0x0
c001131f:	c7 05 70 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c70,0x0
c0011329:	c7 05 7c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c7c,0x0
c0011333:	c7 05 74 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c74,0x3c
c001133d:	c7 05 80 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x3c
c0011347:	83 c4 1c             	add    esp,0x1c
c001134a:	c3                   	ret    

c001134b <KeRand()>:
c001134b:	69 05 88 9c 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029c88,0x2875
c0011355:	69 0d 8c 9c 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0029c8c,0xa2e7b175
c001135f:	53                   	push   ebx
c0011360:	01 c1                	add    ecx,eax
c0011362:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011367:	f7 25 88 9c 02 c0    	mul    DWORD PTR ds:0xc0029c88
c001136d:	01 ca                	add    edx,ecx
c001136f:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011374:	83 d2 00             	adc    edx,0x0
c0011377:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c001137c:	0f b7 da             	movzx  ebx,dx
c001137f:	89 da                	mov    edx,ebx
c0011381:	89 1d 8c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c8c,ebx
c0011387:	0f ac d0 0e          	shrd   eax,edx,0xe
c001138b:	5b                   	pop    ebx
c001138c:	c3                   	ret    

c001138d <KeSeedRand(unsigned int)>:
c001138d:	53                   	push   ebx
c001138e:	83 ec 08             	sub    esp,0x8
c0011391:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011395:	e8 e7 69 00 00       	call   c0017d81 <HalGetRand()>
c001139a:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c00113a4:	31 d8                	xor    eax,ebx
c00113a6:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c00113ab:	e8 9b ff ff ff       	call   c001134b <KeRand()>
c00113b0:	83 c4 08             	add    esp,0x8
c00113b3:	5b                   	pop    ebx
c00113b4:	eb 95                	jmp    c001134b <KeRand()>

c00113b6 <KeInitRand()>:
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	e8 b8 67 00 00       	call   c0017b76 <HalQueryPerformanceCounter()>
c00113be:	0f 20 da             	mov    edx,cr3
c00113c1:	0f 22 da             	mov    cr3,edx
c00113c4:	0f 20 da             	mov    edx,cr3
c00113c7:	0f 22 da             	mov    cr3,edx
c00113ca:	0f 20 da             	mov    edx,cr3
c00113cd:	0f 22 da             	mov    cr3,edx
c00113d0:	0f 20 da             	mov    edx,cr3
c00113d3:	0f 22 da             	mov    cr3,edx
c00113d6:	83 ec 0c             	sub    esp,0xc
c00113d9:	35 03 8a 95 38       	xor    eax,0x38958a03
c00113de:	50                   	push   eax
c00113df:	e8 a9 ff ff ff       	call   c001138d <KeSeedRand(unsigned int)>
c00113e4:	83 c4 1c             	add    esp,0x1c
c00113e7:	c3                   	ret    

c00113e8 <KeResolveCompatibilitySymbol(char*)>:
c00113e8:	83 ec 0c             	sub    esp,0xc
c00113eb:	83 ec 08             	sub    esp,0x8
c00113ee:	68 21 1c 02 c0       	push   0xc0021c21
c00113f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113f7:	e8 54 f3 fe ff       	call   c0000750 <strcmp>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	85 c0                	test   eax,eax
c0011401:	0f 94 c0             	sete   al
c0011404:	0f b6 c0             	movzx  eax,al
c0011407:	85 c0                	test   eax,eax
c0011409:	74 0d                	je     c0011418 <KeResolveCompatibilitySymbol(char*)+0x30>
c001140b:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011410:	e9 8b 01 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011415:	8d 76 00             	lea    esi,[esi+0x0]
c0011418:	83 ec 08             	sub    esp,0x8
c001141b:	68 2a 1c 02 c0       	push   0xc0021c2a
c0011420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011424:	e8 27 f3 fe ff       	call   c0000750 <strcmp>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	85 c0                	test   eax,eax
c001142e:	0f 94 c0             	sete   al
c0011431:	0f b6 c0             	movzx  eax,al
c0011434:	85 c0                	test   eax,eax
c0011436:	74 0c                	je     c0011444 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011438:	b8 30 f1 01 c0       	mov    eax,0xc001f130
c001143d:	e9 5e 01 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011442:	66 90                	xchg   ax,ax
c0011444:	83 ec 08             	sub    esp,0x8
c0011447:	68 34 1c 02 c0       	push   0xc0021c34
c001144c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011450:	e8 fb f2 fe ff       	call   c0000750 <strcmp>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	85 c0                	test   eax,eax
c001145a:	0f 94 c0             	sete   al
c001145d:	0f b6 c0             	movzx  eax,al
c0011460:	85 c0                	test   eax,eax
c0011462:	74 0c                	je     c0011470 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011464:	b8 64 ee 01 c0       	mov    eax,0xc001ee64
c0011469:	e9 32 01 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001146e:	66 90                	xchg   ax,ax
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	68 3d 1c 02 c0       	push   0xc0021c3d
c0011478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147c:	e8 cf f2 fe ff       	call   c0000750 <strcmp>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	85 c0                	test   eax,eax
c0011486:	0f 94 c0             	sete   al
c0011489:	0f b6 c0             	movzx  eax,al
c001148c:	85 c0                	test   eax,eax
c001148e:	74 0c                	je     c001149c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011490:	b8 fd 11 01 c0       	mov    eax,0xc00111fd
c0011495:	e9 06 01 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001149a:	66 90                	xchg   ax,ax
c001149c:	83 ec 08             	sub    esp,0x8
c001149f:	68 50 1c 02 c0       	push   0xc0021c50
c00114a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a8:	e8 a3 f2 fe ff       	call   c0000750 <strcmp>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	85 c0                	test   eax,eax
c00114b2:	0f 94 c0             	sete   al
c00114b5:	0f b6 c0             	movzx  eax,al
c00114b8:	85 c0                	test   eax,eax
c00114ba:	74 0c                	je     c00114c8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00114bc:	b8 26 0b 01 c0       	mov    eax,0xc0010b26
c00114c1:	e9 da 00 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114c6:	66 90                	xchg   ax,ax
c00114c8:	83 ec 08             	sub    esp,0x8
c00114cb:	68 6d 1c 02 c0       	push   0xc0021c6d
c00114d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114d4:	e8 77 f2 fe ff       	call   c0000750 <strcmp>
c00114d9:	83 c4 10             	add    esp,0x10
c00114dc:	85 c0                	test   eax,eax
c00114de:	0f 94 c0             	sete   al
c00114e1:	0f b6 c0             	movzx  eax,al
c00114e4:	85 c0                	test   eax,eax
c00114e6:	74 0c                	je     c00114f4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00114e8:	b8 30 f2 01 c0       	mov    eax,0xc001f230
c00114ed:	e9 ae 00 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114f2:	66 90                	xchg   ax,ax
c00114f4:	83 ec 08             	sub    esp,0x8
c00114f7:	68 77 1c 02 c0       	push   0xc0021c77
c00114fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011500:	e8 4b f2 fe ff       	call   c0000750 <strcmp>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	85 c0                	test   eax,eax
c001150a:	0f 94 c0             	sete   al
c001150d:	0f b6 c0             	movzx  eax,al
c0011510:	85 c0                	test   eax,eax
c0011512:	74 0c                	je     c0011520 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011514:	b8 b0 ef 01 c0       	mov    eax,0xc001efb0
c0011519:	e9 82 00 00 00       	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001151e:	66 90                	xchg   ax,ax
c0011520:	83 ec 08             	sub    esp,0x8
c0011523:	68 80 1c 02 c0       	push   0xc0021c80
c0011528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001152c:	e8 1f f2 fe ff       	call   c0000750 <strcmp>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	85 c0                	test   eax,eax
c0011536:	0f 94 c0             	sete   al
c0011539:	0f b6 c0             	movzx  eax,al
c001153c:	85 c0                	test   eax,eax
c001153e:	74 08                	je     c0011548 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011540:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011545:	eb 59                	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011547:	90                   	nop
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	68 98 1c 02 c0       	push   0xc0021c98
c0011550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011554:	e8 f7 f1 fe ff       	call   c0000750 <strcmp>
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	85 c0                	test   eax,eax
c001155e:	0f 94 c0             	sete   al
c0011561:	0f b6 c0             	movzx  eax,al
c0011564:	85 c0                	test   eax,eax
c0011566:	74 08                	je     c0011570 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011568:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c001156d:	eb 31                	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001156f:	90                   	nop
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	68 a5 1c 02 c0       	push   0xc0021ca5
c0011578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001157c:	e8 cf f1 fe ff       	call   c0000750 <strcmp>
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	85 c0                	test   eax,eax
c0011586:	0f 94 c0             	sete   al
c0011589:	0f b6 c0             	movzx  eax,al
c001158c:	85 c0                	test   eax,eax
c001158e:	74 08                	je     c0011598 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011590:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011595:	eb 09                	jmp    c00115a0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011597:	90                   	nop
c0011598:	b8 00 00 00 00       	mov    eax,0x0
c001159d:	8d 76 00             	lea    esi,[esi+0x0]
c00115a0:	83 c4 0c             	add    esp,0xc
c00115a3:	c3                   	ret    

c00115a4 <KiSigKill(int)>:
c00115a4:	83 ec 0c             	sub    esp,0xc
c00115a7:	6a 00                	push   0x0
c00115a9:	6a 00                	push   0x0
c00115ab:	6a ff                	push   0xffffffff
c00115ad:	6a 01                	push   0x1
c00115af:	e8 9e 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115b4:	83 c4 1c             	add    esp,0x1c
c00115b7:	c3                   	ret    

c00115b8 <KiDefaultSignalHandlerIgnore(int)>:
c00115b8:	c3                   	ret    

c00115b9 <KiDefaultSignalHandlerPause(int)>:
c00115b9:	57                   	push   edi
c00115ba:	b9 07 00 00 00       	mov    ecx,0x7
c00115bf:	56                   	push   esi
c00115c0:	be ee 1c 02 c0       	mov    esi,0xc0021cee
c00115c5:	83 ec 24             	sub    esp,0x24
c00115c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00115cc:	fc                   	cld    
c00115cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00115d3:	50                   	push   eax
c00115d4:	6a 00                	push   0x0
c00115d6:	6a 00                	push   0x0
c00115d8:	6a 27                	push   0x27
c00115da:	e8 73 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115df:	83 c4 34             	add    esp,0x34
c00115e2:	5e                   	pop    esi
c00115e3:	5f                   	pop    edi
c00115e4:	c3                   	ret    

c00115e5 <KiDefaultSignalHandlerResume(int)>:
c00115e5:	57                   	push   edi
c00115e6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00115eb:	56                   	push   esi
c00115ec:	be 0a 1d 02 c0       	mov    esi,0xc0021d0a
c00115f1:	83 ec 24             	sub    esp,0x24
c00115f4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00115f8:	fc                   	cld    
c00115f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115fb:	8d 44 24 03          	lea    eax,[esp+0x3]
c00115ff:	50                   	push   eax
c0011600:	6a 00                	push   0x0
c0011602:	6a 00                	push   0x0
c0011604:	6a 27                	push   0x27
c0011606:	e8 47 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001160b:	83 c4 34             	add    esp,0x34
c001160e:	5e                   	pop    esi
c001160f:	5f                   	pop    edi
c0011610:	c3                   	ret    

c0011611 <KeDeinitSignals(SigHandlerBlock*)>:
c0011611:	e9 b0 64 ff ff       	jmp    c0007ac6 <free>

c0011616 <KeInitSignals()>:
c0011616:	53                   	push   ebx
c0011617:	83 ec 14             	sub    esp,0x14
c001161a:	68 c8 00 00 00       	push   0xc8
c001161f:	e8 92 64 ff ff       	call   c0007ab6 <malloc>
c0011624:	83 c4 0c             	add    esp,0xc
c0011627:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011631:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001163b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011642:	89 c3                	mov    ebx,eax
c0011644:	6a 20                	push   0x20
c0011646:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001164c:	6a 00                	push   0x0
c001164e:	50                   	push   eax
c001164f:	e8 9c ee fe ff       	call   c00004f0 <memset>
c0011654:	83 c4 0c             	add    esp,0xc
c0011657:	6a 44                	push   0x44
c0011659:	6a 00                	push   0x0
c001165b:	53                   	push   ebx
c001165c:	e8 8f ee fe ff       	call   c00004f0 <memset>
c0011661:	89 d8                	mov    eax,ebx
c0011663:	83 c4 18             	add    esp,0x18
c0011666:	5b                   	pop    ebx
c0011667:	c3                   	ret    

c0011668 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011668:	53                   	push   ebx
c0011669:	b8 01 00 00 00       	mov    eax,0x1
c001166e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011676:	83 f9 10             	cmp    ecx,0x10
c0011679:	7f 21                	jg     c001169c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001167b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001167e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011682:	89 03                	mov    DWORD PTR [ebx],eax
c0011684:	b8 01 00 00 00       	mov    eax,0x1
c0011689:	d3 e0                	shl    eax,cl
c001168b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001168f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011692:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001169a:	31 c0                	xor    eax,eax
c001169c:	5b                   	pop    ebx
c001169d:	c3                   	ret    

c001169e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001169e:	55                   	push   ebp
c001169f:	57                   	push   edi
c00116a0:	bf 08 00 00 00       	mov    edi,0x8
c00116a5:	56                   	push   esi
c00116a6:	53                   	push   ebx
c00116a7:	83 ec 18             	sub    esp,0x18
c00116aa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00116ae:	68 27 1d 02 c0       	push   0xc0021d27
c00116b3:	e8 8d 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00116b8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00116bf:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	31 c9                	xor    ecx,ecx
c00116ca:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00116ce:	99                   	cdq    
c00116cf:	f7 ff                	idiv   edi
c00116d1:	8d 42 24             	lea    eax,[edx+0x24]
c00116d4:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00116d8:	85 f6                	test   esi,esi
c00116da:	75 1a                	jne    c00116f6 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00116dc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116e0:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00116e4:	50                   	push   eax
c00116e5:	50                   	push   eax
c00116e6:	52                   	push   edx
c00116e7:	68 38 1d 02 c0       	push   0xc0021d38
c00116ec:	e8 54 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	eb 1b                	jmp    c0011711 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00116f6:	41                   	inc    ecx
c00116f7:	83 f9 08             	cmp    ecx,0x8
c00116fa:	75 ce                	jne    c00116ca <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	be 01 00 00 00       	mov    esi,0x1
c0011704:	68 59 1d 02 c0       	push   0xc0021d59
c0011709:	e8 37 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	83 c4 0c             	add    esp,0xc
c0011714:	89 f0                	mov    eax,esi
c0011716:	5b                   	pop    ebx
c0011717:	5e                   	pop    esi
c0011718:	5f                   	pop    edi
c0011719:	5d                   	pop    ebp
c001171a:	c3                   	ret    

c001171b <KeCheckSignal(SigHandlerBlock*, int*)>:
c001171b:	55                   	push   ebp
c001171c:	57                   	push   edi
c001171d:	56                   	push   esi
c001171e:	53                   	push   ebx
c001171f:	51                   	push   ecx
c0011720:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011724:	85 db                	test   ebx,ebx
c0011726:	0f 84 bc 00 00 00    	je     c00117e8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001172c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011733:	0f 84 af 00 00 00    	je     c00117e8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011739:	31 c9                	xor    ecx,ecx
c001173b:	bf 08 00 00 00       	mov    edi,0x8
c0011740:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011746:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011749:	99                   	cdq    
c001174a:	f7 ff                	idiv   edi
c001174c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011753:	85 ed                	test   ebp,ebp
c0011755:	0f 84 9e 00 00 00    	je     c00117f9 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001175b:	89 e9                	mov    ecx,ebp
c001175d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011763:	bf 01 00 00 00       	mov    edi,0x1
c0011768:	89 04 24             	mov    DWORD PTR [esp],eax
c001176b:	d3 e7                	shl    edi,cl
c001176d:	31 c9                	xor    ecx,ecx
c001176f:	b8 01 00 00 00       	mov    eax,0x1
c0011774:	d3 e0                	shl    eax,cl
c0011776:	85 04 24             	test   DWORD PTR [esp],eax
c0011779:	74 06                	je     c0011781 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001177b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001177f:	75 67                	jne    c00117e8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011781:	41                   	inc    ecx
c0011782:	83 f9 11             	cmp    ecx,0x11
c0011785:	75 e8                	jne    c001176f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011787:	46                   	inc    esi
c0011788:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001178b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011791:	09 f8                	or     eax,edi
c0011793:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001179e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00117a4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00117ab:	31 c0                	xor    eax,eax
c00117ad:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00117b5:	74 09                	je     c00117c0 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00117b7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117be:	eb 06                	jmp    c00117c6 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00117c0:	40                   	inc    eax
c00117c1:	83 f8 08             	cmp    eax,0x8
c00117c4:	75 e7                	jne    c00117ad <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00117c6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00117c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117cd:	83 fd 09             	cmp    ebp,0x9
c00117d0:	89 2a                	mov    DWORD PTR [edx],ebp
c00117d2:	75 07                	jne    c00117db <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00117d4:	b8 a4 15 01 c0       	mov    eax,0xc00115a4
c00117d9:	eb 31                	jmp    c001180c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117db:	83 f8 01             	cmp    eax,0x1
c00117de:	75 0c                	jne    c00117ec <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00117e0:	f7 d7                	not    edi
c00117e2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00117e8:	31 c0                	xor    eax,eax
c00117ea:	eb 20                	jmp    c001180c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117ec:	85 c0                	test   eax,eax
c00117ee:	75 1c                	jne    c001180c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117f0:	8b 04 ad 60 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcea0]
c00117f7:	eb 13                	jmp    c001180c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117f9:	46                   	inc    esi
c00117fa:	41                   	inc    ecx
c00117fb:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011801:	83 f9 08             	cmp    ecx,0x8
c0011804:	0f 85 36 ff ff ff    	jne    c0011740 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001180a:	eb dc                	jmp    c00117e8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001180c:	5a                   	pop    edx
c001180d:	5b                   	pop    ebx
c001180e:	5e                   	pop    esi
c001180f:	5f                   	pop    edi
c0011810:	5d                   	pop    ebp
c0011811:	c3                   	ret    

c0011812 <KiCheckSignalZ>:
c0011812:	83 ec 10             	sub    esp,0x10
c0011815:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011819:	50                   	push   eax
c001181a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001181f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011822:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011828:	e8 ee fe ff ff       	call   c001171b <KeCheckSignal(SigHandlerBlock*, int*)>
c001182d:	5a                   	pop    edx
c001182e:	31 d2                	xor    edx,edx
c0011830:	59                   	pop    ecx
c0011831:	85 c0                	test   eax,eax
c0011833:	74 19                	je     c001184e <KiCheckSignalZ+0x3c>
c0011835:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001183b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001183e:	89 02                	mov    DWORD PTR [edx],eax
c0011840:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011847:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001184b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001184e:	89 d0                	mov    eax,edx
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	c3                   	ret    

c0011854 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011854:	56                   	push   esi
c0011855:	53                   	push   ebx
c0011856:	bb 01 00 00 00       	mov    ebx,0x1
c001185b:	52                   	push   edx
c001185c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011860:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011864:	d3 e3                	shl    ebx,cl
c0011866:	83 f9 10             	cmp    ecx,0x10
c0011869:	7f 08                	jg     c0011873 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001186b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011871:	75 10                	jne    c0011883 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011873:	83 ec 0c             	sub    esp,0xc
c0011876:	68 6a 1d 02 c0       	push   0xc0021d6a
c001187b:	e8 7d f9 ff ff       	call   c00111fd <KePanic(char const*)>
c0011880:	83 c4 10             	add    esp,0x10
c0011883:	f7 d3                	not    ebx
c0011885:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001188b:	58                   	pop    eax
c001188c:	5b                   	pop    ebx
c001188d:	5e                   	pop    esi
c001188e:	c3                   	ret    

c001188f <KiFinishSignalZ>:
c001188f:	53                   	push   ebx
c0011890:	83 ec 10             	sub    esp,0x10
c0011893:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011897:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001189a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001189f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118a2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118a8:	e8 a7 ff ff ff       	call   c0011854 <KeCompleteSignal(SigHandlerBlock*, int)>
c00118ad:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00118b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00118ba:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00118c1:	83 c4 18             	add    esp,0x18
c00118c4:	5b                   	pop    ebx
c00118c5:	c3                   	ret    

c00118c6 <SysSeekDir(regs*)>:
c00118c6:	31 c0                	xor    eax,eax
c00118c8:	31 d2                	xor    edx,edx
c00118ca:	c3                   	ret    

c00118cb <SysTellDir(regs*)>:
c00118cb:	31 c0                	xor    eax,eax
c00118cd:	31 d2                	xor    edx,edx
c00118cf:	c3                   	ret    

c00118d0 <SysVerify(regs*)>:
c00118d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d4:	31 d2                	xor    edx,edx
c00118d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118d9:	c3                   	ret    

c00118da <SysGetArgc(regs*)>:
c00118da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118e2:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00118e8:	89 c2                	mov    edx,eax
c00118ea:	c1 fa 1f             	sar    edx,0x1f
c00118ed:	c3                   	ret    

c00118ee <SysTTYName(regs*)>:
c00118ee:	b8 01 00 00 00       	mov    eax,0x1
c00118f3:	31 d2                	xor    edx,edx
c00118f5:	c3                   	ret    

c00118f6 <SysFormatDisk(regs*)>:
c00118f6:	56                   	push   esi
c00118f7:	53                   	push   ebx
c00118f8:	83 ec 04             	sub    esp,0x4
c00118fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118ff:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c0011905:	eb 28                	jmp    c001192f <SysFormatDisk(regs*)+0x39>
c0011907:	83 ec 0c             	sub    esp,0xc
c001190a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001190d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011910:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011912:	51                   	push   ecx
c0011913:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011916:	51                   	push   ecx
c0011917:	50                   	push   eax
c0011918:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001191f:	50                   	push   eax
c0011920:	53                   	push   ebx
c0011921:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011924:	83 c4 20             	add    esp,0x20
c0011927:	83 f8 08             	cmp    eax,0x8
c001192a:	75 14                	jne    c0011940 <SysFormatDisk(regs*)+0x4a>
c001192c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001192f:	85 db                	test   ebx,ebx
c0011931:	75 d4                	jne    c0011907 <SysFormatDisk(regs*)+0x11>
c0011933:	83 c4 04             	add    esp,0x4
c0011936:	b8 03 00 00 00       	mov    eax,0x3
c001193b:	31 d2                	xor    edx,edx
c001193d:	5b                   	pop    ebx
c001193e:	5e                   	pop    esi
c001193f:	c3                   	ret    
c0011940:	85 c0                	test   eax,eax
c0011942:	74 1f                	je     c0011963 <SysFormatDisk(regs*)+0x6d>
c0011944:	83 f8 09             	cmp    eax,0x9
c0011947:	74 0d                	je     c0011956 <SysFormatDisk(regs*)+0x60>
c0011949:	83 c4 04             	add    esp,0x4
c001194c:	b8 02 00 00 00       	mov    eax,0x2
c0011951:	31 d2                	xor    edx,edx
c0011953:	5b                   	pop    ebx
c0011954:	5e                   	pop    esi
c0011955:	c3                   	ret    
c0011956:	83 c4 04             	add    esp,0x4
c0011959:	b8 01 00 00 00       	mov    eax,0x1
c001195e:	31 d2                	xor    edx,edx
c0011960:	5b                   	pop    ebx
c0011961:	5e                   	pop    esi
c0011962:	c3                   	ret    
c0011963:	83 c4 04             	add    esp,0x4
c0011966:	31 c0                	xor    eax,eax
c0011968:	31 d2                	xor    edx,edx
c001196a:	5b                   	pop    ebx
c001196b:	5e                   	pop    esi
c001196c:	c3                   	ret    

c001196d <SysSetDiskVolumeLabel(regs*)>:
c001196d:	56                   	push   esi
c001196e:	53                   	push   ebx
c001196f:	83 ec 04             	sub    esp,0x4
c0011972:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011976:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011979:	83 f8 19             	cmp    eax,0x19
c001197c:	77 33                	ja     c00119b1 <SysSetDiskVolumeLabel(regs*)+0x44>
c001197e:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0011985:	85 c9                	test   ecx,ecx
c0011987:	74 28                	je     c00119b1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011989:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001198c:	85 db                	test   ebx,ebx
c001198e:	74 21                	je     c00119b1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011990:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011996:	85 d2                	test   edx,edx
c0011998:	74 17                	je     c00119b1 <SysSetDiskVolumeLabel(regs*)+0x44>
c001199a:	8b 32                	mov    esi,DWORD PTR [edx]
c001199c:	53                   	push   ebx
c001199d:	50                   	push   eax
c001199e:	51                   	push   ecx
c001199f:	52                   	push   edx
c00119a0:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	89 c2                	mov    edx,eax
c00119a8:	83 c4 04             	add    esp,0x4
c00119ab:	c1 fa 1f             	sar    edx,0x1f
c00119ae:	5b                   	pop    ebx
c00119af:	5e                   	pop    esi
c00119b0:	c3                   	ret    
c00119b1:	83 c4 04             	add    esp,0x4
c00119b4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119be:	5b                   	pop    ebx
c00119bf:	5e                   	pop    esi
c00119c0:	c3                   	ret    

c00119c1 <SysGetDiskVolumeLabel(regs*)>:
c00119c1:	57                   	push   edi
c00119c2:	56                   	push   esi
c00119c3:	53                   	push   ebx
c00119c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119c8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00119cb:	83 fa 19             	cmp    edx,0x19
c00119ce:	77 3c                	ja     c0011a0c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119d0:	8b 0c 95 e0 94 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6b20]
c00119d7:	85 c9                	test   ecx,ecx
c00119d9:	74 31                	je     c0011a0c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119db:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00119de:	85 db                	test   ebx,ebx
c00119e0:	74 2a                	je     c0011a0c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119e2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00119e5:	85 f6                	test   esi,esi
c00119e7:	74 23                	je     c0011a0c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119e9:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00119ef:	85 c0                	test   eax,eax
c00119f1:	74 19                	je     c0011a0c <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119f3:	83 ec 0c             	sub    esp,0xc
c00119f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00119f8:	56                   	push   esi
c00119f9:	53                   	push   ebx
c00119fa:	52                   	push   edx
c00119fb:	51                   	push   ecx
c00119fc:	50                   	push   eax
c00119fd:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a00:	83 c4 20             	add    esp,0x20
c0011a03:	89 c2                	mov    edx,eax
c0011a05:	5b                   	pop    ebx
c0011a06:	c1 fa 1f             	sar    edx,0x1f
c0011a09:	5e                   	pop    esi
c0011a0a:	5f                   	pop    edi
c0011a0b:	c3                   	ret    
c0011a0c:	5b                   	pop    ebx
c0011a0d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a12:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a17:	5e                   	pop    esi
c0011a18:	5f                   	pop    edi
c0011a19:	c3                   	ret    

c0011a1a <SysShutdown(regs*)>:
c0011a1a:	83 ec 0c             	sub    esp,0xc
c0011a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a21:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a24:	85 c0                	test   eax,eax
c0011a26:	74 18                	je     c0011a40 <SysShutdown(regs*)+0x26>
c0011a28:	83 f8 01             	cmp    eax,0x1
c0011a2b:	74 38                	je     c0011a65 <SysShutdown(regs*)+0x4b>
c0011a2d:	83 f8 02             	cmp    eax,0x2
c0011a30:	74 24                	je     c0011a56 <SysShutdown(regs*)+0x3c>
c0011a32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a3c:	83 c4 0c             	add    esp,0xc
c0011a3f:	c3                   	ret    
c0011a40:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a45:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a47:	6a 00                	push   0x0
c0011a49:	6a 00                	push   0x0
c0011a4b:	6a 00                	push   0x0
c0011a4d:	50                   	push   eax
c0011a4e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a51:	83 c4 10             	add    esp,0x10
c0011a54:	eb dc                	jmp    c0011a32 <SysShutdown(regs*)+0x18>
c0011a56:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a5d:	6a 00                	push   0x0
c0011a5f:	6a 00                	push   0x0
c0011a61:	6a 01                	push   0x1
c0011a63:	eb e8                	jmp    c0011a4d <SysShutdown(regs*)+0x33>
c0011a65:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c0011a6a:	85 c0                	test   eax,eax
c0011a6c:	74 02                	je     c0011a70 <SysShutdown(regs*)+0x56>
c0011a6e:	ff d0                	call   eax
c0011a70:	31 c0                	xor    eax,eax
c0011a72:	31 d2                	xor    edx,edx
c0011a74:	83 c4 0c             	add    esp,0xc
c0011a77:	c3                   	ret    

c0011a78 <SysRealpath(regs*)>:
c0011a78:	83 ec 0c             	sub    esp,0xc
c0011a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a82:	85 d2                	test   edx,edx
c0011a84:	74 07                	je     c0011a8d <SysRealpath(regs*)+0x15>
c0011a86:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a89:	85 c0                	test   eax,eax
c0011a8b:	75 0b                	jne    c0011a98 <SysRealpath(regs*)+0x20>
c0011a8d:	b8 01 00 00 00       	mov    eax,0x1
c0011a92:	31 d2                	xor    edx,edx
c0011a94:	83 c4 0c             	add    esp,0xc
c0011a97:	c3                   	ret    
c0011a98:	83 ec 04             	sub    esp,0x4
c0011a9b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011aa1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011aa4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011aaa:	51                   	push   ecx
c0011aab:	52                   	push   edx
c0011aac:	50                   	push   eax
c0011aad:	e8 82 9a ff ff       	call   c000b534 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	31 c0                	xor    eax,eax
c0011ab7:	31 d2                	xor    edx,edx
c0011ab9:	83 c4 0c             	add    esp,0xc
c0011abc:	c3                   	ret    

c0011abd <SysReadDir(regs*)>:
c0011abd:	53                   	push   ebx
c0011abe:	83 ec 18             	sub    esp,0x18
c0011ac1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ac5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ac8:	83 f8 02             	cmp    eax,0x2
c0011acb:	76 61                	jbe    c0011b2e <SysReadDir(regs*)+0x71>
c0011acd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ad4:	77 49                	ja     c0011b1f <SysReadDir(regs*)+0x62>
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	50                   	push   eax
c0011ada:	e8 d4 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	85 c0                	test   eax,eax
c0011ae4:	74 39                	je     c0011b1f <SysReadDir(regs*)+0x62>
c0011ae6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011aee:	83 ec 0c             	sub    esp,0xc
c0011af1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011af3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011af7:	51                   	push   ecx
c0011af8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011afb:	51                   	push   ecx
c0011afc:	6a 00                	push   0x0
c0011afe:	68 10 01 00 00       	push   0x110
c0011b03:	50                   	push   eax
c0011b04:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b07:	83 c4 20             	add    esp,0x20
c0011b0a:	85 c0                	test   eax,eax
c0011b0c:	74 29                	je     c0011b37 <SysReadDir(regs*)+0x7a>
c0011b0e:	83 f8 07             	cmp    eax,0x7
c0011b11:	74 1b                	je     c0011b2e <SysReadDir(regs*)+0x71>
c0011b13:	b8 02 00 00 00       	mov    eax,0x2
c0011b18:	31 d2                	xor    edx,edx
c0011b1a:	83 c4 18             	add    esp,0x18
c0011b1d:	5b                   	pop    ebx
c0011b1e:	c3                   	ret    
c0011b1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b29:	83 c4 18             	add    esp,0x18
c0011b2c:	5b                   	pop    ebx
c0011b2d:	c3                   	ret    
c0011b2e:	b8 01 00 00 00       	mov    eax,0x1
c0011b33:	31 d2                	xor    edx,edx
c0011b35:	eb e3                	jmp    c0011b1a <SysReadDir(regs*)+0x5d>
c0011b37:	31 c0                	xor    eax,eax
c0011b39:	31 d2                	xor    edx,edx
c0011b3b:	eb dd                	jmp    c0011b1a <SysReadDir(regs*)+0x5d>

c0011b3d <SysIsATTY(regs*)>:
c0011b3d:	83 ec 0c             	sub    esp,0xc
c0011b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b44:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b47:	83 f8 02             	cmp    eax,0x2
c0011b4a:	76 07                	jbe    c0011b53 <SysIsATTY(regs*)+0x16>
c0011b4c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b51:	75 26                	jne    c0011b79 <SysIsATTY(regs*)+0x3c>
c0011b53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b61:	85 c0                	test   eax,eax
c0011b63:	74 24                	je     c0011b89 <SysIsATTY(regs*)+0x4c>
c0011b65:	83 ec 0c             	sub    esp,0xc
c0011b68:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b6a:	50                   	push   eax
c0011b6b:	ff 12                	call   DWORD PTR [edx]
c0011b6d:	31 d2                	xor    edx,edx
c0011b6f:	0f b6 c0             	movzx  eax,al
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	83 c4 0c             	add    esp,0xc
c0011b78:	c3                   	ret    
c0011b79:	83 ec 0c             	sub    esp,0xc
c0011b7c:	50                   	push   eax
c0011b7d:	e8 31 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011b82:	83 c4 10             	add    esp,0x10
c0011b85:	85 c0                	test   eax,eax
c0011b87:	75 dc                	jne    c0011b65 <SysIsATTY(regs*)+0x28>
c0011b89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b93:	83 c4 0c             	add    esp,0xc
c0011b96:	c3                   	ret    

c0011b97 <SysSeek(regs*)>:
c0011b97:	53                   	push   ebx
c0011b98:	83 ec 08             	sub    esp,0x8
c0011b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b9f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ba2:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ba5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bab:	77 32                	ja     c0011bdf <SysSeek(regs*)+0x48>
c0011bad:	83 ec 0c             	sub    esp,0xc
c0011bb0:	50                   	push   eax
c0011bb1:	e8 fd 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011bb6:	83 c4 0c             	add    esp,0xc
c0011bb9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011bbc:	31 db                	xor    ebx,ebx
c0011bbe:	53                   	push   ebx
c0011bbf:	51                   	push   ecx
c0011bc0:	50                   	push   eax
c0011bc1:	e8 9e 9c ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0011bc6:	83 c4 10             	add    esp,0x10
c0011bc9:	85 c0                	test   eax,eax
c0011bcb:	0f 95 c0             	setne  al
c0011bce:	31 d2                	xor    edx,edx
c0011bd0:	0f b6 c0             	movzx  eax,al
c0011bd3:	f7 d8                	neg    eax
c0011bd5:	83 d2 00             	adc    edx,0x0
c0011bd8:	83 c4 08             	add    esp,0x8
c0011bdb:	f7 da                	neg    edx
c0011bdd:	5b                   	pop    ebx
c0011bde:	c3                   	ret    
c0011bdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011be4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011be9:	83 c4 08             	add    esp,0x8
c0011bec:	5b                   	pop    ebx
c0011bed:	c3                   	ret    

c0011bee <SysTell(regs*)>:
c0011bee:	53                   	push   ebx
c0011bef:	83 ec 08             	sub    esp,0x8
c0011bf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011bf6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bf9:	83 f8 02             	cmp    eax,0x2
c0011bfc:	76 4e                	jbe    c0011c4c <SysTell(regs*)+0x5e>
c0011bfe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c03:	76 19                	jbe    c0011c1e <SysTell(regs*)+0x30>
c0011c05:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c08:	31 d2                	xor    edx,edx
c0011c0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c17:	31 c0                	xor    eax,eax
c0011c19:	83 c4 08             	add    esp,0x8
c0011c1c:	5b                   	pop    ebx
c0011c1d:	c3                   	ret    
c0011c1e:	83 ec 0c             	sub    esp,0xc
c0011c21:	50                   	push   eax
c0011c22:	e8 8c 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c27:	5a                   	pop    edx
c0011c28:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c2b:	59                   	pop    ecx
c0011c2c:	53                   	push   ebx
c0011c2d:	50                   	push   eax
c0011c2e:	e8 dd 9c ff ff       	call   c000b910 <File::tell(unsigned long long*)>
c0011c33:	83 c4 10             	add    esp,0x10
c0011c36:	85 c0                	test   eax,eax
c0011c38:	0f 95 c0             	setne  al
c0011c3b:	31 d2                	xor    edx,edx
c0011c3d:	0f b6 c0             	movzx  eax,al
c0011c40:	f7 d8                	neg    eax
c0011c42:	83 d2 00             	adc    edx,0x0
c0011c45:	83 c4 08             	add    esp,0x8
c0011c48:	f7 da                	neg    edx
c0011c4a:	5b                   	pop    ebx
c0011c4b:	c3                   	ret    
c0011c4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c56:	83 c4 08             	add    esp,0x8
c0011c59:	5b                   	pop    ebx
c0011c5a:	c3                   	ret    

c0011c5b <SysSize(regs*)>:
c0011c5b:	53                   	push   ebx
c0011c5c:	83 ec 18             	sub    esp,0x18
c0011c5f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c66:	83 f8 02             	cmp    eax,0x2
c0011c69:	76 54                	jbe    c0011cbf <SysSize(regs*)+0x64>
c0011c6b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c70:	76 19                	jbe    c0011c8b <SysSize(regs*)+0x30>
c0011c72:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c75:	31 d2                	xor    edx,edx
c0011c77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c84:	31 c0                	xor    eax,eax
c0011c86:	83 c4 18             	add    esp,0x18
c0011c89:	5b                   	pop    ebx
c0011c8a:	c3                   	ret    
c0011c8b:	83 ec 0c             	sub    esp,0xc
c0011c8e:	50                   	push   eax
c0011c8f:	e8 1f 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c94:	83 c4 0c             	add    esp,0xc
c0011c97:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c9b:	52                   	push   edx
c0011c9c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c9f:	52                   	push   edx
c0011ca0:	50                   	push   eax
c0011ca1:	e8 02 9e ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c0011ca6:	83 c4 10             	add    esp,0x10
c0011ca9:	85 c0                	test   eax,eax
c0011cab:	0f 95 c0             	setne  al
c0011cae:	31 d2                	xor    edx,edx
c0011cb0:	0f b6 c0             	movzx  eax,al
c0011cb3:	f7 d8                	neg    eax
c0011cb5:	83 d2 00             	adc    edx,0x0
c0011cb8:	83 c4 18             	add    esp,0x18
c0011cbb:	f7 da                	neg    edx
c0011cbd:	5b                   	pop    ebx
c0011cbe:	c3                   	ret    
c0011cbf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cc4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cc9:	83 c4 18             	add    esp,0x18
c0011ccc:	5b                   	pop    ebx
c0011ccd:	c3                   	ret    

c0011cce <SysSizeFromFilename(regs*)>:
c0011cce:	57                   	push   edi
c0011ccf:	56                   	push   esi
c0011cd0:	53                   	push   ebx
c0011cd1:	83 ec 20             	sub    esp,0x20
c0011cd4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011cd8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011cdb:	83 fb 02             	cmp    ebx,0x2
c0011cde:	0f 86 8a 00 00 00    	jbe    c0011d6e <SysSizeFromFilename(regs*)+0xa0>
c0011ce4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011cea:	76 1b                	jbe    c0011d07 <SysSizeFromFilename(regs*)+0x39>
c0011cec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cef:	31 d2                	xor    edx,edx
c0011cf1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cf7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cfe:	83 c4 20             	add    esp,0x20
c0011d01:	31 c0                	xor    eax,eax
c0011d03:	5b                   	pop    ebx
c0011d04:	5e                   	pop    esi
c0011d05:	5f                   	pop    edi
c0011d06:	c3                   	ret    
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	68 14 01 00 00       	push   0x114
c0011d0f:	e8 a2 5d ff ff       	call   c0007ab6 <malloc>
c0011d14:	83 c4 0c             	add    esp,0xc
c0011d17:	89 c7                	mov    edi,eax
c0011d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d21:	50                   	push   eax
c0011d22:	53                   	push   ebx
c0011d23:	57                   	push   edi
c0011d24:	e8 c1 99 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0011d29:	83 c4 0c             	add    esp,0xc
c0011d2c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011d30:	50                   	push   eax
c0011d31:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d34:	52                   	push   edx
c0011d35:	57                   	push   edi
c0011d36:	e8 6d 9d ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	85 ff                	test   edi,edi
c0011d40:	74 14                	je     c0011d56 <SysSizeFromFilename(regs*)+0x88>
c0011d42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d46:	8b 17                	mov    edx,DWORD PTR [edi]
c0011d48:	83 ec 0c             	sub    esp,0xc
c0011d4b:	57                   	push   edi
c0011d4c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d56:	85 c0                	test   eax,eax
c0011d58:	0f 95 c0             	setne  al
c0011d5b:	31 d2                	xor    edx,edx
c0011d5d:	0f b6 c0             	movzx  eax,al
c0011d60:	f7 d8                	neg    eax
c0011d62:	83 d2 00             	adc    edx,0x0
c0011d65:	83 c4 20             	add    esp,0x20
c0011d68:	f7 da                	neg    edx
c0011d6a:	5b                   	pop    ebx
c0011d6b:	5e                   	pop    esi
c0011d6c:	5f                   	pop    edi
c0011d6d:	c3                   	ret    
c0011d6e:	83 c4 20             	add    esp,0x20
c0011d71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d76:	5b                   	pop    ebx
c0011d77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d7c:	5e                   	pop    esi
c0011d7d:	5f                   	pop    edi
c0011d7e:	c3                   	ret    

c0011d7f <SysClose(regs*)>:
c0011d7f:	53                   	push   ebx
c0011d80:	83 ec 08             	sub    esp,0x8
c0011d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d87:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d8a:	83 f8 02             	cmp    eax,0x2
c0011d8d:	76 41                	jbe    c0011dd0 <SysClose(regs*)+0x51>
c0011d8f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d95:	83 fa 01             	cmp    edx,0x1
c0011d98:	76 2d                	jbe    c0011dc7 <SysClose(regs*)+0x48>
c0011d9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d9f:	77 2f                	ja     c0011dd0 <SysClose(regs*)+0x51>
c0011da1:	83 ec 0c             	sub    esp,0xc
c0011da4:	50                   	push   eax
c0011da5:	e8 09 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011daa:	89 c3                	mov    ebx,eax
c0011dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0011daf:	e8 50 9a ff ff       	call   c000b804 <File::close()>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	85 db                	test   ebx,ebx
c0011db9:	74 0c                	je     c0011dc7 <SysClose(regs*)+0x48>
c0011dbb:	83 ec 0c             	sub    esp,0xc
c0011dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dc0:	53                   	push   ebx
c0011dc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	31 c0                	xor    eax,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	83 c4 08             	add    esp,0x8
c0011dce:	5b                   	pop    ebx
c0011dcf:	c3                   	ret    
c0011dd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dd5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dda:	83 c4 08             	add    esp,0x8
c0011ddd:	5b                   	pop    ebx
c0011dde:	c3                   	ret    

c0011ddf <SysOpenDir(regs*)>:
c0011ddf:	56                   	push   esi
c0011de0:	53                   	push   ebx
c0011de1:	83 ec 04             	sub    esp,0x4
c0011de4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011de8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011deb:	85 c9                	test   ecx,ecx
c0011ded:	74 5d                	je     c0011e4c <SysOpenDir(regs*)+0x6d>
c0011def:	83 ec 0c             	sub    esp,0xc
c0011df2:	68 14 01 00 00       	push   0x114
c0011df7:	e8 ba 5c ff ff       	call   c0007ab6 <malloc>
c0011dfc:	83 c4 0c             	add    esp,0xc
c0011dff:	89 c6                	mov    esi,eax
c0011e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e09:	50                   	push   eax
c0011e0a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e0d:	52                   	push   edx
c0011e0e:	56                   	push   esi
c0011e0f:	e8 52 9e ff ff       	call   c000bc66 <Directory::Directory(char const*, Process*)>
c0011e14:	83 c4 10             	add    esp,0x10
c0011e17:	85 f6                	test   esi,esi
c0011e19:	74 31                	je     c0011e4c <SysOpenDir(regs*)+0x6d>
c0011e1b:	83 ec 0c             	sub    esp,0xc
c0011e1e:	56                   	push   esi
c0011e1f:	e8 fe 9e ff ff       	call   c000bd22 <Directory::open()>
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	85 c0                	test   eax,eax
c0011e29:	75 21                	jne    c0011e4c <SysOpenDir(regs*)+0x6d>
c0011e2b:	83 ec 0c             	sub    esp,0xc
c0011e2e:	56                   	push   esi
c0011e2f:	e8 82 73 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011e34:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	89 02                	mov    DWORD PTR [edx],eax
c0011e3c:	c1 f8 1f             	sar    eax,0x1f
c0011e3f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e42:	83 c4 04             	add    esp,0x4
c0011e45:	31 c0                	xor    eax,eax
c0011e47:	31 d2                	xor    edx,edx
c0011e49:	5b                   	pop    ebx
c0011e4a:	5e                   	pop    esi
c0011e4b:	c3                   	ret    
c0011e4c:	83 c4 04             	add    esp,0x4
c0011e4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e54:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e59:	5b                   	pop    ebx
c0011e5a:	5e                   	pop    esi
c0011e5b:	c3                   	ret    

c0011e5c <SysMakeDir(regs*)>:
c0011e5c:	56                   	push   esi
c0011e5d:	53                   	push   ebx
c0011e5e:	83 ec 10             	sub    esp,0x10
c0011e61:	68 14 01 00 00       	push   0x114
c0011e66:	e8 4b 5c ff ff       	call   c0007ab6 <malloc>
c0011e6b:	83 c4 0c             	add    esp,0xc
c0011e6e:	89 c3                	mov    ebx,eax
c0011e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e78:	50                   	push   eax
c0011e79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e7d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e80:	52                   	push   edx
c0011e81:	53                   	push   ebx
c0011e82:	e8 df 9d ff ff       	call   c000bc66 <Directory::Directory(char const*, Process*)>
c0011e87:	83 c4 10             	add    esp,0x10
c0011e8a:	85 db                	test   ebx,ebx
c0011e8c:	74 2c                	je     c0011eba <SysMakeDir(regs*)+0x5e>
c0011e8e:	83 ec 0c             	sub    esp,0xc
c0011e91:	53                   	push   ebx
c0011e92:	e8 6b a0 ff ff       	call   c000bf02 <Directory::create()>
c0011e97:	89 c6                	mov    esi,eax
c0011e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ea1:	83 c4 10             	add    esp,0x10
c0011ea4:	31 c0                	xor    eax,eax
c0011ea6:	85 f6                	test   esi,esi
c0011ea8:	0f 95 c0             	setne  al
c0011eab:	31 d2                	xor    edx,edx
c0011ead:	f7 d8                	neg    eax
c0011eaf:	83 d2 00             	adc    edx,0x0
c0011eb2:	83 c4 04             	add    esp,0x4
c0011eb5:	f7 da                	neg    edx
c0011eb7:	5b                   	pop    ebx
c0011eb8:	5e                   	pop    esi
c0011eb9:	c3                   	ret    
c0011eba:	83 c4 04             	add    esp,0x4
c0011ebd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec7:	5b                   	pop    ebx
c0011ec8:	5e                   	pop    esi
c0011ec9:	c3                   	ret    

c0011eca <SysCloseDir(regs*)>:
c0011eca:	53                   	push   ebx
c0011ecb:	83 ec 08             	sub    esp,0x8
c0011ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ed5:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ed8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011ede:	77 2f                	ja     c0011f0f <SysCloseDir(regs*)+0x45>
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	50                   	push   eax
c0011ee4:	e8 ca 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ee9:	89 c3                	mov    ebx,eax
c0011eeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011eee:	e8 8b 9e ff ff       	call   c000bd7e <Directory::close()>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	85 db                	test   ebx,ebx
c0011ef8:	74 0c                	je     c0011f06 <SysCloseDir(regs*)+0x3c>
c0011efa:	83 ec 0c             	sub    esp,0xc
c0011efd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eff:	53                   	push   ebx
c0011f00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f03:	83 c4 10             	add    esp,0x10
c0011f06:	31 c0                	xor    eax,eax
c0011f08:	31 d2                	xor    edx,edx
c0011f0a:	83 c4 08             	add    esp,0x8
c0011f0d:	5b                   	pop    ebx
c0011f0e:	c3                   	ret    
c0011f0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f19:	83 c4 08             	add    esp,0x8
c0011f1c:	5b                   	pop    ebx
c0011f1d:	c3                   	ret    

c0011f1e <SysWait(regs*)>:
c0011f1e:	83 ec 10             	sub    esp,0x10
c0011f21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f25:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f28:	52                   	push   edx
c0011f29:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f2c:	51                   	push   ecx
c0011f2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f30:	50                   	push   eax
c0011f31:	e8 d2 3d 00 00       	call   c0015d08 <waitTask(int, int*, int)>
c0011f36:	83 c4 1c             	add    esp,0x1c
c0011f39:	89 c2                	mov    edx,eax
c0011f3b:	c1 fa 1f             	sar    edx,0x1f
c0011f3e:	c3                   	ret    

c0011f3f <SysNotImpl(regs*)>:
c0011f3f:	83 ec 18             	sub    esp,0x18
c0011f42:	68 7b 1d 02 c0       	push   0xc0021d7b
c0011f47:	e8 b1 f2 ff ff       	call   c00111fd <KePanic(char const*)>
c0011f4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f56:	83 c4 1c             	add    esp,0x1c
c0011f59:	c3                   	ret    

c0011f5a <SysPanic(regs*)>:
c0011f5a:	83 ec 18             	sub    esp,0x18
c0011f5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f61:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f64:	50                   	push   eax
c0011f65:	e8 93 f2 ff ff       	call   c00111fd <KePanic(char const*)>
c0011f6a:	b8 01 00 00 00       	mov    eax,0x1
c0011f6f:	31 d2                	xor    edx,edx
c0011f71:	83 c4 1c             	add    esp,0x1c
c0011f74:	c3                   	ret    

c0011f75 <SysRmdir(regs*)>:
c0011f75:	56                   	push   esi
c0011f76:	53                   	push   ebx
c0011f77:	83 ec 20             	sub    esp,0x20
c0011f7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f7e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f81:	68 14 01 00 00       	push   0x114
c0011f86:	e8 2b 5b ff ff       	call   c0007ab6 <malloc>
c0011f8b:	83 c4 0c             	add    esp,0xc
c0011f8e:	89 c3                	mov    ebx,eax
c0011f90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f98:	50                   	push   eax
c0011f99:	56                   	push   esi
c0011f9a:	53                   	push   ebx
c0011f9b:	e8 4a 97 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0011fa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fa3:	e8 cc 99 ff ff       	call   c000b974 <File::unlink()>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	85 db                	test   ebx,ebx
c0011fad:	74 14                	je     c0011fc3 <SysRmdir(regs*)+0x4e>
c0011faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fb3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011fb5:	83 ec 0c             	sub    esp,0xc
c0011fb8:	53                   	push   ebx
c0011fb9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fc3:	85 c0                	test   eax,eax
c0011fc5:	0f 95 c0             	setne  al
c0011fc8:	31 d2                	xor    edx,edx
c0011fca:	0f b6 c0             	movzx  eax,al
c0011fcd:	f7 d8                	neg    eax
c0011fcf:	83 d2 00             	adc    edx,0x0
c0011fd2:	83 c4 14             	add    esp,0x14
c0011fd5:	f7 da                	neg    edx
c0011fd7:	5b                   	pop    ebx
c0011fd8:	5e                   	pop    esi
c0011fd9:	c3                   	ret    

c0011fda <SysUnlink(regs*)>:
c0011fda:	56                   	push   esi
c0011fdb:	53                   	push   ebx
c0011fdc:	83 ec 20             	sub    esp,0x20
c0011fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fe3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fe6:	68 14 01 00 00       	push   0x114
c0011feb:	e8 c6 5a ff ff       	call   c0007ab6 <malloc>
c0011ff0:	83 c4 0c             	add    esp,0xc
c0011ff3:	89 c3                	mov    ebx,eax
c0011ff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ffd:	50                   	push   eax
c0011ffe:	56                   	push   esi
c0011fff:	53                   	push   ebx
c0012000:	e8 e5 96 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0012005:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012008:	e8 67 99 ff ff       	call   c000b974 <File::unlink()>
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	85 db                	test   ebx,ebx
c0012012:	74 14                	je     c0012028 <SysUnlink(regs*)+0x4e>
c0012014:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012018:	8b 13                	mov    edx,DWORD PTR [ebx]
c001201a:	83 ec 0c             	sub    esp,0xc
c001201d:	53                   	push   ebx
c001201e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012028:	85 c0                	test   eax,eax
c001202a:	0f 95 c0             	setne  al
c001202d:	31 d2                	xor    edx,edx
c001202f:	0f b6 c0             	movzx  eax,al
c0012032:	f7 d8                	neg    eax
c0012034:	83 d2 00             	adc    edx,0x0
c0012037:	83 c4 14             	add    esp,0x14
c001203a:	f7 da                	neg    edx
c001203c:	5b                   	pop    ebx
c001203d:	5e                   	pop    esi
c001203e:	c3                   	ret    

c001203f <SysGetArgv(regs*)>:
c001203f:	83 ec 0c             	sub    esp,0xc
c0012042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012046:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012049:	85 c0                	test   eax,eax
c001204b:	78 2c                	js     c0012079 <SysGetArgv(regs*)+0x3a>
c001204d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012053:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012056:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001205c:	7d 1b                	jge    c0012079 <SysGetArgv(regs*)+0x3a>
c001205e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012065:	85 c0                	test   eax,eax
c0012067:	74 18                	je     c0012081 <SysGetArgv(regs*)+0x42>
c0012069:	83 ec 08             	sub    esp,0x8
c001206c:	50                   	push   eax
c001206d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012070:	50                   	push   eax
c0012071:	e8 ca e5 fe ff       	call   c0000640 <strcpy>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	31 c0                	xor    eax,eax
c001207b:	31 d2                	xor    edx,edx
c001207d:	83 c4 0c             	add    esp,0xc
c0012080:	c3                   	ret    
c0012081:	b8 01 00 00 00       	mov    eax,0x1
c0012086:	31 d2                	xor    edx,edx
c0012088:	83 c4 0c             	add    esp,0xc
c001208b:	c3                   	ret    

c001208c <SysUSleep(regs*)>:
c001208c:	83 ec 1c             	sub    esp,0x1c
c001208f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012093:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012096:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012099:	6a 00                	push   0x0
c001209b:	6a 64                	push   0x64
c001209d:	52                   	push   edx
c001209e:	50                   	push   eax
c001209f:	e8 8c d0 00 00       	call   c001f130 <__udivdi3>
c00120a4:	83 c4 14             	add    esp,0x14
c00120a7:	50                   	push   eax
c00120a8:	e8 3f 3d 00 00       	call   c0015dec <milliTenthSleep(unsigned int)>
c00120ad:	31 c0                	xor    eax,eax
c00120af:	31 d2                	xor    edx,edx
c00120b1:	83 c4 1c             	add    esp,0x1c
c00120b4:	c3                   	ret    

c00120b5 <SysSpawn(regs*)>:
c00120b5:	56                   	push   esi
c00120b6:	53                   	push   ebx
c00120b7:	83 ec 04             	sub    esp,0x4
c00120ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120be:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120c1:	85 f6                	test   esi,esi
c00120c3:	75 0a                	jne    c00120cf <SysSpawn(regs*)+0x1a>
c00120c5:	83 c4 04             	add    esp,0x4
c00120c8:	31 c0                	xor    eax,eax
c00120ca:	31 d2                	xor    edx,edx
c00120cc:	5b                   	pop    ebx
c00120cd:	5e                   	pop    esi
c00120ce:	c3                   	ret    
c00120cf:	83 ec 0c             	sub    esp,0xc
c00120d2:	68 24 07 00 00       	push   0x724
c00120d7:	e8 da 59 ff ff       	call   c0007ab6 <malloc>
c00120dc:	83 c4 10             	add    esp,0x10
c00120df:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00120e2:	89 c6                	mov    esi,eax
c00120e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120e7:	85 c9                	test   ecx,ecx
c00120e9:	75 39                	jne    c0012124 <SysSpawn(regs*)+0x6f>
c00120eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120f3:	52                   	push   edx
c00120f4:	50                   	push   eax
c00120f5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120f8:	50                   	push   eax
c00120f9:	56                   	push   esi
c00120fa:	e8 3d 33 00 00       	call   c001543c <Process::Process(char const*, Process*, char**)>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012109:	75 ba                	jne    c00120c5 <SysSpawn(regs*)+0x10>
c001210b:	83 ec 0c             	sub    esp,0xc
c001210e:	56                   	push   esi
c001210f:	e8 64 38 00 00       	call   c0015978 <Process::createUserThread()>
c0012114:	8b 06                	mov    eax,DWORD PTR [esi]
c0012116:	83 c4 10             	add    esp,0x10
c0012119:	89 c2                	mov    edx,eax
c001211b:	83 c4 04             	add    esp,0x4
c001211e:	c1 fa 1f             	sar    edx,0x1f
c0012121:	5b                   	pop    ebx
c0012122:	5e                   	pop    esi
c0012123:	c3                   	ret    
c0012124:	31 c0                	xor    eax,eax
c0012126:	eb cb                	jmp    c00120f3 <SysSpawn(regs*)+0x3e>

c0012128 <SysGetEnv(regs*)>:
c0012128:	57                   	push   edi
c0012129:	56                   	push   esi
c001212a:	53                   	push   ebx
c001212b:	83 ec 1c             	sub    esp,0x1c
c001212e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012132:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012137:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001213a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001213d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012140:	51                   	push   ecx
c0012141:	e8 6f ef ff ff       	call   c00110b5 <KeGetProcessTotalEnvCount(Process*)>
c0012146:	83 c4 10             	add    esp,0x10
c0012149:	39 c7                	cmp    edi,eax
c001214b:	7c 14                	jl     c0012161 <SysGetEnv(regs*)+0x39>
c001214d:	85 f6                	test   esi,esi
c001214f:	75 0b                	jne    c001215c <SysGetEnv(regs*)+0x34>
c0012151:	83 c4 10             	add    esp,0x10
c0012154:	31 c0                	xor    eax,eax
c0012156:	5b                   	pop    ebx
c0012157:	31 d2                	xor    edx,edx
c0012159:	5e                   	pop    esi
c001215a:	5f                   	pop    edi
c001215b:	c3                   	ret    
c001215c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001215f:	eb f0                	jmp    c0012151 <SysGetEnv(regs*)+0x29>
c0012161:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012165:	83 ec 04             	sub    esp,0x4
c0012168:	57                   	push   edi
c0012169:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001216f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012172:	57                   	push   edi
c0012173:	50                   	push   eax
c0012174:	e8 5c ef ff ff       	call   c00110d5 <KeGetProcessEnvPair(Process*, int)>
c0012179:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001217c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012180:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012184:	83 c4 0c             	add    esp,0xc
c0012187:	85 d2                	test   edx,edx
c0012189:	75 23                	jne    c00121ae <SysGetEnv(regs*)+0x86>
c001218b:	83 ec 0c             	sub    esp,0xc
c001218e:	50                   	push   eax
c001218f:	e8 dc e3 fe ff       	call   c0000570 <strlen>
c0012194:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012197:	89 c3                	mov    ebx,eax
c0012199:	e8 d2 e3 fe ff       	call   c0000570 <strlen>
c001219e:	83 c4 10             	add    esp,0x10
c00121a1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	31 d2                	xor    edx,edx
c00121aa:	5b                   	pop    ebx
c00121ab:	5e                   	pop    esi
c00121ac:	5f                   	pop    edi
c00121ad:	c3                   	ret    
c00121ae:	83 ec 08             	sub    esp,0x8
c00121b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121b4:	50                   	push   eax
c00121b5:	56                   	push   esi
c00121b6:	e8 85 e4 fe ff       	call   c0000640 <strcpy>
c00121bb:	58                   	pop    eax
c00121bc:	5a                   	pop    edx
c00121bd:	68 95 1d 02 c0       	push   0xc0021d95
c00121c2:	56                   	push   esi
c00121c3:	e8 78 e6 fe ff       	call   c0000840 <strcat>
c00121c8:	59                   	pop    ecx
c00121c9:	5b                   	pop    ebx
c00121ca:	57                   	push   edi
c00121cb:	56                   	push   esi
c00121cc:	e8 6f e6 fe ff       	call   c0000840 <strcat>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	e9 78 ff ff ff       	jmp    c0012151 <SysGetEnv(regs*)+0x29>

c00121d9 <SysSetFatAttrib(regs*)>:
c00121d9:	57                   	push   edi
c00121da:	56                   	push   esi
c00121db:	53                   	push   ebx
c00121dc:	83 ec 1c             	sub    esp,0x1c
c00121df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00121e3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00121e6:	68 14 01 00 00       	push   0x114
c00121eb:	e8 c6 58 ff ff       	call   c0007ab6 <malloc>
c00121f0:	83 c4 0c             	add    esp,0xc
c00121f3:	89 c3                	mov    ebx,eax
c00121f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121fd:	50                   	push   eax
c00121fe:	57                   	push   edi
c00121ff:	53                   	push   ebx
c0012200:	e8 e5 94 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0012205:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012208:	83 c4 0c             	add    esp,0xc
c001220b:	0f b6 d4             	movzx  edx,ah
c001220e:	0f b6 c0             	movzx  eax,al
c0012211:	52                   	push   edx
c0012212:	50                   	push   eax
c0012213:	53                   	push   ebx
c0012214:	e8 f5 97 ff ff       	call   c000ba0e <File::chfatattr(unsigned char, unsigned char)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	85 db                	test   ebx,ebx
c001221e:	74 14                	je     c0012234 <SysSetFatAttrib(regs*)+0x5b>
c0012220:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012224:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012226:	83 ec 0c             	sub    esp,0xc
c0012229:	53                   	push   ebx
c001222a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001222d:	83 c4 10             	add    esp,0x10
c0012230:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012234:	85 c0                	test   eax,eax
c0012236:	0f 95 c0             	setne  al
c0012239:	31 d2                	xor    edx,edx
c001223b:	0f b6 c0             	movzx  eax,al
c001223e:	f7 d8                	neg    eax
c0012240:	83 d2 00             	adc    edx,0x0
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	f7 da                	neg    edx
c0012248:	5b                   	pop    ebx
c0012249:	5e                   	pop    esi
c001224a:	5f                   	pop    edi
c001224b:	c3                   	ret    

c001224c <SysPipe(regs*)>:
c001224c:	57                   	push   edi
c001224d:	56                   	push   esi
c001224e:	53                   	push   ebx
c001224f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012259:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001225c:	6a 20                	push   0x20
c001225e:	e8 53 58 ff ff       	call   c0007ab6 <malloc>
c0012263:	89 c3                	mov    ebx,eax
c0012265:	58                   	pop    eax
c0012266:	5a                   	pop    edx
c0012267:	68 00 50 00 00       	push   0x5000
c001226c:	53                   	push   ebx
c001226d:	e8 b6 61 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012272:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012275:	e8 3c 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001227a:	89 07                	mov    DWORD PTR [edi],eax
c001227c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001227f:	e8 32 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012284:	83 c4 10             	add    esp,0x10
c0012287:	89 06                	mov    DWORD PTR [esi],eax
c0012289:	31 d2                	xor    edx,edx
c001228b:	5b                   	pop    ebx
c001228c:	31 c0                	xor    eax,eax
c001228e:	5e                   	pop    esi
c001228f:	5f                   	pop    edi
c0012290:	c3                   	ret    

c0012291 <SysGetUnixTime(regs*)>:
c0012291:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012296:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001229c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122a0:	e9 a1 9e ff ff       	jmp    c000c146 <Clock::timeInSecondsLocal()>

c00122a5 <string_ends_with(char const*, char const*)>:
c00122a5:	57                   	push   edi
c00122a6:	56                   	push   esi
c00122a7:	53                   	push   ebx
c00122a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122ac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122b0:	83 ec 0c             	sub    esp,0xc
c00122b3:	53                   	push   ebx
c00122b4:	e8 b7 e2 fe ff       	call   c0000570 <strlen>
c00122b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122bc:	89 c6                	mov    esi,eax
c00122be:	e8 ad e2 fe ff       	call   c0000570 <strlen>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	39 c6                	cmp    esi,eax
c00122c8:	7d 06                	jge    c00122d0 <string_ends_with(char const*, char const*)+0x2b>
c00122ca:	5b                   	pop    ebx
c00122cb:	31 c0                	xor    eax,eax
c00122cd:	5e                   	pop    esi
c00122ce:	5f                   	pop    edi
c00122cf:	c3                   	ret    
c00122d0:	83 ec 08             	sub    esp,0x8
c00122d3:	29 c6                	sub    esi,eax
c00122d5:	57                   	push   edi
c00122d6:	01 f3                	add    ebx,esi
c00122d8:	53                   	push   ebx
c00122d9:	e8 72 e4 fe ff       	call   c0000750 <strcmp>
c00122de:	83 c4 10             	add    esp,0x10
c00122e1:	85 c0                	test   eax,eax
c00122e3:	5b                   	pop    ebx
c00122e4:	0f 94 c0             	sete   al
c00122e7:	5e                   	pop    esi
c00122e8:	0f b6 c0             	movzx  eax,al
c00122eb:	5f                   	pop    edi
c00122ec:	c3                   	ret    

c00122ed <SysOpen(regs*)>:
c00122ed:	56                   	push   esi
c00122ee:	53                   	push   ebx
c00122ef:	81 ec 04 01 00 00    	sub    esp,0x104
c00122f5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00122fc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122ff:	85 c0                	test   eax,eax
c0012301:	0f 84 bd 01 00 00    	je     c00124c4 <SysOpen(regs*)+0x1d7>
c0012307:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001230a:	85 c0                	test   eax,eax
c001230c:	0f 84 b2 01 00 00    	je     c00124c4 <SysOpen(regs*)+0x1d7>
c0012312:	83 ec 04             	sub    esp,0x4
c0012315:	68 97 1d 02 c0       	push   0xc0021d97
c001231a:	50                   	push   eax
c001231b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001231f:	56                   	push   esi
c0012320:	e8 0f 92 ff ff       	call   c000b534 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012325:	89 34 24             	mov    DWORD PTR [esp],esi
c0012328:	e8 43 e2 fe ff       	call   c0000570 <strlen>
c001232d:	83 c4 10             	add    esp,0x10
c0012330:	83 e8 01             	sub    eax,0x1
c0012333:	74 21                	je     c0012356 <SysOpen(regs*)+0x69>
c0012335:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012339:	eb 12                	jmp    c001234d <SysOpen(regs*)+0x60>
c001233b:	83 fa 3a             	cmp    edx,0x3a
c001233e:	74 12                	je     c0012352 <SysOpen(regs*)+0x65>
c0012340:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012344:	83 e8 01             	sub    eax,0x1
c0012347:	74 0d                	je     c0012356 <SysOpen(regs*)+0x69>
c0012349:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001234d:	83 fa 2e             	cmp    edx,0x2e
c0012350:	75 e9                	jne    c001233b <SysOpen(regs*)+0x4e>
c0012352:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012356:	83 ec 08             	sub    esp,0x8
c0012359:	68 9b 1d 02 c0       	push   0xc0021d9b
c001235e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012361:	50                   	push   eax
c0012362:	e8 3e ff ff ff       	call   c00122a5 <string_ends_with(char const*, char const*)>
c0012367:	83 c4 10             	add    esp,0x10
c001236a:	85 c0                	test   eax,eax
c001236c:	74 1d                	je     c001238b <SysOpen(regs*)+0x9e>
c001236e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012371:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012377:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001237e:	81 c4 04 01 00 00    	add    esp,0x104
c0012384:	31 c0                	xor    eax,eax
c0012386:	31 d2                	xor    edx,edx
c0012388:	5b                   	pop    ebx
c0012389:	5e                   	pop    esi
c001238a:	c3                   	ret    
c001238b:	83 ec 08             	sub    esp,0x8
c001238e:	68 a0 1d 02 c0       	push   0xc0021da0
c0012393:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012396:	50                   	push   eax
c0012397:	e8 09 ff ff ff       	call   c00122a5 <string_ends_with(char const*, char const*)>
c001239c:	83 c4 10             	add    esp,0x10
c001239f:	85 c0                	test   eax,eax
c00123a1:	75 cb                	jne    c001236e <SysOpen(regs*)+0x81>
c00123a3:	83 ec 08             	sub    esp,0x8
c00123a6:	68 9c 1d 02 c0       	push   0xc0021d9c
c00123ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123ae:	50                   	push   eax
c00123af:	e8 9c e3 fe ff       	call   c0000750 <strcmp>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	85 c0                	test   eax,eax
c00123b9:	74 b3                	je     c001236e <SysOpen(regs*)+0x81>
c00123bb:	83 ec 08             	sub    esp,0x8
c00123be:	68 9b 1d 02 c0       	push   0xc0021d9b
c00123c3:	56                   	push   esi
c00123c4:	e8 dc fe ff ff       	call   c00122a5 <string_ends_with(char const*, char const*)>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	85 c0                	test   eax,eax
c00123ce:	75 9e                	jne    c001236e <SysOpen(regs*)+0x81>
c00123d0:	83 ec 08             	sub    esp,0x8
c00123d3:	68 a5 1d 02 c0       	push   0xc0021da5
c00123d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123db:	50                   	push   eax
c00123dc:	e8 c4 fe ff ff       	call   c00122a5 <string_ends_with(char const*, char const*)>
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	85 c0                	test   eax,eax
c00123e6:	0f 85 eb 00 00 00    	jne    c00124d7 <SysOpen(regs*)+0x1ea>
c00123ec:	83 ec 08             	sub    esp,0x8
c00123ef:	68 aa 1d 02 c0       	push   0xc0021daa
c00123f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123f7:	50                   	push   eax
c00123f8:	e8 a8 fe ff ff       	call   c00122a5 <string_ends_with(char const*, char const*)>
c00123fd:	83 c4 10             	add    esp,0x10
c0012400:	85 c0                	test   eax,eax
c0012402:	0f 85 cf 00 00 00    	jne    c00124d7 <SysOpen(regs*)+0x1ea>
c0012408:	83 ec 08             	sub    esp,0x8
c001240b:	68 a6 1d 02 c0       	push   0xc0021da6
c0012410:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012413:	51                   	push   ecx
c0012414:	e8 37 e3 fe ff       	call   c0000750 <strcmp>
c0012419:	83 c4 10             	add    esp,0x10
c001241c:	85 c0                	test   eax,eax
c001241e:	0f 84 b3 00 00 00    	je     c00124d7 <SysOpen(regs*)+0x1ea>
c0012424:	83 ec 08             	sub    esp,0x8
c0012427:	68 a5 1d 02 c0       	push   0xc0021da5
c001242c:	56                   	push   esi
c001242d:	e8 73 fe ff ff       	call   c00122a5 <string_ends_with(char const*, char const*)>
c0012432:	83 c4 10             	add    esp,0x10
c0012435:	85 c0                	test   eax,eax
c0012437:	0f 85 9a 00 00 00    	jne    c00124d7 <SysOpen(regs*)+0x1ea>
c001243d:	83 ec 0c             	sub    esp,0xc
c0012440:	68 14 01 00 00       	push   0x114
c0012445:	e8 6c 56 ff ff       	call   c0007ab6 <malloc>
c001244a:	83 c4 0c             	add    esp,0xc
c001244d:	89 c6                	mov    esi,eax
c001244f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012454:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012457:	50                   	push   eax
c0012458:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001245b:	52                   	push   edx
c001245c:	56                   	push   esi
c001245d:	e8 88 92 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0012462:	83 c4 10             	add    esp,0x10
c0012465:	85 f6                	test   esi,esi
c0012467:	74 5b                	je     c00124c4 <SysOpen(regs*)+0x1d7>
c0012469:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001246c:	0f b6 c2             	movzx  eax,dl
c001246f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012472:	89 d0                	mov    eax,edx
c0012474:	83 e0 01             	and    eax,0x1
c0012477:	f6 c2 02             	test   dl,0x2
c001247a:	74 03                	je     c001247f <SysOpen(regs*)+0x192>
c001247c:	83 c8 02             	or     eax,0x2
c001247f:	f6 c2 04             	test   dl,0x4
c0012482:	74 03                	je     c0012487 <SysOpen(regs*)+0x19a>
c0012484:	83 c8 04             	or     eax,0x4
c0012487:	f6 c2 08             	test   dl,0x8
c001248a:	74 03                	je     c001248f <SysOpen(regs*)+0x1a2>
c001248c:	83 c8 0a             	or     eax,0xa
c001248f:	80 e2 10             	and    dl,0x10
c0012492:	74 03                	je     c0012497 <SysOpen(regs*)+0x1aa>
c0012494:	83 c8 12             	or     eax,0x12
c0012497:	83 ec 08             	sub    esp,0x8
c001249a:	50                   	push   eax
c001249b:	56                   	push   esi
c001249c:	e8 05 93 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c00124a1:	83 c4 10             	add    esp,0x10
c00124a4:	85 c0                	test   eax,eax
c00124a6:	75 1c                	jne    c00124c4 <SysOpen(regs*)+0x1d7>
c00124a8:	83 ec 0c             	sub    esp,0xc
c00124ab:	56                   	push   esi
c00124ac:	e8 05 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124b1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124b4:	83 c4 10             	add    esp,0x10
c00124b7:	89 02                	mov    DWORD PTR [edx],eax
c00124b9:	c1 f8 1f             	sar    eax,0x1f
c00124bc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124bf:	e9 ba fe ff ff       	jmp    c001237e <SysOpen(regs*)+0x91>
c00124c4:	81 c4 04 01 00 00    	add    esp,0x104
c00124ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124d4:	5b                   	pop    ebx
c00124d5:	5e                   	pop    esi
c00124d6:	c3                   	ret    
c00124d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124da:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00124e0:	e9 92 fe ff ff       	jmp    c0012377 <SysOpen(regs*)+0x8a>

c00124e5 <KeSystemCall(regs*, void*)>:
c00124e5:	53                   	push   ebx
c00124e6:	83 ec 08             	sub    esp,0x8
c00124e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00124f0:	83 f8 3b             	cmp    eax,0x3b
c00124f3:	77 16                	ja     c001250b <KeSystemCall(regs*, void*)+0x26>
c00124f5:	8b 14 85 c0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce40]
c00124fc:	85 d2                	test   edx,edx
c00124fe:	74 0b                	je     c001250b <KeSystemCall(regs*, void*)+0x26>
c0012500:	83 ec 0c             	sub    esp,0xc
c0012503:	53                   	push   ebx
c0012504:	ff d2                	call   edx
c0012506:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012509:	eb 0d                	jmp    c0012518 <KeSystemCall(regs*, void*)+0x33>
c001250b:	52                   	push   edx
c001250c:	52                   	push   edx
c001250d:	50                   	push   eax
c001250e:	68 af 1d 02 c0       	push   0xc0021daf
c0012513:	e8 2d 84 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012518:	83 c4 10             	add    esp,0x10
c001251b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012520:	31 d2                	xor    edx,edx
c0012522:	83 c4 08             	add    esp,0x8
c0012525:	5b                   	pop    ebx
c0012526:	c3                   	ret    
c0012527:	90                   	nop

c0012528 <KeSwitchEndian16(unsigned short)>:
c0012528:	83 ec 04             	sub    esp,0x4
c001252b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001252f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012533:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012537:	c1 f8 08             	sar    eax,0x8
c001253a:	89 c2                	mov    edx,eax
c001253c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012540:	c1 e0 08             	shl    eax,0x8
c0012543:	09 d0                	or     eax,edx
c0012545:	83 c4 04             	add    esp,0x4
c0012548:	c3                   	ret    
c0012549:	8d 76 00             	lea    esi,[esi+0x0]

c001254c <KeSwitchEndian32(unsigned int)>:
c001254c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012550:	c1 e8 18             	shr    eax,0x18
c0012553:	89 c2                	mov    edx,eax
c0012555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012559:	c1 e0 08             	shl    eax,0x8
c001255c:	25 00 00 ff 00       	and    eax,0xff0000
c0012561:	09 c2                	or     edx,eax
c0012563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012567:	c1 e8 08             	shr    eax,0x8
c001256a:	25 00 ff 00 00       	and    eax,0xff00
c001256f:	09 c2                	or     edx,eax
c0012571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012575:	c1 e0 18             	shl    eax,0x18
c0012578:	09 d0                	or     eax,edx
c001257a:	c3                   	ret    
c001257b:	90                   	nop

c001257c <EthernetCRC32(unsigned char*, int)>:
c001257c:	83 ec 10             	sub    esp,0x10
c001257f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012584:	75 0a                	jne    c0012590 <EthernetCRC32(unsigned char*, int)+0x14>
c0012586:	b8 00 00 00 00       	mov    eax,0x0
c001258b:	e9 8c 00 00 00       	jmp    c001261c <EthernetCRC32(unsigned char*, int)+0xa0>
c0012590:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012595:	7f 09                	jg     c00125a0 <EthernetCRC32(unsigned char*, int)+0x24>
c0012597:	b8 00 00 00 00       	mov    eax,0x0
c001259c:	eb 7e                	jmp    c001261c <EthernetCRC32(unsigned char*, int)+0xa0>
c001259e:	66 90                	xchg   ax,ax
c00125a0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00125a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00125b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125b4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00125b8:	7d 5a                	jge    c0012614 <EthernetCRC32(unsigned char*, int)+0x98>
c00125ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125c2:	01 d0                	add    eax,edx
c00125c4:	8a 00                	mov    al,BYTE PTR [eax]
c00125c6:	0f b6 c0             	movzx  eax,al
c00125c9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00125cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125d5:	8d 76 00             	lea    esi,[esi+0x0]
c00125d8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00125dd:	7f 2d                	jg     c001260c <EthernetCRC32(unsigned char*, int)+0x90>
c00125df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125e3:	83 e0 01             	and    eax,0x1
c00125e6:	74 10                	je     c00125f8 <EthernetCRC32(unsigned char*, int)+0x7c>
c00125e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125ec:	d1 e8                	shr    eax,1
c00125ee:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00125f3:	eb 0b                	jmp    c0012600 <EthernetCRC32(unsigned char*, int)+0x84>
c00125f5:	8d 76 00             	lea    esi,[esi+0x0]
c00125f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125fc:	d1 e8                	shr    eax,1
c00125fe:	66 90                	xchg   ax,ax
c0012600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012604:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012609:	eb cd                	jmp    c00125d8 <EthernetCRC32(unsigned char*, int)+0x5c>
c001260b:	90                   	nop
c001260c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012611:	eb 9d                	jmp    c00125b0 <EthernetCRC32(unsigned char*, int)+0x34>
c0012613:	90                   	nop
c0012614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012618:	f7 d0                	not    eax
c001261a:	66 90                	xchg   ax,ax
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	c3                   	ret    

c0012620 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012620:	83 ec 2c             	sub    esp,0x2c
c0012623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012627:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001262c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012630:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012638:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001263b:	0f b7 c0             	movzx  eax,ax
c001263e:	3d 06 08 00 00       	cmp    eax,0x806
c0012643:	75 13                	jne    c0012658 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012645:	83 ec 0c             	sub    esp,0xc
c0012648:	68 c3 1d 02 c0       	push   0xc0021dc3
c001264d:	e8 f3 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012652:	83 c4 10             	add    esp,0x10
c0012655:	eb 25                	jmp    c001267c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012657:	90                   	nop
c0012658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001265c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001265f:	0f b7 c0             	movzx  eax,ax
c0012662:	3d 00 08 00 00       	cmp    eax,0x800
c0012667:	75 13                	jne    c001267c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012669:	83 ec 0c             	sub    esp,0xc
c001266c:	68 d9 1d 02 c0       	push   0xc0021dd9
c0012671:	e8 cf 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012676:	83 c4 10             	add    esp,0x10
c0012679:	8d 76 00             	lea    esi,[esi+0x0]
c001267c:	90                   	nop
c001267d:	83 c4 2c             	add    esp,0x2c
c0012680:	c3                   	ret    

c0012681 <CmOpen(char const*)>:
c0012681:	57                   	push   edi
c0012682:	56                   	push   esi
c0012683:	53                   	push   ebx
c0012684:	83 ec 1c             	sub    esp,0x1c
c0012687:	6a 30                	push   0x30
c0012689:	e8 28 54 ff ff       	call   c0007ab6 <malloc>
c001268e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012695:	89 c3                	mov    ebx,eax
c0012697:	e8 1a 54 ff ff       	call   c0007ab6 <malloc>
c001269c:	83 c4 0c             	add    esp,0xc
c001269f:	89 c6                	mov    esi,eax
c00126a1:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00126a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00126ab:	50                   	push   eax
c00126ac:	e8 39 90 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c00126b1:	83 c4 0c             	add    esp,0xc
c00126b4:	89 33                	mov    DWORD PTR [ebx],esi
c00126b6:	8d 44 24 07          	lea    eax,[esp+0x7]
c00126ba:	50                   	push   eax
c00126bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00126bf:	50                   	push   eax
c00126c0:	56                   	push   esi
c00126c1:	e8 e2 93 ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c00126c6:	5a                   	pop    edx
c00126c7:	59                   	pop    ecx
c00126c8:	6a 01                	push   0x1
c00126ca:	ff 33                	push   DWORD PTR [ebx]
c00126cc:	e8 d5 90 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c00126d1:	5e                   	pop    esi
c00126d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126d6:	e8 db 53 ff ff       	call   c0007ab6 <malloc>
c00126db:	5a                   	pop    edx
c00126dc:	89 c7                	mov    edi,eax
c00126de:	8d 74 24 10          	lea    esi,[esp+0x10]
c00126e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00126e6:	56                   	push   esi
c00126e7:	57                   	push   edi
c00126e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126f0:	50                   	push   eax
c00126f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126f4:	83 c4 14             	add    esp,0x14
c00126f7:	ff 33                	push   DWORD PTR [ebx]
c00126f9:	e8 06 91 ff ff       	call   c000b804 <File::close()>
c00126fe:	59                   	pop    ecx
c00126ff:	58                   	pop    eax
c0012700:	6a 13                	push   0x13
c0012702:	ff 33                	push   DWORD PTR [ebx]
c0012704:	e8 9d 90 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0012709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001270b:	8b 10                	mov    edx,DWORD PTR [eax]
c001270d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012710:	57                   	push   edi
c0012711:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012715:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012719:	50                   	push   eax
c001271a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001271d:	83 c4 14             	add    esp,0x14
c0012720:	57                   	push   edi
c0012721:	e8 a0 53 ff ff       	call   c0007ac6 <free>
c0012726:	83 c4 10             	add    esp,0x10
c0012729:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001272c:	75 10                	jne    c001273e <CmOpen(char const*)+0xbd>
c001272e:	83 ec 0c             	sub    esp,0xc
c0012731:	68 ee 1d 02 c0       	push   0xc0021dee
c0012736:	e8 c2 ea ff ff       	call   c00111fd <KePanic(char const*)>
c001273b:	83 c4 10             	add    esp,0x10
c001273e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012741:	50                   	push   eax
c0012742:	6a 00                	push   0x0
c0012744:	6a 00                	push   0x0
c0012746:	ff 33                	push   DWORD PTR [ebx]
c0012748:	e8 17 91 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c001274d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001274f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012751:	89 34 24             	mov    DWORD PTR [esp],esi
c0012754:	57                   	push   edi
c0012755:	6a 00                	push   0x0
c0012757:	6a 2b                	push   0x2b
c0012759:	50                   	push   eax
c001275a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001275d:	83 c4 1c             	add    esp,0x1c
c0012760:	6a 00                	push   0x0
c0012762:	6a 00                	push   0x0
c0012764:	ff 33                	push   DWORD PTR [ebx]
c0012766:	e8 f9 90 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c001276b:	83 c4 0c             	add    esp,0xc
c001276e:	6a 08                	push   0x8
c0012770:	68 ff 1d 02 c0       	push   0xc0021dff
c0012775:	57                   	push   edi
c0012776:	e8 05 dc fe ff       	call   c0000380 <memcmp>
c001277b:	83 c4 10             	add    esp,0x10
c001277e:	85 c0                	test   eax,eax
c0012780:	74 10                	je     c0012792 <CmOpen(char const*)+0x111>
c0012782:	83 ec 0c             	sub    esp,0xc
c0012785:	68 08 1e 02 c0       	push   0xc0021e08
c001278a:	e8 6e ea ff ff       	call   c00111fd <KePanic(char const*)>
c001278f:	83 c4 10             	add    esp,0x10
c0012792:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012796:	89 d8                	mov    eax,ebx
c0012798:	83 c4 10             	add    esp,0x10
c001279b:	5b                   	pop    ebx
c001279c:	5e                   	pop    esi
c001279d:	5f                   	pop    edi
c001279e:	c3                   	ret    

c001279f <CmClose(Reghive_Tag*)>:
c001279f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00127a3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00127a7:	74 0b                	je     c00127b4 <CmClose(Reghive_Tag*)+0x15>
c00127a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00127ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127af:	e9 50 90 ff ff       	jmp    c000b804 <File::close()>
c00127b4:	c3                   	ret    

c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00127b5:	53                   	push   ebx
c00127b6:	83 ec 18             	sub    esp,0x18
c00127b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00127bd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00127c1:	74 29                	je     c00127ec <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00127c3:	50                   	push   eax
c00127c4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00127c9:	99                   	cdq    
c00127ca:	52                   	push   edx
c00127cb:	50                   	push   eax
c00127cc:	ff 33                	push   DWORD PTR [ebx]
c00127ce:	e8 91 90 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c00127d3:	5a                   	pop    edx
c00127d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127d6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00127da:	8b 10                	mov    edx,DWORD PTR [eax]
c00127dc:	51                   	push   ecx
c00127dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00127e1:	6a 00                	push   0x0
c00127e3:	6a 2b                	push   0x2b
c00127e5:	50                   	push   eax
c00127e6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127e9:	83 c4 20             	add    esp,0x20
c00127ec:	83 c4 18             	add    esp,0x18
c00127ef:	5b                   	pop    ebx
c00127f0:	c3                   	ret    

c00127f1 <CmGetString(Reghive_Tag*, int, char*)>:
c00127f1:	55                   	push   ebp
c00127f2:	57                   	push   edi
c00127f3:	56                   	push   esi
c00127f4:	53                   	push   ebx
c00127f5:	31 db                	xor    ebx,ebx
c00127f7:	83 ec 70             	sub    esp,0x70
c00127fa:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012801:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012805:	50                   	push   eax
c0012806:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001280d:	55                   	push   ebp
c001280e:	e8 a2 ff ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012813:	83 c4 10             	add    esp,0x10
c0012816:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001281b:	c1 e0 08             	shl    eax,0x8
c001281e:	89 c2                	mov    edx,eax
c0012820:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012825:	09 d0                	or     eax,edx
c0012827:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001282c:	c1 e0 08             	shl    eax,0x8
c001282f:	09 d0                	or     eax,edx
c0012831:	74 25                	je     c0012858 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012833:	6b fb 0d             	imul   edi,ebx,0xd
c0012836:	52                   	push   edx
c0012837:	8d 54 24 39          	lea    edx,[esp+0x39]
c001283b:	52                   	push   edx
c001283c:	50                   	push   eax
c001283d:	55                   	push   ebp
c001283e:	e8 72 ff ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012843:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012847:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001284e:	b9 27 00 00 00       	mov    ecx,0x27
c0012853:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	83 c3 03             	add    ebx,0x3
c001285b:	83 fb 15             	cmp    ebx,0x15
c001285e:	75 b6                	jne    c0012816 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012860:	83 c4 6c             	add    esp,0x6c
c0012863:	5b                   	pop    ebx
c0012864:	5e                   	pop    esi
c0012865:	5f                   	pop    edi
c0012866:	5d                   	pop    ebp
c0012867:	c3                   	ret    

c0012868 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012868:	83 ec 40             	sub    esp,0x40
c001286b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001286f:	50                   	push   eax
c0012870:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012874:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012878:	e8 38 ff ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	83 c8 ff             	or     eax,0xffffffff
c0012883:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012888:	75 19                	jne    c00128a3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001288a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001288f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012894:	c1 e0 08             	shl    eax,0x8
c0012897:	09 c2                	or     edx,eax
c0012899:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001289e:	c1 e0 10             	shl    eax,0x10
c00128a1:	09 d0                	or     eax,edx
c00128a3:	83 c4 3c             	add    esp,0x3c
c00128a6:	c3                   	ret    

c00128a7 <CmGetNext(Reghive_Tag*, int)>:
c00128a7:	83 ec 40             	sub    esp,0x40
c00128aa:	8d 44 24 09          	lea    eax,[esp+0x9]
c00128ae:	50                   	push   eax
c00128af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128b7:	e8 f9 fe ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128bc:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00128c1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00128c6:	c1 e0 08             	shl    eax,0x8
c00128c9:	09 c2                	or     edx,eax
c00128cb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00128d0:	83 c4 4c             	add    esp,0x4c
c00128d3:	c1 e0 10             	shl    eax,0x10
c00128d6:	09 d0                	or     eax,edx
c00128d8:	c3                   	ret    

c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00128d9:	53                   	push   ebx
c00128da:	83 ec 18             	sub    esp,0x18
c00128dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128e1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128e5:	74 29                	je     c0012910 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128e7:	50                   	push   eax
c00128e8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128ed:	99                   	cdq    
c00128ee:	52                   	push   edx
c00128ef:	50                   	push   eax
c00128f0:	ff 33                	push   DWORD PTR [ebx]
c00128f2:	e8 6d 8f ff ff       	call   c000b864 <File::seek(unsigned long long)>
c00128f7:	5a                   	pop    edx
c00128f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128fa:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0012900:	51                   	push   ecx
c0012901:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012905:	6a 00                	push   0x0
c0012907:	6a 2b                	push   0x2b
c0012909:	50                   	push   eax
c001290a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001290d:	83 c4 20             	add    esp,0x20
c0012910:	83 c4 18             	add    esp,0x18
c0012913:	5b                   	pop    ebx
c0012914:	c3                   	ret    

c0012915 <CmFreeExtent(Reghive_Tag*, int)>:
c0012915:	53                   	push   ebx
c0012916:	83 ec 3c             	sub    esp,0x3c
c0012919:	6a 2b                	push   0x2b
c001291b:	6a 00                	push   0x0
c001291d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012921:	53                   	push   ebx
c0012922:	e8 c9 db fe ff       	call   c00004f0 <memset>
c0012927:	83 c4 0c             	add    esp,0xc
c001292a:	53                   	push   ebx
c001292b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001292f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012933:	e8 a1 ff ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012938:	83 c4 48             	add    esp,0x48
c001293b:	5b                   	pop    ebx
c001293c:	c3                   	ret    

c001293d <CmUpdateHeader(Reghive_Tag*)>:
c001293d:	83 ec 0c             	sub    esp,0xc
c0012940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012944:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012948:	74 10                	je     c001295a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001294a:	52                   	push   edx
c001294b:	8d 50 05             	lea    edx,[eax+0x5]
c001294e:	52                   	push   edx
c001294f:	6a 00                	push   0x0
c0012951:	50                   	push   eax
c0012952:	e8 82 ff ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	83 c4 0c             	add    esp,0xc
c001295d:	c3                   	ret    

c001295e <CmExpand(Reghive_Tag*, int)>:
c001295e:	57                   	push   edi
c001295f:	56                   	push   esi
c0012960:	83 ce ff             	or     esi,0xffffffff
c0012963:	53                   	push   ebx
c0012964:	83 ec 30             	sub    esp,0x30
c0012967:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001296b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001296f:	74 5f                	je     c00129d0 <CmExpand(Reghive_Tag*, int)+0x72>
c0012971:	31 d2                	xor    edx,edx
c0012973:	31 f6                	xor    esi,esi
c0012975:	50                   	push   eax
c0012976:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001297a:	52                   	push   edx
c001297b:	50                   	push   eax
c001297c:	ff 33                	push   DWORD PTR [ebx]
c001297e:	e8 e1 8e ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0012983:	83 c4 0c             	add    esp,0xc
c0012986:	6a 2b                	push   0x2b
c0012988:	6a 00                	push   0x0
c001298a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001298e:	57                   	push   edi
c001298f:	e8 5c db fe ff       	call   c00004f0 <memset>
c0012994:	83 c4 10             	add    esp,0x10
c0012997:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001299b:	7d 1b                	jge    c00129b8 <CmExpand(Reghive_Tag*, int)+0x5a>
c001299d:	83 ec 0c             	sub    esp,0xc
c00129a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129a2:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00129a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00129a8:	46                   	inc    esi
c00129a9:	51                   	push   ecx
c00129aa:	57                   	push   edi
c00129ab:	6a 00                	push   0x0
c00129ad:	6a 2b                	push   0x2b
c00129af:	50                   	push   eax
c00129b0:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00129b3:	83 c4 20             	add    esp,0x20
c00129b6:	eb df                	jmp    c0012997 <CmExpand(Reghive_Tag*, int)+0x39>
c00129b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00129bc:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00129bf:	83 ec 0c             	sub    esp,0xc
c00129c2:	01 f2                	add    edx,esi
c00129c4:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00129c7:	53                   	push   ebx
c00129c8:	e8 70 ff ff ff       	call   c001293d <CmUpdateHeader(Reghive_Tag*)>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	83 c4 30             	add    esp,0x30
c00129d3:	89 f0                	mov    eax,esi
c00129d5:	5b                   	pop    ebx
c00129d6:	5e                   	pop    esi
c00129d7:	5f                   	pop    edi
c00129d8:	c3                   	ret    

c00129d9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00129d9:	55                   	push   ebp
c00129da:	57                   	push   edi
c00129db:	56                   	push   esi
c00129dc:	53                   	push   ebx
c00129dd:	83 cb ff             	or     ebx,0xffffffff
c00129e0:	83 ec 1c             	sub    esp,0x1c
c00129e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129e7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00129eb:	74 68                	je     c0012a55 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129ed:	be 2b 00 00 00       	mov    esi,0x2b
c00129f2:	51                   	push   ecx
c00129f3:	31 ff                	xor    edi,edi
c00129f5:	6a 00                	push   0x0
c00129f7:	31 db                	xor    ebx,ebx
c00129f9:	6a 00                	push   0x0
c00129fb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129fe:	e8 61 8e ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0012a03:	83 c4 10             	add    esp,0x10
c0012a06:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012a09:	76 3b                	jbe    c0012a46 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012a0b:	83 ec 0c             	sub    esp,0xc
c0012a0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a11:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a15:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a17:	51                   	push   ecx
c0012a18:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a1c:	51                   	push   ecx
c0012a1d:	6a 00                	push   0x0
c0012a1f:	6a 01                	push   0x1
c0012a21:	50                   	push   eax
c0012a22:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a25:	83 c4 20             	add    esp,0x20
c0012a28:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a2d:	74 26                	je     c0012a55 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a2f:	43                   	inc    ebx
c0012a30:	52                   	push   edx
c0012a31:	57                   	push   edi
c0012a32:	56                   	push   esi
c0012a33:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a36:	e8 29 8e ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0012a3b:	83 c6 2b             	add    esi,0x2b
c0012a3e:	83 d7 00             	adc    edi,0x0
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	eb c0                	jmp    c0012a06 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a46:	50                   	push   eax
c0012a47:	50                   	push   eax
c0012a48:	6a 40                	push   0x40
c0012a4a:	55                   	push   ebp
c0012a4b:	e8 0e ff ff ff       	call   c001295e <CmExpand(Reghive_Tag*, int)>
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	89 c3                	mov    ebx,eax
c0012a55:	83 c4 1c             	add    esp,0x1c
c0012a58:	89 d8                	mov    eax,ebx
c0012a5a:	5b                   	pop    ebx
c0012a5b:	5e                   	pop    esi
c0012a5c:	5f                   	pop    edi
c0012a5d:	5d                   	pop    ebp
c0012a5e:	c3                   	ret    

c0012a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012a5f:	55                   	push   ebp
c0012a60:	57                   	push   edi
c0012a61:	56                   	push   esi
c0012a62:	53                   	push   ebx
c0012a63:	81 ec 88 00 00 00    	sub    esp,0x88
c0012a69:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012a70:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a77:	e8 5d ff ff ff       	call   c00129d9 <CmFindUnusedExtent(Reghive_Tag*)>
c0012a7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a80:	83 c4 0c             	add    esp,0xc
c0012a83:	6a 2b                	push   0x2b
c0012a85:	6a 00                	push   0x0
c0012a87:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a8b:	55                   	push   ebp
c0012a8c:	e8 5f da fe ff       	call   c00004f0 <memset>
c0012a91:	83 c4 10             	add    esp,0x10
c0012a94:	85 db                	test   ebx,ebx
c0012a96:	74 12                	je     c0012aaa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a98:	51                   	push   ecx
c0012a99:	55                   	push   ebp
c0012a9a:	53                   	push   ebx
c0012a9b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012aa2:	e8 0e fd ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012aa7:	83 c4 10             	add    esp,0x10
c0012aaa:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012aae:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012ab5:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012aba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012abc:	85 db                	test   ebx,ebx
c0012abe:	74 49                	je     c0012b09 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ac0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012ac5:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012aca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ace:	c1 e0 08             	shl    eax,0x8
c0012ad1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012ad7:	09 c8                	or     eax,ecx
c0012ad9:	74 11                	je     c0012aec <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012adb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012adf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012ae3:	c1 e8 10             	shr    eax,0x10
c0012ae6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012aea:	eb 0f                	jmp    c0012afb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012aec:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012af1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012af6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012afb:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012aff:	c1 ea 08             	shr    edx,0x8
c0012b02:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012b07:	eb 0f                	jmp    c0012b18 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012b09:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b0e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b13:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b18:	52                   	push   edx
c0012b19:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b1d:	50                   	push   eax
c0012b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b22:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b29:	e8 ab fd ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b2e:	83 c4 10             	add    esp,0x10
c0012b31:	85 db                	test   ebx,ebx
c0012b33:	74 12                	je     c0012b47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b35:	50                   	push   eax
c0012b36:	55                   	push   ebp
c0012b37:	53                   	push   ebx
c0012b38:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b3f:	e8 95 fd ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b44:	83 c4 10             	add    esp,0x10
c0012b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b4b:	83 c4 7c             	add    esp,0x7c
c0012b4e:	5b                   	pop    ebx
c0012b4f:	5e                   	pop    esi
c0012b50:	5f                   	pop    edi
c0012b51:	5d                   	pop    ebp
c0012b52:	c3                   	ret    

c0012b53 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012b53:	55                   	push   ebp
c0012b54:	57                   	push   edi
c0012b55:	56                   	push   esi
c0012b56:	53                   	push   ebx
c0012b57:	bb 27 00 00 00       	mov    ebx,0x27
c0012b5c:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b62:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b69:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012b70:	e8 fb d9 fe ff       	call   c0000570 <strlen>
c0012b75:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b78:	89 c8                	mov    eax,ecx
c0012b7a:	99                   	cdq    
c0012b7b:	f7 fb                	idiv   ebx
c0012b7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b8a:	7e 10                	jle    c0012b9c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	68 19 1e 02 c0       	push   0xc0021e19
c0012b94:	e8 64 e6 ff ff       	call   c00111fd <KePanic(char const*)>
c0012b99:	83 c4 10             	add    esp,0x10
c0012b9c:	31 ff                	xor    edi,edi
c0012b9e:	50                   	push   eax
c0012b9f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012ba3:	53                   	push   ebx
c0012ba4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bab:	56                   	push   esi
c0012bac:	e8 04 fc ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bb1:	83 c4 10             	add    esp,0x10
c0012bb4:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012bb8:	89 d0                	mov    eax,edx
c0012bba:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012bbe:	c1 e0 08             	shl    eax,0x8
c0012bc1:	09 c2                	or     edx,eax
c0012bc3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012bc7:	c1 e2 08             	shl    edx,0x8
c0012bca:	09 c2                	or     edx,eax
c0012bcc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012bd0:	7e 76                	jle    c0012c48 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012bd2:	85 d2                	test   edx,edx
c0012bd4:	75 25                	jne    c0012bfb <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012bd6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012bdb:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012bdf:	50                   	push   eax
c0012be0:	6a 00                	push   0x0
c0012be2:	6a 00                	push   0x0
c0012be4:	56                   	push   esi
c0012be5:	e8 75 fe ff ff       	call   c0012a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	89 c2                	mov    edx,eax
c0012bef:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012bf2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012bf5:	c1 f8 10             	sar    eax,0x10
c0012bf8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012bfb:	55                   	push   ebp
c0012bfc:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012c00:	55                   	push   ebp
c0012c01:	52                   	push   edx
c0012c02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012c06:	56                   	push   esi
c0012c07:	e8 a9 fb ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c0c:	83 c4 0c             	add    esp,0xc
c0012c0f:	6a 27                	push   0x27
c0012c11:	6a 00                	push   0x0
c0012c13:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c17:	51                   	push   ecx
c0012c18:	e8 d3 d8 fe ff       	call   c00004f0 <memset>
c0012c1d:	83 c4 0c             	add    esp,0xc
c0012c20:	6b c7 27             	imul   eax,edi,0x27
c0012c23:	6a 27                	push   0x27
c0012c25:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c2c:	50                   	push   eax
c0012c2d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c31:	51                   	push   ecx
c0012c32:	e8 49 da fe ff       	call   c0000680 <strncpy>
c0012c37:	83 c4 0c             	add    esp,0xc
c0012c3a:	55                   	push   ebp
c0012c3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c3f:	52                   	push   edx
c0012c40:	56                   	push   esi
c0012c41:	e8 93 fc ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c46:	eb 19                	jmp    c0012c61 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012c48:	85 d2                	test   edx,edx
c0012c4a:	74 18                	je     c0012c64 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012c4c:	51                   	push   ecx
c0012c4d:	51                   	push   ecx
c0012c4e:	52                   	push   edx
c0012c4f:	56                   	push   esi
c0012c50:	e8 c0 fc ff ff       	call   c0012915 <CmFreeExtent(Reghive_Tag*, int)>
c0012c55:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012c59:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012c5d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012c61:	83 c4 10             	add    esp,0x10
c0012c64:	47                   	inc    edi
c0012c65:	83 c3 03             	add    ebx,0x3
c0012c68:	83 ff 07             	cmp    edi,0x7
c0012c6b:	0f 85 43 ff ff ff    	jne    c0012bb4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012c71:	50                   	push   eax
c0012c72:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012c76:	50                   	push   eax
c0012c77:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c7e:	56                   	push   esi
c0012c7f:	e8 55 fc ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c84:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c8a:	5b                   	pop    ebx
c0012c8b:	5e                   	pop    esi
c0012c8c:	5f                   	pop    edi
c0012c8d:	5d                   	pop    ebp
c0012c8e:	c3                   	ret    

c0012c8f <CmGetMatch(char*, char*, bool, bool*)>:
c0012c8f:	56                   	push   esi
c0012c90:	53                   	push   ebx
c0012c91:	50                   	push   eax
c0012c92:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c96:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c9b:	74 25                	je     c0012cc2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c9d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012ca0:	31 db                	xor    ebx,ebx
c0012ca2:	50                   	push   eax
c0012ca3:	50                   	push   eax
c0012ca4:	8d 04 9d c0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd40]
c0012cab:	50                   	push   eax
c0012cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cb0:	e8 9b da fe ff       	call   c0000750 <strcmp>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	85 c0                	test   eax,eax
c0012cba:	74 2e                	je     c0012cea <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012cbc:	43                   	inc    ebx
c0012cbd:	83 fb 3f             	cmp    ebx,0x3f
c0012cc0:	75 e0                	jne    c0012ca2 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012cc2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cc5:	31 db                	xor    ebx,ebx
c0012cc7:	8d 04 9d c0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd40]
c0012cce:	51                   	push   ecx
c0012ccf:	51                   	push   ecx
c0012cd0:	50                   	push   eax
c0012cd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cd5:	e8 76 da fe ff       	call   c0000750 <strcmp>
c0012cda:	83 c4 10             	add    esp,0x10
c0012cdd:	85 c0                	test   eax,eax
c0012cdf:	74 09                	je     c0012cea <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012ce1:	43                   	inc    ebx
c0012ce2:	83 fb 3f             	cmp    ebx,0x3f
c0012ce5:	75 e0                	jne    c0012cc7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012ce7:	83 cb ff             	or     ebx,0xffffffff
c0012cea:	89 d8                	mov    eax,ebx
c0012cec:	5a                   	pop    edx
c0012ced:	5b                   	pop    ebx
c0012cee:	5e                   	pop    esi
c0012cef:	c3                   	ret    

c0012cf0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012cf0:	55                   	push   ebp
c0012cf1:	31 c0                	xor    eax,eax
c0012cf3:	57                   	push   edi
c0012cf4:	56                   	push   esi
c0012cf5:	53                   	push   ebx
c0012cf6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cfa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cfe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012d00:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d04:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012d07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d0b:	83 fd 1f             	cmp    ebp,0x1f
c0012d0e:	7f 0b                	jg     c0012d1b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d10:	0f b6 c2             	movzx  eax,dl
c0012d13:	d3 e0                	shl    eax,cl
c0012d15:	09 07                	or     DWORD PTR [edi],eax
c0012d17:	b0 01                	mov    al,0x1
c0012d19:	01 33                	add    DWORD PTR [ebx],esi
c0012d1b:	5b                   	pop    ebx
c0012d1c:	5e                   	pop    esi
c0012d1d:	5f                   	pop    edi
c0012d1e:	5d                   	pop    ebp
c0012d1f:	c3                   	ret    

c0012d20 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d20:	57                   	push   edi
c0012d21:	56                   	push   esi
c0012d22:	53                   	push   ebx
c0012d23:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d27:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d2b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d33:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d35:	7c 17                	jl     c0012d4e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d37:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d39:	b8 01 00 00 00       	mov    eax,0x1
c0012d3e:	d3 e0                	shl    eax,cl
c0012d40:	48                   	dec    eax
c0012d41:	21 d0                	and    eax,edx
c0012d43:	d3 ea                	shr    edx,cl
c0012d45:	89 17                	mov    DWORD PTR [edi],edx
c0012d47:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d49:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d4c:	eb 05                	jmp    c0012d53 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012d4e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d51:	31 c0                	xor    eax,eax
c0012d53:	5b                   	pop    ebx
c0012d54:	5e                   	pop    esi
c0012d55:	5f                   	pop    edi
c0012d56:	c3                   	ret    

c0012d57 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012d57:	83 ec 40             	sub    esp,0x40
c0012d5a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d5e:	50                   	push   eax
c0012d5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d67:	e8 49 fa ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d6c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012d70:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012d74:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012d78:	89 10                	mov    DWORD PTR [eax],edx
c0012d7a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d7d:	83 c4 4c             	add    esp,0x4c
c0012d80:	c3                   	ret    

c0012d81 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d81:	55                   	push   ebp
c0012d82:	57                   	push   edi
c0012d83:	56                   	push   esi
c0012d84:	53                   	push   ebx
c0012d85:	83 ec 40             	sub    esp,0x40
c0012d88:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d8c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d94:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d98:	53                   	push   ebx
c0012d99:	56                   	push   esi
c0012d9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d9e:	e8 12 fa ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012da3:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012da7:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012dab:	83 c4 0c             	add    esp,0xc
c0012dae:	53                   	push   ebx
c0012daf:	56                   	push   esi
c0012db0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012db4:	e8 20 fb ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012db9:	83 c4 4c             	add    esp,0x4c
c0012dbc:	5b                   	pop    ebx
c0012dbd:	5e                   	pop    esi
c0012dbe:	5f                   	pop    edi
c0012dbf:	5d                   	pop    ebp
c0012dc0:	c3                   	ret    

c0012dc1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012dc1:	55                   	push   ebp
c0012dc2:	57                   	push   edi
c0012dc3:	56                   	push   esi
c0012dc4:	31 f6                	xor    esi,esi
c0012dc6:	53                   	push   ebx
c0012dc7:	31 db                	xor    ebx,ebx
c0012dc9:	83 ec 40             	sub    esp,0x40
c0012dcc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012dd4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ddc:	6a 12                	push   0x12
c0012dde:	68 ee 00 00 00       	push   0xee
c0012de3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012de7:	e8 04 d7 fe ff       	call   c00004f0 <memset>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012df3:	6a 08                	push   0x8
c0012df5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012df9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012dfd:	50                   	push   eax
c0012dfe:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012e02:	55                   	push   ebp
c0012e03:	57                   	push   edi
c0012e04:	e8 e7 fe ff ff       	call   c0012cf0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012e09:	83 c4 10             	add    esp,0x10
c0012e0c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e10:	50                   	push   eax
c0012e11:	6a 06                	push   0x6
c0012e13:	55                   	push   ebp
c0012e14:	57                   	push   edi
c0012e15:	e8 06 ff ff ff       	call   c0012d20 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e1a:	83 c4 10             	add    esp,0x10
c0012e1d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e22:	74 07                	je     c0012e2b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e24:	46                   	inc    esi
c0012e25:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e29:	eb e1                	jmp    c0012e0c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e2b:	43                   	inc    ebx
c0012e2c:	83 fb 12             	cmp    ebx,0x12
c0012e2f:	75 c2                	jne    c0012df3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e31:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e35:	31 db                	xor    ebx,ebx
c0012e37:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e3a:	50                   	push   eax
c0012e3b:	50                   	push   eax
c0012e3c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012e41:	43                   	inc    ebx
c0012e42:	8d 04 85 c0 32 02 c0 	lea    eax,[eax*4-0x3ffdcd40]
c0012e49:	50                   	push   eax
c0012e4a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e4e:	e8 ed d9 fe ff       	call   c0000840 <strcat>
c0012e53:	83 c4 10             	add    esp,0x10
c0012e56:	83 fb 18             	cmp    ebx,0x18
c0012e59:	75 df                	jne    c0012e3a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012e5b:	83 c4 3c             	add    esp,0x3c
c0012e5e:	31 c0                	xor    eax,eax
c0012e60:	5b                   	pop    ebx
c0012e61:	5e                   	pop    esi
c0012e62:	5f                   	pop    edi
c0012e63:	5d                   	pop    ebp
c0012e64:	c3                   	ret    

c0012e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012e65:	83 ec 40             	sub    esp,0x40
c0012e68:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e6c:	50                   	push   eax
c0012e6d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e75:	e8 3b f9 ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e7a:	58                   	pop    eax
c0012e7b:	5a                   	pop    edx
c0012e7c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e80:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e84:	50                   	push   eax
c0012e85:	e8 37 ff ff ff       	call   c0012dc1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e8a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e8f:	83 c4 4c             	add    esp,0x4c
c0012e92:	c3                   	ret    

c0012e93 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e93:	55                   	push   ebp
c0012e94:	57                   	push   edi
c0012e95:	56                   	push   esi
c0012e96:	53                   	push   ebx
c0012e97:	31 db                	xor    ebx,ebx
c0012e99:	83 ec 70             	sub    esp,0x70
c0012e9c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012ea3:	6a 30                	push   0x30
c0012ea5:	6a 00                	push   0x0
c0012ea7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012eab:	56                   	push   esi
c0012eac:	e8 3f d6 fe ff       	call   c00004f0 <memset>
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	57                   	push   edi
c0012eb8:	e8 b3 d6 fe ff       	call   c0000570 <strlen>
c0012ebd:	83 c4 10             	add    esp,0x10
c0012ec0:	39 d8                	cmp    eax,ebx
c0012ec2:	76 16                	jbe    c0012eda <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012ec4:	83 ec 0c             	sub    esp,0xc
c0012ec7:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012ecb:	50                   	push   eax
c0012ecc:	e8 5f da fe ff       	call   c0000930 <toupper>
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012ed7:	43                   	inc    ebx
c0012ed8:	eb da                	jmp    c0012eb4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012eda:	31 f6                	xor    esi,esi
c0012edc:	52                   	push   edx
c0012edd:	31 ff                	xor    edi,edi
c0012edf:	6a 18                	push   0x18
c0012ee1:	6a 3f                	push   0x3f
c0012ee3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ee7:	50                   	push   eax
c0012ee8:	e8 03 d6 fe ff       	call   c00004f0 <memset>
c0012eed:	83 c4 10             	add    esp,0x10
c0012ef0:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012ef4:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012ef8:	84 c0                	test   al,al
c0012efa:	0f 84 b0 00 00 00    	je     c0012fb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012f00:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012f04:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012f09:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012f0d:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012f12:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012f15:	83 ec 0c             	sub    esp,0xc
c0012f18:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f1c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f20:	53                   	push   ebx
c0012f21:	e8 4a d6 fe ff       	call   c0000570 <strlen>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	85 c0                	test   eax,eax
c0012f2b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f2f:	74 0b                	je     c0012f3c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f31:	50                   	push   eax
c0012f32:	6a 01                	push   0x1
c0012f34:	53                   	push   ebx
c0012f35:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f39:	50                   	push   eax
c0012f3a:	eb 0a                	jmp    c0012f46 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f3c:	50                   	push   eax
c0012f3d:	6a 00                	push   0x0
c0012f3f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f43:	50                   	push   eax
c0012f44:	6a 00                	push   0x0
c0012f46:	e8 44 fd ff ff       	call   c0012c8f <CmGetMatch(char*, char*, bool, bool*)>
c0012f4b:	83 c4 10             	add    esp,0x10
c0012f4e:	83 f8 ff             	cmp    eax,0xffffffff
c0012f51:	75 1a                	jne    c0012f6d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012f53:	83 ec 0c             	sub    esp,0xc
c0012f56:	68 2e 1e 02 c0       	push   0xc0021e2e
c0012f5b:	e8 9d e2 ff ff       	call   c00111fd <KePanic(char const*)>
c0012f60:	83 c4 10             	add    esp,0x10
c0012f63:	b8 02 00 00 00       	mov    eax,0x2
c0012f68:	e9 bc 00 00 00       	jmp    c0013029 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012f6d:	83 ff 18             	cmp    edi,0x18
c0012f70:	75 1a                	jne    c0012f8c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012f72:	83 ec 0c             	sub    esp,0xc
c0012f75:	68 43 1e 02 c0       	push   0xc0021e43
c0012f7a:	e8 7e e2 ff ff       	call   c00111fd <KePanic(char const*)>
c0012f7f:	83 c4 10             	add    esp,0x10
c0012f82:	b8 01 00 00 00       	mov    eax,0x1
c0012f87:	e9 9d 00 00 00       	jmp    c0013029 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012f8c:	47                   	inc    edi
c0012f8d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f92:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f96:	74 02                	je     c0012f9a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012f98:	89 ee                	mov    esi,ebp
c0012f9a:	83 ec 0c             	sub    esp,0xc
c0012f9d:	53                   	push   ebx
c0012f9e:	e8 cd d5 fe ff       	call   c0000570 <strlen>
c0012fa3:	83 c4 10             	add    esp,0x10
c0012fa6:	85 c0                	test   eax,eax
c0012fa8:	74 06                	je     c0012fb0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012faa:	46                   	inc    esi
c0012fab:	e9 40 ff ff ff       	jmp    c0012ef0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012fb0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012fb8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012fc0:	31 f6                	xor    esi,esi
c0012fc2:	50                   	push   eax
c0012fc3:	31 ff                	xor    edi,edi
c0012fc5:	6a 12                	push   0x12
c0012fc7:	68 ee 00 00 00       	push   0xee
c0012fcc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012fd3:	e8 18 d5 fe ff       	call   c00004f0 <memset>
c0012fd8:	83 c4 10             	add    esp,0x10
c0012fdb:	83 fe 17             	cmp    esi,0x17
c0012fde:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012fe2:	7e 26                	jle    c001300a <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012fe4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fe8:	50                   	push   eax
c0012fe9:	6a 08                	push   0x8
c0012feb:	55                   	push   ebp
c0012fec:	53                   	push   ebx
c0012fed:	e8 2e fd ff ff       	call   c0012d20 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012ff2:	83 c4 10             	add    esp,0x10
c0012ff5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ffa:	74 26                	je     c0013022 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012ffc:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013003:	4e                   	dec    esi
c0013004:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013007:	47                   	inc    edi
c0013008:	eb 1c                	jmp    c0013026 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001300a:	6a 06                	push   0x6
c001300c:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013011:	50                   	push   eax
c0013012:	55                   	push   ebp
c0013013:	53                   	push   ebx
c0013014:	e8 d7 fc ff ff       	call   c0012cf0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013019:	83 c4 10             	add    esp,0x10
c001301c:	84 c0                	test   al,al
c001301e:	75 06                	jne    c0013026 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013020:	eb c2                	jmp    c0012fe4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013022:	31 c0                	xor    eax,eax
c0013024:	eb 03                	jmp    c0013029 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013026:	46                   	inc    esi
c0013027:	eb b2                	jmp    c0012fdb <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013029:	83 c4 6c             	add    esp,0x6c
c001302c:	5b                   	pop    ebx
c001302d:	5e                   	pop    esi
c001302e:	5f                   	pop    edi
c001302f:	5d                   	pop    ebp
c0013030:	c3                   	ret    

c0013031 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013031:	53                   	push   ebx
c0013032:	83 ec 3c             	sub    esp,0x3c
c0013035:	6a 2b                	push   0x2b
c0013037:	6a 00                	push   0x0
c0013039:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001303d:	53                   	push   ebx
c001303e:	e8 ad d4 fe ff       	call   c00004f0 <memset>
c0013043:	58                   	pop    eax
c0013044:	5a                   	pop    edx
c0013045:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013049:	50                   	push   eax
c001304a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001304e:	e8 40 fe ff ff       	call   c0012e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013053:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013058:	83 c4 0c             	add    esp,0xc
c001305b:	6a 15                	push   0x15
c001305d:	6a 00                	push   0x0
c001305f:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013063:	50                   	push   eax
c0013064:	e8 87 d4 fe ff       	call   c00004f0 <memset>
c0013069:	53                   	push   ebx
c001306a:	6a 00                	push   0x0
c001306c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013070:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013074:	e8 e6 f9 ff ff       	call   c0012a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013079:	83 c4 58             	add    esp,0x58
c001307c:	5b                   	pop    ebx
c001307d:	c3                   	ret    

c001307e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001307e:	56                   	push   esi
c001307f:	53                   	push   ebx
c0013080:	83 ec 48             	sub    esp,0x48
c0013083:	6a 12                	push   0x12
c0013085:	68 ff 00 00 00       	push   0xff
c001308a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001308e:	56                   	push   esi
c001308f:	e8 5c d4 fe ff       	call   c00004f0 <memset>
c0013094:	5a                   	pop    edx
c0013095:	59                   	pop    ecx
c0013096:	56                   	push   esi
c0013097:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001309b:	e8 f3 fd ff ff       	call   c0012e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130a0:	83 c4 10             	add    esp,0x10
c00130a3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00130a7:	85 db                	test   ebx,ebx
c00130a9:	74 42                	je     c00130ed <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00130ab:	50                   	push   eax
c00130ac:	8d 44 24 19          	lea    eax,[esp+0x19]
c00130b0:	50                   	push   eax
c00130b1:	53                   	push   ebx
c00130b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130b6:	e8 fa f6 ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130bb:	83 c4 0c             	add    esp,0xc
c00130be:	6a 12                	push   0x12
c00130c0:	8d 44 24 21          	lea    eax,[esp+0x21]
c00130c4:	50                   	push   eax
c00130c5:	56                   	push   esi
c00130c6:	e8 b5 d2 fe ff       	call   c0000380 <memcmp>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	85 c0                	test   eax,eax
c00130d0:	74 1e                	je     c00130f0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00130d2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00130d7:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00130dc:	c1 e3 08             	shl    ebx,0x8
c00130df:	09 d8                	or     eax,ebx
c00130e1:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00130e6:	c1 e3 10             	shl    ebx,0x10
c00130e9:	09 c3                	or     ebx,eax
c00130eb:	eb ba                	jmp    c00130a7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00130ed:	83 cb ff             	or     ebx,0xffffffff
c00130f0:	89 d8                	mov    eax,ebx
c00130f2:	83 c4 44             	add    esp,0x44
c00130f5:	5b                   	pop    ebx
c00130f6:	5e                   	pop    esi
c00130f7:	c3                   	ret    

c00130f8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00130f8:	57                   	push   edi
c00130f9:	56                   	push   esi
c00130fa:	53                   	push   ebx
c00130fb:	83 ec 34             	sub    esp,0x34
c00130fe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013102:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013106:	6a 2b                	push   0x2b
c0013108:	6a 00                	push   0x0
c001310a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001310e:	53                   	push   ebx
c001310f:	e8 dc d3 fe ff       	call   c00004f0 <memset>
c0013114:	58                   	pop    eax
c0013115:	5a                   	pop    edx
c0013116:	8d 44 24 11          	lea    eax,[esp+0x11]
c001311a:	50                   	push   eax
c001311b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001311f:	e8 6f fd ff ff       	call   c0012e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013124:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013128:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001312c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013130:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013134:	53                   	push   ebx
c0013135:	6a 00                	push   0x0
c0013137:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001313b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001313f:	e8 1b f9 ff ff       	call   c0012a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013144:	83 c4 50             	add    esp,0x50
c0013147:	5b                   	pop    ebx
c0013148:	5e                   	pop    esi
c0013149:	5f                   	pop    edi
c001314a:	c3                   	ret    

c001314b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001314b:	55                   	push   ebp
c001314c:	57                   	push   edi
c001314d:	56                   	push   esi
c001314e:	53                   	push   ebx
c001314f:	83 ec 40             	sub    esp,0x40
c0013152:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013156:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001315a:	6a 2b                	push   0x2b
c001315c:	6a 00                	push   0x0
c001315e:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013162:	56                   	push   esi
c0013163:	e8 88 d3 fe ff       	call   c00004f0 <memset>
c0013168:	5f                   	pop    edi
c0013169:	89 ef                	mov    edi,ebp
c001316b:	58                   	pop    eax
c001316c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013170:	50                   	push   eax
c0013171:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013175:	e8 19 fd ff ff       	call   c0012e93 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001317a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001317f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013184:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013189:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	85 ed                	test   ebp,ebp
c0013193:	74 14                	je     c00131a9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013195:	51                   	push   ecx
c0013196:	51                   	push   ecx
c0013197:	57                   	push   edi
c0013198:	53                   	push   ebx
c0013199:	e8 09 f7 ff ff       	call   c00128a7 <CmGetNext(Reghive_Tag*, int)>
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	85 c0                	test   eax,eax
c00131a3:	74 04                	je     c00131a9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00131a5:	89 c7                	mov    edi,eax
c00131a7:	eb e8                	jmp    c0013191 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00131a9:	56                   	push   esi
c00131aa:	6a 00                	push   0x0
c00131ac:	57                   	push   edi
c00131ad:	53                   	push   ebx
c00131ae:	e8 ac f8 ff ff       	call   c0012a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131b3:	83 c4 0c             	add    esp,0xc
c00131b6:	89 c7                	mov    edi,eax
c00131b8:	56                   	push   esi
c00131b9:	50                   	push   eax
c00131ba:	53                   	push   ebx
c00131bb:	e8 f5 f5 ff ff       	call   c00127b5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131c0:	58                   	pop    eax
c00131c1:	5a                   	pop    edx
c00131c2:	6a 6c                	push   0x6c
c00131c4:	6a 00                	push   0x0
c00131c6:	6a 00                	push   0x0
c00131c8:	68 54 1e 02 c0       	push   0xc0021e54
c00131cd:	57                   	push   edi
c00131ce:	53                   	push   ebx
c00131cf:	e8 24 ff ff ff       	call   c00130f8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00131d4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00131d8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00131dc:	c1 e8 10             	shr    eax,0x10
c00131df:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00131e3:	83 c4 1c             	add    esp,0x1c
c00131e6:	56                   	push   esi
c00131e7:	57                   	push   edi
c00131e8:	53                   	push   ebx
c00131e9:	e8 eb f6 ff ff       	call   c00128d9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131ee:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00131f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00131f8:	c1 e0 08             	shl    eax,0x8
c00131fb:	09 c2                	or     edx,eax
c00131fd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013202:	83 c4 4c             	add    esp,0x4c
c0013205:	c1 e0 10             	shl    eax,0x10
c0013208:	5b                   	pop    ebx
c0013209:	09 d0                	or     eax,edx
c001320b:	5e                   	pop    esi
c001320c:	5f                   	pop    edi
c001320d:	5d                   	pop    ebp
c001320e:	c3                   	ret    

c001320f <zStrtok(char*, char const*)>:
c001320f:	55                   	push   ebp
c0013210:	57                   	push   edi
c0013211:	56                   	push   esi
c0013212:	53                   	push   ebx
c0013213:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001321b:	85 db                	test   ebx,ebx
c001321d:	74 2f                	je     c001324e <zStrtok(char*, char const*)+0x3f>
c001321f:	85 c0                	test   eax,eax
c0013221:	75 09                	jne    c001322c <zStrtok(char*, char const*)+0x1d>
c0013223:	a1 90 9c 02 c0       	mov    eax,ds:0xc0029c90
c0013228:	85 c0                	test   eax,eax
c001322a:	74 50                	je     c001327c <zStrtok(char*, char const*)+0x6d>
c001322c:	31 c9                	xor    ecx,ecx
c001322e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013232:	74 03                	je     c0013237 <zStrtok(char*, char const*)+0x28>
c0013234:	41                   	inc    ecx
c0013235:	eb f7                	jmp    c001322e <zStrtok(char*, char const*)+0x1f>
c0013237:	31 d2                	xor    edx,edx
c0013239:	39 ca                	cmp    edx,ecx
c001323b:	74 15                	je     c0013252 <zStrtok(char*, char const*)+0x43>
c001323d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013241:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013244:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013247:	39 ee                	cmp    esi,ebp
c0013249:	74 13                	je     c001325e <zStrtok(char*, char const*)+0x4f>
c001324b:	42                   	inc    edx
c001324c:	eb eb                	jmp    c0013239 <zStrtok(char*, char const*)+0x2a>
c001324e:	31 c0                	xor    eax,eax
c0013250:	eb 2a                	jmp    c001327c <zStrtok(char*, char const*)+0x6d>
c0013252:	c7 05 90 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c90,0x0
c001325c:	eb 1e                	jmp    c001327c <zStrtok(char*, char const*)+0x6d>
c001325e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013261:	39 ce                	cmp    esi,ecx
c0013263:	75 0a                	jne    c001326f <zStrtok(char*, char const*)+0x60>
c0013265:	40                   	inc    eax
c0013266:	a3 90 9c 02 c0       	mov    ds:0xc0029c90,eax
c001326b:	89 d8                	mov    eax,ebx
c001326d:	eb 0d                	jmp    c001327c <zStrtok(char*, char const*)+0x6d>
c001326f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013273:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013276:	89 15 90 9c 02 c0    	mov    DWORD PTR ds:0xc0029c90,edx
c001327c:	5b                   	pop    ebx
c001327d:	5e                   	pop    esi
c001327e:	5f                   	pop    edi
c001327f:	5d                   	pop    ebp
c0013280:	c3                   	ret    

c0013281 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013281:	57                   	push   edi
c0013282:	56                   	push   esi
c0013283:	53                   	push   ebx
c0013284:	81 ec 08 01 00 00    	sub    esp,0x108
c001328a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013291:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013298:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001329c:	53                   	push   ebx
c001329d:	e8 9e d3 fe ff       	call   c0000640 <strcpy>
c00132a2:	59                   	pop    ecx
c00132a3:	5e                   	pop    esi
c00132a4:	68 b8 21 02 c0       	push   0xc00221b8
c00132a9:	53                   	push   ebx
c00132aa:	bb 01 00 00 00       	mov    ebx,0x1
c00132af:	e8 5b ff ff ff       	call   c001320f <zStrtok(char*, char const*)>
c00132b4:	83 c4 10             	add    esp,0x10
c00132b7:	85 c0                	test   eax,eax
c00132b9:	74 3b                	je     c00132f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132bb:	52                   	push   edx
c00132bc:	50                   	push   eax
c00132bd:	6a 01                	push   0x1
c00132bf:	57                   	push   edi
c00132c0:	e8 b9 fd ff ff       	call   c001307e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00132c5:	59                   	pop    ecx
c00132c6:	89 c3                	mov    ebx,eax
c00132c8:	5e                   	pop    esi
c00132c9:	68 b8 21 02 c0       	push   0xc00221b8
c00132ce:	6a 00                	push   0x0
c00132d0:	e8 3a ff ff ff       	call   c001320f <zStrtok(char*, char const*)>
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	89 c6                	mov    esi,eax
c00132da:	85 c0                	test   eax,eax
c00132dc:	74 18                	je     c00132f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132de:	52                   	push   edx
c00132df:	52                   	push   edx
c00132e0:	53                   	push   ebx
c00132e1:	57                   	push   edi
c00132e2:	e8 81 f5 ff ff       	call   c0012868 <CmEnterDirectory(Reghive_Tag*, int)>
c00132e7:	83 c4 10             	add    esp,0x10
c00132ea:	89 c3                	mov    ebx,eax
c00132ec:	83 f8 ff             	cmp    eax,0xffffffff
c00132ef:	74 05                	je     c00132f6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132f1:	50                   	push   eax
c00132f2:	56                   	push   esi
c00132f3:	53                   	push   ebx
c00132f4:	eb c9                	jmp    c00132bf <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00132f6:	81 c4 00 01 00 00    	add    esp,0x100
c00132fc:	89 d8                	mov    eax,ebx
c00132fe:	5b                   	pop    ebx
c00132ff:	5e                   	pop    esi
c0013300:	5f                   	pop    edi
c0013301:	c3                   	ret    

c0013302 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013302:	55                   	push   ebp
c0013303:	57                   	push   edi
c0013304:	56                   	push   esi
c0013305:	53                   	push   ebx
c0013306:	83 ec 5c             	sub    esp,0x5c
c0013309:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001330d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013311:	85 db                	test   ebx,ebx
c0013313:	0f 8e 84 00 00 00    	jle    c001339d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013319:	31 ed                	xor    ebp,ebp
c001331b:	57                   	push   edi
c001331c:	6a 32                	push   0x32
c001331e:	6a 00                	push   0x0
c0013320:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013324:	57                   	push   edi
c0013325:	e8 c6 d1 fe ff       	call   c00004f0 <memset>
c001332a:	83 c4 0c             	add    esp,0xc
c001332d:	57                   	push   edi
c001332e:	53                   	push   ebx
c001332f:	56                   	push   esi
c0013330:	e8 30 fb ff ff       	call   c0012e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013335:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013339:	83 c4 10             	add    esp,0x10
c001333c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013340:	7d 13                	jge    c0013355 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013342:	83 ec 0c             	sub    esp,0xc
c0013345:	45                   	inc    ebp
c0013346:	68 5f 25 02 c0       	push   0xc002255f
c001334b:	e8 f5 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013350:	83 c4 10             	add    esp,0x10
c0013353:	eb e7                	jmp    c001333c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013355:	51                   	push   ecx
c0013356:	57                   	push   edi
c0013357:	53                   	push   ebx
c0013358:	68 5a 1e 02 c0       	push   0xc0021e5a
c001335d:	e8 e3 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013362:	83 c4 10             	add    esp,0x10
c0013365:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001336a:	75 1e                	jne    c001338a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001336c:	52                   	push   edx
c001336d:	52                   	push   edx
c001336e:	53                   	push   ebx
c001336f:	56                   	push   esi
c0013370:	e8 f3 f4 ff ff       	call   c0012868 <CmEnterDirectory(Reghive_Tag*, int)>
c0013375:	83 c4 0c             	add    esp,0xc
c0013378:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001337c:	8d 51 04             	lea    edx,[ecx+0x4]
c001337f:	52                   	push   edx
c0013380:	50                   	push   eax
c0013381:	56                   	push   esi
c0013382:	e8 7b ff ff ff       	call   c0013302 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	50                   	push   eax
c001338b:	50                   	push   eax
c001338c:	53                   	push   ebx
c001338d:	56                   	push   esi
c001338e:	e8 14 f5 ff ff       	call   c00128a7 <CmGetNext(Reghive_Tag*, int)>
c0013393:	83 c4 10             	add    esp,0x10
c0013396:	89 c3                	mov    ebx,eax
c0013398:	e9 74 ff ff ff       	jmp    c0013311 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001339d:	83 c4 5c             	add    esp,0x5c
c00133a0:	5b                   	pop    ebx
c00133a1:	5e                   	pop    esi
c00133a2:	5f                   	pop    edi
c00133a3:	5d                   	pop    ebp
c00133a4:	c3                   	ret    

c00133a5 <CmSplitFinalSlashInPlace(char*)>:
c00133a5:	53                   	push   ebx
c00133a6:	83 ec 14             	sub    esp,0x14
c00133a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00133ad:	53                   	push   ebx
c00133ae:	e8 bd d1 fe ff       	call   c0000570 <strlen>
c00133b3:	83 c4 10             	add    esp,0x10
c00133b6:	48                   	dec    eax
c00133b7:	85 c0                	test   eax,eax
c00133b9:	74 15                	je     c00133d0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00133bb:	8d 14 03             	lea    edx,[ebx+eax*1]
c00133be:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133c2:	75 09                	jne    c00133cd <CmSplitFinalSlashInPlace(char*)+0x28>
c00133c4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00133c7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00133cb:	eb 05                	jmp    c00133d2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00133cd:	48                   	dec    eax
c00133ce:	eb e7                	jmp    c00133b7 <CmSplitFinalSlashInPlace(char*)+0x12>
c00133d0:	31 c0                	xor    eax,eax
c00133d2:	83 c4 08             	add    esp,0x8
c00133d5:	5b                   	pop    ebx
c00133d6:	c3                   	ret    

c00133d7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00133d7:	55                   	push   ebp
c00133d8:	57                   	push   edi
c00133d9:	56                   	push   esi
c00133da:	53                   	push   ebx
c00133db:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133e1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00133e8:	8a 13                	mov    dl,BYTE PTR [ebx]
c00133ea:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00133ed:	80 fa 40             	cmp    dl,0x40
c00133f0:	75 1c                	jne    c001340e <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00133f2:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00133f5:	85 c9                	test   ecx,ecx
c00133f7:	0f 84 09 01 00 00    	je     c0013506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00133fd:	8d 43 01             	lea    eax,[ebx+0x1]
c0013400:	83 f9 3a             	cmp    ecx,0x3a
c0013403:	74 04                	je     c0013409 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013405:	89 c3                	mov    ebx,eax
c0013407:	eb e9                	jmp    c00133f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013409:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001340c:	89 c3                	mov    ebx,eax
c001340e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013412:	50                   	push   eax
c0013413:	6a 40                	push   0x40
c0013415:	6a 00                	push   0x0
c0013417:	8d 44 24 24          	lea    eax,[esp+0x24]
c001341b:	50                   	push   eax
c001341c:	e8 cf d0 fe ff       	call   c00004f0 <memset>
c0013421:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013428:	31 c0                	xor    eax,eax
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013432:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013435:	89 d1                	mov    ecx,edx
c0013437:	85 d2                	test   edx,edx
c0013439:	0f 84 c7 00 00 00    	je     c0013506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001343f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013444:	0f 8f bc 00 00 00    	jg     c0013506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001344a:	83 fa 0a             	cmp    edx,0xa
c001344d:	0f 85 a4 00 00 00    	jne    c00134f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013453:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013458:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c001345d:	89 c8                	mov    eax,ecx
c001345f:	a8 df                	test   al,0xdf
c0013461:	0f 94 c2             	sete   dl
c0013464:	83 f9 23             	cmp    ecx,0x23
c0013467:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001346c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013470:	80 e2 01             	and    dl,0x1
c0013473:	75 4a                	jne    c00134bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013475:	83 e8 09             	sub    eax,0x9
c0013478:	3c 01                	cmp    al,0x1
c001347a:	76 43                	jbe    c00134bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001347c:	83 f9 5b             	cmp    ecx,0x5b
c001347f:	75 42                	jne    c00134c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013481:	83 fe 40             	cmp    esi,0x40
c0013484:	75 39                	jne    c00134bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013486:	83 ec 0c             	sub    esp,0xc
c0013489:	8d 54 24 65          	lea    edx,[esp+0x65]
c001348d:	52                   	push   edx
c001348e:	e8 dd d0 fe ff       	call   c0000570 <strlen>
c0013493:	83 c4 10             	add    esp,0x10
c0013496:	83 f8 3f             	cmp    eax,0x3f
c0013499:	77 6b                	ja     c0013506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001349b:	50                   	push   eax
c001349c:	50                   	push   eax
c001349d:	8d 54 24 61          	lea    edx,[esp+0x61]
c00134a1:	52                   	push   edx
c00134a2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134a6:	52                   	push   edx
c00134a7:	e8 94 d1 fe ff       	call   c0000640 <strcpy>
c00134ac:	58                   	pop    eax
c00134ad:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134b1:	52                   	push   edx
c00134b2:	e8 b9 d0 fe ff       	call   c0000570 <strlen>
c00134b7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00134bc:	83 c4 10             	add    esp,0x10
c00134bf:	31 d2                	xor    edx,edx
c00134c1:	eb 3b                	jmp    c00134fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00134c3:	83 fe 40             	cmp    esi,0x40
c00134c6:	74 06                	je     c00134ce <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00134c8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00134cc:	eb 20                	jmp    c00134ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00134ce:	50                   	push   eax
c00134cf:	50                   	push   eax
c00134d0:	55                   	push   ebp
c00134d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134d5:	50                   	push   eax
c00134d6:	e8 75 d2 fe ff       	call   c0000750 <strcmp>
c00134db:	83 c4 10             	add    esp,0x10
c00134de:	85 c0                	test   eax,eax
c00134e0:	75 dd                	jne    c00134bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134e2:	eb e4                	jmp    c00134c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00134e4:	8d 50 01             	lea    edx,[eax+0x1]
c00134e7:	83 f9 3d             	cmp    ecx,0x3d
c00134ea:	74 1e                	je     c001350a <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00134ec:	89 d0                	mov    eax,edx
c00134ee:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00134f1:	85 c9                	test   ecx,ecx
c00134f3:	75 ef                	jne    c00134e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00134f5:	eb 0f                	jmp    c0013506 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134f7:	8d 50 01             	lea    edx,[eax+0x1]
c00134fa:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00134fe:	47                   	inc    edi
c00134ff:	89 d0                	mov    eax,edx
c0013501:	e9 2c ff ff ff       	jmp    c0013432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013506:	31 c0                	xor    eax,eax
c0013508:	eb 33                	jmp    c001353d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c001350a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001350e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013511:	50                   	push   eax
c0013512:	50                   	push   eax
c0013513:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013517:	50                   	push   eax
c0013518:	53                   	push   ebx
c0013519:	e8 32 d2 fe ff       	call   c0000750 <strcmp>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	85 c0                	test   eax,eax
c0013523:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013527:	75 96                	jne    c00134bf <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013529:	51                   	push   ecx
c001352a:	51                   	push   ecx
c001352b:	52                   	push   edx
c001352c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013533:	e8 08 d1 fe ff       	call   c0000640 <strcpy>
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	b0 01                	mov    al,0x1
c001353d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013543:	5b                   	pop    ebx
c0013544:	5e                   	pop    esi
c0013545:	5f                   	pop    edi
c0013546:	5d                   	pop    ebp
c0013547:	c3                   	ret    

c0013548 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013548:	57                   	push   edi
c0013549:	56                   	push   esi
c001354a:	53                   	push   ebx
c001354b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013551:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013558:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001355f:	53                   	push   ebx
c0013560:	e8 0b d0 fe ff       	call   c0000570 <strlen>
c0013565:	89 34 24             	mov    DWORD PTR [esp],esi
c0013568:	89 c7                	mov    edi,eax
c001356a:	e8 01 d0 fe ff       	call   c0000570 <strlen>
c001356f:	83 c4 10             	add    esp,0x10
c0013572:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013576:	3d ff 00 00 00       	cmp    eax,0xff
c001357b:	0f 87 d3 00 00 00    	ja     c0013654 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013581:	57                   	push   edi
c0013582:	57                   	push   edi
c0013583:	56                   	push   esi
c0013584:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013588:	56                   	push   esi
c0013589:	e8 b2 d0 fe ff       	call   c0000640 <strcpy>
c001358e:	58                   	pop    eax
c001358f:	5a                   	pop    edx
c0013590:	68 b8 21 02 c0       	push   0xc00221b8
c0013595:	56                   	push   esi
c0013596:	e8 a5 d2 fe ff       	call   c0000840 <strcat>
c001359b:	59                   	pop    ecx
c001359c:	5f                   	pop    edi
c001359d:	53                   	push   ebx
c001359e:	56                   	push   esi
c001359f:	e8 9c d2 fe ff       	call   c0000840 <strcat>
c00135a4:	58                   	pop    eax
c00135a5:	5a                   	pop    edx
c00135a6:	68 64 1e 02 c0       	push   0xc0021e64
c00135ab:	56                   	push   esi
c00135ac:	e8 8f d2 fe ff       	call   c0000840 <strcat>
c00135b1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135b8:	e8 f9 44 ff ff       	call   c0007ab6 <malloc>
c00135bd:	83 c4 0c             	add    esp,0xc
c00135c0:	89 c3                	mov    ebx,eax
c00135c2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00135c8:	56                   	push   esi
c00135c9:	50                   	push   eax
c00135ca:	e8 1b 81 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	85 db                	test   ebx,ebx
c00135d4:	74 7e                	je     c0013654 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135d6:	51                   	push   ecx
c00135d7:	51                   	push   ecx
c00135d8:	6a 01                	push   0x1
c00135da:	53                   	push   ebx
c00135db:	e8 c6 81 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	85 c0                	test   eax,eax
c00135e5:	74 08                	je     c00135ef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135e7:	83 ec 0c             	sub    esp,0xc
c00135ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135ec:	53                   	push   ebx
c00135ed:	eb 5f                	jmp    c001364e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135ef:	52                   	push   edx
c00135f0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135f4:	50                   	push   eax
c00135f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135f9:	50                   	push   eax
c00135fa:	53                   	push   ebx
c00135fb:	e8 a8 84 ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c0013600:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	89 c1                	mov    ecx,eax
c0013609:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001360d:	74 31                	je     c0013640 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001360f:	83 ec 0c             	sub    esp,0xc
c0013612:	50                   	push   eax
c0013613:	e8 9e 44 ff ff       	call   c0007ab6 <malloc>
c0013618:	89 c6                	mov    esi,eax
c001361a:	58                   	pop    eax
c001361b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001361d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013621:	52                   	push   edx
c0013622:	56                   	push   esi
c0013623:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013627:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001362b:	53                   	push   ebx
c001362c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001362f:	83 c4 20             	add    esp,0x20
c0013632:	85 c0                	test   eax,eax
c0013634:	75 0a                	jne    c0013640 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001363a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001363e:	74 18                	je     c0013658 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013640:	83 ec 0c             	sub    esp,0xc
c0013643:	53                   	push   ebx
c0013644:	e8 bb 81 ff ff       	call   c000b804 <File::close()>
c0013649:	8b 03                	mov    eax,DWORD PTR [ebx]
c001364b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001364e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013651:	83 c4 10             	add    esp,0x10
c0013654:	31 c0                	xor    eax,eax
c0013656:	eb 3b                	jmp    c0013693 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013658:	83 ec 0c             	sub    esp,0xc
c001365b:	53                   	push   ebx
c001365c:	e8 a3 81 ff ff       	call   c000b804 <File::close()>
c0013661:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013663:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013666:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013669:	83 c4 0c             	add    esp,0xc
c001366c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013673:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001367a:	56                   	push   esi
c001367b:	e8 57 fd ff ff       	call   c00133d7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013680:	89 34 24             	mov    DWORD PTR [esp],esi
c0013683:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013687:	e8 3a 44 ff ff       	call   c0007ac6 <free>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013693:	81 c4 20 01 00 00    	add    esp,0x120
c0013699:	5b                   	pop    ebx
c001369a:	5e                   	pop    esi
c001369b:	5f                   	pop    edi
c001369c:	c3                   	ret    

c001369d <Reg::getLine(char*, char*, char*)>:
c001369d:	57                   	push   edi
c001369e:	56                   	push   esi
c001369f:	53                   	push   ebx
c00136a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136a8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136ac:	57                   	push   edi
c00136ad:	56                   	push   esi
c00136ae:	53                   	push   ebx
c00136af:	68 69 1e 02 c0       	push   0xc0021e69
c00136b4:	e8 8f fe ff ff       	call   c0013548 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136b9:	83 c4 10             	add    esp,0x10
c00136bc:	84 c0                	test   al,al
c00136be:	75 10                	jne    c00136d0 <Reg::getLine(char*, char*, char*)+0x33>
c00136c0:	57                   	push   edi
c00136c1:	56                   	push   esi
c00136c2:	53                   	push   ebx
c00136c3:	68 8e 1e 02 c0       	push   0xc0021e8e
c00136c8:	e8 7b fe ff ff       	call   c0013548 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	5b                   	pop    ebx
c00136d1:	5e                   	pop    esi
c00136d2:	5f                   	pop    edi
c00136d3:	c3                   	ret    

c00136d4 <Reg::readInt(char*, char*, int*)>:
c00136d4:	55                   	push   ebp
c00136d5:	57                   	push   edi
c00136d6:	56                   	push   esi
c00136d7:	53                   	push   ebx
c00136d8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136de:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00136e2:	55                   	push   ebp
c00136e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136ea:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136f1:	e8 a7 ff ff ff       	call   c001369d <Reg::getLine(char*, char*, char*)>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	84 c0                	test   al,al
c00136fb:	0f 84 b6 00 00 00    	je     c00137b7 <Reg::readInt(char*, char*, int*)+0xe3>
c0013701:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013706:	83 fa 2b             	cmp    edx,0x2b
c0013709:	74 0c                	je     c0013717 <Reg::readInt(char*, char*, int*)+0x43>
c001370b:	83 fa 2d             	cmp    edx,0x2d
c001370e:	75 0e                	jne    c001371e <Reg::readInt(char*, char*, int*)+0x4a>
c0013710:	ba 01 00 00 00       	mov    edx,0x1
c0013715:	eb 0b                	jmp    c0013722 <Reg::readInt(char*, char*, int*)+0x4e>
c0013717:	ba 01 00 00 00       	mov    edx,0x1
c001371c:	eb 02                	jmp    c0013720 <Reg::readInt(char*, char*, int*)+0x4c>
c001371e:	31 d2                	xor    edx,edx
c0013720:	31 c0                	xor    eax,eax
c0013722:	be 0a 00 00 00       	mov    esi,0xa
c0013727:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001372c:	75 21                	jne    c001374f <Reg::readInt(char*, char*, int*)+0x7b>
c001372e:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013733:	83 f9 78             	cmp    ecx,0x78
c0013736:	75 0a                	jne    c0013742 <Reg::readInt(char*, char*, int*)+0x6e>
c0013738:	83 c2 02             	add    edx,0x2
c001373b:	be 10 00 00 00       	mov    esi,0x10
c0013740:	eb 0d                	jmp    c001374f <Reg::readInt(char*, char*, int*)+0x7b>
c0013742:	83 f9 62             	cmp    ecx,0x62
c0013745:	75 08                	jne    c001374f <Reg::readInt(char*, char*, int*)+0x7b>
c0013747:	83 c2 02             	add    edx,0x2
c001374a:	be 02 00 00 00       	mov    esi,0x2
c001374f:	01 d5                	add    ebp,edx
c0013751:	31 d2                	xor    edx,edx
c0013753:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013757:	83 f9 0d             	cmp    ecx,0xd
c001375a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001375e:	0f 94 c3             	sete   bl
c0013761:	85 c9                	test   ecx,ecx
c0013763:	89 df                	mov    edi,ebx
c0013765:	0f 94 c3             	sete   bl
c0013768:	09 df                	or     edi,ebx
c001376a:	89 fb                	mov    ebx,edi
c001376c:	83 e7 01             	and    edi,0x1
c001376f:	75 35                	jne    c00137a6 <Reg::readInt(char*, char*, int*)+0xd2>
c0013771:	0f af d6             	imul   edx,esi
c0013774:	83 fe 10             	cmp    esi,0x10
c0013777:	75 26                	jne    c001379f <Reg::readInt(char*, char*, int*)+0xcb>
c0013779:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001377d:	83 ef 41             	sub    edi,0x41
c0013780:	89 fb                	mov    ebx,edi
c0013782:	80 fb 05             	cmp    bl,0x5
c0013785:	77 06                	ja     c001378d <Reg::readInt(char*, char*, int*)+0xb9>
c0013787:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001378b:	eb 16                	jmp    c00137a3 <Reg::readInt(char*, char*, int*)+0xcf>
c001378d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013791:	83 eb 61             	sub    ebx,0x61
c0013794:	80 fb 05             	cmp    bl,0x5
c0013797:	77 06                	ja     c001379f <Reg::readInt(char*, char*, int*)+0xcb>
c0013799:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001379d:	eb 04                	jmp    c00137a3 <Reg::readInt(char*, char*, int*)+0xcf>
c001379f:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00137a3:	45                   	inc    ebp
c00137a4:	eb ad                	jmp    c0013753 <Reg::readInt(char*, char*, int*)+0x7f>
c00137a6:	84 c0                	test   al,al
c00137a8:	74 02                	je     c00137ac <Reg::readInt(char*, char*, int*)+0xd8>
c00137aa:	f7 da                	neg    edx
c00137ac:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00137b3:	89 10                	mov    DWORD PTR [eax],edx
c00137b5:	88 d8                	mov    al,bl
c00137b7:	81 c4 ec 00 00 00    	add    esp,0xec
c00137bd:	5b                   	pop    ebx
c00137be:	5e                   	pop    esi
c00137bf:	5f                   	pop    edi
c00137c0:	5d                   	pop    ebp
c00137c1:	c3                   	ret    

c00137c2 <Reg::readString(char*, char*, char*, int)>:
c00137c2:	57                   	push   edi
c00137c3:	56                   	push   esi
c00137c4:	53                   	push   ebx
c00137c5:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137cb:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137d2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137d6:	57                   	push   edi
c00137d7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137de:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137e5:	e8 b3 fe ff ff       	call   c001369d <Reg::getLine(char*, char*, char*)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	89 c6                	mov    esi,eax
c00137ef:	84 c0                	test   al,al
c00137f1:	74 44                	je     c0013837 <Reg::readString(char*, char*, char*, int)+0x75>
c00137f3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00137fa:	31 c0                	xor    eax,eax
c00137fc:	4a                   	dec    edx
c00137fd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013800:	84 c9                	test   cl,cl
c0013802:	74 0f                	je     c0013813 <Reg::readString(char*, char*, char*, int)+0x51>
c0013804:	39 c2                	cmp    edx,eax
c0013806:	7e 0b                	jle    c0013813 <Reg::readString(char*, char*, char*, int)+0x51>
c0013808:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001380b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013810:	40                   	inc    eax
c0013811:	eb ea                	jmp    c00137fd <Reg::readString(char*, char*, char*, int)+0x3b>
c0013813:	83 ec 0c             	sub    esp,0xc
c0013816:	53                   	push   ebx
c0013817:	e8 54 cd fe ff       	call   c0000570 <strlen>
c001381c:	83 c4 10             	add    esp,0x10
c001381f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013824:	75 11                	jne    c0013837 <Reg::readString(char*, char*, char*, int)+0x75>
c0013826:	83 ec 0c             	sub    esp,0xc
c0013829:	53                   	push   ebx
c001382a:	e8 41 cd fe ff       	call   c0000570 <strlen>
c001382f:	83 c4 10             	add    esp,0x10
c0013832:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013837:	81 c4 d0 00 00 00    	add    esp,0xd0
c001383d:	89 f0                	mov    eax,esi
c001383f:	5b                   	pop    ebx
c0013840:	5e                   	pop    esi
c0013841:	5f                   	pop    edi
c0013842:	c3                   	ret    

c0013843 <Reg::readBool(char*, char*, bool*)>:
c0013843:	83 ec 20             	sub    esp,0x20
c0013846:	8d 44 24 10          	lea    eax,[esp+0x10]
c001384a:	50                   	push   eax
c001384b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001384f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013853:	e8 7c fe ff ff       	call   c00136d4 <Reg::readInt(char*, char*, int*)>
c0013858:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001385d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013861:	0f 95 02             	setne  BYTE PTR [edx]
c0013864:	83 c4 2c             	add    esp,0x2c
c0013867:	c3                   	ret    

c0013868 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013868:	53                   	push   ebx
c0013869:	83 ec 1c             	sub    esp,0x1c
c001386c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013870:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013874:	50                   	push   eax
c0013875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013879:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001387d:	e8 c1 ff ff ff       	call   c0013843 <Reg::readBool(char*, char*, bool*)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	84 c0                	test   al,al
c0013887:	74 04                	je     c001388d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013889:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001388d:	88 d8                	mov    al,bl
c001388f:	83 c4 18             	add    esp,0x18
c0013892:	5b                   	pop    ebx
c0013893:	c3                   	ret    

c0013894 <Reg::readIntWithDefault(char*, char*, int)>:
c0013894:	53                   	push   ebx
c0013895:	83 ec 1c             	sub    esp,0x1c
c0013898:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001389c:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138a0:	50                   	push   eax
c00138a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a9:	e8 26 fe ff ff       	call   c00136d4 <Reg::readInt(char*, char*, int*)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	84 c0                	test   al,al
c00138b3:	74 04                	je     c00138b9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00138b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138b9:	89 d8                	mov    eax,ebx
c00138bb:	83 c4 18             	add    esp,0x18
c00138be:	5b                   	pop    ebx
c00138bf:	c3                   	ret    

c00138c0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00138c0:	57                   	push   edi
c00138c1:	56                   	push   esi
c00138c2:	56                   	push   esi
c00138c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138cb:	56                   	push   esi
c00138cc:	57                   	push   edi
c00138cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138d5:	e8 e8 fe ff ff       	call   c00137c2 <Reg::readString(char*, char*, char*, int)>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	84 c0                	test   al,al
c00138df:	75 1a                	jne    c00138fb <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138e1:	51                   	push   ecx
c00138e2:	56                   	push   esi
c00138e3:	6a 00                	push   0x0
c00138e5:	57                   	push   edi
c00138e6:	e8 05 cc fe ff       	call   c00004f0 <memset>
c00138eb:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138ee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138f4:	83 c4 10             	add    esp,0x10
c00138f7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00138fb:	89 f8                	mov    eax,edi
c00138fd:	5a                   	pop    edx
c00138fe:	5e                   	pop    esi
c00138ff:	5f                   	pop    edi
c0013900:	c3                   	ret    

c0013901 <SysEject(regs*)>:
c0013901:	83 ec 0c             	sub    esp,0xc
c0013904:	83 ca ff             	or     edx,0xffffffff
c0013907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001390e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013913:	83 e9 41             	sub    ecx,0x41
c0013916:	83 f9 19             	cmp    ecx,0x19
c0013919:	77 18                	ja     c0013933 <SysEject(regs*)+0x32>
c001391b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c0013922:	85 c9                	test   ecx,ecx
c0013924:	74 0d                	je     c0013933 <SysEject(regs*)+0x32>
c0013926:	83 ec 0c             	sub    esp,0xc
c0013929:	51                   	push   ecx
c001392a:	e8 3b a0 ff ff       	call   c000d96a <LogicalDisk::eject()>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	99                   	cdq    
c0013933:	83 c4 0c             	add    esp,0xc
c0013936:	c3                   	ret    

c0013937 <SysExit(regs*)>:
c0013937:	83 ec 18             	sub    esp,0x18
c001393a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001393e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013941:	e8 16 2b 00 00       	call   c001645c <terminateTask(int)>
c0013946:	83 c8 ff             	or     eax,0xffffffff
c0013949:	83 c4 1c             	add    esp,0x1c
c001394c:	89 c2                	mov    edx,eax
c001394e:	c3                   	ret    

c001394f <SysGetCwd(regs*)>:
c001394f:	83 ec 10             	sub    esp,0x10
c0013952:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013956:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013959:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001395c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013961:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013964:	e8 77 7b ff ff       	call   c000b4e0 <Fs::getcwd(Process*, char*, int)>
c0013969:	83 c4 1c             	add    esp,0x1c
c001396c:	99                   	cdq    
c001396d:	c3                   	ret    

c001396e <SysGetPID(regs*)>:
c001396e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013973:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013976:	8b 00                	mov    eax,DWORD PTR [eax]
c0013978:	99                   	cdq    
c0013979:	c3                   	ret    

c001397a <SysGetRAMData(regs*)>:
c001397a:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013980:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001398a:	99                   	cdq    
c001398b:	f7 f9                	idiv   ecx
c001398d:	c1 e0 18             	shl    eax,0x18
c0013990:	09 c8                	or     eax,ecx
c0013992:	99                   	cdq    
c0013993:	c3                   	ret    

c0013994 <SysGetVGAPtr(regs*)>:
c0013994:	55                   	push   ebp
c0013995:	57                   	push   edi
c0013996:	56                   	push   esi
c0013997:	53                   	push   ebx
c0013998:	83 ec 18             	sub    esp,0x18
c001399b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001399f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00139a2:	e8 81 25 00 00       	call   c0015f28 <Thr::processFromPID(int)>
c00139a7:	83 c4 10             	add    esp,0x10
c00139aa:	89 c1                	mov    ecx,eax
c00139ac:	b8 01 00 00 00       	mov    eax,0x1
c00139b1:	85 c9                	test   ecx,ecx
c00139b3:	74 57                	je     c0013a0c <SysGetVGAPtr(regs*)+0x78>
c00139b5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00139bb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00139bf:	74 0c                	je     c00139cd <SysGetVGAPtr(regs*)+0x39>
c00139c1:	83 ec 0c             	sub    esp,0xc
c00139c4:	55                   	push   ebp
c00139c5:	e8 8f 4d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00139ca:	83 c4 10             	add    esp,0x10
c00139cd:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00139d0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00139d3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139da:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00139dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139e0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139e9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00139ec:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00139f2:	50                   	push   eax
c00139f3:	50                   	push   eax
c00139f4:	68 a9 1e 02 c0       	push   0xc0021ea9
c00139f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139fc:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a01:	50                   	push   eax
c0013a02:	e8 39 cc fe ff       	call   c0000640 <strcpy>
c0013a07:	83 c4 10             	add    esp,0x10
c0013a0a:	31 c0                	xor    eax,eax
c0013a0c:	83 c4 0c             	add    esp,0xc
c0013a0f:	31 d2                	xor    edx,edx
c0013a11:	5b                   	pop    ebx
c0013a12:	5e                   	pop    esi
c0013a13:	5f                   	pop    edi
c0013a14:	5d                   	pop    ebp
c0013a15:	c3                   	ret    
c0013a16:	66 90                	xchg   ax,ax

c0013a18 <SysKill(regs*)>:
c0013a18:	53                   	push   ebx
c0013a19:	83 ec 08             	sub    esp,0x8
c0013a1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a20:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a24:	75 16                	jne    c0013a3c <SysKill(regs*)+0x24>
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	68 b3 1e 02 c0       	push   0xc0021eb3
c0013a2e:	e8 ca d7 ff ff       	call   c00111fd <KePanic(char const*)>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	e9 89 00 00 00       	jmp    c0013ac4 <SysKill(regs*)+0xac>
c0013a3b:	90                   	nop
c0013a3c:	83 ec 0c             	sub    esp,0xc
c0013a3f:	68 84 a4 02 c0       	push   0xc002a484
c0013a44:	e8 d3 bc 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a49:	8d 76 00             	lea    esi,[esi+0x0]
c0013a4c:	83 c4 10             	add    esp,0x10
c0013a4f:	85 c0                	test   eax,eax
c0013a51:	74 19                	je     c0013a6c <SysKill(regs*)+0x54>
c0013a53:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a59:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a5b:	74 33                	je     c0013a90 <SysKill(regs*)+0x78>
c0013a5d:	52                   	push   edx
c0013a5e:	52                   	push   edx
c0013a5f:	50                   	push   eax
c0013a60:	68 84 a4 02 c0       	push   0xc002a484
c0013a65:	e8 d2 bf 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a6a:	eb e0                	jmp    c0013a4c <SysKill(regs*)+0x34>
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	68 78 a4 02 c0       	push   0xc002a478
c0013a74:	e8 a3 bc 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a79:	8d 76 00             	lea    esi,[esi+0x0]
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	85 c0                	test   eax,eax
c0013a81:	74 41                	je     c0013ac4 <SysKill(regs*)+0xac>
c0013a83:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a89:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a8b:	75 27                	jne    c0013ab4 <SysKill(regs*)+0x9c>
c0013a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a90:	51                   	push   ecx
c0013a91:	51                   	push   ecx
c0013a92:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a9d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013aa3:	e8 f6 db ff ff       	call   c001169e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	31 c0                	xor    eax,eax
c0013aad:	31 d2                	xor    edx,edx
c0013aaf:	eb 1b                	jmp    c0013acc <SysKill(regs*)+0xb4>
c0013ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab4:	52                   	push   edx
c0013ab5:	52                   	push   edx
c0013ab6:	50                   	push   eax
c0013ab7:	68 78 a4 02 c0       	push   0xc002a478
c0013abc:	e8 7b bf 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ac1:	eb b9                	jmp    c0013a7c <SysKill(regs*)+0x64>
c0013ac3:	90                   	nop
c0013ac4:	83 c8 ff             	or     eax,0xffffffff
c0013ac7:	89 c2                	mov    edx,eax
c0013ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0013acc:	83 c4 08             	add    esp,0x8
c0013acf:	5b                   	pop    ebx
c0013ad0:	c3                   	ret    

c0013ad1 <SysLoadDLL(regs*)>:
c0013ad1:	56                   	push   esi
c0013ad2:	53                   	push   ebx
c0013ad3:	31 d2                	xor    edx,edx
c0013ad5:	51                   	push   ecx
c0013ad6:	b8 01 00 00 00       	mov    eax,0x1
c0013adb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013adf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013ae3:	0f 84 8c 00 00 00    	je     c0013b75 <SysLoadDLL(regs*)+0xa4>
c0013ae9:	83 ec 0c             	sub    esp,0xc
c0013aec:	68 14 01 00 00       	push   0x114
c0013af1:	e8 c0 3f ff ff       	call   c0007ab6 <malloc>
c0013af6:	83 c4 0c             	add    esp,0xc
c0013af9:	89 c3                	mov    ebx,eax
c0013afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b00:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b03:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b06:	53                   	push   ebx
c0013b07:	e8 de 7b ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0013b0c:	83 c4 10             	add    esp,0x10
c0013b0f:	31 d2                	xor    edx,edx
c0013b11:	b8 02 00 00 00       	mov    eax,0x2
c0013b16:	85 db                	test   ebx,ebx
c0013b18:	74 5b                	je     c0013b75 <SysLoadDLL(regs*)+0xa4>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	53                   	push   ebx
c0013b1e:	e8 47 7f ff ff       	call   c000ba6a <File::exists()>
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	84 c0                	test   al,al
c0013b28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b2a:	75 11                	jne    c0013b3d <SysLoadDLL(regs*)+0x6c>
c0013b2c:	83 ec 0c             	sub    esp,0xc
c0013b2f:	53                   	push   ebx
c0013b30:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	b8 03 00 00 00       	mov    eax,0x3
c0013b3b:	eb 36                	jmp    c0013b73 <SysLoadDLL(regs*)+0xa2>
c0013b3d:	83 ec 0c             	sub    esp,0xc
c0013b40:	53                   	push   ebx
c0013b41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b44:	58                   	pop    eax
c0013b45:	5a                   	pop    edx
c0013b46:	6a 00                	push   0x0
c0013b48:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b4b:	e8 0e 15 00 00       	call   c001505e <Thr::loadDLL(char const*, bool)>
c0013b50:	83 c4 10             	add    esp,0x10
c0013b53:	89 c1                	mov    ecx,eax
c0013b55:	31 d2                	xor    edx,edx
c0013b57:	b8 04 00 00 00       	mov    eax,0x4
c0013b5c:	85 c9                	test   ecx,ecx
c0013b5e:	74 15                	je     c0013b75 <SysLoadDLL(regs*)+0xa4>
c0013b60:	53                   	push   ebx
c0013b61:	53                   	push   ebx
c0013b62:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b68:	51                   	push   ecx
c0013b69:	e8 21 17 00 00       	call   c001528f <Thr::executeDLL(unsigned long, void*)>
c0013b6e:	83 c4 10             	add    esp,0x10
c0013b71:	31 c0                	xor    eax,eax
c0013b73:	31 d2                	xor    edx,edx
c0013b75:	59                   	pop    ecx
c0013b76:	5b                   	pop    ebx
c0013b77:	5e                   	pop    esi
c0013b78:	c3                   	ret    

c0013b79 <SysRead(regs*)>:
c0013b79:	57                   	push   edi
c0013b7a:	56                   	push   esi
c0013b7b:	53                   	push   ebx
c0013b7c:	83 ec 10             	sub    esp,0x10
c0013b7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b86:	83 f8 02             	cmp    eax,0x2
c0013b89:	77 10                	ja     c0013b9b <SysRead(regs*)+0x22>
c0013b8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b93:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b99:	eb 0e                	jmp    c0013ba9 <SysRead(regs*)+0x30>
c0013b9b:	83 ec 0c             	sub    esp,0xc
c0013b9e:	50                   	push   eax
c0013b9f:	e8 0f 59 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	89 c1                	mov    ecx,eax
c0013ba9:	83 c8 ff             	or     eax,0xffffffff
c0013bac:	85 c9                	test   ecx,ecx
c0013bae:	89 c2                	mov    edx,eax
c0013bb0:	74 28                	je     c0013bda <SysRead(regs*)+0x61>
c0013bb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013bba:	31 ff                	xor    edi,edi
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bc1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bc5:	52                   	push   edx
c0013bc6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bc9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bcc:	57                   	push   edi
c0013bcd:	56                   	push   esi
c0013bce:	51                   	push   ecx
c0013bcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013bd6:	83 c4 20             	add    esp,0x20
c0013bd9:	99                   	cdq    
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	5b                   	pop    ebx
c0013bde:	5e                   	pop    esi
c0013bdf:	5f                   	pop    edi
c0013be0:	c3                   	ret    

c0013be1 <SysRegisterSignal(regs*)>:
c0013be1:	83 ec 18             	sub    esp,0x18
c0013be4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be8:	6a 00                	push   0x0
c0013bea:	6a 00                	push   0x0
c0013bec:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013bef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013bf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bf7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bfa:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c00:	e8 63 da ff ff       	call   c0011668 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c05:	83 c4 2c             	add    esp,0x2c
c0013c08:	99                   	cdq    
c0013c09:	c3                   	ret    

c0013c0a <SysRegistryGetTypeFromPath(regs*)>:
c0013c0a:	57                   	push   edi
c0013c0b:	56                   	push   esi
c0013c0c:	53                   	push   ebx
c0013c0d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c13:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c1a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c1d:	68 d4 1e 02 c0       	push   0xc0021ed4
c0013c22:	e8 1e 6d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c27:	5a                   	pop    edx
c0013c28:	59                   	pop    ecx
c0013c29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c2c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c2f:	e8 4d f6 ff ff       	call   c0013281 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c34:	5f                   	pop    edi
c0013c35:	89 c6                	mov    esi,eax
c0013c37:	5a                   	pop    edx
c0013c38:	50                   	push   eax
c0013c39:	68 f4 1e 02 c0       	push   0xc0021ef4
c0013c3e:	e8 02 6d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	85 f6                	test   esi,esi
c0013c48:	74 28                	je     c0013c72 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c4a:	50                   	push   eax
c0013c4b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013c4f:	57                   	push   edi
c0013c50:	56                   	push   esi
c0013c51:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c54:	e8 0c f2 ff ff       	call   c0012e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013c59:	83 c4 0c             	add    esp,0xc
c0013c5c:	89 c3                	mov    ebx,eax
c0013c5e:	57                   	push   edi
c0013c5f:	50                   	push   eax
c0013c60:	68 fc 1e 02 c0       	push   0xc0021efc
c0013c65:	e8 db 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c6a:	89 d8                	mov    eax,ebx
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	99                   	cdq    
c0013c70:	eb 05                	jmp    c0013c77 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c72:	83 c8 ff             	or     eax,0xffffffff
c0013c75:	89 c2                	mov    edx,eax
c0013c77:	81 c4 30 01 00 00    	add    esp,0x130
c0013c7d:	5b                   	pop    ebx
c0013c7e:	5e                   	pop    esi
c0013c7f:	5f                   	pop    edi
c0013c80:	c3                   	ret    

c0013c81 <SysRegistryReadExtent(regs*)>:
c0013c81:	83 ec 1c             	sub    esp,0x1c
c0013c84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c88:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c8b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c8e:	85 c0                	test   eax,eax
c0013c90:	79 1f                	jns    c0013cb1 <SysRegistryReadExtent(regs*)+0x30>
c0013c92:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c97:	52                   	push   edx
c0013c98:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c9c:	52                   	push   edx
c0013c9d:	50                   	push   eax
c0013c9e:	51                   	push   ecx
c0013c9f:	e8 b3 f0 ff ff       	call   c0012d57 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cac:	83 c4 10             	add    esp,0x10
c0013caf:	eb 14                	jmp    c0013cc5 <SysRegistryReadExtent(regs*)+0x44>
c0013cb1:	83 ec 04             	sub    esp,0x4
c0013cb4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013cb7:	50                   	push   eax
c0013cb8:	51                   	push   ecx
c0013cb9:	e8 33 eb ff ff       	call   c00127f1 <CmGetString(Reghive_Tag*, int, char*)>
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	31 c0                	xor    eax,eax
c0013cc3:	31 d2                	xor    edx,edx
c0013cc5:	83 c4 1c             	add    esp,0x1c
c0013cc8:	c3                   	ret    

c0013cc9 <SysRegistryPathToExtentLookup(regs*)>:
c0013cc9:	53                   	push   ebx
c0013cca:	83 ec 10             	sub    esp,0x10
c0013ccd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd4:	68 12 1f 02 c0       	push   0xc0021f12
c0013cd9:	e8 67 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cde:	58                   	pop    eax
c0013cdf:	5a                   	pop    edx
c0013ce0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ce3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ce6:	e8 96 f5 ff ff       	call   c0013281 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ceb:	83 c4 18             	add    esp,0x18
c0013cee:	99                   	cdq    
c0013cef:	5b                   	pop    ebx
c0013cf0:	c3                   	ret    

c0013cf1 <SysRegistryEnterDirectory(regs*)>:
c0013cf1:	53                   	push   ebx
c0013cf2:	83 ec 10             	sub    esp,0x10
c0013cf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cf9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cfc:	68 35 1f 02 c0       	push   0xc0021f35
c0013d01:	e8 3f 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d06:	58                   	pop    eax
c0013d07:	5a                   	pop    edx
c0013d08:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d0b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d0e:	e8 55 eb ff ff       	call   c0012868 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d13:	83 c4 18             	add    esp,0x18
c0013d16:	99                   	cdq    
c0013d17:	5b                   	pop    ebx
c0013d18:	c3                   	ret    

c0013d19 <SysRegistryGetNext(regs*)>:
c0013d19:	53                   	push   ebx
c0013d1a:	83 ec 10             	sub    esp,0x10
c0013d1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d24:	68 53 1f 02 c0       	push   0xc0021f53
c0013d29:	e8 17 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d2e:	58                   	pop    eax
c0013d2f:	5a                   	pop    edx
c0013d30:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d33:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d36:	e8 6c eb ff ff       	call   c00128a7 <CmGetNext(Reghive_Tag*, int)>
c0013d3b:	83 c4 18             	add    esp,0x18
c0013d3e:	99                   	cdq    
c0013d3f:	5b                   	pop    ebx
c0013d40:	c3                   	ret    

c0013d41 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d41:	57                   	push   edi
c0013d42:	56                   	push   esi
c0013d43:	53                   	push   ebx
c0013d44:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d4a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013d51:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d55:	57                   	push   edi
c0013d56:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013d59:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d5c:	e8 04 f1 ff ff       	call   c0012e65 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d61:	89 c3                	mov    ebx,eax
c0013d63:	58                   	pop    eax
c0013d64:	5a                   	pop    edx
c0013d65:	57                   	push   edi
c0013d66:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d69:	e8 d2 c8 fe ff       	call   c0000640 <strcpy>
c0013d6e:	89 d8                	mov    eax,ebx
c0013d70:	81 c4 40 01 00 00    	add    esp,0x140
c0013d76:	99                   	cdq    
c0013d77:	5b                   	pop    ebx
c0013d78:	5e                   	pop    esi
c0013d79:	5f                   	pop    edi
c0013d7a:	c3                   	ret    

c0013d7b <SysRegistryOpen(regs*)>:
c0013d7b:	83 ec 18             	sub    esp,0x18
c0013d7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d82:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d85:	e8 f7 e8 ff ff       	call   c0012681 <CmOpen(char const*)>
c0013d8a:	83 c4 1c             	add    esp,0x1c
c0013d8d:	99                   	cdq    
c0013d8e:	c3                   	ret    

c0013d8f <SysRegistryClose(regs*)>:
c0013d8f:	83 ec 18             	sub    esp,0x18
c0013d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d96:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d99:	e8 01 ea ff ff       	call   c001279f <CmClose(Reghive_Tag*)>
c0013d9e:	31 c0                	xor    eax,eax
c0013da0:	31 d2                	xor    edx,edx
c0013da2:	83 c4 1c             	add    esp,0x1c
c0013da5:	c3                   	ret    

c0013da6 <SysSbrk(regs*)>:
c0013da6:	56                   	push   esi
c0013da7:	53                   	push   ebx
c0013da8:	50                   	push   eax
c0013da9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013db2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013db5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013db8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013dbe:	85 db                	test   ebx,ebx
c0013dc0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013dc3:	74 02                	je     c0013dc7 <SysSbrk(regs*)+0x21>
c0013dc5:	79 06                	jns    c0013dcd <SysSbrk(regs*)+0x27>
c0013dc7:	89 f0                	mov    eax,esi
c0013dc9:	31 d2                	xor    edx,edx
c0013dcb:	eb 2a                	jmp    c0013df7 <SysSbrk(regs*)+0x51>
c0013dcd:	83 c8 ff             	or     eax,0xffffffff
c0013dd0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013dd6:	89 c2                	mov    edx,eax
c0013dd8:	77 1d                	ja     c0013df7 <SysSbrk(regs*)+0x51>
c0013dda:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013de0:	50                   	push   eax
c0013de1:	c1 ea 0c             	shr    edx,0xc
c0013de4:	68 07 0c 00 00       	push   0xc07
c0013de9:	52                   	push   edx
c0013dea:	51                   	push   ecx
c0013deb:	e8 34 60 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013df0:	89 f0                	mov    eax,esi
c0013df2:	31 d2                	xor    edx,edx
c0013df4:	83 c4 10             	add    esp,0x10
c0013df7:	59                   	pop    ecx
c0013df8:	5b                   	pop    ebx
c0013df9:	5e                   	pop    esi
c0013dfa:	c3                   	ret    

c0013dfb <SysSetCwd(regs*)>:
c0013dfb:	83 ec 14             	sub    esp,0x14
c0013dfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e02:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e0a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e0d:	e8 f7 7c ff ff       	call   c000bb09 <Fs::setcwd(Process*, char*)>
c0013e12:	83 c4 1c             	add    esp,0x1c
c0013e15:	99                   	cdq    
c0013e16:	c3                   	ret    

c0013e17 <SysSetTime(regs*)>:
c0013e17:	55                   	push   ebp
c0013e18:	31 c9                	xor    ecx,ecx
c0013e1a:	57                   	push   edi
c0013e1b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e20:	56                   	push   esi
c0013e21:	53                   	push   ebx
c0013e22:	31 db                	xor    ebx,ebx
c0013e24:	83 ec 10             	sub    esp,0x10
c0013e27:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e2b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e2e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e31:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e34:	89 c2                	mov    edx,eax
c0013e36:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e3c:	83 e2 1f             	and    edx,0x1f
c0013e3f:	c1 e7 10             	shl    edi,0x10
c0013e42:	42                   	inc    edx
c0013e43:	c1 e8 05             	shr    eax,0x5
c0013e46:	88 d1                	mov    cl,dl
c0013e48:	31 d2                	xor    edx,edx
c0013e4a:	f7 f5                	div    ebp
c0013e4c:	89 dd                	mov    ebp,ebx
c0013e4e:	88 d5                	mov    ch,dl
c0013e50:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013e56:	0f b7 c1             	movzx  eax,cx
c0013e59:	31 d2                	xor    edx,edx
c0013e5b:	09 f8                	or     eax,edi
c0013e5d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013e62:	89 c1                	mov    ecx,eax
c0013e64:	89 f0                	mov    eax,esi
c0013e66:	f7 f7                	div    edi
c0013e68:	c1 e2 10             	shl    edx,0x10
c0013e6b:	09 d5                	or     ebp,edx
c0013e6d:	31 d2                	xor    edx,edx
c0013e6f:	89 eb                	mov    ebx,ebp
c0013e71:	f7 f7                	div    edi
c0013e73:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e78:	88 d7                	mov    bh,dl
c0013e7a:	89 f0                	mov    eax,esi
c0013e7c:	31 d2                	xor    edx,edx
c0013e7e:	f7 f7                	div    edi
c0013e80:	bf 18 00 00 00       	mov    edi,0x18
c0013e85:	31 d2                	xor    edx,edx
c0013e87:	f7 f7                	div    edi
c0013e89:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e8e:	88 d3                	mov    bl,dl
c0013e90:	53                   	push   ebx
c0013e91:	51                   	push   ecx
c0013e92:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e98:	e8 69 84 ff ff       	call   c000c306 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e9d:	83 c4 1c             	add    esp,0x1c
c0013ea0:	83 f0 01             	xor    eax,0x1
c0013ea3:	5b                   	pop    ebx
c0013ea4:	0f b6 c0             	movzx  eax,al
c0013ea7:	5e                   	pop    esi
c0013ea8:	31 d2                	xor    edx,edx
c0013eaa:	5f                   	pop    edi
c0013eab:	5d                   	pop    ebp
c0013eac:	c3                   	ret    

c0013ead <SysTimezone(regs*)>:
c0013ead:	53                   	push   ebx
c0013eae:	83 ec 08             	sub    esp,0x8
c0013eb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eb5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013eb9:	75 17                	jne    c0013ed2 <SysTimezone(regs*)+0x25>
c0013ebb:	83 ec 0c             	sub    esp,0xc
c0013ebe:	68 6a 1f 02 c0       	push   0xc0021f6a
c0013ec3:	e8 7d 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ec8:	83 c8 ff             	or     eax,0xffffffff
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	89 c2                	mov    edx,eax
c0013ed0:	eb 20                	jmp    c0013ef2 <SysTimezone(regs*)+0x45>
c0013ed2:	83 ec 0c             	sub    esp,0xc
c0013ed5:	68 7f 1f 02 c0       	push   0xc0021f7f
c0013eda:	e8 66 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013edf:	58                   	pop    eax
c0013ee0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ee3:	e8 88 81 ff ff       	call   c000c070 <User::loadClockSettings(int)>
c0013ee8:	83 c4 10             	add    esp,0x10
c0013eeb:	b8 01 00 00 00       	mov    eax,0x1
c0013ef0:	31 d2                	xor    edx,edx
c0013ef2:	83 c4 08             	add    esp,0x8
c0013ef5:	5b                   	pop    ebx
c0013ef6:	c3                   	ret    

c0013ef7 <SysTruncate(regs*)>:
c0013ef7:	55                   	push   ebp
c0013ef8:	57                   	push   edi
c0013ef9:	31 ff                	xor    edi,edi
c0013efb:	56                   	push   esi
c0013efc:	53                   	push   ebx
c0013efd:	83 ec 0c             	sub    esp,0xc
c0013f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f04:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f07:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f0a:	89 ce                	mov    esi,ecx
c0013f0c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f10:	0f 84 9a 00 00 00    	je     c0013fb0 <SysTruncate(regs*)+0xb9>
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	68 14 01 00 00       	push   0x114
c0013f1e:	e8 93 3b ff ff       	call   c0007ab6 <malloc>
c0013f23:	83 c4 0c             	add    esp,0xc
c0013f26:	89 c3                	mov    ebx,eax
c0013f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f2d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f30:	55                   	push   ebp
c0013f31:	53                   	push   ebx
c0013f32:	e8 b3 77 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	31 d2                	xor    edx,edx
c0013f3c:	b8 03 00 00 00       	mov    eax,0x3
c0013f41:	85 db                	test   ebx,ebx
c0013f43:	0f 84 a2 00 00 00    	je     c0013feb <SysTruncate(regs*)+0xf4>
c0013f49:	51                   	push   ecx
c0013f4a:	51                   	push   ecx
c0013f4b:	6a 02                	push   0x2
c0013f4d:	53                   	push   ebx
c0013f4e:	e8 53 78 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0013f53:	83 c4 10             	add    esp,0x10
c0013f56:	85 c0                	test   eax,eax
c0013f58:	74 13                	je     c0013f6d <SysTruncate(regs*)+0x76>
c0013f5a:	83 ec 0c             	sub    esp,0xc
c0013f5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f5f:	53                   	push   ebx
c0013f60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	b8 04 00 00 00       	mov    eax,0x4
c0013f6b:	eb 7c                	jmp    c0013fe9 <SysTruncate(regs*)+0xf2>
c0013f6d:	52                   	push   edx
c0013f6e:	57                   	push   edi
c0013f6f:	56                   	push   esi
c0013f70:	53                   	push   ebx
c0013f71:	e8 44 79 ff ff       	call   c000b8ba <File::truncate(unsigned long long)>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	85 c0                	test   eax,eax
c0013f7b:	74 1b                	je     c0013f98 <SysTruncate(regs*)+0xa1>
c0013f7d:	83 ec 0c             	sub    esp,0xc
c0013f80:	53                   	push   ebx
c0013f81:	e8 7e 78 ff ff       	call   c000b804 <File::close()>
c0013f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	b8 05 00 00 00       	mov    eax,0x5
c0013f96:	eb 51                	jmp    c0013fe9 <SysTruncate(regs*)+0xf2>
c0013f98:	83 ec 0c             	sub    esp,0xc
c0013f9b:	53                   	push   ebx
c0013f9c:	e8 63 78 ff ff       	call   c000b804 <File::close()>
c0013fa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fa6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fa9:	83 c4 10             	add    esp,0x10
c0013fac:	31 c0                	xor    eax,eax
c0013fae:	eb 39                	jmp    c0013fe9 <SysTruncate(regs*)+0xf2>
c0013fb0:	31 d2                	xor    edx,edx
c0013fb2:	b8 01 00 00 00       	mov    eax,0x1
c0013fb7:	83 fd 02             	cmp    ebp,0x2
c0013fba:	7e 2f                	jle    c0013feb <SysTruncate(regs*)+0xf4>
c0013fbc:	83 ec 0c             	sub    esp,0xc
c0013fbf:	51                   	push   ecx
c0013fc0:	e8 ee 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	89 c1                	mov    ecx,eax
c0013fca:	31 d2                	xor    edx,edx
c0013fcc:	b8 02 00 00 00       	mov    eax,0x2
c0013fd1:	85 c9                	test   ecx,ecx
c0013fd3:	74 16                	je     c0013feb <SysTruncate(regs*)+0xf4>
c0013fd5:	50                   	push   eax
c0013fd6:	57                   	push   edi
c0013fd7:	56                   	push   esi
c0013fd8:	51                   	push   ecx
c0013fd9:	e8 dc 78 ff ff       	call   c000b8ba <File::truncate(unsigned long long)>
c0013fde:	83 c4 10             	add    esp,0x10
c0013fe1:	85 c0                	test   eax,eax
c0013fe3:	0f 95 c0             	setne  al
c0013fe6:	0f b6 c0             	movzx  eax,al
c0013fe9:	31 d2                	xor    edx,edx
c0013feb:	83 c4 0c             	add    esp,0xc
c0013fee:	5b                   	pop    ebx
c0013fef:	5e                   	pop    esi
c0013ff0:	5f                   	pop    edi
c0013ff1:	5d                   	pop    ebp
c0013ff2:	c3                   	ret    

c0013ff3 <SysWrite(regs*)>:
c0013ff3:	57                   	push   edi
c0013ff4:	56                   	push   esi
c0013ff5:	53                   	push   ebx
c0013ff6:	83 ec 10             	sub    esp,0x10
c0013ff9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013ffd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014000:	83 f8 02             	cmp    eax,0x2
c0014003:	77 10                	ja     c0014015 <SysWrite(regs*)+0x22>
c0014005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001400a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001400d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014013:	eb 0e                	jmp    c0014023 <SysWrite(regs*)+0x30>
c0014015:	83 ec 0c             	sub    esp,0xc
c0014018:	50                   	push   eax
c0014019:	e8 95 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001401e:	83 c4 10             	add    esp,0x10
c0014021:	89 c1                	mov    ecx,eax
c0014023:	83 c8 ff             	or     eax,0xffffffff
c0014026:	85 c9                	test   ecx,ecx
c0014028:	89 c2                	mov    edx,eax
c001402a:	74 28                	je     c0014054 <SysWrite(regs*)+0x61>
c001402c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014034:	31 ff                	xor    edi,edi
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	8b 01                	mov    eax,DWORD PTR [ecx]
c001403b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001403f:	52                   	push   edx
c0014040:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014043:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014046:	57                   	push   edi
c0014047:	56                   	push   esi
c0014048:	51                   	push   ecx
c0014049:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001404c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014050:	83 c4 20             	add    esp,0x20
c0014053:	99                   	cdq    
c0014054:	83 c4 10             	add    esp,0x10
c0014057:	5b                   	pop    ebx
c0014058:	5e                   	pop    esi
c0014059:	5f                   	pop    edi
c001405a:	c3                   	ret    

c001405b <SysWsbe(regs*)>:
c001405b:	57                   	push   edi
c001405c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014061:	56                   	push   esi
c0014062:	be be 1f 02 c0       	mov    esi,0xc0021fbe
c0014067:	53                   	push   ebx
c0014068:	83 ec 30             	sub    esp,0x30
c001406b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001406f:	fc                   	cld    
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014075:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014079:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001407e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014081:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014087:	8b 06                	mov    eax,DWORD PTR [esi]
c0014089:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001408c:	57                   	push   edi
c001408d:	e8 de c4 fe ff       	call   c0000570 <strlen>
c0014092:	5a                   	pop    edx
c0014093:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014097:	52                   	push   edx
c0014098:	31 d2                	xor    edx,edx
c001409a:	57                   	push   edi
c001409b:	52                   	push   edx
c001409c:	50                   	push   eax
c001409d:	56                   	push   esi
c001409e:	ff d3                	call   ebx
c00140a0:	83 c4 14             	add    esp,0x14
c00140a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00140a7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140aa:	e8 ad 23 00 00       	call   c001645c <terminateTask(int)>
c00140af:	83 c4 40             	add    esp,0x40
c00140b2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140b7:	5b                   	pop    ebx
c00140b8:	31 d2                	xor    edx,edx
c00140ba:	5e                   	pop    esi
c00140bb:	5f                   	pop    edi
c00140bc:	c3                   	ret    

c00140bd <SysYield(regs*)>:
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	fa                   	cli    
c00140c1:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00140c7:	e8 f0 19 00 00       	call   c0015abc <schedule()>
c00140cc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00140d1:	48                   	dec    eax
c00140d2:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00140d7:	75 01                	jne    c00140da <SysYield(regs*)+0x1d>
c00140d9:	fb                   	sti    
c00140da:	31 c0                	xor    eax,eax
c00140dc:	31 d2                	xor    edx,edx
c00140de:	83 c4 0c             	add    esp,0xc
c00140e1:	c3                   	ret    

c00140e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00140e2:	55                   	push   ebp
c00140e3:	57                   	push   edi
c00140e4:	56                   	push   esi
c00140e5:	53                   	push   ebx
c00140e6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00140ec:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00140f4:	0f 95 c0             	setne  al
c00140f7:	31 d2                	xor    edx,edx
c00140f9:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014101:	0f 94 c2             	sete   dl
c0014104:	85 c2                	test   edx,eax
c0014106:	74 34                	je     c001413c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014108:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014113:	74 27                	je     c001413c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014115:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001411c:	05 00 10 00 00       	add    eax,0x1000
c0014121:	89 c1                	mov    ecx,eax
c0014123:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014128:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001412e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014135:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001413c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001414c:	6a 01                	push   0x1
c001414e:	e8 ba 54 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014153:	83 c4 10             	add    esp,0x10
c0014156:	89 c3                	mov    ebx,eax
c0014158:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001415e:	0f 86 25 01 00 00    	jbe    c0014289 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014164:	c1 ee 0c             	shr    esi,0xc
c0014167:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001416e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014172:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001417a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014185:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001418c:	29 ef                	sub    edi,ebp
c001418e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014192:	0f 83 f8 00 00 00    	jae    c0014290 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014198:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001419e:	76 05                	jbe    c00141a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00141a0:	bf 00 10 00 00       	mov    edi,0x1000
c00141a5:	83 ec 0c             	sub    esp,0xc
c00141a8:	31 d2                	xor    edx,edx
c00141aa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00141b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141b3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141b7:	50                   	push   eax
c00141b8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00141bc:	56                   	push   esi
c00141bd:	52                   	push   edx
c00141be:	57                   	push   edi
c00141bf:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00141c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141c9:	83 c4 20             	add    esp,0x20
c00141cc:	85 c0                	test   eax,eax
c00141ce:	75 06                	jne    c00141d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00141d0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00141d4:	74 13                	je     c00141e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00141d6:	83 ec 0c             	sub    esp,0xc
c00141d9:	53                   	push   ebx
c00141da:	e8 4c 57 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	31 c0                	xor    eax,eax
c00141e4:	e9 7c 01 00 00       	jmp    c0014365 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00141e9:	fa                   	cli    
c00141ea:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00141f0:	e8 ca 3b ff ff       	call   c0007dbf <Phys::allocatePage()>
c00141f5:	6a 07                	push   0x7
c00141f7:	89 c7                	mov    edi,eax
c00141f9:	53                   	push   ebx
c00141fa:	50                   	push   eax
c00141fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014200:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014203:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014209:	e8 12 5b ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001420e:	83 c4 0c             	add    esp,0xc
c0014211:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014218:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001421e:	6a 00                	push   0x0
c0014220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014225:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014228:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001422e:	e8 53 59 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014233:	58                   	pop    eax
c0014234:	5a                   	pop    edx
c0014235:	68 07 0c 00 00       	push   0xc07
c001423a:	55                   	push   ebp
c001423b:	57                   	push   edi
c001423c:	89 df                	mov    edi,ebx
c001423e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014245:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001424b:	6a 00                	push   0x0
c001424d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014252:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014255:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001425b:	e8 12 5d ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014260:	b9 00 10 00 00       	mov    ecx,0x1000
c0014265:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014267:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001426c:	83 c4 20             	add    esp,0x20
c001426f:	48                   	dec    eax
c0014270:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014275:	85 c0                	test   eax,eax
c0014277:	75 01                	jne    c001427a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014279:	fb                   	sti    
c001427a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014280:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014284:	e9 f1 fe ff ff       	jmp    c001417a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014289:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014290:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014297:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001429d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00142a3:	0f 86 ae 00 00 00    	jbe    c0014357 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00142a9:	fa                   	cli    
c00142aa:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00142b0:	c1 ee 0c             	shr    esi,0xc
c00142b3:	51                   	push   ecx
c00142b4:	31 ff                	xor    edi,edi
c00142b6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00142bd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142c3:	6a 00                	push   0x0
c00142c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142cd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142d3:	e8 ae 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	e8 df 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c00142e0:	47                   	inc    edi
c00142e1:	6a 07                	push   0x7
c00142e3:	53                   	push   ebx
c00142e4:	50                   	push   eax
c00142e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00142ef:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00142f2:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00142f8:	e8 23 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00142fd:	58                   	pop    eax
c00142fe:	5a                   	pop    edx
c00142ff:	68 07 0c 00 00       	push   0xc07
c0014304:	55                   	push   ebp
c0014305:	81 c5 00 10 00 00    	add    ebp,0x1000
c001430b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001430f:	50                   	push   eax
c0014310:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014317:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001431d:	6a 00                	push   0x0
c001431f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014324:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014327:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001432d:	e8 40 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014332:	83 c4 1c             	add    esp,0x1c
c0014335:	68 00 10 00 00       	push   0x1000
c001433a:	6a 00                	push   0x0
c001433c:	53                   	push   ebx
c001433d:	e8 ae c1 fe ff       	call   c00004f0 <memset>
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	39 fe                	cmp    esi,edi
c0014347:	77 92                	ja     c00142db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014349:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001434e:	48                   	dec    eax
c001434f:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014354:	75 01                	jne    c0014357 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014356:	fb                   	sti    
c0014357:	83 ec 0c             	sub    esp,0xc
c001435a:	53                   	push   ebx
c001435b:	e8 cb 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	b0 01                	mov    al,0x1
c0014365:	81 c4 2c 10 00 00    	add    esp,0x102c
c001436b:	5b                   	pop    ebx
c001436c:	5e                   	pop    esi
c001436d:	5f                   	pop    edi
c001436e:	5d                   	pop    ebp
c001436f:	c3                   	ret    

c0014370 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014370:	55                   	push   ebp
c0014371:	57                   	push   edi
c0014372:	56                   	push   esi
c0014373:	53                   	push   ebx
c0014374:	83 ec 48             	sub    esp,0x48
c0014377:	68 14 01 00 00       	push   0x114
c001437c:	e8 35 37 ff ff       	call   c0007ab6 <malloc>
c0014381:	83 c4 0c             	add    esp,0xc
c0014384:	89 c6                	mov    esi,eax
c0014386:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001438a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001438e:	50                   	push   eax
c001438f:	e8 56 73 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0014394:	58                   	pop    eax
c0014395:	5a                   	pop    edx
c0014396:	6a 01                	push   0x1
c0014398:	56                   	push   esi
c0014399:	e8 08 74 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	85 c0                	test   eax,eax
c00143a3:	0f 85 43 01 00 00    	jne    c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00143b1:	83 ec 0c             	sub    esp,0xc
c00143b4:	6a 34                	push   0x34
c00143b6:	e8 fb 36 ff ff       	call   c0007ab6 <malloc>
c00143bb:	89 c3                	mov    ebx,eax
c00143bd:	58                   	pop    eax
c00143be:	8b 06                	mov    eax,DWORD PTR [esi]
c00143c0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00143c4:	57                   	push   edi
c00143c5:	53                   	push   ebx
c00143c6:	6a 00                	push   0x0
c00143c8:	6a 34                	push   0x34
c00143ca:	56                   	push   esi
c00143cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143ce:	83 c4 20             	add    esp,0x20
c00143d1:	85 c0                	test   eax,eax
c00143d3:	0f 85 13 01 00 00    	jne    c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143d9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00143df:	0f 85 07 01 00 00    	jne    c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143e8:	85 c0                	test   eax,eax
c00143ea:	0f 84 fc 00 00 00    	je     c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143f0:	31 d2                	xor    edx,edx
c00143f2:	55                   	push   ebp
c00143f3:	52                   	push   edx
c00143f4:	50                   	push   eax
c00143f5:	56                   	push   esi
c00143f6:	e8 69 74 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c00143fb:	83 c4 10             	add    esp,0x10
c00143fe:	85 c0                	test   eax,eax
c0014400:	0f 85 e6 00 00 00    	jne    c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014406:	83 ec 0c             	sub    esp,0xc
c0014409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001440c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014410:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014414:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014418:	0f af c2             	imul   eax,edx
c001441b:	50                   	push   eax
c001441c:	e8 95 36 ff ff       	call   c0007ab6 <malloc>
c0014421:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014427:	89 3c 24             	mov    DWORD PTR [esp],edi
c001442a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001442e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014432:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014436:	0f af c2             	imul   eax,edx
c0014439:	99                   	cdq    
c001443a:	52                   	push   edx
c001443b:	50                   	push   eax
c001443c:	56                   	push   esi
c001443d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014440:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014443:	83 c4 20             	add    esp,0x20
c0014446:	85 c0                	test   eax,eax
c0014448:	0f 84 9e 00 00 00    	je     c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001444e:	31 d2                	xor    edx,edx
c0014450:	51                   	push   ecx
c0014451:	52                   	push   edx
c0014452:	50                   	push   eax
c0014453:	56                   	push   esi
c0014454:	e8 0b 74 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	85 c0                	test   eax,eax
c001445e:	0f 85 88 00 00 00    	jne    c00144ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001446b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001446f:	31 ed                	xor    ebp,ebp
c0014471:	0f af c2             	imul   eax,edx
c0014474:	50                   	push   eax
c0014475:	e8 3c 36 ff ff       	call   c0007ab6 <malloc>
c001447a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001447c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014480:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014487:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001448b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001448f:	0f af c2             	imul   eax,edx
c0014492:	99                   	cdq    
c0014493:	52                   	push   edx
c0014494:	50                   	push   eax
c0014495:	56                   	push   esi
c0014496:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014499:	83 c4 20             	add    esp,0x20
c001449c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144a4:	0f b7 fd             	movzx  edi,bp
c00144a7:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00144ab:	73 7d                	jae    c001452a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00144ad:	c1 e7 05             	shl    edi,0x5
c00144b0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00144b4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00144b7:	75 6b                	jne    c0014524 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00144b9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00144bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144c0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00144c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144c7:	52                   	push   edx
c00144c8:	31 d2                	xor    edx,edx
c00144ca:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00144cd:	52                   	push   edx
c00144ce:	50                   	push   eax
c00144cf:	56                   	push   esi
c00144d0:	e8 8f 73 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c00144d5:	83 c4 10             	add    esp,0x10
c00144d8:	85 c0                	test   eax,eax
c00144da:	74 17                	je     c00144f3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00144dc:	83 ec 0c             	sub    esp,0xc
c00144df:	68 ea 1f 02 c0       	push   0xc0021fea
c00144e4:	e8 5c 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	31 c0                	xor    eax,eax
c00144ee:	e9 87 00 00 00       	jmp    c001457a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00144f3:	83 ec 0c             	sub    esp,0xc
c00144f6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00144f9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00144fc:	50                   	push   eax
c00144fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014501:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014505:	56                   	push   esi
c0014506:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001450a:	e8 d3 fb ff ff       	call   c00140e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001450f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014513:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014517:	83 c4 20             	add    esp,0x20
c001451a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001451e:	73 04                	jae    c0014524 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014520:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014524:	45                   	inc    ebp
c0014525:	e9 7a ff ff ff       	jmp    c00144a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001452a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001452e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014532:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014536:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014545:	25 00 f0 ff ff       	and    eax,0xfffff000
c001454a:	05 00 10 00 00       	add    eax,0x1000
c001454f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014556:	e8 6b 35 ff ff       	call   c0007ac6 <free>
c001455b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001455e:	e8 63 35 ff ff       	call   c0007ac6 <free>
c0014563:	58                   	pop    eax
c0014564:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014568:	e8 59 35 ff ff       	call   c0007ac6 <free>
c001456d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014570:	e8 8f 72 ff ff       	call   c000b804 <File::close()>
c0014575:	83 c4 10             	add    esp,0x10
c0014578:	b0 01                	mov    al,0x1
c001457a:	83 c4 3c             	add    esp,0x3c
c001457d:	5b                   	pop    ebx
c001457e:	5e                   	pop    esi
c001457f:	5f                   	pop    edi
c0014580:	5d                   	pop    ebp
c0014581:	c3                   	ret    

c0014582 <Thr::runtimeReferenceHelper()>:
c0014582:	83 ec 18             	sub    esp,0x18
c0014585:	68 f2 1f 02 c0       	push   0xc0021ff2
c001458a:	e8 b6 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001458f:	fa                   	cli    
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	eb fe                	jmp    c0014593 <Thr::runtimeReferenceHelper()+0x11>

c0014595 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014595:	57                   	push   edi
c0014596:	56                   	push   esi
c0014597:	53                   	push   ebx
c0014598:	31 db                	xor    ebx,ebx
c001459a:	39 1d 40 a4 02 c0    	cmp    DWORD PTR ds:0xc002a440,ebx
c00145a0:	7e 3c                	jle    c00145de <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00145a2:	8b 34 9d c0 a3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5c40]
c00145a9:	31 ff                	xor    edi,edi
c00145ab:	39 3c 9d c0 a2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5d40],edi
c00145b2:	7e 27                	jle    c00145db <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00145b4:	50                   	push   eax
c00145b5:	50                   	push   eax
c00145b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00145bc:	03 04 9d 40 a3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5cc0]
c00145c3:	50                   	push   eax
c00145c4:	e8 87 c1 fe ff       	call   c0000750 <strcmp>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	85 c0                	test   eax,eax
c00145ce:	75 05                	jne    c00145d5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00145d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145d3:	eb 0b                	jmp    c00145e0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00145d5:	83 c6 10             	add    esi,0x10
c00145d8:	47                   	inc    edi
c00145d9:	eb d0                	jmp    c00145ab <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00145db:	43                   	inc    ebx
c00145dc:	eb bc                	jmp    c001459a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00145de:	31 c0                	xor    eax,eax
c00145e0:	5b                   	pop    ebx
c00145e1:	5e                   	pop    esi
c00145e2:	5f                   	pop    edi
c00145e3:	c3                   	ret    

c00145e4 <Thr::loadKernelSymbolTable(char const*)>:
c00145e4:	55                   	push   ebp
c00145e5:	57                   	push   edi
c00145e6:	56                   	push   esi
c00145e7:	53                   	push   ebx
c00145e8:	83 ec 68             	sub    esp,0x68
c00145eb:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c00145f1:	68 14 01 00 00       	push   0x114
c00145f6:	e8 bb 34 ff ff       	call   c0007ab6 <malloc>
c00145fb:	83 c4 0c             	add    esp,0xc
c00145fe:	89 c3                	mov    ebx,eax
c0014600:	56                   	push   esi
c0014601:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014605:	50                   	push   eax
c0014606:	e8 df 70 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c001460b:	5e                   	pop    esi
c001460c:	5f                   	pop    edi
c001460d:	6a 01                	push   0x1
c001460f:	53                   	push   ebx
c0014610:	e8 91 71 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0014615:	83 c4 10             	add    esp,0x10
c0014618:	85 c0                	test   eax,eax
c001461a:	74 0a                	je     c0014626 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001461c:	83 ec 0c             	sub    esp,0xc
c001461f:	68 14 20 02 c0       	push   0xc0022014
c0014624:	eb 34                	jmp    c001465a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014626:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001462e:	83 ec 0c             	sub    esp,0xc
c0014631:	6a 34                	push   0x34
c0014633:	e8 7e 34 ff ff       	call   c0007ab6 <malloc>
c0014638:	59                   	pop    ecx
c0014639:	89 c7                	mov    edi,eax
c001463b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001463f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014641:	56                   	push   esi
c0014642:	57                   	push   edi
c0014643:	6a 00                	push   0x0
c0014645:	6a 34                	push   0x34
c0014647:	53                   	push   ebx
c0014648:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001464b:	83 c4 20             	add    esp,0x20
c001464e:	85 c0                	test   eax,eax
c0014650:	74 17                	je     c0014669 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014652:	83 ec 0c             	sub    esp,0xc
c0014655:	68 2b 20 02 c0       	push   0xc002202b
c001465a:	e8 9e cb ff ff       	call   c00111fd <KePanic(char const*)>
c001465f:	83 c4 10             	add    esp,0x10
c0014662:	31 c0                	xor    eax,eax
c0014664:	e9 31 02 00 00       	jmp    c001489a <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014669:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001466f:	75 e1                	jne    c0014652 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014671:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014674:	85 c0                	test   eax,eax
c0014676:	74 da                	je     c0014652 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014678:	52                   	push   edx
c0014679:	31 d2                	xor    edx,edx
c001467b:	52                   	push   edx
c001467c:	50                   	push   eax
c001467d:	53                   	push   ebx
c001467e:	e8 e1 71 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014683:	83 c4 10             	add    esp,0x10
c0014686:	85 c0                	test   eax,eax
c0014688:	75 c8                	jne    c0014652 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001468a:	83 ec 0c             	sub    esp,0xc
c001468d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014691:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014695:	31 ed                	xor    ebp,ebp
c0014697:	0f af c2             	imul   eax,edx
c001469a:	50                   	push   eax
c001469b:	e8 16 34 ff ff       	call   c0007ab6 <malloc>
c00146a0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00146a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146a6:	89 34 24             	mov    DWORD PTR [esp],esi
c00146a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146b5:	0f af c2             	imul   eax,edx
c00146b8:	99                   	cdq    
c00146b9:	52                   	push   edx
c00146ba:	50                   	push   eax
c00146bb:	53                   	push   ebx
c00146bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146bf:	83 c4 20             	add    esp,0x20
c00146c2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146d2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146e2:	0f b7 f5             	movzx  esi,bp
c00146e5:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00146e9:	0f 83 a7 00 00 00    	jae    c0014796 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00146ef:	6b f6 28             	imul   esi,esi,0x28
c00146f2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00146f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00146f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146fd:	50                   	push   eax
c00146fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014702:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014706:	8b 16                	mov    edx,DWORD PTR [esi]
c0014708:	6b c0 28             	imul   eax,eax,0x28
c001470b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001470f:	89 d0                	mov    eax,edx
c0014711:	31 d2                	xor    edx,edx
c0014713:	52                   	push   edx
c0014714:	50                   	push   eax
c0014715:	53                   	push   ebx
c0014716:	e8 49 71 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c001471b:	83 c4 0c             	add    esp,0xc
c001471e:	6a 20                	push   0x20
c0014720:	6a 00                	push   0x0
c0014722:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014726:	52                   	push   edx
c0014727:	e8 c4 bd fe ff       	call   c00004f0 <memset>
c001472c:	58                   	pop    eax
c001472d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001472f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014733:	51                   	push   ecx
c0014734:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014738:	52                   	push   edx
c0014739:	6a 00                	push   0x0
c001473b:	6a 1f                	push   0x1f
c001473d:	53                   	push   ebx
c001473e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014741:	83 c4 18             	add    esp,0x18
c0014744:	68 42 20 02 c0       	push   0xc0022042
c0014749:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001474d:	52                   	push   edx
c001474e:	e8 fd bf fe ff       	call   c0000750 <strcmp>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	85 c0                	test   eax,eax
c0014758:	75 0f                	jne    c0014769 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001475a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001475d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014765:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014769:	50                   	push   eax
c001476a:	50                   	push   eax
c001476b:	68 4a 20 02 c0       	push   0xc002204a
c0014770:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014774:	50                   	push   eax
c0014775:	e8 d6 bf fe ff       	call   c0000750 <strcmp>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	85 c0                	test   eax,eax
c001477f:	75 0f                	jne    c0014790 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014781:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014784:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001478c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014790:	45                   	inc    ebp
c0014791:	e9 4c ff ff ff       	jmp    c00146e2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014796:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001479b:	75 10                	jne    c00147ad <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001479d:	83 ec 0c             	sub    esp,0xc
c00147a0:	68 52 20 02 c0       	push   0xc0022052
c00147a5:	e8 53 ca ff ff       	call   c00111fd <KePanic(char const*)>
c00147aa:	83 c4 10             	add    esp,0x10
c00147ad:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00147b2:	75 10                	jne    c00147c4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00147b4:	83 ec 0c             	sub    esp,0xc
c00147b7:	68 52 20 02 c0       	push   0xc0022052
c00147bc:	e8 3c ca ff ff       	call   c00111fd <KePanic(char const*)>
c00147c1:	83 c4 10             	add    esp,0x10
c00147c4:	31 d2                	xor    edx,edx
c00147c6:	50                   	push   eax
c00147c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147cb:	52                   	push   edx
c00147cc:	50                   	push   eax
c00147cd:	53                   	push   ebx
c00147ce:	e8 91 70 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c00147d3:	5a                   	pop    edx
c00147d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147d8:	e8 d9 32 ff ff       	call   c0007ab6 <malloc>
c00147dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147e5:	31 c9                	xor    ecx,ecx
c00147e7:	5e                   	pop    esi
c00147e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ea:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00147ee:	55                   	push   ebp
c00147ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f3:	51                   	push   ecx
c00147f4:	52                   	push   edx
c00147f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00147f9:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00147fd:	53                   	push   ebx
c00147fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014801:	83 c4 14             	add    esp,0x14
c0014804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014808:	e8 a9 32 ff ff       	call   c0007ab6 <malloc>
c001480d:	89 c6                	mov    esi,eax
c001480f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014811:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014814:	56                   	push   esi
c0014815:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014819:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001481d:	51                   	push   ecx
c001481e:	52                   	push   edx
c001481f:	53                   	push   ebx
c0014820:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014823:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014827:	8b 15 40 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a440
c001482d:	83 c4 1c             	add    esp,0x1c
c0014830:	c1 e8 04             	shr    eax,0x4
c0014833:	89 04 95 c0 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d40],eax
c001483a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001483e:	31 d2                	xor    edx,edx
c0014840:	52                   	push   edx
c0014841:	50                   	push   eax
c0014842:	53                   	push   ebx
c0014843:	e8 1c 70 ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014848:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001484a:	31 d2                	xor    edx,edx
c001484c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001484f:	56                   	push   esi
c0014850:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014854:	52                   	push   edx
c0014855:	50                   	push   eax
c0014856:	53                   	push   ebx
c0014857:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001485a:	83 c4 14             	add    esp,0x14
c001485d:	53                   	push   ebx
c001485e:	e8 a1 6f ff ff       	call   c000b804 <File::close()>
c0014863:	5d                   	pop    ebp
c0014864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014868:	e8 59 32 ff ff       	call   c0007ac6 <free>
c001486d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014870:	e8 51 32 ff ff       	call   c0007ac6 <free>
c0014875:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c001487a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001487e:	8d 50 01             	lea    edx,[eax+0x1]
c0014881:	89 0c 85 c0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c40],ecx
c0014888:	89 34 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],esi
c001488f:	89 15 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,edx
c0014895:	83 c4 10             	add    esp,0x10
c0014898:	b0 01                	mov    al,0x1
c001489a:	83 c4 5c             	add    esp,0x5c
c001489d:	5b                   	pop    ebx
c001489e:	5e                   	pop    esi
c001489f:	5f                   	pop    edi
c00148a0:	5d                   	pop    ebp
c00148a1:	c3                   	ret    

c00148a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00148a2:	55                   	push   ebp
c00148a3:	57                   	push   edi
c00148a4:	56                   	push   esi
c00148a5:	53                   	push   ebx
c00148a6:	81 ec 68 03 00 00    	sub    esp,0x368
c00148ac:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00148b3:	8b 1d 90 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a490
c00148b9:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00148bd:	68 14 01 00 00       	push   0x114
c00148c2:	e8 ef 31 ff ff       	call   c0007ab6 <malloc>
c00148c7:	83 c4 0c             	add    esp,0xc
c00148ca:	89 c5                	mov    ebp,eax
c00148cc:	53                   	push   ebx
c00148cd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00148d4:	50                   	push   eax
c00148d5:	e8 10 6e ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c00148da:	5e                   	pop    esi
c00148db:	5f                   	pop    edi
c00148dc:	6a 01                	push   0x1
c00148de:	55                   	push   ebp
c00148df:	e8 c2 6e ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c00148e4:	83 c4 10             	add    esp,0x10
c00148e7:	85 c0                	test   eax,eax
c00148e9:	0f 85 aa 06 00 00    	jne    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148ef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00148f7:	83 ec 0c             	sub    esp,0xc
c00148fa:	6a 34                	push   0x34
c00148fc:	e8 b5 31 ff ff       	call   c0007ab6 <malloc>
c0014901:	5b                   	pop    ebx
c0014902:	89 c7                	mov    edi,eax
c0014904:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014908:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001490b:	53                   	push   ebx
c001490c:	57                   	push   edi
c001490d:	6a 00                	push   0x0
c001490f:	6a 34                	push   0x34
c0014911:	55                   	push   ebp
c0014912:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014915:	83 c4 20             	add    esp,0x20
c0014918:	85 c0                	test   eax,eax
c001491a:	0f 85 79 06 00 00    	jne    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014920:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014926:	0f 85 6d 06 00 00    	jne    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001492c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001492f:	85 c0                	test   eax,eax
c0014931:	0f 84 62 06 00 00    	je     c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014937:	31 d2                	xor    edx,edx
c0014939:	51                   	push   ecx
c001493a:	52                   	push   edx
c001493b:	50                   	push   eax
c001493c:	55                   	push   ebp
c001493d:	e8 22 6f ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014942:	83 c4 10             	add    esp,0x10
c0014945:	85 c0                	test   eax,eax
c0014947:	0f 85 4c 06 00 00    	jne    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001494d:	83 ec 0c             	sub    esp,0xc
c0014950:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014953:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014957:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001495b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001495f:	0f af c2             	imul   eax,edx
c0014962:	50                   	push   eax
c0014963:	e8 4e 31 ff ff       	call   c0007ab6 <malloc>
c0014968:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001496b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001496f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014972:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014976:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001497a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001497e:	0f af c2             	imul   eax,edx
c0014981:	99                   	cdq    
c0014982:	52                   	push   edx
c0014983:	50                   	push   eax
c0014984:	55                   	push   ebp
c0014985:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014988:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001498b:	83 c4 20             	add    esp,0x20
c001498e:	85 c0                	test   eax,eax
c0014990:	0f 84 03 06 00 00    	je     c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014996:	52                   	push   edx
c0014997:	31 d2                	xor    edx,edx
c0014999:	52                   	push   edx
c001499a:	50                   	push   eax
c001499b:	55                   	push   ebp
c001499c:	e8 c3 6e ff ff       	call   c000b864 <File::seek(unsigned long long)>
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	85 c0                	test   eax,eax
c00149a6:	0f 85 ed 05 00 00    	jne    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149ac:	83 ec 0c             	sub    esp,0xc
c00149af:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00149b3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00149b7:	31 f6                	xor    esi,esi
c00149b9:	0f af c2             	imul   eax,edx
c00149bc:	50                   	push   eax
c00149bd:	e8 f4 30 ff ff       	call   c0007ab6 <malloc>
c00149c2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00149c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149d0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00149d4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00149d8:	0f af c2             	imul   eax,edx
c00149db:	99                   	cdq    
c00149dc:	52                   	push   edx
c00149dd:	50                   	push   eax
c00149de:	55                   	push   ebp
c00149df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149e2:	83 c4 20             	add    esp,0x20
c00149e5:	0f b7 de             	movzx  ebx,si
c00149e8:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00149ec:	0f 83 87 00 00 00    	jae    c0014a79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00149f2:	c1 e3 05             	shl    ebx,0x5
c00149f5:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00149f9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00149fc:	75 75                	jne    c0014a73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00149fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014a01:	31 d2                	xor    edx,edx
c0014a03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a0e:	50                   	push   eax
c0014a0f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014a12:	52                   	push   edx
c0014a13:	50                   	push   eax
c0014a14:	55                   	push   ebp
c0014a15:	e8 4a 6e ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014a1a:	83 c4 10             	add    esp,0x10
c0014a1d:	85 c0                	test   eax,eax
c0014a1f:	0f 85 74 05 00 00    	jne    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a25:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a2c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a2f:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014a33:	31 d2                	xor    edx,edx
c0014a35:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a39:	83 ec 0c             	sub    esp,0xc
c0014a3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a40:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a47:	50                   	push   eax
c0014a48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a50:	52                   	push   edx
c0014a51:	50                   	push   eax
c0014a52:	55                   	push   ebp
c0014a53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a56:	83 c4 1c             	add    esp,0x1c
c0014a59:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014a5c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014a5f:	50                   	push   eax
c0014a60:	6a 00                	push   0x0
c0014a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a66:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014a6a:	50                   	push   eax
c0014a6b:	e8 80 ba fe ff       	call   c00004f0 <memset>
c0014a70:	83 c4 10             	add    esp,0x10
c0014a73:	46                   	inc    esi
c0014a74:	e9 6c ff ff ff       	jmp    c00149e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014a79:	53                   	push   ebx
c0014a7a:	31 db                	xor    ebx,ebx
c0014a7c:	68 00 01 00 00       	push   0x100
c0014a81:	6a 00                	push   0x0
c0014a83:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a87:	50                   	push   eax
c0014a88:	e8 63 ba fe ff       	call   c00004f0 <memset>
c0014a8d:	83 c4 0c             	add    esp,0xc
c0014a90:	68 00 01 00 00       	push   0x100
c0014a95:	6a 00                	push   0x0
c0014a97:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a9e:	50                   	push   eax
c0014a9f:	e8 4c ba fe ff       	call   c00004f0 <memset>
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014aaf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014ab7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014abf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014ac7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014acf:	0f b7 f3             	movzx  esi,bx
c0014ad2:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014ad6:	0f 83 2d 01 00 00    	jae    c0014c09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014adc:	6b f6 28             	imul   esi,esi,0x28
c0014adf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014ae3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014ae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014aea:	52                   	push   edx
c0014aeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014aef:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014af3:	8b 06                	mov    eax,DWORD PTR [esi]
c0014af5:	6b d2 28             	imul   edx,edx,0x28
c0014af8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014afc:	31 d2                	xor    edx,edx
c0014afe:	52                   	push   edx
c0014aff:	50                   	push   eax
c0014b00:	55                   	push   ebp
c0014b01:	e8 5e 6d ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014b06:	83 c4 0c             	add    esp,0xc
c0014b09:	6a 20                	push   0x20
c0014b0b:	6a 00                	push   0x0
c0014b0d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b14:	51                   	push   ecx
c0014b15:	e8 d6 b9 fe ff       	call   c00004f0 <memset>
c0014b1a:	59                   	pop    ecx
c0014b1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b1e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b22:	52                   	push   edx
c0014b23:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b2a:	51                   	push   ecx
c0014b2b:	6a 00                	push   0x0
c0014b2d:	6a 1f                	push   0x1f
c0014b2f:	55                   	push   ebp
c0014b30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b33:	83 c4 1c             	add    esp,0x1c
c0014b36:	6a 09                	push   0x9
c0014b38:	68 6c 20 02 c0       	push   0xc002206c
c0014b3d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b44:	51                   	push   ecx
c0014b45:	e8 36 b8 fe ff       	call   c0000380 <memcmp>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	85 c0                	test   eax,eax
c0014b4f:	75 21                	jne    c0014b72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b59:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014b5d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014b61:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b64:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b6b:	89 d0                	mov    eax,edx
c0014b6d:	40                   	inc    eax
c0014b6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b72:	50                   	push   eax
c0014b73:	6a 09                	push   0x9
c0014b75:	68 76 20 02 c0       	push   0xc0022076
c0014b7a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b81:	50                   	push   eax
c0014b82:	e8 f9 b7 fe ff       	call   c0000380 <memcmp>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	85 c0                	test   eax,eax
c0014b8c:	75 21                	jne    c0014baf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014b96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014b9a:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014b9e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ba1:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014ba8:	89 d0                	mov    eax,edx
c0014baa:	40                   	inc    eax
c0014bab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014baf:	50                   	push   eax
c0014bb0:	50                   	push   eax
c0014bb1:	68 42 20 02 c0       	push   0xc0022042
c0014bb6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bbd:	50                   	push   eax
c0014bbe:	e8 8d bb fe ff       	call   c0000750 <strcmp>
c0014bc3:	83 c4 10             	add    esp,0x10
c0014bc6:	85 c0                	test   eax,eax
c0014bc8:	75 0f                	jne    c0014bd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014bca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014bd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bd9:	50                   	push   eax
c0014bda:	50                   	push   eax
c0014bdb:	68 4a 20 02 c0       	push   0xc002204a
c0014be0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014be7:	50                   	push   eax
c0014be8:	e8 63 bb fe ff       	call   c0000750 <strcmp>
c0014bed:	83 c4 10             	add    esp,0x10
c0014bf0:	85 c0                	test   eax,eax
c0014bf2:	75 0f                	jne    c0014c03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014bf4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014bff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c03:	43                   	inc    ebx
c0014c04:	e9 c6 fe ff ff       	jmp    c0014acf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014c09:	31 d2                	xor    edx,edx
c0014c0b:	50                   	push   eax
c0014c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c10:	52                   	push   edx
c0014c11:	50                   	push   eax
c0014c12:	55                   	push   ebp
c0014c13:	e8 4c 6c ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014c18:	58                   	pop    eax
c0014c19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c1d:	e8 94 2e ff ff       	call   c0007ab6 <malloc>
c0014c22:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c25:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014c29:	31 d2                	xor    edx,edx
c0014c2b:	58                   	pop    eax
c0014c2c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014c30:	53                   	push   ebx
c0014c31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014c35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c39:	52                   	push   edx
c0014c3a:	50                   	push   eax
c0014c3b:	55                   	push   ebp
c0014c3c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c3f:	83 c4 14             	add    esp,0x14
c0014c42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c46:	e8 6b 2e ff ff       	call   c0007ab6 <malloc>
c0014c4b:	31 d2                	xor    edx,edx
c0014c4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c51:	83 c4 0c             	add    esp,0xc
c0014c54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c58:	52                   	push   edx
c0014c59:	50                   	push   eax
c0014c5a:	55                   	push   ebp
c0014c5b:	e8 04 6c ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014c60:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c63:	31 d2                	xor    edx,edx
c0014c65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c70:	52                   	push   edx
c0014c71:	50                   	push   eax
c0014c72:	55                   	push   ebp
c0014c73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c76:	83 c4 20             	add    esp,0x20
c0014c79:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014c7e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014c8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c8e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014c92:	0f 84 05 03 00 00    	je     c0014f9d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014c98:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014c9f:	31 d2                	xor    edx,edx
c0014ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ca5:	c1 e8 03             	shr    eax,0x3
c0014ca8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014cac:	51                   	push   ecx
c0014cad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cb1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014cb5:	52                   	push   edx
c0014cb6:	50                   	push   eax
c0014cb7:	55                   	push   ebp
c0014cb8:	e8 a7 6b ff ff       	call   c000b864 <File::seek(unsigned long long)>
c0014cbd:	5b                   	pop    ebx
c0014cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cc2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014cc9:	e8 e8 2d ff ff       	call   c0007ab6 <malloc>
c0014cce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014cd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014cd5:	31 d2                	xor    edx,edx
c0014cd7:	5e                   	pop    esi
c0014cd8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014cdc:	50                   	push   eax
c0014cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ce1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ce5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014cec:	52                   	push   edx
c0014ced:	50                   	push   eax
c0014cee:	55                   	push   ebp
c0014cef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cf2:	83 c4 20             	add    esp,0x20
c0014cf5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014cfd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014d01:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014d05:	0f 8d 76 02 00 00    	jge    c0014f81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014d0b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d13:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014d18:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014d1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d23:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014d27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d2b:	c1 e8 08             	shr    eax,0x8
c0014d2e:	89 c6                	mov    esi,eax
c0014d30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d34:	c1 e6 04             	shl    esi,0x4
c0014d37:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014d3b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014d3e:	85 db                	test   ebx,ebx
c0014d40:	0f 85 b3 00 00 00    	jne    c0014df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d46:	83 ec 0c             	sub    esp,0xc
c0014d49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d4d:	03 06                	add    eax,DWORD PTR [esi]
c0014d4f:	50                   	push   eax
c0014d50:	e8 40 f8 ff ff       	call   c0014595 <Thr::getAddressOfKernelSymbol(char const*)>
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	89 c3                	mov    ebx,eax
c0014d5a:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014d5f:	85 c0                	test   eax,eax
c0014d61:	0f 85 92 00 00 00    	jne    c0014df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d67:	83 ec 0c             	sub    esp,0xc
c0014d6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d6e:	03 06                	add    eax,DWORD PTR [esi]
c0014d70:	50                   	push   eax
c0014d71:	e8 72 c6 ff ff       	call   c00113e8 <KeResolveCompatibilitySymbol(char*)>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	89 c3                	mov    ebx,eax
c0014d7b:	85 c0                	test   eax,eax
c0014d7d:	75 7a                	jne    c0014df9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d7f:	51                   	push   ecx
c0014d80:	51                   	push   ecx
c0014d81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d85:	03 06                	add    eax,DWORD PTR [esi]
c0014d87:	50                   	push   eax
c0014d88:	68 80 20 02 c0       	push   0xc0022080
c0014d8d:	e8 b3 5b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014d92:	58                   	pop    eax
c0014d93:	5a                   	pop    edx
c0014d94:	68 9a 20 02 c0       	push   0xc002209a
c0014d99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014da0:	50                   	push   eax
c0014da1:	e8 9a b8 fe ff       	call   c0000640 <strcpy>
c0014da6:	59                   	pop    ecx
c0014da7:	58                   	pop    eax
c0014da8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014dac:	03 06                	add    eax,DWORD PTR [esi]
c0014dae:	50                   	push   eax
c0014daf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014db6:	50                   	push   eax
c0014db7:	e8 84 ba fe ff       	call   c0000840 <strcat>
c0014dbc:	58                   	pop    eax
c0014dbd:	5a                   	pop    edx
c0014dbe:	68 30 21 02 c0       	push   0xc0022130
c0014dc3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dca:	50                   	push   eax
c0014dcb:	e8 70 ba fe ff       	call   c0000840 <strcat>
c0014dd0:	83 c4 10             	add    esp,0x10
c0014dd3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014dd8:	0f 84 5d 01 00 00    	je     c0014f3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014dde:	83 ec 0c             	sub    esp,0xc
c0014de1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014de8:	50                   	push   eax
c0014de9:	e8 0f c4 ff ff       	call   c00111fd <KePanic(char const*)>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014df5:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014df9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014dfe:	83 f8 01             	cmp    eax,0x1
c0014e01:	0f 85 8f 00 00 00    	jne    c0014e96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014e07:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014e0e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014e12:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e16:	01 ce                	add    esi,ecx
c0014e18:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014e20:	0f 94 c0             	sete   al
c0014e23:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014e2b:	0f 94 c2             	sete   dl
c0014e2e:	09 c2                	or     edx,eax
c0014e30:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e32:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014e37:	0f b6 d2             	movzx  edx,dl
c0014e3a:	74 41                	je     c0014e7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014e3c:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014e3f:	85 d2                	test   edx,edx
c0014e41:	75 15                	jne    c0014e58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014e43:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e47:	66 83 f8 0c          	cmp    ax,0xc
c0014e4b:	76 05                	jbe    c0014e52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014e4d:	b8 0c 00 00 00       	mov    eax,0xc
c0014e52:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014e56:	76 37                	jbe    c0014e8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e58:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014e5c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e61:	0f 84 d4 00 00 00    	je     c0014f3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e67:	83 ec 0c             	sub    esp,0xc
c0014e6a:	68 b1 20 02 c0       	push   0xc00220b1
c0014e6f:	e8 89 c3 ff ff       	call   c00111fd <KePanic(char const*)>
c0014e74:	83 c4 10             	add    esp,0x10
c0014e77:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014e7b:	eb 12                	jmp    c0014e8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e7d:	01 c1                	add    ecx,eax
c0014e7f:	85 d2                	test   edx,edx
c0014e81:	75 0c                	jne    c0014e8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e83:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e87:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014e8b:	77 02                	ja     c0014e8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e8d:	01 d9                	add    ecx,ebx
c0014e8f:	89 0e                	mov    DWORD PTR [esi],ecx
c0014e91:	e9 e2 00 00 00       	jmp    c0014f78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014e96:	83 f8 02             	cmp    eax,0x2
c0014e99:	75 77                	jne    c0014f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014e9b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014ea2:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014ea6:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014eaa:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014eb2:	74 21                	je     c0014ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014eb4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014ebc:	74 17                	je     c0014ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014ebe:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014ec2:	b8 0a 00 00 00       	mov    eax,0xa
c0014ec7:	83 fa 0e             	cmp    edx,0xe
c0014eca:	77 03                	ja     c0014ecf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014ecc:	8d 42 fc             	lea    eax,[edx-0x4]
c0014ecf:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ed3:	76 17                	jbe    c0014eec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014ed5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014eda:	74 5f                	je     c0014f3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014edc:	83 ec 0c             	sub    esp,0xc
c0014edf:	68 cd 20 02 c0       	push   0xc00220cd
c0014ee4:	e8 14 c3 ff ff       	call   c00111fd <KePanic(char const*)>
c0014ee9:	83 c4 10             	add    esp,0x10
c0014eec:	8b 06                	mov    eax,DWORD PTR [esi]
c0014eee:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014ef3:	74 13                	je     c0014f08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014ef5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ef9:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014f00:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014f04:	01 d0                	add    eax,edx
c0014f06:	eb 04                	jmp    c0014f0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014f08:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014f0c:	01 c3                	add    ebx,eax
c0014f0e:	89 1e                	mov    DWORD PTR [esi],ebx
c0014f10:	eb 66                	jmp    c0014f78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f12:	52                   	push   edx
c0014f13:	52                   	push   edx
c0014f14:	50                   	push   eax
c0014f15:	68 e9 20 02 c0       	push   0xc00220e9
c0014f1a:	e8 26 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f1f:	83 c4 10             	add    esp,0x10
c0014f22:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f27:	74 12                	je     c0014f3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f29:	83 ec 0c             	sub    esp,0xc
c0014f2c:	68 f4 20 02 c0       	push   0xc00220f4
c0014f31:	e8 c7 c2 ff ff       	call   c00111fd <KePanic(char const*)>
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	eb 3d                	jmp    c0014f78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f3b:	83 ec 0c             	sub    esp,0xc
c0014f3e:	55                   	push   ebp
c0014f3f:	e8 c0 68 ff ff       	call   c000b804 <File::close()>
c0014f44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f4d:	59                   	pop    ecx
c0014f4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f52:	e8 6f 2b ff ff       	call   c0007ac6 <free>
c0014f57:	5b                   	pop    ebx
c0014f58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f5c:	e8 65 2b ff ff       	call   c0007ac6 <free>
c0014f61:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f64:	e8 5d 2b ff ff       	call   c0007ac6 <free>
c0014f69:	5e                   	pop    esi
c0014f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f6e:	e8 53 2b ff ff       	call   c0007ac6 <free>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	eb 21                	jmp    c0014f99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f78:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014f7c:	e9 7c fd ff ff       	jmp    c0014cfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014f81:	83 ec 0c             	sub    esp,0xc
c0014f84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f88:	e8 39 2b ff ff       	call   c0007ac6 <free>
c0014f8d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	e9 f1 fc ff ff       	jmp    c0014c8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014f99:	31 c0                	xor    eax,eax
c0014f9b:	eb 33                	jmp    c0014fd0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014f9d:	83 ec 0c             	sub    esp,0xc
c0014fa0:	55                   	push   ebp
c0014fa1:	e8 5e 68 ff ff       	call   c000b804 <File::close()>
c0014fa6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014faf:	58                   	pop    eax
c0014fb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fb4:	e8 0d 2b ff ff       	call   c0007ac6 <free>
c0014fb9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fbc:	e8 05 2b ff ff       	call   c0007ac6 <free>
c0014fc1:	5a                   	pop    edx
c0014fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fc6:	e8 fb 2a ff ff       	call   c0007ac6 <free>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	b0 01                	mov    al,0x1
c0014fd0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014fd6:	5b                   	pop    ebx
c0014fd7:	5e                   	pop    esi
c0014fd8:	5f                   	pop    edi
c0014fd9:	5d                   	pop    ebp
c0014fda:	c3                   	ret    

c0014fdb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014fdb:	56                   	push   esi
c0014fdc:	31 d2                	xor    edx,edx
c0014fde:	53                   	push   ebx
c0014fdf:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014fe5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014fe9:	39 d3                	cmp    ebx,edx
c0014feb:	7e 1b                	jle    c0015008 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014fed:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0014ff4:	39 c8                	cmp    eax,ecx
c0014ff6:	77 0d                	ja     c0015005 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014ff8:	8b 34 95 c0 9c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6340]
c0014fff:	01 c6                	add    esi,eax
c0015001:	39 ce                	cmp    esi,ecx
c0015003:	77 05                	ja     c001500a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015005:	42                   	inc    edx
c0015006:	eb e1                	jmp    c0014fe9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015008:	31 c0                	xor    eax,eax
c001500a:	5b                   	pop    ebx
c001500b:	5e                   	pop    esi
c001500c:	c3                   	ret    

c001500d <Thr::getDriverNameFromAddress(unsigned long)>:
c001500d:	53                   	push   ebx
c001500e:	31 c0                	xor    eax,eax
c0015010:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015014:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c001501a:	39 c3                	cmp    ebx,eax
c001501c:	7e 22                	jle    c0015040 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001501e:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c0015025:	39 ca                	cmp    edx,ecx
c0015027:	77 14                	ja     c001503d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015029:	03 14 85 c0 9c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6340]
c0015030:	39 ca                	cmp    edx,ecx
c0015032:	76 09                	jbe    c001503d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015034:	8b 04 85 c0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f40]
c001503b:	eb 05                	jmp    c0015042 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001503d:	40                   	inc    eax
c001503e:	eb da                	jmp    c001501a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015040:	31 c0                	xor    eax,eax
c0015042:	5b                   	pop    ebx
c0015043:	c3                   	ret    

c0015044 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015044:	53                   	push   ebx
c0015045:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015049:	53                   	push   ebx
c001504a:	e8 8c ff ff ff       	call   c0014fdb <Thr::getDriverBaseFromAddress(unsigned long)>
c001504f:	5a                   	pop    edx
c0015050:	31 d2                	xor    edx,edx
c0015052:	85 c0                	test   eax,eax
c0015054:	74 04                	je     c001505a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015056:	89 da                	mov    edx,ebx
c0015058:	29 c2                	sub    edx,eax
c001505a:	89 d0                	mov    eax,edx
c001505c:	5b                   	pop    ebx
c001505d:	c3                   	ret    

c001505e <Thr::loadDLL(char const*, bool)>:
c001505e:	55                   	push   ebp
c001505f:	57                   	push   edi
c0015060:	56                   	push   esi
c0015061:	53                   	push   ebx
c0015062:	81 ec 34 01 00 00    	sub    esp,0x134
c0015068:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001506f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015076:	56                   	push   esi
c0015077:	68 0c 21 02 c0       	push   0xc002210c
c001507c:	e8 c4 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015081:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015088:	e8 29 2a ff ff       	call   c0007ab6 <malloc>
c001508d:	83 c4 0c             	add    esp,0xc
c0015090:	89 c3                	mov    ebx,eax
c0015092:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0015098:	56                   	push   esi
c0015099:	50                   	push   eax
c001509a:	e8 4b 66 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c001509f:	83 c4 10             	add    esp,0x10
c00150a2:	85 db                	test   ebx,ebx
c00150a4:	75 3c                	jne    c00150e2 <Thr::loadDLL(char const*, bool)+0x84>
c00150a6:	89 f8                	mov    eax,edi
c00150a8:	84 c0                	test   al,al
c00150aa:	0f 84 d2 01 00 00    	je     c0015282 <Thr::loadDLL(char const*, bool)+0x224>
c00150b0:	55                   	push   ebp
c00150b1:	55                   	push   ebp
c00150b2:	68 1d 21 02 c0       	push   0xc002211d
c00150b7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00150bb:	55                   	push   ebp
c00150bc:	e8 7f b5 fe ff       	call   c0000640 <strcpy>
c00150c1:	58                   	pop    eax
c00150c2:	5a                   	pop    edx
c00150c3:	56                   	push   esi
c00150c4:	55                   	push   ebp
c00150c5:	e8 76 b7 fe ff       	call   c0000840 <strcat>
c00150ca:	59                   	pop    ecx
c00150cb:	58                   	pop    eax
c00150cc:	68 30 21 02 c0       	push   0xc0022130
c00150d1:	55                   	push   ebp
c00150d2:	e8 69 b7 fe ff       	call   c0000840 <strcat>
c00150d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150da:	e8 1e c1 ff ff       	call   c00111fd <KePanic(char const*)>
c00150df:	83 c4 10             	add    esp,0x10
c00150e2:	51                   	push   ecx
c00150e3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00150e7:	50                   	push   eax
c00150e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00150ec:	50                   	push   eax
c00150ed:	53                   	push   ebx
c00150ee:	e8 b5 69 ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	85 db                	test   ebx,ebx
c00150f8:	74 0c                	je     c0015106 <Thr::loadDLL(char const*, bool)+0xa8>
c00150fa:	83 ec 0c             	sub    esp,0xc
c00150fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150ff:	53                   	push   ebx
c0015100:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001510b:	75 0a                	jne    c0015117 <Thr::loadDLL(char const*, bool)+0xb9>
c001510d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015111:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015115:	75 3c                	jne    c0015153 <Thr::loadDLL(char const*, bool)+0xf5>
c0015117:	89 f8                	mov    eax,edi
c0015119:	84 c0                	test   al,al
c001511b:	0f 84 49 01 00 00    	je     c001526a <Thr::loadDLL(char const*, bool)+0x20c>
c0015121:	51                   	push   ecx
c0015122:	51                   	push   ecx
c0015123:	68 1d 21 02 c0       	push   0xc002211d
c0015128:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001512c:	53                   	push   ebx
c001512d:	e8 0e b5 fe ff       	call   c0000640 <strcpy>
c0015132:	5d                   	pop    ebp
c0015133:	58                   	pop    eax
c0015134:	56                   	push   esi
c0015135:	53                   	push   ebx
c0015136:	e8 05 b7 fe ff       	call   c0000840 <strcat>
c001513b:	58                   	pop    eax
c001513c:	5a                   	pop    edx
c001513d:	68 30 21 02 c0       	push   0xc0022130
c0015142:	53                   	push   ebx
c0015143:	e8 f8 b6 fe ff       	call   c0000840 <strcat>
c0015148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001514b:	e8 ad c0 ff ff       	call   c00111fd <KePanic(char const*)>
c0015150:	83 c4 10             	add    esp,0x10
c0015153:	52                   	push   edx
c0015154:	6a 03                	push   0x3
c0015156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001515a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001515e:	05 ff 0f 00 00       	add    eax,0xfff
c0015163:	83 d2 00             	adc    edx,0x0
c0015166:	0f ac d0 0c          	shrd   eax,edx,0xc
c001516a:	50                   	push   eax
c001516b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015171:	e8 ae 4c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015176:	59                   	pop    ecx
c0015177:	89 c3                	mov    ebx,eax
c0015179:	5d                   	pop    ebp
c001517a:	50                   	push   eax
c001517b:	68 b2 07 02 c0       	push   0xc00207b2
c0015180:	e8 c0 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015185:	89 34 24             	mov    DWORD PTR [esp],esi
c0015188:	e8 e3 b3 fe ff       	call   c0000570 <strlen>
c001518d:	8b 2d a0 9c 02 c0    	mov    ebp,DWORD PTR ds:0xc0029ca0
c0015193:	40                   	inc    eax
c0015194:	89 04 24             	mov    DWORD PTR [esp],eax
c0015197:	e8 1a 29 ff ff       	call   c0007ab6 <malloc>
c001519c:	89 04 ad c0 a0 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd5f40],eax
c00151a3:	58                   	pop    eax
c00151a4:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c00151a9:	5a                   	pop    edx
c00151aa:	56                   	push   esi
c00151ab:	ff 34 85 c0 a0 02 c0 	push   DWORD PTR [eax*4-0x3ffd5f40]
c00151b2:	e8 89 b4 fe ff       	call   c0000640 <strcpy>
c00151b7:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c00151bc:	8d 50 01             	lea    edx,[eax+0x1]
c00151bf:	89 1c 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],ebx
c00151c6:	89 15 a0 9c 02 c0    	mov    DWORD PTR ds:0xc0029ca0,edx
c00151cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151d0:	83 c4 0c             	add    esp,0xc
c00151d3:	89 14 85 c0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6340],edx
c00151da:	6a 01                	push   0x1
c00151dc:	53                   	push   ebx
c00151dd:	56                   	push   esi
c00151de:	e8 bf f6 ff ff       	call   c00148a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	0f b6 c0             	movzx  eax,al
c00151e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151ed:	85 c0                	test   eax,eax
c00151ef:	0f 85 89 00 00 00    	jne    c001527e <Thr::loadDLL(char const*, bool)+0x220>
c00151f5:	89 f8                	mov    eax,edi
c00151f7:	84 c0                	test   al,al
c00151f9:	74 73                	je     c001526e <Thr::loadDLL(char const*, bool)+0x210>
c00151fb:	83 ec 0c             	sub    esp,0xc
c00151fe:	68 32 21 02 c0       	push   0xc0022132
c0015203:	e8 f5 bf ff ff       	call   c00111fd <KePanic(char const*)>
c0015208:	83 c4 10             	add    esp,0x10
c001520b:	eb 61                	jmp    c001526e <Thr::loadDLL(char const*, bool)+0x210>
c001520d:	50                   	push   eax
c001520e:	50                   	push   eax
c001520f:	89 e8                	mov    eax,ebp
c0015211:	c1 e0 0c             	shl    eax,0xc
c0015214:	01 d8                	add    eax,ebx
c0015216:	50                   	push   eax
c0015217:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001521d:	e8 ea 46 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015222:	83 c4 10             	add    esp,0x10
c0015225:	8b 00                	mov    eax,DWORD PTR [eax]
c0015227:	a8 60                	test   al,0x60
c0015229:	75 11                	jne    c001523c <Thr::loadDLL(char const*, bool)+0x1de>
c001522b:	83 ec 0c             	sub    esp,0xc
c001522e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015233:	50                   	push   eax
c0015234:	e8 1d 2b ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015239:	83 c4 10             	add    esp,0x10
c001523c:	45                   	inc    ebp
c001523d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015241:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015245:	05 ff 0f 00 00       	add    eax,0xfff
c001524a:	bf 00 00 00 00       	mov    edi,0x0
c001524f:	83 d2 00             	adc    edx,0x0
c0015252:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015256:	c1 ea 0c             	shr    edx,0xc
c0015259:	39 c5                	cmp    ebp,eax
c001525b:	89 d1                	mov    ecx,edx
c001525d:	89 f8                	mov    eax,edi
c001525f:	19 c8                	sbb    eax,ecx
c0015261:	72 aa                	jb     c001520d <Thr::loadDLL(char const*, bool)+0x1af>
c0015263:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015268:	75 18                	jne    c0015282 <Thr::loadDLL(char const*, bool)+0x224>
c001526a:	31 db                	xor    ebx,ebx
c001526c:	eb 14                	jmp    c0015282 <Thr::loadDLL(char const*, bool)+0x224>
c001526e:	83 ec 0c             	sub    esp,0xc
c0015271:	68 51 21 02 c0       	push   0xc0022151
c0015276:	e8 82 bf ff ff       	call   c00111fd <KePanic(char const*)>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	31 ed                	xor    ebp,ebp
c0015280:	eb bb                	jmp    c001523d <Thr::loadDLL(char const*, bool)+0x1df>
c0015282:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015288:	89 d8                	mov    eax,ebx
c001528a:	5b                   	pop    ebx
c001528b:	5e                   	pop    esi
c001528c:	5f                   	pop    edi
c001528d:	5d                   	pop    ebp
c001528e:	c3                   	ret    

c001528f <Thr::executeDLL(unsigned long, void*)>:
c001528f:	56                   	push   esi
c0015290:	53                   	push   ebx
c0015291:	52                   	push   edx
c0015292:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015296:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001529a:	85 db                	test   ebx,ebx
c001529c:	75 10                	jne    c00152ae <Thr::executeDLL(unsigned long, void*)+0x1f>
c001529e:	83 ec 0c             	sub    esp,0xc
c00152a1:	68 6d 21 02 c0       	push   0xc002216d
c00152a6:	e8 52 bf ff ff       	call   c00111fd <KePanic(char const*)>
c00152ab:	83 c4 10             	add    esp,0x10
c00152ae:	50                   	push   eax
c00152af:	50                   	push   eax
c00152b0:	53                   	push   ebx
c00152b1:	68 97 21 02 c0       	push   0xc0022197
c00152b6:	e8 8a 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00152bb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00152bf:	89 d8                	mov    eax,ebx
c00152c1:	83 c4 14             	add    esp,0x14
c00152c4:	5b                   	pop    ebx
c00152c5:	5e                   	pop    esi
c00152c6:	ff e0                	jmp    eax

c00152c8 <userModeEntryPoint(void*)>:
c00152c8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00152cd:	83 e8 01             	sub    eax,0x1
c00152d0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00152d5:	75 01                	jne    c00152d8 <userModeEntryPoint(void*)+0x10>
c00152d7:	fb                   	sti    
c00152d8:	fb                   	sti    
c00152d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152e1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00152e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152eb:	e9 4f af fe ff       	jmp    c000023f <goToUsermode>

c00152f0 <changeTSS>:
c00152f0:	83 ec 14             	sub    esp,0x14
c00152f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152fb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015300:	c1 e2 15             	shl    edx,0x15
c0015303:	29 d0                	sub    eax,edx
c0015305:	50                   	push   eax
c0015306:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001530b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015311:	05 7c 11 00 00       	add    eax,0x117c
c0015316:	50                   	push   eax
c0015317:	e8 38 3c ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c001531c:	83 c4 1c             	add    esp,0x1c
c001531f:	c3                   	ret    

c0015320 <switchToThread(ThreadControlBlock*)>:
c0015320:	57                   	push   edi
c0015321:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015327:	56                   	push   esi
c0015328:	85 c9                	test   ecx,ecx
c001532a:	53                   	push   ebx
c001532b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001532f:	0f 85 8b 00 00 00    	jne    c00153c0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015335:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015339:	81 fa ff 00 00 00    	cmp    edx,0xff
c001533f:	74 7b                	je     c00153bc <switchToThread(ThreadControlBlock*)+0x9c>
c0015341:	b8 00 04 00 00       	mov    eax,0x400
c0015346:	29 d0                	sub    eax,edx
c0015348:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001534b:	d1 f8                	sar    eax,1
c001534d:	01 d0                	add    eax,edx
c001534f:	90                   	nop
c0015350:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015353:	e8 1e 28 00 00       	call   c0017b76 <HalQueryPerformanceCounter()>
c0015358:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c001535d:	89 15 ac a4 02 c0    	mov    DWORD PTR ds:0xc002a4ac,edx
c0015363:	89 c6                	mov    esi,eax
c0015365:	89 d7                	mov    edi,edx
c0015367:	2b 35 98 a4 02 c0    	sub    esi,DWORD PTR ds:0xc002a498
c001536d:	a3 98 a4 02 c0       	mov    ds:0xc002a498,eax
c0015372:	1b 3d 9c a4 02 c0    	sbb    edi,DWORD PTR ds:0xc002a49c
c0015378:	89 35 a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,esi
c001537e:	89 3d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,edi
c0015384:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001538a:	89 15 9c a4 02 c0    	mov    DWORD PTR ds:0xc002a49c,edx
c0015390:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015393:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015396:	01 c6                	add    esi,eax
c0015398:	11 d7                	adc    edi,edx
c001539a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001539d:	83 ec 0c             	sub    esp,0xc
c00153a0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00153a3:	53                   	push   ebx
c00153a4:	e8 ce ae fe ff       	call   c0000277 <switchToThreadASM>
c00153a9:	0f 20 c0             	mov    eax,cr0
c00153ac:	83 c8 08             	or     eax,0x8
c00153af:	0f 22 c0             	mov    cr0,eax
c00153b2:	83 c4 10             	add    esp,0x10
c00153b5:	5b                   	pop    ebx
c00153b6:	5e                   	pop    esi
c00153b7:	5f                   	pop    edi
c00153b8:	c3                   	ret    
c00153b9:	8d 76 00             	lea    esi,[esi+0x0]
c00153bc:	31 c0                	xor    eax,eax
c00153be:	eb 90                	jmp    c0015350 <switchToThread(ThreadControlBlock*)+0x30>
c00153c0:	5b                   	pop    ebx
c00153c1:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c00153cb:	5e                   	pop    esi
c00153cc:	5f                   	pop    edi
c00153cd:	c3                   	ret    
c00153ce:	66 90                	xchg   ax,ax

c00153d0 <Process::addArgs(char**)>:
c00153d0:	57                   	push   edi
c00153d1:	56                   	push   esi
c00153d2:	53                   	push   ebx
c00153d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00153db:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00153e5:	85 ff                	test   edi,edi
c00153e7:	74 4f                	je     c0015438 <Process::addArgs(char**)+0x68>
c00153e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00153eb:	85 c0                	test   eax,eax
c00153ed:	74 49                	je     c0015438 <Process::addArgs(char**)+0x68>
c00153ef:	31 db                	xor    ebx,ebx
c00153f1:	8d 76 00             	lea    esi,[esi+0x0]
c00153f4:	83 ec 0c             	sub    esp,0xc
c00153f7:	50                   	push   eax
c00153f8:	e8 73 b1 fe ff       	call   c0000570 <strlen>
c00153fd:	83 c0 01             	add    eax,0x1
c0015400:	89 04 24             	mov    DWORD PTR [esp],eax
c0015403:	e8 ae 26 ff ff       	call   c0007ab6 <malloc>
c0015408:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001540f:	5a                   	pop    edx
c0015410:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015413:	59                   	pop    ecx
c0015414:	83 c3 01             	add    ebx,0x1
c0015417:	52                   	push   edx
c0015418:	50                   	push   eax
c0015419:	e8 22 b2 fe ff       	call   c0000640 <strcpy>
c001541e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	83 c1 01             	add    ecx,0x1
c001542a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015430:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015433:	85 c0                	test   eax,eax
c0015435:	75 bd                	jne    c00153f4 <Process::addArgs(char**)+0x24>
c0015437:	90                   	nop
c0015438:	5b                   	pop    ebx
c0015439:	5e                   	pop    esi
c001543a:	5f                   	pop    edi
c001543b:	c3                   	ret    

c001543c <Process::Process(char const*, Process*, char**)>:
c001543c:	56                   	push   esi
c001543d:	53                   	push   ebx
c001543e:	83 ec 14             	sub    esp,0x14
c0015441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015445:	05 0c 02 00 00       	add    eax,0x20c
c001544a:	bb 07 00 00 00       	mov    ebx,0x7
c001544f:	89 c6                	mov    esi,eax
c0015451:	8d 76 00             	lea    esi,[esi+0x0]
c0015454:	85 db                	test   ebx,ebx
c0015456:	78 14                	js     c001546c <Process::Process(char const*, Process*, char**)+0x30>
c0015458:	83 ec 0c             	sub    esp,0xc
c001545b:	56                   	push   esi
c001545c:	e8 e7 a5 00 00       	call   c001fa48 <ThreadControlBlock::ThreadControlBlock()>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	83 c6 5f             	add    esi,0x5f
c0015467:	83 eb 01             	sub    ebx,0x1
c001546a:	eb e8                	jmp    c0015454 <Process::Process(char const*, Process*, char**)+0x18>
c001546c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015470:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001547b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015482:	83 ec 0c             	sub    esp,0xc
c0015485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015489:	e8 64 bb ff ff       	call   c0010ff2 <KeNewProcessEnv(Process*)>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	89 c2                	mov    edx,eax
c0015493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015497:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001549d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154a1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00154aa:	a1 c0 33 02 c0       	mov    eax,ds:0xc00233c0
c00154af:	8d 50 01             	lea    edx,[eax+0x1]
c00154b2:	89 15 c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,edx
c00154b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154bc:	89 02                	mov    DWORD PTR [edx],eax
c00154be:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00154c6:	83 ec 0c             	sub    esp,0xc
c00154c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154cd:	e8 e4 25 ff ff       	call   c0007ab6 <malloc>
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	89 c3                	mov    ebx,eax
c00154d7:	83 ec 08             	sub    esp,0x8
c00154da:	6a 00                	push   0x0
c00154dc:	53                   	push   ebx
c00154dd:	e8 86 4b ff ff       	call   c000a068 <VAS::VAS(bool)>
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00154ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00154fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015501:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015505:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001550b:	e8 06 c1 ff ff       	call   c0011616 <KeInitSignals()>
c0015510:	89 c2                	mov    edx,eax
c0015512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015516:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001551c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015520:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015526:	85 c0                	test   eax,eax
c0015528:	74 42                	je     c001556c <Process::Process(char const*, Process*, char**)+0x130>
c001552a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001552e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015534:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001553a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001553e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015548:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001554e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015558:	05 0c 01 00 00       	add    eax,0x10c
c001555d:	83 ec 08             	sub    esp,0x8
c0015560:	52                   	push   edx
c0015561:	50                   	push   eax
c0015562:	e8 d9 b0 fe ff       	call   c0000640 <strcpy>
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	eb 64                	jmp    c00155d0 <Process::Process(char const*, Process*, char**)+0x194>
c001556c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001557b:	e8 36 25 ff ff       	call   c0007ab6 <malloc>
c0015580:	83 c4 10             	add    esp,0x10
c0015583:	89 c3                	mov    ebx,eax
c0015585:	83 ec 08             	sub    esp,0x8
c0015588:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001558c:	53                   	push   ebx
c001558d:	e8 d4 36 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015599:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001559f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00155a9:	83 ec 0c             	sub    esp,0xc
c00155ac:	50                   	push   eax
c00155ad:	e8 52 2f ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00155b2:	83 c4 10             	add    esp,0x10
c00155b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b9:	05 0c 01 00 00       	add    eax,0x10c
c00155be:	83 ec 08             	sub    esp,0x8
c00155c1:	68 b6 21 02 c0       	push   0xc00221b6
c00155c6:	50                   	push   eax
c00155c7:	e8 74 b0 fe ff       	call   c0000640 <strcpy>
c00155cc:	83 c4 10             	add    esp,0x10
c00155cf:	90                   	nop
c00155d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d4:	83 c0 0c             	add    eax,0xc
c00155d7:	83 ec 08             	sub    esp,0x8
c00155da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155de:	50                   	push   eax
c00155df:	e8 5c b0 fe ff       	call   c0000640 <strcpy>
c00155e4:	83 c4 10             	add    esp,0x10
c00155e7:	83 ec 08             	sub    esp,0x8
c00155ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155f2:	e8 d9 fd ff ff       	call   c00153d0 <Process::addArgs(char**)>
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	83 ec 08             	sub    esp,0x8
c00155fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015601:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015605:	e8 66 ed ff ff       	call   c0014370 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015611:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015615:	83 f0 01             	xor    eax,0x1
c0015618:	88 c2                	mov    dl,al
c001561a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015624:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015629:	83 ec 04             	sub    esp,0x4
c001562c:	50                   	push   eax
c001562d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015631:	68 10 22 02 c0       	push   0xc0022210
c0015636:	e8 0a 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001563b:	83 c4 10             	add    esp,0x10
c001563e:	90                   	nop
c001563f:	83 c4 14             	add    esp,0x14
c0015642:	5b                   	pop    ebx
c0015643:	5e                   	pop    esi
c0015644:	c3                   	ret    
c0015645:	90                   	nop
c0015646:	66 90                	xchg   ax,ax

c0015648 <Process::Process(bool, char const*, Process*, char**)>:
c0015648:	56                   	push   esi
c0015649:	53                   	push   ebx
c001564a:	83 ec 24             	sub    esp,0x24
c001564d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015651:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015659:	05 0c 02 00 00       	add    eax,0x20c
c001565e:	bb 07 00 00 00       	mov    ebx,0x7
c0015663:	89 c6                	mov    esi,eax
c0015665:	8d 76 00             	lea    esi,[esi+0x0]
c0015668:	85 db                	test   ebx,ebx
c001566a:	78 14                	js     c0015680 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001566c:	83 ec 0c             	sub    esp,0xc
c001566f:	56                   	push   esi
c0015670:	e8 d3 a3 00 00       	call   c001fa48 <ThreadControlBlock::ThreadControlBlock()>
c0015675:	83 c4 10             	add    esp,0x10
c0015678:	83 c6 5f             	add    esi,0x5f
c001567b:	83 eb 01             	sub    ebx,0x1
c001567e:	eb e8                	jmp    c0015668 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015680:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015684:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001568b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001568f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015696:	83 ec 0c             	sub    esp,0xc
c0015699:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001569d:	e8 50 b9 ff ff       	call   c0010ff2 <KeNewProcessEnv(Process*)>
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	89 c2                	mov    edx,eax
c00156a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156ab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156b5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156be:	a1 c0 33 02 c0       	mov    eax,ds:0xc00233c0
c00156c3:	8d 50 01             	lea    edx,[eax+0x1]
c00156c6:	89 15 c0 33 02 c0    	mov    DWORD PTR ds:0xc00233c0,edx
c00156cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00156d0:	89 02                	mov    DWORD PTR [edx],eax
c00156d2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00156da:	83 ec 0c             	sub    esp,0xc
c00156dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156e1:	e8 d0 23 ff ff       	call   c0007ab6 <malloc>
c00156e6:	83 c4 10             	add    esp,0x10
c00156e9:	89 c3                	mov    ebx,eax
c00156eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00156f0:	83 ec 08             	sub    esp,0x8
c00156f3:	50                   	push   eax
c00156f4:	53                   	push   ebx
c00156f5:	e8 6e 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c00156fa:	83 c4 10             	add    esp,0x10
c00156fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015701:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015707:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001570b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015715:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015719:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001571d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015723:	e8 ee be ff ff       	call   c0011616 <KeInitSignals()>
c0015728:	89 c2                	mov    edx,eax
c001572a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001572e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015734:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015738:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001573e:	85 c0                	test   eax,eax
c0015740:	74 42                	je     c0015784 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015742:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015746:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001574c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015756:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001575c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015760:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015766:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001576c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015770:	05 0c 01 00 00       	add    eax,0x10c
c0015775:	83 ec 08             	sub    esp,0x8
c0015778:	52                   	push   edx
c0015779:	50                   	push   eax
c001577a:	e8 c1 ae fe ff       	call   c0000640 <strcpy>
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	eb 64                	jmp    c00157e8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015784:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001578c:	83 ec 0c             	sub    esp,0xc
c001578f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015793:	e8 1e 23 ff ff       	call   c0007ab6 <malloc>
c0015798:	83 c4 10             	add    esp,0x10
c001579b:	89 c3                	mov    ebx,eax
c001579d:	83 ec 08             	sub    esp,0x8
c00157a0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157a4:	53                   	push   ebx
c00157a5:	e8 bc 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00157aa:	83 c4 10             	add    esp,0x10
c00157ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157c1:	83 ec 0c             	sub    esp,0xc
c00157c4:	50                   	push   eax
c00157c5:	e8 3a 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00157ca:	83 c4 10             	add    esp,0x10
c00157cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d1:	05 0c 01 00 00       	add    eax,0x10c
c00157d6:	83 ec 08             	sub    esp,0x8
c00157d9:	68 b6 21 02 c0       	push   0xc00221b6
c00157de:	50                   	push   eax
c00157df:	e8 5c ae fe ff       	call   c0000640 <strcpy>
c00157e4:	83 c4 10             	add    esp,0x10
c00157e7:	90                   	nop
c00157e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157ec:	83 c0 0c             	add    eax,0xc
c00157ef:	83 ec 08             	sub    esp,0x8
c00157f2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157f6:	50                   	push   eax
c00157f7:	e8 44 ae fe ff       	call   c0000640 <strcpy>
c00157fc:	83 c4 10             	add    esp,0x10
c00157ff:	83 ec 08             	sub    esp,0x8
c0015802:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015806:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001580a:	e8 c1 fb ff ff       	call   c00153d0 <Process::addArgs(char**)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	90                   	nop
c0015813:	83 c4 24             	add    esp,0x24
c0015816:	5b                   	pop    ebx
c0015817:	5e                   	pop    esi
c0015818:	c3                   	ret    
c0015819:	8d 76 00             	lea    esi,[esi+0x0]

c001581c <taskStartupFunction>:
c001581c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015821:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015824:	c3                   	ret    
c0015825:	90                   	nop
c0015826:	66 90                	xchg   ax,ax

c0015828 <Semaphore::Semaphore(int)>:
c0015828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001582c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015830:	89 10                	mov    DWORD PTR [eax],edx
c0015832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015836:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001583d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015841:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001584c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015853:	90                   	nop
c0015854:	c3                   	ret    
c0015855:	90                   	nop
c0015856:	66 90                	xchg   ax,ax

c0015858 <Mutex::Mutex()>:
c0015858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001585c:	6a 01                	push   0x1
c001585e:	50                   	push   eax
c001585f:	e8 c4 ff ff ff       	call   c0015828 <Semaphore::Semaphore(int)>
c0015864:	83 c4 08             	add    esp,0x8
c0015867:	90                   	nop
c0015868:	c3                   	ret    
c0015869:	90                   	nop
c001586a:	66 90                	xchg   ax,ax

c001586c <Process::createThread(void (*)(void*), void*, int)>:
c001586c:	57                   	push   edi
c001586d:	31 c9                	xor    ecx,ecx
c001586f:	56                   	push   esi
c0015870:	53                   	push   ebx
c0015871:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015875:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001587c:	89 f2                	mov    edx,esi
c001587e:	66 90                	xchg   ax,ax
c0015880:	0f b7 c2             	movzx  eax,dx
c0015883:	80 e2 01             	and    dl,0x1
c0015886:	74 14                	je     c001589c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015888:	d1 f8                	sar    eax,1
c001588a:	83 c1 01             	add    ecx,0x1
c001588d:	89 c2                	mov    edx,eax
c001588f:	83 f9 10             	cmp    ecx,0x10
c0015892:	75 ec                	jne    c0015880 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015894:	31 db                	xor    ebx,ebx
c0015896:	89 d8                	mov    eax,ebx
c0015898:	5b                   	pop    ebx
c0015899:	5e                   	pop    esi
c001589a:	5f                   	pop    edi
c001589b:	c3                   	ret    
c001589c:	b8 01 00 00 00       	mov    eax,0x1
c00158a1:	d3 e0                	shl    eax,cl
c00158a3:	09 c6                	or     esi,eax
c00158a5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158a8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00158af:	01 c0                	add    eax,eax
c00158b1:	01 c8                	add    eax,ecx
c00158b3:	8d 04 80             	lea    eax,[eax+eax*4]
c00158b6:	01 d8                	add    eax,ebx
c00158b8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00158bf:	75 0b                	jne    c00158cc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00158c1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00158cb:	90                   	nop
c00158cc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00158d2:	83 ec 0c             	sub    esp,0xc
c00158d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00158d8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158db:	01 c0                	add    eax,eax
c00158dd:	01 c8                	add    eax,ecx
c00158df:	8d 3c 80             	lea    edi,[eax+eax*4]
c00158e2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00158e5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158eb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00158f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158f5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00158fb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015901:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015907:	89 ca                	mov    edx,ecx
c0015909:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015910:	f7 da                	neg    edx
c0015912:	c1 e2 15             	shl    edx,0x15
c0015915:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001591b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015921:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015925:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001592f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015935:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015939:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001593f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015949:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015953:	68 00 01 00 00       	push   0x100
c0015958:	e8 59 21 ff ff       	call   c0007ab6 <malloc>
c001595d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015960:	58                   	pop    eax
c0015961:	5a                   	pop    edx
c0015962:	53                   	push   ebx
c0015963:	68 84 a4 02 c0       	push   0xc002a484
c0015968:	e8 73 9e 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	89 d8                	mov    eax,ebx
c0015972:	5b                   	pop    ebx
c0015973:	5e                   	pop    esi
c0015974:	5f                   	pop    edi
c0015975:	c3                   	ret    
c0015976:	66 90                	xchg   ax,ax

c0015978 <Process::createUserThread()>:
c0015978:	83 ec 0c             	sub    esp,0xc
c001597b:	68 80 00 00 00       	push   0x80
c0015980:	6a 00                	push   0x0
c0015982:	68 c8 52 01 c0       	push   0xc00152c8
c0015987:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001598b:	50                   	push   eax
c001598c:	e8 db fe ff ff       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c0015991:	83 c4 1c             	add    esp,0x1c
c0015994:	c3                   	ret    
c0015995:	8d 76 00             	lea    esi,[esi+0x0]

c0015998 <setupMultitasking(void (*)())>:
c0015998:	56                   	push   esi
c0015999:	53                   	push   ebx
c001599a:	83 ec 04             	sub    esp,0x4
c001599d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159a1:	eb 11                	jmp    c00159b4 <setupMultitasking(void (*)())+0x1c>
c00159a3:	90                   	nop
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	68 84 a4 02 c0       	push   0xc002a484
c00159ac:	e8 73 9d 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159b1:	83 c4 10             	add    esp,0x10
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	68 84 a4 02 c0       	push   0xc002a484
c00159bc:	e8 3f 9d 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159c1:	83 c4 10             	add    esp,0x10
c00159c4:	84 c0                	test   al,al
c00159c6:	74 dc                	je     c00159a4 <setupMultitasking(void (*)())+0xc>
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	68 24 07 00 00       	push   0x724
c00159d0:	e8 e1 20 ff ff       	call   c0007ab6 <malloc>
c00159d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159dc:	89 c3                	mov    ebx,eax
c00159de:	6a 00                	push   0x0
c00159e0:	68 ba 21 02 c0       	push   0xc00221ba
c00159e5:	6a 01                	push   0x1
c00159e7:	50                   	push   eax
c00159e8:	e8 5b fc ff ff       	call   c0015648 <Process::Process(bool, char const*, Process*, char**)>
c00159ed:	83 c4 14             	add    esp,0x14
c00159f0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00159f6:	89 1d 90 a4 02 c0    	mov    DWORD PTR ds:0xc002a490,ebx
c00159fc:	50                   	push   eax
c00159fd:	e8 57 2d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015a02:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a09:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a13:	83 c8 01             	or     eax,0x1
c0015a16:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a1d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a26:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a30:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a36:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a3c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a46:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a50:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a5a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a60:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a6a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a70:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a7a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a81:	e8 30 20 ff ff       	call   c0007ab6 <malloc>
c0015a86:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a8c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a92:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a98:	5a                   	pop    edx
c0015a99:	59                   	pop    ecx
c0015a9a:	68 b6 21 02 c0       	push   0xc00221b6
c0015a9f:	50                   	push   eax
c0015aa0:	e8 9b ab fe ff       	call   c0000640 <strcpy>
c0015aa5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ab0:	83 c4 14             	add    esp,0x14
c0015ab3:	5b                   	pop    ebx
c0015ab4:	5e                   	pop    esi
c0015ab5:	e9 af a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015aba:	66 90                	xchg   ax,ax

c0015abc <schedule()>:
c0015abc:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015ac2:	85 d2                	test   edx,edx
c0015ac4:	74 0e                	je     c0015ad4 <schedule()+0x18>
c0015ac6:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015ad0:	c3                   	ret    
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad4:	53                   	push   ebx
c0015ad5:	83 ec 14             	sub    esp,0x14
c0015ad8:	68 84 a4 02 c0       	push   0xc002a484
c0015add:	e8 1e 9c 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	84 c0                	test   al,al
c0015ae7:	75 3f                	jne    c0015b28 <schedule()+0x6c>
c0015ae9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015af1:	83 fa 01             	cmp    edx,0x1
c0015af4:	74 3a                	je     c0015b30 <schedule()+0x74>
c0015af6:	66 90                	xchg   ax,ax
c0015af8:	83 ec 0c             	sub    esp,0xc
c0015afb:	68 84 a4 02 c0       	push   0xc002a484
c0015b00:	e8 17 9c 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b05:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015b0c:	89 c3                	mov    ebx,eax
c0015b0e:	e8 11 9c 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b13:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b1d:	e8 fe f7 ff ff       	call   c0015320 <switchToThread(ThreadControlBlock*)>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	8d 76 00             	lea    esi,[esi+0x0]
c0015b28:	83 c4 08             	add    esp,0x8
c0015b2b:	5b                   	pop    ebx
c0015b2c:	c3                   	ret    
c0015b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b30:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b37:	83 ec 08             	sub    esp,0x8
c0015b3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b3f:	50                   	push   eax
c0015b40:	68 84 a4 02 c0       	push   0xc002a484
c0015b45:	e8 96 9c 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	eb a9                	jmp    c0015af8 <schedule()+0x3c>
c0015b4f:	90                   	nop

c0015b50 <Semaphore::tryAcquire()>:
c0015b50:	53                   	push   ebx
c0015b51:	83 ec 08             	sub    esp,0x8
c0015b54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b58:	fa                   	cli    
c0015b59:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b5e:	8d 50 01             	lea    edx,[eax+0x1]
c0015b61:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b67:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015b6d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015b70:	89 1d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ebx
c0015b76:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b79:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b7b:	7c 33                	jl     c0015bb0 <Semaphore::tryAcquire()+0x60>
c0015b7d:	89 15 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,edx
c0015b83:	85 d2                	test   edx,edx
c0015b85:	75 0d                	jne    c0015b94 <Semaphore::tryAcquire()+0x44>
c0015b87:	8b 15 60 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a460
c0015b8d:	85 d2                	test   edx,edx
c0015b8f:	75 6f                	jne    c0015c00 <Semaphore::tryAcquire()+0xb0>
c0015b91:	8d 76 00             	lea    esi,[esi+0x0]
c0015b94:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015b99:	85 c0                	test   eax,eax
c0015b9b:	74 0b                	je     c0015ba8 <Semaphore::tryAcquire()+0x58>
c0015b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba0:	31 c0                	xor    eax,eax
c0015ba2:	83 c4 08             	add    esp,0x8
c0015ba5:	5b                   	pop    ebx
c0015ba6:	c3                   	ret    
c0015ba7:	90                   	nop
c0015ba8:	fb                   	sti    
c0015ba9:	83 c4 08             	add    esp,0x8
c0015bac:	5b                   	pop    ebx
c0015bad:	c3                   	ret    
c0015bae:	66 90                	xchg   ax,ax
c0015bb0:	83 c3 01             	add    ebx,0x1
c0015bb3:	89 15 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,edx
c0015bb9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015bbc:	85 d2                	test   edx,edx
c0015bbe:	75 24                	jne    c0015be4 <Semaphore::tryAcquire()+0x94>
c0015bc0:	8b 0d 60 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a460
c0015bc6:	85 c9                	test   ecx,ecx
c0015bc8:	74 1a                	je     c0015be4 <Semaphore::tryAcquire()+0x94>
c0015bca:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015bd4:	e8 e3 fe ff ff       	call   c0015abc <schedule()>
c0015bd9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015bde:	83 e8 01             	sub    eax,0x1
c0015be1:	8d 76 00             	lea    esi,[esi+0x0]
c0015be4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015be9:	85 c0                	test   eax,eax
c0015beb:	75 0b                	jne    c0015bf8 <Semaphore::tryAcquire()+0xa8>
c0015bed:	fb                   	sti    
c0015bee:	b0 01                	mov    al,0x1
c0015bf0:	83 c4 08             	add    esp,0x8
c0015bf3:	5b                   	pop    ebx
c0015bf4:	c3                   	ret    
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bf8:	b0 01                	mov    al,0x1
c0015bfa:	83 c4 08             	add    esp,0x8
c0015bfd:	5b                   	pop    ebx
c0015bfe:	c3                   	ret    
c0015bff:	90                   	nop
c0015c00:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c0a:	e8 ad fe ff ff       	call   c0015abc <schedule()>
c0015c0f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c14:	83 e8 01             	sub    eax,0x1
c0015c17:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c1c:	85 c0                	test   eax,eax
c0015c1e:	75 80                	jne    c0015ba0 <Semaphore::tryAcquire()+0x50>
c0015c20:	eb 86                	jmp    c0015ba8 <Semaphore::tryAcquire()+0x58>
c0015c22:	66 90                	xchg   ax,ax

c0015c24 <Semaphore::assertLocked(char const*)>:
c0015c24:	83 ec 0c             	sub    esp,0xc
c0015c27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c2b:	fa                   	cli    
c0015c2c:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015c32:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c37:	83 c1 01             	add    ecx,0x1
c0015c3a:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015c40:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c43:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015c49:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c4b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015c4e:	7c 28                	jl     c0015c78 <Semaphore::assertLocked(char const*)+0x54>
c0015c50:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015c55:	85 c0                	test   eax,eax
c0015c57:	75 0b                	jne    c0015c64 <Semaphore::assertLocked(char const*)+0x40>
c0015c59:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015c5e:	85 c0                	test   eax,eax
c0015c60:	75 32                	jne    c0015c94 <Semaphore::assertLocked(char const*)+0x70>
c0015c62:	66 90                	xchg   ax,ax
c0015c64:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c69:	83 e8 01             	sub    eax,0x1
c0015c6c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c71:	75 01                	jne    c0015c74 <Semaphore::assertLocked(char const*)+0x50>
c0015c73:	fb                   	sti    
c0015c74:	83 c4 0c             	add    esp,0xc
c0015c77:	c3                   	ret    
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c7f:	52                   	push   edx
c0015c80:	e8 78 b5 ff ff       	call   c00111fd <KePanic(char const*)>
c0015c85:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c8a:	83 c4 10             	add    esp,0x10
c0015c8d:	83 e8 01             	sub    eax,0x1
c0015c90:	eb be                	jmp    c0015c50 <Semaphore::assertLocked(char const*)+0x2c>
c0015c92:	66 90                	xchg   ax,ax
c0015c94:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c9e:	e8 19 fe ff ff       	call   c0015abc <schedule()>
c0015ca3:	eb bf                	jmp    c0015c64 <Semaphore::assertLocked(char const*)+0x40>
c0015ca5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ca8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015ca8:	83 ec 0c             	sub    esp,0xc
c0015cab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cb4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015cb7:	e8 00 fe ff ff       	call   c0015abc <schedule()>
c0015cbc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015cc1:	83 e8 01             	sub    eax,0x1
c0015cc4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cc9:	75 01                	jne    c0015ccc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015ccb:	fb                   	sti    
c0015ccc:	83 c4 0c             	add    esp,0xc
c0015ccf:	c3                   	ret    

c0015cd0 <blockTask(TaskState)>:
c0015cd0:	83 ec 0c             	sub    esp,0xc
c0015cd3:	fa                   	cli    
c0015cd4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015cd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cdd:	83 c0 01             	add    eax,0x1
c0015ce0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015ce5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015ced:	e8 ca fd ff ff       	call   c0015abc <schedule()>
c0015cf2:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015cf7:	83 e8 01             	sub    eax,0x1
c0015cfa:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cff:	75 03                	jne    c0015d04 <blockTask(TaskState)+0x34>
c0015d01:	fb                   	sti    
c0015d02:	66 90                	xchg   ax,ax
c0015d04:	83 c4 0c             	add    esp,0xc
c0015d07:	c3                   	ret    

c0015d08 <waitTask(int, int*, int)>:
c0015d08:	83 ec 18             	sub    esp,0x18
c0015d0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d14:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d20:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d23:	6a 07                	push   0x7
c0015d25:	e8 a6 ff ff ff       	call   c0015cd0 <blockTask(TaskState)>
c0015d2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d35:	85 d2                	test   edx,edx
c0015d37:	74 0b                	je     c0015d44 <waitTask(int, int*, int)+0x3c>
c0015d39:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d3c:	89 02                	mov    DWORD PTR [edx],eax
c0015d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d43:	90                   	nop
c0015d44:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d47:	83 c4 0c             	add    esp,0xc
c0015d4a:	c3                   	ret    
c0015d4b:	90                   	nop

c0015d4c <milliTenthSleepUntil(unsigned int)>:
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d53:	39 05 4c 95 02 c0    	cmp    DWORD PTR ds:0xc002954c,eax
c0015d59:	76 05                	jbe    c0015d60 <milliTenthSleepUntil(unsigned int)+0x14>
c0015d5b:	90                   	nop
c0015d5c:	83 c4 0c             	add    esp,0xc
c0015d5f:	c3                   	ret    
c0015d60:	fa                   	cli    
c0015d61:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015d67:	83 ec 08             	sub    esp,0x8
c0015d6a:	83 c2 01             	add    edx,0x1
c0015d6d:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015d73:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015d79:	83 c1 01             	add    ecx,0x1
c0015d7c:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015d82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d88:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d90:	50                   	push   eax
c0015d91:	68 78 a4 02 c0       	push   0xc002a478
c0015d96:	e8 45 9a 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015da2:	e8 29 ff ff ff       	call   c0015cd0 <blockTask(TaskState)>
c0015da7:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015dac:	83 c4 10             	add    esp,0x10
c0015daf:	83 e8 01             	sub    eax,0x1
c0015db2:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015db7:	85 c0                	test   eax,eax
c0015db9:	75 09                	jne    c0015dc4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015dbb:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015dc0:	85 c0                	test   eax,eax
c0015dc2:	75 14                	jne    c0015dd8 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015dc4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015dc9:	83 e8 01             	sub    eax,0x1
c0015dcc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015dd1:	75 89                	jne    c0015d5c <milliTenthSleepUntil(unsigned int)+0x10>
c0015dd3:	fb                   	sti    
c0015dd4:	83 c4 0c             	add    esp,0xc
c0015dd7:	c3                   	ret    
c0015dd8:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015de2:	e8 d5 fc ff ff       	call   c0015abc <schedule()>
c0015de7:	eb db                	jmp    c0015dc4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015de9:	8d 76 00             	lea    esi,[esi+0x0]

c0015dec <milliTenthSleep(unsigned int)>:
c0015dec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015df0:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c0015df5:	01 c2                	add    edx,eax
c0015df7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015dfb:	e9 4c ff ff ff       	jmp    c0015d4c <milliTenthSleepUntil(unsigned int)>

c0015e00 <sleep(unsigned int)>:
c0015e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e04:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e07:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e0a:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e0d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e10:	c1 e0 04             	shl    eax,0x4
c0015e13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e17:	eb d3                	jmp    c0015dec <milliTenthSleep(unsigned int)>
c0015e19:	90                   	nop
c0015e1a:	66 90                	xchg   ax,ax

c0015e1c <Semaphore::acquire()>:
c0015e1c:	83 ec 0c             	sub    esp,0xc
c0015e1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e23:	fa                   	cli    
c0015e24:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e29:	83 c0 01             	add    eax,0x1
c0015e2c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e31:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015e36:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e39:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015e3f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e42:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e44:	7d 2e                	jge    c0015e74 <Semaphore::acquire()+0x58>
c0015e46:	83 c1 01             	add    ecx,0x1
c0015e49:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e4c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015e51:	85 c0                	test   eax,eax
c0015e53:	75 0b                	jne    c0015e60 <Semaphore::acquire()+0x44>
c0015e55:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015e5a:	85 c0                	test   eax,eax
c0015e5c:	75 66                	jne    c0015ec4 <Semaphore::acquire()+0xa8>
c0015e5e:	66 90                	xchg   ax,ax
c0015e60:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e65:	83 e8 01             	sub    eax,0x1
c0015e68:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e6d:	75 01                	jne    c0015e70 <Semaphore::acquire()+0x54>
c0015e6f:	fb                   	sti    
c0015e70:	83 c4 0c             	add    esp,0xc
c0015e73:	c3                   	ret    
c0015e74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e80:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e83:	85 c9                	test   ecx,ecx
c0015e85:	74 51                	je     c0015ed8 <Semaphore::acquire()+0xbc>
c0015e87:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e8a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e90:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e93:	90                   	nop
c0015e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e99:	83 ec 0c             	sub    esp,0xc
c0015e9c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e9f:	68 3c 22 02 c0       	push   0xc002223c
c0015ea4:	e8 9c 4a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015ea9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015eb0:	e8 1b fe ff ff       	call   c0015cd0 <blockTask(TaskState)>
c0015eb5:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015eba:	83 c4 10             	add    esp,0x10
c0015ebd:	83 e8 01             	sub    eax,0x1
c0015ec0:	eb 8a                	jmp    c0015e4c <Semaphore::acquire()+0x30>
c0015ec2:	66 90                	xchg   ax,ax
c0015ec4:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015ece:	e8 e9 fb ff ff       	call   c0015abc <schedule()>
c0015ed3:	eb 8b                	jmp    c0015e60 <Semaphore::acquire()+0x44>
c0015ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015edd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ee0:	eb b2                	jmp    c0015e94 <Semaphore::acquire()+0x78>
c0015ee2:	66 90                	xchg   ax,ax

c0015ee4 <taskReturned>:
c0015ee4:	83 ec 18             	sub    esp,0x18
c0015ee7:	68 5c 22 02 c0       	push   0xc002225c
c0015eec:	e8 0c b3 ff ff       	call   c00111fd <KePanic(char const*)>
c0015ef1:	83 c4 10             	add    esp,0x10
c0015ef4:	83 ec 0c             	sub    esp,0xc
c0015ef7:	6a 02                	push   0x2
c0015ef9:	e8 d2 fd ff ff       	call   c0015cd0 <blockTask(TaskState)>
c0015efe:	fa                   	cli    
c0015eff:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f04:	83 c0 01             	add    eax,0x1
c0015f07:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f0c:	e8 ab fb ff ff       	call   c0015abc <schedule()>
c0015f11:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	83 e8 01             	sub    eax,0x1
c0015f1c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f21:	85 c0                	test   eax,eax
c0015f23:	75 cf                	jne    c0015ef4 <taskReturned+0x10>
c0015f25:	fb                   	sti    
c0015f26:	eb cc                	jmp    c0015ef4 <taskReturned+0x10>

c0015f28 <Thr::processFromPID(int)>:
c0015f28:	57                   	push   edi
c0015f29:	56                   	push   esi
c0015f2a:	53                   	push   ebx
c0015f2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f2f:	fa                   	cli    
c0015f30:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015f36:	83 ec 0c             	sub    esp,0xc
c0015f39:	83 c1 01             	add    ecx,0x1
c0015f3c:	68 84 a4 02 c0       	push   0xc002a484
c0015f41:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015f47:	e8 d0 97 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f4c:	83 c4 10             	add    esp,0x10
c0015f4f:	89 c7                	mov    edi,eax
c0015f51:	eb 15                	jmp    c0015f68 <Thr::processFromPID(int)+0x40>
c0015f53:	90                   	nop
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	68 84 a4 02 c0       	push   0xc002a484
c0015f5c:	e8 bb 97 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f61:	83 c4 10             	add    esp,0x10
c0015f64:	39 f8                	cmp    eax,edi
c0015f66:	74 50                	je     c0015fb8 <Thr::processFromPID(int)+0x90>
c0015f68:	83 ec 0c             	sub    esp,0xc
c0015f6b:	68 84 a4 02 c0       	push   0xc002a484
c0015f70:	e8 a7 97 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f75:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015f7c:	89 c3                	mov    ebx,eax
c0015f7e:	e8 a1 97 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f83:	58                   	pop    eax
c0015f84:	5a                   	pop    edx
c0015f85:	53                   	push   ebx
c0015f86:	68 84 a4 02 c0       	push   0xc002a484
c0015f8b:	e8 50 98 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f93:	83 c4 10             	add    esp,0x10
c0015f96:	39 30                	cmp    DWORD PTR [eax],esi
c0015f98:	75 ba                	jne    c0015f54 <Thr::processFromPID(int)+0x2c>
c0015f9a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f9f:	83 e8 01             	sub    eax,0x1
c0015fa2:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fa7:	74 0b                	je     c0015fb4 <Thr::processFromPID(int)+0x8c>
c0015fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015faf:	5b                   	pop    ebx
c0015fb0:	5e                   	pop    esi
c0015fb1:	5f                   	pop    edi
c0015fb2:	c3                   	ret    
c0015fb3:	90                   	nop
c0015fb4:	fb                   	sti    
c0015fb5:	eb f5                	jmp    c0015fac <Thr::processFromPID(int)+0x84>
c0015fb7:	90                   	nop
c0015fb8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fbd:	83 e8 01             	sub    eax,0x1
c0015fc0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fc5:	75 05                	jne    c0015fcc <Thr::processFromPID(int)+0xa4>
c0015fc7:	fb                   	sti    
c0015fc8:	5b                   	pop    ebx
c0015fc9:	5e                   	pop    esi
c0015fca:	5f                   	pop    edi
c0015fcb:	c3                   	ret    
c0015fcc:	5b                   	pop    ebx
c0015fcd:	31 c0                	xor    eax,eax
c0015fcf:	5e                   	pop    esi
c0015fd0:	5f                   	pop    edi
c0015fd1:	c3                   	ret    
c0015fd2:	66 90                	xchg   ax,ax

c0015fd4 <unblockTask(ThreadControlBlock*)>:
c0015fd4:	53                   	push   ebx
c0015fd5:	83 ec 08             	sub    esp,0x8
c0015fd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fdc:	fa                   	cli    
c0015fdd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fe2:	83 c0 01             	add    eax,0x1
c0015fe5:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fea:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fed:	85 c0                	test   eax,eax
c0015fef:	74 67                	je     c0016058 <unblockTask(ThreadControlBlock*)+0x84>
c0015ff1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015ff4:	83 f8 01             	cmp    eax,0x1
c0015ff7:	74 37                	je     c0016030 <unblockTask(ThreadControlBlock*)+0x5c>
c0015ff9:	83 ec 0c             	sub    esp,0xc
c0015ffc:	68 84 a4 02 c0       	push   0xc002a484
c0016001:	e8 16 97 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016006:	83 c4 10             	add    esp,0x10
c0016009:	85 c0                	test   eax,eax
c001600b:	75 1b                	jne    c0016028 <unblockTask(ThreadControlBlock*)+0x54>
c001600d:	eb 5d                	jmp    c001606c <unblockTask(ThreadControlBlock*)+0x98>
c001600f:	90                   	nop
c0016010:	83 ec 08             	sub    esp,0x8
c0016013:	50                   	push   eax
c0016014:	68 84 a4 02 c0       	push   0xc002a484
c0016019:	e8 1e 9a 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001601e:	83 c4 10             	add    esp,0x10
c0016021:	85 c0                	test   eax,eax
c0016023:	74 47                	je     c001606c <unblockTask(ThreadControlBlock*)+0x98>
c0016025:	8d 76 00             	lea    esi,[esi+0x0]
c0016028:	39 c3                	cmp    ebx,eax
c001602a:	75 e4                	jne    c0016010 <unblockTask(ThreadControlBlock*)+0x3c>
c001602c:	eb 12                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x6c>
c001602e:	66 90                	xchg   ax,ax
c0016030:	83 ec 0c             	sub    esp,0xc
c0016033:	68 d8 21 02 c0       	push   0xc00221d8
c0016038:	e8 08 49 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001603d:	83 c4 10             	add    esp,0x10
c0016040:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016045:	83 e8 01             	sub    eax,0x1
c0016048:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001604d:	75 01                	jne    c0016050 <unblockTask(ThreadControlBlock*)+0x7c>
c001604f:	fb                   	sti    
c0016050:	83 c4 08             	add    esp,0x8
c0016053:	5b                   	pop    ebx
c0016054:	c3                   	ret    
c0016055:	8d 76 00             	lea    esi,[esi+0x0]
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	68 c1 21 02 c0       	push   0xc00221c1
c0016060:	e8 e0 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016065:	83 c4 10             	add    esp,0x10
c0016068:	eb d6                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x6c>
c001606a:	66 90                	xchg   ax,ax
c001606c:	83 ec 08             	sub    esp,0x8
c001606f:	53                   	push   ebx
c0016070:	68 84 a4 02 c0       	push   0xc002a484
c0016075:	e8 66 97 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001607a:	83 c4 10             	add    esp,0x10
c001607d:	eb c1                	jmp    c0016040 <unblockTask(ThreadControlBlock*)+0x6c>
c001607f:	90                   	nop

c0016080 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016080:	55                   	push   ebp
c0016081:	57                   	push   edi
c0016082:	56                   	push   esi
c0016083:	53                   	push   ebx
c0016084:	83 ec 1c             	sub    esp,0x1c
c0016087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001608b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001608e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016094:	85 ed                	test   ebp,ebp
c0016096:	7e 28                	jle    c00160c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016098:	31 f6                	xor    esi,esi
c001609a:	66 90                	xchg   ax,ax
c001609c:	83 ec 0c             	sub    esp,0xc
c001609f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00160a6:	83 c6 01             	add    esi,0x1
c00160a9:	57                   	push   edi
c00160aa:	e8 17 1a ff ff       	call   c0007ac6 <free>
c00160af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160b2:	83 c4 10             	add    esp,0x10
c00160b5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00160bb:	7f df                	jg     c001609c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00160bd:	8d 76 00             	lea    esi,[esi+0x0]
c00160c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160ca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160cf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160d2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160d5:	d3 c0                	rol    eax,cl
c00160d7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00160de:	21 c8                	and    eax,ecx
c00160e0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00160e7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160ea:	89 f7                	mov    edi,esi
c00160ec:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00160f4:	0f 85 72 01 00 00    	jne    c001626c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00160fa:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016100:	85 ed                	test   ebp,ebp
c0016102:	74 1c                	je     c0016120 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	55                   	push   ebp
c0016108:	e8 01 ae ff ff       	call   c0010f0e <EnvVarContainer::~EnvVarContainer()>
c001610d:	59                   	pop    ecx
c001610e:	5e                   	pop    esi
c001610f:	6a 0c                	push   0xc
c0016111:	55                   	push   ebp
c0016112:	e8 01 47 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016117:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001611a:	83 c4 10             	add    esp,0x10
c001611d:	89 f7                	mov    edi,esi
c001611f:	90                   	nop
c0016120:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016126:	85 c0                	test   eax,eax
c0016128:	0f 84 b2 00 00 00    	je     c00161e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001612e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016131:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016135:	31 c9                	xor    ecx,ecx
c0016137:	eb 17                	jmp    c0016150 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016139:	8d 76 00             	lea    esi,[esi+0x0]
c001613c:	83 c1 01             	add    ecx,0x1
c001613f:	83 f9 10             	cmp    ecx,0x10
c0016142:	0f 84 98 00 00 00    	je     c00161e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016148:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001614e:	66 90                	xchg   ax,ax
c0016150:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016157:	d3 fa                	sar    edx,cl
c0016159:	80 e2 01             	and    dl,0x1
c001615c:	74 de                	je     c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001615e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016161:	01 d2                	add    edx,edx
c0016163:	01 ca                	add    edx,ecx
c0016165:	8d 14 92             	lea    edx,[edx+edx*4]
c0016168:	01 d0                	add    eax,edx
c001616a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016170:	83 fd 07             	cmp    ebp,0x7
c0016173:	75 c7                	jne    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016175:	05 40 02 00 00       	add    eax,0x240
c001617a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001617d:	83 fd ff             	cmp    ebp,0xffffffff
c0016180:	0f 8c ee 00 00 00    	jl     c0016274 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016186:	0f 84 ac 01 00 00    	je     c0016338 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001618c:	85 ed                	test   ebp,ebp
c001618e:	0f 84 90 01 00 00    	je     c0016324 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016194:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016196:	75 a4                	jne    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016198:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001619e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00161a2:	01 d0                	add    eax,edx
c00161a4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00161b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00161ba:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00161c1:	50                   	push   eax
c00161c2:	e8 0d fe ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161d1:	89 f7                	mov    edi,esi
c00161d3:	83 c1 01             	add    ecx,0x1
c00161d6:	83 f9 10             	cmp    ecx,0x10
c00161d9:	0f 85 69 ff ff ff    	jne    c0016148 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00161df:	90                   	nop
c00161e0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161e6:	85 c0                	test   eax,eax
c00161e8:	74 62                	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161ea:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00161f0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00161f6:	74 54                	je     c001624c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	68 84 a4 02 c0       	push   0xc002a484
c0016200:	e8 17 95 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016205:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c001620c:	89 c7                	mov    edi,eax
c001620e:	e8 ed 94 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016213:	83 c4 10             	add    esp,0x10
c0016216:	84 c0                	test   al,al
c0016218:	0f 84 ce 00 00 00    	je     c00162ec <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001621e:	66 90                	xchg   ax,ax
c0016220:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016223:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016229:	85 d2                	test   edx,edx
c001622b:	74 0f                	je     c001623c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001622d:	83 ec 0c             	sub    esp,0xc
c0016230:	8b 02                	mov    eax,DWORD PTR [edx]
c0016232:	52                   	push   edx
c0016233:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016236:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016246:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016249:	8d 76 00             	lea    esi,[esi+0x0]
c001624c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016252:	85 db                	test   ebx,ebx
c0016254:	74 16                	je     c001626c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016256:	83 ec 0c             	sub    esp,0xc
c0016259:	53                   	push   ebx
c001625a:	e8 53 39 ff ff       	call   c0009bb2 <VAS::~VAS()>
c001625f:	58                   	pop    eax
c0016260:	5a                   	pop    edx
c0016261:	6a 14                	push   0x14
c0016263:	53                   	push   ebx
c0016264:	e8 af 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016269:	83 c4 10             	add    esp,0x10
c001626c:	83 c4 1c             	add    esp,0x1c
c001626f:	5b                   	pop    ebx
c0016270:	5e                   	pop    esi
c0016271:	5f                   	pop    edi
c0016272:	5d                   	pop    ebp
c0016273:	c3                   	ret    
c0016274:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	68 90 22 02 c0       	push   0xc0022290
c0016280:	e8 78 af ff ff       	call   c00111fd <KePanic(char const*)>
c0016285:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	89 f7                	mov    edi,esi
c001628d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016291:	e9 a6 fe ff ff       	jmp    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016296:	66 90                	xchg   ax,ax
c0016298:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001629e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00162a4:	75 1e                	jne    c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162a6:	83 ec 0c             	sub    esp,0xc
c00162a9:	68 f8 22 02 c0       	push   0xc00222f8
c00162ae:	e8 92 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162b3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00162ba:	e8 11 fa ff ff       	call   c0015cd0 <blockTask(TaskState)>
c00162bf:	83 c4 10             	add    esp,0x10
c00162c2:	66 90                	xchg   ax,ax
c00162c4:	83 ec 08             	sub    esp,0x8
c00162c7:	56                   	push   esi
c00162c8:	68 84 a4 02 c0       	push   0xc002a484
c00162cd:	e8 0e 95 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162d2:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c00162d9:	e8 3e 94 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	39 f8                	cmp    eax,edi
c00162e3:	0f 84 37 ff ff ff    	je     c0016220 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	68 84 a4 02 c0       	push   0xc002a484
c00162f4:	e8 23 94 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f9:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0016300:	89 c6                	mov    esi,eax
c0016302:	e8 1d 94 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016307:	83 c4 10             	add    esp,0x10
c001630a:	39 f3                	cmp    ebx,esi
c001630c:	74 b6                	je     c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001630e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016311:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016314:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001631a:	75 a8                	jne    c00162c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001631c:	e9 77 ff ff ff       	jmp    c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016321:	8d 76 00             	lea    esi,[esi+0x0]
c0016324:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	68 c4 22 02 c0       	push   0xc00222c4
c0016330:	e9 4b ff ff ff       	jmp    c0016280 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016335:	8d 76 00             	lea    esi,[esi+0x0]
c0016338:	8b 36                	mov    esi,DWORD PTR [esi]
c001633a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001633e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016341:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016344:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001634a:	01 d7                	add    edi,edx
c001634c:	89 f8                	mov    eax,edi
c001634e:	e9 51 fe ff ff       	jmp    c00161a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016353:	90                   	nop

c0016354 <cleanerTaskFunction(void*)>:
c0016354:	53                   	push   ebx
c0016355:	83 ec 08             	sub    esp,0x8
c0016358:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001635d:	83 e8 01             	sub    eax,0x1
c0016360:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016365:	75 01                	jne    c0016368 <cleanerTaskFunction(void*)+0x14>
c0016367:	fb                   	sti    
c0016368:	fa                   	cli    
c0016369:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001636e:	80 3d 4c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a44c,0x0
c0016375:	8d 50 01             	lea    edx,[eax+0x1]
c0016378:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c001637e:	0f 84 c4 00 00 00    	je     c0016448 <cleanerTaskFunction(void*)+0xf4>
c0016384:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016389:	85 c0                	test   eax,eax
c001638b:	75 03                	jne    c0016390 <cleanerTaskFunction(void*)+0x3c>
c001638d:	fb                   	sti    
c001638e:	66 90                	xchg   ax,ax
c0016390:	c6 05 4c a4 02 c0 00 	mov    BYTE PTR ds:0xc002a44c,0x0
c0016397:	fa                   	cli    
c0016398:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c001639e:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c00163a4:	83 c2 01             	add    edx,0x1
c00163a7:	83 c1 01             	add    ecx,0x1
c00163aa:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00163b0:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c00163b6:	fa                   	cli    
c00163b7:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c00163bd:	83 c3 01             	add    ebx,0x1
c00163c0:	89 1d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ebx
c00163c6:	eb 28                	jmp    c00163f0 <cleanerTaskFunction(void*)+0x9c>
c00163c8:	83 ec 0c             	sub    esp,0xc
c00163cb:	68 6c a4 02 c0       	push   0xc002a46c
c00163d0:	e8 47 93 00 00       	call   c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163d5:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c00163dc:	89 c3                	mov    ebx,eax
c00163de:	e8 41 93 00 00       	call   c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163e6:	e8 95 fc ff ff       	call   c0016080 <cleanupTerminatedTask(ThreadControlBlock*)>
c00163eb:	83 c4 10             	add    esp,0x10
c00163ee:	66 90                	xchg   ax,ax
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	68 6c a4 02 c0       	push   0xc002a46c
c00163f8:	e8 03 93 00 00       	call   c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163fd:	83 c4 10             	add    esp,0x10
c0016400:	84 c0                	test   al,al
c0016402:	74 c4                	je     c00163c8 <cleanerTaskFunction(void*)+0x74>
c0016404:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016409:	83 e8 01             	sub    eax,0x1
c001640c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016411:	75 01                	jne    c0016414 <cleanerTaskFunction(void*)+0xc0>
c0016413:	fb                   	sti    
c0016414:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016419:	83 e8 01             	sub    eax,0x1
c001641c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016421:	0f 85 31 ff ff ff    	jne    c0016358 <cleanerTaskFunction(void*)+0x4>
c0016427:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c001642c:	85 c0                	test   eax,eax
c001642e:	0f 84 24 ff ff ff    	je     c0016358 <cleanerTaskFunction(void*)+0x4>
c0016434:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001643e:	e8 79 f6 ff ff       	call   c0015abc <schedule()>
c0016443:	e9 10 ff ff ff       	jmp    c0016358 <cleanerTaskFunction(void*)+0x4>
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	6a 02                	push   0x2
c001644d:	e8 56 f8 ff ff       	call   c0015ca8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016452:	83 c4 10             	add    esp,0x10
c0016455:	e9 36 ff ff ff       	jmp    c0016390 <cleanerTaskFunction(void*)+0x3c>
c001645a:	66 90                	xchg   ax,ax

c001645c <terminateTask(int)>:
c001645c:	83 ec 14             	sub    esp,0x14
c001645f:	fa                   	cli    
c0016460:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0016466:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c001646c:	83 c2 01             	add    edx,0x1
c001646f:	83 c1 01             	add    ecx,0x1
c0016472:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016478:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001647e:	fa                   	cli    
c001647f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016484:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016488:	83 c0 01             	add    eax,0x1
c001648b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016495:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164a0:	50                   	push   eax
c00164a1:	68 6c a4 02 c0       	push   0xc002a46c
c00164a6:	e8 35 93 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b0:	83 c4 10             	add    esp,0x10
c00164b3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00164ba:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c00164bf:	85 c0                	test   eax,eax
c00164c1:	74 65                	je     c0016528 <terminateTask(int)+0xcc>
c00164c3:	83 ec 0c             	sub    esp,0xc
c00164c6:	c6 05 4c a4 02 c0 01 	mov    BYTE PTR ds:0xc002a44c,0x1
c00164cd:	50                   	push   eax
c00164ce:	e8 01 fb ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00164d3:	83 c4 10             	add    esp,0x10
c00164d6:	66 90                	xchg   ax,ax
c00164d8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164dd:	83 e8 01             	sub    eax,0x1
c00164e0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164e5:	75 01                	jne    c00164e8 <terminateTask(int)+0x8c>
c00164e7:	fb                   	sti    
c00164e8:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00164ed:	83 e8 01             	sub    eax,0x1
c00164f0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00164f5:	75 09                	jne    c0016500 <terminateTask(int)+0xa4>
c00164f7:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c00164fe:	75 3c                	jne    c001653c <terminateTask(int)+0xe0>
c0016500:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016505:	83 e8 01             	sub    eax,0x1
c0016508:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001650d:	75 01                	jne    c0016510 <terminateTask(int)+0xb4>
c001650f:	fb                   	sti    
c0016510:	fa                   	cli    
c0016511:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016516:	83 c0 01             	add    eax,0x1
c0016519:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001651e:	66 90                	xchg   ax,ax
c0016520:	e8 97 f5 ff ff       	call   c0015abc <schedule()>
c0016525:	eb d9                	jmp    c0016500 <terminateTask(int)+0xa4>
c0016527:	90                   	nop
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	68 ef 21 02 c0       	push   0xc00221ef
c0016530:	e8 10 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016535:	83 c4 10             	add    esp,0x10
c0016538:	eb 9e                	jmp    c00164d8 <terminateTask(int)+0x7c>
c001653a:	66 90                	xchg   ax,ax
c001653c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0016546:	eb d8                	jmp    c0016520 <terminateTask(int)+0xc4>

c0016548 <Thr::terminateFromIRQ(int)>:
c0016548:	83 ec 18             	sub    esp,0x18
c001654b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001654f:	50                   	push   eax
c0016550:	e8 07 ff ff ff       	call   c001645c <terminateTask(int)>
c0016555:	90                   	nop
c0016556:	66 90                	xchg   ax,ax

c0016558 <Semaphore::release()>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655f:	fa                   	cli    
c0016560:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016565:	83 c0 01             	add    eax,0x1
c0016568:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001656d:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016572:	8d 48 01             	lea    ecx,[eax+0x1]
c0016575:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001657b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001657e:	85 c9                	test   ecx,ecx
c0016580:	74 42                	je     c00165c4 <Semaphore::release()+0x6c>
c0016582:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016585:	83 ec 0c             	sub    esp,0xc
c0016588:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001658b:	51                   	push   ecx
c001658c:	e8 43 fa ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c0016591:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016596:	83 c4 10             	add    esp,0x10
c0016599:	83 e8 01             	sub    eax,0x1
c001659c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00165a1:	85 c0                	test   eax,eax
c00165a3:	75 0b                	jne    c00165b0 <Semaphore::release()+0x58>
c00165a5:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c00165aa:	85 c0                	test   eax,eax
c00165ac:	75 22                	jne    c00165d0 <Semaphore::release()+0x78>
c00165ae:	66 90                	xchg   ax,ax
c00165b0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00165b5:	83 e8 01             	sub    eax,0x1
c00165b8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00165bd:	75 01                	jne    c00165c0 <Semaphore::release()+0x68>
c00165bf:	fb                   	sti    
c00165c0:	83 c4 0c             	add    esp,0xc
c00165c3:	c3                   	ret    
c00165c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00165c7:	83 e9 01             	sub    ecx,0x1
c00165ca:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00165cd:	eb cd                	jmp    c001659c <Semaphore::release()+0x44>
c00165cf:	90                   	nop
c00165d0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00165da:	e8 dd f4 ff ff       	call   c0015abc <schedule()>
c00165df:	eb cf                	jmp    c00165b0 <Semaphore::release()+0x58>
c00165e1:	8d 76 00             	lea    esi,[esi+0x0]

c00165e4 <__static_initialization_and_destruction_0(int, int)>:
c00165e4:	83 ec 0c             	sub    esp,0xc
c00165e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165ec:	0f 85 8e 00 00 00    	jne    c0016680 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00165fa:	0f 85 80 00 00 00    	jne    c0016680 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016600:	83 ec 0c             	sub    esp,0xc
c0016603:	68 84 a4 02 c0       	push   0xc002a484
c0016608:	e8 87 94 00 00       	call   c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001660d:	83 c4 10             	add    esp,0x10
c0016610:	83 ec 04             	sub    esp,0x4
c0016613:	68 c8 2e 02 c0       	push   0xc0022ec8
c0016618:	68 84 a4 02 c0       	push   0xc002a484
c001661d:	68 44 fa 01 c0       	push   0xc001fa44
c0016622:	e8 a1 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	68 78 a4 02 c0       	push   0xc002a478
c0016632:	e8 5d 94 00 00       	call   c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016637:	83 c4 10             	add    esp,0x10
c001663a:	83 ec 04             	sub    esp,0x4
c001663d:	68 c8 2e 02 c0       	push   0xc0022ec8
c0016642:	68 78 a4 02 c0       	push   0xc002a478
c0016647:	68 44 fa 01 c0       	push   0xc001fa44
c001664c:	e8 77 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016651:	83 c4 10             	add    esp,0x10
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 6c a4 02 c0       	push   0xc002a46c
c001665c:	e8 33 94 00 00       	call   c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	83 ec 04             	sub    esp,0x4
c0016667:	68 c8 2e 02 c0       	push   0xc0022ec8
c001666c:	68 6c a4 02 c0       	push   0xc002a46c
c0016671:	68 44 fa 01 c0       	push   0xc001fa44
c0016676:	e8 4d 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	66 90                	xchg   ax,ax
c0016680:	90                   	nop
c0016681:	83 c4 0c             	add    esp,0xc
c0016684:	c3                   	ret    
c0016685:	8d 76 00             	lea    esi,[esi+0x0]

c0016688 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	83 ec 08             	sub    esp,0x8
c001668e:	68 ff ff 00 00       	push   0xffff
c0016693:	6a 01                	push   0x1
c0016695:	e8 4a ff ff ff       	call   c00165e4 <__static_initialization_and_destruction_0(int, int)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	83 c4 0c             	add    esp,0xc
c00166a0:	c3                   	ret    

c00166a1 <Vm::inbv(unsigned short)>:
c00166a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166a5:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166aa:	75 06                	jne    c00166b2 <Vm::inbv(unsigned short)+0x11>
c00166ac:	a0 cc a4 02 c0       	mov    al,ds:0xc002a4cc
c00166b1:	c3                   	ret    
c00166b2:	ec                   	in     al,dx
c00166b3:	c3                   	ret    

c00166b4 <Vm::outbv(unsigned short, unsigned char)>:
c00166b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166bc:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166c1:	75 25                	jne    c00166e8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00166c3:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c00166c9:	8d 51 01             	lea    edx,[ecx+0x1]
c00166cc:	88 81 e0 a4 02 c0    	mov    BYTE PTR [ecx-0x3ffd5b20],al
c00166d2:	89 15 cc a4 02 c0    	mov    DWORD PTR ds:0xc002a4cc,edx
c00166d8:	83 fa 20             	cmp    edx,0x20
c00166db:	75 0c                	jne    c00166e9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166dd:	c7 05 cc a4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x1f
c00166e7:	c3                   	ret    
c00166e8:	ee                   	out    dx,al
c00166e9:	c3                   	ret    

c00166ea <Vm::realToLinear(unsigned short, unsigned short)>:
c00166ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166f4:	c1 e0 04             	shl    eax,0x4
c00166f7:	01 d0                	add    eax,edx
c00166f9:	c3                   	ret    

c00166fa <Vm::getSegment(unsigned int)>:
c00166fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166fe:	c1 e8 10             	shr    eax,0x10
c0016701:	c3                   	ret    

c0016702 <Vm::getOffset(unsigned int)>:
c0016702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016706:	c3                   	ret    

c0016707 <Vm::mainloop2()>:
c0016707:	83 ec 18             	sub    esp,0x18
c001670a:	fa                   	cli    
c001670b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016711:	6a 02                	push   0x2
c0016713:	c6 05 c5 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c5,0x1
c001671a:	e8 89 f5 ff ff       	call   c0015ca8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001671f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016724:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016728:	52                   	push   edx
c0016729:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001672d:	52                   	push   edx
c001672e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016732:	52                   	push   edx
c0016733:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016737:	50                   	push   eax
c0016738:	e8 d2 9a fe ff       	call   c000020f <goToVM86>
c001673d:	83 c4 2c             	add    esp,0x2c
c0016740:	c3                   	ret    

c0016741 <Vm::mainVm8086Loop(void*)>:
c0016741:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016746:	48                   	dec    eax
c0016747:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001674c:	75 01                	jne    c001674f <Vm::mainVm8086Loop(void*)+0xe>
c001674e:	fb                   	sti    
c001674f:	eb b6                	jmp    c0016707 <Vm::mainloop2()>

c0016751 <Vm::mainloop3(unsigned long)>:
c0016751:	83 ec 18             	sub    esp,0x18
c0016754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016758:	fa                   	cli    
c0016759:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001675f:	6a 02                	push   0x2
c0016761:	c6 05 c4 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c4,0x1
c0016768:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c001676d:	e8 36 f5 ff ff       	call   c0015ca8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016772:	83 c4 1c             	add    esp,0x1c
c0016775:	eb 90                	jmp    c0016707 <Vm::mainloop2()>

c0016777 <Vm::initialise8086()>:
c0016777:	83 ec 0c             	sub    esp,0xc
c001677a:	68 80 00 00 00       	push   0x80
c001677f:	6a 00                	push   0x0
c0016781:	68 41 67 01 c0       	push   0xc0016741
c0016786:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001678c:	e8 db f0 ff ff       	call   c001586c <Process::createThread(void (*)(void*), void*, int)>
c0016791:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016798:	a3 c8 a4 02 c0       	mov    ds:0xc002a4c8,eax
c001679d:	68 00 01 00 00       	push   0x100
c00167a2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00167a7:	6a 00                	push   0x0
c00167a9:	6a 00                	push   0x0
c00167ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167b1:	e8 64 37 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167b6:	83 c4 2c             	add    esp,0x2c
c00167b9:	c3                   	ret    

c00167ba <Vm::finish8086()>:
c00167ba:	53                   	push   ebx
c00167bb:	83 ec 08             	sub    esp,0x8
c00167be:	fa                   	cli    
c00167bf:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00167c5:	80 3d c4 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c4,0x0
c00167cc:	75 15                	jne    c00167e3 <Vm::finish8086()+0x29>
c00167ce:	e8 e9 f2 ff ff       	call   c0015abc <schedule()>
c00167d3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00167d8:	48                   	dec    eax
c00167d9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00167de:	75 de                	jne    c00167be <Vm::finish8086()+0x4>
c00167e0:	fb                   	sti    
c00167e1:	eb db                	jmp    c00167be <Vm::finish8086()+0x4>
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	8b 1d c0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4c0
c00167ec:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c00167f2:	c6 05 c4 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c4,0x0
c00167f9:	e8 d6 f7 ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00167fe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	8d 50 ff             	lea    edx,[eax-0x1]
c0016809:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c001680f:	85 d2                	test   edx,edx
c0016811:	75 01                	jne    c0016814 <Vm::finish8086()+0x5a>
c0016813:	fb                   	sti    
c0016814:	89 d8                	mov    eax,ebx
c0016816:	83 c4 08             	add    esp,0x8
c0016819:	5b                   	pop    ebx
c001681a:	c3                   	ret    

c001681b <Vm::getOutput8086(unsigned char*)>:
c001681b:	57                   	push   edi
c001681c:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c0016822:	56                   	push   esi
c0016823:	be e0 a4 02 c0       	mov    esi,0xc002a4e0
c0016828:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001682c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001682e:	a1 cc a4 02 c0       	mov    eax,ds:0xc002a4cc
c0016833:	5e                   	pop    esi
c0016834:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001683e:	5f                   	pop    edi
c001683f:	c3                   	ret    

c0016840 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016840:	55                   	push   ebp
c0016841:	57                   	push   edi
c0016842:	56                   	push   esi
c0016843:	53                   	push   ebx
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001684b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001684f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016853:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016857:	fa                   	cli    
c0016858:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001685e:	80 3d c5 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c5,0x0
c0016865:	75 15                	jne    c001687c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016867:	e8 50 f2 ff ff       	call   c0015abc <schedule()>
c001686c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016871:	48                   	dec    eax
c0016872:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016877:	75 de                	jne    c0016857 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016879:	fb                   	sti    
c001687a:	eb db                	jmp    c0016857 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001687c:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016881:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001688b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001688f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016893:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016897:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001689b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001689f:	0f b7 ff             	movzx  edi,di
c00168a2:	0f b7 f6             	movzx  esi,si
c00168a5:	50                   	push   eax
c00168a6:	6a 20                	push   0x20
c00168a8:	6a 00                	push   0x0
c00168aa:	68 e0 a4 02 c0       	push   0xc002a4e0
c00168af:	e8 3c 9c fe ff       	call   c00004f0 <memset>
c00168b4:	5a                   	pop    edx
c00168b5:	59                   	pop    ecx
c00168b6:	57                   	push   edi
c00168b7:	56                   	push   esi
c00168b8:	e8 2d fe ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c00168bd:	83 c4 10             	add    esp,0x10
c00168c0:	89 c7                	mov    edi,eax
c00168c2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168c6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00168ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168cc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00168d1:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c00168d8:	48                   	dec    eax
c00168d9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00168de:	75 01                	jne    c00168e1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168e0:	fb                   	sti    
c00168e1:	83 ec 0c             	sub    esp,0xc
c00168e4:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c00168ea:	e8 e5 f6 ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c00168ef:	83 c4 1c             	add    esp,0x1c
c00168f2:	b0 01                	mov    al,0x1
c00168f4:	5b                   	pop    ebx
c00168f5:	5e                   	pop    esi
c00168f6:	5f                   	pop    edi
c00168f7:	5d                   	pop    ebp
c00168f8:	c3                   	ret    

c00168f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168f9:	55                   	push   ebp
c00168fa:	57                   	push   edi
c00168fb:	56                   	push   esi
c00168fc:	53                   	push   ebx
c00168fd:	83 ec 34             	sub    esp,0x34
c0016900:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016904:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016908:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001690c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016910:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016914:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016918:	68 20 23 02 c0       	push   0xc0022320
c001691d:	e8 23 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016922:	83 c4 10             	add    esp,0x10
c0016925:	fa                   	cli    
c0016926:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001692c:	8a 1d c5 a4 02 c0    	mov    bl,BYTE PTR ds:0xc002a4c5
c0016932:	84 db                	test   bl,bl
c0016934:	75 15                	jne    c001694b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016936:	e8 81 f1 ff ff       	call   c0015abc <schedule()>
c001693b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016940:	48                   	dec    eax
c0016941:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016946:	75 dd                	jne    c0016925 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016948:	fb                   	sti    
c0016949:	eb da                	jmp    c0016925 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001694b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001694f:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016954:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001695e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016962:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016966:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001696a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001696e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016972:	50                   	push   eax
c0016973:	6a 20                	push   0x20
c0016975:	6a 00                	push   0x0
c0016977:	68 e0 a4 02 c0       	push   0xc002a4e0
c001697c:	e8 6f 9b fe ff       	call   c00004f0 <memset>
c0016981:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016988:	e8 29 11 ff ff       	call   c0007ab6 <malloc>
c001698d:	83 c4 0c             	add    esp,0xc
c0016990:	89 c5                	mov    ebp,eax
c0016992:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0016998:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001699c:	50                   	push   eax
c001699d:	e8 48 4d ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	85 ed                	test   ebp,ebp
c00169a7:	75 0a                	jne    c00169b3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00169a9:	83 ec 0c             	sub    esp,0xc
c00169ac:	68 42 23 02 c0       	push   0xc0022342
c00169b1:	eb 2b                	jmp    c00169de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00169b3:	50                   	push   eax
c00169b4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00169b8:	50                   	push   eax
c00169b9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00169bd:	50                   	push   eax
c00169be:	55                   	push   ebp
c00169bf:	e8 e4 50 ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c00169c4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00169c8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00169cc:	83 c4 10             	add    esp,0x10
c00169cf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00169d4:	74 27                	je     c00169fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00169d6:	83 ec 0c             	sub    esp,0xc
c00169d9:	68 56 23 02 c0       	push   0xc0022356
c00169de:	e8 1a a8 ff ff       	call   c00111fd <KePanic(char const*)>
c00169e3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169e8:	83 c4 10             	add    esp,0x10
c00169eb:	48                   	dec    eax
c00169ec:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00169f1:	85 c0                	test   eax,eax
c00169f3:	75 01                	jne    c00169f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169f5:	fb                   	sti    
c00169f6:	31 db                	xor    ebx,ebx
c00169f8:	e9 90 00 00 00       	jmp    c0016a8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169fd:	51                   	push   ecx
c00169fe:	51                   	push   ecx
c00169ff:	6a 01                	push   0x1
c0016a01:	55                   	push   ebp
c0016a02:	e8 9f 4d ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	85 c0                	test   eax,eax
c0016a0c:	74 26                	je     c0016a34 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a0e:	83 ec 0c             	sub    esp,0xc
c0016a11:	68 6f 23 02 c0       	push   0xc002236f
c0016a16:	e8 e2 a7 ff ff       	call   c00111fd <KePanic(char const*)>
c0016a1b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	48                   	dec    eax
c0016a24:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a29:	85 c0                	test   eax,eax
c0016a2b:	75 c9                	jne    c00169f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a2d:	fb                   	sti    
c0016a2e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a32:	eb 59                	jmp    c0016a8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a34:	0f b7 ff             	movzx  edi,di
c0016a37:	50                   	push   eax
c0016a38:	0f b7 f6             	movzx  esi,si
c0016a3b:	50                   	push   eax
c0016a3c:	57                   	push   edi
c0016a3d:	56                   	push   esi
c0016a3e:	e8 a7 fc ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016a43:	5a                   	pop    edx
c0016a44:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016a47:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016a4b:	51                   	push   ecx
c0016a4c:	50                   	push   eax
c0016a4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a55:	55                   	push   ebp
c0016a56:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016a59:	83 c4 14             	add    esp,0x14
c0016a5c:	55                   	push   ebp
c0016a5d:	e8 a2 4d ff ff       	call   c000b804 <File::close()>
c0016a62:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a67:	83 c4 10             	add    esp,0x10
c0016a6a:	48                   	dec    eax
c0016a6b:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c0016a72:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a77:	85 c0                	test   eax,eax
c0016a79:	75 01                	jne    c0016a7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a7b:	fb                   	sti    
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016a85:	e8 4a f5 ff ff       	call   c0015fd4 <unblockTask(ThreadControlBlock*)>
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	83 c4 2c             	add    esp,0x2c
c0016a90:	88 d8                	mov    al,bl
c0016a92:	5b                   	pop    ebx
c0016a93:	5e                   	pop    esi
c0016a94:	5f                   	pop    edi
c0016a95:	5d                   	pop    ebp
c0016a96:	c3                   	ret    

c0016a97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a97:	57                   	push   edi
c0016a98:	56                   	push   esi
c0016a99:	53                   	push   ebx
c0016a9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016aa6:	83 e8 06             	sub    eax,0x6
c0016aa9:	0f b7 c0             	movzx  eax,ax
c0016aac:	50                   	push   eax
c0016aad:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ab2:	50                   	push   eax
c0016ab3:	e8 32 fc ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016ab8:	5a                   	pop    edx
c0016ab9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016abc:	59                   	pop    ecx
c0016abd:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016ac0:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ac3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ac9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016acc:	8d 56 02             	lea    edx,[esi+0x2]
c0016acf:	66 89 10             	mov    WORD PTR [eax],dx
c0016ad2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016ad6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016ada:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016add:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016ae1:	0f b6 f1             	movzx  esi,cl
c0016ae4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ae8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016aee:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016af2:	0f b6 d5             	movzx  edx,ch
c0016af5:	74 0a                	je     c0016b01 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016af7:	c1 e2 08             	shl    edx,0x8
c0016afa:	09 f2                	or     edx,esi
c0016afc:	80 ce 02             	or     dh,0x2
c0016aff:	eb 08                	jmp    c0016b09 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016b01:	c1 e2 08             	shl    edx,0x8
c0016b04:	09 f2                	or     edx,esi
c0016b06:	80 e6 fd             	and    dh,0xfd
c0016b09:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b12:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b16:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b1e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b21:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b29:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b2c:	5b                   	pop    ebx
c0016b2d:	5e                   	pop    esi
c0016b2e:	5f                   	pop    edi
c0016b2f:	c3                   	ret    

c0016b30 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b30:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b35:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b3a:	c1 e0 04             	shl    eax,0x4
c0016b3d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b40:	c3                   	ret    

c0016b41 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b41:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b46:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b4b:	c1 e0 04             	shl    eax,0x4
c0016b4e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016b52:	c3                   	ret    

c0016b53 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016b53:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b58:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b5d:	c1 e0 04             	shl    eax,0x4
c0016b60:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016b63:	c3                   	ret    

c0016b64 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b64:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b69:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b6e:	c1 e0 04             	shl    eax,0x4
c0016b71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b75:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b78:	c3                   	ret    

c0016b79 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b79:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b7e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b83:	c1 e0 04             	shl    eax,0x4
c0016b86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b8a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b8e:	c3                   	ret    

c0016b8f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b8f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b94:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b99:	c1 e0 04             	shl    eax,0x4
c0016b9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ba0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016ba3:	c3                   	ret    

c0016ba4 <Vm::faultHandler(regs*)>:
c0016ba4:	55                   	push   ebp
c0016ba5:	57                   	push   edi
c0016ba6:	56                   	push   esi
c0016ba7:	53                   	push   ebx
c0016ba8:	83 ec 2c             	sub    esp,0x2c
c0016bab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016baf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016bb2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016bb6:	0f b7 f8             	movzx  edi,ax
c0016bb9:	52                   	push   edx
c0016bba:	0f b7 c0             	movzx  eax,ax
c0016bbd:	50                   	push   eax
c0016bbe:	e8 27 fb ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016bc3:	5a                   	pop    edx
c0016bc4:	59                   	pop    ecx
c0016bc5:	89 c1                	mov    ecx,eax
c0016bc7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016bca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bce:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016bd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bd7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016bda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bde:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016be3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016be7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016beb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bef:	e8 f6 fa ff ff       	call   c00166ea <Vm::realToLinear(unsigned short, unsigned short)>
c0016bf4:	5e                   	pop    esi
c0016bf5:	be 06 00 00 00       	mov    esi,0x6
c0016bfa:	5d                   	pop    ebp
c0016bfb:	31 ed                	xor    ebp,ebp
c0016bfd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c02:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c05:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c0b:	0f 84 74 02 00 00    	je     c0016e85 <Vm::faultHandler(regs*)+0x2e1>
c0016c11:	0f 87 94 00 00 00    	ja     c0016cab <Vm::faultHandler(regs*)+0x107>
c0016c17:	83 fa 66             	cmp    edx,0x66
c0016c1a:	0f 84 e2 01 00 00    	je     c0016e02 <Vm::faultHandler(regs*)+0x25e>
c0016c20:	77 47                	ja     c0016c69 <Vm::faultHandler(regs*)+0xc5>
c0016c22:	83 fa 36             	cmp    edx,0x36
c0016c25:	0f 84 ca 01 00 00    	je     c0016df5 <Vm::faultHandler(regs*)+0x251>
c0016c2b:	77 1a                	ja     c0016c47 <Vm::faultHandler(regs*)+0xa3>
c0016c2d:	83 fa 26             	cmp    edx,0x26
c0016c30:	0f 84 98 01 00 00    	je     c0016dce <Vm::faultHandler(regs*)+0x22a>
c0016c36:	83 fa 2e             	cmp    edx,0x2e
c0016c39:	0f 85 21 06 00 00    	jne    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016c3f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c42:	31 f6                	xor    esi,esi
c0016c44:	41                   	inc    ecx
c0016c45:	eb bb                	jmp    c0016c02 <Vm::faultHandler(regs*)+0x5e>
c0016c47:	83 fa 64             	cmp    edx,0x64
c0016c4a:	0f 84 8b 01 00 00    	je     c0016ddb <Vm::faultHandler(regs*)+0x237>
c0016c50:	0f 87 92 01 00 00    	ja     c0016de8 <Vm::faultHandler(regs*)+0x244>
c0016c56:	83 fa 3e             	cmp    edx,0x3e
c0016c59:	0f 85 01 06 00 00    	jne    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016c5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c62:	be 01 00 00 00       	mov    esi,0x1
c0016c67:	eb db                	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016c69:	83 fa 6d             	cmp    edx,0x6d
c0016c6c:	0f 84 34 03 00 00    	je     c0016fa6 <Vm::faultHandler(regs*)+0x402>
c0016c72:	77 17                	ja     c0016c8b <Vm::faultHandler(regs*)+0xe7>
c0016c74:	83 fa 67             	cmp    edx,0x67
c0016c77:	0f 84 92 01 00 00    	je     c0016e0f <Vm::faultHandler(regs*)+0x26b>
c0016c7d:	83 fa 6c             	cmp    edx,0x6c
c0016c80:	0f 84 b1 02 00 00    	je     c0016f37 <Vm::faultHandler(regs*)+0x393>
c0016c86:	e9 d5 05 00 00       	jmp    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016c8b:	83 fa 6f             	cmp    edx,0x6f
c0016c8e:	0f 84 3d 04 00 00    	je     c00170d1 <Vm::faultHandler(regs*)+0x52d>
c0016c94:	0f 82 9f 03 00 00    	jb     c0017039 <Vm::faultHandler(regs*)+0x495>
c0016c9a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016ca0:	0f 84 76 01 00 00    	je     c0016e1c <Vm::faultHandler(regs*)+0x278>
c0016ca6:	e9 b5 05 00 00       	jmp    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016cab:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016cb1:	0f 84 51 05 00 00    	je     c0017208 <Vm::faultHandler(regs*)+0x664>
c0016cb7:	0f 87 a9 00 00 00    	ja     c0016d66 <Vm::faultHandler(regs*)+0x1c2>
c0016cbd:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016cc3:	0f 84 d0 04 00 00    	je     c0017199 <Vm::faultHandler(regs*)+0x5f5>
c0016cc9:	77 78                	ja     c0016d43 <Vm::faultHandler(regs*)+0x19f>
c0016ccb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016cd1:	0f 84 0e 02 00 00    	je     c0016ee5 <Vm::faultHandler(regs*)+0x341>
c0016cd7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016cdd:	0f 85 7d 05 00 00    	jne    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016ce3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016ce7:	89 d1                	mov    ecx,edx
c0016ce9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016cec:	c1 e1 08             	shl    ecx,0x8
c0016cef:	09 ca                	or     edx,ecx
c0016cf1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016cf4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016cf8:	89 d1                	mov    ecx,edx
c0016cfa:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016cfe:	c1 e1 08             	shl    ecx,0x8
c0016d01:	09 ca                	or     edx,ecx
c0016d03:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d06:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d0a:	89 d1                	mov    ecx,edx
c0016d0c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d10:	c1 e1 08             	shl    ecx,0x8
c0016d13:	09 ca                	or     edx,ecx
c0016d15:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d1b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d1e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d22:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d28:	d1 e8                	shr    eax,1
c0016d2a:	83 e0 01             	and    eax,0x1
c0016d2d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d30:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d33:	83 c0 06             	add    eax,0x6
c0016d36:	25 ff ff 00 00       	and    eax,0xffff
c0016d3b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d3e:	e9 19 05 00 00       	jmp    c001725c <Vm::faultHandler(regs*)+0x6b8>
c0016d43:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d49:	0f 84 8f 04 00 00    	je     c00171de <Vm::faultHandler(regs*)+0x63a>
c0016d4f:	0f 82 60 04 00 00    	jb     c00171b5 <Vm::faultHandler(regs*)+0x611>
c0016d55:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016d5b:	0f 84 94 04 00 00    	je     c00171f5 <Vm::faultHandler(regs*)+0x651>
c0016d61:	e9 fa 04 00 00       	jmp    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016d66:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d6c:	0f 84 d7 04 00 00    	je     c0017249 <Vm::faultHandler(regs*)+0x6a5>
c0016d72:	77 2e                	ja     c0016da2 <Vm::faultHandler(regs*)+0x1fe>
c0016d74:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d7a:	0f 84 a4 04 00 00    	je     c0017224 <Vm::faultHandler(regs*)+0x680>
c0016d80:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d86:	0f 85 d4 04 00 00    	jne    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016d8c:	50                   	push   eax
c0016d8d:	50                   	push   eax
c0016d8e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d92:	50                   	push   eax
c0016d93:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d97:	50                   	push   eax
c0016d98:	e8 17 f9 ff ff       	call   c00166b4 <Vm::outbv(unsigned short, unsigned char)>
c0016d9d:	e9 9f 04 00 00       	jmp    c0017241 <Vm::faultHandler(regs*)+0x69d>
c0016da2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016da8:	0f 84 6d 01 00 00    	je     c0016f1b <Vm::faultHandler(regs*)+0x377>
c0016dae:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016db4:	0f 84 6f 01 00 00    	je     c0016f29 <Vm::faultHandler(regs*)+0x385>
c0016dba:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016dc0:	0f 85 9a 04 00 00    	jne    c0017260 <Vm::faultHandler(regs*)+0x6bc>
c0016dc6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dc9:	e9 76 fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016dce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dd1:	be 02 00 00 00       	mov    esi,0x2
c0016dd6:	e9 69 fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016ddb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dde:	be 03 00 00 00       	mov    esi,0x3
c0016de3:	e9 5c fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016de8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016deb:	be 04 00 00 00       	mov    esi,0x4
c0016df0:	e9 4f fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016df5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016df8:	be 05 00 00 00       	mov    esi,0x5
c0016dfd:	e9 42 fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016e02:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e05:	bd 01 00 00 00       	mov    ebp,0x1
c0016e0a:	e9 35 fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016e0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e12:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e17:	e9 28 fe ff ff       	jmp    c0016c44 <Vm::faultHandler(regs*)+0xa0>
c0016e1c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e23:	83 e5 01             	and    ebp,0x1
c0016e26:	74 30                	je     c0016e58 <Vm::faultHandler(regs*)+0x2b4>
c0016e28:	83 e9 04             	sub    ecx,0x4
c0016e2b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e31:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e37:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e3a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e3d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e43:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e47:	0f 84 0c 04 00 00    	je     c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0016e4d:	80 ce 02             	or     dh,0x2
c0016e50:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e53:	e9 01 04 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0016e58:	83 e9 02             	sub    ecx,0x2
c0016e5b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e61:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e64:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e68:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e6e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e72:	74 05                	je     c0016e79 <Vm::faultHandler(regs*)+0x2d5>
c0016e74:	80 ce 02             	or     dh,0x2
c0016e77:	eb 03                	jmp    c0016e7c <Vm::faultHandler(regs*)+0x2d8>
c0016e79:	80 e6 fd             	and    dh,0xfd
c0016e7c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e80:	e9 d4 03 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0016e85:	83 e5 01             	and    ebp,0x1
c0016e88:	74 2a                	je     c0016eb4 <Vm::faultHandler(regs*)+0x310>
c0016e8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e8c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e92:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e98:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e9d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ea3:	c1 e8 09             	shr    eax,0x9
c0016ea6:	83 e0 01             	and    eax,0x1
c0016ea9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016eac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016eaf:	83 c0 04             	add    eax,0x4
c0016eb2:	eb 24                	jmp    c0016ed8 <Vm::faultHandler(regs*)+0x334>
c0016eb4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016eb7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ebd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016ec0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016ec3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ec9:	c1 e8 09             	shr    eax,0x9
c0016ecc:	83 e0 01             	and    eax,0x1
c0016ecf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ed2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ed5:	83 c0 02             	add    eax,0x2
c0016ed8:	25 ff ff 00 00       	and    eax,0xffff
c0016edd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ee0:	e9 74 03 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0016ee5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ee9:	3d ee 00 00 00       	cmp    eax,0xee
c0016eee:	75 10                	jne    c0016f00 <Vm::faultHandler(regs*)+0x35c>
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016ef6:	e8 56 f8 ff ff       	call   c0016751 <Vm::mainloop3(unsigned long)>
c0016efb:	e9 44 03 00 00       	jmp    c0017244 <Vm::faultHandler(regs*)+0x6a0>
c0016f00:	83 ec 0c             	sub    esp,0xc
c0016f03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f0b:	51                   	push   ecx
c0016f0c:	50                   	push   eax
c0016f0d:	53                   	push   ebx
c0016f0e:	e8 84 fb ff ff       	call   c0016a97 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f13:	83 c4 20             	add    esp,0x20
c0016f16:	e9 41 03 00 00       	jmp    c001725c <Vm::faultHandler(regs*)+0x6b8>
c0016f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f20:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f24:	e9 30 03 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0016f29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f2e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f32:	e9 22 03 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0016f37:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f3a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f3f:	74 2b                	je     c0016f6c <Vm::faultHandler(regs*)+0x3c8>
c0016f41:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f48:	76 22                	jbe    c0016f6c <Vm::faultHandler(regs*)+0x3c8>
c0016f4a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f4e:	50                   	push   eax
c0016f4f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f53:	50                   	push   eax
c0016f54:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f58:	50                   	push   eax
c0016f59:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f5d:	50                   	push   eax
c0016f5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f62:	50                   	push   eax
c0016f63:	6a 6c                	push   0x6c
c0016f65:	6a 6c                	push   0x6c
c0016f67:	e9 bd 01 00 00       	jmp    c0017129 <Vm::faultHandler(regs*)+0x585>
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f73:	0f b7 f6             	movzx  esi,si
c0016f76:	50                   	push   eax
c0016f77:	e8 25 f7 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c0016f7c:	83 c4 0c             	add    esp,0xc
c0016f7f:	0f b6 c0             	movzx  eax,al
c0016f82:	50                   	push   eax
c0016f83:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f87:	50                   	push   eax
c0016f88:	56                   	push   esi
c0016f89:	e8 d6 fb ff ff       	call   c0016b64 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f8e:	83 c4 10             	add    esp,0x10
c0016f91:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f94:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f98:	74 03                	je     c0016f9d <Vm::faultHandler(regs*)+0x3f9>
c0016f9a:	48                   	dec    eax
c0016f9b:	eb 01                	jmp    c0016f9e <Vm::faultHandler(regs*)+0x3fa>
c0016f9d:	40                   	inc    eax
c0016f9e:	0f b7 c0             	movzx  eax,ax
c0016fa1:	e9 8b 00 00 00       	jmp    c0017031 <Vm::faultHandler(regs*)+0x48d>
c0016fa6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016fa9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fac:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fb1:	74 29                	je     c0016fdc <Vm::faultHandler(regs*)+0x438>
c0016fb3:	3d ff ff 00 00       	cmp    eax,0xffff
c0016fb8:	76 22                	jbe    c0016fdc <Vm::faultHandler(regs*)+0x438>
c0016fba:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fbe:	50                   	push   eax
c0016fbf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fc3:	50                   	push   eax
c0016fc4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fc8:	50                   	push   eax
c0016fc9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fcd:	50                   	push   eax
c0016fce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fd2:	50                   	push   eax
c0016fd3:	6a 6d                	push   0x6d
c0016fd5:	6a 6d                	push   0x6d
c0016fd7:	e9 4d 01 00 00       	jmp    c0017129 <Vm::faultHandler(regs*)+0x585>
c0016fdc:	0f b7 c8             	movzx  ecx,ax
c0016fdf:	0f b7 f6             	movzx  esi,si
c0016fe2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016fe5:	83 e5 01             	and    ebp,0x1
c0016fe8:	74 20                	je     c001700a <Vm::faultHandler(regs*)+0x466>
c0016fea:	ed                   	in     eax,dx
c0016feb:	55                   	push   ebp
c0016fec:	50                   	push   eax
c0016fed:	51                   	push   ecx
c0016fee:	56                   	push   esi
c0016fef:	e8 9b fb ff ff       	call   c0016b8f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016ff4:	83 c4 10             	add    esp,0x10
c0016ff7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ffa:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016ffe:	74 05                	je     c0017005 <Vm::faultHandler(regs*)+0x461>
c0017000:	83 e8 04             	sub    eax,0x4
c0017003:	eb 27                	jmp    c001702c <Vm::faultHandler(regs*)+0x488>
c0017005:	83 c0 04             	add    eax,0x4
c0017008:	eb 22                	jmp    c001702c <Vm::faultHandler(regs*)+0x488>
c001700a:	66 ed                	in     ax,dx
c001700c:	0f b7 c0             	movzx  eax,ax
c001700f:	57                   	push   edi
c0017010:	50                   	push   eax
c0017011:	51                   	push   ecx
c0017012:	56                   	push   esi
c0017013:	e8 61 fb ff ff       	call   c0016b79 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001701e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017022:	74 05                	je     c0017029 <Vm::faultHandler(regs*)+0x485>
c0017024:	83 e8 02             	sub    eax,0x2
c0017027:	eb 03                	jmp    c001702c <Vm::faultHandler(regs*)+0x488>
c0017029:	83 c0 02             	add    eax,0x2
c001702c:	25 ff ff 00 00       	and    eax,0xffff
c0017031:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017034:	e9 20 02 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0017039:	8d 46 ff             	lea    eax,[esi-0x1]
c001703c:	0f b6 f0             	movzx  esi,al
c001703f:	83 fe 05             	cmp    esi,0x5
c0017042:	77 23                	ja     c0017067 <Vm::faultHandler(regs*)+0x4c3>
c0017044:	ff 24 b5 e4 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc1c]
c001704b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017050:	eb 15                	jmp    c0017067 <Vm::faultHandler(regs*)+0x4c3>
c0017052:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017056:	eb 0f                	jmp    c0017067 <Vm::faultHandler(regs*)+0x4c3>
c0017058:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001705c:	eb 09                	jmp    c0017067 <Vm::faultHandler(regs*)+0x4c3>
c001705e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017062:	eb 03                	jmp    c0017067 <Vm::faultHandler(regs*)+0x4c3>
c0017064:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017067:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001706a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001706f:	74 29                	je     c001709a <Vm::faultHandler(regs*)+0x4f6>
c0017071:	3d ff ff 00 00       	cmp    eax,0xffff
c0017076:	76 22                	jbe    c001709a <Vm::faultHandler(regs*)+0x4f6>
c0017078:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001707c:	50                   	push   eax
c001707d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017081:	50                   	push   eax
c0017082:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017086:	50                   	push   eax
c0017087:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001708b:	50                   	push   eax
c001708c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017090:	50                   	push   eax
c0017091:	6a 6e                	push   0x6e
c0017093:	6a 6e                	push   0x6e
c0017095:	e9 8f 00 00 00       	jmp    c0017129 <Vm::faultHandler(regs*)+0x585>
c001709a:	0f b7 c0             	movzx  eax,ax
c001709d:	52                   	push   edx
c001709e:	52                   	push   edx
c001709f:	50                   	push   eax
c00170a0:	57                   	push   edi
c00170a1:	e8 8a fa ff ff       	call   c0016b30 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00170a6:	59                   	pop    ecx
c00170a7:	0f b6 c0             	movzx  eax,al
c00170aa:	5e                   	pop    esi
c00170ab:	50                   	push   eax
c00170ac:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170b0:	50                   	push   eax
c00170b1:	e8 fe f5 ff ff       	call   c00166b4 <Vm::outbv(unsigned short, unsigned char)>
c00170b6:	83 c4 10             	add    esp,0x10
c00170b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170bc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170c0:	74 03                	je     c00170c5 <Vm::faultHandler(regs*)+0x521>
c00170c2:	48                   	dec    eax
c00170c3:	eb 01                	jmp    c00170c6 <Vm::faultHandler(regs*)+0x522>
c00170c5:	40                   	inc    eax
c00170c6:	0f b7 c0             	movzx  eax,ax
c00170c9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00170cc:	e9 88 01 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c00170d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00170d4:	0f b6 f0             	movzx  esi,al
c00170d7:	83 fe 05             	cmp    esi,0x5
c00170da:	77 1e                	ja     c00170fa <Vm::faultHandler(regs*)+0x556>
c00170dc:	ff 24 b5 fc 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc04]
c00170e3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170e7:	eb 11                	jmp    c00170fa <Vm::faultHandler(regs*)+0x556>
c00170e9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00170ec:	eb 0c                	jmp    c00170fa <Vm::faultHandler(regs*)+0x556>
c00170ee:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00170f1:	eb 07                	jmp    c00170fa <Vm::faultHandler(regs*)+0x556>
c00170f3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00170f6:	eb 02                	jmp    c00170fa <Vm::faultHandler(regs*)+0x556>
c00170f8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00170fa:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00170fd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017102:	74 37                	je     c001713b <Vm::faultHandler(regs*)+0x597>
c0017104:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001710a:	76 2f                	jbe    c001713b <Vm::faultHandler(regs*)+0x597>
c001710c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017110:	50                   	push   eax
c0017111:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017115:	50                   	push   eax
c0017116:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001711a:	50                   	push   eax
c001711b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001711f:	50                   	push   eax
c0017120:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017124:	50                   	push   eax
c0017125:	6a 6f                	push   0x6f
c0017127:	6a 6f                	push   0x6f
c0017129:	68 88 23 02 c0       	push   0xc0022388
c001712e:	e8 12 38 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017133:	83 c4 20             	add    esp,0x20
c0017136:	e9 83 01 00 00       	jmp    c00172be <Vm::faultHandler(regs*)+0x71a>
c001713b:	0f b7 d7             	movzx  edx,di
c001713e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017141:	0f b7 c6             	movzx  eax,si
c0017144:	81 e1 00 04 00 00    	and    ecx,0x400
c001714a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001714d:	83 e5 01             	and    ebp,0x1
c0017150:	74 1d                	je     c001716f <Vm::faultHandler(regs*)+0x5cb>
c0017152:	55                   	push   ebp
c0017153:	55                   	push   ebp
c0017154:	50                   	push   eax
c0017155:	52                   	push   edx
c0017156:	e8 f8 f9 ff ff       	call   c0016b53 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001715b:	83 c4 10             	add    esp,0x10
c001715e:	89 fa                	mov    edx,edi
c0017160:	ef                   	out    dx,eax
c0017161:	85 c9                	test   ecx,ecx
c0017163:	74 05                	je     c001716a <Vm::faultHandler(regs*)+0x5c6>
c0017165:	83 ee 04             	sub    esi,0x4
c0017168:	eb 21                	jmp    c001718b <Vm::faultHandler(regs*)+0x5e7>
c001716a:	83 c6 04             	add    esi,0x4
c001716d:	eb 1c                	jmp    c001718b <Vm::faultHandler(regs*)+0x5e7>
c001716f:	55                   	push   ebp
c0017170:	55                   	push   ebp
c0017171:	50                   	push   eax
c0017172:	52                   	push   edx
c0017173:	e8 c9 f9 ff ff       	call   c0016b41 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	89 fa                	mov    edx,edi
c001717d:	66 ef                	out    dx,ax
c001717f:	85 c9                	test   ecx,ecx
c0017181:	74 05                	je     c0017188 <Vm::faultHandler(regs*)+0x5e4>
c0017183:	83 ee 02             	sub    esi,0x2
c0017186:	eb 03                	jmp    c001718b <Vm::faultHandler(regs*)+0x5e7>
c0017188:	83 c6 02             	add    esi,0x2
c001718b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017191:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017194:	e9 c0 00 00 00       	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0017199:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171a7:	50                   	push   eax
c00171a8:	e8 f4 f4 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c00171ad:	0f b6 c0             	movzx  eax,al
c00171b0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171b3:	eb 3a                	jmp    c00171ef <Vm::faultHandler(regs*)+0x64b>
c00171b5:	83 e5 01             	and    ebp,0x1
c00171b8:	74 07                	je     c00171c1 <Vm::faultHandler(regs*)+0x61d>
c00171ba:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171be:	ed                   	in     eax,dx
c00171bf:	eb 14                	jmp    c00171d5 <Vm::faultHandler(regs*)+0x631>
c00171c1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00171c4:	66 31 f6             	xor    si,si
c00171c7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00171ca:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171ce:	66 ed                	in     ax,dx
c00171d0:	0f b7 c0             	movzx  eax,ax
c00171d3:	09 f0                	or     eax,esi
c00171d5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171dc:	eb 7e                	jmp    c001725c <Vm::faultHandler(regs*)+0x6b8>
c00171de:	52                   	push   edx
c00171df:	52                   	push   edx
c00171e0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171e4:	50                   	push   eax
c00171e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171e9:	50                   	push   eax
c00171ea:	e8 c5 f4 ff ff       	call   c00166b4 <Vm::outbv(unsigned short, unsigned char)>
c00171ef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171f3:	eb 4f                	jmp    c0017244 <Vm::faultHandler(regs*)+0x6a0>
c00171f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171f8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171fc:	83 e5 01             	and    ebp,0x1
c00171ff:	74 03                	je     c0017204 <Vm::faultHandler(regs*)+0x660>
c0017201:	ef                   	out    dx,eax
c0017202:	eb d4                	jmp    c00171d8 <Vm::faultHandler(regs*)+0x634>
c0017204:	66 ef                	out    dx,ax
c0017206:	eb d0                	jmp    c00171d8 <Vm::faultHandler(regs*)+0x634>
c0017208:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001720f:	83 ec 0c             	sub    esp,0xc
c0017212:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017216:	50                   	push   eax
c0017217:	e8 85 f4 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c001721c:	0f b6 c0             	movzx  eax,al
c001721f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017222:	eb 1d                	jmp    c0017241 <Vm::faultHandler(regs*)+0x69d>
c0017224:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017227:	83 e5 01             	and    ebp,0x1
c001722a:	74 03                	je     c001722f <Vm::faultHandler(regs*)+0x68b>
c001722c:	ed                   	in     eax,dx
c001722d:	eb 0d                	jmp    c001723c <Vm::faultHandler(regs*)+0x698>
c001722f:	66 ed                	in     ax,dx
c0017231:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017234:	0f b7 c0             	movzx  eax,ax
c0017237:	66 31 d2             	xor    dx,dx
c001723a:	09 d0                	or     eax,edx
c001723c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001723f:	eb 18                	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0017241:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017244:	83 c4 10             	add    esp,0x10
c0017247:	eb 13                	jmp    c001725c <Vm::faultHandler(regs*)+0x6b8>
c0017249:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001724c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001724f:	83 e5 01             	and    ebp,0x1
c0017252:	74 03                	je     c0017257 <Vm::faultHandler(regs*)+0x6b3>
c0017254:	ef                   	out    dx,eax
c0017255:	eb 02                	jmp    c0017259 <Vm::faultHandler(regs*)+0x6b5>
c0017257:	66 ef                	out    dx,ax
c0017259:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001725c:	b0 01                	mov    al,0x1
c001725e:	eb 60                	jmp    c00172c0 <Vm::faultHandler(regs*)+0x71c>
c0017260:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017264:	50                   	push   eax
c0017265:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017269:	50                   	push   eax
c001726a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001726e:	50                   	push   eax
c001726f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017273:	50                   	push   eax
c0017274:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017278:	50                   	push   eax
c0017279:	52                   	push   edx
c001727a:	52                   	push   edx
c001727b:	68 b5 23 02 c0       	push   0xc00223b5
c0017280:	e8 c0 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017285:	83 c4 20             	add    esp,0x20
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	6a 60                	push   0x60
c001728d:	e8 0f f4 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c0017292:	83 c4 10             	add    esp,0x10
c0017295:	0f b6 d0             	movzx  edx,al
c0017298:	83 fa 1c             	cmp    edx,0x1c
c001729b:	74 05                	je     c00172a2 <Vm::faultHandler(regs*)+0x6fe>
c001729d:	83 fa 5a             	cmp    edx,0x5a
c00172a0:	75 e6                	jne    c0017288 <Vm::faultHandler(regs*)+0x6e4>
c00172a2:	0f b6 c0             	movzx  eax,al
c00172a5:	83 f8 1c             	cmp    eax,0x1c
c00172a8:	74 05                	je     c00172af <Vm::faultHandler(regs*)+0x70b>
c00172aa:	83 f8 5a             	cmp    eax,0x5a
c00172ad:	75 0f                	jne    c00172be <Vm::faultHandler(regs*)+0x71a>
c00172af:	83 ec 0c             	sub    esp,0xc
c00172b2:	6a 60                	push   0x60
c00172b4:	e8 e8 f3 ff ff       	call   c00166a1 <Vm::inbv(unsigned short)>
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	eb e4                	jmp    c00172a2 <Vm::faultHandler(regs*)+0x6fe>
c00172be:	31 c0                	xor    eax,eax
c00172c0:	83 c4 2c             	add    esp,0x2c
c00172c3:	5b                   	pop    ebx
c00172c4:	5e                   	pop    esi
c00172c5:	5f                   	pop    edi
c00172c6:	5d                   	pop    ebp
c00172c7:	c3                   	ret    

c00172c8 <noCopro(unsigned long)>:
c00172c8:	c3                   	ret    

c00172c9 <nmiHandler(regs*, void*)>:
c00172c9:	83 ec 0c             	sub    esp,0xc
c00172cc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172d1:	83 ec 0c             	sub    esp,0xc
c00172d4:	50                   	push   eax
c00172d5:	e8 dc ff fe ff       	call   c00072b6 <Computer::handleNMI()>
c00172da:	83 c4 10             	add    esp,0x10
c00172dd:	90                   	nop
c00172de:	83 c4 0c             	add    esp,0xc
c00172e1:	c3                   	ret    

c00172e2 <doubleFault(regs*, void*)>:
c00172e2:	55                   	push   ebp
c00172e3:	89 e5                	mov    ebp,esp
c00172e5:	83 ec 08             	sub    esp,0x8
c00172e8:	83 ec 0c             	sub    esp,0xc
c00172eb:	68 14 24 02 c0       	push   0xc0022414
c00172f0:	e8 08 9f ff ff       	call   c00111fd <KePanic(char const*)>
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	90                   	nop
c00172f9:	c9                   	leave  
c00172fa:	c3                   	ret    

c00172fb <displayDebugInfo(regs*)>:
c00172fb:	83 ec 1c             	sub    esp,0x1c
c00172fe:	0f 20 c0             	mov    eax,cr0
c0017301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017305:	0f 20 d0             	mov    eax,cr2
c0017308:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001730c:	0f 20 d8             	mov    eax,cr3
c001730f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017313:	0f 20 e0             	mov    eax,cr4
c0017316:	89 04 24             	mov    DWORD PTR [esp],eax
c0017319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001731d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017320:	83 ec 08             	sub    esp,0x8
c0017323:	50                   	push   eax
c0017324:	68 30 24 02 c0       	push   0xc0022430
c0017329:	e8 17 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001732e:	83 c4 10             	add    esp,0x10
c0017331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017335:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017338:	83 ec 08             	sub    esp,0x8
c001733b:	50                   	push   eax
c001733c:	68 21 24 02 c0       	push   0xc0022421
c0017341:	e8 ff 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017346:	83 c4 10             	add    esp,0x10
c0017349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001734d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017350:	83 ec 08             	sub    esp,0x8
c0017353:	50                   	push   eax
c0017354:	68 2c 24 02 c0       	push   0xc002242c
c0017359:	e8 e7 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001735e:	83 c4 10             	add    esp,0x10
c0017361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017365:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017368:	83 ec 08             	sub    esp,0x8
c001736b:	50                   	push   eax
c001736c:	68 3b 24 02 c0       	push   0xc002243b
c0017371:	e8 cf 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017376:	83 c4 10             	add    esp,0x10
c0017379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001737d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017380:	83 ec 08             	sub    esp,0x8
c0017383:	50                   	push   eax
c0017384:	68 46 24 02 c0       	push   0xc0022446
c0017389:	e8 b7 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001738e:	83 c4 10             	add    esp,0x10
c0017391:	83 ec 08             	sub    esp,0x8
c0017394:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017398:	68 51 24 02 c0       	push   0xc0022451
c001739d:	e8 a3 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173a2:	83 c4 10             	add    esp,0x10
c00173a5:	83 ec 08             	sub    esp,0x8
c00173a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00173ac:	68 5c 24 02 c0       	push   0xc002245c
c00173b1:	e8 8f 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173b6:	83 c4 10             	add    esp,0x10
c00173b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173bd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173c0:	c1 e0 05             	shl    eax,0x5
c00173c3:	8d 90 e0 33 02 c0    	lea    edx,[eax-0x3ffdcc20]
c00173c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173cd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173d0:	83 ec 04             	sub    esp,0x4
c00173d3:	52                   	push   edx
c00173d4:	50                   	push   eax
c00173d5:	68 67 24 02 c0       	push   0xc0022467
c00173da:	e8 66 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173df:	83 c4 10             	add    esp,0x10
c00173e2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173ed:	83 ec 0c             	sub    esp,0xc
c00173f0:	50                   	push   eax
c00173f1:	e8 63 13 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00173f6:	83 c4 10             	add    esp,0x10
c00173f9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017404:	83 ec 08             	sub    esp,0x8
c0017407:	68 76 24 02 c0       	push   0xc0022476
c001740c:	50                   	push   eax
c001740d:	e8 94 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017412:	83 c4 10             	add    esp,0x10
c0017415:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001741a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017420:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017424:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017427:	83 ec 08             	sub    esp,0x8
c001742a:	52                   	push   edx
c001742b:	50                   	push   eax
c001742c:	e8 2f 16 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017431:	83 c4 10             	add    esp,0x10
c0017434:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017439:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001743f:	83 ec 08             	sub    esp,0x8
c0017442:	68 84 24 02 c0       	push   0xc0022484
c0017447:	50                   	push   eax
c0017448:	e8 59 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001744d:	83 c4 10             	add    esp,0x10
c0017450:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017455:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001745b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017460:	8b 12                	mov    edx,DWORD PTR [edx]
c0017462:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017465:	83 c2 0c             	add    edx,0xc
c0017468:	83 ec 08             	sub    esp,0x8
c001746b:	52                   	push   edx
c001746c:	50                   	push   eax
c001746d:	e8 34 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017472:	83 c4 10             	add    esp,0x10
c0017475:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001747a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017480:	83 ec 08             	sub    esp,0x8
c0017483:	68 8d 24 02 c0       	push   0xc002248d
c0017488:	50                   	push   eax
c0017489:	e8 18 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017496:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001749c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174a0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00174a3:	83 ec 08             	sub    esp,0x8
c00174a6:	52                   	push   edx
c00174a7:	50                   	push   eax
c00174a8:	e8 b3 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174bb:	83 ec 08             	sub    esp,0x8
c00174be:	68 95 24 02 c0       	push   0xc0022495
c00174c3:	50                   	push   eax
c00174c4:	e8 dd 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174db:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00174de:	83 ec 08             	sub    esp,0x8
c00174e1:	52                   	push   edx
c00174e2:	50                   	push   eax
c00174e3:	e8 78 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00174e8:	83 c4 10             	add    esp,0x10
c00174eb:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174f6:	83 ec 08             	sub    esp,0x8
c00174f9:	68 9d 24 02 c0       	push   0xc002249d
c00174fe:	50                   	push   eax
c00174ff:	e8 a2 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001750c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017512:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017516:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017519:	83 ec 08             	sub    esp,0x8
c001751c:	52                   	push   edx
c001751d:	50                   	push   eax
c001751e:	e8 3d 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001752b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017531:	83 ec 08             	sub    esp,0x8
c0017534:	68 a5 24 02 c0       	push   0xc00224a5
c0017539:	50                   	push   eax
c001753a:	e8 67 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001753f:	83 c4 10             	add    esp,0x10
c0017542:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017547:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001754d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017551:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017554:	83 ec 08             	sub    esp,0x8
c0017557:	52                   	push   edx
c0017558:	50                   	push   eax
c0017559:	e8 02 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001755e:	83 c4 10             	add    esp,0x10
c0017561:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017566:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001756c:	83 ec 08             	sub    esp,0x8
c001756f:	68 ad 24 02 c0       	push   0xc00224ad
c0017574:	50                   	push   eax
c0017575:	e8 2c 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001757a:	83 c4 10             	add    esp,0x10
c001757d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017582:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017588:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001758c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001758f:	83 ec 08             	sub    esp,0x8
c0017592:	52                   	push   edx
c0017593:	50                   	push   eax
c0017594:	e8 c7 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175a7:	83 ec 08             	sub    esp,0x8
c00175aa:	68 b5 24 02 c0       	push   0xc00224b5
c00175af:	50                   	push   eax
c00175b0:	e8 f1 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175c7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175ca:	83 ec 08             	sub    esp,0x8
c00175cd:	52                   	push   edx
c00175ce:	50                   	push   eax
c00175cf:	e8 8c 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e2:	83 ec 08             	sub    esp,0x8
c00175e5:	68 bd 24 02 c0       	push   0xc00224bd
c00175ea:	50                   	push   eax
c00175eb:	e8 b6 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175fe:	83 ec 08             	sub    esp,0x8
c0017601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017605:	50                   	push   eax
c0017606:	e8 55 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017613:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017619:	83 ec 08             	sub    esp,0x8
c001761c:	68 c6 24 02 c0       	push   0xc00224c6
c0017621:	50                   	push   eax
c0017622:	e8 7f 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001762f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017635:	83 ec 08             	sub    esp,0x8
c0017638:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001763c:	50                   	push   eax
c001763d:	e8 1e 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017642:	83 c4 10             	add    esp,0x10
c0017645:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001764a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017650:	83 ec 08             	sub    esp,0x8
c0017653:	68 ce 24 02 c0       	push   0xc00224ce
c0017658:	50                   	push   eax
c0017659:	e8 48 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001765e:	83 c4 10             	add    esp,0x10
c0017661:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017666:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001766c:	83 ec 08             	sub    esp,0x8
c001766f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017673:	50                   	push   eax
c0017674:	e8 e7 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017679:	83 c4 10             	add    esp,0x10
c001767c:	fa                   	cli    
c001767d:	f4                   	hlt    
c001767e:	eb fe                	jmp    c001767e <displayDebugInfo(regs*)+0x383>

c0017680 <HalSystemIdle()>:
c0017680:	56                   	push   esi
c0017681:	53                   	push   ebx
c0017682:	83 ec 14             	sub    esp,0x14
c0017685:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001768a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017690:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017696:	83 e0 04             	and    eax,0x4
c0017699:	0f b6 c0             	movzx  eax,al
c001769c:	85 c0                	test   eax,eax
c001769e:	0f 95 c0             	setne  al
c00176a1:	0f b6 c0             	movzx  eax,al
c00176a4:	85 c0                	test   eax,eax
c00176a6:	74 4c                	je     c00176f4 <HalSystemIdle()+0x74>
c00176a8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176ad:	83 ec 08             	sub    esp,0x8
c00176b0:	68 e1 00 00 00       	push   0xe1
c00176b5:	50                   	push   eax
c00176b6:	e8 05 fa fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00176bb:	83 c4 10             	add    esp,0x10
c00176be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00176c6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176cf:	83 e2 02             	and    edx,0x2
c00176d2:	89 d3                	mov    ebx,edx
c00176d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176d8:	83 e2 00             	and    edx,0x0
c00176db:	89 d6                	mov    esi,edx
c00176dd:	56                   	push   esi
c00176de:	53                   	push   ebx
c00176df:	68 e1 00 00 00       	push   0xe1
c00176e4:	50                   	push   eax
c00176e5:	e8 02 fa fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c00176ea:	83 c4 10             	add    esp,0x10
c00176ed:	e8 a2 8a fe ff       	call   c0000194 <doTPAUSE>
c00176f2:	eb 01                	jmp    c00176f5 <HalSystemIdle()+0x75>
c00176f4:	f4                   	hlt    
c00176f5:	90                   	nop
c00176f6:	83 c4 14             	add    esp,0x14
c00176f9:	5b                   	pop    ebx
c00176fa:	5e                   	pop    esi
c00176fb:	c3                   	ret    

c00176fc <displayProgramFault(char const*)>:
c00176fc:	83 ec 0c             	sub    esp,0xc
c00176ff:	83 ec 0c             	sub    esp,0xc
c0017702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017706:	e8 3a 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017713:	8b 00                	mov    eax,DWORD PTR [eax]
c0017715:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017718:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001771e:	85 c0                	test   eax,eax
c0017720:	74 21                	je     c0017743 <displayProgramFault(char const*)+0x47>
c0017722:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017727:	8b 00                	mov    eax,DWORD PTR [eax]
c0017729:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001772c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017732:	6a 04                	push   0x4
c0017734:	6a 0f                	push   0xf
c0017736:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001773a:	50                   	push   eax
c001773b:	e8 d8 13 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017740:	83 c4 10             	add    esp,0x10
c0017743:	90                   	nop
c0017744:	83 c4 0c             	add    esp,0xc
c0017747:	c3                   	ret    

c0017748 <gpFault(regs*, void*)>:
c0017748:	83 ec 1c             	sub    esp,0x1c
c001774b:	c7 05 14 a5 02 c0 a4 6b 01 c0 	mov    DWORD PTR ds:0xc002a514,0xc0016ba4
c0017755:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c001775a:	85 c0                	test   eax,eax
c001775c:	74 1e                	je     c001777c <gpFault(regs*, void*)+0x34>
c001775e:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c0017763:	83 ec 0c             	sub    esp,0xc
c0017766:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001776a:	ff d0                	call   eax
c001776c:	83 c4 10             	add    esp,0x10
c001776f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017773:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017778:	85 c0                	test   eax,eax
c001777a:	75 2e                	jne    c00177aa <gpFault(regs*, void*)+0x62>
c001777c:	83 ec 0c             	sub    esp,0xc
c001777f:	68 d6 24 02 c0       	push   0xc00224d6
c0017784:	e8 73 ff ff ff       	call   c00176fc <displayProgramFault(char const*)>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	83 ec 0c             	sub    esp,0xc
c001778f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017793:	e8 63 fb ff ff       	call   c00172fb <displayDebugInfo(regs*)>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	83 ec 0c             	sub    esp,0xc
c001779e:	6a 00                	push   0x0
c00177a0:	e8 a3 ed ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c00177a5:	83 c4 10             	add    esp,0x10
c00177a8:	eb 01                	jmp    c00177ab <gpFault(regs*, void*)+0x63>
c00177aa:	90                   	nop
c00177ab:	83 c4 1c             	add    esp,0x1c
c00177ae:	c3                   	ret    

c00177af <pgFault(regs*, void*)>:
c00177af:	83 ec 1c             	sub    esp,0x1c
c00177b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177b9:	0f 20 d0             	mov    eax,cr2
c00177bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177c4:	83 ec 04             	sub    esp,0x4
c00177c7:	52                   	push   edx
c00177c8:	50                   	push   eax
c00177c9:	68 b4 25 02 c0       	push   0xc00225b4
c00177ce:	e8 72 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177db:	8b 00                	mov    eax,DWORD PTR [eax]
c00177dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177e0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00177e6:	0f 20 d2             	mov    edx,cr2
c00177e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177f1:	83 ec 08             	sub    esp,0x8
c00177f4:	52                   	push   edx
c00177f5:	50                   	push   eax
c00177f6:	e8 95 2b ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c00177fb:	83 c4 10             	add    esp,0x10
c00177fe:	0f b6 c0             	movzx  eax,al
c0017801:	85 c0                	test   eax,eax
c0017803:	75 2e                	jne    c0017833 <pgFault(regs*, void*)+0x84>
c0017805:	83 ec 0c             	sub    esp,0xc
c0017808:	68 ef 24 02 c0       	push   0xc00224ef
c001780d:	e8 ea fe ff ff       	call   c00176fc <displayProgramFault(char const*)>
c0017812:	83 c4 10             	add    esp,0x10
c0017815:	83 ec 0c             	sub    esp,0xc
c0017818:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001781c:	e8 da fa ff ff       	call   c00172fb <displayDebugInfo(regs*)>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	83 ec 0c             	sub    esp,0xc
c0017827:	6a 00                	push   0x0
c0017829:	e8 1a ed ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	eb 01                	jmp    c0017834 <pgFault(regs*, void*)+0x85>
c0017833:	90                   	nop
c0017834:	83 c4 1c             	add    esp,0x1c
c0017837:	c3                   	ret    

c0017838 <otherISRHandler(regs*, void*)>:
c0017838:	83 ec 0c             	sub    esp,0xc
c001783b:	83 ec 0c             	sub    esp,0xc
c001783e:	68 dc 25 02 c0       	push   0xc00225dc
c0017843:	e8 b4 fe ff ff       	call   c00176fc <displayProgramFault(char const*)>
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	83 ec 0c             	sub    esp,0xc
c001784e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017852:	e8 a4 fa ff ff       	call   c00172fb <displayDebugInfo(regs*)>
c0017857:	83 c4 10             	add    esp,0x10
c001785a:	83 ec 0c             	sub    esp,0xc
c001785d:	6a 00                	push   0x0
c001785f:	e8 e4 ec ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c0017864:	83 c4 10             	add    esp,0x10
c0017867:	90                   	nop
c0017868:	83 c4 0c             	add    esp,0xc
c001786b:	c3                   	ret    

c001786c <opcodeFault(regs*, void*)>:
c001786c:	55                   	push   ebp
c001786d:	89 e5                	mov    ebp,esp
c001786f:	83 ec 08             	sub    esp,0x8
c0017872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017875:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017878:	83 ec 08             	sub    esp,0x8
c001787b:	50                   	push   eax
c001787c:	68 fa 24 02 c0       	push   0xc00224fa
c0017881:	e8 bf 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001788e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017894:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001789a:	0f b6 c0             	movzx  eax,al
c001789d:	85 c0                	test   eax,eax
c001789f:	74 21                	je     c00178c2 <opcodeFault(regs*, void*)+0x56>
c00178a1:	83 ec 0c             	sub    esp,0xc
c00178a4:	68 04 26 02 c0       	push   0xc0022604
c00178a9:	e8 97 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178b7:	8d 50 19             	lea    edx,[eax+0x19]
c00178ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00178c0:	eb 2b                	jmp    c00178ed <opcodeFault(regs*, void*)+0x81>
c00178c2:	83 ec 0c             	sub    esp,0xc
c00178c5:	68 08 25 02 c0       	push   0xc0022508
c00178ca:	e8 2d fe ff ff       	call   c00176fc <displayProgramFault(char const*)>
c00178cf:	83 c4 10             	add    esp,0x10
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00178d8:	e8 1e fa ff ff       	call   c00172fb <displayDebugInfo(regs*)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	83 ec 0c             	sub    esp,0xc
c00178e3:	6a 00                	push   0x0
c00178e5:	e8 5e ec ff ff       	call   c0016548 <Thr::terminateFromIRQ(int)>
c00178ea:	83 c4 10             	add    esp,0x10
c00178ed:	c9                   	leave  
c00178ee:	c3                   	ret    

c00178ef <i386SaveCoprocessor(void*)>:
c00178ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178f3:	83 c0 3f             	add    eax,0x3f
c00178f6:	83 e0 c0             	and    eax,0xffffffc0
c00178f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178fd:	ff 25 10 a5 02 c0    	jmp    DWORD PTR ds:0xc002a510

c0017903 <i386LoadCoprocessor(void*)>:
c0017903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017907:	83 c0 3f             	add    eax,0x3f
c001790a:	83 e0 c0             	and    eax,0xffffffc0
c001790d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017911:	ff 25 0c a5 02 c0    	jmp    DWORD PTR ds:0xc002a50c

c0017917 <x87EmulHandler(regs*, void*)>:
c0017917:	53                   	push   ebx
c0017918:	83 ec 08             	sub    esp,0x8
c001791b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017920:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017924:	74 10                	je     c0017936 <x87EmulHandler(regs*, void*)+0x1f>
c0017926:	83 ec 0c             	sub    esp,0xc
c0017929:	68 15 25 02 c0       	push   0xc0022515
c001792e:	e8 ca 98 ff ff       	call   c00111fd <KePanic(char const*)>
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	0f 20 c0             	mov    eax,cr0
c0017939:	a8 08                	test   al,0x8
c001793b:	74 59                	je     c0017996 <x87EmulHandler(regs*, void*)+0x7f>
c001793d:	0f 06                	clts   
c001793f:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c0017944:	85 c0                	test   eax,eax
c0017946:	74 0e                	je     c0017956 <x87EmulHandler(regs*, void*)+0x3f>
c0017948:	83 ec 0c             	sub    esp,0xc
c001794b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001794e:	e8 9c ff ff ff       	call   c00178ef <i386SaveCoprocessor(void*)>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001795c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017960:	75 12                	jne    c0017974 <x87EmulHandler(regs*, void*)+0x5d>
c0017962:	83 ec 0c             	sub    esp,0xc
c0017965:	68 40 02 00 00       	push   0x240
c001796a:	e8 47 01 ff ff       	call   c0007ab6 <malloc>
c001796f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017972:	eb 10                	jmp    c0017984 <x87EmulHandler(regs*, void*)+0x6d>
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c001797c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001797f:	e8 7f ff ff ff       	call   c0017903 <i386LoadCoprocessor(void*)>
c0017984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	a3 08 a5 02 c0       	mov    ds:0xc002a508,eax
c0017991:	83 c4 08             	add    esp,0x8
c0017994:	5b                   	pop    ebx
c0017995:	c3                   	ret    
c0017996:	83 ec 0c             	sub    esp,0xc
c0017999:	68 29 25 02 c0       	push   0xc0022529
c001799e:	e8 a2 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179a3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179ab:	83 c4 18             	add    esp,0x18
c00179ae:	5b                   	pop    ebx
c00179af:	e9 94 eb ff ff       	jmp    c0016548 <Thr::terminateFromIRQ(int)>

c00179b4 <HalInitialiseCoprocessor()>:
c00179b4:	83 ec 10             	sub    esp,0x10
c00179b7:	c7 05 08 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a508,0x0
c00179c1:	6a 00                	push   0x0
c00179c3:	68 17 79 01 c0       	push   0xc0017917
c00179c8:	6a 07                	push   0x7
c00179ca:	e8 57 51 ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00179cf:	e8 4c 70 00 00       	call   c001ea20 <avxDetect>
c00179d4:	83 c4 10             	add    esp,0x10
c00179d7:	85 c0                	test   eax,eax
c00179d9:	74 1c                	je     c00179f7 <HalInitialiseCoprocessor()+0x43>
c00179db:	c7 05 10 a5 02 c0 4a ea 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ea4a
c00179e5:	c7 05 0c a5 02 c0 5b ea 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ea5b
c00179ef:	83 c4 0c             	add    esp,0xc
c00179f2:	e9 75 70 00 00       	jmp    c001ea6c <avxInit>
c00179f7:	e8 b4 73 00 00       	call   c001edb0 <absolutelyNoChanceInHell>
c00179fc:	85 c0                	test   eax,eax
c00179fe:	74 1c                	je     c0017a1c <HalInitialiseCoprocessor()+0x68>
c0017a00:	c7 05 10 a5 02 c0 c8 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001edc8
c0017a0a:	c7 05 0c a5 02 c0 d0 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001edd0
c0017a14:	83 c4 0c             	add    esp,0xc
c0017a17:	e9 bc 73 00 00       	jmp    c001edd8 <sseInit>
c0017a1c:	e8 d5 73 00 00       	call   c001edf6 <x87Detect>
c0017a21:	85 c0                	test   eax,eax
c0017a23:	74 1c                	je     c0017a41 <HalInitialiseCoprocessor()+0x8d>
c0017a25:	c7 05 10 a5 02 c0 11 ee 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ee11
c0017a2f:	c7 05 0c a5 02 c0 18 ee 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ee18
c0017a39:	83 c4 0c             	add    esp,0xc
c0017a3c:	e9 de 73 00 00       	jmp    c001ee1f <x87Init>
c0017a41:	c7 05 10 a5 02 c0 c8 72 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc00172c8
c0017a4b:	c7 05 0c a5 02 c0 c8 72 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc00172c8
c0017a55:	0f 20 c0             	mov    eax,cr0
c0017a58:	83 c8 04             	or     eax,0x4
c0017a5b:	0f 22 c0             	mov    cr0,eax
c0017a5e:	83 c4 0c             	add    esp,0xc
c0017a61:	c3                   	ret    

c0017a62 <HalPanic(char const*)>:
c0017a62:	53                   	push   ebx
c0017a63:	83 ec 10             	sub    esp,0x10
c0017a66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a6a:	fa                   	cli    
c0017a6b:	53                   	push   ebx
c0017a6c:	68 3f 25 02 c0       	push   0xc002253f
c0017a71:	e8 cf 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a76:	a1 04 a5 02 c0       	mov    eax,ds:0xc002a504
c0017a7b:	83 c4 10             	add    esp,0x10
c0017a7e:	85 c0                	test   eax,eax
c0017a80:	74 09                	je     c0017a8b <HalPanic(char const*)+0x29>
c0017a82:	83 ec 0c             	sub    esp,0xc
c0017a85:	53                   	push   ebx
c0017a86:	ff d0                	call   eax
c0017a88:	83 c4 10             	add    esp,0x10
c0017a8b:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a90:	85 c0                	test   eax,eax
c0017a92:	0f 84 dc 00 00 00    	je     c0017b74 <HalPanic(char const*)+0x112>
c0017a98:	52                   	push   edx
c0017a99:	6a 01                	push   0x1
c0017a9b:	6a 0f                	push   0xf
c0017a9d:	50                   	push   eax
c0017a9e:	e8 11 0b ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017aa3:	59                   	pop    ecx
c0017aa4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aaa:	e8 f5 0c ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017aaf:	58                   	pop    eax
c0017ab0:	5a                   	pop    edx
c0017ab1:	68 64 08 02 c0       	push   0xc0020864
c0017ab6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017abc:	e8 2b 0b ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017ac1:	83 c4 0c             	add    esp,0xc
c0017ac4:	6a 01                	push   0x1
c0017ac6:	6a 0f                	push   0xf
c0017ac8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ace:	e8 e1 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ad3:	59                   	pop    ecx
c0017ad4:	58                   	pop    eax
c0017ad5:	68 58 25 02 c0       	push   0xc0022558
c0017ada:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ae0:	e8 c1 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ae5:	83 c4 0c             	add    esp,0xc
c0017ae8:	6a 0f                	push   0xf
c0017aea:	6a 01                	push   0x1
c0017aec:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017af2:	e8 bd 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017af7:	58                   	pop    eax
c0017af8:	5a                   	pop    edx
c0017af9:	68 61 25 02 c0       	push   0xc0022561
c0017afe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b04:	e8 9d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b09:	83 c4 0c             	add    esp,0xc
c0017b0c:	6a 01                	push   0x1
c0017b0e:	6a 0f                	push   0xf
c0017b10:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b16:	e8 99 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b1b:	59                   	pop    ecx
c0017b1c:	58                   	pop    eax
c0017b1d:	68 a5 25 02 c0       	push   0xc00225a5
c0017b22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b28:	e8 79 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b2d:	58                   	pop    eax
c0017b2e:	5a                   	pop    edx
c0017b2f:	68 6e 25 02 c0       	push   0xc002256e
c0017b34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b3a:	e8 67 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b3f:	59                   	pop    ecx
c0017b40:	58                   	pop    eax
c0017b41:	68 a8 25 02 c0       	push   0xc00225a8
c0017b46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4c:	e8 55 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b51:	58                   	pop    eax
c0017b52:	5a                   	pop    edx
c0017b53:	53                   	push   ebx
c0017b54:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b5a:	e8 47 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b5f:	59                   	pop    ecx
c0017b60:	5b                   	pop    ebx
c0017b61:	68 a5 25 02 c0       	push   0xc00225a5
c0017b66:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b6c:	e8 35 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b71:	83 c4 10             	add    esp,0x10
c0017b74:	eb fe                	jmp    c0017b74 <HalPanic(char const*)+0x112>

c0017b76 <HalQueryPerformanceCounter()>:
c0017b76:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b7b:	31 d2                	xor    edx,edx
c0017b7d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b83:	31 c0                	xor    eax,eax
c0017b85:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b8c:	74 02                	je     c0017b90 <HalQueryPerformanceCounter()+0x1a>
c0017b8e:	0f 31                	rdtsc  
c0017b90:	c3                   	ret    

c0017b91 <HalInitialise()>:
c0017b91:	53                   	push   ebx
c0017b92:	83 ec 08             	sub    esp,0x8
c0017b95:	e8 bc 51 ff ff       	call   c000cd56 <setupINTS()>
c0017b9a:	80 3d 40 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029840,0x0
c0017ba1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ba6:	75 0f                	jne    c0017bb7 <HalInitialise()+0x26>
c0017ba8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bae:	83 e2 fe             	and    edx,0xfffffffe
c0017bb1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bb7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bbd:	c6 05 00 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a500,0x0
c0017bc4:	83 e2 fe             	and    edx,0xfffffffe
c0017bc7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bcd:	e8 9e 02 00 00       	call   c0017e70 <picOpen()>
c0017bd2:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017bd9:	74 0a                	je     c0017be5 <HalInitialise()+0x54>
c0017bdb:	e8 e0 01 00 00       	call   c0017dc0 <picDisable()>
c0017be0:	e8 ad 67 00 00       	call   c001e392 <apicOpen()>
c0017be5:	bb 0f 00 00 00       	mov    ebx,0xf
c0017bea:	50                   	push   eax
c0017beb:	6a 00                	push   0x0
c0017bed:	68 38 78 01 c0       	push   0xc0017838
c0017bf2:	6a 00                	push   0x0
c0017bf4:	e8 2d 4f ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bf9:	83 c4 0c             	add    esp,0xc
c0017bfc:	6a 00                	push   0x0
c0017bfe:	68 38 78 01 c0       	push   0xc0017838
c0017c03:	6a 01                	push   0x1
c0017c05:	e8 1c 4f ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c0a:	83 c4 0c             	add    esp,0xc
c0017c0d:	6a 00                	push   0x0
c0017c0f:	68 c9 72 01 c0       	push   0xc00172c9
c0017c14:	6a 02                	push   0x2
c0017c16:	e8 0b 4f ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c1b:	83 c4 0c             	add    esp,0xc
c0017c1e:	6a 00                	push   0x0
c0017c20:	68 38 78 01 c0       	push   0xc0017838
c0017c25:	6a 03                	push   0x3
c0017c27:	e8 fa 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c2c:	83 c4 0c             	add    esp,0xc
c0017c2f:	6a 00                	push   0x0
c0017c31:	68 38 78 01 c0       	push   0xc0017838
c0017c36:	6a 04                	push   0x4
c0017c38:	e8 e9 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c3d:	83 c4 0c             	add    esp,0xc
c0017c40:	6a 00                	push   0x0
c0017c42:	68 38 78 01 c0       	push   0xc0017838
c0017c47:	6a 05                	push   0x5
c0017c49:	e8 d8 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c4e:	83 c4 0c             	add    esp,0xc
c0017c51:	6a 00                	push   0x0
c0017c53:	68 6c 78 01 c0       	push   0xc001786c
c0017c58:	6a 06                	push   0x6
c0017c5a:	e8 c7 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c5f:	83 c4 0c             	add    esp,0xc
c0017c62:	6a 00                	push   0x0
c0017c64:	68 e2 72 01 c0       	push   0xc00172e2
c0017c69:	6a 08                	push   0x8
c0017c6b:	e8 b6 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c70:	83 c4 0c             	add    esp,0xc
c0017c73:	6a 00                	push   0x0
c0017c75:	68 38 78 01 c0       	push   0xc0017838
c0017c7a:	6a 09                	push   0x9
c0017c7c:	e8 a5 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c81:	83 c4 0c             	add    esp,0xc
c0017c84:	6a 00                	push   0x0
c0017c86:	68 38 78 01 c0       	push   0xc0017838
c0017c8b:	6a 0a                	push   0xa
c0017c8d:	e8 94 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c92:	83 c4 0c             	add    esp,0xc
c0017c95:	6a 00                	push   0x0
c0017c97:	68 38 78 01 c0       	push   0xc0017838
c0017c9c:	6a 0b                	push   0xb
c0017c9e:	e8 83 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca3:	83 c4 0c             	add    esp,0xc
c0017ca6:	6a 00                	push   0x0
c0017ca8:	68 48 77 01 c0       	push   0xc0017748
c0017cad:	6a 0d                	push   0xd
c0017caf:	e8 72 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb4:	83 c4 0c             	add    esp,0xc
c0017cb7:	6a 00                	push   0x0
c0017cb9:	68 af 77 01 c0       	push   0xc00177af
c0017cbe:	6a 0e                	push   0xe
c0017cc0:	e8 61 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cc5:	83 c4 10             	add    esp,0x10
c0017cc8:	50                   	push   eax
c0017cc9:	6a 00                	push   0x0
c0017ccb:	68 38 78 01 c0       	push   0xc0017838
c0017cd0:	53                   	push   ebx
c0017cd1:	43                   	inc    ebx
c0017cd2:	e8 4f 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	83 fb 1e             	cmp    ebx,0x1e
c0017cdd:	75 e9                	jne    c0017cc8 <HalInitialise()+0x137>
c0017cdf:	50                   	push   eax
c0017ce0:	6a 00                	push   0x0
c0017ce2:	68 e5 24 01 c0       	push   0xc00124e5
c0017ce7:	6a 60                	push   0x60
c0017ce9:	e8 38 4e ff ff       	call   c000cb26 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cee:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017cf3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017cfd:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d04:	e8 ad fd fe ff       	call   c0007ab6 <malloc>
c0017d09:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d0c:	89 c3                	mov    ebx,eax
c0017d0e:	e8 3b 09 00 00       	call   c001864e <RTC::RTC()>
c0017d13:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d1d:	5a                   	pop    edx
c0017d1e:	59                   	pop    ecx
c0017d1f:	53                   	push   ebx
c0017d20:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d26:	e8 c7 48 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c0017d2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d2d:	6a 00                	push   0x0
c0017d2f:	6a 00                	push   0x0
c0017d31:	6a 00                	push   0x0
c0017d33:	53                   	push   ebx
c0017d34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d37:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d3c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d42:	83 c4 28             	add    esp,0x28
c0017d45:	5b                   	pop    ebx
c0017d46:	c3                   	ret    

c0017d47 <HalMakeBeep(int)>:
c0017d47:	53                   	push   ebx
c0017d48:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d4c:	85 db                	test   ebx,ebx
c0017d4e:	75 07                	jne    c0017d57 <HalMakeBeep(int)+0x10>
c0017d50:	e4 61                	in     al,0x61
c0017d52:	83 e0 fc             	and    eax,0xfffffffc
c0017d55:	eb 26                	jmp    c0017d7d <HalMakeBeep(int)+0x36>
c0017d57:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017d5c:	99                   	cdq    
c0017d5d:	f7 fb                	idiv   ebx
c0017d5f:	89 c1                	mov    ecx,eax
c0017d61:	b0 b6                	mov    al,0xb6
c0017d63:	e6 43                	out    0x43,al
c0017d65:	88 c8                	mov    al,cl
c0017d67:	e6 42                	out    0x42,al
c0017d69:	89 c8                	mov    eax,ecx
c0017d6b:	c1 e8 08             	shr    eax,0x8
c0017d6e:	e6 42                	out    0x42,al
c0017d70:	e4 61                	in     al,0x61
c0017d72:	89 c2                	mov    edx,eax
c0017d74:	83 ca 03             	or     edx,0x3
c0017d77:	38 d0                	cmp    al,dl
c0017d79:	74 04                	je     c0017d7f <HalMakeBeep(int)+0x38>
c0017d7b:	88 d0                	mov    al,dl
c0017d7d:	e6 61                	out    0x61,al
c0017d7f:	5b                   	pop    ebx
c0017d80:	c3                   	ret    

c0017d81 <HalGetRand()>:
c0017d81:	31 c0                	xor    eax,eax
c0017d83:	c3                   	ret    

c0017d84 <HalEndOfInterrupt(int)>:
c0017d84:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017d8b:	74 23                	je     c0017db0 <HalEndOfInterrupt(int)+0x2c>
c0017d8d:	83 ec 14             	sub    esp,0x14
c0017d90:	6a 1b                	push   0x1b
c0017d92:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d98:	e8 23 f3 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017d9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017da2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017dac:	83 c4 1c             	add    esp,0x1c
c0017daf:	c3                   	ret    
c0017db0:	e9 3f 02 00 00       	jmp    c0017ff4 <picEOI(int)>

c0017db5 <HalRestart()>:
c0017db5:	c3                   	ret    

c0017db6 <HalShutdown()>:
c0017db6:	c3                   	ret    

c0017db7 <HalSleep()>:
c0017db7:	c3                   	ret    

c0017db8 <picIoWait()>:
c0017db8:	eb 00                	jmp    c0017dba <picIoWait()+0x2>
c0017dba:	eb 00                	jmp    c0017dbc <picIoWait()+0x4>
c0017dbc:	90                   	nop
c0017dbd:	c3                   	ret    
c0017dbe:	66 90                	xchg   ax,ax

c0017dc0 <picDisable()>:
c0017dc0:	83 ec 10             	sub    esp,0x10
c0017dc3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017dca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017dcf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017dd3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017dd8:	ee                   	out    dx,al
c0017dd9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017de0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017de5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017de9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017dee:	ee                   	out    dx,al
c0017def:	90                   	nop
c0017df0:	83 c4 10             	add    esp,0x10
c0017df3:	c3                   	ret    

c0017df4 <picGetIRQReg(int)>:
c0017df4:	83 ec 10             	sub    esp,0x10
c0017df7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017dfb:	0f b6 c0             	movzx  eax,al
c0017dfe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e05:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e09:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e0d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e12:	ee                   	out    dx,al
c0017e13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e17:	0f b6 c0             	movzx  eax,al
c0017e1a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e21:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e25:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e29:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e2e:	ee                   	out    dx,al
c0017e2f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e36:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e3b:	89 c2                	mov    edx,eax
c0017e3d:	ec                   	in     al,dx
c0017e3e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e42:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e46:	0f b6 c0             	movzx  eax,al
c0017e49:	c1 e0 08             	shl    eax,0x8
c0017e4c:	89 c1                	mov    ecx,eax
c0017e4e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017e55:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017e5a:	89 c2                	mov    edx,eax
c0017e5c:	ec                   	in     al,dx
c0017e5d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e61:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e65:	0f b6 c0             	movzx  eax,al
c0017e68:	09 c8                	or     eax,ecx
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	c3                   	ret    
c0017e6e:	66 90                	xchg   ax,ax

c0017e70 <picOpen()>:
c0017e70:	83 ec 50             	sub    esp,0x50
c0017e73:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e7f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e87:	ee                   	out    dx,al
c0017e88:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e8f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e94:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e9c:	ee                   	out    dx,al
c0017e9d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017ea5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017ead:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017eb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017eb8:	89 c2                	mov    edx,eax
c0017eba:	ec                   	in     al,dx
c0017ebb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017ebf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017ec3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017ec7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017ece:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ed2:	89 c2                	mov    edx,eax
c0017ed4:	ec                   	in     al,dx
c0017ed5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017ed9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017edd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ee1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ee8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017eed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ef1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ef5:	ee                   	out    dx,al
c0017ef6:	e8 bd fe ff ff       	call   c0017db8 <picIoWait()>
c0017efb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f02:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f07:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f0f:	ee                   	out    dx,al
c0017f10:	e8 a3 fe ff ff       	call   c0017db8 <picIoWait()>
c0017f15:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f19:	0f b6 c0             	movzx  eax,al
c0017f1c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f23:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f27:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f2f:	ee                   	out    dx,al
c0017f30:	e8 83 fe ff ff       	call   c0017db8 <picIoWait()>
c0017f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f39:	0f b6 c0             	movzx  eax,al
c0017f3c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f43:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f47:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f4b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f4f:	ee                   	out    dx,al
c0017f50:	e8 63 fe ff ff       	call   c0017db8 <picIoWait()>
c0017f55:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f5c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f61:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f69:	ee                   	out    dx,al
c0017f6a:	e8 49 fe ff ff       	call   c0017db8 <picIoWait()>
c0017f6f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f76:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f7b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f7f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f83:	ee                   	out    dx,al
c0017f84:	e8 2f fe ff ff       	call   c0017db8 <picIoWait()>
c0017f89:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f90:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f95:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f99:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f9d:	ee                   	out    dx,al
c0017f9e:	e8 15 fe ff ff       	call   c0017db8 <picIoWait()>
c0017fa3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017faa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017faf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017fb3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fb7:	ee                   	out    dx,al
c0017fb8:	e8 fb fd ff ff       	call   c0017db8 <picIoWait()>
c0017fbd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017fc2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017fc9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017fcd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017fd1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fd5:	ee                   	out    dx,al
c0017fd6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017fdb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017fe2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017fe6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017fea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017fee:	ee                   	out    dx,al
c0017fef:	90                   	nop
c0017ff0:	83 c4 50             	add    esp,0x50
c0017ff3:	c3                   	ret    

c0017ff4 <picEOI(int)>:
c0017ff4:	83 ec 10             	sub    esp,0x10
c0017ff7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017ffc:	75 1e                	jne    c001801c <picEOI(int)+0x28>
c0017ffe:	6a 0b                	push   0xb
c0018000:	e8 ef fd ff ff       	call   c0017df4 <picGetIRQReg(int)>
c0018005:	83 c4 04             	add    esp,0x4
c0018008:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001800d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018012:	25 80 00 00 00       	and    eax,0x80
c0018017:	74 73                	je     c001808c <picEOI(int)+0x98>
c0018019:	8d 76 00             	lea    esi,[esi+0x0]
c001801c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018021:	75 31                	jne    c0018054 <picEOI(int)+0x60>
c0018023:	6a 0b                	push   0xb
c0018025:	e8 ca fd ff ff       	call   c0017df4 <picGetIRQReg(int)>
c001802a:	83 c4 04             	add    esp,0x4
c001802d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018036:	98                   	cwde   
c0018037:	85 c0                	test   eax,eax
c0018039:	78 19                	js     c0018054 <picEOI(int)+0x60>
c001803b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018042:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018047:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001804b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018050:	ee                   	out    dx,al
c0018051:	eb 3d                	jmp    c0018090 <picEOI(int)+0x9c>
c0018053:	90                   	nop
c0018054:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018059:	7e 19                	jle    c0018074 <picEOI(int)+0x80>
c001805b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018062:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018067:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001806b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018070:	ee                   	out    dx,al
c0018071:	8d 76 00             	lea    esi,[esi+0x0]
c0018074:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001807b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018080:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018084:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018089:	ee                   	out    dx,al
c001808a:	eb 04                	jmp    c0018090 <picEOI(int)+0x9c>
c001808c:	90                   	nop
c001808d:	8d 76 00             	lea    esi,[esi+0x0]
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	c3                   	ret    

c0018094 <RTC::open(int, int, void*)>:
c0018094:	31 c0                	xor    eax,eax
c0018096:	c3                   	ret    
c0018097:	90                   	nop

c0018098 <RTC::close(int, int, void*)>:
c0018098:	31 c0                	xor    eax,eax
c001809a:	c3                   	ret    
c001809b:	90                   	nop

c001809c <RTC::timeInSecondsUTC()>:
c001809c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00180a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00180ac:	c3                   	ret    
c00180ad:	90                   	nop

c00180ae <RTC::timeInDatetimeUTC()>:
c00180ae:	53                   	push   ebx
c00180af:	83 ec 14             	sub    esp,0x14
c00180b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00180b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00180bc:	50                   	push   eax
c00180bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00180c0:	83 c4 0c             	add    esp,0xc
c00180c3:	52                   	push   edx
c00180c4:	50                   	push   eax
c00180c5:	53                   	push   ebx
c00180c6:	e8 9b 42 ff ff       	call   c000c366 <secondsToDatetime(unsigned long long)>
c00180cb:	89 d8                	mov    eax,ebx
c00180cd:	83 c4 14             	add    esp,0x14
c00180d0:	5b                   	pop    ebx
c00180d1:	c2 04 00             	ret    0x4

c00180d4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00180d4:	56                   	push   esi
c00180d5:	53                   	push   ebx
c00180d6:	83 ec 14             	sub    esp,0x14
c00180d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180df:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00180e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180e6:	52                   	push   edx
c00180e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180ef:	50                   	push   eax
c00180f0:	e8 71 42 ff ff       	call   c000c366 <secondsToDatetime(unsigned long long)>
c00180f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018101:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018105:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018109:	89 f0                	mov    eax,esi
c001810b:	83 c4 20             	add    esp,0x20
c001810e:	5b                   	pop    ebx
c001810f:	5e                   	pop    esi
c0018110:	ff e0                	jmp    eax

c0018112 <RTC::~RTC()>:
c0018112:	83 ec 0c             	sub    esp,0xc
c0018115:	ba 44 26 02 c0       	mov    edx,0xc0022644
c001811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811e:	89 10                	mov    DWORD PTR [eax],edx
c0018120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	50                   	push   eax
c0018128:	e8 cb 3f ff ff       	call   c000c0f8 <Clock::~Clock()>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	90                   	nop
c0018131:	83 c4 0c             	add    esp,0xc
c0018134:	c3                   	ret    
c0018135:	90                   	nop

c0018136 <RTC::~RTC()>:
c0018136:	83 ec 0c             	sub    esp,0xc
c0018139:	83 ec 0c             	sub    esp,0xc
c001813c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018140:	e8 cd ff ff ff       	call   c0018112 <RTC::~RTC()>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	83 ec 08             	sub    esp,0x8
c001814b:	68 60 01 00 00       	push   0x160
c0018150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018154:	e8 bf 26 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018159:	83 c4 10             	add    esp,0x10
c001815c:	83 c4 0c             	add    esp,0xc
c001815f:	c3                   	ret    

c0018160 <RTC::get_update_in_progress_flag()>:
c0018160:	83 ec 14             	sub    esp,0x14
c0018163:	6a 0a                	push   0xa
c0018165:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001816b:	e8 08 f0 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018170:	83 c4 1c             	add    esp,0x1c
c0018173:	0f b6 c0             	movzx  eax,al
c0018176:	c1 e8 07             	shr    eax,0x7
c0018179:	c3                   	ret    

c001817a <RTC::completeRTCRefresh()>:
c001817a:	55                   	push   ebp
c001817b:	57                   	push   edi
c001817c:	56                   	push   esi
c001817d:	53                   	push   ebx
c001817e:	83 ec 3c             	sub    esp,0x3c
c0018181:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018187:	83 ec 0c             	sub    esp,0xc
c001818a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001818e:	e8 cd ff ff ff       	call   c0018160 <RTC::get_update_in_progress_flag()>
c0018193:	83 c4 10             	add    esp,0x10
c0018196:	84 c0                	test   al,al
c0018198:	74 0e                	je     c00181a8 <RTC::completeRTCRefresh()+0x2e>
c001819a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00181a0:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c00181a6:	73 df                	jae    c0018187 <RTC::completeRTCRefresh()+0xd>
c00181a8:	51                   	push   ecx
c00181a9:	51                   	push   ecx
c00181aa:	6a 00                	push   0x0
c00181ac:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181b2:	e8 c1 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181b7:	5b                   	pop    ebx
c00181b8:	89 c7                	mov    edi,eax
c00181ba:	5e                   	pop    esi
c00181bb:	6a 02                	push   0x2
c00181bd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181c3:	e8 b0 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181c8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00181cc:	5d                   	pop    ebp
c00181cd:	58                   	pop    eax
c00181ce:	6a 04                	push   0x4
c00181d0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181d6:	e8 9d ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181db:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00181df:	58                   	pop    eax
c00181e0:	5a                   	pop    edx
c00181e1:	6a 07                	push   0x7
c00181e3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181e9:	e8 8a ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181ee:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00181f2:	59                   	pop    ecx
c00181f3:	5b                   	pop    ebx
c00181f4:	6a 08                	push   0x8
c00181f6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181fc:	e8 77 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018201:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018205:	5e                   	pop    esi
c0018206:	5d                   	pop    ebp
c0018207:	6a 09                	push   0x9
c0018209:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001820f:	e8 64 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018214:	0f b6 c0             	movzx  eax,al
c0018217:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001821b:	83 c4 10             	add    esp,0x10
c001821e:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018224:	83 ec 0c             	sub    esp,0xc
c0018227:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001822b:	e8 30 ff ff ff       	call   c0018160 <RTC::get_update_in_progress_flag()>
c0018230:	83 c4 10             	add    esp,0x10
c0018233:	84 c0                	test   al,al
c0018235:	74 0e                	je     c0018245 <RTC::completeRTCRefresh()+0xcb>
c0018237:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001823d:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c0018243:	73 df                	jae    c0018224 <RTC::completeRTCRefresh()+0xaa>
c0018245:	51                   	push   ecx
c0018246:	51                   	push   ecx
c0018247:	6a 00                	push   0x0
c0018249:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001824f:	e8 24 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018254:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018258:	5b                   	pop    ebx
c0018259:	5e                   	pop    esi
c001825a:	6a 02                	push   0x2
c001825c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018262:	e8 11 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018267:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001826b:	5d                   	pop    ebp
c001826c:	58                   	pop    eax
c001826d:	6a 04                	push   0x4
c001826f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018275:	e8 fe ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001827a:	88 c3                	mov    bl,al
c001827c:	58                   	pop    eax
c001827d:	5a                   	pop    edx
c001827e:	6a 07                	push   0x7
c0018280:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018286:	e8 ed ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001828b:	59                   	pop    ecx
c001828c:	89 c6                	mov    esi,eax
c001828e:	5d                   	pop    ebp
c001828f:	6a 08                	push   0x8
c0018291:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018297:	e8 dc ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001829c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00182a0:	58                   	pop    eax
c00182a1:	5a                   	pop    edx
c00182a2:	6a 09                	push   0x9
c00182a4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182aa:	e8 c9 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182af:	89 f9                	mov    ecx,edi
c00182b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182b5:	0f b6 e8             	movzx  ebp,al
c00182b8:	83 c4 10             	add    esp,0x10
c00182bb:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00182bf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00182c4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00182c9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00182cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182d1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00182d5:	0f 94 c0             	sete   al
c00182d8:	0f b6 fb             	movzx  edi,bl
c00182db:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00182df:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00182e4:	0f 94 c2             	sete   dl
c00182e7:	21 d0                	and    eax,edx
c00182e9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00182ed:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00182f1:	0f 94 c2             	sete   dl
c00182f4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00182f8:	21 c2                	and    edx,eax
c00182fa:	89 f0                	mov    eax,esi
c00182fc:	0f b6 c0             	movzx  eax,al
c00182ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018303:	89 f0                	mov    eax,esi
c0018305:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018309:	0f 94 c0             	sete   al
c001830c:	21 d0                	and    eax,edx
c001830e:	31 d2                	xor    edx,edx
c0018310:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018314:	0f 94 c2             	sete   dl
c0018317:	85 c2                	test   edx,eax
c0018319:	75 27                	jne    c0018342 <RTC::completeRTCRefresh()+0x1c8>
c001831b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001831f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018323:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018327:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001832b:	89 f0                	mov    eax,esi
c001832d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018331:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018335:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018339:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001833d:	e9 dc fe ff ff       	jmp    c001821e <RTC::completeRTCRefresh()+0xa4>
c0018342:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018346:	75 d3                	jne    c001831b <RTC::completeRTCRefresh()+0x1a1>
c0018348:	52                   	push   edx
c0018349:	52                   	push   edx
c001834a:	6a 0b                	push   0xb
c001834c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018352:	e8 21 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	a8 04                	test   al,0x4
c001835c:	75 7a                	jne    c00183d8 <RTC::completeRTCRefresh()+0x25e>
c001835e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018362:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018366:	83 e1 0f             	and    ecx,0xf
c0018369:	c1 ea 04             	shr    edx,0x4
c001836c:	c1 ef 04             	shr    edi,0x4
c001836f:	6b d2 0a             	imul   edx,edx,0xa
c0018372:	83 e6 0f             	and    esi,0xf
c0018375:	01 d1                	add    ecx,edx
c0018377:	c1 ed 04             	shr    ebp,0x4
c001837a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001837e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018382:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018386:	c1 ea 04             	shr    edx,0x4
c0018389:	83 e1 0f             	and    ecx,0xf
c001838c:	6b d2 0a             	imul   edx,edx,0xa
c001838f:	6b ed 0a             	imul   ebp,ebp,0xa
c0018392:	01 d1                	add    ecx,edx
c0018394:	89 fa                	mov    edx,edi
c0018396:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001839a:	83 e2 07             	and    edx,0x7
c001839d:	89 d9                	mov    ecx,ebx
c001839f:	6b d2 0a             	imul   edx,edx,0xa
c00183a2:	83 e1 0f             	and    ecx,0xf
c00183a5:	83 e3 80             	and    ebx,0xffffff80
c00183a8:	01 d1                	add    ecx,edx
c00183aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183ae:	09 cb                	or     ebx,ecx
c00183b0:	c1 ea 04             	shr    edx,0x4
c00183b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183b7:	6b d2 0a             	imul   edx,edx,0xa
c00183ba:	83 e1 0f             	and    ecx,0xf
c00183bd:	01 d6                	add    esi,edx
c00183bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183c3:	c1 ea 04             	shr    edx,0x4
c00183c6:	6b d2 0a             	imul   edx,edx,0xa
c00183c9:	01 d1                	add    ecx,edx
c00183cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183cf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00183d3:	83 e2 0f             	and    edx,0xf
c00183d6:	01 d5                	add    ebp,edx
c00183d8:	a8 02                	test   al,0x2
c00183da:	75 15                	jne    c00183f1 <RTC::completeRTCRefresh()+0x277>
c00183dc:	f6 c3 80             	test   bl,0x80
c00183df:	74 10                	je     c00183f1 <RTC::completeRTCRefresh()+0x277>
c00183e1:	83 e3 7f             	and    ebx,0x7f
c00183e4:	b9 18 00 00 00       	mov    ecx,0x18
c00183e9:	8d 43 0c             	lea    eax,[ebx+0xc]
c00183ec:	99                   	cdq    
c00183ed:	f7 f9                	idiv   ecx
c00183ef:	88 d3                	mov    bl,dl
c00183f1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00183f7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00183fd:	77 06                	ja     c0018405 <RTC::completeRTCRefresh()+0x28b>
c00183ff:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018405:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001840a:	31 c9                	xor    ecx,ecx
c001840c:	c1 e0 10             	shl    eax,0x10
c001840f:	89 cd                	mov    ebp,ecx
c0018411:	c1 e7 10             	shl    edi,0x10
c0018414:	31 d2                	xor    edx,edx
c0018416:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001841c:	09 c5                	or     ebp,eax
c001841e:	89 f0                	mov    eax,esi
c0018420:	89 e9                	mov    ecx,ebp
c0018422:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018426:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001842a:	88 c2                	mov    dl,al
c001842c:	88 d9                	mov    cl,bl
c001842e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018432:	0f b7 c2             	movzx  eax,dx
c0018435:	09 f8                	or     eax,edi
c0018437:	89 c2                	mov    edx,eax
c0018439:	50                   	push   eax
c001843a:	50                   	push   eax
c001843b:	51                   	push   ecx
c001843c:	52                   	push   edx
c001843d:	e8 a5 3d ff ff       	call   c000c1e7 <datetimeToSeconds(datetime_t)>
c0018442:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018446:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001844c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018452:	83 c4 4c             	add    esp,0x4c
c0018455:	5b                   	pop    ebx
c0018456:	5e                   	pop    esi
c0018457:	5f                   	pop    edi
c0018458:	5d                   	pop    ebp
c0018459:	c3                   	ret    

c001845a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001845a:	55                   	push   ebp
c001845b:	57                   	push   edi
c001845c:	56                   	push   esi
c001845d:	53                   	push   ebx
c001845e:	83 ec 30             	sub    esp,0x30
c0018461:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018465:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018469:	6a 00                	push   0x0
c001846b:	6a 00                	push   0x0
c001846d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018473:	e8 1a ee fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018478:	83 c4 0c             	add    esp,0xc
c001847b:	6a 00                	push   0x0
c001847d:	6a 02                	push   0x2
c001847f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018485:	e8 08 ee fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001848a:	31 d2                	xor    edx,edx
c001848c:	89 f9                	mov    ecx,edi
c001848e:	89 f8                	mov    eax,edi
c0018490:	c1 e9 10             	shr    ecx,0x10
c0018493:	0f b6 c4             	movzx  eax,ah
c0018496:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001849a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001849e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184a2:	b9 64 00 00 00       	mov    ecx,0x64
c00184a7:	89 f0                	mov    eax,esi
c00184a9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00184ad:	89 f0                	mov    eax,esi
c00184af:	0f b6 c4             	movzx  eax,ah
c00184b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184b6:	89 f0                	mov    eax,esi
c00184b8:	c1 e8 10             	shr    eax,0x10
c00184bb:	f7 f1                	div    ecx
c00184bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00184c1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00184c5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184c9:	59                   	pop    ecx
c00184ca:	5b                   	pop    ebx
c00184cb:	89 fb                	mov    ebx,edi
c00184cd:	6a 0b                	push   0xb
c00184cf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184d5:	e8 9e ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184da:	83 c4 10             	add    esp,0x10
c00184dd:	89 c5                	mov    ebp,eax
c00184df:	a8 04                	test   al,0x4
c00184e1:	75 6e                	jne    c0018551 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00184e3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184e7:	31 d2                	xor    edx,edx
c00184e9:	0f b6 c1             	movzx  eax,cl
c00184ec:	b9 0a 00 00 00       	mov    ecx,0xa
c00184f1:	f7 f1                	div    ecx
c00184f3:	c1 e0 04             	shl    eax,0x4
c00184f6:	09 d0                	or     eax,edx
c00184f8:	31 d2                	xor    edx,edx
c00184fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184fe:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018503:	f7 f1                	div    ecx
c0018505:	c1 e0 04             	shl    eax,0x4
c0018508:	09 d0                	or     eax,edx
c001850a:	31 d2                	xor    edx,edx
c001850c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018510:	0f b6 c3             	movzx  eax,bl
c0018513:	f7 f1                	div    ecx
c0018515:	c1 e0 04             	shl    eax,0x4
c0018518:	09 d0                	or     eax,edx
c001851a:	31 d2                	xor    edx,edx
c001851c:	89 c3                	mov    ebx,eax
c001851e:	89 f0                	mov    eax,esi
c0018520:	0f b6 c0             	movzx  eax,al
c0018523:	f7 f1                	div    ecx
c0018525:	c1 e0 04             	shl    eax,0x4
c0018528:	09 d0                	or     eax,edx
c001852a:	31 d2                	xor    edx,edx
c001852c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018530:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018535:	f7 f1                	div    ecx
c0018537:	c1 e0 04             	shl    eax,0x4
c001853a:	09 d0                	or     eax,edx
c001853c:	31 d2                	xor    edx,edx
c001853e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018542:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018546:	f7 f1                	div    ecx
c0018548:	c1 e0 04             	shl    eax,0x4
c001854b:	09 d0                	or     eax,edx
c001854d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018551:	83 e5 02             	and    ebp,0x2
c0018554:	75 1e                	jne    c0018574 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018556:	0f b6 c3             	movzx  eax,bl
c0018559:	83 f8 0b             	cmp    eax,0xb
c001855c:	76 10                	jbe    c001856e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001855e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018561:	88 d3                	mov    bl,dl
c0018563:	84 d2                	test   dl,dl
c0018565:	75 02                	jne    c0018569 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018567:	b3 0c                	mov    bl,0xc
c0018569:	83 cb 80             	or     ebx,0xffffff80
c001856c:	eb 06                	jmp    c0018574 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001856e:	85 c0                	test   eax,eax
c0018570:	75 02                	jne    c0018574 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018572:	b3 0c                	mov    bl,0xc
c0018574:	0f b6 db             	movzx  ebx,bl
c0018577:	50                   	push   eax
c0018578:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001857d:	52                   	push   edx
c001857e:	6a 00                	push   0x0
c0018580:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018586:	e8 07 ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001858b:	83 c4 0c             	add    esp,0xc
c001858e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018593:	50                   	push   eax
c0018594:	6a 02                	push   0x2
c0018596:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001859c:	e8 f1 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185a1:	83 c4 0c             	add    esp,0xc
c00185a4:	53                   	push   ebx
c00185a5:	6a 04                	push   0x4
c00185a7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185ad:	e8 e0 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185b2:	83 c4 0c             	add    esp,0xc
c00185b5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00185ba:	52                   	push   edx
c00185bb:	6a 07                	push   0x7
c00185bd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185c3:	e8 ca ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185c8:	83 c4 0c             	add    esp,0xc
c00185cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00185d0:	50                   	push   eax
c00185d1:	6a 08                	push   0x8
c00185d3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185d9:	e8 b4 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185de:	83 c4 0c             	add    esp,0xc
c00185e1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00185e6:	55                   	push   ebp
c00185e7:	6a 09                	push   0x9
c00185e9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185ef:	e8 9e ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185f4:	5a                   	pop    edx
c00185f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185f9:	e8 7c fb ff ff       	call   c001817a <RTC::completeRTCRefresh()>
c00185fe:	83 c4 3c             	add    esp,0x3c
c0018601:	b0 01                	mov    al,0x1
c0018603:	5b                   	pop    ebx
c0018604:	5e                   	pop    esi
c0018605:	5f                   	pop    edi
c0018606:	5d                   	pop    ebp
c0018607:	c3                   	ret    

c0018608 <rtcIRQHandler(regs*, void*)>:
c0018608:	53                   	push   ebx
c0018609:	83 ec 10             	sub    esp,0x10
c001860c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018610:	6a 0c                	push   0xc
c0018612:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018618:	e8 5b eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001861d:	83 c4 10             	add    esp,0x10
c0018620:	a8 80                	test   al,0x80
c0018622:	74 24                	je     c0018648 <rtcIRQHandler(regs*, void*)+0x40>
c0018624:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001862b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018632:	66 ff 05 18 a5 02 c0 	inc    WORD PTR ds:0xc002a518
c0018639:	75 0d                	jne    c0018648 <rtcIRQHandler(regs*, void*)+0x40>
c001863b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001863f:	83 c4 08             	add    esp,0x8
c0018642:	5b                   	pop    ebx
c0018643:	e9 32 fb ff ff       	jmp    c001817a <RTC::completeRTCRefresh()>
c0018648:	83 c4 08             	add    esp,0x8
c001864b:	5b                   	pop    ebx
c001864c:	c3                   	ret    
c001864d:	90                   	nop

c001864e <RTC::RTC()>:
c001864e:	83 ec 1c             	sub    esp,0x1c
c0018651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018655:	83 ec 08             	sub    esp,0x8
c0018658:	68 27 26 02 c0       	push   0xc0022627
c001865d:	50                   	push   eax
c001865e:	e8 5f 3a ff ff       	call   c000c0c2 <Clock::Clock(char const*)>
c0018663:	83 c4 10             	add    esp,0x10
c0018666:	ba 44 26 02 c0       	mov    edx,0xc0022644
c001866b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866f:	89 10                	mov    DWORD PTR [eax],edx
c0018671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018675:	83 ec 0c             	sub    esp,0xc
c0018678:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001867c:	6a 01                	push   0x1
c001867e:	68 08 86 01 c0       	push   0xc0018608
c0018683:	6a 08                	push   0x8
c0018685:	50                   	push   eax
c0018686:	e8 13 3f ff ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001868b:	83 c4 20             	add    esp,0x20
c001868e:	89 c2                	mov    edx,eax
c0018690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018694:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001869a:	fa                   	cli    
c001869b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00186a0:	83 c0 01             	add    eax,0x1
c00186a3:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00186a8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186ad:	83 ec 08             	sub    esp,0x8
c00186b0:	6a 0b                	push   0xb
c00186b2:	50                   	push   eax
c00186b3:	e8 c0 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00186bf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186c4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00186c8:	83 ca 10             	or     edx,0x10
c00186cb:	0f b6 d2             	movzx  edx,dl
c00186ce:	83 ec 04             	sub    esp,0x4
c00186d1:	52                   	push   edx
c00186d2:	6a 0b                	push   0xb
c00186d4:	50                   	push   eax
c00186d5:	e8 b8 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	83 ec 0c             	sub    esp,0xc
c00186e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e4:	e8 91 fa ff ff       	call   c001817a <RTC::completeRTCRefresh()>
c00186e9:	83 c4 10             	add    esp,0x10
c00186ec:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00186f1:	83 e8 01             	sub    eax,0x1
c00186f4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00186f9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00186fe:	85 c0                	test   eax,eax
c0018700:	75 01                	jne    c0018703 <RTC::RTC()+0xb5>
c0018702:	fb                   	sti    
c0018703:	90                   	nop
c0018704:	83 c4 1c             	add    esp,0x1c
c0018707:	c3                   	ret    

c0018708 <HalConsoleScroll(int, int)>:
c0018708:	83 ec 10             	sub    esp,0x10
c001870b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018713:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001871b:	90                   	nop
c001871c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018721:	0f 8f e1 00 00 00    	jg     c0018808 <HalConsoleScroll(int, int)+0x100>
c0018727:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001872f:	90                   	nop
c0018730:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018738:	0f 8f be 00 00 00    	jg     c00187fc <HalConsoleScroll(int, int)+0xf4>
c001873e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018742:	89 d0                	mov    eax,edx
c0018744:	c1 e0 02             	shl    eax,0x2
c0018747:	01 d0                	add    eax,edx
c0018749:	c1 e0 05             	shl    eax,0x5
c001874c:	89 c2                	mov    edx,eax
c001874e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018752:	01 d0                	add    eax,edx
c0018754:	89 c2                	mov    edx,eax
c0018756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001875a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001875d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018761:	89 d0                	mov    eax,edx
c0018763:	c1 e0 02             	shl    eax,0x2
c0018766:	01 d0                	add    eax,edx
c0018768:	c1 e0 05             	shl    eax,0x5
c001876b:	89 c2                	mov    edx,eax
c001876d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018771:	01 d0                	add    eax,edx
c0018773:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001877d:	01 c2                	add    edx,eax
c001877f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018781:	88 02                	mov    BYTE PTR [edx],al
c0018783:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018788:	75 66                	jne    c00187f0 <HalConsoleScroll(int, int)+0xe8>
c001878a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001878e:	83 e0 01             	and    eax,0x1
c0018791:	74 39                	je     c00187cc <HalConsoleScroll(int, int)+0xc4>
c0018793:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018797:	83 e0 0f             	and    eax,0xf
c001879a:	88 c2                	mov    dl,al
c001879c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187a0:	c1 e0 04             	shl    eax,0x4
c00187a3:	09 d0                	or     eax,edx
c00187a5:	88 c1                	mov    cl,al
c00187a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187ab:	89 d0                	mov    eax,edx
c00187ad:	c1 e0 02             	shl    eax,0x2
c00187b0:	01 d0                	add    eax,edx
c00187b2:	c1 e0 05             	shl    eax,0x5
c00187b5:	89 c2                	mov    edx,eax
c00187b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187bb:	01 d0                	add    eax,edx
c00187bd:	89 c2                	mov    edx,eax
c00187bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187c3:	01 d0                	add    eax,edx
c00187c5:	88 ca                	mov    dl,cl
c00187c7:	88 10                	mov    BYTE PTR [eax],dl
c00187c9:	eb 25                	jmp    c00187f0 <HalConsoleScroll(int, int)+0xe8>
c00187cb:	90                   	nop
c00187cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187d0:	89 d0                	mov    eax,edx
c00187d2:	c1 e0 02             	shl    eax,0x2
c00187d5:	01 d0                	add    eax,edx
c00187d7:	c1 e0 05             	shl    eax,0x5
c00187da:	89 c2                	mov    edx,eax
c00187dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e0:	01 d0                	add    eax,edx
c00187e2:	89 c2                	mov    edx,eax
c00187e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187e8:	01 d0                	add    eax,edx
c00187ea:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00187ed:	8d 76 00             	lea    esi,[esi+0x0]
c00187f0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00187f5:	e9 36 ff ff ff       	jmp    c0018730 <HalConsoleScroll(int, int)+0x28>
c00187fa:	66 90                	xchg   ax,ax
c00187fc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018801:	e9 16 ff ff ff       	jmp    c001871c <HalConsoleScroll(int, int)+0x14>
c0018806:	66 90                	xchg   ax,ax
c0018808:	90                   	nop
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	c3                   	ret    
c001880d:	8d 76 00             	lea    esi,[esi+0x0]

c0018810 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018810:	83 ec 14             	sub    esp,0x14
c0018813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018817:	88 04 24             	mov    BYTE PTR [esp],al
c001881a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001881d:	0f b6 c0             	movzx  eax,al
c0018820:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018824:	89 d1                	mov    ecx,edx
c0018826:	83 e1 0f             	and    ecx,0xf
c0018829:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001882d:	c1 e2 04             	shl    edx,0x4
c0018830:	0f b6 d2             	movzx  edx,dl
c0018833:	09 ca                	or     edx,ecx
c0018835:	c1 e2 08             	shl    edx,0x8
c0018838:	09 d0                	or     eax,edx
c001883a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001883f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018847:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001884b:	89 d0                	mov    eax,edx
c001884d:	c1 e0 02             	shl    eax,0x2
c0018850:	01 d0                	add    eax,edx
c0018852:	c1 e0 04             	shl    eax,0x4
c0018855:	89 c2                	mov    edx,eax
c0018857:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001885b:	01 d0                	add    eax,edx
c001885d:	01 c0                	add    eax,eax
c001885f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018867:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001886c:	66 89 02             	mov    WORD PTR [edx],ax
c001886f:	90                   	nop
c0018870:	83 c4 14             	add    esp,0x14
c0018873:	c3                   	ret    

c0018874 <HalConsoleCursorUpdate(int, int)>:
c0018874:	83 ec 20             	sub    esp,0x20
c0018877:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001887b:	89 c2                	mov    edx,eax
c001887d:	c1 e2 02             	shl    edx,0x2
c0018880:	01 d0                	add    eax,edx
c0018882:	c1 e0 04             	shl    eax,0x4
c0018885:	89 c2                	mov    edx,eax
c0018887:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001888b:	01 d0                	add    eax,edx
c001888d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018892:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018899:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001889e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188a6:	ee                   	out    dx,al
c00188a7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00188ac:	0f b6 c0             	movzx  eax,al
c00188af:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00188b6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00188ba:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00188be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188c2:	ee                   	out    dx,al
c00188c3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00188ca:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00188cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00188d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188d7:	ee                   	out    dx,al
c00188d8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00188dd:	c1 e8 08             	shr    eax,0x8
c00188e0:	0f b6 c0             	movzx  eax,al
c00188e3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00188ea:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00188ee:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00188f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188f6:	ee                   	out    dx,al
c00188f7:	90                   	nop
c00188f8:	83 c4 20             	add    esp,0x20
c00188fb:	c3                   	ret    

c00188fc <FAT::getName()>:
c00188fc:	b8 78 26 02 c0       	mov    eax,0xc0022678
c0018901:	c3                   	ret    
c0018902:	66 90                	xchg   ax,ax

c0018904 <FAT::tell(void*, unsigned long long*)>:
c0018904:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018909:	75 09                	jne    c0018914 <FAT::tell(void*, unsigned long long*)+0x10>
c001890b:	b8 04 00 00 00       	mov    eax,0x4
c0018910:	c3                   	ret    
c0018911:	8d 76 00             	lea    esi,[esi+0x0]
c0018914:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018919:	75 09                	jne    c0018924 <FAT::tell(void*, unsigned long long*)+0x20>
c001891b:	b8 04 00 00 00       	mov    eax,0x4
c0018920:	c3                   	ret    
c0018921:	8d 76 00             	lea    esi,[esi+0x0]
c0018924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018928:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001892b:	ba 00 00 00 00       	mov    edx,0x0
c0018930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018934:	89 01                	mov    DWORD PTR [ecx],eax
c0018936:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018939:	b8 00 00 00 00       	mov    eax,0x0
c001893e:	c3                   	ret    
c001893f:	90                   	nop

c0018940 <FAT::stat(void*, unsigned long long*)>:
c0018940:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018945:	75 09                	jne    c0018950 <FAT::stat(void*, unsigned long long*)+0x10>
c0018947:	b8 04 00 00 00       	mov    eax,0x4
c001894c:	c3                   	ret    
c001894d:	8d 76 00             	lea    esi,[esi+0x0]
c0018950:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018955:	75 09                	jne    c0018960 <FAT::stat(void*, unsigned long long*)+0x20>
c0018957:	b8 04 00 00 00       	mov    eax,0x4
c001895c:	c3                   	ret    
c001895d:	8d 76 00             	lea    esi,[esi+0x0]
c0018960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018964:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018967:	ba 00 00 00 00       	mov    edx,0x0
c001896c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018970:	89 01                	mov    DWORD PTR [ecx],eax
c0018972:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018975:	b8 00 00 00 00       	mov    eax,0x0
c001897a:	c3                   	ret    
c001897b:	90                   	nop

c001897c <FAT::~FAT()>:
c001897c:	83 ec 0c             	sub    esp,0xc
c001897f:	ba c4 26 02 c0       	mov    edx,0xc00226c4
c0018984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018988:	89 10                	mov    DWORD PTR [eax],edx
c001898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001898e:	83 ec 0c             	sub    esp,0xc
c0018991:	50                   	push   eax
c0018992:	e8 17 2b ff ff       	call   c000b4ae <Filesystem::~Filesystem()>
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	90                   	nop
c001899b:	83 c4 0c             	add    esp,0xc
c001899e:	c3                   	ret    
c001899f:	90                   	nop

c00189a0 <FAT::~FAT()>:
c00189a0:	83 ec 0c             	sub    esp,0xc
c00189a3:	83 ec 0c             	sub    esp,0xc
c00189a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189aa:	e8 cd ff ff ff       	call   c001897c <FAT::~FAT()>
c00189af:	83 c4 10             	add    esp,0x10
c00189b2:	83 ec 08             	sub    esp,0x8
c00189b5:	6a 08                	push   0x8
c00189b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189bb:	e8 58 1e ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00189c0:	83 c4 10             	add    esp,0x10
c00189c3:	83 c4 0c             	add    esp,0xc
c00189c6:	c3                   	ret    
c00189c7:	90                   	nop

c00189c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00189c8:	83 ec 1c             	sub    esp,0x1c
c00189cb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00189d2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00189d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189db:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00189e2:	83 f8 ff             	cmp    eax,0xffffffff
c00189e5:	75 35                	jne    c0018a1c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00189e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189eb:	88 c2                	mov    dl,al
c00189ed:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c00189f2:	01 d0                	add    eax,edx
c00189f4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189f8:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c00189fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a02:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018a09:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a12:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018a19:	eb 19                	jmp    c0018a34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a1b:	90                   	nop
c0018a1c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a20:	88 c2                	mov    dl,al
c0018a22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a26:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a2d:	01 d0                	add    eax,edx
c0018a2f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a33:	90                   	nop
c0018a34:	83 ec 04             	sub    esp,0x4
c0018a37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a3f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a43:	50                   	push   eax
c0018a44:	e8 86 c5 fe ff       	call   c0004fcf <f_getlabel>
c0018a49:	83 c4 10             	add    esp,0x10
c0018a4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a55:	75 09                	jne    c0018a60 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018a57:	b8 00 00 00 00       	mov    eax,0x0
c0018a5c:	eb 0a                	jmp    c0018a68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018a5e:	66 90                	xchg   ax,ax
c0018a60:	b8 01 00 00 00       	mov    eax,0x1
c0018a65:	8d 76 00             	lea    esi,[esi+0x0]
c0018a68:	83 c4 1c             	add    esp,0x1c
c0018a6b:	c3                   	ret    

c0018a6c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a6c:	57                   	push   edi
c0018a6d:	83 ec 58             	sub    esp,0x58
c0018a70:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a78:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a7c:	b8 00 00 00 00       	mov    eax,0x0
c0018a81:	b9 0f 00 00 00       	mov    ecx,0xf
c0018a86:	fc                   	cld    
c0018a87:	89 d7                	mov    edi,edx
c0018a89:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018a8b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a8f:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a96:	83 f8 ff             	cmp    eax,0xffffffff
c0018a99:	75 35                	jne    c0018ad0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018a9b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a9f:	88 c2                	mov    dl,al
c0018aa1:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018aa6:	01 d0                	add    eax,edx
c0018aa8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018aac:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018ab2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ab6:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018abd:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ac2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ac6:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018acd:	eb 19                	jmp    c0018ae8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018acf:	90                   	nop
c0018ad0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ad4:	88 c2                	mov    dl,al
c0018ad6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ada:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018ae1:	01 d0                	add    eax,edx
c0018ae3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ae7:	90                   	nop
c0018ae8:	83 ec 08             	sub    esp,0x8
c0018aeb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018aef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018af3:	50                   	push   eax
c0018af4:	e8 47 7d fe ff       	call   c0000840 <strcat>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b03:	50                   	push   eax
c0018b04:	e8 17 c6 fe ff       	call   c0005120 <f_setlabel>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b10:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b15:	75 09                	jne    c0018b20 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018b17:	b8 00 00 00 00       	mov    eax,0x0
c0018b1c:	eb 0a                	jmp    c0018b28 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018b1e:	66 90                	xchg   ax,ax
c0018b20:	b8 01 00 00 00       	mov    eax,0x1
c0018b25:	8d 76 00             	lea    esi,[esi+0x0]
c0018b28:	83 c4 58             	add    esp,0x58
c0018b2b:	5f                   	pop    edi
c0018b2c:	c3                   	ret    
c0018b2d:	90                   	nop
c0018b2e:	66 90                	xchg   ax,ax

c0018b30 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b30:	83 ec 2c             	sub    esp,0x2c
c0018b33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b3b:	83 ec 08             	sub    esp,0x8
c0018b3e:	68 9c 26 02 c0       	push   0xc002269c
c0018b43:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b47:	e8 04 7c fe ff       	call   c0000750 <strcmp>
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	85 c0                	test   eax,eax
c0018b51:	0f 94 c0             	sete   al
c0018b54:	0f b6 c0             	movzx  eax,al
c0018b57:	85 c0                	test   eax,eax
c0018b59:	74 0d                	je     c0018b68 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b5b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b63:	e9 c0 00 00 00       	jmp    c0018c28 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b68:	83 ec 08             	sub    esp,0x8
c0018b6b:	68 8e 26 02 c0       	push   0xc002268e
c0018b70:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b74:	e8 d7 7b fe ff       	call   c0000750 <strcmp>
c0018b79:	83 c4 10             	add    esp,0x10
c0018b7c:	85 c0                	test   eax,eax
c0018b7e:	0f 94 c0             	sete   al
c0018b81:	0f b6 c0             	movzx  eax,al
c0018b84:	85 c0                	test   eax,eax
c0018b86:	74 10                	je     c0018b98 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b88:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b90:	e9 93 00 00 00       	jmp    c0018c28 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b95:	8d 76 00             	lea    esi,[esi+0x0]
c0018b98:	83 ec 08             	sub    esp,0x8
c0018b9b:	68 94 26 02 c0       	push   0xc0022694
c0018ba0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ba4:	e8 a7 7b fe ff       	call   c0000750 <strcmp>
c0018ba9:	83 c4 10             	add    esp,0x10
c0018bac:	85 c0                	test   eax,eax
c0018bae:	0f 94 c0             	sete   al
c0018bb1:	0f b6 c0             	movzx  eax,al
c0018bb4:	85 c0                	test   eax,eax
c0018bb6:	74 0c                	je     c0018bc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018bb8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bc0:	eb 66                	jmp    c0018c28 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bc2:	66 90                	xchg   ax,ax
c0018bc4:	83 ec 08             	sub    esp,0x8
c0018bc7:	68 1c ff 01 c0       	push   0xc001ff1c
c0018bcc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bd0:	e8 7b 7b fe ff       	call   c0000750 <strcmp>
c0018bd5:	83 c4 10             	add    esp,0x10
c0018bd8:	85 c0                	test   eax,eax
c0018bda:	0f 94 c0             	sete   al
c0018bdd:	0f b6 c0             	movzx  eax,al
c0018be0:	85 c0                	test   eax,eax
c0018be2:	74 0c                	je     c0018bf0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018be4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018bec:	eb 3a                	jmp    c0018c28 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bee:	66 90                	xchg   ax,ax
c0018bf0:	83 ec 08             	sub    esp,0x8
c0018bf3:	68 9a 26 02 c0       	push   0xc002269a
c0018bf8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bfc:	e8 4f 7b fe ff       	call   c0000750 <strcmp>
c0018c01:	83 c4 10             	add    esp,0x10
c0018c04:	85 c0                	test   eax,eax
c0018c06:	0f 94 c0             	sete   al
c0018c09:	0f b6 c0             	movzx  eax,al
c0018c0c:	85 c0                	test   eax,eax
c0018c0e:	74 0c                	je     c0018c1c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c10:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c18:	eb 0e                	jmp    c0018c28 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c1a:	66 90                	xchg   ax,ax
c0018c1c:	b8 08 00 00 00       	mov    eax,0x8
c0018c21:	e9 ea 00 00 00       	jmp    c0018d10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c26:	66 90                	xchg   ax,ax
c0018c28:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c2f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c38:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c3f:	83 f8 ff             	cmp    eax,0xffffffff
c0018c42:	75 34                	jne    c0018c78 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c44:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c48:	88 c2                	mov    dl,al
c0018c4a:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c4f:	01 d0                	add    eax,edx
c0018c51:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c55:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018c5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c5f:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018c66:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c6b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c6f:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018c76:	eb 18                	jmp    c0018c90 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c78:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c7c:	88 c2                	mov    dl,al
c0018c7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c82:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c89:	01 d0                	add    eax,edx
c0018c8b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c8f:	90                   	nop
c0018c90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c94:	88 04 24             	mov    BYTE PTR [esp],al
c0018c97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c9f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018ca7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018cac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cb4:	83 ec 0c             	sub    esp,0xc
c0018cb7:	68 00 20 00 00       	push   0x2000
c0018cbc:	e8 f5 ed fe ff       	call   c0007ab6 <malloc>
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cc8:	68 00 20 00 00       	push   0x2000
c0018ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cd1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018cd5:	50                   	push   eax
c0018cd6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018cda:	50                   	push   eax
c0018cdb:	e8 3d c7 fe ff       	call   c000541d <f_mkfs>
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ce7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018cec:	75 0a                	jne    c0018cf8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018cee:	b8 00 00 00 00       	mov    eax,0x0
c0018cf3:	eb 1b                	jmp    c0018d10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cf8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018cfd:	75 09                	jne    c0018d08 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018cff:	b8 09 00 00 00       	mov    eax,0x9
c0018d04:	eb 0a                	jmp    c0018d10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d06:	66 90                	xchg   ax,ax
c0018d08:	b8 01 00 00 00       	mov    eax,0x1
c0018d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d10:	83 c4 2c             	add    esp,0x2c
c0018d13:	c3                   	ret    

c0018d14 <FAT::tryMount(LogicalDisk*, int)>:
c0018d14:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d1a:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d1f:	83 f8 14             	cmp    eax,0x14
c0018d22:	75 18                	jne    c0018d3c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d24:	83 ec 0c             	sub    esp,0xc
c0018d27:	68 a0 26 02 c0       	push   0xc00226a0
c0018d2c:	e8 cc 84 ff ff       	call   c00111fd <KePanic(char const*)>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	b0 00                	mov    al,0x0
c0018d36:	e9 ed 01 00 00       	jmp    c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d3b:	90                   	nop
c0018d3c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d4f:	3d 00 02 00 00       	cmp    eax,0x200
c0018d54:	74 0a                	je     c0018d60 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d56:	b0 00                	mov    al,0x0
c0018d58:	e9 cb 01 00 00       	jmp    c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d60:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d68:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d6f:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018d76:	83 f8 ff             	cmp    eax,0xffffffff
c0018d79:	74 09                	je     c0018d84 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d7b:	b0 01                	mov    al,0x1
c0018d7d:	e9 a6 01 00 00       	jmp    c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d82:	66 90                	xchg   ax,ax
c0018d84:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d8e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018d96:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018d9d:	88 c2                	mov    dl,al
c0018d9f:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018da4:	01 d0                	add    eax,edx
c0018da6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018dad:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018db3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018dba:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018dc1:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018dc6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018dcd:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018dd4:	83 ec 0c             	sub    esp,0xc
c0018dd7:	68 34 02 00 00       	push   0x234
c0018ddc:	e8 d5 ec fe ff       	call   c0007ab6 <malloc>
c0018de1:	83 c4 10             	add    esp,0x10
c0018de4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018deb:	83 ec 04             	sub    esp,0x4
c0018dee:	6a 00                	push   0x0
c0018df0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018df7:	50                   	push   eax
c0018df8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018dff:	e8 f4 ad fe ff       	call   c0003bf8 <f_mount>
c0018e04:	83 c4 10             	add    esp,0x10
c0018e07:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e0e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e16:	74 1c                	je     c0018e34 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e18:	83 ec 0c             	sub    esp,0xc
c0018e1b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e22:	e8 af ec fe ff       	call   c0007ad6 <rfree>
c0018e27:	83 c4 10             	add    esp,0x10
c0018e2a:	b0 00                	mov    al,0x0
c0018e2c:	e9 f7 00 00 00       	jmp    c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e31:	8d 76 00             	lea    esi,[esi+0x0]
c0018e34:	83 ec 04             	sub    esp,0x4
c0018e37:	68 00 01 00 00       	push   0x100
c0018e3c:	6a 00                	push   0x0
c0018e3e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e45:	50                   	push   eax
c0018e46:	e8 a5 76 fe ff       	call   c00004f0 <memset>
c0018e4b:	83 c4 10             	add    esp,0x10
c0018e4e:	83 ec 08             	sub    esp,0x8
c0018e51:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e58:	50                   	push   eax
c0018e59:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e60:	50                   	push   eax
c0018e61:	e8 da 79 fe ff       	call   c0000840 <strcat>
c0018e66:	83 c4 10             	add    esp,0x10
c0018e69:	83 ec 08             	sub    esp,0x8
c0018e6c:	68 ae 26 02 c0       	push   0xc00226ae
c0018e71:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e78:	50                   	push   eax
c0018e79:	e8 c2 79 fe ff       	call   c0000840 <strcat>
c0018e7e:	83 c4 10             	add    esp,0x10
c0018e81:	83 ec 04             	sub    esp,0x4
c0018e84:	6a 01                	push   0x1
c0018e86:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e8d:	50                   	push   eax
c0018e8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e92:	50                   	push   eax
c0018e93:	e8 c2 ad fe ff       	call   c0003c5a <f_open>
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018ea2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018ea9:	85 c0                	test   eax,eax
c0018eab:	74 0b                	je     c0018eb8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018ead:	78 31                	js     c0018ee0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018eaf:	83 e8 04             	sub    eax,0x4
c0018eb2:	83 f8 01             	cmp    eax,0x1
c0018eb5:	77 29                	ja     c0018ee0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018eb7:	90                   	nop
c0018eb8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018ec0:	83 ec 0c             	sub    esp,0xc
c0018ec3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ec7:	50                   	push   eax
c0018ec8:	e8 5c b5 fe ff       	call   c0004429 <f_close>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	90                   	nop
c0018ed1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018ed9:	85 c0                	test   eax,eax
c0018edb:	74 43                	je     c0018f20 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018edd:	eb 31                	jmp    c0018f10 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018edf:	90                   	nop
c0018ee0:	83 ec 0c             	sub    esp,0xc
c0018ee3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018eea:	e8 e7 eb fe ff       	call   c0007ad6 <rfree>
c0018eef:	83 c4 10             	add    esp,0x10
c0018ef2:	83 ec 04             	sub    esp,0x4
c0018ef5:	6a 00                	push   0x0
c0018ef7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018efe:	50                   	push   eax
c0018eff:	6a 00                	push   0x0
c0018f01:	e8 f2 ac fe ff       	call   c0003bf8 <f_mount>
c0018f06:	83 c4 10             	add    esp,0x10
c0018f09:	b0 00                	mov    al,0x0
c0018f0b:	eb 1b                	jmp    c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f10:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018f15:	83 c0 01             	add    eax,0x1
c0018f18:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0018f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f20:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f27:	90                   	nop
c0018f28:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f2e:	c3                   	ret    
c0018f2f:	90                   	nop

c0018f30 <FAT::allocateSwapfile(char const*, int)>:
c0018f30:	55                   	push   ebp
c0018f31:	57                   	push   edi
c0018f32:	56                   	push   esi
c0018f33:	53                   	push   ebx
c0018f34:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f3a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f45:	83 ec 0c             	sub    esp,0xc
c0018f48:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f4f:	e8 62 eb fe ff       	call   c0007ab6 <malloc>
c0018f54:	83 c4 10             	add    esp,0x10
c0018f57:	89 c7                	mov    edi,eax
c0018f59:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0018f5e:	83 ec 04             	sub    esp,0x4
c0018f61:	50                   	push   eax
c0018f62:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f69:	57                   	push   edi
c0018f6a:	e8 7b 27 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c0018f6f:	83 c4 10             	add    esp,0x10
c0018f72:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f79:	83 ec 04             	sub    esp,0x4
c0018f7c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f80:	50                   	push   eax
c0018f81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f85:	50                   	push   eax
c0018f86:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f8d:	e8 16 2b ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c0018f92:	83 c4 10             	add    esp,0x10
c0018f95:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f9c:	c1 e0 14             	shl    eax,0x14
c0018f9f:	89 c7                	mov    edi,eax
c0018fa1:	89 c5                	mov    ebp,eax
c0018fa3:	c1 fd 1f             	sar    ebp,0x1f
c0018fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018faa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018fae:	89 f9                	mov    ecx,edi
c0018fb0:	31 c1                	xor    ecx,eax
c0018fb2:	89 cb                	mov    ebx,ecx
c0018fb4:	89 e9                	mov    ecx,ebp
c0018fb6:	31 d1                	xor    ecx,edx
c0018fb8:	89 ce                	mov    esi,ecx
c0018fba:	89 f0                	mov    eax,esi
c0018fbc:	09 d8                	or     eax,ebx
c0018fbe:	0f 84 9c 00 00 00    	je     c0019060 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018fc4:	83 ec 0c             	sub    esp,0xc
c0018fc7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fce:	e8 a1 29 ff ff       	call   c000b974 <File::unlink()>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	83 ec 08             	sub    esp,0x8
c0018fd9:	6a 12                	push   0x12
c0018fdb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fe2:	e8 bf 27 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018ff1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018ff7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018ffe:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019005:	c1 e0 14             	shl    eax,0x14
c0019008:	83 ec 04             	sub    esp,0x4
c001900b:	6a 01                	push   0x1
c001900d:	50                   	push   eax
c001900e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019015:	e8 96 c2 fe ff       	call   c00052b0 <f_expand>
c001901a:	83 c4 10             	add    esp,0x10
c001901d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019024:	8b 00                	mov    eax,DWORD PTR [eax]
c0019026:	83 c0 10             	add    eax,0x10
c0019029:	8b 00                	mov    eax,DWORD PTR [eax]
c001902b:	83 ec 0c             	sub    esp,0xc
c001902e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019032:	52                   	push   edx
c0019033:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019037:	52                   	push   edx
c0019038:	6a 00                	push   0x0
c001903a:	68 00 04 00 00       	push   0x400
c001903f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019046:	ff d0                	call   eax
c0019048:	83 c4 20             	add    esp,0x20
c001904b:	83 ec 0c             	sub    esp,0xc
c001904e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019055:	e8 aa 27 ff ff       	call   c000b804 <File::close()>
c001905a:	83 c4 10             	add    esp,0x10
c001905d:	8d 76 00             	lea    esi,[esi+0x0]
c0019060:	83 ec 08             	sub    esp,0x8
c0019063:	6a 01                	push   0x1
c0019065:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001906c:	e8 35 27 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001907b:	8b 00                	mov    eax,DWORD PTR [eax]
c001907d:	83 c0 0c             	add    eax,0xc
c0019080:	8b 00                	mov    eax,DWORD PTR [eax]
c0019082:	83 ec 0c             	sub    esp,0xc
c0019085:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019089:	52                   	push   edx
c001908a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001908e:	52                   	push   edx
c001908f:	6a 00                	push   0x0
c0019091:	6a 04                	push   0x4
c0019093:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001909a:	ff d0                	call   eax
c001909c:	83 c4 20             	add    esp,0x20
c001909f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190a6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190ac:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190b3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00190ba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00190bd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00190c4:	83 ec 0c             	sub    esp,0xc
c00190c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190ce:	e8 31 27 ff ff       	call   c000b804 <File::close()>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00190dd:	ba 00 00 00 00       	mov    edx,0x0
c00190e2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00190e8:	5b                   	pop    ebx
c00190e9:	5e                   	pop    esi
c00190ea:	5f                   	pop    edi
c00190eb:	5d                   	pop    ebp
c00190ec:	c3                   	ret    
c00190ed:	90                   	nop
c00190ee:	66 90                	xchg   ax,ax

c00190f0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00190f0:	57                   	push   edi
c00190f1:	56                   	push   esi
c00190f2:	53                   	push   ebx
c00190f3:	81 ec 50 02 00 00    	sub    esp,0x250
c00190f9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019101:	74 0d                	je     c0019110 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019103:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001910b:	75 0f                	jne    c001911c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001910d:	8d 76 00             	lea    esi,[esi+0x0]
c0019110:	b8 04 00 00 00       	mov    eax,0x4
c0019115:	e9 3a 01 00 00       	jmp    c0019254 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001911a:	66 90                	xchg   ax,ax
c001911c:	83 ec 08             	sub    esp,0x8
c001911f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019126:	50                   	push   eax
c0019127:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001912e:	e8 c3 b5 fe ff       	call   c00046f6 <f_readdir>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001913d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001914e:	83 c0 16             	add    eax,0x16
c0019151:	50                   	push   eax
c0019152:	e8 19 74 fe ff       	call   c0000570 <strlen>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	ba 00 00 00 00       	mov    edx,0x0
c001915f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019163:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019167:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001916e:	0f b6 c0             	movzx  eax,al
c0019171:	83 e0 10             	and    eax,0x10
c0019174:	74 0a                	je     c0019180 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019176:	b8 02 00 00 00       	mov    eax,0x2
c001917b:	eb 0b                	jmp    c0019188 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001917d:	8d 76 00             	lea    esi,[esi+0x0]
c0019180:	b8 01 00 00 00       	mov    eax,0x1
c0019185:	8d 76 00             	lea    esi,[esi+0x0]
c0019188:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001918c:	83 ec 08             	sub    esp,0x8
c001918f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019196:	83 c0 16             	add    eax,0x16
c0019199:	50                   	push   eax
c001919a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001919e:	83 c0 10             	add    eax,0x10
c00191a1:	50                   	push   eax
c00191a2:	e8 99 74 fe ff       	call   c0000640 <strcpy>
c00191a7:	83 c4 10             	add    esp,0x10
c00191aa:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00191b1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00191b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191bc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00191c3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00191ca:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00191d1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00191d8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00191df:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00191e6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00191ed:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00191f4:	89 c6                	mov    esi,eax
c00191f6:	89 d7                	mov    edi,edx
c00191f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191fa:	89 c8                	mov    eax,ecx
c00191fc:	89 fa                	mov    edx,edi
c00191fe:	89 f3                	mov    ebx,esi
c0019200:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019207:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001920e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019215:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001921c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019222:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019229:	0f be c0             	movsx  eax,al
c001922c:	85 c0                	test   eax,eax
c001922e:	75 08                	jne    c0019238 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019230:	b8 07 00 00 00       	mov    eax,0x7
c0019235:	eb 1d                	jmp    c0019254 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019237:	90                   	nop
c0019238:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001923f:	85 c0                	test   eax,eax
c0019241:	75 09                	jne    c001924c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019243:	b8 00 00 00 00       	mov    eax,0x0
c0019248:	eb 0a                	jmp    c0019254 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001924a:	66 90                	xchg   ax,ax
c001924c:	b8 01 00 00 00       	mov    eax,0x1
c0019251:	8d 76 00             	lea    esi,[esi+0x0]
c0019254:	81 c4 50 02 00 00    	add    esp,0x250
c001925a:	5b                   	pop    ebx
c001925b:	5e                   	pop    esi
c001925c:	5f                   	pop    edi
c001925d:	c3                   	ret    
c001925e:	66 90                	xchg   ax,ax

c0019260 <FAT::read(void*, unsigned long, void*, int*)>:
c0019260:	83 ec 1c             	sub    esp,0x1c
c0019263:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019268:	74 0a                	je     c0019274 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001926a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001926f:	75 0b                	jne    c001927c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019271:	8d 76 00             	lea    esi,[esi+0x0]
c0019274:	b8 04 00 00 00       	mov    eax,0x4
c0019279:	eb 41                	jmp    c00192bc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001927b:	90                   	nop
c001927c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019280:	50                   	push   eax
c0019281:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019285:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001928d:	e8 8b ac fe ff       	call   c0003f1d <f_read>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019299:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001929d:	89 c2                	mov    edx,eax
c001929f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192a3:	89 10                	mov    DWORD PTR [eax],edx
c00192a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192a9:	85 c0                	test   eax,eax
c00192ab:	75 07                	jne    c00192b4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00192ad:	b8 00 00 00 00       	mov    eax,0x0
c00192b2:	eb 08                	jmp    c00192bc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192b4:	b8 01 00 00 00       	mov    eax,0x1
c00192b9:	8d 76 00             	lea    esi,[esi+0x0]
c00192bc:	83 c4 1c             	add    esp,0x1c
c00192bf:	c3                   	ret    

c00192c0 <FAT::write(void*, unsigned long, void*, int*)>:
c00192c0:	83 ec 1c             	sub    esp,0x1c
c00192c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192c8:	74 0a                	je     c00192d4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00192ca:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192cf:	75 0b                	jne    c00192dc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00192d1:	8d 76 00             	lea    esi,[esi+0x0]
c00192d4:	b8 04 00 00 00       	mov    eax,0x4
c00192d9:	eb 41                	jmp    c001931c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192db:	90                   	nop
c00192dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192e0:	50                   	push   eax
c00192e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192ed:	e8 2a ae fe ff       	call   c000411c <f_write>
c00192f2:	83 c4 10             	add    esp,0x10
c00192f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192fd:	89 c2                	mov    edx,eax
c00192ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019303:	89 10                	mov    DWORD PTR [eax],edx
c0019305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019309:	85 c0                	test   eax,eax
c001930b:	75 07                	jne    c0019314 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001930d:	b8 00 00 00 00       	mov    eax,0x0
c0019312:	eb 08                	jmp    c001931c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019314:	b8 01 00 00 00       	mov    eax,0x1
c0019319:	8d 76 00             	lea    esi,[esi+0x0]
c001931c:	83 c4 1c             	add    esp,0x1c
c001931f:	c3                   	ret    

c0019320 <FAT::close(void*)>:
c0019320:	83 ec 1c             	sub    esp,0x1c
c0019323:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019328:	75 0a                	jne    c0019334 <FAT::close(void*)+0x14>
c001932a:	b8 04 00 00 00       	mov    eax,0x4
c001932f:	eb 3f                	jmp    c0019370 <FAT::close(void*)+0x50>
c0019331:	8d 76 00             	lea    esi,[esi+0x0]
c0019334:	83 ec 0c             	sub    esp,0xc
c0019337:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001933b:	e8 e9 b0 fe ff       	call   c0004429 <f_close>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019347:	83 ec 0c             	sub    esp,0xc
c001934a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001934e:	e8 73 e7 fe ff       	call   c0007ac6 <free>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001935a:	85 c0                	test   eax,eax
c001935c:	75 0a                	jne    c0019368 <FAT::close(void*)+0x48>
c001935e:	b8 00 00 00 00       	mov    eax,0x0
c0019363:	eb 0b                	jmp    c0019370 <FAT::close(void*)+0x50>
c0019365:	8d 76 00             	lea    esi,[esi+0x0]
c0019368:	b8 01 00 00 00       	mov    eax,0x1
c001936d:	8d 76 00             	lea    esi,[esi+0x0]
c0019370:	83 c4 1c             	add    esp,0x1c
c0019373:	c3                   	ret    

c0019374 <FAT::closeDir(void*)>:
c0019374:	83 ec 1c             	sub    esp,0x1c
c0019377:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001937c:	75 0a                	jne    c0019388 <FAT::closeDir(void*)+0x14>
c001937e:	b8 04 00 00 00       	mov    eax,0x4
c0019383:	eb 3f                	jmp    c00193c4 <FAT::closeDir(void*)+0x50>
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	83 ec 0c             	sub    esp,0xc
c001938b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001938f:	e8 40 b3 fe ff       	call   c00046d4 <f_closedir>
c0019394:	83 c4 10             	add    esp,0x10
c0019397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193a2:	e8 1f e7 fe ff       	call   c0007ac6 <free>
c00193a7:	83 c4 10             	add    esp,0x10
c00193aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193ae:	85 c0                	test   eax,eax
c00193b0:	75 0a                	jne    c00193bc <FAT::closeDir(void*)+0x48>
c00193b2:	b8 00 00 00 00       	mov    eax,0x0
c00193b7:	eb 0b                	jmp    c00193c4 <FAT::closeDir(void*)+0x50>
c00193b9:	8d 76 00             	lea    esi,[esi+0x0]
c00193bc:	b8 01 00 00 00       	mov    eax,0x1
c00193c1:	8d 76 00             	lea    esi,[esi+0x0]
c00193c4:	83 c4 1c             	add    esp,0x1c
c00193c7:	c3                   	ret    

c00193c8 <FAT::truncate(void*, unsigned long long)>:
c00193c8:	83 ec 2c             	sub    esp,0x2c
c00193cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193db:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193e0:	75 0a                	jne    c00193ec <FAT::truncate(void*, unsigned long long)+0x24>
c00193e2:	b8 04 00 00 00       	mov    eax,0x4
c00193e7:	eb 47                	jmp    c0019430 <FAT::truncate(void*, unsigned long long)+0x68>
c00193e9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00193f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193f7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00193ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019403:	83 ec 08             	sub    esp,0x8
c0019406:	50                   	push   eax
c0019407:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001940b:	e8 48 b0 fe ff       	call   c0004458 <f_lseek>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019417:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001941b:	85 c0                	test   eax,eax
c001941d:	75 09                	jne    c0019428 <FAT::truncate(void*, unsigned long long)+0x60>
c001941f:	b8 00 00 00 00       	mov    eax,0x0
c0019424:	eb 0a                	jmp    c0019430 <FAT::truncate(void*, unsigned long long)+0x68>
c0019426:	66 90                	xchg   ax,ax
c0019428:	b8 01 00 00 00       	mov    eax,0x1
c001942d:	8d 76 00             	lea    esi,[esi+0x0]
c0019430:	83 c4 2c             	add    esp,0x2c
c0019433:	c3                   	ret    

c0019434 <FAT::seek(void*, unsigned long long)>:
c0019434:	83 ec 2c             	sub    esp,0x2c
c0019437:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001943b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001943f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019443:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019447:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001944c:	75 0a                	jne    c0019458 <FAT::seek(void*, unsigned long long)+0x24>
c001944e:	b8 04 00 00 00       	mov    eax,0x4
c0019453:	eb 33                	jmp    c0019488 <FAT::seek(void*, unsigned long long)+0x54>
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001945c:	83 ec 08             	sub    esp,0x8
c001945f:	50                   	push   eax
c0019460:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019464:	e8 ef af fe ff       	call   c0004458 <f_lseek>
c0019469:	83 c4 10             	add    esp,0x10
c001946c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019474:	85 c0                	test   eax,eax
c0019476:	75 08                	jne    c0019480 <FAT::seek(void*, unsigned long long)+0x4c>
c0019478:	b8 00 00 00 00       	mov    eax,0x0
c001947d:	eb 09                	jmp    c0019488 <FAT::seek(void*, unsigned long long)+0x54>
c001947f:	90                   	nop
c0019480:	b8 01 00 00 00       	mov    eax,0x1
c0019485:	8d 76 00             	lea    esi,[esi+0x0]
c0019488:	83 c4 2c             	add    esp,0x2c
c001948b:	c3                   	ret    

c001948c <fatWrapperReadDisk>:
c001948c:	53                   	push   ebx
c001948d:	83 ec 18             	sub    esp,0x18
c0019490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019494:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019498:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001949d:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00194a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194ac:	ba 00 00 00 00       	mov    edx,0x0
c00194b1:	83 ec 0c             	sub    esp,0xc
c00194b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194b8:	53                   	push   ebx
c00194b9:	52                   	push   edx
c00194ba:	50                   	push   eax
c00194bb:	51                   	push   ecx
c00194bc:	e8 13 45 ff ff       	call   c000d9d4 <LogicalDisk::read(unsigned long long, int, void*)>
c00194c1:	83 c4 20             	add    esp,0x20
c00194c4:	83 c4 18             	add    esp,0x18
c00194c7:	5b                   	pop    ebx
c00194c8:	c3                   	ret    
c00194c9:	8d 76 00             	lea    esi,[esi+0x0]

c00194cc <fatWrapperWriteDisk>:
c00194cc:	53                   	push   ebx
c00194cd:	83 ec 18             	sub    esp,0x18
c00194d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194dd:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00194e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194ec:	ba 00 00 00 00       	mov    edx,0x0
c00194f1:	83 ec 0c             	sub    esp,0xc
c00194f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194f8:	53                   	push   ebx
c00194f9:	52                   	push   edx
c00194fa:	50                   	push   eax
c00194fb:	51                   	push   ecx
c00194fc:	e8 3f 45 ff ff       	call   c000da40 <LogicalDisk::write(unsigned long long, int, void*)>
c0019501:	83 c4 20             	add    esp,0x20
c0019504:	83 c4 18             	add    esp,0x18
c0019507:	5b                   	pop    ebx
c0019508:	c3                   	ret    
c0019509:	8d 76 00             	lea    esi,[esi+0x0]

c001950c <fatWrapperIoctl>:
c001950c:	53                   	push   ebx
c001950d:	83 ec 28             	sub    esp,0x28
c0019510:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019514:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019518:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001951c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019520:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019525:	83 f8 02             	cmp    eax,0x2
c0019528:	75 32                	jne    c001955c <fatWrapperIoctl+0x50>
c001952a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001952e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019532:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019537:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001953e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019544:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001954a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001954e:	66 89 02             	mov    WORD PTR [edx],ax
c0019551:	b8 00 00 00 00       	mov    eax,0x0
c0019556:	e9 c5 00 00 00       	jmp    c0019620 <fatWrapperIoctl+0x114>
c001955b:	90                   	nop
c001955c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019561:	83 f8 01             	cmp    eax,0x1
c0019564:	75 6a                	jne    c00195d0 <fatWrapperIoctl+0xc4>
c0019566:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001956e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019573:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001957a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019580:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019586:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001958c:	89 c8                	mov    eax,ecx
c001958e:	89 da                	mov    edx,ebx
c0019590:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019594:	c1 e0 0a             	shl    eax,0xa
c0019597:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001959c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c00195a3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00195a9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00195af:	89 cb                	mov    ebx,ecx
c00195b1:	c1 fb 1f             	sar    ebx,0x1f
c00195b4:	53                   	push   ebx
c00195b5:	51                   	push   ecx
c00195b6:	52                   	push   edx
c00195b7:	50                   	push   eax
c00195b8:	e8 73 5b 00 00       	call   c001f130 <__udivdi3>
c00195bd:	83 c4 10             	add    esp,0x10
c00195c0:	89 c2                	mov    edx,eax
c00195c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195c6:	89 10                	mov    DWORD PTR [eax],edx
c00195c8:	b8 00 00 00 00       	mov    eax,0x0
c00195cd:	eb 51                	jmp    c0019620 <fatWrapperIoctl+0x114>
c00195cf:	90                   	nop
c00195d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195d5:	85 c0                	test   eax,eax
c00195d7:	75 07                	jne    c00195e0 <fatWrapperIoctl+0xd4>
c00195d9:	b8 00 00 00 00       	mov    eax,0x0
c00195de:	eb 40                	jmp    c0019620 <fatWrapperIoctl+0x114>
c00195e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195e5:	83 f8 03             	cmp    eax,0x3
c00195e8:	75 1a                	jne    c0019604 <fatWrapperIoctl+0xf8>
c00195ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195f6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00195fc:	b8 00 00 00 00       	mov    eax,0x0
c0019601:	eb 1d                	jmp    c0019620 <fatWrapperIoctl+0x114>
c0019603:	90                   	nop
c0019604:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019609:	83 f8 04             	cmp    eax,0x4
c001960c:	75 0a                	jne    c0019618 <fatWrapperIoctl+0x10c>
c001960e:	b8 00 00 00 00       	mov    eax,0x0
c0019613:	eb 0b                	jmp    c0019620 <fatWrapperIoctl+0x114>
c0019615:	8d 76 00             	lea    esi,[esi+0x0]
c0019618:	b8 04 00 00 00       	mov    eax,0x4
c001961d:	8d 76 00             	lea    esi,[esi+0x0]
c0019620:	83 c4 28             	add    esp,0x28
c0019623:	5b                   	pop    ebx
c0019624:	c3                   	ret    
c0019625:	90                   	nop
c0019626:	66 90                	xchg   ax,ax

c0019628 <FAT::FAT()>:
c0019628:	83 ec 1c             	sub    esp,0x1c
c001962b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001962f:	83 ec 0c             	sub    esp,0xc
c0019632:	50                   	push   eax
c0019633:	e8 52 1e ff ff       	call   c000b48a <Filesystem::Filesystem()>
c0019638:	83 c4 10             	add    esp,0x10
c001963b:	ba c4 26 02 c0       	mov    edx,0xc00226c4
c0019640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019644:	89 10                	mov    DWORD PTR [eax],edx
c0019646:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c0019650:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019658:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001965d:	7f 19                	jg     c0019678 <FAT::FAT()+0x50>
c001965f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019663:	c7 04 85 40 a5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5ac0],0xffffffff
c001966e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019673:	eb e3                	jmp    c0019658 <FAT::FAT()+0x30>
c0019675:	8d 76 00             	lea    esi,[esi+0x0]
c0019678:	90                   	nop
c0019679:	83 c4 1c             	add    esp,0x1c
c001967c:	c3                   	ret    
c001967d:	90                   	nop
c001967e:	66 90                	xchg   ax,ax

c0019680 <FAT::fixFilepath(char*)>:
c0019680:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019684:	8a 00                	mov    al,BYTE PTR [eax]
c0019686:	0f be c0             	movsx  eax,al
c0019689:	83 f8 40             	cmp    eax,0x40
c001968c:	7e 2e                	jle    c00196bc <FAT::fixFilepath(char*)+0x3c>
c001968e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019692:	8a 00                	mov    al,BYTE PTR [eax]
c0019694:	83 e8 41             	sub    eax,0x41
c0019697:	88 c2                	mov    dl,al
c0019699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001969d:	88 10                	mov    BYTE PTR [eax],dl
c001969f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a3:	8a 00                	mov    al,BYTE PTR [eax]
c00196a5:	0f be c0             	movsx  eax,al
c00196a8:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00196af:	83 c0 30             	add    eax,0x30
c00196b2:	88 c2                	mov    dl,al
c00196b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196b8:	88 10                	mov    BYTE PTR [eax],dl
c00196ba:	66 90                	xchg   ax,ax
c00196bc:	90                   	nop
c00196bd:	c3                   	ret    
c00196be:	66 90                	xchg   ax,ax

c00196c0 <FAT::open(char const*, void**, FileOpenMode)>:
c00196c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196ce:	74 0c                	je     c00196dc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00196d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196d8:	75 0e                	jne    c00196e8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00196da:	66 90                	xchg   ax,ax
c00196dc:	b8 04 00 00 00       	mov    eax,0x4
c00196e1:	e9 46 01 00 00       	jmp    c001982c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00196e6:	66 90                	xchg   ax,ax
c00196e8:	83 ec 08             	sub    esp,0x8
c00196eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196f6:	50                   	push   eax
c00196f7:	e8 44 6f fe ff       	call   c0000640 <strcpy>
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	83 ec 08             	sub    esp,0x8
c0019702:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019706:	50                   	push   eax
c0019707:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001970e:	e8 6d ff ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019713:	83 c4 10             	add    esp,0x10
c0019716:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001971e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019725:	83 e0 01             	and    eax,0x1
c0019728:	74 12                	je     c001973c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001972a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019731:	83 c8 01             	or     eax,0x1
c0019734:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001973b:	90                   	nop
c001973c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019743:	83 e0 04             	and    eax,0x4
c0019746:	74 24                	je     c001976c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019748:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001974f:	83 c8 30             	or     eax,0x30
c0019752:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019759:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019760:	83 c8 02             	or     eax,0x2
c0019763:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001976a:	66 90                	xchg   ax,ax
c001976c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019773:	83 e0 02             	and    eax,0x2
c0019776:	74 14                	je     c001978c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019778:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001977f:	83 c8 02             	or     eax,0x2
c0019782:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019789:	8d 76 00             	lea    esi,[esi+0x0]
c001978c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019793:	83 e0 08             	and    eax,0x8
c0019796:	74 14                	je     c00197ac <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019798:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001979f:	83 c8 04             	or     eax,0x4
c00197a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197a9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197b3:	83 e0 10             	and    eax,0x10
c00197b6:	74 14                	je     c00197cc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00197b8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197bf:	83 c8 08             	or     eax,0x8
c00197c2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197c9:	8d 76 00             	lea    esi,[esi+0x0]
c00197cc:	83 ec 0c             	sub    esp,0xc
c00197cf:	68 28 02 00 00       	push   0x228
c00197d4:	e8 dd e2 fe ff       	call   c0007ab6 <malloc>
c00197d9:	83 c4 10             	add    esp,0x10
c00197dc:	89 c2                	mov    edx,eax
c00197de:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197e5:	89 10                	mov    DWORD PTR [eax],edx
c00197e7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197ef:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00197f8:	83 ec 04             	sub    esp,0x4
c00197fb:	52                   	push   edx
c00197fc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019800:	52                   	push   edx
c0019801:	50                   	push   eax
c0019802:	e8 53 a4 fe ff       	call   c0003c5a <f_open>
c0019807:	83 c4 10             	add    esp,0x10
c001980a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019811:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019819:	74 09                	je     c0019824 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001981b:	b8 01 00 00 00       	mov    eax,0x1
c0019820:	eb 0a                	jmp    c001982c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019822:	66 90                	xchg   ax,ax
c0019824:	b8 00 00 00 00       	mov    eax,0x0
c0019829:	8d 76 00             	lea    esi,[esi+0x0]
c001982c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019832:	c3                   	ret    
c0019833:	90                   	nop

c0019834 <FAT::openDir(char const*, void**)>:
c0019834:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001983a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019842:	74 0c                	je     c0019850 <FAT::openDir(char const*, void**)+0x1c>
c0019844:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001984c:	75 0e                	jne    c001985c <FAT::openDir(char const*, void**)+0x28>
c001984e:	66 90                	xchg   ax,ax
c0019850:	b8 04 00 00 00       	mov    eax,0x4
c0019855:	e9 82 00 00 00       	jmp    c00198dc <FAT::openDir(char const*, void**)+0xa8>
c001985a:	66 90                	xchg   ax,ax
c001985c:	83 ec 08             	sub    esp,0x8
c001985f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019866:	8d 44 24 18          	lea    eax,[esp+0x18]
c001986a:	50                   	push   eax
c001986b:	e8 d0 6d fe ff       	call   c0000640 <strcpy>
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	83 ec 08             	sub    esp,0x8
c0019876:	8d 44 24 14          	lea    eax,[esp+0x14]
c001987a:	50                   	push   eax
c001987b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019882:	e8 f9 fd ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019887:	83 c4 10             	add    esp,0x10
c001988a:	83 ec 0c             	sub    esp,0xc
c001988d:	6a 30                	push   0x30
c001988f:	e8 22 e2 fe ff       	call   c0007ab6 <malloc>
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	89 c2                	mov    edx,eax
c0019899:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198a0:	89 10                	mov    DWORD PTR [eax],edx
c00198a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ab:	83 ec 08             	sub    esp,0x8
c00198ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198b2:	52                   	push   edx
c00198b3:	50                   	push   eax
c00198b4:	e8 50 ad fe ff       	call   c0004609 <f_opendir>
c00198b9:	83 c4 10             	add    esp,0x10
c00198bc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198c3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198cb:	74 07                	je     c00198d4 <FAT::openDir(char const*, void**)+0xa0>
c00198cd:	b8 01 00 00 00       	mov    eax,0x1
c00198d2:	eb 08                	jmp    c00198dc <FAT::openDir(char const*, void**)+0xa8>
c00198d4:	b8 00 00 00 00       	mov    eax,0x0
c00198d9:	8d 76 00             	lea    esi,[esi+0x0]
c00198dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198e2:	c3                   	ret    
c00198e3:	90                   	nop

c00198e4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198ea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198f2:	75 0c                	jne    c0019900 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00198f4:	b8 04 00 00 00       	mov    eax,0x4
c00198f9:	e9 d6 00 00 00       	jmp    c00199d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198fe:	66 90                	xchg   ax,ax
c0019900:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019908:	75 0a                	jne    c0019914 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001990a:	b8 04 00 00 00       	mov    eax,0x4
c001990f:	e9 c0 00 00 00       	jmp    c00199d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019914:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001991c:	75 0a                	jne    c0019928 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001991e:	b8 04 00 00 00       	mov    eax,0x4
c0019923:	e9 ac 00 00 00       	jmp    c00199d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019928:	83 ec 08             	sub    esp,0x8
c001992b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019932:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019939:	50                   	push   eax
c001993a:	e8 01 6d fe ff       	call   c0000640 <strcpy>
c001993f:	83 c4 10             	add    esp,0x10
c0019942:	83 ec 08             	sub    esp,0x8
c0019945:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001994c:	50                   	push   eax
c001994d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019954:	e8 27 fd ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019959:	83 c4 10             	add    esp,0x10
c001995c:	83 ec 08             	sub    esp,0x8
c001995f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019963:	50                   	push   eax
c0019964:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001996b:	50                   	push   eax
c001996c:	e8 17 ae fe ff       	call   c0004788 <f_stat>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001997b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019982:	85 c0                	test   eax,eax
c0019984:	74 0a                	je     c0019990 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019986:	83 f8 04             	cmp    eax,0x4
c0019989:	74 39                	je     c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001998b:	eb 3f                	jmp    c00199cc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019994:	0f b6 c0             	movzx  eax,al
c0019997:	83 e0 10             	and    eax,0x10
c001999a:	0f 95 c2             	setne  dl
c001999d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00199a4:	88 10                	mov    BYTE PTR [eax],dl
c00199a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199aa:	ba 00 00 00 00       	mov    edx,0x0
c00199af:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00199b6:	89 01                	mov    DWORD PTR [ecx],eax
c00199b8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199bb:	b8 00 00 00 00       	mov    eax,0x0
c00199c0:	eb 12                	jmp    c00199d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199c2:	66 90                	xchg   ax,ax
c00199c4:	b8 02 00 00 00       	mov    eax,0x2
c00199c9:	eb 09                	jmp    c00199d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199cb:	90                   	nop
c00199cc:	b8 01 00 00 00       	mov    eax,0x1
c00199d1:	8d 76 00             	lea    esi,[esi+0x0]
c00199d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199da:	c3                   	ret    
c00199db:	90                   	nop

c00199dc <FAT::unlink(char const*)>:
c00199dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199ea:	75 08                	jne    c00199f4 <FAT::unlink(char const*)+0x18>
c00199ec:	b8 04 00 00 00       	mov    eax,0x4
c00199f1:	eb 61                	jmp    c0019a54 <FAT::unlink(char const*)+0x78>
c00199f3:	90                   	nop
c00199f4:	83 ec 08             	sub    esp,0x8
c00199f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a02:	50                   	push   eax
c0019a03:	e8 38 6c fe ff       	call   c0000640 <strcpy>
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	83 ec 08             	sub    esp,0x8
c0019a0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a12:	50                   	push   eax
c0019a13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a1a:	e8 61 fc ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019a1f:	83 c4 10             	add    esp,0x10
c0019a22:	83 ec 0c             	sub    esp,0xc
c0019a25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a29:	50                   	push   eax
c0019a2a:	e8 cb af fe ff       	call   c00049fa <f_unlink>
c0019a2f:	83 c4 10             	add    esp,0x10
c0019a32:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a39:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a40:	85 c0                	test   eax,eax
c0019a42:	75 08                	jne    c0019a4c <FAT::unlink(char const*)+0x70>
c0019a44:	b8 00 00 00 00       	mov    eax,0x0
c0019a49:	eb 09                	jmp    c0019a54 <FAT::unlink(char const*)+0x78>
c0019a4b:	90                   	nop
c0019a4c:	b8 01 00 00 00       	mov    eax,0x1
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a5a:	c3                   	ret    
c0019a5b:	90                   	nop

c0019a5c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a5c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a62:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019a69:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019a70:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a74:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a78:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a80:	75 0a                	jne    c0019a8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019a82:	b8 04 00 00 00       	mov    eax,0x4
c0019a87:	e9 7c 01 00 00       	jmp    c0019c08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019a8c:	83 ec 08             	sub    esp,0x8
c0019a8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a9a:	50                   	push   eax
c0019a9b:	e8 a0 6b fe ff       	call   c0000640 <strcpy>
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	83 ec 08             	sub    esp,0x8
c0019aa6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019aaa:	50                   	push   eax
c0019aab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ab2:	e8 c9 fb ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019ab7:	83 c4 10             	add    esp,0x10
c0019aba:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ac2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019aca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019acf:	83 e0 01             	and    eax,0x1
c0019ad2:	74 14                	je     c0019ae8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019ad4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019adb:	83 c8 01             	or     eax,0x1
c0019ade:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aed:	83 e0 02             	and    eax,0x2
c0019af0:	74 12                	je     c0019b04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019af2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019af9:	83 c8 20             	or     eax,0x20
c0019afc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b03:	90                   	nop
c0019b04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b09:	83 e0 04             	and    eax,0x4
c0019b0c:	74 12                	je     c0019b20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019b0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b15:	83 c8 04             	or     eax,0x4
c0019b18:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b1f:	90                   	nop
c0019b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b25:	83 e0 08             	and    eax,0x8
c0019b28:	74 12                	je     c0019b3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019b2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b31:	83 c8 02             	or     eax,0x2
c0019b34:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b3b:	90                   	nop
c0019b3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b41:	83 e0 01             	and    eax,0x1
c0019b44:	74 12                	je     c0019b58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019b46:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b4d:	83 c8 01             	or     eax,0x1
c0019b50:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b57:	90                   	nop
c0019b58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b5d:	83 e0 02             	and    eax,0x2
c0019b60:	74 12                	je     c0019b74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019b62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b69:	83 c8 20             	or     eax,0x20
c0019b6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b73:	90                   	nop
c0019b74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b79:	83 e0 04             	and    eax,0x4
c0019b7c:	74 12                	je     c0019b90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019b7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b85:	83 c8 04             	or     eax,0x4
c0019b88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b8f:	90                   	nop
c0019b90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b95:	83 e0 08             	and    eax,0x8
c0019b98:	74 12                	je     c0019bac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019b9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ba1:	83 c8 02             	or     eax,0x2
c0019ba4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bab:	90                   	nop
c0019bac:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019bb3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bba:	09 d0                	or     eax,edx
c0019bbc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bc3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019bcb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019bd3:	83 ec 04             	sub    esp,0x4
c0019bd6:	52                   	push   edx
c0019bd7:	50                   	push   eax
c0019bd8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bdc:	50                   	push   eax
c0019bdd:	e8 8d b2 fe ff       	call   c0004e6f <f_chmod>
c0019be2:	83 c4 10             	add    esp,0x10
c0019be5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019bec:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019bf3:	85 c0                	test   eax,eax
c0019bf5:	75 09                	jne    c0019c00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019bf7:	b8 00 00 00 00       	mov    eax,0x0
c0019bfc:	eb 0a                	jmp    c0019c08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019bfe:	66 90                	xchg   ax,ax
c0019c00:	b8 01 00 00 00       	mov    eax,0x1
c0019c05:	8d 76 00             	lea    esi,[esi+0x0]
c0019c08:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c0e:	c3                   	ret    
c0019c0f:	90                   	nop

c0019c10 <FAT::rename(char const*, char const*)>:
c0019c10:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c16:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c1e:	74 0c                	je     c0019c2c <FAT::rename(char const*, char const*)+0x1c>
c0019c20:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c28:	75 0e                	jne    c0019c38 <FAT::rename(char const*, char const*)+0x28>
c0019c2a:	66 90                	xchg   ax,ax
c0019c2c:	b8 04 00 00 00       	mov    eax,0x4
c0019c31:	e9 9e 00 00 00       	jmp    c0019cd4 <FAT::rename(char const*, char const*)+0xc4>
c0019c36:	66 90                	xchg   ax,ax
c0019c38:	83 ec 08             	sub    esp,0x8
c0019c3b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c49:	50                   	push   eax
c0019c4a:	e8 f1 69 fe ff       	call   c0000640 <strcpy>
c0019c4f:	83 c4 10             	add    esp,0x10
c0019c52:	83 ec 08             	sub    esp,0x8
c0019c55:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c5c:	50                   	push   eax
c0019c5d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c64:	e8 17 fa ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019c69:	83 c4 10             	add    esp,0x10
c0019c6c:	83 ec 08             	sub    esp,0x8
c0019c6f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c7a:	50                   	push   eax
c0019c7b:	e8 c0 69 fe ff       	call   c0000640 <strcpy>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	83 ec 08             	sub    esp,0x8
c0019c86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c8a:	50                   	push   eax
c0019c8b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c92:	e8 e9 f9 ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019c97:	83 c4 10             	add    esp,0x10
c0019c9a:	83 ec 08             	sub    esp,0x8
c0019c9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ca1:	50                   	push   eax
c0019ca2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ca9:	50                   	push   eax
c0019caa:	e8 08 b0 fe ff       	call   c0004cb7 <f_rename>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019cb9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019cc0:	85 c0                	test   eax,eax
c0019cc2:	75 08                	jne    c0019ccc <FAT::rename(char const*, char const*)+0xbc>
c0019cc4:	b8 00 00 00 00       	mov    eax,0x0
c0019cc9:	eb 09                	jmp    c0019cd4 <FAT::rename(char const*, char const*)+0xc4>
c0019ccb:	90                   	nop
c0019ccc:	b8 01 00 00 00       	mov    eax,0x1
c0019cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cda:	c3                   	ret    
c0019cdb:	90                   	nop

c0019cdc <FAT::mkdir(char const*)>:
c0019cdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ce2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cea:	75 08                	jne    c0019cf4 <FAT::mkdir(char const*)+0x18>
c0019cec:	b8 04 00 00 00       	mov    eax,0x4
c0019cf1:	eb 61                	jmp    c0019d54 <FAT::mkdir(char const*)+0x78>
c0019cf3:	90                   	nop
c0019cf4:	83 ec 08             	sub    esp,0x8
c0019cf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d02:	50                   	push   eax
c0019d03:	e8 38 69 fe ff       	call   c0000640 <strcpy>
c0019d08:	83 c4 10             	add    esp,0x10
c0019d0b:	83 ec 08             	sub    esp,0x8
c0019d0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d12:	50                   	push   eax
c0019d13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d1a:	e8 61 f9 ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	83 ec 0c             	sub    esp,0xc
c0019d25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d29:	50                   	push   eax
c0019d2a:	e8 ed ad fe ff       	call   c0004b1c <f_mkdir>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d39:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d40:	85 c0                	test   eax,eax
c0019d42:	75 08                	jne    c0019d4c <FAT::mkdir(char const*)+0x70>
c0019d44:	b8 00 00 00 00       	mov    eax,0x0
c0019d49:	eb 09                	jmp    c0019d54 <FAT::mkdir(char const*)+0x78>
c0019d4b:	90                   	nop
c0019d4c:	b8 01 00 00 00       	mov    eax,0x1
c0019d51:	8d 76 00             	lea    esi,[esi+0x0]
c0019d54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d5a:	c3                   	ret    
c0019d5b:	90                   	nop

c0019d5c <FAT::exists(char const*)>:
c0019d5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d62:	83 ec 08             	sub    esp,0x8
c0019d65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d70:	50                   	push   eax
c0019d71:	e8 ca 68 fe ff       	call   c0000640 <strcpy>
c0019d76:	83 c4 10             	add    esp,0x10
c0019d79:	83 ec 08             	sub    esp,0x8
c0019d7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d80:	50                   	push   eax
c0019d81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d88:	e8 f3 f8 ff ff       	call   c0019680 <FAT::fixFilepath(char*)>
c0019d8d:	83 c4 10             	add    esp,0x10
c0019d90:	83 ec 08             	sub    esp,0x8
c0019d93:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019d9a:	50                   	push   eax
c0019d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d9f:	50                   	push   eax
c0019da0:	e8 e3 a9 fe ff       	call   c0004788 <f_stat>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019daf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019db6:	85 c0                	test   eax,eax
c0019db8:	75 06                	jne    c0019dc0 <FAT::exists(char const*)+0x64>
c0019dba:	b0 01                	mov    al,0x1
c0019dbc:	eb 06                	jmp    c0019dc4 <FAT::exists(char const*)+0x68>
c0019dbe:	66 90                	xchg   ax,ax
c0019dc0:	b0 00                	mov    al,0x0
c0019dc2:	66 90                	xchg   ax,ax
c0019dc4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019dca:	c3                   	ret    
c0019dcb:	90                   	nop

c0019dcc <isoReadDiscSectorHelper>:
c0019dcc:	83 ec 2c             	sub    esp,0x2c
c0019dcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019dd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019dd7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019ddc:	83 e8 41             	sub    eax,0x41
c0019ddf:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019de6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dea:	ba 00 00 00 00       	mov    edx,0x0
c0019def:	83 ec 0c             	sub    esp,0xc
c0019df2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019df6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dfa:	52                   	push   edx
c0019dfb:	50                   	push   eax
c0019dfc:	51                   	push   ecx
c0019dfd:	e8 d2 3b ff ff       	call   c000d9d4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e02:	83 c4 20             	add    esp,0x20
c0019e05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e09:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e0e:	74 0c                	je     c0019e1c <isoReadDiscSectorHelper+0x50>
c0019e10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e14:	c1 e0 0b             	shl    eax,0xb
c0019e17:	eb 0b                	jmp    c0019e24 <isoReadDiscSectorHelper+0x58>
c0019e19:	8d 76 00             	lea    esi,[esi+0x0]
c0019e1c:	b8 00 00 00 00       	mov    eax,0x0
c0019e21:	8d 76 00             	lea    esi,[esi+0x0]
c0019e24:	83 c4 2c             	add    esp,0x2c
c0019e27:	c3                   	ret    

c0019e28 <iso_kprintf>:
c0019e28:	83 ec 0c             	sub    esp,0xc
c0019e2b:	83 ec 08             	sub    esp,0x8
c0019e2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e32:	68 72 24 02 c0       	push   0xc0022472
c0019e37:	e8 09 0b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e3c:	83 c4 10             	add    esp,0x10
c0019e3f:	90                   	nop
c0019e40:	83 c4 0c             	add    esp,0xc
c0019e43:	c3                   	ret    

c0019e44 <iso_kprintfd>:
c0019e44:	83 ec 0c             	sub    esp,0xc
c0019e47:	83 ec 08             	sub    esp,0x8
c0019e4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e4e:	68 fa 0c 02 c0       	push   0xc0020cfa
c0019e53:	e8 ed 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e58:	83 c4 10             	add    esp,0x10
c0019e5b:	90                   	nop
c0019e5c:	83 c4 0c             	add    esp,0xc
c0019e5f:	c3                   	ret    

c0019e60 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e60:	b8 08 00 00 00       	mov    eax,0x8
c0019e65:	c3                   	ret    

c0019e66 <ISO9660::truncate(void*, unsigned long long)>:
c0019e66:	b8 01 00 00 00       	mov    eax,0x1
c0019e6b:	c3                   	ret    

c0019e6c <ISO9660::getName()>:
c0019e6c:	b8 28 27 02 c0       	mov    eax,0xc0022728
c0019e71:	c3                   	ret    

c0019e72 <ISO9660::closeDir(void*)>:
c0019e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e76:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e78:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e7b:	90                   	nop

c0019e7c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e7c:	b8 01 00 00 00       	mov    eax,0x1
c0019e81:	c3                   	ret    

c0019e82 <ISO9660::unlink(char const*)>:
c0019e82:	b8 01 00 00 00       	mov    eax,0x1
c0019e87:	c3                   	ret    

c0019e88 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e88:	b8 03 00 00 00       	mov    eax,0x3
c0019e8d:	c3                   	ret    

c0019e8e <ISO9660::rename(char const*, char const*)>:
c0019e8e:	b8 01 00 00 00       	mov    eax,0x1
c0019e93:	c3                   	ret    

c0019e94 <ISO9660::mkdir(char const*)>:
c0019e94:	b8 01 00 00 00       	mov    eax,0x1
c0019e99:	c3                   	ret    

c0019e9a <ISO9660::~ISO9660()>:
c0019e9a:	83 ec 0c             	sub    esp,0xc
c0019e9d:	ba 68 28 02 c0       	mov    edx,0xc0022868
c0019ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ea6:	89 10                	mov    DWORD PTR [eax],edx
c0019ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eac:	83 ec 0c             	sub    esp,0xc
c0019eaf:	50                   	push   eax
c0019eb0:	e8 f9 15 ff ff       	call   c000b4ae <Filesystem::~Filesystem()>
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	90                   	nop
c0019eb9:	83 c4 0c             	add    esp,0xc
c0019ebc:	c3                   	ret    
c0019ebd:	90                   	nop

c0019ebe <ISO9660::~ISO9660()>:
c0019ebe:	83 ec 0c             	sub    esp,0xc
c0019ec1:	83 ec 0c             	sub    esp,0xc
c0019ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ec8:	e8 cd ff ff ff       	call   c0019e9a <ISO9660::~ISO9660()>
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	83 ec 08             	sub    esp,0x8
c0019ed3:	6a 08                	push   0x8
c0019ed5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ed9:	e8 3a 09 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019ede:	83 c4 10             	add    esp,0x10
c0019ee1:	83 c4 0c             	add    esp,0xc
c0019ee4:	c3                   	ret    
c0019ee5:	90                   	nop

c0019ee6 <ISO9660::exists(char const*)>:
c0019ee6:	83 ec 18             	sub    esp,0x18
c0019ee9:	68 43 27 02 c0       	push   0xc0022743
c0019eee:	e8 0a 73 ff ff       	call   c00111fd <KePanic(char const*)>
c0019ef3:	31 c0                	xor    eax,eax
c0019ef5:	83 c4 1c             	add    esp,0x1c
c0019ef8:	c3                   	ret    
c0019ef9:	90                   	nop

c0019efa <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019efa:	56                   	push   esi
c0019efb:	53                   	push   ebx
c0019efc:	53                   	push   ebx
c0019efd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f01:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f05:	85 db                	test   ebx,ebx
c0019f07:	0f 84 ca 00 00 00    	je     c0019fd7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f0d:	85 f6                	test   esi,esi
c0019f0f:	0f 84 c2 00 00 00    	je     c0019fd7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f15:	b8 03 00 00 00       	mov    eax,0x3
c0019f1a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f1f:	0f 85 b7 00 00 00    	jne    c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f25:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f27:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f2e:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c0019f34:	74 1b                	je     c0019f51 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f36:	85 c0                	test   eax,eax
c0019f38:	74 10                	je     c0019f4a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	68 61 27 02 c0       	push   0xc0022761
c0019f42:	e8 b6 72 ff ff       	call   c00111fd <KePanic(char const*)>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f4c:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c0019f51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f54:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f5b:	85 c0                	test   eax,eax
c0019f5d:	74 09                	je     c0019f68 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f5f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f66:	74 48                	je     c0019fb0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	68 71 27 02 c0       	push   0xc0022771
c0019f70:	e8 d0 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f75:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f82:	85 c0                	test   eax,eax
c0019f84:	74 17                	je     c0019f9d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f86:	83 ec 0c             	sub    esp,0xc
c0019f89:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019f90:	68 91 27 02 c0       	push   0xc0022791
c0019f95:	e8 ab 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f9a:	83 c4 10             	add    esp,0x10
c0019f9d:	83 ec 0c             	sub    esp,0xc
c0019fa0:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019fa7:	50                   	push   eax
c0019fa8:	e8 99 ca fe ff       	call   c0006a46 <init_percd>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	83 c3 03             	add    ebx,0x3
c0019fb3:	51                   	push   ecx
c0019fb4:	51                   	push   ecx
c0019fb5:	6a 00                	push   0x0
c0019fb7:	53                   	push   ebx
c0019fb8:	e8 50 c5 fe ff       	call   c000650d <iso_open>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	89 c2                	mov    edx,eax
c0019fc2:	b8 01 00 00 00       	mov    eax,0x1
c0019fc7:	83 fa ff             	cmp    edx,0xffffffff
c0019fca:	74 10                	je     c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fcc:	83 c2 32             	add    edx,0x32
c0019fcf:	31 c0                	xor    eax,eax
c0019fd1:	01 d2                	add    edx,edx
c0019fd3:	89 16                	mov    DWORD PTR [esi],edx
c0019fd5:	eb 05                	jmp    c0019fdc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fd7:	b8 04 00 00 00       	mov    eax,0x4
c0019fdc:	5a                   	pop    edx
c0019fdd:	5b                   	pop    ebx
c0019fde:	5e                   	pop    esi
c0019fdf:	c3                   	ret    

c0019fe0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019fe0:	53                   	push   ebx
c0019fe1:	83 ec 08             	sub    esp,0x8
c0019fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fe8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019fec:	85 c0                	test   eax,eax
c0019fee:	74 2d                	je     c001a01d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019ff0:	85 db                	test   ebx,ebx
c0019ff2:	74 29                	je     c001a01d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019ff4:	b9 02 00 00 00       	mov    ecx,0x2
c0019ff9:	52                   	push   edx
c0019ffa:	99                   	cdq    
c0019ffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fff:	f7 f9                	idiv   ecx
c001a001:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a005:	83 e8 32             	sub    eax,0x32
c001a008:	50                   	push   eax
c001a009:	e8 a7 c5 fe ff       	call   c00065b5 <iso_read>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	89 03                	mov    DWORD PTR [ebx],eax
c001a013:	09 d0                	or     eax,edx
c001a015:	0f 94 c0             	sete   al
c001a018:	0f b6 c0             	movzx  eax,al
c001a01b:	eb 05                	jmp    c001a022 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a01d:	b8 04 00 00 00       	mov    eax,0x4
c001a022:	83 c4 08             	add    esp,0x8
c001a025:	5b                   	pop    ebx
c001a026:	c3                   	ret    
c001a027:	90                   	nop

c001a028 <ISO9660::seek(void*, unsigned long long)>:
c001a028:	57                   	push   edi
c001a029:	56                   	push   esi
c001a02a:	b8 04 00 00 00       	mov    eax,0x4
c001a02f:	51                   	push   ecx
c001a030:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a034:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a038:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a03c:	85 d2                	test   edx,edx
c001a03e:	74 26                	je     c001a066 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a040:	6a 00                	push   0x0
c001a042:	b9 02 00 00 00       	mov    ecx,0x2
c001a047:	57                   	push   edi
c001a048:	89 d0                	mov    eax,edx
c001a04a:	56                   	push   esi
c001a04b:	99                   	cdq    
c001a04c:	f7 f9                	idiv   ecx
c001a04e:	83 e8 32             	sub    eax,0x32
c001a051:	50                   	push   eax
c001a052:	e8 74 c6 fe ff       	call   c00066cb <iso_seek>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	31 f0                	xor    eax,esi
c001a05c:	31 fa                	xor    edx,edi
c001a05e:	09 d0                	or     eax,edx
c001a060:	0f 95 c0             	setne  al
c001a063:	0f b6 c0             	movzx  eax,al
c001a066:	5a                   	pop    edx
c001a067:	5e                   	pop    esi
c001a068:	5f                   	pop    edi
c001a069:	c3                   	ret    

c001a06a <ISO9660::tell(void*, unsigned long long*)>:
c001a06a:	53                   	push   ebx
c001a06b:	83 ec 08             	sub    esp,0x8
c001a06e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a072:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a076:	85 c0                	test   eax,eax
c001a078:	74 24                	je     c001a09e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a07a:	85 db                	test   ebx,ebx
c001a07c:	74 20                	je     c001a09e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a07e:	83 ec 0c             	sub    esp,0xc
c001a081:	b9 02 00 00 00       	mov    ecx,0x2
c001a086:	99                   	cdq    
c001a087:	f7 f9                	idiv   ecx
c001a089:	83 e8 32             	sub    eax,0x32
c001a08c:	50                   	push   eax
c001a08d:	e8 bd c6 fe ff       	call   c000674f <iso_tell>
c001a092:	83 c4 10             	add    esp,0x10
c001a095:	89 03                	mov    DWORD PTR [ebx],eax
c001a097:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a09a:	31 c0                	xor    eax,eax
c001a09c:	eb 05                	jmp    c001a0a3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a09e:	b8 04 00 00 00       	mov    eax,0x4
c001a0a3:	83 c4 08             	add    esp,0x8
c001a0a6:	5b                   	pop    ebx
c001a0a7:	c3                   	ret    

c001a0a8 <ISO9660::stat(void*, unsigned long long*)>:
c001a0a8:	53                   	push   ebx
c001a0a9:	83 ec 14             	sub    esp,0x14
c001a0ac:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a0b0:	68 b5 27 02 c0       	push   0xc00227b5
c001a0b5:	e8 8b 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0ba:	83 c4 10             	add    esp,0x10
c001a0bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0c2:	74 2c                	je     c001a0f0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0c4:	85 db                	test   ebx,ebx
c001a0c6:	74 28                	je     c001a0f0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0c8:	83 ec 0c             	sub    esp,0xc
c001a0cb:	b9 02 00 00 00       	mov    ecx,0x2
c001a0d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a0d4:	99                   	cdq    
c001a0d5:	f7 f9                	idiv   ecx
c001a0d7:	83 e8 32             	sub    eax,0x32
c001a0da:	50                   	push   eax
c001a0db:	e8 a0 c6 fe ff       	call   c0006780 <iso_total>
c001a0e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a0e7:	89 03                	mov    DWORD PTR [ebx],eax
c001a0e9:	83 c4 10             	add    esp,0x10
c001a0ec:	31 c0                	xor    eax,eax
c001a0ee:	eb 05                	jmp    c001a0f5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a0f0:	b8 04 00 00 00       	mov    eax,0x4
c001a0f5:	83 c4 08             	add    esp,0x8
c001a0f8:	5b                   	pop    ebx
c001a0f9:	c3                   	ret    

c001a0fa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a0fa:	55                   	push   ebp
c001a0fb:	57                   	push   edi
c001a0fc:	56                   	push   esi
c001a0fd:	53                   	push   ebx
c001a0fe:	83 ec 18             	sub    esp,0x18
c001a101:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a105:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a109:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a10d:	68 bd 27 02 c0       	push   0xc00227bd
c001a112:	e8 2e 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a117:	83 c4 10             	add    esp,0x10
c001a11a:	85 ff                	test   edi,edi
c001a11c:	0f 94 c0             	sete   al
c001a11f:	85 f6                	test   esi,esi
c001a121:	0f 94 c2             	sete   dl
c001a124:	09 d0                	or     eax,edx
c001a126:	a8 01                	test   al,0x1
c001a128:	0f 85 dd 00 00 00    	jne    c001a20b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a12e:	85 db                	test   ebx,ebx
c001a130:	0f 84 d5 00 00 00    	je     c001a20b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a136:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a139:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a13f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a146:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a14d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a14f:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c001a155:	74 1b                	je     c001a172 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a157:	85 c0                	test   eax,eax
c001a159:	74 10                	je     c001a16b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a15b:	83 ec 0c             	sub    esp,0xc
c001a15e:	68 61 27 02 c0       	push   0xc0022761
c001a163:	e8 95 70 ff ff       	call   c00111fd <KePanic(char const*)>
c001a168:	83 c4 10             	add    esp,0x10
c001a16b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a16d:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a172:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a175:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a17c:	85 c0                	test   eax,eax
c001a17e:	74 09                	je     c001a189 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a180:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a187:	74 51                	je     c001a1da <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a189:	83 ec 0c             	sub    esp,0xc
c001a18c:	68 c5 27 02 c0       	push   0xc00227c5
c001a191:	e8 af 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a196:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a199:	83 c4 10             	add    esp,0x10
c001a19c:	83 3c 85 dc 93 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6c24],0x0
c001a1a4:	74 21                	je     c001a1c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a1a6:	83 ec 0c             	sub    esp,0xc
c001a1a9:	68 e5 27 02 c0       	push   0xc00227e5
c001a1ae:	e8 92 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1b6:	83 c4 10             	add    esp,0x10
c001a1b9:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a1c0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1c7:	83 ec 0c             	sub    esp,0xc
c001a1ca:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a1d1:	50                   	push   eax
c001a1d2:	e8 6f c8 fe ff       	call   c0006a46 <init_percd>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	83 c3 03             	add    ebx,0x3
c001a1dd:	52                   	push   edx
c001a1de:	52                   	push   edx
c001a1df:	6a 00                	push   0x0
c001a1e1:	53                   	push   ebx
c001a1e2:	e8 26 c3 fe ff       	call   c000650d <iso_open>
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	89 c5                	mov    ebp,eax
c001a1ec:	83 f8 ff             	cmp    eax,0xffffffff
c001a1ef:	75 21                	jne    c001a212 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a1f1:	50                   	push   eax
c001a1f2:	50                   	push   eax
c001a1f3:	6a 01                	push   0x1
c001a1f5:	53                   	push   ebx
c001a1f6:	e8 12 c3 fe ff       	call   c000650d <iso_open>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	ba 02 00 00 00       	mov    edx,0x2
c001a203:	40                   	inc    eax
c001a204:	74 2b                	je     c001a231 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a206:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a209:	eb 24                	jmp    c001a22f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a20b:	ba 04 00 00 00       	mov    edx,0x4
c001a210:	eb 1f                	jmp    c001a231 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a212:	83 ec 0c             	sub    esp,0xc
c001a215:	50                   	push   eax
c001a216:	e8 65 c5 fe ff       	call   c0006780 <iso_total>
c001a21b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a222:	89 07                	mov    DWORD PTR [edi],eax
c001a224:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a227:	e8 6b c3 fe ff       	call   c0006597 <iso_close>
c001a22c:	83 c4 10             	add    esp,0x10
c001a22f:	31 d2                	xor    edx,edx
c001a231:	83 c4 0c             	add    esp,0xc
c001a234:	89 d0                	mov    eax,edx
c001a236:	5b                   	pop    ebx
c001a237:	5e                   	pop    esi
c001a238:	5f                   	pop    edi
c001a239:	5d                   	pop    ebp
c001a23a:	c3                   	ret    
c001a23b:	90                   	nop

c001a23c <ISO9660::close(void*)>:
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	b8 04 00 00 00       	mov    eax,0x4
c001a244:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a248:	85 d2                	test   edx,edx
c001a24a:	74 1b                	je     c001a267 <ISO9660::close(void*)+0x2b>
c001a24c:	83 ec 0c             	sub    esp,0xc
c001a24f:	b9 02 00 00 00       	mov    ecx,0x2
c001a254:	89 d0                	mov    eax,edx
c001a256:	99                   	cdq    
c001a257:	f7 f9                	idiv   ecx
c001a259:	83 e8 32             	sub    eax,0x32
c001a25c:	50                   	push   eax
c001a25d:	e8 35 c3 fe ff       	call   c0006597 <iso_close>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	31 c0                	xor    eax,eax
c001a267:	83 c4 0c             	add    esp,0xc
c001a26a:	c3                   	ret    
c001a26b:	90                   	nop

c001a26c <ISO9660::openDir(char const*, void**)>:
c001a26c:	56                   	push   esi
c001a26d:	53                   	push   ebx
c001a26e:	50                   	push   eax
c001a26f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a273:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a277:	85 db                	test   ebx,ebx
c001a279:	0f 84 bd 00 00 00    	je     c001a33c <ISO9660::openDir(char const*, void**)+0xd0>
c001a27f:	85 f6                	test   esi,esi
c001a281:	0f 84 b5 00 00 00    	je     c001a33c <ISO9660::openDir(char const*, void**)+0xd0>
c001a287:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a289:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a290:	38 15 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,dl
c001a296:	74 1b                	je     c001a2b3 <ISO9660::openDir(char const*, void**)+0x47>
c001a298:	85 c0                	test   eax,eax
c001a29a:	74 10                	je     c001a2ac <ISO9660::openDir(char const*, void**)+0x40>
c001a29c:	83 ec 0c             	sub    esp,0xc
c001a29f:	68 61 27 02 c0       	push   0xc0022761
c001a2a4:	e8 54 6f ff ff       	call   c00111fd <KePanic(char const*)>
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	8a 03                	mov    al,BYTE PTR [ebx]
c001a2ae:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a2b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2b6:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a2bd:	85 c0                	test   eax,eax
c001a2bf:	74 10                	je     c001a2d1 <ISO9660::openDir(char const*, void**)+0x65>
c001a2c1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2c8:	74 1a                	je     c001a2e4 <ISO9660::openDir(char const*, void**)+0x78>
c001a2ca:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2d1:	83 ec 0c             	sub    esp,0xc
c001a2d4:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a2db:	50                   	push   eax
c001a2dc:	e8 65 c7 fe ff       	call   c0006a46 <init_percd>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	83 c3 03             	add    ebx,0x3
c001a2e7:	50                   	push   eax
c001a2e8:	50                   	push   eax
c001a2e9:	6a 01                	push   0x1
c001a2eb:	53                   	push   ebx
c001a2ec:	e8 1c c2 fe ff       	call   c000650d <iso_open>
c001a2f1:	83 c4 10             	add    esp,0x10
c001a2f4:	89 c3                	mov    ebx,eax
c001a2f6:	83 f8 ff             	cmp    eax,0xffffffff
c001a2f9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a2fe:	75 1c                	jne    c001a31c <ISO9660::openDir(char const*, void**)+0xb0>
c001a300:	53                   	push   ebx
c001a301:	53                   	push   ebx
c001a302:	68 09 28 02 c0       	push   0xc0022809
c001a307:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a30d:	e8 94 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	b8 01 00 00 00       	mov    eax,0x1
c001a31a:	eb 25                	jmp    c001a341 <ISO9660::openDir(char const*, void**)+0xd5>
c001a31c:	01 db                	add    ebx,ebx
c001a31e:	51                   	push   ecx
c001a31f:	83 c3 65             	add    ebx,0x65
c001a322:	51                   	push   ecx
c001a323:	68 1c 28 02 c0       	push   0xc002281c
c001a328:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a32e:	e8 73 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a333:	89 1e                	mov    DWORD PTR [esi],ebx
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	31 c0                	xor    eax,eax
c001a33a:	eb 05                	jmp    c001a341 <ISO9660::openDir(char const*, void**)+0xd5>
c001a33c:	b8 04 00 00 00       	mov    eax,0x4
c001a341:	5a                   	pop    edx
c001a342:	5b                   	pop    ebx
c001a343:	5e                   	pop    esi
c001a344:	c3                   	ret    
c001a345:	90                   	nop

c001a346 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a346:	55                   	push   ebp
c001a347:	57                   	push   edi
c001a348:	56                   	push   esi
c001a349:	53                   	push   ebx
c001a34a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a350:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a357:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a35e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a366:	0f 84 e7 00 00 00    	je     c001a453 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a36c:	85 db                	test   ebx,ebx
c001a36e:	0f 84 df 00 00 00    	je     c001a453 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a374:	83 ec 0c             	sub    esp,0xc
c001a377:	68 2f 28 02 c0       	push   0xc002282f
c001a37c:	e8 c4 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a381:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a388:	b9 02 00 00 00       	mov    ecx,0x2
c001a38d:	99                   	cdq    
c001a38e:	f7 f9                	idiv   ecx
c001a390:	83 e8 32             	sub    eax,0x32
c001a393:	89 04 24             	mov    DWORD PTR [esp],eax
c001a396:	e8 37 c4 fe ff       	call   c00067d2 <iso_readdir>
c001a39b:	83 c4 10             	add    esp,0x10
c001a39e:	89 c6                	mov    esi,eax
c001a3a0:	85 c0                	test   eax,eax
c001a3a2:	75 37                	jne    c001a3db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a3a4:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a3a9:	56                   	push   esi
c001a3aa:	56                   	push   esi
c001a3ab:	68 3a 28 02 c0       	push   0xc002283a
c001a3b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3b6:	e8 eb e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a3bb:	83 c4 0c             	add    esp,0xc
c001a3be:	68 10 01 00 00       	push   0x110
c001a3c3:	6a 00                	push   0x0
c001a3c5:	57                   	push   edi
c001a3c6:	e8 25 61 fe ff       	call   c00004f0 <memset>
c001a3cb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a3d1:	83 c4 10             	add    esp,0x10
c001a3d4:	b8 01 00 00 00       	mov    eax,0x1
c001a3d9:	eb 7d                	jmp    c001a458 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a3db:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a3e1:	8d 68 08             	lea    ebp,[eax+0x8]
c001a3e4:	83 ec 0c             	sub    esp,0xc
c001a3e7:	55                   	push   ebp
c001a3e8:	e8 83 61 fe ff       	call   c0000570 <strlen>
c001a3ed:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a3f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a400:	75 0a                	jne    c001a40c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a402:	b8 02 00 00 00       	mov    eax,0x2
c001a407:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a40a:	74 05                	je     c001a411 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a40c:	b8 01 00 00 00       	mov    eax,0x1
c001a411:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a415:	50                   	push   eax
c001a416:	50                   	push   eax
c001a417:	55                   	push   ebp
c001a418:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a41c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a420:	50                   	push   eax
c001a421:	e8 1a 62 fe ff       	call   c0000640 <strcpy>
c001a426:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a42d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a42f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a435:	5a                   	pop    edx
c001a436:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a43b:	59                   	pop    ecx
c001a43c:	68 4d 28 02 c0       	push   0xc002284d
c001a441:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a447:	e8 5a e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	31 c0                	xor    eax,eax
c001a451:	eb 05                	jmp    c001a458 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a453:	b8 04 00 00 00       	mov    eax,0x4
c001a458:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a45e:	5b                   	pop    ebx
c001a45f:	5e                   	pop    esi
c001a460:	5f                   	pop    edi
c001a461:	5d                   	pop    ebp
c001a462:	c3                   	ret    

c001a463 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a463:	57                   	push   edi
c001a464:	56                   	push   esi
c001a465:	53                   	push   ebx
c001a466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a46a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a46e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a472:	39 35 24 a6 02 c0    	cmp    DWORD PTR ds:0xc002a624,esi
c001a478:	0f be cb             	movsx  ecx,bl
c001a47b:	75 0b                	jne    c001a488 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a47d:	0f be 05 80 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023680
c001a484:	39 c8                	cmp    eax,ecx
c001a486:	74 47                	je     c001a4cf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	31 d2                	xor    edx,edx
c001a48d:	68 40 a6 02 c0       	push   0xc002a640
c001a492:	6a 01                	push   0x1
c001a494:	52                   	push   edx
c001a495:	56                   	push   esi
c001a496:	ff 34 8d dc 93 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6c24]
c001a49d:	e8 32 35 ff ff       	call   c000d9d4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4a2:	83 c4 20             	add    esp,0x20
c001a4a5:	85 c0                	test   eax,eax
c001a4a7:	75 0e                	jne    c001a4b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a4a9:	89 35 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,esi
c001a4af:	88 1d 80 36 02 c0    	mov    BYTE PTR ds:0xc0023680,bl
c001a4b5:	eb 18                	jmp    c001a4cf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4b7:	50                   	push   eax
c001a4b8:	68 00 08 00 00       	push   0x800
c001a4bd:	6a 00                	push   0x0
c001a4bf:	57                   	push   edi
c001a4c0:	e8 2b 60 fe ff       	call   c00004f0 <memset>
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	b8 01 00 00 00       	mov    eax,0x1
c001a4cd:	eb 0e                	jmp    c001a4dd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a4cf:	be 40 a6 02 c0       	mov    esi,0xc002a640
c001a4d4:	b9 00 08 00 00       	mov    ecx,0x800
c001a4d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4db:	31 c0                	xor    eax,eax
c001a4dd:	5b                   	pop    ebx
c001a4de:	5e                   	pop    esi
c001a4df:	5f                   	pop    edi
c001a4e0:	c3                   	ret    
c001a4e1:	90                   	nop

c001a4e2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4e2:	53                   	push   ebx
c001a4e3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a4e9:	c7 05 24 a6 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a624,0xdeadbeef
c001a4f3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a4fa:	8d 58 41             	lea    ebx,[eax+0x41]
c001a4fd:	0f be db             	movsx  ebx,bl
c001a500:	53                   	push   ebx
c001a501:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a505:	50                   	push   eax
c001a506:	6a 10                	push   0x10
c001a508:	e8 56 ff ff ff       	call   c001a463 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a50d:	83 c4 10             	add    esp,0x10
c001a510:	31 d2                	xor    edx,edx
c001a512:	85 c0                	test   eax,eax
c001a514:	75 33                	jne    c001a549 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a516:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a51b:	75 2c                	jne    c001a549 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a51d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a522:	75 25                	jne    c001a549 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a524:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a529:	75 1e                	jne    c001a549 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a52b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a530:	75 17                	jne    c001a549 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a532:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a537:	75 10                	jne    c001a549 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a539:	83 ec 0c             	sub    esp,0xc
c001a53c:	53                   	push   ebx
c001a53d:	e8 04 c5 fe ff       	call   c0006a46 <init_percd>
c001a542:	83 c4 10             	add    esp,0x10
c001a545:	40                   	inc    eax
c001a546:	0f 95 c2             	setne  dl
c001a549:	88 d0                	mov    al,dl
c001a54b:	81 c4 08 08 00 00    	add    esp,0x808
c001a551:	5b                   	pop    ebx
c001a552:	c3                   	ret    
c001a553:	90                   	nop

c001a554 <ISO9660::ISO9660()>:
c001a554:	83 ec 0c             	sub    esp,0xc
c001a557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55b:	83 ec 0c             	sub    esp,0xc
c001a55e:	50                   	push   eax
c001a55f:	e8 26 0f ff ff       	call   c000b48a <Filesystem::Filesystem()>
c001a564:	83 c4 10             	add    esp,0x10
c001a567:	ba 68 28 02 c0       	mov    edx,0xc0022868
c001a56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a570:	89 10                	mov    DWORD PTR [eax],edx
c001a572:	e8 e1 c5 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a577:	90                   	nop
c001a578:	83 c4 0c             	add    esp,0xc
c001a57b:	c3                   	ret    

c001a57c <SoundCard::beginPlayback()>:
c001a57c:	c7 44 24 04 cc 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228cc
c001a584:	e9 74 6c ff ff       	jmp    c00111fd <KePanic(char const*)>
c001a589:	90                   	nop

c001a58a <SoundCard::stopPlayback()>:
c001a58a:	c7 44 24 04 cc 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228cc
c001a592:	e9 66 6c ff ff       	jmp    c00111fd <KePanic(char const*)>
c001a597:	90                   	nop

c001a598 <SoundCard::SoundCard(char const*)>:
c001a598:	83 ec 1c             	sub    esp,0x1c
c001a59b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a59f:	83 ec 08             	sub    esp,0x8
c001a5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5a6:	50                   	push   eax
c001a5a7:	e8 de 21 ff ff       	call   c000c78a <Device::Device(char const*)>
c001a5ac:	83 c4 10             	add    esp,0x10
c001a5af:	ba 18 29 02 c0       	mov    edx,0xc0022918
c001a5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5b8:	89 10                	mov    DWORD PTR [eax],edx
c001a5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5be:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5c9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a5d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a5fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a605:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a60a:	7f 1a                	jg     c001a626 <SoundCard::SoundCard(char const*)+0x8e>
c001a60c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a614:	83 c2 54             	add    edx,0x54
c001a617:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a61f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a624:	eb df                	jmp    c001a605 <SoundCard::SoundCard(char const*)+0x6d>
c001a626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a62a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a631:	90                   	nop
c001a632:	83 c4 1c             	add    esp,0x1c
c001a635:	c3                   	ret    

c001a636 <SoundCard::~SoundCard()>:
c001a636:	83 ec 0c             	sub    esp,0xc
c001a639:	ba 18 29 02 c0       	mov    edx,0xc0022918
c001a63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a642:	89 10                	mov    DWORD PTR [eax],edx
c001a644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	50                   	push   eax
c001a64c:	e8 a3 1e ff ff       	call   c000c4f4 <Device::~Device()>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	90                   	nop
c001a655:	83 c4 0c             	add    esp,0xc
c001a658:	c3                   	ret    
c001a659:	90                   	nop

c001a65a <SoundCard::~SoundCard()>:
c001a65a:	83 ec 0c             	sub    esp,0xc
c001a65d:	83 ec 0c             	sub    esp,0xc
c001a660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a664:	e8 cd ff ff ff       	call   c001a636 <SoundCard::~SoundCard()>
c001a669:	83 c4 10             	add    esp,0x10
c001a66c:	83 ec 08             	sub    esp,0x8
c001a66f:	68 e8 01 00 00       	push   0x1e8
c001a674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a678:	e8 9b 01 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	83 c4 0c             	add    esp,0xc
c001a683:	c3                   	ret    

c001a684 <SoundCard::configureRates(int, int, int)>:
c001a684:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a688:	31 c0                	xor    eax,eax
c001a68a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a691:	75 20                	jne    c001a6b3 <SoundCard::configureRates(int, int, int)+0x2f>
c001a693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a697:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6a1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ab:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a6b1:	b0 01                	mov    al,0x1
c001a6b3:	c3                   	ret    

c001a6b4 <SoundCard::getSamples16(int, short*)>:
c001a6b4:	55                   	push   ebp
c001a6b5:	57                   	push   edi
c001a6b6:	31 ff                	xor    edi,edi
c001a6b8:	56                   	push   esi
c001a6b9:	53                   	push   ebx
c001a6ba:	31 db                	xor    ebx,ebx
c001a6bc:	83 ec 10             	sub    esp,0x10
c001a6bf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a6c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6c7:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6ca:	50                   	push   eax
c001a6cb:	6a 00                	push   0x0
c001a6cd:	55                   	push   ebp
c001a6ce:	e8 1d 5e fe ff       	call   c00004f0 <memset>
c001a6d3:	83 c4 10             	add    esp,0x10
c001a6d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6da:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a6e1:	85 c0                	test   eax,eax
c001a6e3:	74 1b                	je     c001a700 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6e5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6e9:	75 15                	jne    c001a700 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6ef:	55                   	push   ebp
c001a6f0:	56                   	push   esi
c001a6f1:	50                   	push   eax
c001a6f2:	e8 f1 02 00 00       	call   c001a9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a6f7:	83 c4 10             	add    esp,0x10
c001a6fa:	39 c7                	cmp    edi,eax
c001a6fc:	7d 02                	jge    c001a700 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6fe:	89 c7                	mov    edi,eax
c001a700:	43                   	inc    ebx
c001a701:	83 fb 20             	cmp    ebx,0x20
c001a704:	75 d0                	jne    c001a6d6 <SoundCard::getSamples16(int, short*)+0x22>
c001a706:	83 c4 0c             	add    esp,0xc
c001a709:	89 f8                	mov    eax,edi
c001a70b:	5b                   	pop    ebx
c001a70c:	5e                   	pop    esi
c001a70d:	5f                   	pop    edi
c001a70e:	5d                   	pop    ebp
c001a70f:	c3                   	ret    

c001a710 <SoundCard::getSamples32(int, int*)>:
c001a710:	55                   	push   ebp
c001a711:	57                   	push   edi
c001a712:	31 ff                	xor    edi,edi
c001a714:	56                   	push   esi
c001a715:	31 f6                	xor    esi,esi
c001a717:	53                   	push   ebx
c001a718:	83 ec 10             	sub    esp,0x10
c001a71b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a71f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a723:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a727:	c1 e0 02             	shl    eax,0x2
c001a72a:	50                   	push   eax
c001a72b:	6a 00                	push   0x0
c001a72d:	55                   	push   ebp
c001a72e:	e8 bd 5d fe ff       	call   c00004f0 <memset>
c001a733:	83 c4 10             	add    esp,0x10
c001a736:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a73d:	85 c0                	test   eax,eax
c001a73f:	74 1b                	je     c001a75c <SoundCard::getSamples32(int, int*)+0x4c>
c001a741:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a745:	75 15                	jne    c001a75c <SoundCard::getSamples32(int, int*)+0x4c>
c001a747:	53                   	push   ebx
c001a748:	55                   	push   ebp
c001a749:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a74d:	50                   	push   eax
c001a74e:	e8 61 03 00 00       	call   c001aab4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a753:	83 c4 10             	add    esp,0x10
c001a756:	39 c6                	cmp    esi,eax
c001a758:	7d 02                	jge    c001a75c <SoundCard::getSamples32(int, int*)+0x4c>
c001a75a:	89 c6                	mov    esi,eax
c001a75c:	47                   	inc    edi
c001a75d:	83 ff 20             	cmp    edi,0x20
c001a760:	75 d4                	jne    c001a736 <SoundCard::getSamples32(int, int*)+0x26>
c001a762:	85 f6                	test   esi,esi
c001a764:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a76b:	75 0f                	jne    c001a77c <SoundCard::getSamples32(int, int*)+0x6c>
c001a76d:	85 c0                	test   eax,eax
c001a76f:	74 1b                	je     c001a78c <SoundCard::getSamples32(int, int*)+0x7c>
c001a771:	83 ec 0c             	sub    esp,0xc
c001a774:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a776:	53                   	push   ebx
c001a777:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a77a:	eb 0d                	jmp    c001a789 <SoundCard::getSamples32(int, int*)+0x79>
c001a77c:	85 c0                	test   eax,eax
c001a77e:	75 0c                	jne    c001a78c <SoundCard::getSamples32(int, int*)+0x7c>
c001a780:	83 ec 0c             	sub    esp,0xc
c001a783:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a785:	53                   	push   ebx
c001a786:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a789:	83 c4 10             	add    esp,0x10
c001a78c:	83 c4 0c             	add    esp,0xc
c001a78f:	89 f0                	mov    eax,esi
c001a791:	5b                   	pop    ebx
c001a792:	5e                   	pop    esi
c001a793:	5f                   	pop    edi
c001a794:	5d                   	pop    ebp
c001a795:	c3                   	ret    

c001a796 <SoundCard::addChannel(SoundPort*)>:
c001a796:	83 ec 0c             	sub    esp,0xc
c001a799:	31 c0                	xor    eax,eax
c001a79b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a79f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a7a7:	74 1b                	je     c001a7c4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a7a9:	40                   	inc    eax
c001a7aa:	83 f8 20             	cmp    eax,0x20
c001a7ad:	75 f0                	jne    c001a79f <SoundCard::addChannel(SoundPort*)+0x9>
c001a7af:	83 ec 0c             	sub    esp,0xc
c001a7b2:	68 f1 28 02 c0       	push   0xc00228f1
c001a7b7:	e8 41 6a ff ff       	call   c00111fd <KePanic(char const*)>
c001a7bc:	83 c4 10             	add    esp,0x10
c001a7bf:	83 c8 ff             	or     eax,0xffffffff
c001a7c2:	eb 0b                	jmp    c001a7cf <SoundCard::addChannel(SoundPort*)+0x39>
c001a7c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7c8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a7cf:	83 c4 0c             	add    esp,0xc
c001a7d2:	c3                   	ret    
c001a7d3:	90                   	nop

c001a7d4 <SoundCard::removeChannel(int)>:
c001a7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7dc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a7e7:	c3                   	ret    

c001a7e8 <SoundPort::SoundPort(int, int, int, int)>:
c001a7e8:	83 ec 0c             	sub    esp,0xc
c001a7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ef:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7fa:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a802:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a806:	89 10                	mov    DWORD PTR [eax],edx
c001a808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a80c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a810:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a817:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a81b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a81e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a823:	75 13                	jne    c001a838 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a829:	8b 00                	mov    eax,DWORD PTR [eax]
c001a82b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a830:	01 c0                	add    eax,eax
c001a832:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a836:	66 90                	xchg   ax,ax
c001a838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a83c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a840:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a847:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a852:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a855:	c1 e0 02             	shl    eax,0x2
c001a858:	83 ec 0c             	sub    esp,0xc
c001a85b:	50                   	push   eax
c001a85c:	e8 55 d2 fe ff       	call   c0007ab6 <malloc>
c001a861:	83 c4 10             	add    esp,0x10
c001a864:	89 c2                	mov    edx,eax
c001a866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a86d:	90                   	nop
c001a86e:	83 c4 0c             	add    esp,0xc
c001a871:	c3                   	ret    
c001a872:	66 90                	xchg   ax,ax

c001a874 <SoundPort::~SoundPort()>:
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a87e:	85 c0                	test   eax,eax
c001a880:	74 1e                	je     c001a8a0 <SoundPort::~SoundPort()+0x2c>
c001a882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a886:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a889:	83 ec 0c             	sub    esp,0xc
c001a88c:	50                   	push   eax
c001a88d:	e8 34 d2 fe ff       	call   c0007ac6 <free>
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a899:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8a0:	90                   	nop
c001a8a1:	83 c4 0c             	add    esp,0xc
c001a8a4:	c3                   	ret    
c001a8a5:	90                   	nop
c001a8a6:	66 90                	xchg   ax,ax

c001a8a8 <SoundPort::unpause()>:
c001a8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ac:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a8b0:	c3                   	ret    
c001a8b1:	90                   	nop
c001a8b2:	66 90                	xchg   ax,ax

c001a8b4 <SoundPort::pause()>:
c001a8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8bc:	c3                   	ret    
c001a8bd:	90                   	nop
c001a8be:	66 90                	xchg   ax,ax

c001a8c0 <SoundPort::getBufferUsed()>:
c001a8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8c7:	c3                   	ret    

c001a8c8 <SoundPort::getBufferSize()>:
c001a8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8cf:	c3                   	ret    

c001a8d0 <SoundPort::buffer16(short*, int)>:
c001a8d0:	55                   	push   ebp
c001a8d1:	57                   	push   edi
c001a8d2:	56                   	push   esi
c001a8d3:	53                   	push   ebx
c001a8d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8d8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a8dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a8df:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a8e2:	74 68                	je     c001a94c <SoundPort::buffer16(short*, int)+0x7c>
c001a8e4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8e8:	85 c9                	test   ecx,ecx
c001a8ea:	7e 60                	jle    c001a94c <SoundPort::buffer16(short*, int)+0x7c>
c001a8ec:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a8f0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a8f3:	c1 e1 0f             	shl    ecx,0xf
c001a8f6:	8d 70 01             	lea    esi,[eax+0x1]
c001a8f9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a8fc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a8ff:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a902:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a905:	74 4d                	je     c001a954 <SoundPort::buffer16(short*, int)+0x84>
c001a907:	31 f6                	xor    esi,esi
c001a909:	eb 21                	jmp    c001a92c <SoundPort::buffer16(short*, int)+0x5c>
c001a90b:	90                   	nop
c001a90c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a911:	8d 79 01             	lea    edi,[ecx+0x1]
c001a914:	c1 e3 0f             	shl    ebx,0xf
c001a917:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a91a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a91d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a920:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a923:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a926:	74 1c                	je     c001a944 <SoundPort::buffer16(short*, int)+0x74>
c001a928:	89 c6                	mov    esi,eax
c001a92a:	66 90                	xchg   ax,ax
c001a92c:	8d 46 01             	lea    eax,[esi+0x1]
c001a92f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a933:	75 d7                	jne    c001a90c <SoundPort::buffer16(short*, int)+0x3c>
c001a935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a939:	8d 76 00             	lea    esi,[esi+0x0]
c001a93c:	5b                   	pop    ebx
c001a93d:	5e                   	pop    esi
c001a93e:	5f                   	pop    edi
c001a93f:	5d                   	pop    ebp
c001a940:	c3                   	ret    
c001a941:	8d 76 00             	lea    esi,[esi+0x0]
c001a944:	5b                   	pop    ebx
c001a945:	8d 46 02             	lea    eax,[esi+0x2]
c001a948:	5e                   	pop    esi
c001a949:	5f                   	pop    edi
c001a94a:	5d                   	pop    ebp
c001a94b:	c3                   	ret    
c001a94c:	5b                   	pop    ebx
c001a94d:	31 c0                	xor    eax,eax
c001a94f:	5e                   	pop    esi
c001a950:	5f                   	pop    edi
c001a951:	5d                   	pop    ebp
c001a952:	c3                   	ret    
c001a953:	90                   	nop
c001a954:	b8 01 00 00 00       	mov    eax,0x1
c001a959:	eb e1                	jmp    c001a93c <SoundPort::buffer16(short*, int)+0x6c>
c001a95b:	90                   	nop

c001a95c <SoundPort::buffer32(int*, int)>:
c001a95c:	55                   	push   ebp
c001a95d:	57                   	push   edi
c001a95e:	56                   	push   esi
c001a95f:	53                   	push   ebx
c001a960:	83 ec 04             	sub    esp,0x4
c001a963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a96b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a96e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a972:	89 04 24             	mov    DWORD PTR [esp],eax
c001a975:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a978:	74 5a                	je     c001a9d4 <SoundPort::buffer32(int*, int)+0x78>
c001a97a:	85 c0                	test   eax,eax
c001a97c:	7e 56                	jle    c001a9d4 <SoundPort::buffer32(int*, int)+0x78>
c001a97e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a981:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a984:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a987:	8b 37                	mov    esi,DWORD PTR [edi]
c001a989:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a98c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a98f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a992:	74 4c                	je     c001a9e0 <SoundPort::buffer32(int*, int)+0x84>
c001a994:	31 f6                	xor    esi,esi
c001a996:	eb 1c                	jmp    c001a9b4 <SoundPort::buffer32(int*, int)+0x58>
c001a998:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a99b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a99e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a9a1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a9a4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a9a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9ae:	74 18                	je     c001a9c8 <SoundPort::buffer32(int*, int)+0x6c>
c001a9b0:	89 de                	mov    esi,ebx
c001a9b2:	66 90                	xchg   ax,ax
c001a9b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a9b7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a9ba:	75 dc                	jne    c001a998 <SoundPort::buffer32(int*, int)+0x3c>
c001a9bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9bf:	90                   	nop
c001a9c0:	83 c4 04             	add    esp,0x4
c001a9c3:	5b                   	pop    ebx
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	5d                   	pop    ebp
c001a9c7:	c3                   	ret    
c001a9c8:	83 c4 04             	add    esp,0x4
c001a9cb:	8d 46 02             	lea    eax,[esi+0x2]
c001a9ce:	5b                   	pop    ebx
c001a9cf:	5e                   	pop    esi
c001a9d0:	5f                   	pop    edi
c001a9d1:	5d                   	pop    ebp
c001a9d2:	c3                   	ret    
c001a9d3:	90                   	nop
c001a9d4:	83 c4 04             	add    esp,0x4
c001a9d7:	31 c0                	xor    eax,eax
c001a9d9:	5b                   	pop    ebx
c001a9da:	5e                   	pop    esi
c001a9db:	5f                   	pop    edi
c001a9dc:	5d                   	pop    ebp
c001a9dd:	c3                   	ret    
c001a9de:	66 90                	xchg   ax,ax
c001a9e0:	b8 01 00 00 00       	mov    eax,0x1
c001a9e5:	eb d9                	jmp    c001a9c0 <SoundPort::buffer32(int*, int)+0x64>
c001a9e7:	90                   	nop

c001a9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a9e8:	57                   	push   edi
c001a9e9:	56                   	push   esi
c001a9ea:	53                   	push   ebx
c001a9eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a9f3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001a9f9:	39 03                	cmp    DWORD PTR [ebx],eax
c001a9fb:	74 13                	je     c001aa10 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001a9fd:	83 ec 0c             	sub    esp,0xc
c001aa00:	68 44 29 02 c0       	push   0xc0022944
c001aa05:	e8 f3 67 ff ff       	call   c00111fd <KePanic(char const*)>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa10:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001aa16:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa19:	74 11                	je     c001aa2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001aa1b:	83 ec 0c             	sub    esp,0xc
c001aa1e:	68 83 29 02 c0       	push   0xc0022983
c001aa23:	e8 d5 67 ff ff       	call   c00111fd <KePanic(char const*)>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	90                   	nop
c001aa2c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aa32:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa35:	74 11                	je     c001aa48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001aa37:	83 ec 0c             	sub    esp,0xc
c001aa3a:	68 83 29 02 c0       	push   0xc0022983
c001aa3f:	e8 b9 67 ff ff       	call   c00111fd <KePanic(char const*)>
c001aa44:	83 c4 10             	add    esp,0x10
c001aa47:	90                   	nop
c001aa48:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001aa4b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001aa4f:	7e 07                	jle    c001aa58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001aa51:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa55:	8d 76 00             	lea    esi,[esi+0x0]
c001aa58:	85 f6                	test   esi,esi
c001aa5a:	7e 2c                	jle    c001aa88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aa5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa60:	8d 3c 36             	lea    edi,[esi+esi*1]
c001aa63:	31 c9                	xor    ecx,ecx
c001aa65:	01 d7                	add    edi,edx
c001aa67:	90                   	nop
c001aa68:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aa6b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aa6e:	85 c0                	test   eax,eax
c001aa70:	79 06                	jns    c001aa78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aa72:	05 ff 7f 00 00       	add    eax,0x7fff
c001aa77:	90                   	nop
c001aa78:	c1 f8 0f             	sar    eax,0xf
c001aa7b:	83 c1 04             	add    ecx,0x4
c001aa7e:	66 01 02             	add    WORD PTR [edx],ax
c001aa81:	83 c2 02             	add    edx,0x2
c001aa84:	39 d7                	cmp    edi,edx
c001aa86:	75 e0                	jne    c001aa68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001aa88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa8b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa8e:	83 ec 04             	sub    esp,0x4
c001aa91:	29 f0                	sub    eax,esi
c001aa93:	c1 e0 02             	shl    eax,0x2
c001aa96:	50                   	push   eax
c001aa97:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aa9a:	50                   	push   eax
c001aa9b:	52                   	push   edx
c001aa9c:	e8 2f 59 fe ff       	call   c00003d0 <memmove>
c001aaa1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	29 f0                	sub    eax,esi
c001aaa9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aaac:	89 f0                	mov    eax,esi
c001aaae:	5b                   	pop    ebx
c001aaaf:	5e                   	pop    esi
c001aab0:	5f                   	pop    edi
c001aab1:	c3                   	ret    
c001aab2:	66 90                	xchg   ax,ax

c001aab4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aab4:	57                   	push   edi
c001aab5:	56                   	push   esi
c001aab6:	53                   	push   ebx
c001aab7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aabb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aabf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aac3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001aac9:	39 06                	cmp    DWORD PTR [esi],eax
c001aacb:	74 13                	je     c001aae0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001aacd:	83 ec 0c             	sub    esp,0xc
c001aad0:	68 64 29 02 c0       	push   0xc0022964
c001aad5:	e8 23 67 ff ff       	call   c00111fd <KePanic(char const*)>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	8d 76 00             	lea    esi,[esi+0x0]
c001aae0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001aae6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001aae9:	74 11                	je     c001aafc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001aaeb:	83 ec 0c             	sub    esp,0xc
c001aaee:	68 9f 29 02 c0       	push   0xc002299f
c001aaf3:	e8 05 67 ff ff       	call   c00111fd <KePanic(char const*)>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	90                   	nop
c001aafc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ab02:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ab05:	74 11                	je     c001ab18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ab07:	83 ec 0c             	sub    esp,0xc
c001ab0a:	68 9f 29 02 c0       	push   0xc002299f
c001ab0f:	e8 e9 66 ff ff       	call   c00111fd <KePanic(char const*)>
c001ab14:	83 c4 10             	add    esp,0x10
c001ab17:	90                   	nop
c001ab18:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ab1b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ab1f:	7e 07                	jle    c001ab28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ab21:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab25:	8d 76 00             	lea    esi,[esi+0x0]
c001ab28:	85 ff                	test   edi,edi
c001ab2a:	7e 1c                	jle    c001ab48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ab2c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab33:	31 c0                	xor    eax,eax
c001ab35:	8d 76 00             	lea    esi,[esi+0x0]
c001ab38:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab3b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab3e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ab41:	83 c0 04             	add    eax,0x4
c001ab44:	39 c1                	cmp    ecx,eax
c001ab46:	75 f0                	jne    c001ab38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ab48:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab4b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ab4e:	83 ec 04             	sub    esp,0x4
c001ab51:	29 f8                	sub    eax,edi
c001ab53:	c1 e0 02             	shl    eax,0x2
c001ab56:	50                   	push   eax
c001ab57:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab5a:	50                   	push   eax
c001ab5b:	52                   	push   edx
c001ab5c:	e8 6f 58 fe ff       	call   c00003d0 <memmove>
c001ab61:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ab64:	83 c4 10             	add    esp,0x10
c001ab67:	29 f8                	sub    eax,edi
c001ab69:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ab6c:	89 f8                	mov    eax,edi
c001ab6e:	5b                   	pop    ebx
c001ab6f:	5e                   	pop    esi
c001ab70:	5f                   	pop    edi
c001ab71:	c3                   	ret    

c001ab72 <PCI::open(int, int, void*)>:
c001ab72:	83 ec 18             	sub    esp,0x18
c001ab75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab7d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab83:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab85:	50                   	push   eax
c001ab86:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab89:	31 c0                	xor    eax,eax
c001ab8b:	83 c4 1c             	add    esp,0x1c
c001ab8e:	c3                   	ret    
c001ab8f:	90                   	nop

c001ab90 <PCI::close(int, int, void*)>:
c001ab90:	31 c0                	xor    eax,eax
c001ab92:	c3                   	ret    
c001ab93:	90                   	nop

c001ab94 <PCI::PCI()>:
c001ab94:	83 ec 0c             	sub    esp,0xc
c001ab97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9b:	83 ec 08             	sub    esp,0x8
c001ab9e:	68 bb 29 02 c0       	push   0xc00229bb
c001aba3:	50                   	push   eax
c001aba4:	e8 ab 13 ff ff       	call   c000bf54 <Bus::Bus(char const*)>
c001aba9:	83 c4 10             	add    esp,0x10
c001abac:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c001abb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb5:	89 10                	mov    DWORD PTR [eax],edx
c001abb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbb:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001abc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc9:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c001abce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abd8:	0f b6 d0             	movzx  edx,al
c001abdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abdf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001abe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abf0:	0f b6 d0             	movzx  edx,al
c001abf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001abfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac06:	8d 50 01             	lea    edx,[eax+0x1]
c001ac09:	88 d1                	mov    cl,dl
c001ac0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac0f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac15:	0f b6 d0             	movzx  edx,al
c001ac18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac20:	83 c9 c0             	or     ecx,0xffffffc0
c001ac23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac27:	90                   	nop
c001ac28:	83 c4 0c             	add    esp,0xc
c001ac2b:	c3                   	ret    

c001ac2c <PCI::readBAR8(unsigned int, int)>:
c001ac2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac34:	f6 c2 01             	test   dl,0x1
c001ac37:	74 07                	je     c001ac40 <PCI::readBAR8(unsigned int, int)+0x14>
c001ac39:	83 e2 fc             	and    edx,0xfffffffc
c001ac3c:	01 c2                	add    edx,eax
c001ac3e:	ec                   	in     al,dx
c001ac3f:	c3                   	ret    
c001ac40:	83 e2 f0             	and    edx,0xfffffff0
c001ac43:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac46:	c3                   	ret    
c001ac47:	90                   	nop

c001ac48 <PCI::readBAR16(unsigned int, int)>:
c001ac48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac50:	f6 c2 01             	test   dl,0x1
c001ac53:	74 08                	je     c001ac5d <PCI::readBAR16(unsigned int, int)+0x15>
c001ac55:	83 e2 fc             	and    edx,0xfffffffc
c001ac58:	01 c2                	add    edx,eax
c001ac5a:	66 ed                	in     ax,dx
c001ac5c:	c3                   	ret    
c001ac5d:	83 e2 f0             	and    edx,0xfffffff0
c001ac60:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac64:	c3                   	ret    
c001ac65:	90                   	nop

c001ac66 <PCI::readBAR32(unsigned int, int)>:
c001ac66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac6e:	f6 c2 01             	test   dl,0x1
c001ac71:	74 07                	je     c001ac7a <PCI::readBAR32(unsigned int, int)+0x14>
c001ac73:	83 e2 fc             	and    edx,0xfffffffc
c001ac76:	01 c2                	add    edx,eax
c001ac78:	ed                   	in     eax,dx
c001ac79:	c3                   	ret    
c001ac7a:	83 e2 f0             	and    edx,0xfffffff0
c001ac7d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac80:	c3                   	ret    
c001ac81:	90                   	nop

c001ac82 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac8a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac8e:	f6 c2 01             	test   dl,0x1
c001ac91:	74 07                	je     c001ac9a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ac93:	83 e2 fc             	and    edx,0xfffffffc
c001ac96:	01 ca                	add    edx,ecx
c001ac98:	ee                   	out    dx,al
c001ac99:	c3                   	ret    
c001ac9a:	83 e2 f0             	and    edx,0xfffffff0
c001ac9d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001aca0:	c3                   	ret    
c001aca1:	90                   	nop

c001aca2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001aca2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acae:	f6 c2 01             	test   dl,0x1
c001acb1:	74 08                	je     c001acbb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001acb3:	83 e2 fc             	and    edx,0xfffffffc
c001acb6:	01 ca                	add    edx,ecx
c001acb8:	66 ef                	out    dx,ax
c001acba:	c3                   	ret    
c001acbb:	83 e2 f0             	and    edx,0xfffffff0
c001acbe:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001acc2:	c3                   	ret    
c001acc3:	90                   	nop

c001acc4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001acc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acd0:	f6 c2 01             	test   dl,0x1
c001acd3:	74 07                	je     c001acdc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001acd5:	83 e2 fc             	and    edx,0xfffffffc
c001acd8:	01 ca                	add    edx,ecx
c001acda:	ef                   	out    dx,eax
c001acdb:	c3                   	ret    
c001acdc:	83 e2 f0             	and    edx,0xfffffff0
c001acdf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ace2:	c3                   	ret    
c001ace3:	90                   	nop

c001ace4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ace4:	55                   	push   ebp
c001ace5:	57                   	push   edi
c001ace6:	56                   	push   esi
c001ace7:	53                   	push   ebx
c001ace8:	83 ec 0c             	sub    esp,0xc
c001aceb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001acf0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001acf4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001acf8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acfc:	83 fe 07             	cmp    esi,0x7
c001acff:	76 10                	jbe    c001ad11 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad01:	83 ec 0c             	sub    esp,0xc
c001ad04:	68 c3 29 02 c0       	push   0xc00229c3
c001ad09:	e8 ef 64 ff ff       	call   c00111fd <KePanic(char const*)>
c001ad0e:	83 c4 10             	add    esp,0x10
c001ad11:	0f b6 db             	movzx  ebx,bl
c001ad14:	83 fb 0f             	cmp    ebx,0xf
c001ad17:	76 10                	jbe    c001ad29 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad19:	83 ec 0c             	sub    esp,0xc
c001ad1c:	68 f3 29 02 c0       	push   0xc00229f3
c001ad21:	e8 d7 64 ff ff       	call   c00111fd <KePanic(char const*)>
c001ad26:	83 c4 10             	add    esp,0x10
c001ad29:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad2c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad31:	83 c8 f0             	or     eax,0xfffffff0
c001ad34:	ee                   	out    dx,al
c001ad35:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad3a:	89 e8                	mov    eax,ebp
c001ad3c:	ee                   	out    dx,al
c001ad3d:	83 c4 0c             	add    esp,0xc
c001ad40:	89 d8                	mov    eax,ebx
c001ad42:	89 f9                	mov    ecx,edi
c001ad44:	c1 e0 08             	shl    eax,0x8
c001ad47:	0f b6 d9             	movzx  ebx,cl
c001ad4a:	83 e3 fc             	and    ebx,0xfffffffc
c001ad4d:	09 d8                	or     eax,ebx
c001ad4f:	5b                   	pop    ebx
c001ad50:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad55:	5e                   	pop    esi
c001ad56:	5f                   	pop    edi
c001ad57:	5d                   	pop    ebp
c001ad58:	c3                   	ret    
c001ad59:	90                   	nop

c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad5a:	57                   	push   edi
c001ad5b:	56                   	push   esi
c001ad5c:	53                   	push   ebx
c001ad5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad65:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad6f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad77:	83 ff 01             	cmp    edi,0x1
c001ad7a:	75 3f                	jne    c001adbb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad7c:	89 de                	mov    esi,ebx
c001ad7e:	0f b6 c0             	movzx  eax,al
c001ad81:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad87:	c1 e0 10             	shl    eax,0x10
c001ad8a:	0f b6 c9             	movzx  ecx,cl
c001ad8d:	09 f0                	or     eax,esi
c001ad8f:	c1 e1 08             	shl    ecx,0x8
c001ad92:	0f b6 d2             	movzx  edx,dl
c001ad95:	09 c8                	or     eax,ecx
c001ad97:	c1 e2 0b             	shl    edx,0xb
c001ad9a:	09 d0                	or     eax,edx
c001ad9c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ada1:	0d 00 00 00 80       	or     eax,0x80000000
c001ada6:	ef                   	out    dx,eax
c001ada7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adac:	ed                   	in     eax,dx
c001adad:	83 e3 02             	and    ebx,0x2
c001adb0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001adb7:	d3 e8                	shr    eax,cl
c001adb9:	eb 44                	jmp    c001adff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adbb:	83 ff 02             	cmp    edi,0x2
c001adbe:	75 2d                	jne    c001aded <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	0f b6 c9             	movzx  ecx,cl
c001adc6:	0f b6 d2             	movzx  edx,dl
c001adc9:	0f b6 fb             	movzx  edi,bl
c001adcc:	0f b6 c0             	movzx  eax,al
c001adcf:	57                   	push   edi
c001add0:	51                   	push   ecx
c001add1:	52                   	push   edx
c001add2:	50                   	push   eax
c001add3:	56                   	push   esi
c001add4:	e8 0b ff ff ff       	call   c001ace4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001add9:	89 c2                	mov    edx,eax
c001addb:	ed                   	in     eax,dx
c001addc:	83 e3 02             	and    ebx,0x2
c001addf:	83 c4 20             	add    esp,0x20
c001ade2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ade9:	d3 e8                	shr    eax,cl
c001adeb:	eb 12                	jmp    c001adff <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aded:	83 ec 0c             	sub    esp,0xc
c001adf0:	68 23 2a 02 c0       	push   0xc0022a23
c001adf5:	e8 03 64 ff ff       	call   c00111fd <KePanic(char const*)>
c001adfa:	83 c4 10             	add    esp,0x10
c001adfd:	31 c0                	xor    eax,eax
c001adff:	5b                   	pop    ebx
c001ae00:	5e                   	pop    esi
c001ae01:	5f                   	pop    edi
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae04:	83 ec 18             	sub    esp,0x18
c001ae07:	6a 00                	push   0x0
c001ae09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae0e:	50                   	push   eax
c001ae0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae14:	50                   	push   eax
c001ae15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae1a:	50                   	push   eax
c001ae1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae1f:	e8 36 ff ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae24:	83 c4 2c             	add    esp,0x2c
c001ae27:	c3                   	ret    

c001ae28 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae28:	83 ec 18             	sub    esp,0x18
c001ae2b:	6a 0e                	push   0xe
c001ae2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae32:	50                   	push   eax
c001ae33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae38:	50                   	push   eax
c001ae39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae3e:	50                   	push   eax
c001ae3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae43:	e8 12 ff ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae48:	83 c4 2c             	add    esp,0x2c
c001ae4b:	0f b6 c0             	movzx  eax,al
c001ae4e:	c3                   	ret    
c001ae4f:	90                   	nop

c001ae50 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae50:	55                   	push   ebp
c001ae51:	57                   	push   edi
c001ae52:	56                   	push   esi
c001ae53:	53                   	push   ebx
c001ae54:	83 ec 18             	sub    esp,0x18
c001ae57:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae5c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae61:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae66:	6a 0a                	push   0xa
c001ae68:	56                   	push   esi
c001ae69:	55                   	push   ebp
c001ae6a:	57                   	push   edi
c001ae6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae6f:	e8 e6 fe ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae74:	83 c4 14             	add    esp,0x14
c001ae77:	89 c3                	mov    ebx,eax
c001ae79:	6a 0a                	push   0xa
c001ae7b:	0f b6 db             	movzx  ebx,bl
c001ae7e:	56                   	push   esi
c001ae7f:	55                   	push   ebp
c001ae80:	57                   	push   edi
c001ae81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae85:	e8 d0 fe ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae8a:	83 c4 2c             	add    esp,0x2c
c001ae8d:	25 00 ff 00 00       	and    eax,0xff00
c001ae92:	09 d8                	or     eax,ebx
c001ae94:	5b                   	pop    ebx
c001ae95:	5e                   	pop    esi
c001ae96:	5f                   	pop    edi
c001ae97:	5d                   	pop    ebp
c001ae98:	c3                   	ret    
c001ae99:	90                   	nop

c001ae9a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ae9a:	83 ec 18             	sub    esp,0x18
c001ae9d:	6a 08                	push   0x8
c001ae9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea4:	50                   	push   eax
c001aea5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeaa:	50                   	push   eax
c001aeab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb0:	50                   	push   eax
c001aeb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeb5:	e8 a0 fe ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeba:	83 c4 2c             	add    esp,0x2c
c001aebd:	0f b6 c4             	movzx  eax,ah
c001aec0:	c3                   	ret    
c001aec1:	90                   	nop

c001aec2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001aec2:	83 ec 18             	sub    esp,0x18
c001aec5:	6a 08                	push   0x8
c001aec7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aecc:	50                   	push   eax
c001aecd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aed2:	50                   	push   eax
c001aed3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aed8:	50                   	push   eax
c001aed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aedd:	e8 78 fe ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aee2:	83 c4 2c             	add    esp,0x2c
c001aee5:	c3                   	ret    

c001aee6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001aee6:	83 ec 18             	sub    esp,0x18
c001aee9:	6a 3c                	push   0x3c
c001aeeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aef0:	50                   	push   eax
c001aef1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aef6:	50                   	push   eax
c001aef7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aefc:	50                   	push   eax
c001aefd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af01:	e8 54 fe ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af06:	83 c4 2c             	add    esp,0x2c
c001af09:	c3                   	ret    

c001af0a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af0a:	83 ec 18             	sub    esp,0x18
c001af0d:	6a 18                	push   0x18
c001af0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af14:	50                   	push   eax
c001af15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af1a:	50                   	push   eax
c001af1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af20:	50                   	push   eax
c001af21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af25:	e8 30 fe ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af2a:	83 c4 2c             	add    esp,0x2c
c001af2d:	0f b6 c4             	movzx  eax,ah
c001af30:	c3                   	ret    
c001af31:	90                   	nop

c001af32 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af32:	55                   	push   ebp
c001af33:	57                   	push   edi
c001af34:	56                   	push   esi
c001af35:	53                   	push   ebx
c001af36:	83 ec 28             	sub    esp,0x28
c001af39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af3d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af42:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af47:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af4c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af53:	8d 43 12             	lea    eax,[ebx+0x12]
c001af56:	83 c3 10             	add    ebx,0x10
c001af59:	0f b6 c0             	movzx  eax,al
c001af5c:	0f b6 db             	movzx  ebx,bl
c001af5f:	50                   	push   eax
c001af60:	51                   	push   ecx
c001af61:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af65:	57                   	push   edi
c001af66:	55                   	push   ebp
c001af67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af6b:	e8 ea fd ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af70:	83 c4 14             	add    esp,0x14
c001af73:	89 c6                	mov    esi,eax
c001af75:	53                   	push   ebx
c001af76:	c1 e6 10             	shl    esi,0x10
c001af79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af7d:	51                   	push   ecx
c001af7e:	57                   	push   edi
c001af7f:	55                   	push   ebp
c001af80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af84:	e8 d1 fd ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af89:	83 c4 3c             	add    esp,0x3c
c001af8c:	0f b7 c0             	movzx  eax,ax
c001af8f:	5b                   	pop    ebx
c001af90:	09 f0                	or     eax,esi
c001af92:	5e                   	pop    esi
c001af93:	5f                   	pop    edi
c001af94:	5d                   	pop    ebp
c001af95:	c3                   	ret    

c001af96 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001af96:	55                   	push   ebp
c001af97:	57                   	push   edi
c001af98:	56                   	push   esi
c001af99:	53                   	push   ebx
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001afa1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001afa5:	89 f5                	mov    ebp,esi
c001afa7:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001afad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afb9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001afbd:	83 f9 01             	cmp    ecx,0x1
c001afc0:	75 5d                	jne    c001b01f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001afc2:	0f b6 c8             	movzx  ecx,al
c001afc5:	0f b6 d2             	movzx  edx,dl
c001afc8:	c1 e1 10             	shl    ecx,0x10
c001afcb:	c1 e2 0b             	shl    edx,0xb
c001afce:	89 f0                	mov    eax,esi
c001afd0:	25 fc 00 00 00       	and    eax,0xfc
c001afd5:	09 c1                	or     ecx,eax
c001afd7:	89 e8                	mov    eax,ebp
c001afd9:	0f b6 c0             	movzx  eax,al
c001afdc:	c1 e0 08             	shl    eax,0x8
c001afdf:	09 c1                	or     ecx,eax
c001afe1:	09 d1                	or     ecx,edx
c001afe3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afe8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001afee:	89 c8                	mov    eax,ecx
c001aff0:	ef                   	out    dx,eax
c001aff1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aff6:	ed                   	in     eax,dx
c001aff7:	0f b7 db             	movzx  ebx,bx
c001affa:	83 e6 02             	and    esi,0x2
c001affd:	74 0a                	je     c001b009 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001afff:	0f b7 d0             	movzx  edx,ax
c001b002:	c1 e3 10             	shl    ebx,0x10
c001b005:	09 d3                	or     ebx,edx
c001b007:	eb 05                	jmp    c001b00e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b009:	66 31 c0             	xor    ax,ax
c001b00c:	09 c3                	or     ebx,eax
c001b00e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b013:	89 c8                	mov    eax,ecx
c001b015:	ef                   	out    dx,eax
c001b016:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b01b:	89 d8                	mov    eax,ebx
c001b01d:	eb 41                	jmp    c001b060 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b01f:	83 f9 02             	cmp    ecx,0x2
c001b022:	75 45                	jne    c001b069 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	0f b6 d2             	movzx  edx,dl
c001b02a:	89 f1                	mov    ecx,esi
c001b02c:	0f b6 c0             	movzx  eax,al
c001b02f:	0f b6 f1             	movzx  esi,cl
c001b032:	89 e9                	mov    ecx,ebp
c001b034:	56                   	push   esi
c001b035:	0f b6 c9             	movzx  ecx,cl
c001b038:	51                   	push   ecx
c001b039:	52                   	push   edx
c001b03a:	50                   	push   eax
c001b03b:	57                   	push   edi
c001b03c:	e8 a3 fc ff ff       	call   c001ace4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b041:	89 c2                	mov    edx,eax
c001b043:	ed                   	in     eax,dx
c001b044:	83 c4 20             	add    esp,0x20
c001b047:	0f b7 db             	movzx  ebx,bx
c001b04a:	f6 c2 02             	test   dl,0x2
c001b04d:	74 0c                	je     c001b05b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b04f:	0f b7 c8             	movzx  ecx,ax
c001b052:	89 d8                	mov    eax,ebx
c001b054:	c1 e0 10             	shl    eax,0x10
c001b057:	09 c8                	or     eax,ecx
c001b059:	eb 05                	jmp    c001b060 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b05b:	66 31 c0             	xor    ax,ax
c001b05e:	09 d8                	or     eax,ebx
c001b060:	ef                   	out    dx,eax
c001b061:	83 c4 0c             	add    esp,0xc
c001b064:	5b                   	pop    ebx
c001b065:	5e                   	pop    esi
c001b066:	5f                   	pop    edi
c001b067:	5d                   	pop    ebp
c001b068:	c3                   	ret    
c001b069:	c7 44 24 20 23 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a23
c001b071:	83 c4 0c             	add    esp,0xc
c001b074:	5b                   	pop    ebx
c001b075:	5e                   	pop    esi
c001b076:	5f                   	pop    edi
c001b077:	5d                   	pop    ebp
c001b078:	e9 80 61 ff ff       	jmp    c00111fd <KePanic(char const*)>
c001b07d:	90                   	nop

c001b07e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b07e:	55                   	push   ebp
c001b07f:	57                   	push   edi
c001b080:	56                   	push   esi
c001b081:	53                   	push   ebx
c001b082:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b088:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b08f:	80 3d 4c ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae4c,0x0
c001b096:	0f 85 bd 00 00 00    	jne    c001b159 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b09c:	83 ec 0c             	sub    esp,0xc
c001b09f:	68 14 01 00 00       	push   0x114
c001b0a4:	e8 0d ca fe ff       	call   c0007ab6 <malloc>
c001b0a9:	83 c4 0c             	add    esp,0xc
c001b0ac:	89 c3                	mov    ebx,eax
c001b0ae:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001b0b4:	68 29 2a 02 c0       	push   0xc0022a29
c001b0b9:	50                   	push   eax
c001b0ba:	e8 2b 06 ff ff       	call   c000b6ea <File::File(char const*, Process*)>
c001b0bf:	83 c4 10             	add    esp,0x10
c001b0c2:	85 db                	test   ebx,ebx
c001b0c4:	0f 84 67 02 00 00    	je     c001b331 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b0ca:	56                   	push   esi
c001b0cb:	56                   	push   esi
c001b0cc:	6a 01                	push   0x1
c001b0ce:	53                   	push   ebx
c001b0cf:	e8 d2 06 ff ff       	call   c000b7a6 <File::open(FileOpenMode)>
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	85 c0                	test   eax,eax
c001b0d9:	0f 85 52 02 00 00    	jne    c001b331 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b0df:	52                   	push   edx
c001b0e0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b0e4:	50                   	push   eax
c001b0e5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b0e9:	50                   	push   eax
c001b0ea:	53                   	push   ebx
c001b0eb:	e8 b8 09 ff ff       	call   c000baa8 <File::stat(unsigned long long*, bool*)>
c001b0f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0f4:	40                   	inc    eax
c001b0f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0f8:	e8 b9 c9 fe ff       	call   c0007ab6 <malloc>
c001b0fd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b101:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001b106:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b10a:	59                   	pop    ecx
c001b10b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b10d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b111:	51                   	push   ecx
c001b112:	50                   	push   eax
c001b113:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b117:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b11b:	53                   	push   ebx
c001b11c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b11f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b123:	83 c4 20             	add    esp,0x20
c001b126:	89 c8                	mov    eax,ecx
c001b128:	99                   	cdq    
c001b129:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b12d:	0f 85 fe 01 00 00    	jne    c001b331 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b133:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b137:	0f 85 f4 01 00 00    	jne    c001b331 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b13d:	83 ec 0c             	sub    esp,0xc
c001b140:	53                   	push   ebx
c001b141:	e8 be 06 ff ff       	call   c000b804 <File::close()>
c001b146:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b14a:	c6 05 4c ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae4c,0x1
c001b151:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001b156:	83 c4 10             	add    esp,0x10
c001b159:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c001b15e:	8b 1d 48 ae 02 c0    	mov    ebx,DWORD PTR ds:0xc002ae48
c001b164:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b168:	31 f6                	xor    esi,esi
c001b16a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b172:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b179:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b17e:	31 c9                	xor    ecx,ecx
c001b180:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b188:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b18d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b195:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b199:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b1a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b1a5:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b1a9:	0f 8e 82 01 00 00    	jle    c001b331 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1af:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b1b2:	d4 40                	aam    0x40
c001b1b4:	d5 39                	aad    0x39
c001b1b6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1ba:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b1be:	d4 40                	aam    0x40
c001b1c0:	d5 39                	aad    0x39
c001b1c2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1c6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b1ca:	d4 40                	aam    0x40
c001b1cc:	d5 39                	aad    0x39
c001b1ce:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1d2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b1d6:	d4 40                	aam    0x40
c001b1d8:	d5 39                	aad    0x39
c001b1da:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1de:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b1e2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b1e6:	3c 56                	cmp    al,0x56
c001b1e8:	74 43                	je     c001b22d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b1ea:	d4 40                	aam    0x40
c001b1ec:	d5 39                	aad    0x39
c001b1ee:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b1f1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b1f5:	0f b6 c9             	movzx  ecx,cl
c001b1f8:	c1 e1 04             	shl    ecx,0x4
c001b1fb:	d4 40                	aam    0x40
c001b1fd:	d5 39                	aad    0x39
c001b1ff:	83 e8 30             	sub    eax,0x30
c001b202:	0f b6 c0             	movzx  eax,al
c001b205:	09 c1                	or     ecx,eax
c001b207:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b20b:	c1 e1 04             	shl    ecx,0x4
c001b20e:	d4 40                	aam    0x40
c001b210:	d5 39                	aad    0x39
c001b212:	83 e8 30             	sub    eax,0x30
c001b215:	0f b6 c0             	movzx  eax,al
c001b218:	09 c1                	or     ecx,eax
c001b21a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b21e:	c1 e1 04             	shl    ecx,0x4
c001b221:	d4 40                	aam    0x40
c001b223:	d5 39                	aad    0x39
c001b225:	83 e8 30             	sub    eax,0x30
c001b228:	0f b6 c0             	movzx  eax,al
c001b22b:	09 c1                	or     ecx,eax
c001b22d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b231:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b235:	3c 58                	cmp    al,0x58
c001b237:	74 47                	je     c001b280 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b239:	d4 40                	aam    0x40
c001b23b:	d5 39                	aad    0x39
c001b23d:	8d 50 d0             	lea    edx,[eax-0x30]
c001b240:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b244:	0f b6 d2             	movzx  edx,dl
c001b247:	c1 e2 04             	shl    edx,0x4
c001b24a:	d4 40                	aam    0x40
c001b24c:	d5 39                	aad    0x39
c001b24e:	83 e8 30             	sub    eax,0x30
c001b251:	0f b6 c0             	movzx  eax,al
c001b254:	09 c2                	or     edx,eax
c001b256:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b25a:	c1 e2 04             	shl    edx,0x4
c001b25d:	d4 40                	aam    0x40
c001b25f:	d5 39                	aad    0x39
c001b261:	83 e8 30             	sub    eax,0x30
c001b264:	0f b6 c0             	movzx  eax,al
c001b267:	09 c2                	or     edx,eax
c001b269:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b26d:	c1 e2 04             	shl    edx,0x4
c001b270:	d4 40                	aam    0x40
c001b272:	d5 39                	aad    0x39
c001b274:	83 e8 30             	sub    eax,0x30
c001b277:	0f b6 c0             	movzx  eax,al
c001b27a:	09 c2                	or     edx,eax
c001b27c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b280:	83 c6 10             	add    esi,0x10
c001b283:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b287:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b28b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b28f:	83 fa 0a             	cmp    edx,0xa
c001b292:	74 0b                	je     c001b29f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b294:	47                   	inc    edi
c001b295:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b299:	75 19                	jne    c001b2b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b29b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b29f:	31 c0                	xor    eax,eax
c001b2a1:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b2a6:	0f 94 c0             	sete   al
c001b2a9:	01 c6                	add    esi,eax
c001b2ab:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b2b0:	75 0b                	jne    c001b2bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b2b2:	eb 14                	jmp    c001b2c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b2b4:	46                   	inc    esi
c001b2b5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b2b8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b2bb:	eb ca                	jmp    c001b287 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b2bd:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b2c2:	0f 85 dd fe ff ff    	jne    c001b1a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2c8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b2cd:	74 10                	je     c001b2df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b2cf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b2d4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b2d9:	0f 85 c6 fe ff ff    	jne    c001b1a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b2e7:	83 e8 30             	sub    eax,0x30
c001b2ea:	83 ef 30             	sub    edi,0x30
c001b2ed:	c1 e0 04             	shl    eax,0x4
c001b2f0:	09 f8                	or     eax,edi
c001b2f2:	0f b6 c0             	movzx  eax,al
c001b2f5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b2f9:	0f 85 a6 fe ff ff    	jne    c001b1a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b303:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b307:	83 e8 30             	sub    eax,0x30
c001b30a:	83 ef 30             	sub    edi,0x30
c001b30d:	c1 e0 04             	shl    eax,0x4
c001b310:	09 f8                	or     eax,edi
c001b312:	0f b6 c0             	movzx  eax,al
c001b315:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b319:	0f 85 86 fe ff ff    	jne    c001b1a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b31f:	50                   	push   eax
c001b320:	50                   	push   eax
c001b321:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b325:	50                   	push   eax
c001b326:	55                   	push   ebp
c001b327:	e8 14 53 fe ff       	call   c0000640 <strcpy>
c001b32c:	83 c4 10             	add    esp,0x10
c001b32f:	eb 06                	jmp    c001b337 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b331:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b335:	31 ed                	xor    ebp,ebp
c001b337:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b33d:	89 e8                	mov    eax,ebp
c001b33f:	5b                   	pop    ebx
c001b340:	5e                   	pop    esi
c001b341:	5f                   	pop    edi
c001b342:	5d                   	pop    ebp
c001b343:	c3                   	ret    

c001b344 <PCI::checkBus(unsigned char)>:
c001b344:	56                   	push   esi
c001b345:	53                   	push   ebx
c001b346:	31 db                	xor    ebx,ebx
c001b348:	51                   	push   ecx
c001b349:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b34e:	52                   	push   edx
c001b34f:	53                   	push   ebx
c001b350:	43                   	inc    ebx
c001b351:	56                   	push   esi
c001b352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b356:	e8 03 03 00 00       	call   c001b65e <PCI::checkDevice(unsigned char, unsigned char)>
c001b35b:	83 c4 10             	add    esp,0x10
c001b35e:	83 fb 20             	cmp    ebx,0x20
c001b361:	75 eb                	jne    c001b34e <PCI::checkBus(unsigned char)+0xa>
c001b363:	58                   	pop    eax
c001b364:	5b                   	pop    ebx
c001b365:	5e                   	pop    esi
c001b366:	c3                   	ret    
c001b367:	90                   	nop

c001b368 <PCI::foundDevice(PCIDeviceInfo)>:
c001b368:	55                   	push   ebp
c001b369:	57                   	push   edi
c001b36a:	56                   	push   esi
c001b36b:	53                   	push   ebx
c001b36c:	83 ec 1c             	sub    esp,0x1c
c001b36f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b374:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b378:	3d ff ff 00 00       	cmp    eax,0xffff
c001b37d:	0f 84 57 01 00 00    	je     c001b4da <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b383:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b388:	66 3d 06 04          	cmp    ax,0x406
c001b38c:	75 2c                	jne    c001b3ba <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b38e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b393:	50                   	push   eax
c001b394:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b399:	50                   	push   eax
c001b39a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b39f:	50                   	push   eax
c001b3a0:	53                   	push   ebx
c001b3a1:	e8 64 fb ff ff       	call   c001af0a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b3a6:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b3aa:	0f b6 c0             	movzx  eax,al
c001b3ad:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3b1:	83 c4 2c             	add    esp,0x2c
c001b3b4:	5b                   	pop    ebx
c001b3b5:	5e                   	pop    esi
c001b3b6:	5f                   	pop    edi
c001b3b7:	5d                   	pop    ebp
c001b3b8:	eb 8a                	jmp    c001b344 <PCI::checkBus(unsigned char)>
c001b3ba:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b3be:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b3c4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b3c8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b3cc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b3d1:	85 d2                	test   edx,edx
c001b3d3:	74 36                	je     c001b40b <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b3d5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b3d8:	85 c9                	test   ecx,ecx
c001b3da:	74 2b                	je     c001b407 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3dc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b3e2:	31 ee                	xor    esi,ebp
c001b3e4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b3ea:	75 1b                	jne    c001b407 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3ec:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b3f0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b3f6:	75 0f                	jne    c001b407 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3f8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b3ff:	39 f9                	cmp    ecx,edi
c001b401:	0f 84 d3 00 00 00    	je     c001b4da <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b407:	8b 12                	mov    edx,DWORD PTR [edx]
c001b409:	eb c6                	jmp    c001b3d1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b40b:	3d 01 06 00 00       	cmp    eax,0x601
c001b410:	75 19                	jne    c001b42b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b412:	83 ec 0c             	sub    esp,0xc
c001b415:	68 64 01 00 00       	push   0x164
c001b41a:	e8 97 c6 fe ff       	call   c0007ab6 <malloc>
c001b41f:	89 c5                	mov    ebp,eax
c001b421:	89 04 24             	mov    DWORD PTR [esp],eax
c001b424:	e8 a1 0e 00 00       	call   c001c2ca <SATABus::SATABus()>
c001b429:	eb 1e                	jmp    c001b449 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b42b:	3d 01 01 00 00       	cmp    eax,0x101
c001b430:	75 62                	jne    c001b494 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b432:	83 ec 0c             	sub    esp,0xc
c001b435:	68 70 02 00 00       	push   0x270
c001b43a:	e8 77 c6 fe ff       	call   c0007ab6 <malloc>
c001b43f:	89 c5                	mov    ebp,eax
c001b441:	89 04 24             	mov    DWORD PTR [esp],eax
c001b444:	e8 e5 02 00 00       	call   c001b72e <IDE::IDE()>
c001b449:	5f                   	pop    edi
c001b44a:	58                   	pop    eax
c001b44b:	55                   	push   ebp
c001b44c:	53                   	push   ebx
c001b44d:	e8 a0 11 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c001b452:	83 ec 1c             	sub    esp,0x1c
c001b455:	b9 09 00 00 00       	mov    ecx,0x9
c001b45a:	fc                   	cld    
c001b45b:	89 e7                	mov    edi,esp
c001b45d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b461:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b463:	55                   	push   ebp
c001b464:	e8 cf 10 ff ff       	call   c000c538 <Device::preOpenPCI(PCIDeviceInfo)>
c001b469:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b46c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b470:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b478:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b480:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b488:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b48b:	83 c4 4c             	add    esp,0x4c
c001b48e:	5b                   	pop    ebx
c001b48f:	5e                   	pop    esi
c001b490:	5f                   	pop    edi
c001b491:	5d                   	pop    ebp
c001b492:	ff e0                	jmp    eax
c001b494:	83 ec 0c             	sub    esp,0xc
c001b497:	68 58 01 00 00       	push   0x158
c001b49c:	e8 15 c6 fe ff       	call   c0007ab6 <malloc>
c001b4a1:	89 c5                	mov    ebp,eax
c001b4a3:	58                   	pop    eax
c001b4a4:	5a                   	pop    edx
c001b4a5:	68 42 2a 02 c0       	push   0xc0022a42
c001b4aa:	55                   	push   ebp
c001b4ab:	e8 e0 13 ff ff       	call   c000c890 <DriverlessDevice::DriverlessDevice(char const*)>
c001b4b0:	59                   	pop    ecx
c001b4b1:	5e                   	pop    esi
c001b4b2:	55                   	push   ebp
c001b4b3:	53                   	push   ebx
c001b4b4:	e8 39 11 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c001b4b9:	83 c4 10             	add    esp,0x10
c001b4bc:	b9 09 00 00 00       	mov    ecx,0x9
c001b4c1:	fc                   	cld    
c001b4c2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b4c6:	89 fe                	mov    esi,edi
c001b4c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4ca:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b4ce:	83 c4 1c             	add    esp,0x1c
c001b4d1:	5b                   	pop    ebx
c001b4d2:	5e                   	pop    esi
c001b4d3:	5f                   	pop    edi
c001b4d4:	5d                   	pop    ebp
c001b4d5:	e9 5e 10 ff ff       	jmp    c000c538 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4da:	83 c4 1c             	add    esp,0x1c
c001b4dd:	5b                   	pop    ebx
c001b4de:	5e                   	pop    esi
c001b4df:	5f                   	pop    edi
c001b4e0:	5d                   	pop    ebp
c001b4e1:	c3                   	ret    

c001b4e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b4e2:	55                   	push   ebp
c001b4e3:	57                   	push   edi
c001b4e4:	56                   	push   esi
c001b4e5:	53                   	push   ebx
c001b4e6:	83 ec 68             	sub    esp,0x68
c001b4e9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b4ed:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b4f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b4f8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b4ff:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b504:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b508:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b50f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b514:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b518:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b51d:	6a 0c                	push   0xc
c001b51f:	57                   	push   edi
c001b520:	53                   	push   ebx
c001b521:	56                   	push   esi
c001b522:	55                   	push   ebp
c001b523:	e8 32 f8 ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b528:	83 c4 20             	add    esp,0x20
c001b52b:	57                   	push   edi
c001b52c:	53                   	push   ebx
c001b52d:	56                   	push   esi
c001b52e:	55                   	push   ebp
c001b52f:	e8 1c f9 ff ff       	call   c001ae50 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b534:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b539:	57                   	push   edi
c001b53a:	53                   	push   ebx
c001b53b:	56                   	push   esi
c001b53c:	55                   	push   ebp
c001b53d:	e8 a4 f9 ff ff       	call   c001aee6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b542:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b546:	83 c4 14             	add    esp,0x14
c001b549:	6a 3c                	push   0x3c
c001b54b:	57                   	push   edi
c001b54c:	53                   	push   ebx
c001b54d:	56                   	push   esi
c001b54e:	55                   	push   ebp
c001b54f:	e8 06 f8 ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b554:	0f b6 c4             	movzx  eax,ah
c001b557:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b55b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b55f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b563:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b568:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b56e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b574:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b578:	83 c4 20             	add    esp,0x20
c001b57b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b580:	74 30                	je     c001b5b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b582:	31 c0                	xor    eax,eax
c001b584:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b588:	7e 28                	jle    c001b5b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b58a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b592:	39 cb                	cmp    ebx,ecx
c001b594:	75 19                	jne    c001b5af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b596:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b59e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b5a2:	75 0b                	jne    c001b5af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b5a4:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b5ab:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b5af:	40                   	inc    eax
c001b5b0:	eb d2                	jmp    c001b584 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b5b2:	31 d2                	xor    edx,edx
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	57                   	push   edi
c001b5b8:	53                   	push   ebx
c001b5b9:	56                   	push   esi
c001b5ba:	52                   	push   edx
c001b5bb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b5bf:	55                   	push   ebp
c001b5c0:	e8 6d f9 ff ff       	call   c001af32 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b5c9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5cd:	42                   	inc    edx
c001b5ce:	83 c4 20             	add    esp,0x20
c001b5d1:	83 fa 06             	cmp    edx,0x6
c001b5d4:	75 de                	jne    c001b5b4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b5d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5de:	c1 e2 08             	shl    edx,0x8
c001b5e1:	83 ec 0c             	sub    esp,0xc
c001b5e4:	0f b6 c4             	movzx  eax,ah
c001b5e7:	09 d0                	or     eax,edx
c001b5e9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b5ee:	6a 02                	push   0x2
c001b5f0:	57                   	push   edi
c001b5f1:	53                   	push   ebx
c001b5f2:	56                   	push   esi
c001b5f3:	55                   	push   ebp
c001b5f4:	e8 61 f7 ff ff       	call   c001ad5a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5f9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b5fe:	83 c4 20             	add    esp,0x20
c001b601:	57                   	push   edi
c001b602:	53                   	push   ebx
c001b603:	56                   	push   esi
c001b604:	55                   	push   ebp
c001b605:	e8 90 f8 ff ff       	call   c001ae9a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b60a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b60e:	57                   	push   edi
c001b60f:	53                   	push   ebx
c001b610:	56                   	push   esi
c001b611:	55                   	push   ebp
c001b612:	e8 ed f7 ff ff       	call   c001ae04 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b617:	b9 09 00 00 00       	mov    ecx,0x9
c001b61c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b621:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b625:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b629:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b62d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b631:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b635:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b639:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b63d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b641:	83 ec 0c             	sub    esp,0xc
c001b644:	fc                   	cld    
c001b645:	89 e7                	mov    edi,esp
c001b647:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b64b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b64d:	55                   	push   ebp
c001b64e:	e8 15 fd ff ff       	call   c001b368 <PCI::foundDevice(PCIDeviceInfo)>
c001b653:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b659:	5b                   	pop    ebx
c001b65a:	5e                   	pop    esi
c001b65b:	5f                   	pop    edi
c001b65c:	5d                   	pop    ebp
c001b65d:	c3                   	ret    

c001b65e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b65e:	55                   	push   ebp
c001b65f:	57                   	push   edi
c001b660:	56                   	push   esi
c001b661:	53                   	push   ebx
c001b662:	83 ec 0c             	sub    esp,0xc
c001b665:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b669:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b66e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b673:	6a 00                	push   0x0
c001b675:	56                   	push   esi
c001b676:	57                   	push   edi
c001b677:	55                   	push   ebp
c001b678:	e8 87 f7 ff ff       	call   c001ae04 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b67d:	6a 00                	push   0x0
c001b67f:	56                   	push   esi
c001b680:	57                   	push   edi
c001b681:	55                   	push   ebp
c001b682:	e8 5b fe ff ff       	call   c001b4e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b687:	83 c4 20             	add    esp,0x20
c001b68a:	6a 00                	push   0x0
c001b68c:	56                   	push   esi
c001b68d:	57                   	push   edi
c001b68e:	55                   	push   ebp
c001b68f:	e8 94 f7 ff ff       	call   c001ae28 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b694:	83 c4 10             	add    esp,0x10
c001b697:	a8 80                	test   al,0x80
c001b699:	74 2d                	je     c001b6c8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b69b:	bb 01 00 00 00       	mov    ebx,0x1
c001b6a0:	53                   	push   ebx
c001b6a1:	56                   	push   esi
c001b6a2:	57                   	push   edi
c001b6a3:	55                   	push   ebp
c001b6a4:	e8 5b f7 ff ff       	call   c001ae04 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6a9:	83 c4 10             	add    esp,0x10
c001b6ac:	0f b7 c0             	movzx  eax,ax
c001b6af:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6b4:	74 0c                	je     c001b6c2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b6b6:	53                   	push   ebx
c001b6b7:	56                   	push   esi
c001b6b8:	57                   	push   edi
c001b6b9:	55                   	push   ebp
c001b6ba:	e8 23 fe ff ff       	call   c001b4e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6bf:	83 c4 10             	add    esp,0x10
c001b6c2:	43                   	inc    ebx
c001b6c3:	83 fb 08             	cmp    ebx,0x8
c001b6c6:	75 d8                	jne    c001b6a0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b6c8:	83 c4 0c             	add    esp,0xc
c001b6cb:	5b                   	pop    ebx
c001b6cc:	5e                   	pop    esi
c001b6cd:	5f                   	pop    edi
c001b6ce:	5d                   	pop    ebp
c001b6cf:	c3                   	ret    

c001b6d0 <PCI::detect()>:
c001b6d0:	56                   	push   esi
c001b6d1:	53                   	push   ebx
c001b6d2:	53                   	push   ebx
c001b6d3:	31 db                	xor    ebx,ebx
c001b6d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6d9:	6a 00                	push   0x0
c001b6db:	6a 00                	push   0x0
c001b6dd:	6a 00                	push   0x0
c001b6df:	56                   	push   esi
c001b6e0:	e8 43 f7 ff ff       	call   c001ae28 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6e5:	83 c4 10             	add    esp,0x10
c001b6e8:	a8 80                	test   al,0x80
c001b6ea:	75 21                	jne    c001b70d <PCI::detect()+0x3d>
c001b6ec:	51                   	push   ecx
c001b6ed:	51                   	push   ecx
c001b6ee:	6a 00                	push   0x0
c001b6f0:	56                   	push   esi
c001b6f1:	e8 4e fc ff ff       	call   c001b344 <PCI::checkBus(unsigned char)>
c001b6f6:	83 c4 10             	add    esp,0x10
c001b6f9:	eb 2a                	jmp    c001b725 <PCI::detect()+0x55>
c001b6fb:	52                   	push   edx
c001b6fc:	52                   	push   edx
c001b6fd:	53                   	push   ebx
c001b6fe:	43                   	inc    ebx
c001b6ff:	56                   	push   esi
c001b700:	e8 3f fc ff ff       	call   c001b344 <PCI::checkBus(unsigned char)>
c001b705:	83 c4 10             	add    esp,0x10
c001b708:	83 fb 08             	cmp    ebx,0x8
c001b70b:	74 18                	je     c001b725 <PCI::detect()+0x55>
c001b70d:	53                   	push   ebx
c001b70e:	6a 00                	push   0x0
c001b710:	6a 00                	push   0x0
c001b712:	56                   	push   esi
c001b713:	e8 ec f6 ff ff       	call   c001ae04 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b718:	83 c4 10             	add    esp,0x10
c001b71b:	0f b7 c0             	movzx  eax,ax
c001b71e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b723:	74 d6                	je     c001b6fb <PCI::detect()+0x2b>
c001b725:	58                   	pop    eax
c001b726:	5b                   	pop    ebx
c001b727:	5e                   	pop    esi
c001b728:	c3                   	ret    
c001b729:	90                   	nop

c001b72a <IDE::close(int, int, void*)>:
c001b72a:	83 c8 ff             	or     eax,0xffffffff
c001b72d:	c3                   	ret    

c001b72e <IDE::IDE()>:
c001b72e:	83 ec 0c             	sub    esp,0xc
c001b731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b735:	83 ec 08             	sub    esp,0x8
c001b738:	68 88 2a 02 c0       	push   0xc0022a88
c001b73d:	50                   	push   eax
c001b73e:	e8 f1 11 ff ff       	call   c000c934 <HardDiskController::HardDiskController(char const*)>
c001b743:	83 c4 10             	add    esp,0x10
c001b746:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c001b74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74f:	89 10                	mov    DWORD PTR [eax],edx
c001b751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b755:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b75c:	90                   	nop
c001b75d:	83 c4 0c             	add    esp,0xc
c001b760:	c3                   	ret    
c001b761:	90                   	nop

c001b762 <IDE::prepareInterrupt(unsigned char)>:
c001b762:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b767:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b76b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b773:	c3                   	ret    

c001b774 <selectDrive(unsigned char, unsigned char)>:
c001b774:	c3                   	ret    
c001b775:	90                   	nop

c001b776 <IDE::getBase(unsigned char)>:
c001b776:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b77f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b787:	c3                   	ret    

c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b788:	55                   	push   ebp
c001b789:	57                   	push   edi
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	83 ec 1c             	sub    esp,0x1c
c001b78f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b793:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b797:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b79a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b79e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7a2:	80 f9 03             	cmp    cl,0x3
c001b7a5:	77 4f                	ja     c001b7f6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b7a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ab:	0f b6 fa             	movzx  edi,dl
c001b7ae:	0f b6 db             	movzx  ebx,bl
c001b7b1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b7b4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b7b9:	80 ca 80             	or     dl,0x80
c001b7bc:	52                   	push   edx
c001b7bd:	6a 0c                	push   0xc
c001b7bf:	57                   	push   edi
c001b7c0:	56                   	push   esi
c001b7c1:	e8 c2 ff ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7c6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b7cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7cf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b7d3:	ee                   	out    dx,al
c001b7d4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b7d9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b7dd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b7e1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7e5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7ed:	83 c4 2c             	add    esp,0x2c
c001b7f0:	5b                   	pop    ebx
c001b7f1:	5e                   	pop    esi
c001b7f2:	5f                   	pop    edi
c001b7f3:	5d                   	pop    ebp
c001b7f4:	eb 92                	jmp    c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7f6:	0f b6 cb             	movzx  ecx,bl
c001b7f9:	83 f9 07             	cmp    ecx,0x7
c001b7fc:	77 12                	ja     c001b810 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b7fe:	0f b6 d2             	movzx  edx,dl
c001b801:	0f b6 db             	movzx  ebx,bl
c001b804:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b80c:	01 da                	add    edx,ebx
c001b80e:	eb 2f                	jmp    c001b83f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b810:	83 f9 0d             	cmp    ecx,0xd
c001b813:	77 13                	ja     c001b828 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b815:	0f b6 d2             	movzx  edx,dl
c001b818:	0f b6 db             	movzx  ebx,bl
c001b81b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b822:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b826:	eb 17                	jmp    c001b83f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b828:	83 f9 15             	cmp    ecx,0x15
c001b82b:	77 13                	ja     c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b82d:	0f b6 d2             	movzx  edx,dl
c001b830:	0f b6 db             	movzx  ebx,bl
c001b833:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b83b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b83f:	ee                   	out    dx,al
c001b840:	83 c4 1c             	add    esp,0x1c
c001b843:	5b                   	pop    ebx
c001b844:	5e                   	pop    esi
c001b845:	5f                   	pop    edi
c001b846:	5d                   	pop    ebp
c001b847:	c3                   	ret    

c001b848 <IDE::read(unsigned char, unsigned char)>:
c001b848:	55                   	push   ebp
c001b849:	57                   	push   edi
c001b84a:	56                   	push   esi
c001b84b:	53                   	push   ebx
c001b84c:	83 ec 1c             	sub    esp,0x1c
c001b84f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b853:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b857:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b85a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b85e:	3c 03                	cmp    al,0x3
c001b860:	77 40                	ja     c001b8a2 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b862:	0f b6 f9             	movzx  edi,cl
c001b865:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b868:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b86d:	0c 80                	or     al,0x80
c001b86f:	50                   	push   eax
c001b870:	6a 0c                	push   0xc
c001b872:	57                   	push   edi
c001b873:	56                   	push   esi
c001b874:	e8 0f ff ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b879:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b87e:	0f b6 d3             	movzx  edx,bl
c001b881:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b885:	ec                   	in     al,dx
c001b886:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b88a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b88f:	52                   	push   edx
c001b890:	6a 0c                	push   0xc
c001b892:	57                   	push   edi
c001b893:	56                   	push   esi
c001b894:	e8 ef fe ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b899:	83 c4 20             	add    esp,0x20
c001b89c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b8a0:	eb 4c                	jmp    c001b8ee <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8a2:	0f b6 d3             	movzx  edx,bl
c001b8a5:	83 fa 07             	cmp    edx,0x7
c001b8a8:	77 12                	ja     c001b8bc <IDE::read(unsigned char, unsigned char)+0x74>
c001b8aa:	0f b6 c9             	movzx  ecx,cl
c001b8ad:	0f b6 d3             	movzx  edx,bl
c001b8b0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b8b8:	01 c2                	add    edx,eax
c001b8ba:	eb 31                	jmp    c001b8ed <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8bc:	83 fa 0d             	cmp    edx,0xd
c001b8bf:	77 13                	ja     c001b8d4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b8c1:	0f b6 c9             	movzx  ecx,cl
c001b8c4:	0f b6 d3             	movzx  edx,bl
c001b8c7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b8ce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8d2:	eb 19                	jmp    c001b8ed <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8d4:	31 c0                	xor    eax,eax
c001b8d6:	83 fa 15             	cmp    edx,0x15
c001b8d9:	77 13                	ja     c001b8ee <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8db:	0f b6 c9             	movzx  ecx,cl
c001b8de:	0f b6 d3             	movzx  edx,bl
c001b8e1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b8e9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8ed:	ec                   	in     al,dx
c001b8ee:	83 c4 1c             	add    esp,0x1c
c001b8f1:	5b                   	pop    ebx
c001b8f2:	5e                   	pop    esi
c001b8f3:	5f                   	pop    edi
c001b8f4:	5d                   	pop    ebp
c001b8f5:	c3                   	ret    

c001b8f6 <IDE::waitInterrupt(unsigned char)>:
c001b8f6:	55                   	push   ebp
c001b8f7:	57                   	push   edi
c001b8f8:	56                   	push   esi
c001b8f9:	53                   	push   ebx
c001b8fa:	31 db                	xor    ebx,ebx
c001b8fc:	83 ec 0c             	sub    esp,0xc
c001b8ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b903:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b908:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b910:	89 e8                	mov    eax,ebp
c001b912:	84 c0                	test   al,al
c001b914:	75 30                	jne    c001b946 <IDE::waitInterrupt(unsigned char)+0x50>
c001b916:	50                   	push   eax
c001b917:	6a 0c                	push   0xc
c001b919:	56                   	push   esi
c001b91a:	57                   	push   edi
c001b91b:	e8 28 ff ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001b920:	83 c4 10             	add    esp,0x10
c001b923:	a8 01                	test   al,0x1
c001b925:	75 27                	jne    c001b94e <IDE::waitInterrupt(unsigned char)+0x58>
c001b927:	f6 c3 04             	test   bl,0x4
c001b92a:	75 12                	jne    c001b93e <IDE::waitInterrupt(unsigned char)+0x48>
c001b92c:	83 fb 32             	cmp    ebx,0x32
c001b92f:	7e 0d                	jle    c001b93e <IDE::waitInterrupt(unsigned char)+0x48>
c001b931:	83 ec 0c             	sub    esp,0xc
c001b934:	6a 64                	push   0x64
c001b936:	e8 b1 a4 ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001b93b:	83 c4 10             	add    esp,0x10
c001b93e:	83 fb 3c             	cmp    ebx,0x3c
c001b941:	74 0b                	je     c001b94e <IDE::waitInterrupt(unsigned char)+0x58>
c001b943:	43                   	inc    ebx
c001b944:	eb c2                	jmp    c001b908 <IDE::waitInterrupt(unsigned char)+0x12>
c001b946:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b94e:	83 c4 0c             	add    esp,0xc
c001b951:	89 e8                	mov    eax,ebp
c001b953:	5b                   	pop    ebx
c001b954:	5e                   	pop    esi
c001b955:	5f                   	pop    edi
c001b956:	5d                   	pop    ebp
c001b957:	c3                   	ret    

c001b958 <ideChannel0IRQHandler(regs*, void*)>:
c001b958:	83 ec 10             	sub    esp,0x10
c001b95b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b95f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b966:	6a 07                	push   0x7
c001b968:	6a 00                	push   0x0
c001b96a:	50                   	push   eax
c001b96b:	e8 d8 fe ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001b970:	83 c4 1c             	add    esp,0x1c
c001b973:	c3                   	ret    

c001b974 <ideChannel1IRQHandler(regs*, void*)>:
c001b974:	83 ec 10             	sub    esp,0x10
c001b977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b97b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b982:	6a 07                	push   0x7
c001b984:	6a 01                	push   0x1
c001b986:	50                   	push   eax
c001b987:	e8 bc fe ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001b98c:	83 c4 1c             	add    esp,0x1c
c001b98f:	c3                   	ret    

c001b990 <IDE::enableIRQs(unsigned char, bool)>:
c001b990:	57                   	push   edi
c001b991:	b8 02 00 00 00       	mov    eax,0x2
c001b996:	56                   	push   esi
c001b997:	53                   	push   ebx
c001b998:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b99c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b9a0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9a5:	74 02                	je     c001b9a9 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b9a7:	31 c0                	xor    eax,eax
c001b9a9:	0f b6 db             	movzx  ebx,bl
c001b9ac:	bf 04 00 00 00       	mov    edi,0x4
c001b9b1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b9b8:	50                   	push   eax
c001b9b9:	6a 0c                	push   0xc
c001b9bb:	53                   	push   ebx
c001b9bc:	56                   	push   esi
c001b9bd:	e8 c6 fd ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9c2:	83 c4 10             	add    esp,0x10
c001b9c5:	50                   	push   eax
c001b9c6:	6a 0c                	push   0xc
c001b9c8:	53                   	push   ebx
c001b9c9:	56                   	push   esi
c001b9ca:	e8 79 fe ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001b9cf:	83 c4 10             	add    esp,0x10
c001b9d2:	4f                   	dec    edi
c001b9d3:	75 f0                	jne    c001b9c5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b9d5:	5b                   	pop    ebx
c001b9d6:	5e                   	pop    esi
c001b9d7:	5f                   	pop    edi
c001b9d8:	c3                   	ret    
c001b9d9:	90                   	nop

c001b9da <IDE::open(int, int, void*)>:
c001b9da:	55                   	push   ebp
c001b9db:	57                   	push   edi
c001b9dc:	56                   	push   esi
c001b9dd:	53                   	push   ebx
c001b9de:	83 ec 1c             	sub    esp,0x1c
c001b9e1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9e5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9ee:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9f7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b9fe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba05:	0f 85 de 02 00 00    	jne    c001bce9 <IDE::open(int, int, void*)+0x30f>
c001ba0b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba11:	88 04 24             	mov    BYTE PTR [esp],al
c001ba14:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba17:	83 e0 7f             	and    eax,0x7f
c001ba1a:	83 f8 05             	cmp    eax,0x5
c001ba1d:	74 05                	je     c001ba24 <IDE::open(int, int, void*)+0x4a>
c001ba1f:	83 f8 0f             	cmp    eax,0xf
c001ba22:	75 32                	jne    c001ba56 <IDE::open(int, int, void*)+0x7c>
c001ba24:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba2a:	83 e0 fc             	and    eax,0xfffffffc
c001ba2d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba34:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba3a:	83 e0 fc             	and    eax,0xfffffffc
c001ba3d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba44:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba4a:	83 e0 fc             	and    eax,0xfffffffc
c001ba4d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba54:	eb 14                	jmp    c001ba6a <IDE::open(int, int, void*)+0x90>
c001ba56:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba60:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba6a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ba71:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba7c:	89 c6                	mov    esi,eax
c001ba7e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba83:	c1 e6 10             	shl    esi,0x10
c001ba86:	89 e8                	mov    eax,ebp
c001ba88:	89 fa                	mov    edx,edi
c001ba8a:	c1 e0 0b             	shl    eax,0xb
c001ba8d:	09 f0                	or     eax,esi
c001ba8f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ba96:	c1 e6 08             	shl    esi,0x8
c001ba99:	09 c6                	or     esi,eax
c001ba9b:	89 f0                	mov    eax,esi
c001ba9d:	0d 08 00 00 80       	or     eax,0x80000008
c001baa2:	ef                   	out    dx,eax
c001baa3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001baa8:	89 ca                	mov    edx,ecx
c001baaa:	ed                   	in     eax,dx
c001baab:	c1 e8 10             	shr    eax,0x10
c001baae:	3d ff ff 00 00       	cmp    eax,0xffff
c001bab3:	0f 84 f9 00 00 00    	je     c001bbb2 <IDE::open(int, int, void*)+0x1d8>
c001bab9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001babf:	89 fa                	mov    edx,edi
c001bac1:	89 f0                	mov    eax,esi
c001bac3:	ef                   	out    dx,eax
c001bac4:	b0 fe                	mov    al,0xfe
c001bac6:	89 ca                	mov    edx,ecx
c001bac8:	ee                   	out    dx,al
c001bac9:	89 f0                	mov    eax,esi
c001bacb:	89 fa                	mov    edx,edi
c001bacd:	ef                   	out    dx,eax
c001bace:	89 ca                	mov    edx,ecx
c001bad0:	ed                   	in     eax,dx
c001bad1:	3c fe                	cmp    al,0xfe
c001bad3:	0f 85 a9 00 00 00    	jne    c001bb82 <IDE::open(int, int, void*)+0x1a8>
c001bad9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001badf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bae6:	74 33                	je     c001bb1b <IDE::open(int, int, void*)+0x141>
c001bae8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001baee:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001baf2:	40                   	inc    eax
c001baf3:	83 ec 0c             	sub    esp,0xc
c001baf6:	0f b6 c0             	movzx  eax,al
c001baf9:	50                   	push   eax
c001bafa:	55                   	push   ebp
c001bafb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001baff:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb05:	51                   	push   ecx
c001bb06:	e8 59 3a ff ff       	call   c000f564 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb0b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb10:	83 c4 1c             	add    esp,0x1c
c001bb13:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb19:	eb 0a                	jmp    c001bb25 <IDE::open(int, int, void*)+0x14b>
c001bb1b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb25:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb2c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb33:	c1 e1 10             	shl    ecx,0x10
c001bb36:	c1 e0 08             	shl    eax,0x8
c001bb39:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb3e:	09 c1                	or     ecx,eax
c001bb40:	89 fa                	mov    edx,edi
c001bb42:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb49:	c1 e0 0b             	shl    eax,0xb
c001bb4c:	09 c1                	or     ecx,eax
c001bb4e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb54:	89 c8                	mov    eax,ecx
c001bb56:	ef                   	out    dx,eax
c001bb57:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb5c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bb62:	89 f2                	mov    edx,esi
c001bb64:	ee                   	out    dx,al
c001bb65:	89 c8                	mov    eax,ecx
c001bb67:	89 fa                	mov    edx,edi
c001bb69:	ef                   	out    dx,eax
c001bb6a:	89 f2                	mov    edx,esi
c001bb6c:	ed                   	in     eax,dx
c001bb6d:	0f b6 c0             	movzx  eax,al
c001bb70:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bb76:	74 4a                	je     c001bbc2 <IDE::open(int, int, void*)+0x1e8>
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	68 a0 2a 02 c0       	push   0xc0022aa0
c001bb80:	eb 38                	jmp    c001bbba <IDE::open(int, int, void*)+0x1e0>
c001bb82:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb8b:	75 1b                	jne    c001bba8 <IDE::open(int, int, void*)+0x1ce>
c001bb8d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bb91:	3d 80 00 00 00       	cmp    eax,0x80
c001bb96:	74 07                	je     c001bb9f <IDE::open(int, int, void*)+0x1c5>
c001bb98:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bb9d:	75 09                	jne    c001bba8 <IDE::open(int, int, void*)+0x1ce>
c001bb9f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bba6:	eb 1a                	jmp    c001bbc2 <IDE::open(int, int, void*)+0x1e8>
c001bba8:	83 ec 0c             	sub    esp,0xc
c001bbab:	68 a8 2a 02 c0       	push   0xc0022aa8
c001bbb0:	eb 08                	jmp    c001bbba <IDE::open(int, int, void*)+0x1e0>
c001bbb2:	83 ec 0c             	sub    esp,0xc
c001bbb5:	68 d9 2a 02 c0       	push   0xc0022ad9
c001bbba:	e8 3e 56 ff ff       	call   c00111fd <KePanic(char const*)>
c001bbbf:	83 c4 10             	add    esp,0x10
c001bbc2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bbc9:	74 1a                	je     c001bbe5 <IDE::open(int, int, void*)+0x20b>
c001bbcb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bbd1:	83 e0 fc             	and    eax,0xfffffffc
c001bbd4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bbdb:	83 c0 08             	add    eax,0x8
c001bbde:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbe5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bbeb:	89 c2                	mov    edx,eax
c001bbed:	83 e2 0f             	and    edx,0xf
c001bbf0:	83 fa 08             	cmp    edx,0x8
c001bbf3:	75 0a                	jne    c001bbff <IDE::open(int, int, void*)+0x225>
c001bbf5:	83 e8 02             	sub    eax,0x2
c001bbf8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbff:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc05:	89 c2                	mov    edx,eax
c001bc07:	83 e2 0f             	and    edx,0xf
c001bc0a:	83 fa 08             	cmp    edx,0x8
c001bc0d:	75 0a                	jne    c001bc19 <IDE::open(int, int, void*)+0x23f>
c001bc0f:	83 e8 02             	sub    eax,0x2
c001bc12:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc19:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc20:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc27:	89 d0                	mov    eax,edx
c001bc29:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc2c:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc2f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc33:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc37:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc3b:	83 e1 3f             	and    ecx,0x3f
c001bc3e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc42:	89 f9                	mov    ecx,edi
c001bc44:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc4b:	0f b6 c9             	movzx  ecx,cl
c001bc4e:	8d 78 02             	lea    edi,[eax+0x2]
c001bc51:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc54:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc58:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc5c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc60:	83 e2 3f             	and    edx,0x3f
c001bc63:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc67:	89 f9                	mov    ecx,edi
c001bc69:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc6f:	0f b6 d1             	movzx  edx,cl
c001bc72:	8d 78 03             	lea    edi,[eax+0x3]
c001bc75:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc78:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc7c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc80:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc84:	83 e1 3f             	and    ecx,0x3f
c001bc87:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc8b:	89 f9                	mov    ecx,edi
c001bc8d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc93:	0f b6 c9             	movzx  ecx,cl
c001bc96:	8d 78 04             	lea    edi,[eax+0x4]
c001bc99:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc9c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bca0:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bca4:	89 fa                	mov    edx,edi
c001bca6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bcac:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bcb0:	83 e2 3f             	and    edx,0x3f
c001bcb3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bcb7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bcbe:	66 85 f6             	test   si,si
c001bcc1:	74 65                	je     c001bd28 <IDE::open(int, int, void*)+0x34e>
c001bcc3:	89 f9                	mov    ecx,edi
c001bcc5:	83 c0 05             	add    eax,0x5
c001bcc8:	0f b6 d1             	movzx  edx,cl
c001bccb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcce:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcd2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bcd6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bcdc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bce0:	83 e0 3f             	and    eax,0x3f
c001bce3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bce7:	eb 3f                	jmp    c001bd28 <IDE::open(int, int, void*)+0x34e>
c001bce9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bcef:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bcf6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bcfd:	05 06 02 00 00       	add    eax,0x206
c001bd02:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd09:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd10:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd17:	05 06 02 00 00       	add    eax,0x206
c001bd1c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd23:	e9 bd fe ff ff       	jmp    c001bbe5 <IDE::open(int, int, void*)+0x20b>
c001bd28:	50                   	push   eax
c001bd29:	50                   	push   eax
c001bd2a:	6a 00                	push   0x0
c001bd2c:	53                   	push   ebx
c001bd2d:	e8 30 fa ff ff       	call   c001b762 <IDE::prepareInterrupt(unsigned char)>
c001bd32:	5a                   	pop    edx
c001bd33:	59                   	pop    ecx
c001bd34:	6a 01                	push   0x1
c001bd36:	53                   	push   ebx
c001bd37:	e8 26 fa ff ff       	call   c001b762 <IDE::prepareInterrupt(unsigned char)>
c001bd3c:	83 c4 0c             	add    esp,0xc
c001bd3f:	6a 00                	push   0x0
c001bd41:	6a 00                	push   0x0
c001bd43:	53                   	push   ebx
c001bd44:	e8 47 fc ff ff       	call   c001b990 <IDE::enableIRQs(unsigned char, bool)>
c001bd49:	83 c4 0c             	add    esp,0xc
c001bd4c:	6a 00                	push   0x0
c001bd4e:	6a 01                	push   0x1
c001bd50:	53                   	push   ebx
c001bd51:	e8 3a fc ff ff       	call   c001b990 <IDE::enableIRQs(unsigned char, bool)>
c001bd56:	83 c4 10             	add    esp,0x10
c001bd59:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd60:	74 34                	je     c001bd96 <IDE::open(int, int, void*)+0x3bc>
c001bd62:	83 ec 0c             	sub    esp,0xc
c001bd65:	53                   	push   ebx
c001bd66:	6a 01                	push   0x1
c001bd68:	68 58 b9 01 c0       	push   0xc001b958
c001bd6d:	6a 0e                	push   0xe
c001bd6f:	53                   	push   ebx
c001bd70:	e8 29 08 ff ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd75:	83 c4 14             	add    esp,0x14
c001bd78:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd7e:	53                   	push   ebx
c001bd7f:	6a 01                	push   0x1
c001bd81:	68 74 b9 01 c0       	push   0xc001b974
c001bd86:	6a 0f                	push   0xf
c001bd88:	53                   	push   ebx
c001bd89:	e8 10 08 ff ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd8e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd94:	eb 38                	jmp    c001bdce <IDE::open(int, int, void*)+0x3f4>
c001bd96:	83 ec 0c             	sub    esp,0xc
c001bd99:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bda3:	53                   	push   ebx
c001bda4:	6a 00                	push   0x0
c001bda6:	68 58 b9 01 c0       	push   0xc001b958
c001bdab:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bdb1:	53                   	push   ebx
c001bdb2:	e8 e7 07 ff ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdb7:	83 c4 14             	add    esp,0x14
c001bdba:	53                   	push   ebx
c001bdbb:	6a 00                	push   0x0
c001bdbd:	68 74 b9 01 c0       	push   0xc001b974
c001bdc2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bdc8:	53                   	push   ebx
c001bdc9:	e8 d0 07 ff ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdd0:	83 c4 20             	add    esp,0x20
c001bdd3:	83 ec 0c             	sub    esp,0xc
c001bdd6:	53                   	push   ebx
c001bdd7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bdda:	83 c4 0c             	add    esp,0xc
c001bddd:	6a 07                	push   0x7
c001bddf:	6a 00                	push   0x0
c001bde1:	53                   	push   ebx
c001bde2:	e8 61 fa ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bde7:	83 c4 0c             	add    esp,0xc
c001bdea:	6a 07                	push   0x7
c001bdec:	6a 01                	push   0x1
c001bdee:	53                   	push   ebx
c001bdef:	e8 54 fa ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bdf4:	83 c4 0c             	add    esp,0xc
c001bdf7:	6a 01                	push   0x1
c001bdf9:	6a 00                	push   0x0
c001bdfb:	53                   	push   ebx
c001bdfc:	e8 8f fb ff ff       	call   c001b990 <IDE::enableIRQs(unsigned char, bool)>
c001be01:	83 c4 0c             	add    esp,0xc
c001be04:	6a 01                	push   0x1
c001be06:	6a 01                	push   0x1
c001be08:	53                   	push   ebx
c001be09:	e8 82 fb ff ff       	call   c001b990 <IDE::enableIRQs(unsigned char, bool)>
c001be0e:	83 c4 2c             	add    esp,0x2c
c001be11:	31 c0                	xor    eax,eax
c001be13:	5b                   	pop    ebx
c001be14:	5e                   	pop    esi
c001be15:	5f                   	pop    edi
c001be16:	5d                   	pop    ebp
c001be17:	c3                   	ret    

c001be18 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be18:	55                   	push   ebp
c001be19:	57                   	push   edi
c001be1a:	56                   	push   esi
c001be1b:	53                   	push   ebx
c001be1c:	83 ec 1c             	sub    esp,0x1c
c001be1f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be27:	8d 42 f8             	lea    eax,[edx-0x8]
c001be2a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be2e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be32:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be36:	3c 03                	cmp    al,0x3
c001be38:	77 5a                	ja     c001be94 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be3a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be3e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be42:	0f b6 db             	movzx  ebx,bl
c001be45:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be48:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be4d:	0c 80                	or     al,0x80
c001be4f:	50                   	push   eax
c001be50:	6a 0c                	push   0xc
c001be52:	53                   	push   ebx
c001be53:	56                   	push   esi
c001be54:	e8 2f f9 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be59:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be62:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be66:	0f b6 d2             	movzx  edx,dl
c001be69:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be6d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be6f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be74:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be78:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be7c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be80:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be88:	83 c4 2c             	add    esp,0x2c
c001be8b:	5b                   	pop    ebx
c001be8c:	5e                   	pop    esi
c001be8d:	5f                   	pop    edi
c001be8e:	5d                   	pop    ebp
c001be8f:	e9 f4 f8 ff ff       	jmp    c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be94:	0f b6 c2             	movzx  eax,dl
c001be97:	83 f8 07             	cmp    eax,0x7
c001be9a:	77 12                	ja     c001beae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001be9c:	0f b6 c2             	movzx  eax,dl
c001be9f:	0f b6 db             	movzx  ebx,bl
c001bea2:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001beaa:	01 c2                	add    edx,eax
c001beac:	eb 2f                	jmp    c001bedd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001beae:	83 f8 0d             	cmp    eax,0xd
c001beb1:	77 13                	ja     c001bec6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001beb3:	0f b6 db             	movzx  ebx,bl
c001beb6:	0f b6 d2             	movzx  edx,dl
c001beb9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bec0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bec4:	eb 17                	jmp    c001bedd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bec6:	83 f8 15             	cmp    eax,0x15
c001bec9:	77 14                	ja     c001bedf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001becb:	0f b6 db             	movzx  ebx,bl
c001bece:	0f b6 d2             	movzx  edx,dl
c001bed1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bed9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bedd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bedf:	83 c4 1c             	add    esp,0x1c
c001bee2:	5b                   	pop    ebx
c001bee3:	5e                   	pop    esi
c001bee4:	5f                   	pop    edi
c001bee5:	5d                   	pop    ebp
c001bee6:	c3                   	ret    
c001bee7:	90                   	nop

c001bee8 <IDE::detect()>:
c001bee8:	55                   	push   ebp
c001bee9:	57                   	push   edi
c001beea:	56                   	push   esi
c001beeb:	53                   	push   ebx
c001beec:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bef2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bef9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf00:	0f 85 a4 02 00 00    	jne    c001c1aa <IDE::detect()+0x2c2>
c001bf06:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf0d:	31 f6                	xor    esi,esi
c001bf0f:	31 ed                	xor    ebp,ebp
c001bf11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf19:	89 e8                	mov    eax,ebp
c001bf1b:	c1 e0 06             	shl    eax,0x6
c001bf1e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf26:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf2a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf32:	c1 e0 04             	shl    eax,0x4
c001bf35:	83 c8 a0             	or     eax,0xffffffa0
c001bf38:	0f b6 c0             	movzx  eax,al
c001bf3b:	50                   	push   eax
c001bf3c:	6a 06                	push   0x6
c001bf3e:	56                   	push   esi
c001bf3f:	53                   	push   ebx
c001bf40:	e8 43 f8 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf45:	83 c4 0c             	add    esp,0xc
c001bf48:	6a 0c                	push   0xc
c001bf4a:	56                   	push   esi
c001bf4b:	53                   	push   ebx
c001bf4c:	e8 f7 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bf51:	83 c4 0c             	add    esp,0xc
c001bf54:	6a 0c                	push   0xc
c001bf56:	56                   	push   esi
c001bf57:	53                   	push   ebx
c001bf58:	e8 eb f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bf5d:	83 c4 0c             	add    esp,0xc
c001bf60:	6a 0c                	push   0xc
c001bf62:	56                   	push   esi
c001bf63:	53                   	push   ebx
c001bf64:	e8 df f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bf69:	83 c4 0c             	add    esp,0xc
c001bf6c:	6a 0c                	push   0xc
c001bf6e:	56                   	push   esi
c001bf6f:	53                   	push   ebx
c001bf70:	e8 d3 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bf75:	68 ec 00 00 00       	push   0xec
c001bf7a:	6a 07                	push   0x7
c001bf7c:	56                   	push   esi
c001bf7d:	53                   	push   ebx
c001bf7e:	e8 05 f8 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf83:	83 c4 1c             	add    esp,0x1c
c001bf86:	6a 0c                	push   0xc
c001bf88:	56                   	push   esi
c001bf89:	53                   	push   ebx
c001bf8a:	e8 b9 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bf8f:	83 c4 0c             	add    esp,0xc
c001bf92:	6a 0c                	push   0xc
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	e8 ad f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bf9b:	83 c4 0c             	add    esp,0xc
c001bf9e:	6a 0c                	push   0xc
c001bfa0:	56                   	push   esi
c001bfa1:	53                   	push   ebx
c001bfa2:	e8 a1 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bfa7:	83 c4 0c             	add    esp,0xc
c001bfaa:	6a 0c                	push   0xc
c001bfac:	56                   	push   esi
c001bfad:	53                   	push   ebx
c001bfae:	e8 95 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bfb3:	83 c4 0c             	add    esp,0xc
c001bfb6:	6a 0c                	push   0xc
c001bfb8:	56                   	push   esi
c001bfb9:	53                   	push   ebx
c001bfba:	e8 89 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	84 c0                	test   al,al
c001bfc4:	0f 84 60 01 00 00    	je     c001c12a <IDE::detect()+0x242>
c001bfca:	31 ff                	xor    edi,edi
c001bfcc:	50                   	push   eax
c001bfcd:	6a 0c                	push   0xc
c001bfcf:	56                   	push   esi
c001bfd0:	53                   	push   ebx
c001bfd1:	e8 72 f8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001bfd6:	83 c4 10             	add    esp,0x10
c001bfd9:	a8 01                	test   al,0x1
c001bfdb:	0f 85 6a 01 00 00    	jne    c001c14b <IDE::detect()+0x263>
c001bfe1:	a8 80                	test   al,0x80
c001bfe3:	75 04                	jne    c001bfe9 <IDE::detect()+0x101>
c001bfe5:	a8 08                	test   al,0x8
c001bfe7:	75 23                	jne    c001c00c <IDE::detect()+0x124>
c001bfe9:	47                   	inc    edi
c001bfea:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bff0:	7e da                	jle    c001bfcc <IDE::detect()+0xe4>
c001bff2:	83 ec 0c             	sub    esp,0xc
c001bff5:	6a 32                	push   0x32
c001bff7:	e8 f0 9d ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001bffc:	83 c4 10             	add    esp,0x10
c001bfff:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c005:	75 c5                	jne    c001bfcc <IDE::detect()+0xe4>
c001c007:	e9 3f 01 00 00       	jmp    c001c14b <IDE::detect()+0x263>
c001c00c:	31 c9                	xor    ecx,ecx
c001c00e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c012:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c016:	83 ec 0c             	sub    esp,0xc
c001c019:	68 80 00 00 00       	push   0x80
c001c01e:	57                   	push   edi
c001c01f:	6a 00                	push   0x0
c001c021:	56                   	push   esi
c001c022:	53                   	push   ebx
c001c023:	e8 f0 fd ff ff       	call   c001be18 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c028:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c02d:	89 e8                	mov    eax,ebp
c001c02f:	89 d1                	mov    ecx,edx
c001c031:	c1 e0 06             	shl    eax,0x6
c001c034:	01 d8                	add    eax,ebx
c001c036:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c03d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c044:	89 f2                	mov    edx,esi
c001c046:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c04c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c050:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c056:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c05a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c061:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c069:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c070:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c078:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c07e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c085:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c08b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c08f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c093:	83 c4 20             	add    esp,0x20
c001c096:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c099:	83 c0 02             	add    eax,0x2
c001c09c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c0a2:	83 c7 02             	add    edi,0x2
c001c0a5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c0a8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c0ae:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c0b2:	75 e2                	jne    c001c096 <IDE::detect()+0x1ae>
c001c0b4:	89 e8                	mov    eax,ebp
c001c0b6:	c1 e0 06             	shl    eax,0x6
c001c0b9:	01 d8                	add    eax,ebx
c001c0bb:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c0c2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0c9:	c1 ea 09             	shr    edx,0x9
c001c0cc:	83 e2 01             	and    edx,0x1
c001c0cf:	80 e1 01             	and    cl,0x1
c001c0d2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0d8:	75 22                	jne    c001c0fc <IDE::detect()+0x214>
c001c0da:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c0e1:	74 46                	je     c001c129 <IDE::detect()+0x241>
c001c0e3:	83 ec 0c             	sub    esp,0xc
c001c0e6:	68 7c 01 00 00       	push   0x17c
c001c0eb:	e8 c6 b9 fe ff       	call   c0007ab6 <malloc>
c001c0f0:	89 c7                	mov    edi,eax
c001c0f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0f5:	e8 1a 05 00 00       	call   c001c614 <ATA::ATA()>
c001c0fa:	eb 17                	jmp    c001c113 <IDE::detect()+0x22b>
c001c0fc:	83 ec 0c             	sub    esp,0xc
c001c0ff:	68 84 01 00 00       	push   0x184
c001c104:	e8 ad b9 fe ff       	call   c0007ab6 <malloc>
c001c109:	89 c7                	mov    edi,eax
c001c10b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c10e:	e8 45 0e 00 00       	call   c001cf58 <ATAPI::ATAPI()>
c001c113:	5a                   	pop    edx
c001c114:	59                   	pop    ecx
c001c115:	57                   	push   edi
c001c116:	53                   	push   ebx
c001c117:	e8 d6 04 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c001c11c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c11e:	53                   	push   ebx
c001c11f:	55                   	push   ebp
c001c120:	6a 00                	push   0x0
c001c122:	57                   	push   edi
c001c123:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c126:	83 c4 20             	add    esp,0x20
c001c129:	45                   	inc    ebp
c001c12a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c12f:	74 0d                	je     c001c13e <IDE::detect()+0x256>
c001c131:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c139:	e9 db fd ff ff       	jmp    c001bf19 <IDE::detect()+0x31>
c001c13e:	4e                   	dec    esi
c001c13f:	74 69                	je     c001c1aa <IDE::detect()+0x2c2>
c001c141:	be 01 00 00 00       	mov    esi,0x1
c001c146:	e9 c6 fd ff ff       	jmp    c001bf11 <IDE::detect()+0x29>
c001c14b:	50                   	push   eax
c001c14c:	6a 04                	push   0x4
c001c14e:	56                   	push   esi
c001c14f:	53                   	push   ebx
c001c150:	e8 f3 f6 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001c155:	83 c4 0c             	add    esp,0xc
c001c158:	89 c7                	mov    edi,eax
c001c15a:	6a 05                	push   0x5
c001c15c:	56                   	push   esi
c001c15d:	53                   	push   ebx
c001c15e:	e8 e5 f6 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001c163:	83 c4 10             	add    esp,0x10
c001c166:	89 f9                	mov    ecx,edi
c001c168:	0f b6 c0             	movzx  eax,al
c001c16b:	0f b6 f9             	movzx  edi,cl
c001c16e:	83 ff 14             	cmp    edi,0x14
c001c171:	75 07                	jne    c001c17a <IDE::detect()+0x292>
c001c173:	3d eb 00 00 00       	cmp    eax,0xeb
c001c178:	eb 0a                	jmp    c001c184 <IDE::detect()+0x29c>
c001c17a:	3d 96 00 00 00       	cmp    eax,0x96
c001c17f:	75 a9                	jne    c001c12a <IDE::detect()+0x242>
c001c181:	83 ff 69             	cmp    edi,0x69
c001c184:	75 a4                	jne    c001c12a <IDE::detect()+0x242>
c001c186:	68 a1 00 00 00       	push   0xa1
c001c18b:	6a 07                	push   0x7
c001c18d:	56                   	push   esi
c001c18e:	53                   	push   ebx
c001c18f:	e8 f4 f5 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c194:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c19b:	e8 4c 9c ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001c1a0:	83 c4 10             	add    esp,0x10
c001c1a3:	b1 01                	mov    cl,0x1
c001c1a5:	e9 64 fe ff ff       	jmp    c001c00e <IDE::detect()+0x126>
c001c1aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1b0:	5b                   	pop    ebx
c001c1b1:	5e                   	pop    esi
c001c1b2:	5f                   	pop    edi
c001c1b3:	5d                   	pop    ebp
c001c1b4:	c3                   	ret    
c001c1b5:	90                   	nop

c001c1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1b6:	55                   	push   ebp
c001c1b7:	57                   	push   edi
c001c1b8:	56                   	push   esi
c001c1b9:	53                   	push   ebx
c001c1ba:	83 ec 1c             	sub    esp,0x1c
c001c1bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c1cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1d1:	88 c3                	mov    bl,al
c001c1d3:	25 ff 00 00 00       	and    eax,0xff
c001c1d8:	0f 84 88 00 00 00    	je     c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c1de:	83 ec 0c             	sub    esp,0xc
c001c1e1:	89 c7                	mov    edi,eax
c001c1e3:	68 03 2b 02 c0       	push   0xc0022b03
c001c1e8:	e8 58 e7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	83 ff 01             	cmp    edi,0x1
c001c1f3:	74 6b                	je     c001c260 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c1f5:	83 ff 02             	cmp    edi,0x2
c001c1f8:	75 58                	jne    c001c252 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c1fa:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c1ff:	01 ff                	add    edi,edi
c001c201:	50                   	push   eax
c001c202:	09 fe                	or     esi,edi
c001c204:	6a 01                	push   0x1
c001c206:	89 f0                	mov    eax,esi
c001c208:	0f b6 f0             	movzx  esi,al
c001c20b:	c1 e6 06             	shl    esi,0x6
c001c20e:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c216:	50                   	push   eax
c001c217:	55                   	push   ebp
c001c218:	e8 2b f6 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001c21d:	83 c4 10             	add    esp,0x10
c001c220:	a8 01                	test   al,0x1
c001c222:	74 02                	je     c001c226 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c224:	b3 07                	mov    bl,0x7
c001c226:	a8 02                	test   al,0x2
c001c228:	74 02                	je     c001c22c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c22a:	b3 03                	mov    bl,0x3
c001c22c:	a8 04                	test   al,0x4
c001c22e:	74 02                	je     c001c232 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c230:	b3 14                	mov    bl,0x14
c001c232:	a8 08                	test   al,0x8
c001c234:	74 02                	je     c001c238 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c236:	b3 03                	mov    bl,0x3
c001c238:	a8 10                	test   al,0x10
c001c23a:	74 02                	je     c001c23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c23c:	b3 15                	mov    bl,0x15
c001c23e:	a8 20                	test   al,0x20
c001c240:	74 02                	je     c001c244 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c242:	b3 03                	mov    bl,0x3
c001c244:	a8 40                	test   al,0x40
c001c246:	74 02                	je     c001c24a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c248:	b3 16                	mov    bl,0x16
c001c24a:	a8 80                	test   al,0x80
c001c24c:	74 18                	je     c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c24e:	b3 0d                	mov    bl,0xd
c001c250:	eb 14                	jmp    c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c252:	83 ff 03             	cmp    edi,0x3
c001c255:	74 0d                	je     c001c264 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c257:	83 ff 04             	cmp    edi,0x4
c001c25a:	75 0a                	jne    c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c25c:	b3 08                	mov    bl,0x8
c001c25e:	eb 06                	jmp    c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c260:	b3 13                	mov    bl,0x13
c001c262:	eb 02                	jmp    c001c266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c264:	b3 17                	mov    bl,0x17
c001c266:	83 c4 1c             	add    esp,0x1c
c001c269:	88 d8                	mov    al,bl
c001c26b:	5b                   	pop    ebx
c001c26c:	5e                   	pop    esi
c001c26d:	5f                   	pop    edi
c001c26e:	5d                   	pop    ebp
c001c26f:	c3                   	ret    

c001c270 <IDE::polling(unsigned char, unsigned int)>:
c001c270:	57                   	push   edi
c001c271:	56                   	push   esi
c001c272:	53                   	push   ebx
c001c273:	bb 04 00 00 00       	mov    ebx,0x4
c001c278:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c27c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c281:	52                   	push   edx
c001c282:	6a 0c                	push   0xc
c001c284:	56                   	push   esi
c001c285:	57                   	push   edi
c001c286:	e8 bd f5 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001c28b:	83 c4 10             	add    esp,0x10
c001c28e:	4b                   	dec    ebx
c001c28f:	75 f0                	jne    c001c281 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c291:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c296:	50                   	push   eax
c001c297:	6a 0c                	push   0xc
c001c299:	56                   	push   esi
c001c29a:	57                   	push   edi
c001c29b:	e8 a8 f5 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001c2a0:	83 c4 10             	add    esp,0x10
c001c2a3:	a8 01                	test   al,0x1
c001c2a5:	75 17                	jne    c001c2be <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2a7:	a8 20                	test   al,0x20
c001c2a9:	75 0f                	jne    c001c2ba <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c2ab:	4b                   	dec    ebx
c001c2ac:	74 10                	je     c001c2be <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c2ae:	a8 80                	test   al,0x80
c001c2b0:	75 e4                	jne    c001c296 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2b2:	a8 08                	test   al,0x8
c001c2b4:	74 e0                	je     c001c296 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2b6:	31 c0                	xor    eax,eax
c001c2b8:	eb 06                	jmp    c001c2c0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2ba:	b0 01                	mov    al,0x1
c001c2bc:	eb 02                	jmp    c001c2c0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2be:	b0 02                	mov    al,0x2
c001c2c0:	5b                   	pop    ebx
c001c2c1:	5e                   	pop    esi
c001c2c2:	5f                   	pop    edi
c001c2c3:	c3                   	ret    

c001c2c4 <SATABus::close(int, int, void*)>:
c001c2c4:	31 c0                	xor    eax,eax
c001c2c6:	c3                   	ret    
c001c2c7:	90                   	nop

c001c2c8 <SATABus::detect()>:
c001c2c8:	c3                   	ret    
c001c2c9:	90                   	nop

c001c2ca <SATABus::SATABus()>:
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d1:	83 ec 08             	sub    esp,0x8
c001c2d4:	68 3c 2b 02 c0       	push   0xc0022b3c
c001c2d9:	50                   	push   eax
c001c2da:	e8 55 06 ff ff       	call   c000c934 <HardDiskController::HardDiskController(char const*)>
c001c2df:	83 c4 10             	add    esp,0x10
c001c2e2:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c001c2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2eb:	89 10                	mov    DWORD PTR [eax],edx
c001c2ed:	83 ec 0c             	sub    esp,0xc
c001c2f0:	6a 50                	push   0x50
c001c2f2:	e8 97 bb fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	89 c2                	mov    edx,eax
c001c2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c300:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c306:	83 ec 0c             	sub    esp,0xc
c001c309:	6a 50                	push   0x50
c001c30b:	e8 fd d2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c310:	83 c4 10             	add    esp,0x10
c001c313:	89 c2                	mov    edx,eax
c001c315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c319:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c31f:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c324:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c328:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c32e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c332:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c338:	83 ec 0c             	sub    esp,0xc
c001c33b:	6a 03                	push   0x3
c001c33d:	6a 50                	push   0x50
c001c33f:	51                   	push   ecx
c001c340:	52                   	push   edx
c001c341:	50                   	push   eax
c001c342:	e8 d3 db fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c347:	83 c4 20             	add    esp,0x20
c001c34a:	90                   	nop
c001c34b:	83 c4 0c             	add    esp,0xc
c001c34e:	c3                   	ret    
c001c34f:	90                   	nop

c001c350 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c350:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c354:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c357:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c35a:	09 c2                	or     edx,eax
c001c35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c360:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c366:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c368:	31 c0                	xor    eax,eax
c001c36a:	c1 e9 08             	shr    ecx,0x8
c001c36d:	83 e1 0f             	and    ecx,0xf
c001c370:	39 c8                	cmp    eax,ecx
c001c372:	74 0a                	je     c001c37e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c374:	f6 c2 01             	test   dl,0x1
c001c377:	74 08                	je     c001c381 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c379:	d1 ea                	shr    edx,1
c001c37b:	40                   	inc    eax
c001c37c:	eb f2                	jmp    c001c370 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c37e:	83 c8 ff             	or     eax,0xffffffff
c001c381:	c3                   	ret    

c001c382 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c382:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c386:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c389:	89 c2                	mov    edx,eax
c001c38b:	c1 ea 08             	shr    edx,0x8
c001c38e:	83 e2 0f             	and    edx,0xf
c001c391:	4a                   	dec    edx
c001c392:	75 32                	jne    c001c3c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c394:	83 e0 0f             	and    eax,0xf
c001c397:	83 f8 03             	cmp    eax,0x3
c001c39a:	75 2a                	jne    c001c3c6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c39c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c39f:	b8 02 00 00 00       	mov    eax,0x2
c001c3a4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c3aa:	74 1c                	je     c001c3c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3ac:	b8 04 00 00 00       	mov    eax,0x4
c001c3b1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c3b7:	74 0f                	je     c001c3c8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3b9:	31 c0                	xor    eax,eax
c001c3bb:	83 fa 03             	cmp    edx,0x3
c001c3be:	0f 94 c0             	sete   al
c001c3c1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c3c5:	c3                   	ret    
c001c3c6:	31 c0                	xor    eax,eax
c001c3c8:	c3                   	ret    
c001c3c9:	90                   	nop

c001c3ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3d1:	0f ba e2 0f          	bt     edx,0xf
c001c3d5:	72 f7                	jb     c001c3ce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c3d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3da:	83 ca 10             	or     edx,0x10
c001c3dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3e3:	83 ca 01             	or     edx,0x1
c001c3e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3e9:	c3                   	ret    

c001c3ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3f1:	83 e2 fe             	and    edx,0xfffffffe
c001c3f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3f7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3fa:	83 e2 ef             	and    edx,0xffffffef
c001c3fd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c400:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c403:	0f ba e2 0e          	bt     edx,0xe
c001c407:	72 f7                	jb     c001c400 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c409:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c40c:	0f ba e2 0f          	bt     edx,0xf
c001c410:	72 ee                	jb     c001c400 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c412:	c3                   	ret    
c001c413:	90                   	nop

c001c414 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c414:	55                   	push   ebp
c001c415:	57                   	push   edi
c001c416:	56                   	push   esi
c001c417:	53                   	push   ebx
c001c418:	83 ec 1c             	sub    esp,0x1c
c001c41b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c41f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c423:	53                   	push   ebx
c001c424:	56                   	push   esi
c001c425:	e8 c0 ff ff ff       	call   c001c3ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c42a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c42e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	c1 e5 0a             	shl    ebp,0xa
c001c43a:	01 e8                	add    eax,ebp
c001c43c:	89 03                	mov    DWORD PTR [ebx],eax
c001c43e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c440:	68 00 04 00 00       	push   0x400
c001c445:	6a 00                	push   0x0
c001c447:	50                   	push   eax
c001c448:	e8 a3 40 fe ff       	call   c00004f0 <memset>
c001c44d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c453:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c457:	01 e8                	add    eax,ebp
c001c459:	83 c4 1c             	add    esp,0x1c
c001c45c:	89 03                	mov    DWORD PTR [ebx],eax
c001c45e:	c1 e2 08             	shl    edx,0x8
c001c461:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c468:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c46e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c474:	01 f8                	add    eax,edi
c001c476:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c479:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c47c:	68 00 01 00 00       	push   0x100
c001c481:	6a 00                	push   0x0
c001c483:	50                   	push   eax
c001c484:	e8 67 40 fe ff       	call   c00004f0 <memset>
c001c489:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c48f:	01 fa                	add    edx,edi
c001c491:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c495:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c498:	c1 e7 0d             	shl    edi,0xd
c001c49b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c4a2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c4a8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c4ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4b2:	31 ff                	xor    edi,edi
c001c4b4:	83 c4 10             	add    esp,0x10
c001c4b7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c4bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4c1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c4c7:	83 c5 20             	add    ebp,0x20
c001c4ca:	01 f8                	add    eax,edi
c001c4cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c4cf:	52                   	push   edx
c001c4d0:	68 00 01 00 00       	push   0x100
c001c4d5:	6a 00                	push   0x0
c001c4d7:	50                   	push   eax
c001c4d8:	e8 13 40 fe ff       	call   c00004f0 <memset>
c001c4dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4e1:	83 c4 10             	add    esp,0x10
c001c4e4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c4ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c4f1:	01 f8                	add    eax,edi
c001c4f3:	81 c7 00 01 00 00    	add    edi,0x100
c001c4f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c4fc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c502:	75 b3                	jne    c001c4b7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c504:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c50b:	50                   	push   eax
c001c50c:	50                   	push   eax
c001c50d:	53                   	push   ebx
c001c50e:	56                   	push   esi
c001c50f:	e8 b6 fe ff ff       	call   c001c3ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c514:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c51b:	83 c4 2c             	add    esp,0x2c
c001c51e:	5b                   	pop    ebx
c001c51f:	5e                   	pop    esi
c001c520:	5f                   	pop    edi
c001c521:	5d                   	pop    ebp
c001c522:	c3                   	ret    
c001c523:	90                   	nop

c001c524 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c524:	55                   	push   ebp
c001c525:	57                   	push   edi
c001c526:	56                   	push   esi
c001c527:	53                   	push   ebx
c001c528:	31 db                	xor    ebx,ebx
c001c52a:	83 ec 0c             	sub    esp,0xc
c001c52d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c531:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c535:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c538:	f7 c7 01 00 00 00    	test   edi,0x1
c001c53e:	74 7a                	je     c001c5ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c540:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c544:	89 d8                	mov    eax,ebx
c001c546:	c1 e0 07             	shl    eax,0x7
c001c549:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c550:	55                   	push   ebp
c001c551:	56                   	push   esi
c001c552:	e8 2b fe ff ff       	call   c001c382 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c557:	5a                   	pop    edx
c001c558:	83 f8 01             	cmp    eax,0x1
c001c55b:	59                   	pop    ecx
c001c55c:	75 21                	jne    c001c57f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c55e:	50                   	push   eax
c001c55f:	53                   	push   ebx
c001c560:	55                   	push   ebp
c001c561:	56                   	push   esi
c001c562:	e8 ad fe ff ff       	call   c001c414 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c567:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c56e:	e8 43 b5 fe ff       	call   c0007ab6 <malloc>
c001c573:	89 c5                	mov    ebp,eax
c001c575:	89 04 24             	mov    DWORD PTR [esp],eax
c001c578:	e8 99 10 00 00       	call   c001d616 <SATA::SATA()>
c001c57d:	eb 24                	jmp    c001c5a3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c57f:	83 f8 04             	cmp    eax,0x4
c001c582:	75 36                	jne    c001c5ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c584:	51                   	push   ecx
c001c585:	53                   	push   ebx
c001c586:	55                   	push   ebp
c001c587:	56                   	push   esi
c001c588:	e8 87 fe ff ff       	call   c001c414 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c58d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c594:	e8 1d b5 fe ff       	call   c0007ab6 <malloc>
c001c599:	89 c5                	mov    ebp,eax
c001c59b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c59e:	e8 d5 17 00 00       	call   c001dd78 <SATAPI::SATAPI()>
c001c5a3:	58                   	pop    eax
c001c5a4:	5a                   	pop    edx
c001c5a5:	55                   	push   ebp
c001c5a6:	56                   	push   esi
c001c5a7:	e8 46 00 ff ff       	call   c000c5f2 <Device::addChild(Device*)>
c001c5ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c5af:	56                   	push   esi
c001c5b0:	6a 00                	push   0x0
c001c5b2:	53                   	push   ebx
c001c5b3:	55                   	push   ebp
c001c5b4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5b7:	83 c4 20             	add    esp,0x20
c001c5ba:	d1 ef                	shr    edi,1
c001c5bc:	43                   	inc    ebx
c001c5bd:	83 fb 20             	cmp    ebx,0x20
c001c5c0:	0f 85 72 ff ff ff    	jne    c001c538 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c5c6:	83 c4 0c             	add    esp,0xc
c001c5c9:	5b                   	pop    ebx
c001c5ca:	5e                   	pop    esi
c001c5cb:	5f                   	pop    edi
c001c5cc:	5d                   	pop    ebp
c001c5cd:	c3                   	ret    

c001c5ce <SATABus::open(int, int, void*)>:
c001c5ce:	83 ec 14             	sub    esp,0x14
c001c5d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5d5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c5db:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c5e1:	52                   	push   edx
c001c5e2:	50                   	push   eax
c001c5e3:	e8 3c ff ff ff       	call   c001c524 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c5e8:	31 c0                	xor    eax,eax
c001c5ea:	83 c4 1c             	add    esp,0x1c
c001c5ed:	c3                   	ret    

c001c5ee <ATA::close(int, int, void*)>:
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c5fb:	85 c0                	test   eax,eax
c001c5fd:	74 0c                	je     c001c60b <ATA::close(int, int, void*)+0x1d>
c001c5ff:	83 ec 0c             	sub    esp,0xc
c001c602:	8b 10                	mov    edx,DWORD PTR [eax]
c001c604:	50                   	push   eax
c001c605:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c608:	83 c4 10             	add    esp,0x10
c001c60b:	31 c0                	xor    eax,eax
c001c60d:	83 c4 0c             	add    esp,0xc
c001c610:	c3                   	ret    
c001c611:	90                   	nop

c001c612 <ATA::powerSaving(PowerSavingLevel)>:
c001c612:	c3                   	ret    
c001c613:	90                   	nop

c001c614 <ATA::ATA()>:
c001c614:	83 ec 0c             	sub    esp,0xc
c001c617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61b:	83 ec 04             	sub    esp,0x4
c001c61e:	68 00 02 00 00       	push   0x200
c001c623:	68 35 2c 02 c0       	push   0xc0022c35
c001c628:	50                   	push   eax
c001c629:	e8 90 03 ff ff       	call   c000c9be <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c62e:	83 c4 10             	add    esp,0x10
c001c631:	ba a8 2b 02 c0       	mov    edx,0xc0022ba8
c001c636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63a:	89 10                	mov    DWORD PTR [eax],edx
c001c63c:	90                   	nop
c001c63d:	83 c4 0c             	add    esp,0xc
c001c640:	c3                   	ret    
c001c641:	90                   	nop

c001c642 <ATA::flush(bool)>:
c001c642:	53                   	push   ebx
c001c643:	83 ec 08             	sub    esp,0x8
c001c646:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c64a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c64f:	83 f8 01             	cmp    eax,0x1
c001c652:	19 c0                	sbb    eax,eax
c001c654:	83 e0 fd             	and    eax,0xfffffffd
c001c657:	05 ea 00 00 00       	add    eax,0xea
c001c65c:	50                   	push   eax
c001c65d:	6a 07                	push   0x7
c001c65f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c666:	50                   	push   eax
c001c667:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c66d:	e8 16 f1 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c672:	83 c4 0c             	add    esp,0xc
c001c675:	6a 00                	push   0x0
c001c677:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c67e:	50                   	push   eax
c001c67f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c685:	e8 e6 fb ff ff       	call   c001c270 <IDE::polling(unsigned char, unsigned int)>
c001c68a:	83 c4 18             	add    esp,0x18
c001c68d:	5b                   	pop    ebx
c001c68e:	c3                   	ret    
c001c68f:	90                   	nop

c001c690 <ATA::readyForCommand()>:
c001c690:	56                   	push   esi
c001c691:	53                   	push   ebx
c001c692:	53                   	push   ebx
c001c693:	31 db                	xor    ebx,ebx
c001c695:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c699:	51                   	push   ecx
c001c69a:	6a 0c                	push   0xc
c001c69c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c6a3:	50                   	push   eax
c001c6a4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c6aa:	e8 99 f1 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	a8 88                	test   al,0x88
c001c6b4:	74 1f                	je     c001c6d5 <ATA::readyForCommand()+0x45>
c001c6b6:	43                   	inc    ebx
c001c6b7:	83 fb 63             	cmp    ebx,0x63
c001c6ba:	7e dd                	jle    c001c699 <ATA::readyForCommand()+0x9>
c001c6bc:	83 ec 0c             	sub    esp,0xc
c001c6bf:	6a 0a                	push   0xa
c001c6c1:	e8 26 97 ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6cf:	75 c8                	jne    c001c699 <ATA::readyForCommand()+0x9>
c001c6d1:	31 c0                	xor    eax,eax
c001c6d3:	eb 02                	jmp    c001c6d7 <ATA::readyForCommand()+0x47>
c001c6d5:	b0 01                	mov    al,0x1
c001c6d7:	5a                   	pop    edx
c001c6d8:	5b                   	pop    ebx
c001c6d9:	5e                   	pop    esi
c001c6da:	c3                   	ret    
c001c6db:	90                   	nop

c001c6dc <ATA::access(unsigned long long, int, void*, bool)>:
c001c6dc:	55                   	push   ebp
c001c6dd:	57                   	push   edi
c001c6de:	56                   	push   esi
c001c6df:	53                   	push   ebx
c001c6e0:	83 ec 2c             	sub    esp,0x2c
c001c6e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c6e7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c6eb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c6ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6f3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6f7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c6fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c6ff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c705:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c709:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c70f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c713:	c1 e0 06             	shl    eax,0x6
c001c716:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c71e:	74 5d                	je     c001c77d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c720:	89 fa                	mov    edx,edi
c001c722:	89 f0                	mov    eax,esi
c001c724:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c728:	c1 ea 1c             	shr    edx,0x1c
c001c72b:	89 d1                	mov    ecx,edx
c001c72d:	09 c1                	or     ecx,eax
c001c72f:	74 25                	je     c001c756 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c731:	31 ed                	xor    ebp,ebp
c001c733:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c73a:	89 fa                	mov    edx,edi
c001c73c:	89 f0                	mov    eax,esi
c001c73e:	0f ad d0             	shrd   eax,edx,cl
c001c741:	d3 ea                	shr    edx,cl
c001c743:	f6 c1 20             	test   cl,0x20
c001c746:	74 02                	je     c001c74a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c748:	89 d0                	mov    eax,edx
c001c74a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c74e:	45                   	inc    ebp
c001c74f:	83 fd 06             	cmp    ebp,0x6
c001c752:	75 df                	jne    c001c733 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c754:	eb 76                	jmp    c001c7cc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c756:	89 f0                	mov    eax,esi
c001c758:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c75d:	89 fa                	mov    edx,edi
c001c75f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c766:	0f ac d0 10          	shrd   eax,edx,0x10
c001c76a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c76f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c773:	c1 ee 18             	shr    esi,0x18
c001c776:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c77b:	eb 56                	jmp    c001c7d3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c77d:	6a 00                	push   0x0
c001c77f:	6a 3f                	push   0x3f
c001c781:	57                   	push   edi
c001c782:	56                   	push   esi
c001c783:	e8 a8 2a 00 00       	call   c001f230 <__umoddi3>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	40                   	inc    eax
c001c78c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c790:	6a 00                	push   0x0
c001c792:	68 f0 03 00 00       	push   0x3f0
c001c797:	57                   	push   edi
c001c798:	56                   	push   esi
c001c799:	e8 92 29 00 00       	call   c001f130 <__udivdi3>
c001c79e:	83 c4 10             	add    esp,0x10
c001c7a1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c7a6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7ad:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7b2:	6a 00                	push   0x0
c001c7b4:	6a 3f                	push   0x3f
c001c7b6:	57                   	push   edi
c001c7b7:	56                   	push   esi
c001c7b8:	e8 73 29 00 00       	call   c001f130 <__udivdi3>
c001c7bd:	83 c4 10             	add    esp,0x10
c001c7c0:	83 e0 0f             	and    eax,0xf
c001c7c3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c7c8:	89 c6                	mov    esi,eax
c001c7ca:	eb 07                	jmp    c001c7d3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7cc:	31 f6                	xor    esi,esi
c001c7ce:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c7d3:	bf 01 00 00 00       	mov    edi,0x1
c001c7d8:	50                   	push   eax
c001c7d9:	6a 00                	push   0x0
c001c7db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7e2:	50                   	push   eax
c001c7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7e7:	e8 a4 f1 ff ff       	call   c001b990 <IDE::enableIRQs(unsigned char, bool)>
c001c7ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ef:	e8 9c fe ff ff       	call   c001c690 <ATA::readyForCommand()>
c001c7f4:	83 c4 10             	add    esp,0x10
c001c7f7:	84 c0                	test   al,al
c001c7f9:	0f 84 69 02 00 00    	je     c001ca68 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c7ff:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c805:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c80b:	c1 e0 04             	shl    eax,0x4
c001c80e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c815:	09 c6                	or     esi,eax
c001c817:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c81c:	75 05                	jne    c001c823 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c81e:	83 ce a0             	or     esi,0xffffffa0
c001c821:	eb 03                	jmp    c001c826 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c823:	83 ce e0             	or     esi,0xffffffe0
c001c826:	89 f0                	mov    eax,esi
c001c828:	0f b6 f0             	movzx  esi,al
c001c82b:	56                   	push   esi
c001c82c:	6a 06                	push   0x6
c001c82e:	51                   	push   ecx
c001c82f:	52                   	push   edx
c001c830:	e8 53 ef ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c835:	83 c4 10             	add    esp,0x10
c001c838:	6a 00                	push   0x0
c001c83a:	6a 01                	push   0x1
c001c83c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c843:	50                   	push   eax
c001c844:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c84a:	e8 39 ef ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c84f:	83 c4 10             	add    esp,0x10
c001c852:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c857:	83 f8 02             	cmp    eax,0x2
c001c85a:	75 6e                	jne    c001c8ca <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c85c:	6a 00                	push   0x0
c001c85e:	6a 08                	push   0x8
c001c860:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c867:	50                   	push   eax
c001c868:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c86e:	e8 15 ef ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c873:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c878:	50                   	push   eax
c001c879:	6a 09                	push   0x9
c001c87b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c882:	50                   	push   eax
c001c883:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c889:	e8 fa ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c88e:	83 c4 20             	add    esp,0x20
c001c891:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c896:	50                   	push   eax
c001c897:	6a 0a                	push   0xa
c001c899:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8a0:	50                   	push   eax
c001c8a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8a7:	e8 dc ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ac:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c8b1:	50                   	push   eax
c001c8b2:	6a 0b                	push   0xb
c001c8b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8bb:	50                   	push   eax
c001c8bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8c2:	e8 c1 ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8c7:	83 c4 20             	add    esp,0x20
c001c8ca:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c8cf:	50                   	push   eax
c001c8d0:	6a 02                	push   0x2
c001c8d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8d9:	50                   	push   eax
c001c8da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8e0:	e8 a3 ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c8ea:	50                   	push   eax
c001c8eb:	6a 03                	push   0x3
c001c8ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8f4:	50                   	push   eax
c001c8f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8fb:	e8 88 ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c900:	83 c4 20             	add    esp,0x20
c001c903:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c908:	50                   	push   eax
c001c909:	6a 04                	push   0x4
c001c90b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c912:	50                   	push   eax
c001c913:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c919:	e8 6a ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c91e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c923:	50                   	push   eax
c001c924:	6a 05                	push   0x5
c001c926:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c92d:	50                   	push   eax
c001c92e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c934:	e8 4f ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c939:	83 c4 20             	add    esp,0x20
c001c93c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c941:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c946:	74 11                	je     c001c959 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c948:	b8 30 00 00 00       	mov    eax,0x30
c001c94d:	83 fa 02             	cmp    edx,0x2
c001c950:	75 16                	jne    c001c968 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c952:	b8 34 00 00 00       	mov    eax,0x34
c001c957:	eb 0f                	jmp    c001c968 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c959:	b8 20 00 00 00       	mov    eax,0x20
c001c95e:	83 fa 02             	cmp    edx,0x2
c001c961:	75 05                	jne    c001c968 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c963:	b8 24 00 00 00       	mov    eax,0x24
c001c968:	50                   	push   eax
c001c969:	6a 07                	push   0x7
c001c96b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c972:	50                   	push   eax
c001c973:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c979:	e8 0a ee ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c982:	83 c4 10             	add    esp,0x10
c001c985:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c98a:	85 f6                	test   esi,esi
c001c98c:	0f 84 b3 00 00 00    	je     c001ca45 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c992:	50                   	push   eax
c001c993:	6a 01                	push   0x1
c001c995:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c99c:	50                   	push   eax
c001c99d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9a3:	e8 c8 f8 ff ff       	call   c001c270 <IDE::polling(unsigned char, unsigned int)>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	0f b6 f8             	movzx  edi,al
c001c9ae:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c9b4:	85 ff                	test   edi,edi
c001c9b6:	74 1d                	je     c001c9d5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c9b8:	57                   	push   edi
c001c9b9:	0f b6 d2             	movzx  edx,dl
c001c9bc:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c9c3:	50                   	push   eax
c001c9c4:	52                   	push   edx
c001c9c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9cb:	e8 e6 f7 ff ff       	call   c001c1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9d0:	e9 90 00 00 00       	jmp    c001ca65 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c9d5:	85 ed                	test   ebp,ebp
c001c9d7:	74 3b                	je     c001ca14 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c9d9:	31 c9                	xor    ecx,ecx
c001c9db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c9df:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c9e3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c9e7:	50                   	push   eax
c001c9e8:	50                   	push   eax
c001c9e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9f0:	50                   	push   eax
c001c9f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f7:	e8 7a ed ff ff       	call   c001b776 <IDE::getBase(unsigned char)>
c001c9fc:	89 c2                	mov    edx,eax
c001c9fe:	89 f8                	mov    eax,edi
c001ca00:	66 ef                	out    dx,ax
c001ca02:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca06:	83 c4 10             	add    esp,0x10
c001ca09:	41                   	inc    ecx
c001ca0a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca10:	75 c9                	jne    c001c9db <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ca12:	eb 23                	jmp    c001ca37 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ca14:	0f b6 d2             	movzx  edx,dl
c001ca17:	51                   	push   ecx
c001ca18:	51                   	push   ecx
c001ca19:	52                   	push   edx
c001ca1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca20:	e8 51 ed ff ff       	call   c001b776 <IDE::getBase(unsigned char)>
c001ca25:	b9 00 01 00 00       	mov    ecx,0x100
c001ca2a:	89 c2                	mov    edx,eax
c001ca2c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca30:	fc                   	cld    
c001ca31:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca34:	83 c4 10             	add    esp,0x10
c001ca37:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca3f:	4e                   	dec    esi
c001ca40:	e9 45 ff ff ff       	jmp    c001c98a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001ca45:	31 ff                	xor    edi,edi
c001ca47:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca4c:	74 1a                	je     c001ca68 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ca4e:	50                   	push   eax
c001ca4f:	50                   	push   eax
c001ca50:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ca55:	83 f8 02             	cmp    eax,0x2
c001ca58:	0f 94 c0             	sete   al
c001ca5b:	0f b6 c0             	movzx  eax,al
c001ca5e:	50                   	push   eax
c001ca5f:	53                   	push   ebx
c001ca60:	e8 dd fb ff ff       	call   c001c642 <ATA::flush(bool)>
c001ca65:	83 c4 10             	add    esp,0x10
c001ca68:	83 c4 2c             	add    esp,0x2c
c001ca6b:	89 f8                	mov    eax,edi
c001ca6d:	5b                   	pop    ebx
c001ca6e:	5e                   	pop    esi
c001ca6f:	5f                   	pop    edi
c001ca70:	5d                   	pop    ebp
c001ca71:	c3                   	ret    

c001ca72 <ATA::detectCHS()>:
c001ca72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca76:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ca7c:	c1 e0 06             	shl    eax,0x6
c001ca7f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ca85:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca8f:	c7 44 24 04 8c 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b8c
c001ca97:	e9 61 47 ff ff       	jmp    c00111fd <KePanic(char const*)>

c001ca9c <ATA::open(int, int, void*)>:
c001ca9c:	53                   	push   ebx
c001ca9d:	83 ec 08             	sub    esp,0x8
c001caa0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caa4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caac:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cab2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cab8:	c1 e0 06             	shl    eax,0x6
c001cabb:	01 d0                	add    eax,edx
c001cabd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cac4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001caca:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cad1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cadb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cae1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cae8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001caef:	75 0c                	jne    c001cafd <ATA::open(int, int, void*)+0x61>
c001caf1:	83 ec 0c             	sub    esp,0xc
c001caf4:	53                   	push   ebx
c001caf5:	e8 78 ff ff ff       	call   c001ca72 <ATA::detectCHS()>
c001cafa:	83 c4 10             	add    esp,0x10
c001cafd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb03:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb09:	c1 e0 06             	shl    eax,0x6
c001cb0c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb13:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb1d:	d1 e8                	shr    eax,1
c001cb1f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb25:	6a 04                	push   0x4
c001cb27:	6a 0c                	push   0xc
c001cb29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb30:	50                   	push   eax
c001cb31:	52                   	push   edx
c001cb32:	e8 51 ec ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb37:	90                   	nop
c001cb38:	90                   	nop
c001cb39:	6a 00                	push   0x0
c001cb3b:	6a 0c                	push   0xc
c001cb3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb44:	50                   	push   eax
c001cb45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb4b:	e8 38 ec ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb50:	83 c4 14             	add    esp,0x14
c001cb53:	53                   	push   ebx
c001cb54:	e8 cd fe fe ff       	call   c000ca26 <PhysicalDisk::startCache()>
c001cb59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb5c:	e8 09 11 ff ff       	call   c000dc6a <createPartitionsForDisk(PhysicalDisk*)>
c001cb61:	31 c0                	xor    eax,eax
c001cb63:	83 c4 18             	add    esp,0x18
c001cb66:	5b                   	pop    ebx
c001cb67:	c3                   	ret    

c001cb68 <combineCharAndColour(char, unsigned char)>:
c001cb68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb6d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cb73:	c1 e0 08             	shl    eax,0x8
c001cb76:	09 d0                	or     eax,edx
c001cb78:	c3                   	ret    

c001cb79 <combineColours(unsigned char, unsigned char)>:
c001cb79:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb7e:	c1 e0 04             	shl    eax,0x4
c001cb81:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cb85:	c3                   	ret    

c001cb86 <ATA::read(unsigned long long, int, void*)>:
c001cb86:	55                   	push   ebp
c001cb87:	57                   	push   edi
c001cb88:	56                   	push   esi
c001cb89:	be 04 00 00 00       	mov    esi,0x4
c001cb8e:	53                   	push   ebx
c001cb8f:	83 ec 0c             	sub    esp,0xc
c001cb92:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb9a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cb9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cba1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cba5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbab:	0f 87 a1 01 00 00    	ja     c001cd52 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbb1:	be 06 00 00 00       	mov    esi,0x6
c001cbb6:	85 c9                	test   ecx,ecx
c001cbb8:	0f 84 94 01 00 00    	je     c001cd52 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbbe:	55                   	push   ebp
c001cbbf:	55                   	push   ebp
c001cbc0:	6a 00                	push   0x0
c001cbc2:	51                   	push   ecx
c001cbc3:	53                   	push   ebx
c001cbc4:	52                   	push   edx
c001cbc5:	50                   	push   eax
c001cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbca:	e8 0d fb ff ff       	call   c001c6dc <ATA::access(unsigned long long, int, void*, bool)>
c001cbcf:	83 c4 20             	add    esp,0x20
c001cbd2:	89 c6                	mov    esi,eax
c001cbd4:	85 c0                	test   eax,eax
c001cbd6:	0f 85 71 01 00 00    	jne    c001cd4d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cbdc:	03 1d 54 ae 02 c0    	add    ebx,DWORD PTR ds:0xc002ae54
c001cbe2:	89 da                	mov    edx,ebx
c001cbe4:	50                   	push   eax
c001cbe5:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbea:	50                   	push   eax
c001cbeb:	89 1d 54 ae 02 c0    	mov    DWORD PTR ds:0xc002ae54,ebx
c001cbf1:	6a 0f                	push   0xf
c001cbf3:	6a 00                	push   0x0
c001cbf5:	e8 7f ff ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001cbfa:	59                   	pop    ecx
c001cbfb:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc00:	5b                   	pop    ebx
c001cc01:	0f b6 d8             	movzx  ebx,al
c001cc04:	89 d0                	mov    eax,edx
c001cc06:	53                   	push   ebx
c001cc07:	99                   	cdq    
c001cc08:	f7 fd                	idiv   ebp
c001cc0a:	99                   	cdq    
c001cc0b:	f7 f9                	idiv   ecx
c001cc0d:	83 c2 30             	add    edx,0x30
c001cc10:	0f b6 d2             	movzx  edx,dl
c001cc13:	52                   	push   edx
c001cc14:	e8 4f ff ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cc19:	5f                   	pop    edi
c001cc1a:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc1f:	5a                   	pop    edx
c001cc20:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc26:	53                   	push   ebx
c001cc27:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc2c:	99                   	cdq    
c001cc2d:	f7 ff                	idiv   edi
c001cc2f:	99                   	cdq    
c001cc30:	f7 f9                	idiv   ecx
c001cc32:	8d 42 30             	lea    eax,[edx+0x30]
c001cc35:	0f b6 c0             	movzx  eax,al
c001cc38:	50                   	push   eax
c001cc39:	e8 2a ff ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cc3e:	5f                   	pop    edi
c001cc3f:	bf 64 00 00 00       	mov    edi,0x64
c001cc44:	5a                   	pop    edx
c001cc45:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc4b:	53                   	push   ebx
c001cc4c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc51:	99                   	cdq    
c001cc52:	f7 ff                	idiv   edi
c001cc54:	99                   	cdq    
c001cc55:	f7 f9                	idiv   ecx
c001cc57:	8d 42 30             	lea    eax,[edx+0x30]
c001cc5a:	0f b6 c0             	movzx  eax,al
c001cc5d:	50                   	push   eax
c001cc5e:	e8 05 ff ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cc63:	5a                   	pop    edx
c001cc64:	5a                   	pop    edx
c001cc65:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc6b:	53                   	push   ebx
c001cc6c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc71:	99                   	cdq    
c001cc72:	f7 f9                	idiv   ecx
c001cc74:	99                   	cdq    
c001cc75:	f7 f9                	idiv   ecx
c001cc77:	8d 42 30             	lea    eax,[edx+0x30]
c001cc7a:	0f b6 c0             	movzx  eax,al
c001cc7d:	50                   	push   eax
c001cc7e:	e8 e5 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cc83:	5a                   	pop    edx
c001cc84:	5a                   	pop    edx
c001cc85:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc8b:	53                   	push   ebx
c001cc8c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc91:	99                   	cdq    
c001cc92:	f7 f9                	idiv   ecx
c001cc94:	83 c2 30             	add    edx,0x30
c001cc97:	0f b6 d2             	movzx  edx,dl
c001cc9a:	52                   	push   edx
c001cc9b:	e8 c8 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cca0:	5a                   	pop    edx
c001cca1:	5a                   	pop    edx
c001cca2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cca8:	53                   	push   ebx
c001cca9:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccae:	99                   	cdq    
c001ccaf:	f7 fd                	idiv   ebp
c001ccb1:	99                   	cdq    
c001ccb2:	f7 f9                	idiv   ecx
c001ccb4:	8d 42 30             	lea    eax,[edx+0x30]
c001ccb7:	0f b6 c0             	movzx  eax,al
c001ccba:	50                   	push   eax
c001ccbb:	e8 a8 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ccc0:	5d                   	pop    ebp
c001ccc1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ccc6:	5a                   	pop    edx
c001ccc7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cccd:	53                   	push   ebx
c001ccce:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccd3:	99                   	cdq    
c001ccd4:	f7 fd                	idiv   ebp
c001ccd6:	99                   	cdq    
c001ccd7:	f7 f9                	idiv   ecx
c001ccd9:	8d 42 30             	lea    eax,[edx+0x30]
c001ccdc:	0f b6 c0             	movzx  eax,al
c001ccdf:	50                   	push   eax
c001cce0:	e8 83 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cce5:	5d                   	pop    ebp
c001cce6:	5a                   	pop    edx
c001cce7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cced:	53                   	push   ebx
c001ccee:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccf3:	99                   	cdq    
c001ccf4:	f7 ff                	idiv   edi
c001ccf6:	99                   	cdq    
c001ccf7:	f7 f9                	idiv   ecx
c001ccf9:	8d 42 30             	lea    eax,[edx+0x30]
c001ccfc:	0f b6 c0             	movzx  eax,al
c001ccff:	50                   	push   eax
c001cd00:	e8 63 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cd05:	5f                   	pop    edi
c001cd06:	5d                   	pop    ebp
c001cd07:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd0d:	53                   	push   ebx
c001cd0e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd13:	99                   	cdq    
c001cd14:	f7 f9                	idiv   ecx
c001cd16:	99                   	cdq    
c001cd17:	f7 f9                	idiv   ecx
c001cd19:	8d 42 30             	lea    eax,[edx+0x30]
c001cd1c:	0f b6 c0             	movzx  eax,al
c001cd1f:	50                   	push   eax
c001cd20:	e8 43 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cd25:	5a                   	pop    edx
c001cd26:	5f                   	pop    edi
c001cd27:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd2d:	53                   	push   ebx
c001cd2e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd33:	99                   	cdq    
c001cd34:	f7 f9                	idiv   ecx
c001cd36:	83 c2 30             	add    edx,0x30
c001cd39:	0f b6 d2             	movzx  edx,dl
c001cd3c:	52                   	push   edx
c001cd3d:	e8 26 fe ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cd42:	83 c4 10             	add    esp,0x10
c001cd45:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd4b:	eb 05                	jmp    c001cd52 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd4d:	be 01 00 00 00       	mov    esi,0x1
c001cd52:	83 c4 0c             	add    esp,0xc
c001cd55:	89 f0                	mov    eax,esi
c001cd57:	5b                   	pop    ebx
c001cd58:	5e                   	pop    esi
c001cd59:	5f                   	pop    edi
c001cd5a:	5d                   	pop    ebp
c001cd5b:	c3                   	ret    

c001cd5c <ATA::write(unsigned long long, int, void*)>:
c001cd5c:	55                   	push   ebp
c001cd5d:	57                   	push   edi
c001cd5e:	56                   	push   esi
c001cd5f:	be 04 00 00 00       	mov    esi,0x4
c001cd64:	53                   	push   ebx
c001cd65:	83 ec 0c             	sub    esp,0xc
c001cd68:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd70:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd77:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd7b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd81:	0f 87 9c 01 00 00    	ja     c001cf23 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd87:	be 06 00 00 00       	mov    esi,0x6
c001cd8c:	85 c9                	test   ecx,ecx
c001cd8e:	0f 84 8f 01 00 00    	je     c001cf23 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd94:	55                   	push   ebp
c001cd95:	55                   	push   ebp
c001cd96:	6a 01                	push   0x1
c001cd98:	51                   	push   ecx
c001cd99:	53                   	push   ebx
c001cd9a:	52                   	push   edx
c001cd9b:	50                   	push   eax
c001cd9c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cda0:	e8 37 f9 ff ff       	call   c001c6dc <ATA::access(unsigned long long, int, void*, bool)>
c001cda5:	83 c4 20             	add    esp,0x20
c001cda8:	89 c6                	mov    esi,eax
c001cdaa:	85 c0                	test   eax,eax
c001cdac:	0f 85 6c 01 00 00    	jne    c001cf1e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cdb2:	01 1d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebx
c001cdb8:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdbd:	50                   	push   eax
c001cdbe:	50                   	push   eax
c001cdbf:	6a 0f                	push   0xf
c001cdc1:	6a 00                	push   0x0
c001cdc3:	e8 b1 fd ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001cdc8:	5a                   	pop    edx
c001cdc9:	0f b6 d8             	movzx  ebx,al
c001cdcc:	59                   	pop    ecx
c001cdcd:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cdd2:	53                   	push   ebx
c001cdd3:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdd8:	99                   	cdq    
c001cdd9:	f7 fd                	idiv   ebp
c001cddb:	99                   	cdq    
c001cddc:	f7 f9                	idiv   ecx
c001cdde:	8d 42 30             	lea    eax,[edx+0x30]
c001cde1:	0f b6 c0             	movzx  eax,al
c001cde4:	50                   	push   eax
c001cde5:	e8 7e fd ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cdea:	5f                   	pop    edi
c001cdeb:	bf e8 03 00 00       	mov    edi,0x3e8
c001cdf0:	5a                   	pop    edx
c001cdf1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdf7:	53                   	push   ebx
c001cdf8:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cdfd:	99                   	cdq    
c001cdfe:	f7 ff                	idiv   edi
c001ce00:	99                   	cdq    
c001ce01:	f7 f9                	idiv   ecx
c001ce03:	8d 42 30             	lea    eax,[edx+0x30]
c001ce06:	0f b6 c0             	movzx  eax,al
c001ce09:	50                   	push   eax
c001ce0a:	e8 59 fd ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ce0f:	5f                   	pop    edi
c001ce10:	bf 64 00 00 00       	mov    edi,0x64
c001ce15:	5a                   	pop    edx
c001ce16:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce1c:	53                   	push   ebx
c001ce1d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce22:	99                   	cdq    
c001ce23:	f7 ff                	idiv   edi
c001ce25:	99                   	cdq    
c001ce26:	f7 f9                	idiv   ecx
c001ce28:	8d 42 30             	lea    eax,[edx+0x30]
c001ce2b:	0f b6 c0             	movzx  eax,al
c001ce2e:	50                   	push   eax
c001ce2f:	e8 34 fd ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ce34:	5a                   	pop    edx
c001ce35:	5a                   	pop    edx
c001ce36:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce3c:	53                   	push   ebx
c001ce3d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce42:	99                   	cdq    
c001ce43:	f7 f9                	idiv   ecx
c001ce45:	99                   	cdq    
c001ce46:	f7 f9                	idiv   ecx
c001ce48:	8d 42 30             	lea    eax,[edx+0x30]
c001ce4b:	0f b6 c0             	movzx  eax,al
c001ce4e:	50                   	push   eax
c001ce4f:	e8 14 fd ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ce54:	5a                   	pop    edx
c001ce55:	5a                   	pop    edx
c001ce56:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce5c:	53                   	push   ebx
c001ce5d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce62:	99                   	cdq    
c001ce63:	f7 f9                	idiv   ecx
c001ce65:	8d 42 30             	lea    eax,[edx+0x30]
c001ce68:	0f b6 c0             	movzx  eax,al
c001ce6b:	50                   	push   eax
c001ce6c:	e8 f7 fc ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ce71:	5a                   	pop    edx
c001ce72:	5a                   	pop    edx
c001ce73:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce79:	53                   	push   ebx
c001ce7a:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce7f:	99                   	cdq    
c001ce80:	f7 fd                	idiv   ebp
c001ce82:	99                   	cdq    
c001ce83:	f7 f9                	idiv   ecx
c001ce85:	8d 42 30             	lea    eax,[edx+0x30]
c001ce88:	0f b6 c0             	movzx  eax,al
c001ce8b:	50                   	push   eax
c001ce8c:	e8 d7 fc ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ce91:	5d                   	pop    ebp
c001ce92:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce97:	5a                   	pop    edx
c001ce98:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce9e:	53                   	push   ebx
c001ce9f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cea4:	99                   	cdq    
c001cea5:	f7 fd                	idiv   ebp
c001cea7:	99                   	cdq    
c001cea8:	f7 f9                	idiv   ecx
c001ceaa:	8d 42 30             	lea    eax,[edx+0x30]
c001cead:	0f b6 c0             	movzx  eax,al
c001ceb0:	50                   	push   eax
c001ceb1:	e8 b2 fc ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ceb6:	5d                   	pop    ebp
c001ceb7:	5a                   	pop    edx
c001ceb8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cebe:	53                   	push   ebx
c001cebf:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cec4:	99                   	cdq    
c001cec5:	f7 ff                	idiv   edi
c001cec7:	99                   	cdq    
c001cec8:	f7 f9                	idiv   ecx
c001ceca:	8d 42 30             	lea    eax,[edx+0x30]
c001cecd:	0f b6 c0             	movzx  eax,al
c001ced0:	50                   	push   eax
c001ced1:	e8 92 fc ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001ced6:	5f                   	pop    edi
c001ced7:	5d                   	pop    ebp
c001ced8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cede:	53                   	push   ebx
c001cedf:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cee4:	99                   	cdq    
c001cee5:	f7 f9                	idiv   ecx
c001cee7:	99                   	cdq    
c001cee8:	f7 f9                	idiv   ecx
c001ceea:	8d 42 30             	lea    eax,[edx+0x30]
c001ceed:	0f b6 c0             	movzx  eax,al
c001cef0:	50                   	push   eax
c001cef1:	e8 72 fc ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cef6:	5a                   	pop    edx
c001cef7:	5f                   	pop    edi
c001cef8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cefe:	53                   	push   ebx
c001ceff:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cf04:	99                   	cdq    
c001cf05:	f7 f9                	idiv   ecx
c001cf07:	83 c2 30             	add    edx,0x30
c001cf0a:	0f b6 d2             	movzx  edx,dl
c001cf0d:	52                   	push   edx
c001cf0e:	e8 55 fc ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf1c:	eb 05                	jmp    c001cf23 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf1e:	be 01 00 00 00       	mov    esi,0x1
c001cf23:	83 c4 0c             	add    esp,0xc
c001cf26:	89 f0                	mov    eax,esi
c001cf28:	5b                   	pop    ebx
c001cf29:	5e                   	pop    esi
c001cf2a:	5f                   	pop    edi
c001cf2b:	5d                   	pop    ebp
c001cf2c:	c3                   	ret    
c001cf2d:	90                   	nop

c001cf2e <ATAPI::write(unsigned long long, int, void*)>:
c001cf2e:	b8 03 00 00 00       	mov    eax,0x3
c001cf33:	c3                   	ret    

c001cf34 <ATAPI::close(int, int, void*)>:
c001cf34:	83 ec 0c             	sub    esp,0xc
c001cf37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf41:	85 c0                	test   eax,eax
c001cf43:	74 0c                	je     c001cf51 <ATAPI::close(int, int, void*)+0x1d>
c001cf45:	83 ec 0c             	sub    esp,0xc
c001cf48:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf4a:	50                   	push   eax
c001cf4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf4e:	83 c4 10             	add    esp,0x10
c001cf51:	31 c0                	xor    eax,eax
c001cf53:	83 c4 0c             	add    esp,0xc
c001cf56:	c3                   	ret    
c001cf57:	90                   	nop

c001cf58 <ATAPI::ATAPI()>:
c001cf58:	83 ec 0c             	sub    esp,0xc
c001cf5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5f:	83 ec 04             	sub    esp,0x4
c001cf62:	68 00 08 00 00       	push   0x800
c001cf67:	68 d5 2c 02 c0       	push   0xc0022cd5
c001cf6c:	50                   	push   eax
c001cf6d:	e8 4c fa fe ff       	call   c000c9be <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf72:	83 c4 10             	add    esp,0x10
c001cf75:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001cf7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7e:	89 10                	mov    DWORD PTR [eax],edx
c001cf80:	90                   	nop
c001cf81:	83 c4 0c             	add    esp,0xc
c001cf84:	c3                   	ret    
c001cf85:	90                   	nop

c001cf86 <ATAPI::readyForCommand()>:
c001cf86:	56                   	push   esi
c001cf87:	53                   	push   ebx
c001cf88:	53                   	push   ebx
c001cf89:	31 db                	xor    ebx,ebx
c001cf8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf8f:	51                   	push   ecx
c001cf90:	6a 0c                	push   0xc
c001cf92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cf99:	50                   	push   eax
c001cf9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cfa0:	e8 a3 e8 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001cfa5:	83 c4 10             	add    esp,0x10
c001cfa8:	a8 88                	test   al,0x88
c001cfaa:	74 25                	je     c001cfd1 <ATAPI::readyForCommand()+0x4b>
c001cfac:	43                   	inc    ebx
c001cfad:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cfb3:	7e da                	jle    c001cf8f <ATAPI::readyForCommand()+0x9>
c001cfb5:	83 ec 0c             	sub    esp,0xc
c001cfb8:	68 5e 01 00 00       	push   0x15e
c001cfbd:	e8 2a 8e ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001cfcb:	75 c2                	jne    c001cf8f <ATAPI::readyForCommand()+0x9>
c001cfcd:	31 c0                	xor    eax,eax
c001cfcf:	eb 02                	jmp    c001cfd3 <ATAPI::readyForCommand()+0x4d>
c001cfd1:	b0 01                	mov    al,0x1
c001cfd3:	5a                   	pop    edx
c001cfd4:	5b                   	pop    ebx
c001cfd5:	5e                   	pop    esi
c001cfd6:	c3                   	ret    
c001cfd7:	90                   	nop

c001cfd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cfd8:	55                   	push   ebp
c001cfd9:	57                   	push   edi
c001cfda:	56                   	push   esi
c001cfdb:	53                   	push   ebx
c001cfdc:	83 ec 20             	sub    esp,0x20
c001cfdf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfe3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cfe7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cfeb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cfef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cff3:	6a 01                	push   0x1
c001cff5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cffc:	50                   	push   eax
c001cffd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d003:	e8 88 e9 ff ff       	call   c001b990 <IDE::enableIRQs(unsigned char, bool)>
c001d008:	5e                   	pop    esi
c001d009:	58                   	pop    eax
c001d00a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d011:	50                   	push   eax
c001d012:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d018:	e8 45 e7 ff ff       	call   c001b762 <IDE::prepareInterrupt(unsigned char)>
c001d01d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d020:	e8 61 ff ff ff       	call   c001cf86 <ATAPI::readyForCommand()>
c001d025:	83 c4 10             	add    esp,0x10
c001d028:	84 c0                	test   al,al
c001d02a:	75 0a                	jne    c001d036 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d02c:	bb 01 00 00 00       	mov    ebx,0x1
c001d031:	e9 60 02 00 00       	jmp    c001d296 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d036:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d03c:	c1 e0 04             	shl    eax,0x4
c001d03f:	0f b6 c0             	movzx  eax,al
c001d042:	50                   	push   eax
c001d043:	6a 06                	push   0x6
c001d045:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d04c:	50                   	push   eax
c001d04d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d053:	e8 30 e7 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d058:	6a 00                	push   0x0
c001d05a:	6a 01                	push   0x1
c001d05c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d063:	50                   	push   eax
c001d064:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d06a:	e8 19 e7 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d06f:	83 c4 20             	add    esp,0x20
c001d072:	0f b6 c3             	movzx  eax,bl
c001d075:	0f b6 df             	movzx  ebx,bh
c001d078:	50                   	push   eax
c001d079:	6a 04                	push   0x4
c001d07b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d082:	50                   	push   eax
c001d083:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d089:	e8 fa e6 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d08e:	53                   	push   ebx
c001d08f:	6a 05                	push   0x5
c001d091:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d098:	50                   	push   eax
c001d099:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d09f:	e8 e4 e6 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0a4:	83 c4 20             	add    esp,0x20
c001d0a7:	68 a0 00 00 00       	push   0xa0
c001d0ac:	6a 07                	push   0x7
c001d0ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0b5:	50                   	push   eax
c001d0b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0bc:	e8 c7 e6 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0c1:	83 c4 0c             	add    esp,0xc
c001d0c4:	6a 01                	push   0x1
c001d0c6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0cd:	50                   	push   eax
c001d0ce:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0d4:	e8 97 f1 ff ff       	call   c001c270 <IDE::polling(unsigned char, unsigned int)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	0f b6 d8             	movzx  ebx,al
c001d0df:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d0e5:	85 db                	test   ebx,ebx
c001d0e7:	74 20                	je     c001d109 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d0e9:	53                   	push   ebx
c001d0ea:	0f b6 c0             	movzx  eax,al
c001d0ed:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d0f4:	52                   	push   edx
c001d0f5:	50                   	push   eax
c001d0f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0fc:	e8 b5 f0 ff ff       	call   c001c1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	e9 8d 01 00 00       	jmp    c001d296 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d109:	0f b6 c0             	movzx  eax,al
c001d10c:	53                   	push   ebx
c001d10d:	53                   	push   ebx
c001d10e:	50                   	push   eax
c001d10f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d115:	e8 5c e6 ff ff       	call   c001b776 <IDE::getBase(unsigned char)>
c001d11a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d11e:	b9 06 00 00 00       	mov    ecx,0x6
c001d123:	89 c2                	mov    edx,eax
c001d125:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d128:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d12c:	83 c4 10             	add    esp,0x10
c001d12f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d138:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d13e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d145:	85 db                	test   ebx,ebx
c001d147:	0f 84 ec 00 00 00    	je     c001d239 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d14d:	51                   	push   ecx
c001d14e:	51                   	push   ecx
c001d14f:	52                   	push   edx
c001d150:	50                   	push   eax
c001d151:	e8 a0 e7 ff ff       	call   c001b8f6 <IDE::waitInterrupt(unsigned char)>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	84 c0                	test   al,al
c001d15b:	0f 84 cb fe ff ff    	je     c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d161:	56                   	push   esi
c001d162:	56                   	push   esi
c001d163:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d16a:	50                   	push   eax
c001d16b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d171:	e8 ec e5 ff ff       	call   c001b762 <IDE::prepareInterrupt(unsigned char)>
c001d176:	83 c4 0c             	add    esp,0xc
c001d179:	6a 04                	push   0x4
c001d17b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d182:	50                   	push   eax
c001d183:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d189:	e8 ba e6 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001d18e:	83 c4 0c             	add    esp,0xc
c001d191:	89 c6                	mov    esi,eax
c001d193:	6a 05                	push   0x5
c001d195:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d19c:	50                   	push   eax
c001d19d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1a3:	e8 a0 e6 ff ff       	call   c001b848 <IDE::read(unsigned char, unsigned char)>
c001d1a8:	89 f1                	mov    ecx,esi
c001d1aa:	0f b6 c0             	movzx  eax,al
c001d1ad:	0f b6 f1             	movzx  esi,cl
c001d1b0:	c1 e0 08             	shl    eax,0x8
c001d1b3:	09 c6                	or     esi,eax
c001d1b5:	d1 fe                	sar    esi,1
c001d1b7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d1bb:	83 c4 10             	add    esp,0x10
c001d1be:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d1c3:	74 41                	je     c001d206 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d1c5:	31 c9                	xor    ecx,ecx
c001d1c7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1cd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1d4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d1d8:	75 0a                	jne    c001d1e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d1da:	01 c9                	add    ecx,ecx
c001d1dc:	01 cd                	add    ebp,ecx
c001d1de:	4b                   	dec    ebx
c001d1df:	e9 54 ff ff ff       	jmp    c001d138 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d1e4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d1e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d1ed:	51                   	push   ecx
c001d1ee:	51                   	push   ecx
c001d1ef:	52                   	push   edx
c001d1f0:	50                   	push   eax
c001d1f1:	e8 80 e5 ff ff       	call   c001b776 <IDE::getBase(unsigned char)>
c001d1f6:	89 c2                	mov    edx,eax
c001d1f8:	89 f0                	mov    eax,esi
c001d1fa:	66 ef                	out    dx,ax
c001d1fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d200:	83 c4 10             	add    esp,0x10
c001d203:	41                   	inc    ecx
c001d204:	eb c1                	jmp    c001d1c7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d206:	31 f6                	xor    esi,esi
c001d208:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d20e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d215:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d219:	75 06                	jne    c001d221 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d21b:	01 f6                	add    esi,esi
c001d21d:	01 f5                	add    ebp,esi
c001d21f:	eb bd                	jmp    c001d1de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d221:	51                   	push   ecx
c001d222:	51                   	push   ecx
c001d223:	52                   	push   edx
c001d224:	50                   	push   eax
c001d225:	e8 4c e5 ff ff       	call   c001b776 <IDE::getBase(unsigned char)>
c001d22a:	89 c2                	mov    edx,eax
c001d22c:	66 ed                	in     ax,dx
c001d22e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d233:	83 c4 10             	add    esp,0x10
c001d236:	46                   	inc    esi
c001d237:	eb cf                	jmp    c001d208 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d239:	51                   	push   ecx
c001d23a:	51                   	push   ecx
c001d23b:	52                   	push   edx
c001d23c:	50                   	push   eax
c001d23d:	e8 b4 e6 ff ff       	call   c001b8f6 <IDE::waitInterrupt(unsigned char)>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	84 c0                	test   al,al
c001d247:	0f 84 df fd ff ff    	je     c001d02c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d24d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d252:	52                   	push   edx
c001d253:	52                   	push   edx
c001d254:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25b:	50                   	push   eax
c001d25c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d262:	e8 fb e4 ff ff       	call   c001b762 <IDE::prepareInterrupt(unsigned char)>
c001d267:	83 c4 10             	add    esp,0x10
c001d26a:	50                   	push   eax
c001d26b:	50                   	push   eax
c001d26c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d273:	50                   	push   eax
c001d274:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d27a:	e8 f7 e4 ff ff       	call   c001b776 <IDE::getBase(unsigned char)>
c001d27f:	8d 50 07             	lea    edx,[eax+0x7]
c001d282:	ec                   	in     al,dx
c001d283:	83 c4 10             	add    esp,0x10
c001d286:	a8 88                	test   al,0x88
c001d288:	74 0a                	je     c001d294 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d28a:	4b                   	dec    ebx
c001d28b:	75 dd                	jne    c001d26a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d28d:	bb 02 00 00 00       	mov    ebx,0x2
c001d292:	eb 02                	jmp    c001d296 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d294:	31 db                	xor    ebx,ebx
c001d296:	83 c4 1c             	add    esp,0x1c
c001d299:	89 d8                	mov    eax,ebx
c001d29b:	5b                   	pop    ebx
c001d29c:	5e                   	pop    esi
c001d29d:	5f                   	pop    edi
c001d29e:	5d                   	pop    ebp
c001d29f:	c3                   	ret    

c001d2a0 <ATAPI::diskRemoved()>:
c001d2a0:	53                   	push   ebx
c001d2a1:	83 ec 14             	sub    esp,0x14
c001d2a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2a8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2af:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d2b5:	e8 a0 06 ff ff       	call   c000d95a <LogicalDisk::unmount()>
c001d2ba:	58                   	pop    eax
c001d2bb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2c1:	e8 76 10 ff ff       	call   c000e33c <VCache::writeWriteBuffer()>
c001d2c6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d2cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2d0:	83 c4 18             	add    esp,0x18
c001d2d3:	5b                   	pop    ebx
c001d2d4:	e9 53 10 ff ff       	jmp    c000e32c <VCache::invalidateReadBuffer()>
c001d2d9:	90                   	nop

c001d2da <ATAPI::eject()>:
c001d2da:	57                   	push   edi
c001d2db:	b9 03 00 00 00       	mov    ecx,0x3
c001d2e0:	53                   	push   ebx
c001d2e1:	83 ec 14             	sub    esp,0x14
c001d2e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2ec:	fc                   	cld    
c001d2ed:	31 c0                	xor    eax,eax
c001d2ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2f1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d2f6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d2fb:	50                   	push   eax
c001d2fc:	50                   	push   eax
c001d2fd:	6a 00                	push   0x0
c001d2ff:	6a 00                	push   0x0
c001d301:	6a 00                	push   0x0
c001d303:	6a 02                	push   0x2
c001d305:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d309:	50                   	push   eax
c001d30a:	53                   	push   ebx
c001d30b:	e8 c8 fc ff ff       	call   c001cfd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d310:	83 c4 14             	add    esp,0x14
c001d313:	53                   	push   ebx
c001d314:	e8 87 ff ff ff       	call   c001d2a0 <ATAPI::diskRemoved()>
c001d319:	83 c4 24             	add    esp,0x24
c001d31c:	31 c0                	xor    eax,eax
c001d31e:	5b                   	pop    ebx
c001d31f:	5f                   	pop    edi
c001d320:	c3                   	ret    
c001d321:	90                   	nop

c001d322 <ATAPI::diskInserted()>:
c001d322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d326:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d32d:	c3                   	ret    

c001d32e <ATAPI::detectMedia()>:
c001d32e:	56                   	push   esi
c001d32f:	53                   	push   ebx
c001d330:	83 ec 28             	sub    esp,0x28
c001d333:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d337:	6a 0c                	push   0xc
c001d339:	6a 00                	push   0x0
c001d33b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d33f:	56                   	push   esi
c001d340:	e8 ab 31 fe ff       	call   c00004f0 <memset>
c001d345:	58                   	pop    eax
c001d346:	5a                   	pop    edx
c001d347:	6a 00                	push   0x0
c001d349:	6a 00                	push   0x0
c001d34b:	6a 00                	push   0x0
c001d34d:	6a 00                	push   0x0
c001d34f:	56                   	push   esi
c001d350:	53                   	push   ebx
c001d351:	e8 82 fc ff ff       	call   c001cfd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d356:	83 c4 1c             	add    esp,0x1c
c001d359:	6a 0c                	push   0xc
c001d35b:	6a 00                	push   0x0
c001d35d:	56                   	push   esi
c001d35e:	e8 8d 31 fe ff       	call   c00004f0 <memset>
c001d363:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d368:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d36d:	59                   	pop    ecx
c001d36e:	58                   	pop    eax
c001d36f:	6a 01                	push   0x1
c001d371:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d375:	50                   	push   eax
c001d376:	6a 00                	push   0x0
c001d378:	6a 12                	push   0x12
c001d37a:	56                   	push   esi
c001d37b:	53                   	push   ebx
c001d37c:	e8 57 fc ff ff       	call   c001cfd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d381:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d385:	83 c4 20             	add    esp,0x20
c001d388:	83 e0 7f             	and    eax,0x7f
c001d38b:	83 f8 70             	cmp    eax,0x70
c001d38e:	74 15                	je     c001d3a5 <ATAPI::detectMedia()+0x77>
c001d390:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d397:	75 0c                	jne    c001d3a5 <ATAPI::detectMedia()+0x77>
c001d399:	83 ec 0c             	sub    esp,0xc
c001d39c:	53                   	push   ebx
c001d39d:	e8 80 ff ff ff       	call   c001d322 <ATAPI::diskInserted()>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d3a9:	83 e0 0f             	and    eax,0xf
c001d3ac:	83 f8 02             	cmp    eax,0x2
c001d3af:	75 1b                	jne    c001d3cc <ATAPI::detectMedia()+0x9e>
c001d3b1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d3b6:	75 2d                	jne    c001d3e5 <ATAPI::detectMedia()+0xb7>
c001d3b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3bf:	74 24                	je     c001d3e5 <ATAPI::detectMedia()+0xb7>
c001d3c1:	83 ec 0c             	sub    esp,0xc
c001d3c4:	53                   	push   ebx
c001d3c5:	e8 d6 fe ff ff       	call   c001d2a0 <ATAPI::diskRemoved()>
c001d3ca:	eb 16                	jmp    c001d3e2 <ATAPI::detectMedia()+0xb4>
c001d3cc:	85 c0                	test   eax,eax
c001d3ce:	75 15                	jne    c001d3e5 <ATAPI::detectMedia()+0xb7>
c001d3d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3d7:	75 0c                	jne    c001d3e5 <ATAPI::detectMedia()+0xb7>
c001d3d9:	83 ec 0c             	sub    esp,0xc
c001d3dc:	53                   	push   ebx
c001d3dd:	e8 40 ff ff ff       	call   c001d322 <ATAPI::diskInserted()>
c001d3e2:	83 c4 10             	add    esp,0x10
c001d3e5:	83 c4 24             	add    esp,0x24
c001d3e8:	5b                   	pop    ebx
c001d3e9:	5e                   	pop    esi
c001d3ea:	c3                   	ret    
c001d3eb:	90                   	nop

c001d3ec <ATAPI::open(int, int, void*)>:
c001d3ec:	56                   	push   esi
c001d3ed:	53                   	push   ebx
c001d3ee:	50                   	push   eax
c001d3ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3fb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d401:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d407:	c1 e0 06             	shl    eax,0x6
c001d40a:	01 d0                	add    eax,edx
c001d40c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d413:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d419:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d420:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d42a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d430:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d437:	6a 04                	push   0x4
c001d439:	6a 0c                	push   0xc
c001d43b:	51                   	push   ecx
c001d43c:	52                   	push   edx
c001d43d:	e8 46 e3 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d442:	90                   	nop
c001d443:	90                   	nop
c001d444:	6a 00                	push   0x0
c001d446:	6a 0c                	push   0xc
c001d448:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d44f:	50                   	push   eax
c001d450:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d456:	e8 2d e3 ff ff       	call   c001b788 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d45b:	83 c4 14             	add    esp,0x14
c001d45e:	68 78 01 00 00       	push   0x178
c001d463:	e8 4e a6 fe ff       	call   c0007ab6 <malloc>
c001d468:	83 c4 0c             	add    esp,0xc
c001d46b:	89 c6                	mov    esi,eax
c001d46d:	6a 00                	push   0x0
c001d46f:	68 ff ff ff 7f       	push   0x7fffffff
c001d474:	6a 00                	push   0x0
c001d476:	6a 00                	push   0x0
c001d478:	53                   	push   ebx
c001d479:	68 87 2d 02 c0       	push   0xc0022d87
c001d47e:	50                   	push   eax
c001d47f:	e8 14 03 ff ff       	call   c000d798 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d484:	83 c4 14             	add    esp,0x14
c001d487:	56                   	push   esi
c001d488:	e8 cb 03 ff ff       	call   c000d858 <LogicalDisk::assignDriveLetter()>
c001d48d:	5a                   	pop    edx
c001d48e:	0f be c0             	movsx  eax,al
c001d491:	59                   	pop    ecx
c001d492:	50                   	push   eax
c001d493:	68 d8 2b 02 c0       	push   0xc0022bd8
c001d498:	e8 a8 d4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d49d:	58                   	pop    eax
c001d49e:	5a                   	pop    edx
c001d49f:	56                   	push   esi
c001d4a0:	53                   	push   ebx
c001d4a1:	e8 4c f1 fe ff       	call   c000c5f2 <Device::addChild(Device*)>
c001d4a6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d4ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4af:	e8 72 f5 fe ff       	call   c000ca26 <PhysicalDisk::startCache()>
c001d4b4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4be:	e8 6b fe ff ff       	call   c001d32e <ATAPI::detectMedia()>
c001d4c3:	83 c4 14             	add    esp,0x14
c001d4c6:	31 c0                	xor    eax,eax
c001d4c8:	5b                   	pop    ebx
c001d4c9:	5e                   	pop    esi
c001d4ca:	c3                   	ret    
c001d4cb:	90                   	nop

c001d4cc <ATAPI::read(unsigned long long, int, void*)>:
c001d4cc:	55                   	push   ebp
c001d4cd:	57                   	push   edi
c001d4ce:	56                   	push   esi
c001d4cf:	53                   	push   ebx
c001d4d0:	83 ec 1c             	sub    esp,0x1c
c001d4d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4db:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4df:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4e6:	74 3c                	je     c001d524 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d4e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4ec:	b9 03 00 00 00       	mov    ecx,0x3
c001d4f1:	fc                   	cld    
c001d4f2:	31 c0                	xor    eax,eax
c001d4f4:	0f ce                	bswap  esi
c001d4f6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4f8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d4fd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d501:	89 e8                	mov    eax,ebp
c001d503:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d507:	50                   	push   eax
c001d508:	50                   	push   eax
c001d509:	55                   	push   ebp
c001d50a:	c1 e5 0b             	shl    ebp,0xb
c001d50d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d511:	6a 00                	push   0x0
c001d513:	55                   	push   ebp
c001d514:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d518:	50                   	push   eax
c001d519:	53                   	push   ebx
c001d51a:	e8 b9 fa ff ff       	call   c001cfd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d51f:	83 c4 20             	add    esp,0x20
c001d522:	eb 1a                	jmp    c001d53e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	53                   	push   ebx
c001d528:	e8 01 fe ff ff       	call   c001d32e <ATAPI::detectMedia()>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d537:	75 af                	jne    c001d4e8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d539:	b8 02 00 00 00       	mov    eax,0x2
c001d53e:	83 c4 1c             	add    esp,0x1c
c001d541:	5b                   	pop    ebx
c001d542:	5e                   	pop    esi
c001d543:	5f                   	pop    edi
c001d544:	5d                   	pop    ebp
c001d545:	c3                   	ret    

c001d546 <SATA::close(int, int, void*)>:
c001d546:	83 ec 0c             	sub    esp,0xc
c001d549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d553:	85 c0                	test   eax,eax
c001d555:	74 0c                	je     c001d563 <SATA::close(int, int, void*)+0x1d>
c001d557:	83 ec 0c             	sub    esp,0xc
c001d55a:	8b 10                	mov    edx,DWORD PTR [eax]
c001d55c:	50                   	push   eax
c001d55d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d560:	83 c4 10             	add    esp,0x10
c001d563:	31 c0                	xor    eax,eax
c001d565:	83 c4 0c             	add    esp,0xc
c001d568:	c3                   	ret    
c001d569:	90                   	nop

c001d56a <SATA::powerSaving(PowerSavingLevel)>:
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <SATA::open(int, int, void*)>:
c001d56c:	56                   	push   esi
c001d56d:	53                   	push   ebx
c001d56e:	50                   	push   eax
c001d56f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d573:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d577:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d581:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d587:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d591:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d595:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d59f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d5ac:	e8 0e a8 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d5b1:	89 c6                	mov    esi,eax
c001d5b3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5b9:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5bf:	e8 fb a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d5c4:	39 c6                	cmp    esi,eax
c001d5c6:	74 10                	je     c001d5d8 <SATA::open(int, int, void*)+0x6c>
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	68 20 2c 02 c0       	push   0xc0022c20
c001d5d0:	e8 28 3c ff ff       	call   c00111fd <KePanic(char const*)>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	6a 02                	push   0x2
c001d5dd:	e8 2b c0 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d5e2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5e8:	6a 03                	push   0x3
c001d5ea:	50                   	push   eax
c001d5eb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d5f1:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d5f7:	e8 24 c7 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d5fc:	83 c4 14             	add    esp,0x14
c001d5ff:	53                   	push   ebx
c001d600:	e8 21 f4 fe ff       	call   c000ca26 <PhysicalDisk::startCache()>
c001d605:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d608:	e8 5d 06 ff ff       	call   c000dc6a <createPartitionsForDisk(PhysicalDisk*)>
c001d60d:	83 c4 14             	add    esp,0x14
c001d610:	31 c0                	xor    eax,eax
c001d612:	5b                   	pop    ebx
c001d613:	5e                   	pop    esi
c001d614:	c3                   	ret    
c001d615:	90                   	nop

c001d616 <SATA::SATA()>:
c001d616:	83 ec 0c             	sub    esp,0xc
c001d619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61d:	83 ec 04             	sub    esp,0x4
c001d620:	68 00 02 00 00       	push   0x200
c001d625:	68 34 2c 02 c0       	push   0xc0022c34
c001d62a:	50                   	push   eax
c001d62b:	e8 8e f3 fe ff       	call   c000c9be <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d630:	83 c4 10             	add    esp,0x10
c001d633:	ba a4 2c 02 c0       	mov    edx,0xc0022ca4
c001d638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63c:	89 10                	mov    DWORD PTR [eax],edx
c001d63e:	90                   	nop
c001d63f:	83 c4 0c             	add    esp,0xc
c001d642:	c3                   	ret    
c001d643:	90                   	nop

c001d644 <SATA::access(unsigned long long, int, void*, bool)>:
c001d644:	55                   	push   ebp
c001d645:	57                   	push   edi
c001d646:	56                   	push   esi
c001d647:	53                   	push   ebx
c001d648:	83 ec 2c             	sub    esp,0x2c
c001d64b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d64f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d653:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d657:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d65b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d65f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d668:	7e 10                	jle    c001d67a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d66a:	83 ec 0c             	sub    esp,0xc
c001d66d:	68 44 2c 02 c0       	push   0xc0022c44
c001d672:	e8 86 3b ff ff       	call   c00111fd <KePanic(char const*)>
c001d677:	83 c4 10             	add    esp,0x10
c001d67a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d680:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d686:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d68c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d690:	89 d0                	mov    eax,edx
c001d692:	c1 e0 07             	shl    eax,0x7
c001d695:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d699:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6a3:	51                   	push   ecx
c001d6a4:	8d 42 02             	lea    eax,[edx+0x2]
c001d6a7:	51                   	push   ecx
c001d6a8:	c1 e0 07             	shl    eax,0x7
c001d6ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6af:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6b3:	50                   	push   eax
c001d6b4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d6ba:	e8 91 ec ff ff       	call   c001c350 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6c3:	83 c4 10             	add    esp,0x10
c001d6c6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d6cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6cf:	0f 84 57 01 00 00    	je     c001d82c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d6d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d6d9:	c1 e0 09             	shl    eax,0x9
c001d6dc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d6e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6e5:	74 0e                	je     c001d6f5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d6e7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d6ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d6f1:	89 c1                	mov    ecx,eax
c001d6f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6f5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d6fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6ff:	8d 42 02             	lea    eax,[edx+0x2]
c001d702:	c1 e0 07             	shl    eax,0x7
c001d705:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d709:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d711:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d717:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d71b:	c1 e1 05             	shl    ecx,0x5
c001d71e:	01 c8                	add    eax,ecx
c001d720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d724:	83 e1 01             	and    ecx,0x1
c001d727:	89 ce                	mov    esi,ecx
c001d729:	8a 08                	mov    cl,BYTE PTR [eax]
c001d72b:	c1 e6 06             	shl    esi,0x6
c001d72e:	83 e1 bf             	and    ecx,0xffffffbf
c001d731:	09 f1                	or     ecx,esi
c001d733:	88 08                	mov    BYTE PTR [eax],cl
c001d735:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d737:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d73d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d743:	89 08                	mov    DWORD PTR [eax],ecx
c001d745:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d74b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d751:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d757:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d75a:	50                   	push   eax
c001d75b:	68 90 00 00 00       	push   0x90
c001d760:	6a 00                	push   0x0
c001d762:	56                   	push   esi
c001d763:	e8 88 2d fe ff       	call   c00004f0 <memset>
c001d768:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d76e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d774:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d778:	83 c4 10             	add    esp,0x10
c001d77b:	48                   	dec    eax
c001d77c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d781:	89 c1                	mov    ecx,eax
c001d783:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d789:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d78e:	09 c8                	or     eax,ecx
c001d790:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d796:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d79c:	83 c8 80             	or     eax,0xffffff80
c001d79f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d7a5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d7a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7ac:	25 00 7f 00 00       	and    eax,0x7f00
c001d7b1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7b6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d7bb:	66 89 06             	mov    WORD PTR [esi],ax
c001d7be:	b0 35                	mov    al,0x35
c001d7c0:	75 02                	jne    c001d7c4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d7c2:	b0 25                	mov    al,0x25
c001d7c4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d7c7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d7cb:	89 e8                	mov    eax,ebp
c001d7cd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d7d1:	c1 e8 10             	shr    eax,0x10
c001d7d4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d7d7:	89 e8                	mov    eax,ebp
c001d7d9:	c1 e8 18             	shr    eax,0x18
c001d7dc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d7df:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7e3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d7e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7ea:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d7ed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7f1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d7f5:	89 d6                	mov    esi,edx
c001d7f7:	31 c0                	xor    eax,eax
c001d7f9:	c1 e6 07             	shl    esi,0x7
c001d7fc:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d800:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d806:	80 e1 88             	and    cl,0x88
c001d809:	74 0a                	je     c001d815 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d80b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d810:	74 0a                	je     c001d81c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d812:	40                   	inc    eax
c001d813:	eb eb                	jmp    c001d800 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d815:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d81a:	75 17                	jne    c001d833 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d81c:	83 ec 0c             	sub    esp,0xc
c001d81f:	68 7d 2c 02 c0       	push   0xc0022c7d
c001d824:	e8 1c d1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d829:	83 c4 10             	add    esp,0x10
c001d82c:	b8 01 00 00 00       	mov    eax,0x1
c001d831:	eb 5d                	jmp    c001d890 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d833:	b8 01 00 00 00       	mov    eax,0x1
c001d838:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d83c:	c1 e2 07             	shl    edx,0x7
c001d83f:	d3 e0                	shl    eax,cl
c001d841:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d845:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d84b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d851:	85 c8                	test   eax,ecx
c001d853:	74 16                	je     c001d86b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d855:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d85b:	0f ba e1 1e          	bt     ecx,0x1e
c001d85f:	73 ea                	jae    c001d84b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d861:	83 ec 0c             	sub    esp,0xc
c001d864:	68 8b 2c 02 c0       	push   0xc0022c8b
c001d869:	eb b9                	jmp    c001d824 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d86b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d871:	0f ba e0 1e          	bt     eax,0x1e
c001d875:	72 b5                	jb     c001d82c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d877:	31 c0                	xor    eax,eax
c001d879:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d87e:	75 10                	jne    c001d890 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d880:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d886:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d88a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d88e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d890:	83 c4 2c             	add    esp,0x2c
c001d893:	5b                   	pop    ebx
c001d894:	5e                   	pop    esi
c001d895:	5f                   	pop    edi
c001d896:	5d                   	pop    ebp
c001d897:	c3                   	ret    

c001d898 <SATA::read(unsigned long long, int, void*)>:
c001d898:	55                   	push   ebp
c001d899:	57                   	push   edi
c001d89a:	56                   	push   esi
c001d89b:	be 04 00 00 00       	mov    esi,0x4
c001d8a0:	53                   	push   ebx
c001d8a1:	83 ec 0c             	sub    esp,0xc
c001d8a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d8ac:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d8af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8b3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d8b7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d8bd:	0f 87 1a 02 00 00    	ja     c001dadd <SATA::read(unsigned long long, int, void*)+0x245>
c001d8c3:	be 06 00 00 00       	mov    esi,0x6
c001d8c8:	85 c9                	test   ecx,ecx
c001d8ca:	0f 84 0d 02 00 00    	je     c001dadd <SATA::read(unsigned long long, int, void*)+0x245>
c001d8d0:	56                   	push   esi
c001d8d1:	56                   	push   esi
c001d8d2:	6a 00                	push   0x0
c001d8d4:	51                   	push   ecx
c001d8d5:	53                   	push   ebx
c001d8d6:	52                   	push   edx
c001d8d7:	50                   	push   eax
c001d8d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8dc:	e8 63 fd ff ff       	call   c001d644 <SATA::access(unsigned long long, int, void*, bool)>
c001d8e1:	83 c4 20             	add    esp,0x20
c001d8e4:	89 c6                	mov    esi,eax
c001d8e6:	85 c0                	test   eax,eax
c001d8e8:	0f 85 ea 01 00 00    	jne    c001dad8 <SATA::read(unsigned long long, int, void*)+0x240>
c001d8ee:	01 1d 54 ae 02 c0    	add    DWORD PTR ds:0xc002ae54,ebx
c001d8f4:	bb 0a 00 00 00       	mov    ebx,0xa
c001d8f9:	50                   	push   eax
c001d8fa:	50                   	push   eax
c001d8fb:	6a 0f                	push   0xf
c001d8fd:	6a 00                	push   0x0
c001d8ff:	e8 75 f2 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001d904:	5a                   	pop    edx
c001d905:	0f b6 c0             	movzx  eax,al
c001d908:	59                   	pop    ecx
c001d909:	b9 10 27 00 00       	mov    ecx,0x2710
c001d90e:	50                   	push   eax
c001d90f:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d914:	99                   	cdq    
c001d915:	f7 f9                	idiv   ecx
c001d917:	99                   	cdq    
c001d918:	f7 fb                	idiv   ebx
c001d91a:	8d 42 30             	lea    eax,[edx+0x30]
c001d91d:	0f b6 c0             	movzx  eax,al
c001d920:	50                   	push   eax
c001d921:	e8 42 f2 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001d926:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d92c:	5f                   	pop    edi
c001d92d:	5d                   	pop    ebp
c001d92e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d933:	6a 0f                	push   0xf
c001d935:	6a 00                	push   0x0
c001d937:	e8 3d f2 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001d93c:	5a                   	pop    edx
c001d93d:	0f b6 c0             	movzx  eax,al
c001d940:	59                   	pop    ecx
c001d941:	50                   	push   eax
c001d942:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d947:	99                   	cdq    
c001d948:	f7 fd                	idiv   ebp
c001d94a:	99                   	cdq    
c001d94b:	f7 fb                	idiv   ebx
c001d94d:	8d 42 30             	lea    eax,[edx+0x30]
c001d950:	0f b6 c0             	movzx  eax,al
c001d953:	50                   	push   eax
c001d954:	e8 0f f2 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001d959:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d95f:	5f                   	pop    edi
c001d960:	bf 64 00 00 00       	mov    edi,0x64
c001d965:	58                   	pop    eax
c001d966:	6a 0f                	push   0xf
c001d968:	6a 00                	push   0x0
c001d96a:	e8 0a f2 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001d96f:	5a                   	pop    edx
c001d970:	0f b6 c0             	movzx  eax,al
c001d973:	59                   	pop    ecx
c001d974:	50                   	push   eax
c001d975:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d97a:	99                   	cdq    
c001d97b:	f7 ff                	idiv   edi
c001d97d:	99                   	cdq    
c001d97e:	f7 fb                	idiv   ebx
c001d980:	8d 42 30             	lea    eax,[edx+0x30]
c001d983:	0f b6 c0             	movzx  eax,al
c001d986:	50                   	push   eax
c001d987:	e8 dc f1 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001d98c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d992:	58                   	pop    eax
c001d993:	5a                   	pop    edx
c001d994:	6a 0f                	push   0xf
c001d996:	6a 00                	push   0x0
c001d998:	e8 dc f1 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001d99d:	59                   	pop    ecx
c001d99e:	0f b6 c0             	movzx  eax,al
c001d9a1:	5a                   	pop    edx
c001d9a2:	50                   	push   eax
c001d9a3:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9a8:	99                   	cdq    
c001d9a9:	f7 fb                	idiv   ebx
c001d9ab:	99                   	cdq    
c001d9ac:	f7 fb                	idiv   ebx
c001d9ae:	8d 42 30             	lea    eax,[edx+0x30]
c001d9b1:	0f b6 c0             	movzx  eax,al
c001d9b4:	50                   	push   eax
c001d9b5:	e8 ae f1 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001d9ba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d9c0:	59                   	pop    ecx
c001d9c1:	58                   	pop    eax
c001d9c2:	6a 0f                	push   0xf
c001d9c4:	6a 00                	push   0x0
c001d9c6:	e8 ae f1 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001d9cb:	5a                   	pop    edx
c001d9cc:	0f b6 c0             	movzx  eax,al
c001d9cf:	59                   	pop    ecx
c001d9d0:	50                   	push   eax
c001d9d1:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9d6:	99                   	cdq    
c001d9d7:	f7 fb                	idiv   ebx
c001d9d9:	8d 42 30             	lea    eax,[edx+0x30]
c001d9dc:	0f b6 c0             	movzx  eax,al
c001d9df:	50                   	push   eax
c001d9e0:	e8 83 f1 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001d9e5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d9eb:	58                   	pop    eax
c001d9ec:	5a                   	pop    edx
c001d9ed:	6a 0f                	push   0xf
c001d9ef:	6a 00                	push   0x0
c001d9f1:	e8 83 f1 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001d9f6:	59                   	pop    ecx
c001d9f7:	0f b6 c0             	movzx  eax,al
c001d9fa:	5a                   	pop    edx
c001d9fb:	b9 10 27 00 00       	mov    ecx,0x2710
c001da00:	50                   	push   eax
c001da01:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da06:	99                   	cdq    
c001da07:	f7 f9                	idiv   ecx
c001da09:	99                   	cdq    
c001da0a:	f7 fb                	idiv   ebx
c001da0c:	8d 42 30             	lea    eax,[edx+0x30]
c001da0f:	0f b6 c0             	movzx  eax,al
c001da12:	50                   	push   eax
c001da13:	e8 50 f1 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001da18:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da1e:	59                   	pop    ecx
c001da1f:	58                   	pop    eax
c001da20:	6a 0f                	push   0xf
c001da22:	6a 00                	push   0x0
c001da24:	e8 50 f1 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001da29:	5a                   	pop    edx
c001da2a:	0f b6 c0             	movzx  eax,al
c001da2d:	59                   	pop    ecx
c001da2e:	50                   	push   eax
c001da2f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da34:	99                   	cdq    
c001da35:	f7 fd                	idiv   ebp
c001da37:	99                   	cdq    
c001da38:	f7 fb                	idiv   ebx
c001da3a:	8d 42 30             	lea    eax,[edx+0x30]
c001da3d:	0f b6 c0             	movzx  eax,al
c001da40:	50                   	push   eax
c001da41:	e8 22 f1 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001da46:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da4c:	5d                   	pop    ebp
c001da4d:	58                   	pop    eax
c001da4e:	6a 0f                	push   0xf
c001da50:	6a 00                	push   0x0
c001da52:	e8 22 f1 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001da57:	5a                   	pop    edx
c001da58:	0f b6 c0             	movzx  eax,al
c001da5b:	59                   	pop    ecx
c001da5c:	50                   	push   eax
c001da5d:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da62:	99                   	cdq    
c001da63:	f7 ff                	idiv   edi
c001da65:	99                   	cdq    
c001da66:	f7 fb                	idiv   ebx
c001da68:	8d 42 30             	lea    eax,[edx+0x30]
c001da6b:	0f b6 c0             	movzx  eax,al
c001da6e:	50                   	push   eax
c001da6f:	e8 f4 f0 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001da74:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001da7a:	5f                   	pop    edi
c001da7b:	5d                   	pop    ebp
c001da7c:	6a 0f                	push   0xf
c001da7e:	6a 00                	push   0x0
c001da80:	e8 f4 f0 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001da85:	5a                   	pop    edx
c001da86:	0f b6 c0             	movzx  eax,al
c001da89:	59                   	pop    ecx
c001da8a:	50                   	push   eax
c001da8b:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da90:	99                   	cdq    
c001da91:	f7 fb                	idiv   ebx
c001da93:	99                   	cdq    
c001da94:	f7 fb                	idiv   ebx
c001da96:	8d 42 30             	lea    eax,[edx+0x30]
c001da99:	0f b6 c0             	movzx  eax,al
c001da9c:	50                   	push   eax
c001da9d:	e8 c6 f0 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001daa2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001daa8:	5f                   	pop    edi
c001daa9:	5d                   	pop    ebp
c001daaa:	6a 0f                	push   0xf
c001daac:	6a 00                	push   0x0
c001daae:	e8 c6 f0 ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dab3:	5a                   	pop    edx
c001dab4:	0f b6 c0             	movzx  eax,al
c001dab7:	59                   	pop    ecx
c001dab8:	50                   	push   eax
c001dab9:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dabe:	99                   	cdq    
c001dabf:	f7 fb                	idiv   ebx
c001dac1:	83 c2 30             	add    edx,0x30
c001dac4:	0f b6 d2             	movzx  edx,dl
c001dac7:	52                   	push   edx
c001dac8:	e8 9b f0 ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dacd:	83 c4 10             	add    esp,0x10
c001dad0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dad6:	eb 05                	jmp    c001dadd <SATA::read(unsigned long long, int, void*)+0x245>
c001dad8:	be 01 00 00 00       	mov    esi,0x1
c001dadd:	83 c4 0c             	add    esp,0xc
c001dae0:	89 f0                	mov    eax,esi
c001dae2:	5b                   	pop    ebx
c001dae3:	5e                   	pop    esi
c001dae4:	5f                   	pop    edi
c001dae5:	5d                   	pop    ebp
c001dae6:	c3                   	ret    
c001dae7:	90                   	nop

c001dae8 <SATA::write(unsigned long long, int, void*)>:
c001dae8:	55                   	push   ebp
c001dae9:	b8 04 00 00 00       	mov    eax,0x4
c001daee:	57                   	push   edi
c001daef:	56                   	push   esi
c001daf0:	53                   	push   ebx
c001daf1:	83 ec 1c             	sub    esp,0x1c
c001daf4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001daf8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dafc:	8d 75 ff             	lea    esi,[ebp-0x1]
c001daff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db03:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001db07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db0d:	0f 87 32 02 00 00    	ja     c001dd45 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db13:	b8 06 00 00 00       	mov    eax,0x6
c001db18:	85 ff                	test   edi,edi
c001db1a:	0f 84 25 02 00 00    	je     c001dd45 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db20:	89 ee                	mov    esi,ebp
c001db22:	c1 e6 09             	shl    esi,0x9
c001db25:	01 fe                	add    esi,edi
c001db27:	89 c8                	mov    eax,ecx
c001db29:	89 da                	mov    edx,ebx
c001db2b:	83 c0 01             	add    eax,0x1
c001db2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db32:	83 d2 00             	adc    edx,0x0
c001db35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db39:	50                   	push   eax
c001db3a:	50                   	push   eax
c001db3b:	6a 01                	push   0x1
c001db3d:	57                   	push   edi
c001db3e:	81 c7 00 02 00 00    	add    edi,0x200
c001db44:	6a 01                	push   0x1
c001db46:	53                   	push   ebx
c001db47:	51                   	push   ecx
c001db48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db4c:	e8 f3 fa ff ff       	call   c001d644 <SATA::access(unsigned long long, int, void*, bool)>
c001db51:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db55:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001db59:	83 c4 20             	add    esp,0x20
c001db5c:	39 f7                	cmp    edi,esi
c001db5e:	75 c7                	jne    c001db27 <SATA::write(unsigned long long, int, void*)+0x3f>
c001db60:	bb 0a 00 00 00       	mov    ebx,0xa
c001db65:	01 2d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebp
c001db6b:	bd 10 27 00 00       	mov    ebp,0x2710
c001db70:	50                   	push   eax
c001db71:	50                   	push   eax
c001db72:	6a 0f                	push   0xf
c001db74:	6a 00                	push   0x0
c001db76:	e8 fe ef ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001db7b:	5a                   	pop    edx
c001db7c:	0f b6 c0             	movzx  eax,al
c001db7f:	59                   	pop    ecx
c001db80:	50                   	push   eax
c001db81:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db86:	99                   	cdq    
c001db87:	f7 fd                	idiv   ebp
c001db89:	99                   	cdq    
c001db8a:	f7 fb                	idiv   ebx
c001db8c:	8d 42 30             	lea    eax,[edx+0x30]
c001db8f:	0f b6 c0             	movzx  eax,al
c001db92:	50                   	push   eax
c001db93:	e8 d0 ef ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001db98:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db9e:	5e                   	pop    esi
c001db9f:	5f                   	pop    edi
c001dba0:	bf e8 03 00 00       	mov    edi,0x3e8
c001dba5:	6a 0f                	push   0xf
c001dba7:	6a 00                	push   0x0
c001dba9:	e8 cb ef ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dbae:	5a                   	pop    edx
c001dbaf:	0f b6 c0             	movzx  eax,al
c001dbb2:	59                   	pop    ecx
c001dbb3:	50                   	push   eax
c001dbb4:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbb9:	99                   	cdq    
c001dbba:	f7 ff                	idiv   edi
c001dbbc:	99                   	cdq    
c001dbbd:	f7 fb                	idiv   ebx
c001dbbf:	8d 42 30             	lea    eax,[edx+0x30]
c001dbc2:	0f b6 c0             	movzx  eax,al
c001dbc5:	50                   	push   eax
c001dbc6:	e8 9d ef ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dbcb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbd1:	5e                   	pop    esi
c001dbd2:	be 64 00 00 00       	mov    esi,0x64
c001dbd7:	58                   	pop    eax
c001dbd8:	6a 0f                	push   0xf
c001dbda:	6a 00                	push   0x0
c001dbdc:	e8 98 ef ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dbe1:	5a                   	pop    edx
c001dbe2:	0f b6 c0             	movzx  eax,al
c001dbe5:	59                   	pop    ecx
c001dbe6:	50                   	push   eax
c001dbe7:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbec:	99                   	cdq    
c001dbed:	f7 fe                	idiv   esi
c001dbef:	99                   	cdq    
c001dbf0:	f7 fb                	idiv   ebx
c001dbf2:	8d 42 30             	lea    eax,[edx+0x30]
c001dbf5:	0f b6 c0             	movzx  eax,al
c001dbf8:	50                   	push   eax
c001dbf9:	e8 6a ef ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dbfe:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc04:	58                   	pop    eax
c001dc05:	5a                   	pop    edx
c001dc06:	6a 0f                	push   0xf
c001dc08:	6a 00                	push   0x0
c001dc0a:	e8 6a ef ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dc0f:	59                   	pop    ecx
c001dc10:	0f b6 c0             	movzx  eax,al
c001dc13:	5a                   	pop    edx
c001dc14:	50                   	push   eax
c001dc15:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc1a:	99                   	cdq    
c001dc1b:	f7 fb                	idiv   ebx
c001dc1d:	99                   	cdq    
c001dc1e:	f7 fb                	idiv   ebx
c001dc20:	8d 42 30             	lea    eax,[edx+0x30]
c001dc23:	0f b6 c0             	movzx  eax,al
c001dc26:	50                   	push   eax
c001dc27:	e8 3c ef ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dc2c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc32:	59                   	pop    ecx
c001dc33:	58                   	pop    eax
c001dc34:	6a 0f                	push   0xf
c001dc36:	6a 00                	push   0x0
c001dc38:	e8 3c ef ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dc3d:	5a                   	pop    edx
c001dc3e:	0f b6 c0             	movzx  eax,al
c001dc41:	59                   	pop    ecx
c001dc42:	50                   	push   eax
c001dc43:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc48:	99                   	cdq    
c001dc49:	f7 fb                	idiv   ebx
c001dc4b:	83 c2 30             	add    edx,0x30
c001dc4e:	0f b6 d2             	movzx  edx,dl
c001dc51:	52                   	push   edx
c001dc52:	e8 11 ef ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dc57:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc5d:	58                   	pop    eax
c001dc5e:	5a                   	pop    edx
c001dc5f:	6a 0f                	push   0xf
c001dc61:	6a 00                	push   0x0
c001dc63:	e8 11 ef ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dc68:	59                   	pop    ecx
c001dc69:	0f b6 c0             	movzx  eax,al
c001dc6c:	5a                   	pop    edx
c001dc6d:	50                   	push   eax
c001dc6e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc73:	99                   	cdq    
c001dc74:	f7 fd                	idiv   ebp
c001dc76:	99                   	cdq    
c001dc77:	f7 fb                	idiv   ebx
c001dc79:	8d 42 30             	lea    eax,[edx+0x30]
c001dc7c:	0f b6 c0             	movzx  eax,al
c001dc7f:	50                   	push   eax
c001dc80:	e8 e3 ee ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dc85:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc8b:	59                   	pop    ecx
c001dc8c:	5d                   	pop    ebp
c001dc8d:	6a 0f                	push   0xf
c001dc8f:	6a 00                	push   0x0
c001dc91:	e8 e3 ee ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dc96:	5a                   	pop    edx
c001dc97:	0f b6 c0             	movzx  eax,al
c001dc9a:	59                   	pop    ecx
c001dc9b:	50                   	push   eax
c001dc9c:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dca1:	99                   	cdq    
c001dca2:	f7 ff                	idiv   edi
c001dca4:	99                   	cdq    
c001dca5:	f7 fb                	idiv   ebx
c001dca7:	8d 42 30             	lea    eax,[edx+0x30]
c001dcaa:	0f b6 c0             	movzx  eax,al
c001dcad:	50                   	push   eax
c001dcae:	e8 b5 ee ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dcb3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dcb9:	5f                   	pop    edi
c001dcba:	5d                   	pop    ebp
c001dcbb:	6a 0f                	push   0xf
c001dcbd:	6a 00                	push   0x0
c001dcbf:	e8 b5 ee ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dcc4:	5a                   	pop    edx
c001dcc5:	0f b6 c0             	movzx  eax,al
c001dcc8:	59                   	pop    ecx
c001dcc9:	50                   	push   eax
c001dcca:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dccf:	99                   	cdq    
c001dcd0:	f7 fe                	idiv   esi
c001dcd2:	99                   	cdq    
c001dcd3:	f7 fb                	idiv   ebx
c001dcd5:	8d 42 30             	lea    eax,[edx+0x30]
c001dcd8:	0f b6 c0             	movzx  eax,al
c001dcdb:	50                   	push   eax
c001dcdc:	e8 87 ee ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dce1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dce7:	5e                   	pop    esi
c001dce8:	5f                   	pop    edi
c001dce9:	6a 0f                	push   0xf
c001dceb:	6a 00                	push   0x0
c001dced:	e8 87 ee ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dcf2:	5d                   	pop    ebp
c001dcf3:	0f b6 c0             	movzx  eax,al
c001dcf6:	5a                   	pop    edx
c001dcf7:	50                   	push   eax
c001dcf8:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcfd:	99                   	cdq    
c001dcfe:	f7 fb                	idiv   ebx
c001dd00:	99                   	cdq    
c001dd01:	f7 fb                	idiv   ebx
c001dd03:	8d 42 30             	lea    eax,[edx+0x30]
c001dd06:	0f b6 c0             	movzx  eax,al
c001dd09:	50                   	push   eax
c001dd0a:	e8 59 ee ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dd0f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd15:	59                   	pop    ecx
c001dd16:	5e                   	pop    esi
c001dd17:	6a 0f                	push   0xf
c001dd19:	6a 00                	push   0x0
c001dd1b:	e8 59 ee ff ff       	call   c001cb79 <combineColours(unsigned char, unsigned char)>
c001dd20:	5f                   	pop    edi
c001dd21:	0f b6 c0             	movzx  eax,al
c001dd24:	5d                   	pop    ebp
c001dd25:	50                   	push   eax
c001dd26:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd2b:	99                   	cdq    
c001dd2c:	f7 fb                	idiv   ebx
c001dd2e:	83 c2 30             	add    edx,0x30
c001dd31:	0f b6 d2             	movzx  edx,dl
c001dd34:	52                   	push   edx
c001dd35:	e8 2e ee ff ff       	call   c001cb68 <combineCharAndColour(char, unsigned char)>
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd43:	31 c0                	xor    eax,eax
c001dd45:	83 c4 1c             	add    esp,0x1c
c001dd48:	5b                   	pop    ebx
c001dd49:	5e                   	pop    esi
c001dd4a:	5f                   	pop    edi
c001dd4b:	5d                   	pop    ebp
c001dd4c:	c3                   	ret    
c001dd4d:	90                   	nop

c001dd4e <SATAPI::write(unsigned long long, int, void*)>:
c001dd4e:	b8 03 00 00 00       	mov    eax,0x3
c001dd53:	c3                   	ret    

c001dd54 <SATAPI::close(int, int, void*)>:
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd61:	85 c0                	test   eax,eax
c001dd63:	74 0c                	je     c001dd71 <SATAPI::close(int, int, void*)+0x1d>
c001dd65:	83 ec 0c             	sub    esp,0xc
c001dd68:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd6a:	50                   	push   eax
c001dd6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	31 c0                	xor    eax,eax
c001dd73:	83 c4 0c             	add    esp,0xc
c001dd76:	c3                   	ret    
c001dd77:	90                   	nop

c001dd78 <SATAPI::SATAPI()>:
c001dd78:	83 ec 0c             	sub    esp,0xc
c001dd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd7f:	83 ec 04             	sub    esp,0x4
c001dd82:	68 00 08 00 00       	push   0x800
c001dd87:	68 d4 2c 02 c0       	push   0xc0022cd4
c001dd8c:	50                   	push   eax
c001dd8d:	e8 2c ec fe ff       	call   c000c9be <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	ba c8 2d 02 c0       	mov    edx,0xc0022dc8
c001dd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9e:	89 10                	mov    DWORD PTR [eax],edx
c001dda0:	90                   	nop
c001dda1:	83 c4 0c             	add    esp,0xc
c001dda4:	c3                   	ret    
c001dda5:	90                   	nop

c001dda6 <SATAPI::diskRemoved()>:
c001dda6:	c3                   	ret    
c001dda7:	90                   	nop

c001dda8 <SATAPI::diskInserted()>:
c001dda8:	83 ec 18             	sub    esp,0x18
c001ddab:	68 e0 2c 02 c0       	push   0xc0022ce0
c001ddb0:	e8 90 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001ddb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddb9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ddc0:	83 c4 1c             	add    esp,0x1c
c001ddc3:	c3                   	ret    

c001ddc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ddc4:	55                   	push   ebp
c001ddc5:	57                   	push   edi
c001ddc6:	56                   	push   esi
c001ddc7:	53                   	push   ebx
c001ddc8:	83 ec 34             	sub    esp,0x34
c001ddcb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ddcf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ddd3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ddd7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dddb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001dddf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001dde5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddef:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ddf5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ddf9:	83 c0 02             	add    eax,0x2
c001ddfc:	c1 e0 07             	shl    eax,0x7
c001ddff:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de0b:	c1 e0 07             	shl    eax,0x7
c001de0e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de16:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de24:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de2a:	e8 21 e5 ff ff       	call   c001c350 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de33:	83 c4 10             	add    esp,0x10
c001de36:	b8 01 00 00 00       	mov    eax,0x1
c001de3b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001de40:	0f 84 53 02 00 00    	je     c001e099 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001de46:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de50:	8b 00                	mov    eax,DWORD PTR [eax]
c001de52:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de58:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de62:	c1 e1 05             	shl    ecx,0x5
c001de65:	01 c8                	add    eax,ecx
c001de67:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de69:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001de6f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001de75:	89 08                	mov    DWORD PTR [eax],ecx
c001de77:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de7d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001de83:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001de89:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001de8c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001de8f:	50                   	push   eax
c001de90:	68 90 00 00 00       	push   0x90
c001de95:	6a 00                	push   0x0
c001de97:	53                   	push   ebx
c001de98:	e8 53 26 fe ff       	call   c00004f0 <memset>
c001de9d:	b9 0c 00 00 00       	mov    ecx,0xc
c001dea2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001dea6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dea8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001deae:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001deb2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001deb8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001debc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dec0:	48                   	dec    eax
c001dec1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dec6:	89 c1                	mov    ecx,eax
c001dec8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dece:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ded3:	09 c8                	or     eax,ecx
c001ded5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001dedb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001dee1:	83 c8 80             	or     eax,0xffffff80
c001dee4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001deea:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001deed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001def1:	25 00 7f 00 00       	and    eax,0x7f00
c001def6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001defa:	0d 27 80 ff ff       	or     eax,0xffff8027
c001deff:	66 89 03             	mov    WORD PTR [ebx],ax
c001df02:	89 d0                	mov    eax,edx
c001df04:	c1 ea 18             	shr    edx,0x18
c001df07:	c1 e8 10             	shr    eax,0x10
c001df0a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001df0d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df10:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df14:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df1b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df1e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df22:	83 c4 10             	add    esp,0x10
c001df25:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df2d:	31 c0                	xor    eax,eax
c001df2f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001df35:	80 e1 88             	and    cl,0x88
c001df38:	74 0a                	je     c001df44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001df3a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df3f:	74 0a                	je     c001df4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001df41:	40                   	inc    eax
c001df42:	eb eb                	jmp    c001df2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001df44:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df49:	75 43                	jne    c001df8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001df4b:	83 ec 0c             	sub    esp,0xc
c001df4e:	68 f8 2c 02 c0       	push   0xc0022cf8
c001df53:	e8 ed c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001df58:	58                   	pop    eax
c001df59:	5a                   	pop    edx
c001df5a:	68 0d 2d 02 c0       	push   0xc0022d0d
c001df5f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001df65:	e8 3c ab fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001df6a:	59                   	pop    ecx
c001df6b:	5b                   	pop    ebx
c001df6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df70:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df76:	e8 6f e4 ff ff       	call   c001c3ea <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001df7b:	5e                   	pop    esi
c001df7c:	5f                   	pop    edi
c001df7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df81:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df87:	e8 3e e4 ff ff       	call   c001c3ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001df8c:	eb 48                	jmp    c001dfd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001df8e:	be 01 00 00 00       	mov    esi,0x1
c001df93:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001df97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001df9b:	d3 e6                	shl    esi,cl
c001df9d:	c1 e7 07             	shl    edi,0x7
c001dfa0:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001dfa6:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001dfab:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001dfaf:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001dfb5:	85 c6                	test   esi,eax
c001dfb7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001dfbd:	0f 84 a3 00 00 00    	je     c001e066 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001dfc3:	0f ba e0 1e          	bt     eax,0x1e
c001dfc7:	73 1a                	jae    c001dfe3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001dfc9:	83 ec 0c             	sub    esp,0xc
c001dfcc:	68 1f 2d 02 c0       	push   0xc0022d1f
c001dfd1:	e8 6f c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	b8 01 00 00 00       	mov    eax,0x1
c001dfde:	e9 b6 00 00 00       	jmp    c001e099 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001dfe3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001dfe9:	83 f8 0d             	cmp    eax,0xd
c001dfec:	77 0a                	ja     c001dff8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	68 c8 00 00 00       	push   0xc8
c001dff6:	eb 28                	jmp    c001e020 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001dff8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001dffe:	83 f8 0d             	cmp    eax,0xd
c001e001:	77 0a                	ja     c001e00d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e003:	83 ec 0c             	sub    esp,0xc
c001e006:	68 58 02 00 00       	push   0x258
c001e00b:	eb 13                	jmp    c001e020 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e00d:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e013:	83 f8 06             	cmp    eax,0x6
c001e016:	77 10                	ja     c001e028 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	68 dc 05 00 00       	push   0x5dc
c001e020:	e8 c7 7d ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e02c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e02f:	75 06                	jne    c001e037 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e031:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e035:	74 15                	je     c001e04c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e037:	83 fb 06             	cmp    ebx,0x6
c001e03a:	77 10                	ja     c001e04c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e03c:	83 ec 0c             	sub    esp,0xc
c001e03f:	68 c4 09 00 00       	push   0x9c4
c001e044:	e8 a3 7d ff ff       	call   c0015dec <milliTenthSleep(unsigned int)>
c001e049:	83 c4 10             	add    esp,0x10
c001e04c:	43                   	inc    ebx
c001e04d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e053:	0f 85 56 ff ff ff    	jne    c001dfaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e059:	83 ec 0c             	sub    esp,0xc
c001e05c:	68 32 2d 02 c0       	push   0xc0022d32
c001e061:	e9 6b ff ff ff       	jmp    c001dfd1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e066:	0f ba e0 1e          	bt     eax,0x1e
c001e06a:	73 0d                	jae    c001e079 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	68 46 2d 02 c0       	push   0xc0022d46
c001e074:	e9 58 ff ff ff       	jmp    c001dfd1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e079:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e07e:	74 17                	je     c001e097 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e080:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e085:	74 10                	je     c001e097 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e087:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e08d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e091:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e097:	31 c0                	xor    eax,eax
c001e099:	83 c4 2c             	add    esp,0x2c
c001e09c:	5b                   	pop    ebx
c001e09d:	5e                   	pop    esi
c001e09e:	5f                   	pop    edi
c001e09f:	5d                   	pop    ebp
c001e0a0:	c3                   	ret    
c001e0a1:	90                   	nop

c001e0a2 <SATAPI::eject()>:
c001e0a2:	57                   	push   edi
c001e0a3:	b9 03 00 00 00       	mov    ecx,0x3
c001e0a8:	83 ec 18             	sub    esp,0x18
c001e0ab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0af:	fc                   	cld    
c001e0b0:	31 c0                	xor    eax,eax
c001e0b2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0b4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0b9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0be:	50                   	push   eax
c001e0bf:	6a 00                	push   0x0
c001e0c1:	6a 00                	push   0x0
c001e0c3:	6a 00                	push   0x0
c001e0c5:	6a 00                	push   0x0
c001e0c7:	6a 02                	push   0x2
c001e0c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0cd:	50                   	push   eax
c001e0ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0d2:	e8 ed fc ff ff       	call   c001ddc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e0d7:	31 c0                	xor    eax,eax
c001e0d9:	83 c4 38             	add    esp,0x38
c001e0dc:	5f                   	pop    edi
c001e0dd:	c3                   	ret    

c001e0de <SATAPI::detectMedia()>:
c001e0de:	53                   	push   ebx
c001e0df:	83 ec 14             	sub    esp,0x14
c001e0e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0e6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0ec:	e8 4b 02 ff ff       	call   c000e33c <VCache::writeWriteBuffer()>
c001e0f1:	59                   	pop    ecx
c001e0f2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0f8:	e8 2f 02 ff ff       	call   c000e32c <VCache::invalidateReadBuffer()>
c001e0fd:	c7 04 24 5b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d5b
c001e104:	e8 3c c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e109:	83 c4 10             	add    esp,0x10
c001e10c:	31 c0                	xor    eax,eax
c001e10e:	8b 14 85 e0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b20]
c001e115:	85 d2                	test   edx,edx
c001e117:	74 0f                	je     c001e128 <SATAPI::detectMedia()+0x4a>
c001e119:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e11f:	75 07                	jne    c001e128 <SATAPI::detectMedia()+0x4a>
c001e121:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e128:	40                   	inc    eax
c001e129:	83 f8 1a             	cmp    eax,0x1a
c001e12c:	75 e0                	jne    c001e10e <SATAPI::detectMedia()+0x30>
c001e12e:	83 c4 08             	add    esp,0x8
c001e131:	5b                   	pop    ebx
c001e132:	c3                   	ret    
c001e133:	90                   	nop

c001e134 <SATAPI::open(int, int, void*)>:
c001e134:	56                   	push   esi
c001e135:	53                   	push   ebx
c001e136:	51                   	push   ecx
c001e137:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e13b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e13f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e149:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e14f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e15d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e167:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e16d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e174:	e8 46 9c fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e179:	89 c6                	mov    esi,eax
c001e17b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e181:	81 c6 00 10 00 00    	add    esi,0x1000
c001e187:	e8 33 9c fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e18c:	39 c6                	cmp    esi,eax
c001e18e:	74 10                	je     c001e1a0 <SATAPI::open(int, int, void*)+0x6c>
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	68 70 2d 02 c0       	push   0xc0022d70
c001e198:	e8 60 30 ff ff       	call   c00111fd <KePanic(char const*)>
c001e19d:	83 c4 10             	add    esp,0x10
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	6a 02                	push   0x2
c001e1a5:	e8 63 b4 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e1aa:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e1b0:	6a 03                	push   0x3
c001e1b2:	50                   	push   eax
c001e1b3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1b9:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e1bf:	e8 5c bb fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1c4:	83 c4 14             	add    esp,0x14
c001e1c7:	68 78 01 00 00       	push   0x178
c001e1cc:	e8 e5 98 fe ff       	call   c0007ab6 <malloc>
c001e1d1:	83 c4 0c             	add    esp,0xc
c001e1d4:	89 c6                	mov    esi,eax
c001e1d6:	6a 00                	push   0x0
c001e1d8:	68 ff ff ff 7f       	push   0x7fffffff
c001e1dd:	6a 00                	push   0x0
c001e1df:	6a 00                	push   0x0
c001e1e1:	53                   	push   ebx
c001e1e2:	68 86 2d 02 c0       	push   0xc0022d86
c001e1e7:	50                   	push   eax
c001e1e8:	e8 ab f5 fe ff       	call   c000d798 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1ed:	83 c4 14             	add    esp,0x14
c001e1f0:	56                   	push   esi
c001e1f1:	e8 62 f6 fe ff       	call   c000d858 <LogicalDisk::assignDriveLetter()>
c001e1f6:	5a                   	pop    edx
c001e1f7:	0f be c0             	movsx  eax,al
c001e1fa:	59                   	pop    ecx
c001e1fb:	50                   	push   eax
c001e1fc:	68 d8 2b 02 c0       	push   0xc0022bd8
c001e201:	e8 3f c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e206:	58                   	pop    eax
c001e207:	5a                   	pop    edx
c001e208:	56                   	push   esi
c001e209:	53                   	push   ebx
c001e20a:	e8 e3 e3 fe ff       	call   c000c5f2 <Device::addChild(Device*)>
c001e20f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e215:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e218:	e8 09 e8 fe ff       	call   c000ca26 <PhysicalDisk::startCache()>
c001e21d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e227:	e8 b2 fe ff ff       	call   c001e0de <SATAPI::detectMedia()>
c001e22c:	83 c4 14             	add    esp,0x14
c001e22f:	31 c0                	xor    eax,eax
c001e231:	5b                   	pop    ebx
c001e232:	5e                   	pop    esi
c001e233:	c3                   	ret    

c001e234 <SATAPI::read(unsigned long long, int, void*)>:
c001e234:	57                   	push   edi
c001e235:	56                   	push   esi
c001e236:	53                   	push   ebx
c001e237:	83 ec 30             	sub    esp,0x30
c001e23a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e23e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e242:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e246:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e252:	83 fe 04             	cmp    esi,0x4
c001e255:	7e 10                	jle    c001e267 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e257:	83 ec 0c             	sub    esp,0xc
c001e25a:	68 94 2d 02 c0       	push   0xc0022d94
c001e25f:	e8 99 2f ff ff       	call   c00111fd <KePanic(char const*)>
c001e264:	83 c4 10             	add    esp,0x10
c001e267:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e26d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e273:	51                   	push   ecx
c001e274:	50                   	push   eax
c001e275:	83 c0 02             	add    eax,0x2
c001e278:	c1 e0 07             	shl    eax,0x7
c001e27b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e281:	50                   	push   eax
c001e282:	52                   	push   edx
c001e283:	e8 8c e1 ff ff       	call   c001c414 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e288:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e28c:	b9 03 00 00 00       	mov    ecx,0x3
c001e291:	fc                   	cld    
c001e292:	31 c0                	xor    eax,eax
c001e294:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e296:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e29b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e2a0:	83 c4 0c             	add    esp,0xc
c001e2a3:	6a 00                	push   0x0
c001e2a5:	6a 00                	push   0x0
c001e2a7:	6a 00                	push   0x0
c001e2a9:	6a 00                	push   0x0
c001e2ab:	6a 02                	push   0x2
c001e2ad:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e2b1:	50                   	push   eax
c001e2b2:	53                   	push   ebx
c001e2b3:	e8 0c fb ff ff       	call   c001ddc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2b8:	83 c4 20             	add    esp,0x20
c001e2bb:	85 c0                	test   eax,eax
c001e2bd:	75 44                	jne    c001e303 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e2bf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e2c3:	b9 03 00 00 00       	mov    ecx,0x3
c001e2c8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2ce:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e2d3:	0f c8                	bswap  eax
c001e2d5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e2d9:	89 f0                	mov    eax,esi
c001e2db:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e2df:	50                   	push   eax
c001e2e0:	56                   	push   esi
c001e2e1:	c1 e6 0b             	shl    esi,0xb
c001e2e4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e2e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2f0:	56                   	push   esi
c001e2f1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e2f5:	50                   	push   eax
c001e2f6:	53                   	push   ebx
c001e2f7:	e8 c8 fa ff ff       	call   c001ddc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2fc:	83 c4 20             	add    esp,0x20
c001e2ff:	85 c0                	test   eax,eax
c001e301:	74 14                	je     c001e317 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e307:	83 ec 0c             	sub    esp,0xc
c001e30a:	53                   	push   ebx
c001e30b:	e8 ce fd ff ff       	call   c001e0de <SATAPI::detectMedia()>
c001e310:	83 c4 10             	add    esp,0x10
c001e313:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e317:	83 c4 30             	add    esp,0x30
c001e31a:	5b                   	pop    ebx
c001e31b:	5e                   	pop    esi
c001e31c:	5f                   	pop    edi
c001e31d:	c3                   	ret    

c001e31e <IOAPIC::close(int, int, void*)>:
c001e31e:	b8 00 00 00 00       	mov    eax,0x0
c001e323:	c3                   	ret    

c001e324 <apicGetBase()>:
c001e324:	55                   	push   ebp
c001e325:	89 e5                	mov    ebp,esp
c001e327:	83 ec 18             	sub    esp,0x18
c001e32a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e32f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e335:	83 e0 08             	and    eax,0x8
c001e338:	0f b6 c0             	movzx  eax,al
c001e33b:	85 c0                	test   eax,eax
c001e33d:	75 07                	jne    c001e346 <apicGetBase()+0x22>
c001e33f:	b8 00 00 00 00       	mov    eax,0x0
c001e344:	eb 21                	jmp    c001e367 <apicGetBase()+0x43>
c001e346:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e34b:	83 ec 08             	sub    esp,0x8
c001e34e:	6a 1b                	push   0x1b
c001e350:	50                   	push   eax
c001e351:	e8 6a 8d fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e35c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e35f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e362:	25 00 00 ff ff       	and    eax,0xffff0000
c001e367:	c9                   	leave  
c001e368:	c3                   	ret    
c001e369:	90                   	nop

c001e36a <IOAPIC::IOAPIC()>:
c001e36a:	83 ec 0c             	sub    esp,0xc
c001e36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e371:	83 ec 08             	sub    esp,0x8
c001e374:	68 f8 2d 02 c0       	push   0xc0022df8
c001e379:	50                   	push   eax
c001e37a:	e8 0b e4 fe ff       	call   c000c78a <Device::Device(char const*)>
c001e37f:	83 c4 10             	add    esp,0x10
c001e382:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c001e387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38b:	89 10                	mov    DWORD PTR [eax],edx
c001e38d:	90                   	nop
c001e38e:	83 c4 0c             	add    esp,0xc
c001e391:	c3                   	ret    

c001e392 <apicOpen()>:
c001e392:	55                   	push   ebp
c001e393:	89 e5                	mov    ebp,esp
c001e395:	53                   	push   ebx
c001e396:	83 ec 34             	sub    esp,0x34
c001e399:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c001e39e:	83 f0 01             	xor    eax,0x1
c001e3a1:	0f b6 c0             	movzx  eax,al
c001e3a4:	85 c0                	test   eax,eax
c001e3a6:	0f 84 a3 00 00 00    	je     c001e44f <apicOpen()+0xbd>
c001e3ac:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e3b0:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c001e3b5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e3b9:	0f b6 c0             	movzx  eax,al
c001e3bc:	39 c2                	cmp    edx,eax
c001e3be:	0f 83 84 00 00 00    	jae    c001e448 <apicOpen()+0xb6>
c001e3c4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e3cb:	83 ec 0c             	sub    esp,0xc
c001e3ce:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e3d1:	e8 e0 96 fe ff       	call   c0007ab6 <malloc>
c001e3d6:	83 c4 10             	add    esp,0x10
c001e3d9:	89 c3                	mov    ebx,eax
c001e3db:	83 ec 0c             	sub    esp,0xc
c001e3de:	53                   	push   ebx
c001e3df:	e8 86 ff ff ff       	call   c001e36a <IOAPIC::IOAPIC()>
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e3ea:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e3ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e3f1:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c001e3f8:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c001e3fd:	83 c0 01             	add    eax,0x1
c001e400:	a3 60 ae 02 c0       	mov    ds:0xc002ae60,eax
c001e405:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e40a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e410:	83 ec 08             	sub    esp,0x8
c001e413:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e416:	50                   	push   eax
c001e417:	e8 d6 e1 fe ff       	call   c000c5f2 <Device::addChild(Device*)>
c001e41c:	83 c4 10             	add    esp,0x10
c001e41f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e422:	8b 00                	mov    eax,DWORD PTR [eax]
c001e424:	83 c0 08             	add    eax,0x8
c001e427:	8b 00                	mov    eax,DWORD PTR [eax]
c001e429:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e42d:	6a 00                	push   0x0
c001e42f:	6a 00                	push   0x0
c001e431:	52                   	push   edx
c001e432:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e435:	ff d0                	call   eax
c001e437:	83 c4 10             	add    esp,0x10
c001e43a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e43d:	83 c0 01             	add    eax,0x1
c001e440:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e443:	e9 68 ff ff ff       	jmp    c001e3b0 <apicOpen()+0x1e>
c001e448:	c6 05 a0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aea0,0x1
c001e44f:	e8 d0 fe ff ff       	call   c001e324 <apicGetBase()>
c001e454:	05 f0 00 00 00       	add    eax,0xf0
c001e459:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e45c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e45f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e461:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e464:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e46b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e472:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e475:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e478:	89 10                	mov    DWORD PTR [eax],edx
c001e47a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e481:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c001e486:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e489:	7d 7c                	jge    c001e507 <apicOpen()+0x175>
c001e48b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e48e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e495:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e498:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e49b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4a2:	c1 e8 08             	shr    eax,0x8
c001e4a5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e4a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e4ac:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4b3:	c1 e8 18             	shr    eax,0x18
c001e4b6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e4b9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e4bd:	3d ff 00 00 00       	cmp    eax,0xff
c001e4c2:	75 3a                	jne    c001e4fe <apicOpen()+0x16c>
c001e4c4:	e8 5b fe ff ff       	call   c001e324 <apicGetBase()>
c001e4c9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e4cd:	83 fa 01             	cmp    edx,0x1
c001e4d0:	75 07                	jne    c001e4d9 <apicOpen()+0x147>
c001e4d2:	ba 60 03 00 00       	mov    edx,0x360
c001e4d7:	eb 05                	jmp    c001e4de <apicOpen()+0x14c>
c001e4d9:	ba 50 03 00 00       	mov    edx,0x350
c001e4de:	01 d0                	add    eax,edx
c001e4e0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e4e3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e4eb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e4f2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e4f6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4f9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e4fc:	89 10                	mov    DWORD PTR [eax],edx
c001e4fe:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e502:	e9 7a ff ff ff       	jmp    c001e481 <apicOpen()+0xef>
c001e507:	90                   	nop
c001e508:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e50b:	c9                   	leave  
c001e50c:	c3                   	ret    
c001e50d:	90                   	nop

c001e50e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e50e:	55                   	push   ebp
c001e50f:	89 e5                	mov    ebp,esp
c001e511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e514:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e51a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e51d:	72 1d                	jb     c001e53c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e522:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e52b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e531:	01 d0                	add    eax,edx
c001e533:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e536:	73 04                	jae    c001e53c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e538:	b0 01                	mov    al,0x1
c001e53a:	eb 02                	jmp    c001e53e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e53c:	b0 00                	mov    al,0x0
c001e53e:	5d                   	pop    ebp
c001e53f:	c3                   	ret    

c001e540 <IOAPIC::read(int)>:
c001e540:	55                   	push   ebp
c001e541:	89 e5                	mov    ebp,esp
c001e543:	83 ec 10             	sub    esp,0x10
c001e546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e549:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e54f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e552:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e555:	0f b6 d0             	movzx  edx,al
c001e558:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e55b:	89 10                	mov    DWORD PTR [eax],edx
c001e55d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e560:	83 c0 10             	add    eax,0x10
c001e563:	8b 00                	mov    eax,DWORD PTR [eax]
c001e565:	c9                   	leave  
c001e566:	c3                   	ret    
c001e567:	90                   	nop

c001e568 <IOAPIC::open(int, int, void*)>:
c001e568:	55                   	push   ebp
c001e569:	89 e5                	mov    ebp,esp
c001e56b:	57                   	push   edi
c001e56c:	56                   	push   esi
c001e56d:	53                   	push   ebx
c001e56e:	83 ec 04             	sub    esp,0x4
c001e571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e574:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e577:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e57d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e580:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e586:	8b 14 85 80 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6780]
c001e58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e590:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e599:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e59f:	8b 14 85 00 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6700]
c001e5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e5b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5bb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5c1:	0f b6 f0             	movzx  esi,al
c001e5c4:	89 d0                	mov    eax,edx
c001e5c6:	ba 00 00 00 00       	mov    edx,0x0
c001e5cb:	89 c7                	mov    edi,eax
c001e5cd:	83 e7 ff             	and    edi,0xffffffff
c001e5d0:	89 f9                	mov    ecx,edi
c001e5d2:	0f b6 da             	movzx  ebx,dl
c001e5d5:	89 c8                	mov    eax,ecx
c001e5d7:	89 da                	mov    edx,ebx
c001e5d9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5dc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e5df:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e5e3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e5e7:	83 e0 00             	and    eax,0x0
c001e5ea:	09 d0                	or     eax,edx
c001e5ec:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5f9:	8d 50 01             	lea    edx,[eax+0x1]
c001e5fc:	88 d1                	mov    cl,dl
c001e5fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e601:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e607:	0f b6 d0             	movzx  edx,al
c001e60a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60d:	83 c2 08             	add    edx,0x8
c001e610:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e614:	0f b6 c9             	movzx  ecx,cl
c001e617:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e61d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e621:	6a 01                	push   0x1
c001e623:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e626:	e8 15 ff ff ff       	call   c001e540 <IOAPIC::read(int)>
c001e62b:	83 c4 08             	add    esp,0x8
c001e62e:	c1 f8 10             	sar    eax,0x10
c001e631:	0f b6 c0             	movzx  eax,al
c001e634:	8d 50 01             	lea    edx,[eax+0x1]
c001e637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e640:	b8 00 00 00 00       	mov    eax,0x0
c001e645:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e648:	5b                   	pop    ebx
c001e649:	5e                   	pop    esi
c001e64a:	5f                   	pop    edi
c001e64b:	5d                   	pop    ebp
c001e64c:	c3                   	ret    
c001e64d:	90                   	nop

c001e64e <IOAPIC::write(int, int)>:
c001e64e:	55                   	push   ebp
c001e64f:	89 e5                	mov    ebp,esp
c001e651:	83 ec 10             	sub    esp,0x10
c001e654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e657:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e65d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e660:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e663:	0f b6 d0             	movzx  edx,al
c001e666:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e669:	89 10                	mov    DWORD PTR [eax],edx
c001e66b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e66e:	8d 50 10             	lea    edx,[eax+0x10]
c001e671:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e674:	89 02                	mov    DWORD PTR [edx],eax
c001e676:	90                   	nop
c001e677:	c9                   	leave  
c001e678:	c3                   	ret    
c001e679:	90                   	nop

c001e67a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e67a:	55                   	push   ebp
c001e67b:	89 e5                	mov    ebp,esp
c001e67d:	53                   	push   ebx
c001e67e:	83 ec 2c             	sub    esp,0x2c
c001e681:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e684:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e687:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e68a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e68d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e690:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e693:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e696:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e699:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e69c:	88 d8                	mov    al,bl
c001e69e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e6a1:	88 c8                	mov    al,cl
c001e6a3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e6a6:	88 d0                	mov    al,dl
c001e6a8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e6ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6af:	83 c0 08             	add    eax,0x8
c001e6b2:	01 c0                	add    eax,eax
c001e6b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6b7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6bb:	83 c0 08             	add    eax,0x8
c001e6be:	01 c0                	add    eax,eax
c001e6c0:	83 c0 01             	add    eax,0x1
c001e6c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e6c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6c9:	50                   	push   eax
c001e6ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6cd:	e8 6e fe ff ff       	call   c001e540 <IOAPIC::read(int)>
c001e6d2:	83 c4 08             	add    esp,0x8
c001e6d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6d8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e6df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6e2:	c1 e0 18             	shl    eax,0x18
c001e6e5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e6e8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6ee:	52                   	push   edx
c001e6ef:	50                   	push   eax
c001e6f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6f3:	e8 56 ff ff ff       	call   c001e64e <IOAPIC::write(int, int)>
c001e6f8:	83 c4 0c             	add    esp,0xc
c001e6fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6fe:	50                   	push   eax
c001e6ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e702:	e8 39 fe ff ff       	call   c001e540 <IOAPIC::read(int)>
c001e707:	83 c4 08             	add    esp,0x8
c001e70a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e70d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e714:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e71b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e722:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e726:	85 c0                	test   eax,eax
c001e728:	74 09                	je     c001e733 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e72a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e731:	eb 07                	jmp    c001e73a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e733:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e73a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e73e:	85 c0                	test   eax,eax
c001e740:	74 09                	je     c001e74b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e742:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e749:	eb 07                	jmp    c001e752 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e74b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e752:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e759:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e75d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e760:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e763:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e766:	52                   	push   edx
c001e767:	50                   	push   eax
c001e768:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76b:	e8 de fe ff ff       	call   c001e64e <IOAPIC::write(int, int)>
c001e770:	83 c4 0c             	add    esp,0xc
c001e773:	90                   	nop
c001e774:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e777:	c9                   	leave  
c001e778:	c3                   	ret    
c001e779:	66 90                	xchg   ax,ax
c001e77b:	90                   	nop

c001e77c <APICTimer::close(int, int, void*)>:
c001e77c:	b8 00 00 00 00       	mov    eax,0x0
c001e781:	c3                   	ret    
c001e782:	66 90                	xchg   ax,ax

c001e784 <apicTimerHandler(regs*, void*)>:
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e78b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e78d:	b8 10 27 00 00       	mov    eax,0x2710
c001e792:	ba 00 00 00 00       	mov    edx,0x0
c001e797:	f7 f1                	div    ecx
c001e799:	83 ec 0c             	sub    esp,0xc
c001e79c:	50                   	push   eax
c001e79d:	e8 b2 f8 fe ff       	call   c000e054 <timerHandler(unsigned int)>
c001e7a2:	83 c4 10             	add    esp,0x10
c001e7a5:	90                   	nop
c001e7a6:	83 c4 0c             	add    esp,0xc
c001e7a9:	c3                   	ret    
c001e7aa:	66 90                	xchg   ax,ax

c001e7ac <APICTimer::open(int, int, void*)>:
c001e7ac:	83 ec 0c             	sub    esp,0xc
c001e7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b5:	83 c0 24             	add    eax,0x24
c001e7b8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ba:	83 ec 08             	sub    esp,0x8
c001e7bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7c5:	ff d0                	call   eax
c001e7c7:	83 c4 10             	add    esp,0x10
c001e7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7d2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7e0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e7e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7ea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	51                   	push   ecx
c001e7f4:	6a 01                	push   0x1
c001e7f6:	68 84 e7 01 c0       	push   0xc001e784
c001e7fb:	52                   	push   edx
c001e7fc:	50                   	push   eax
c001e7fd:	e8 9c dd fe ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e802:	83 c4 20             	add    esp,0x20
c001e805:	89 c2                	mov    edx,eax
c001e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e811:	b8 00 00 00 00       	mov    eax,0x0
c001e816:	83 c4 0c             	add    esp,0xc
c001e819:	c3                   	ret    
c001e81a:	66 90                	xchg   ax,ax

c001e81c <APICTimer::write(int)>:
c001e81c:	83 ec 0c             	sub    esp,0xc
c001e81f:	83 ec 0c             	sub    esp,0xc
c001e822:	68 2c 2e 02 c0       	push   0xc0022e2c
c001e827:	e8 d1 29 ff ff       	call   c00111fd <KePanic(char const*)>
c001e82c:	83 c4 10             	add    esp,0x10
c001e82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e833:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e837:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e83d:	90                   	nop
c001e83e:	83 c4 0c             	add    esp,0xc
c001e841:	c3                   	ret    
c001e842:	66 90                	xchg   ax,ax

c001e844 <APICTimer::APICTimer()>:
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84b:	83 ec 08             	sub    esp,0x8
c001e84e:	68 3c 2e 02 c0       	push   0xc0022e3c
c001e853:	50                   	push   eax
c001e854:	e8 2f f7 fe ff       	call   c000df88 <Timer::Timer(char const*)>
c001e859:	83 c4 10             	add    esp,0x10
c001e85c:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e865:	89 10                	mov    DWORD PTR [eax],edx
c001e867:	90                   	nop
c001e868:	83 c4 0c             	add    esp,0xc
c001e86b:	c3                   	ret    

c001e86c <PIT::write(int)>:
c001e86c:	83 ec 10             	sub    esp,0x10
c001e86f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e873:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e877:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e87d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e881:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c001e886:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e88b:	89 c2                	mov    edx,eax
c001e88d:	c1 fa 1f             	sar    edx,0x1f
c001e890:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e898:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e89f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e8a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e8a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e8ad:	ee                   	out    dx,al
c001e8ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8b2:	0f b6 c0             	movzx  eax,al
c001e8b5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8bc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8c0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8c4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8c9:	ee                   	out    dx,al
c001e8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8ce:	c1 f8 08             	sar    eax,0x8
c001e8d1:	0f b6 c0             	movzx  eax,al
c001e8d4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8e8:	ee                   	out    dx,al
c001e8e9:	90                   	nop
c001e8ea:	83 c4 10             	add    esp,0x10
c001e8ed:	c3                   	ret    
c001e8ee:	66 90                	xchg   ax,ax

c001e8f0 <pitHandler(regs*, void*)>:
c001e8f0:	83 ec 0c             	sub    esp,0xc
c001e8f3:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c001e8f9:	b8 10 27 00 00       	mov    eax,0x2710
c001e8fe:	89 c2                	mov    edx,eax
c001e900:	c1 fa 1f             	sar    edx,0x1f
c001e903:	f7 f9                	idiv   ecx
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	50                   	push   eax
c001e909:	e8 46 f7 fe ff       	call   c000e054 <timerHandler(unsigned int)>
c001e90e:	83 c4 10             	add    esp,0x10
c001e911:	90                   	nop
c001e912:	83 c4 0c             	add    esp,0xc
c001e915:	c3                   	ret    
c001e916:	66 90                	xchg   ax,ax

c001e918 <PIT::open(int, int, void*)>:
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e921:	83 c0 24             	add    eax,0x24
c001e924:	8b 00                	mov    eax,DWORD PTR [eax]
c001e926:	83 ec 08             	sub    esp,0x8
c001e929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e931:	ff d0                	call   eax
c001e933:	83 c4 10             	add    esp,0x10
c001e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	6a 00                	push   0x0
c001e93f:	6a 01                	push   0x1
c001e941:	68 f0 e8 01 c0       	push   0xc001e8f0
c001e946:	6a 00                	push   0x0
c001e948:	50                   	push   eax
c001e949:	e8 50 dc fe ff       	call   c000c59e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e94e:	83 c4 20             	add    esp,0x20
c001e951:	89 c2                	mov    edx,eax
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e95d:	b8 00 00 00 00       	mov    eax,0x0
c001e962:	83 c4 0c             	add    esp,0xc
c001e965:	c3                   	ret    
c001e966:	66 90                	xchg   ax,ax

c001e968 <PIT::close(int, int, void*)>:
c001e968:	83 ec 0c             	sub    esp,0xc
c001e96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97d:	6a 01                	push   0x1
c001e97f:	68 f0 e8 01 c0       	push   0xc001e8f0
c001e984:	6a 00                	push   0x0
c001e986:	50                   	push   eax
c001e987:	e8 48 dc fe ff       	call   c000c5d4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e98c:	83 c4 10             	add    esp,0x10
c001e98f:	b8 00 00 00 00       	mov    eax,0x0
c001e994:	83 c4 0c             	add    esp,0xc
c001e997:	c3                   	ret    

c001e998 <PIT::PIT()>:
c001e998:	83 ec 0c             	sub    esp,0xc
c001e99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99f:	83 ec 08             	sub    esp,0x8
c001e9a2:	68 78 2e 02 c0       	push   0xc0022e78
c001e9a7:	50                   	push   eax
c001e9a8:	e8 db f5 fe ff       	call   c000df88 <Timer::Timer(char const*)>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	ba a0 2e 02 c0       	mov    edx,0xc0022ea0
c001e9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b9:	89 10                	mov    DWORD PTR [eax],edx
c001e9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9c5:	0f b6 d0             	movzx  edx,al
c001e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9dd:	0f b6 d0             	movzx  edx,al
c001e9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9f3:	8d 50 01             	lea    edx,[eax+0x1]
c001e9f6:	88 d1                	mov    cl,dl
c001e9f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9fc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea02:	0f b6 d0             	movzx  edx,al
c001ea05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea09:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea0d:	83 e1 3f             	and    ecx,0x3f
c001ea10:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea14:	90                   	nop
c001ea15:	83 c4 0c             	add    esp,0xc
c001ea18:	c3                   	ret    
c001ea19:	66 90                	xchg   ax,ax
c001ea1b:	66 90                	xchg   ax,ax
c001ea1d:	66 90                	xchg   ax,ax
c001ea1f:	90                   	nop

c001ea20 <avxDetect>:
c001ea20:	b8 01 00 00 00       	mov    eax,0x1
c001ea25:	0f a2                	cpuid  
c001ea27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea2d:	74 15                	je     c001ea44 <avxDetect.noAVX>
c001ea2f:	b8 01 00 00 00       	mov    eax,0x1
c001ea34:	0f a2                	cpuid  
c001ea36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea3c:	74 06                	je     c001ea44 <avxDetect.noAVX>
c001ea3e:	b8 01 00 00 00       	mov    eax,0x1
c001ea43:	c3                   	ret    

c001ea44 <avxDetect.noAVX>:
c001ea44:	b8 00 00 00 00       	mov    eax,0x0
c001ea49:	c3                   	ret    

c001ea4a <avxSave>:
c001ea4a:	53                   	push   ebx
c001ea4b:	52                   	push   edx
c001ea4c:	31 c0                	xor    eax,eax
c001ea4e:	48                   	dec    eax
c001ea4f:	89 c2                	mov    edx,eax
c001ea51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea55:	0f ae 23             	xsave  [ebx]
c001ea58:	5a                   	pop    edx
c001ea59:	5b                   	pop    ebx
c001ea5a:	c3                   	ret    

c001ea5b <avxLoad>:
c001ea5b:	53                   	push   ebx
c001ea5c:	52                   	push   edx
c001ea5d:	31 c0                	xor    eax,eax
c001ea5f:	48                   	dec    eax
c001ea60:	89 c2                	mov    edx,eax
c001ea62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea66:	0f ae 2b             	xrstor [ebx]
c001ea69:	5a                   	pop    edx
c001ea6a:	5b                   	pop    ebx
c001ea6b:	c3                   	ret    

c001ea6c <avxInit>:
c001ea6c:	e8 67 03 00 00       	call   c001edd8 <sseInit>
c001ea71:	50                   	push   eax
c001ea72:	51                   	push   ecx
c001ea73:	0f 20 e0             	mov    eax,cr4
c001ea76:	0d 00 00 04 00       	or     eax,0x40000
c001ea7b:	0f 22 e0             	mov    cr4,eax
c001ea7e:	31 c9                	xor    ecx,ecx
c001ea80:	0f 01 d0             	xgetbv 
c001ea83:	0d 07 00 00 00       	or     eax,0x7
c001ea88:	0f 01 d1             	xsetbv 
c001ea8b:	59                   	pop    ecx
c001ea8c:	58                   	pop    eax
c001ea8d:	c3                   	ret    

c001ea8e <avxClose>:
c001ea8e:	c3                   	ret    

c001ea8f <wouldSheSayYes>:
c001ea8f:	c3                   	ret    
c001ea90:	49                   	dec    ecx
c001ea91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ea95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ea99:	75 20                	jne    c001eabb <isr0+0xb>
c001ea9b:	4e                   	dec    esi
c001ea9c:	79 61                	jns    c001eaff <isr7+0x3>
c001ea9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eaa3:	66 90                	xchg   ax,ax
c001eaa5:	66 90                	xchg   ax,ax
c001eaa7:	66 90                	xchg   ax,ax
c001eaa9:	66 90                	xchg   ax,ax
c001eaab:	66 90                	xchg   ax,ax
c001eaad:	66 90                	xchg   ax,ax
c001eaaf:	90                   	nop

c001eab0 <isr0>:
c001eab0:	fa                   	cli    
c001eab1:	68 00 00 00 00       	push   0x0
c001eab6:	68 00 00 00 00       	push   0x0
c001eabb:	e9 56 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eac0 <isr1>:
c001eac0:	fa                   	cli    
c001eac1:	6a 00                	push   0x0
c001eac3:	6a 01                	push   0x1
c001eac5:	e9 4c 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eaca <isr2>:
c001eaca:	fa                   	cli    
c001eacb:	6a 00                	push   0x0
c001eacd:	6a 02                	push   0x2
c001eacf:	e9 42 01 00 00       	jmp    c001ec16 <int_common_stub>

c001ead4 <isr3>:
c001ead4:	fa                   	cli    
c001ead5:	6a 00                	push   0x0
c001ead7:	6a 03                	push   0x3
c001ead9:	e9 38 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eade <isr4>:
c001eade:	fa                   	cli    
c001eadf:	6a 00                	push   0x0
c001eae1:	6a 04                	push   0x4
c001eae3:	e9 2e 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eae8 <isr5>:
c001eae8:	fa                   	cli    
c001eae9:	6a 00                	push   0x0
c001eaeb:	6a 05                	push   0x5
c001eaed:	e9 24 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eaf2 <isr6>:
c001eaf2:	fa                   	cli    
c001eaf3:	6a 00                	push   0x0
c001eaf5:	6a 06                	push   0x6
c001eaf7:	e9 1a 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eafc <isr7>:
c001eafc:	fa                   	cli    
c001eafd:	6a 00                	push   0x0
c001eaff:	6a 07                	push   0x7
c001eb01:	e9 10 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eb06 <isr8>:
c001eb06:	fa                   	cli    
c001eb07:	6a 08                	push   0x8
c001eb09:	e9 08 01 00 00       	jmp    c001ec16 <int_common_stub>

c001eb0e <isr9>:
c001eb0e:	fa                   	cli    
c001eb0f:	6a 00                	push   0x0
c001eb11:	6a 09                	push   0x9
c001eb13:	e9 fe 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb18 <isr10>:
c001eb18:	fa                   	cli    
c001eb19:	6a 0a                	push   0xa
c001eb1b:	e9 f6 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb20 <isr11>:
c001eb20:	fa                   	cli    
c001eb21:	6a 0b                	push   0xb
c001eb23:	e9 ee 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb28 <isr12>:
c001eb28:	fa                   	cli    
c001eb29:	6a 0c                	push   0xc
c001eb2b:	e9 e6 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb30 <isr13>:
c001eb30:	fa                   	cli    
c001eb31:	6a 0d                	push   0xd
c001eb33:	53                   	push   ebx
c001eb34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb38:	81 fb 06 ed 01 c0    	cmp    ebx,0xc001ed06
c001eb3e:	5b                   	pop    ebx
c001eb3f:	0f 84 c3 01 00 00    	je     c001ed08 <finishSignal2>
c001eb45:	e9 cc 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb4a <isr14>:
c001eb4a:	fa                   	cli    
c001eb4b:	6a 0e                	push   0xe
c001eb4d:	e9 c4 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb52 <isr15>:
c001eb52:	fa                   	cli    
c001eb53:	6a 00                	push   0x0
c001eb55:	6a 0f                	push   0xf
c001eb57:	e9 ba 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb5c <isr16>:
c001eb5c:	fa                   	cli    
c001eb5d:	6a 00                	push   0x0
c001eb5f:	6a 10                	push   0x10
c001eb61:	e9 b0 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb66 <isr17>:
c001eb66:	fa                   	cli    
c001eb67:	6a 00                	push   0x0
c001eb69:	6a 11                	push   0x11
c001eb6b:	e9 a6 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb70 <isr18>:
c001eb70:	fa                   	cli    
c001eb71:	6a 00                	push   0x0
c001eb73:	6a 12                	push   0x12
c001eb75:	e9 9c 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb7a <irq3>:
c001eb7a:	fa                   	cli    
c001eb7b:	6a 00                	push   0x0
c001eb7d:	6a 23                	push   0x23
c001eb7f:	e9 92 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb84 <irq4>:
c001eb84:	fa                   	cli    
c001eb85:	6a 00                	push   0x0
c001eb87:	6a 24                	push   0x24
c001eb89:	e9 88 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb8e <irq5>:
c001eb8e:	fa                   	cli    
c001eb8f:	6a 00                	push   0x0
c001eb91:	6a 25                	push   0x25
c001eb93:	e9 7e 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eb98 <irq6>:
c001eb98:	fa                   	cli    
c001eb99:	6a 00                	push   0x0
c001eb9b:	6a 26                	push   0x26
c001eb9d:	e9 74 00 00 00       	jmp    c001ec16 <int_common_stub>

c001eba2 <irq7>:
c001eba2:	fa                   	cli    
c001eba3:	6a 00                	push   0x0
c001eba5:	6a 27                	push   0x27
c001eba7:	e9 6a 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebac <irq8>:
c001ebac:	fa                   	cli    
c001ebad:	6a 00                	push   0x0
c001ebaf:	6a 28                	push   0x28
c001ebb1:	e9 60 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebb6 <irq9>:
c001ebb6:	fa                   	cli    
c001ebb7:	6a 00                	push   0x0
c001ebb9:	6a 29                	push   0x29
c001ebbb:	e9 56 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebc0 <irq10>:
c001ebc0:	fa                   	cli    
c001ebc1:	6a 00                	push   0x0
c001ebc3:	6a 2a                	push   0x2a
c001ebc5:	e9 4c 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebca <irq11>:
c001ebca:	fa                   	cli    
c001ebcb:	6a 00                	push   0x0
c001ebcd:	6a 2b                	push   0x2b
c001ebcf:	e9 42 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebd4 <irq12>:
c001ebd4:	fa                   	cli    
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 2c                	push   0x2c
c001ebd9:	e9 38 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebde <irq13>:
c001ebde:	fa                   	cli    
c001ebdf:	6a 00                	push   0x0
c001ebe1:	6a 2d                	push   0x2d
c001ebe3:	e9 2e 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebe8 <irq14>:
c001ebe8:	fa                   	cli    
c001ebe9:	6a 00                	push   0x0
c001ebeb:	6a 2e                	push   0x2e
c001ebed:	e9 24 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebf2 <irq15>:
c001ebf2:	fa                   	cli    
c001ebf3:	6a 00                	push   0x0
c001ebf5:	6a 2f                	push   0x2f
c001ebf7:	e9 1a 00 00 00       	jmp    c001ec16 <int_common_stub>

c001ebfc <irq1>:
c001ebfc:	fa                   	cli    
c001ebfd:	6a 00                	push   0x0
c001ebff:	6a 21                	push   0x21
c001ec01:	eb 13                	jmp    c001ec16 <int_common_stub>

c001ec03 <irq2>:
c001ec03:	fa                   	cli    
c001ec04:	6a 00                	push   0x0
c001ec06:	6a 22                	push   0x22
c001ec08:	eb 0c                	jmp    c001ec16 <int_common_stub>

c001ec0a <isr96>:
c001ec0a:	6a 00                	push   0x0
c001ec0c:	6a 60                	push   0x60
c001ec0e:	fb                   	sti    
c001ec0f:	eb 37                	jmp    c001ec48 <syscall_common_stub>

c001ec11 <irq0>:
c001ec11:	fa                   	cli    
c001ec12:	6a 00                	push   0x0
c001ec14:	6a 20                	push   0x20

c001ec16 <int_common_stub>:
c001ec16:	60                   	pusha  
c001ec17:	1e                   	push   ds
c001ec18:	06                   	push   es
c001ec19:	0f a0                	push   fs
c001ec1b:	0f a8                	push   gs
c001ec1d:	66 b8 10 00          	mov    ax,0x10
c001ec21:	66 8e d8             	mov    ds,ax
c001ec24:	66 8e c0             	mov    es,ax
c001ec27:	66 8e e0             	mov    fs,ax
c001ec2a:	66 8e e8             	mov    gs,ax
c001ec2d:	54                   	push   esp
c001ec2e:	fc                   	cld    
c001ec2f:	e8 68 de fe ff       	call   c000ca9c <int_handler>
c001ec34:	81 c4 04 00 00 00    	add    esp,0x4
c001ec3a:	0f a9                	pop    gs
c001ec3c:	0f a1                	pop    fs
c001ec3e:	07                   	pop    es
c001ec3f:	1f                   	pop    ds
c001ec40:	61                   	popa   
c001ec41:	81 c4 08 00 00 00    	add    esp,0x8
c001ec47:	cf                   	iret   

c001ec48 <syscall_common_stub>:
c001ec48:	60                   	pusha  
c001ec49:	1e                   	push   ds
c001ec4a:	06                   	push   es
c001ec4b:	0f a0                	push   fs
c001ec4d:	0f a8                	push   gs
c001ec4f:	66 b8 10 00          	mov    ax,0x10
c001ec53:	66 8e d8             	mov    ds,ax
c001ec56:	66 8e c0             	mov    es,ax
c001ec59:	66 8e e0             	mov    fs,ax
c001ec5c:	66 8e e8             	mov    gs,ax
c001ec5f:	54                   	push   esp
c001ec60:	fc                   	cld    
c001ec61:	e8 36 de fe ff       	call   c000ca9c <int_handler>
c001ec66:	81 c4 04 00 00 00    	add    esp,0x4
c001ec6c:	0f a9                	pop    gs
c001ec6e:	0f a1                	pop    fs
c001ec70:	07                   	pop    es
c001ec71:	1f                   	pop    ds
c001ec72:	e8 9b 2b ff ff       	call   c0011812 <KiCheckSignalZ>
c001ec77:	3d 00 00 00 00       	cmp    eax,0x0
c001ec7c:	0f 84 c0 00 00 00    	je     c001ed42 <skipSignals>
c001ec82:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ec87:	61                   	popa   
c001ec88:	53                   	push   ebx
c001ec89:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ec8f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ec92:	5b                   	pop    ebx
c001ec93:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ec98:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ec9b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ec9e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001eca1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001eca4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001eca7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ecaa:	81 c4 08 00 00 00    	add    esp,0x8
c001ecb0:	5e                   	pop    esi
c001ecb1:	5b                   	pop    ebx
c001ecb2:	59                   	pop    ecx
c001ecb3:	5a                   	pop    edx
c001ecb4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ecb7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ecba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ecbd:	52                   	push   edx
c001ecbe:	51                   	push   ecx
c001ecbf:	53                   	push   ebx
c001ecc0:	56                   	push   esi
c001ecc1:	81 ec 08 00 00 00    	sub    esp,0x8
c001ecc7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ecca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001eccd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ecd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ecd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ecd6:	60                   	pusha  
c001ecd7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ecdd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ece0:	89 e3                	mov    ebx,esp
c001ece2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ece5:	52                   	push   edx
c001ece6:	68 06 ed 01 c0       	push   0xc001ed06
c001eceb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ecee:	89 dc                	mov    esp,ebx
c001ecf0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ecf3:	68 23 00 00 00       	push   0x23
c001ecf8:	51                   	push   ecx
c001ecf9:	68 02 02 00 00       	push   0x202
c001ecfe:	68 1b 00 00 00       	push   0x1b
c001ed03:	ff 36                	push   DWORD PTR [esi]
c001ed05:	cf                   	iret   

c001ed06 <finishSignal>:
c001ed06:	cd 0f                	int    0xf

c001ed08 <finishSignal2>:
c001ed08:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed0e:	e8 7c 2b ff ff       	call   c001188f <KiFinishSignalZ>
c001ed13:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed19:	68 23 00 00 00       	push   0x23
c001ed1e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed21:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed24:	68 1b 00 00 00       	push   0x1b
c001ed29:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed2f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed32:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed35:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed38:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed3b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed3e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed41:	cf                   	iret   

c001ed42 <skipSignals>:
c001ed42:	61                   	popa   
c001ed43:	81 c4 08 00 00 00    	add    esp,0x8
c001ed49:	cf                   	iret   
c001ed4a:	90                   	nop
c001ed4b:	90                   	nop

c001ed4c <irq16>:
c001ed4c:	fa                   	cli    
c001ed4d:	6a 00                	push   0x0
c001ed4f:	6a 30                	push   0x30
c001ed51:	e9 c0 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed56 <irq17>:
c001ed56:	fa                   	cli    
c001ed57:	6a 00                	push   0x0
c001ed59:	6a 31                	push   0x31
c001ed5b:	e9 b6 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed60 <irq18>:
c001ed60:	fa                   	cli    
c001ed61:	6a 00                	push   0x0
c001ed63:	6a 32                	push   0x32
c001ed65:	e9 ac fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed6a <irq19>:
c001ed6a:	fa                   	cli    
c001ed6b:	6a 00                	push   0x0
c001ed6d:	6a 33                	push   0x33
c001ed6f:	e9 a2 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed74 <irq20>:
c001ed74:	fa                   	cli    
c001ed75:	6a 00                	push   0x0
c001ed77:	6a 34                	push   0x34
c001ed79:	e9 98 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed7e <irq21>:
c001ed7e:	fa                   	cli    
c001ed7f:	6a 00                	push   0x0
c001ed81:	6a 35                	push   0x35
c001ed83:	e9 8e fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed88 <irq22>:
c001ed88:	fa                   	cli    
c001ed89:	6a 00                	push   0x0
c001ed8b:	6a 36                	push   0x36
c001ed8d:	e9 84 fe ff ff       	jmp    c001ec16 <int_common_stub>

c001ed92 <irq23>:
c001ed92:	fa                   	cli    
c001ed93:	6a 00                	push   0x0
c001ed95:	6a 37                	push   0x37
c001ed97:	e9 7a fe ff ff       	jmp    c001ec16 <int_common_stub>
c001ed9c:	66 90                	xchg   ax,ax
c001ed9e:	66 90                	xchg   ax,ax

c001eda0 <i386GetRDRAND>:
c001eda0:	b9 64 00 00 00       	mov    ecx,0x64

c001eda5 <retry>:
c001eda5:	0f c7 f0             	rdrand eax
c001eda8:	72 05                	jb     c001edaf <retry.done>
c001edaa:	e2 f9                	loop   c001eda5 <retry>

c001edac <retry.fail>:
c001edac:	31 c0                	xor    eax,eax
c001edae:	c3                   	ret    

c001edaf <retry.done>:
c001edaf:	c3                   	ret    

c001edb0 <absolutelyNoChanceInHell>:
c001edb0:	b8 01 00 00 00       	mov    eax,0x1
c001edb5:	0f a2                	cpuid  
c001edb7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001edbd:	74 06                	je     c001edc5 <sseDetect.noSSE>
c001edbf:	b8 01 00 00 00       	mov    eax,0x1
c001edc4:	c3                   	ret    

c001edc5 <sseDetect.noSSE>:
c001edc5:	31 c0                	xor    eax,eax
c001edc7:	c3                   	ret    

c001edc8 <sseSave>:
c001edc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edcc:	0f ae 00             	fxsave [eax]
c001edcf:	c3                   	ret    

c001edd0 <sseLoad>:
c001edd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd4:	0f ae 08             	fxrstor [eax]
c001edd7:	c3                   	ret    

c001edd8 <sseInit>:
c001edd8:	e8 42 00 00 00       	call   c001ee1f <x87Init>
c001eddd:	0f 20 e0             	mov    eax,cr4
c001ede0:	66 0d 00 06          	or     ax,0x600
c001ede4:	0f 22 e0             	mov    cr4,eax
c001ede7:	c3                   	ret    

c001ede8 <sseClose>:
c001ede8:	c3                   	ret    
c001ede9:	66 90                	xchg   ax,ax
c001edeb:	66 90                	xchg   ax,ax
c001eded:	66 90                	xchg   ax,ax
c001edef:	90                   	nop

c001edf0 <value_37F>:
c001edf0:	7f 03                	jg     c001edf5 <value_37A+0x1>

c001edf2 <value_37E>:
c001edf2:	7e 03                	jle    c001edf7 <x87Detect+0x1>

c001edf4 <value_37A>:
c001edf4:	7a 03                	jp     c001edf9 <x87Detect+0x3>

c001edf6 <x87Detect>:
c001edf6:	b8 01 00 00 00       	mov    eax,0x1
c001edfb:	0f a2                	cpuid  
c001edfd:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee03:	74 06                	je     c001ee0b <x87Detect.nox87>
c001ee05:	b8 01 00 00 00       	mov    eax,0x1
c001ee0a:	c3                   	ret    

c001ee0b <x87Detect.nox87>:
c001ee0b:	b8 00 00 00 00       	mov    eax,0x0
c001ee10:	c3                   	ret    

c001ee11 <x87Save>:
c001ee11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee15:	dd 30                	fnsave [eax]
c001ee17:	c3                   	ret    

c001ee18 <x87Load>:
c001ee18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee1c:	dd 20                	frstor [eax]
c001ee1e:	c3                   	ret    

c001ee1f <x87Init>:
c001ee1f:	0f 20 c0             	mov    eax,cr0
c001ee22:	66 25 fb ff          	and    ax,0xfffb
c001ee26:	66 0d 22 00          	or     ax,0x22
c001ee2a:	0f 22 c0             	mov    cr0,eax
c001ee2d:	db e3                	fninit 
c001ee2f:	0f 06                	clts   
c001ee31:	d9 2d f4 ed 01 c0    	fldcw  WORD PTR ds:0xc001edf4
c001ee37:	c3                   	ret    

c001ee38 <x87Close>:
c001ee38:	c3                   	ret    
c001ee39:	66 90                	xchg   ax,ax
c001ee3b:	90                   	nop

c001ee3c <__do_global_ctors_aux>:
c001ee3c:	a1 f0 fd 01 c0       	mov    eax,ds:0xc001fdf0
c001ee41:	83 f8 ff             	cmp    eax,0xffffffff
c001ee44:	74 1a                	je     c001ee60 <__do_global_ctors_aux+0x24>
c001ee46:	55                   	push   ebp
c001ee47:	89 e5                	mov    ebp,esp
c001ee49:	53                   	push   ebx
c001ee4a:	52                   	push   edx
c001ee4b:	bb f0 fd 01 c0       	mov    ebx,0xc001fdf0
c001ee50:	ff d0                	call   eax
c001ee52:	83 eb 04             	sub    ebx,0x4
c001ee55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee57:	83 f8 ff             	cmp    eax,0xffffffff
c001ee5a:	75 f4                	jne    c001ee50 <__do_global_ctors_aux+0x14>
c001ee5c:	58                   	pop    eax
c001ee5d:	5b                   	pop    ebx
c001ee5e:	5d                   	pop    ebp
c001ee5f:	c3                   	ret    
c001ee60:	c3                   	ret    
c001ee61:	66 90                	xchg   ax,ax
c001ee63:	90                   	nop

c001ee64 <__divdi3>:
c001ee64:	55                   	push   ebp
c001ee65:	57                   	push   edi
c001ee66:	56                   	push   esi
c001ee67:	53                   	push   ebx
c001ee68:	83 ec 1c             	sub    esp,0x1c
c001ee6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee76:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ee82:	85 db                	test   ebx,ebx
c001ee84:	0f 88 8e 00 00 00    	js     c001ef18 <__divdi3+0xb4>
c001ee8a:	89 dd                	mov    ebp,ebx
c001ee8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ee94:	89 d3                	mov    ebx,edx
c001ee96:	85 d2                	test   edx,edx
c001ee98:	79 0d                	jns    c001eea7 <__divdi3+0x43>
c001ee9a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ee9e:	f7 d8                	neg    eax
c001eea0:	83 d2 00             	adc    edx,0x0
c001eea3:	f7 da                	neg    edx
c001eea5:	89 d3                	mov    ebx,edx
c001eea7:	89 c7                	mov    edi,eax
c001eea9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eeac:	85 db                	test   ebx,ebx
c001eeae:	75 48                	jne    c001eef8 <__divdi3+0x94>
c001eeb0:	39 ef                	cmp    edi,ebp
c001eeb2:	76 24                	jbe    c001eed8 <__divdi3+0x74>
c001eeb4:	89 ea                	mov    edx,ebp
c001eeb6:	f7 f7                	div    edi
c001eeb8:	89 c1                	mov    ecx,eax
c001eeba:	31 f6                	xor    esi,esi
c001eebc:	89 c8                	mov    eax,ecx
c001eebe:	89 f2                	mov    edx,esi
c001eec0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eec4:	85 c9                	test   ecx,ecx
c001eec6:	74 07                	je     c001eecf <__divdi3+0x6b>
c001eec8:	f7 d8                	neg    eax
c001eeca:	83 d2 00             	adc    edx,0x0
c001eecd:	f7 da                	neg    edx
c001eecf:	83 c4 1c             	add    esp,0x1c
c001eed2:	5b                   	pop    ebx
c001eed3:	5e                   	pop    esi
c001eed4:	5f                   	pop    edi
c001eed5:	5d                   	pop    ebp
c001eed6:	c3                   	ret    
c001eed7:	90                   	nop
c001eed8:	85 ff                	test   edi,edi
c001eeda:	75 0b                	jne    c001eee7 <__divdi3+0x83>
c001eedc:	b8 01 00 00 00       	mov    eax,0x1
c001eee1:	31 d2                	xor    edx,edx
c001eee3:	f7 f3                	div    ebx
c001eee5:	89 c7                	mov    edi,eax
c001eee7:	31 d2                	xor    edx,edx
c001eee9:	89 e8                	mov    eax,ebp
c001eeeb:	f7 f7                	div    edi
c001eeed:	89 c6                	mov    esi,eax
c001eeef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eef2:	f7 f7                	div    edi
c001eef4:	89 c1                	mov    ecx,eax
c001eef6:	eb c4                	jmp    c001eebc <__divdi3+0x58>
c001eef8:	39 eb                	cmp    ebx,ebp
c001eefa:	77 3c                	ja     c001ef38 <__divdi3+0xd4>
c001eefc:	0f bd f3             	bsr    esi,ebx
c001eeff:	83 f6 1f             	xor    esi,0x1f
c001ef02:	75 40                	jne    c001ef44 <__divdi3+0xe0>
c001ef04:	39 eb                	cmp    ebx,ebp
c001ef06:	72 09                	jb     c001ef11 <__divdi3+0xad>
c001ef08:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef0b:	0f 87 97 00 00 00    	ja     c001efa8 <__divdi3+0x144>
c001ef11:	b9 01 00 00 00       	mov    ecx,0x1
c001ef16:	eb a4                	jmp    c001eebc <__divdi3+0x58>
c001ef18:	f7 d9                	neg    ecx
c001ef1a:	83 d3 00             	adc    ebx,0x0
c001ef1d:	f7 db                	neg    ebx
c001ef1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef22:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef26:	89 dd                	mov    ebp,ebx
c001ef28:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef30:	e9 5f ff ff ff       	jmp    c001ee94 <__divdi3+0x30>
c001ef35:	8d 76 00             	lea    esi,[esi+0x0]
c001ef38:	31 f6                	xor    esi,esi
c001ef3a:	31 c9                	xor    ecx,ecx
c001ef3c:	e9 7b ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001ef41:	8d 76 00             	lea    esi,[esi+0x0]
c001ef44:	b8 20 00 00 00       	mov    eax,0x20
c001ef49:	29 f0                	sub    eax,esi
c001ef4b:	89 f1                	mov    ecx,esi
c001ef4d:	d3 e3                	shl    ebx,cl
c001ef4f:	89 fa                	mov    edx,edi
c001ef51:	88 c1                	mov    cl,al
c001ef53:	d3 ea                	shr    edx,cl
c001ef55:	09 da                	or     edx,ebx
c001ef57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef5b:	89 f1                	mov    ecx,esi
c001ef5d:	d3 e7                	shl    edi,cl
c001ef5f:	89 eb                	mov    ebx,ebp
c001ef61:	88 c1                	mov    cl,al
c001ef63:	d3 eb                	shr    ebx,cl
c001ef65:	89 f1                	mov    ecx,esi
c001ef67:	d3 e5                	shl    ebp,cl
c001ef69:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef6c:	88 c1                	mov    cl,al
c001ef6e:	d3 ea                	shr    edx,cl
c001ef70:	09 d5                	or     ebp,edx
c001ef72:	89 e8                	mov    eax,ebp
c001ef74:	89 da                	mov    edx,ebx
c001ef76:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ef7a:	89 d3                	mov    ebx,edx
c001ef7c:	89 c5                	mov    ebp,eax
c001ef7e:	f7 e7                	mul    edi
c001ef80:	39 d3                	cmp    ebx,edx
c001ef82:	72 18                	jb     c001ef9c <__divdi3+0x138>
c001ef84:	74 0a                	je     c001ef90 <__divdi3+0x12c>
c001ef86:	89 e9                	mov    ecx,ebp
c001ef88:	31 f6                	xor    esi,esi
c001ef8a:	e9 2d ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001ef8f:	90                   	nop
c001ef90:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ef93:	89 f1                	mov    ecx,esi
c001ef95:	d3 e7                	shl    edi,cl
c001ef97:	39 c7                	cmp    edi,eax
c001ef99:	73 eb                	jae    c001ef86 <__divdi3+0x122>
c001ef9b:	90                   	nop
c001ef9c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ef9f:	31 f6                	xor    esi,esi
c001efa1:	e9 16 ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001efa6:	66 90                	xchg   ax,ax
c001efa8:	31 c9                	xor    ecx,ecx
c001efaa:	e9 0d ff ff ff       	jmp    c001eebc <__divdi3+0x58>
c001efaf:	90                   	nop

c001efb0 <__moddi3>:
c001efb0:	55                   	push   ebp
c001efb1:	57                   	push   edi
c001efb2:	56                   	push   esi
c001efb3:	53                   	push   ebx
c001efb4:	83 ec 2c             	sub    esp,0x2c
c001efb7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efbb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efbf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efc3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efc7:	85 db                	test   ebx,ebx
c001efc9:	0f 88 85 00 00 00    	js     c001f054 <__moddi3+0xa4>
c001efcf:	89 de                	mov    esi,ebx
c001efd1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001efd9:	89 d7                	mov    edi,edx
c001efdb:	85 d2                	test   edx,edx
c001efdd:	79 09                	jns    c001efe8 <__moddi3+0x38>
c001efdf:	f7 d8                	neg    eax
c001efe1:	83 d2 00             	adc    edx,0x0
c001efe4:	f7 da                	neg    edx
c001efe6:	89 d7                	mov    edi,edx
c001efe8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efec:	89 cd                	mov    ebp,ecx
c001efee:	85 ff                	test   edi,edi
c001eff0:	75 52                	jne    c001f044 <__moddi3+0x94>
c001eff2:	89 c3                	mov    ebx,eax
c001eff4:	39 f0                	cmp    eax,esi
c001eff6:	76 24                	jbe    c001f01c <__moddi3+0x6c>
c001eff8:	89 c8                	mov    eax,ecx
c001effa:	89 f2                	mov    edx,esi
c001effc:	f7 f3                	div    ebx
c001effe:	89 d6                	mov    esi,edx
c001f000:	89 f0                	mov    eax,esi
c001f002:	31 d2                	xor    edx,edx
c001f004:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f008:	85 c9                	test   ecx,ecx
c001f00a:	74 07                	je     c001f013 <__moddi3+0x63>
c001f00c:	f7 d8                	neg    eax
c001f00e:	83 d2 00             	adc    edx,0x0
c001f011:	f7 da                	neg    edx
c001f013:	83 c4 2c             	add    esp,0x2c
c001f016:	5b                   	pop    ebx
c001f017:	5e                   	pop    esi
c001f018:	5f                   	pop    edi
c001f019:	5d                   	pop    ebp
c001f01a:	c3                   	ret    
c001f01b:	90                   	nop
c001f01c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f020:	85 db                	test   ebx,ebx
c001f022:	75 0d                	jne    c001f031 <__moddi3+0x81>
c001f024:	b8 01 00 00 00       	mov    eax,0x1
c001f029:	31 d2                	xor    edx,edx
c001f02b:	f7 f7                	div    edi
c001f02d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f031:	89 f0                	mov    eax,esi
c001f033:	31 d2                	xor    edx,edx
c001f035:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f039:	f7 f7                	div    edi
c001f03b:	89 e8                	mov    eax,ebp
c001f03d:	f7 f7                	div    edi
c001f03f:	89 d6                	mov    esi,edx
c001f041:	eb bd                	jmp    c001f000 <__moddi3+0x50>
c001f043:	90                   	nop
c001f044:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f048:	39 f7                	cmp    edi,esi
c001f04a:	76 20                	jbe    c001f06c <__moddi3+0xbc>
c001f04c:	89 c8                	mov    eax,ecx
c001f04e:	89 f2                	mov    edx,esi
c001f050:	eb b2                	jmp    c001f004 <__moddi3+0x54>
c001f052:	66 90                	xchg   ax,ax
c001f054:	f7 d9                	neg    ecx
c001f056:	83 d3 00             	adc    ebx,0x0
c001f059:	f7 db                	neg    ebx
c001f05b:	89 de                	mov    esi,ebx
c001f05d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f065:	e9 6f ff ff ff       	jmp    c001efd9 <__moddi3+0x29>
c001f06a:	66 90                	xchg   ax,ax
c001f06c:	0f bd c7             	bsr    eax,edi
c001f06f:	83 f0 1f             	xor    eax,0x1f
c001f072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f076:	75 24                	jne    c001f09c <__moddi3+0xec>
c001f078:	39 f7                	cmp    edi,esi
c001f07a:	72 06                	jb     c001f082 <__moddi3+0xd2>
c001f07c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f080:	77 0c                	ja     c001f08e <__moddi3+0xde>
c001f082:	89 e9                	mov    ecx,ebp
c001f084:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f088:	19 fe                	sbb    esi,edi
c001f08a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f08e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f092:	89 f2                	mov    edx,esi
c001f094:	e9 6b ff ff ff       	jmp    c001f004 <__moddi3+0x54>
c001f099:	8d 76 00             	lea    esi,[esi+0x0]
c001f09c:	b8 20 00 00 00       	mov    eax,0x20
c001f0a1:	89 c2                	mov    edx,eax
c001f0a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f0a7:	29 da                	sub    edx,ebx
c001f0a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f0ad:	88 d9                	mov    cl,bl
c001f0af:	d3 e7                	shl    edi,cl
c001f0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0b5:	88 d1                	mov    cl,dl
c001f0b7:	d3 e8                	shr    eax,cl
c001f0b9:	09 c7                	or     edi,eax
c001f0bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0c3:	89 d8                	mov    eax,ebx
c001f0c5:	88 d9                	mov    cl,bl
c001f0c7:	d3 e7                	shl    edi,cl
c001f0c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0cd:	89 f3                	mov    ebx,esi
c001f0cf:	88 d1                	mov    cl,dl
c001f0d1:	d3 eb                	shr    ebx,cl
c001f0d3:	89 c7                	mov    edi,eax
c001f0d5:	88 c1                	mov    cl,al
c001f0d7:	d3 e6                	shl    esi,cl
c001f0d9:	89 e8                	mov    eax,ebp
c001f0db:	88 d1                	mov    cl,dl
c001f0dd:	d3 e8                	shr    eax,cl
c001f0df:	09 f0                	or     eax,esi
c001f0e1:	89 f9                	mov    ecx,edi
c001f0e3:	d3 e5                	shl    ebp,cl
c001f0e5:	89 da                	mov    edx,ebx
c001f0e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f0eb:	89 d3                	mov    ebx,edx
c001f0ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f0f1:	89 c6                	mov    esi,eax
c001f0f3:	89 d1                	mov    ecx,edx
c001f0f5:	39 d3                	cmp    ebx,edx
c001f0f7:	72 27                	jb     c001f120 <__moddi3+0x170>
c001f0f9:	74 21                	je     c001f11c <__moddi3+0x16c>
c001f0fb:	29 f5                	sub    ebp,esi
c001f0fd:	19 cb                	sbb    ebx,ecx
c001f0ff:	89 de                	mov    esi,ebx
c001f101:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f105:	d3 e6                	shl    esi,cl
c001f107:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f10b:	89 f9                	mov    ecx,edi
c001f10d:	d3 ed                	shr    ebp,cl
c001f10f:	09 ee                	or     esi,ebp
c001f111:	89 f0                	mov    eax,esi
c001f113:	d3 eb                	shr    ebx,cl
c001f115:	89 da                	mov    edx,ebx
c001f117:	e9 e8 fe ff ff       	jmp    c001f004 <__moddi3+0x54>
c001f11c:	39 c5                	cmp    ebp,eax
c001f11e:	73 db                	jae    c001f0fb <__moddi3+0x14b>
c001f120:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f124:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f128:	89 d1                	mov    ecx,edx
c001f12a:	89 c6                	mov    esi,eax
c001f12c:	eb cd                	jmp    c001f0fb <__moddi3+0x14b>
c001f12e:	66 90                	xchg   ax,ax

c001f130 <__udivdi3>:
c001f130:	55                   	push   ebp
c001f131:	57                   	push   edi
c001f132:	56                   	push   esi
c001f133:	53                   	push   ebx
c001f134:	83 ec 1c             	sub    esp,0x1c
c001f137:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f13b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f13f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f143:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f147:	85 d2                	test   edx,edx
c001f149:	75 41                	jne    c001f18c <__udivdi3+0x5c>
c001f14b:	39 f7                	cmp    edi,esi
c001f14d:	76 15                	jbe    c001f164 <__udivdi3+0x34>
c001f14f:	89 e8                	mov    eax,ebp
c001f151:	89 f2                	mov    edx,esi
c001f153:	f7 f7                	div    edi
c001f155:	31 db                	xor    ebx,ebx
c001f157:	89 da                	mov    edx,ebx
c001f159:	83 c4 1c             	add    esp,0x1c
c001f15c:	5b                   	pop    ebx
c001f15d:	5e                   	pop    esi
c001f15e:	5f                   	pop    edi
c001f15f:	5d                   	pop    ebp
c001f160:	c3                   	ret    
c001f161:	8d 76 00             	lea    esi,[esi+0x0]
c001f164:	89 f9                	mov    ecx,edi
c001f166:	85 ff                	test   edi,edi
c001f168:	75 0b                	jne    c001f175 <__udivdi3+0x45>
c001f16a:	b8 01 00 00 00       	mov    eax,0x1
c001f16f:	31 d2                	xor    edx,edx
c001f171:	f7 f7                	div    edi
c001f173:	89 c1                	mov    ecx,eax
c001f175:	31 d2                	xor    edx,edx
c001f177:	89 f0                	mov    eax,esi
c001f179:	f7 f1                	div    ecx
c001f17b:	89 c3                	mov    ebx,eax
c001f17d:	89 e8                	mov    eax,ebp
c001f17f:	f7 f1                	div    ecx
c001f181:	89 da                	mov    edx,ebx
c001f183:	83 c4 1c             	add    esp,0x1c
c001f186:	5b                   	pop    ebx
c001f187:	5e                   	pop    esi
c001f188:	5f                   	pop    edi
c001f189:	5d                   	pop    ebp
c001f18a:	c3                   	ret    
c001f18b:	90                   	nop
c001f18c:	39 f2                	cmp    edx,esi
c001f18e:	77 1c                	ja     c001f1ac <__udivdi3+0x7c>
c001f190:	0f bd da             	bsr    ebx,edx
c001f193:	83 f3 1f             	xor    ebx,0x1f
c001f196:	75 24                	jne    c001f1bc <__udivdi3+0x8c>
c001f198:	39 f2                	cmp    edx,esi
c001f19a:	72 08                	jb     c001f1a4 <__udivdi3+0x74>
c001f19c:	39 ef                	cmp    edi,ebp
c001f19e:	0f 87 84 00 00 00    	ja     c001f228 <__udivdi3+0xf8>
c001f1a4:	b8 01 00 00 00       	mov    eax,0x1
c001f1a9:	eb ac                	jmp    c001f157 <__udivdi3+0x27>
c001f1ab:	90                   	nop
c001f1ac:	31 db                	xor    ebx,ebx
c001f1ae:	31 c0                	xor    eax,eax
c001f1b0:	89 da                	mov    edx,ebx
c001f1b2:	83 c4 1c             	add    esp,0x1c
c001f1b5:	5b                   	pop    ebx
c001f1b6:	5e                   	pop    esi
c001f1b7:	5f                   	pop    edi
c001f1b8:	5d                   	pop    ebp
c001f1b9:	c3                   	ret    
c001f1ba:	66 90                	xchg   ax,ax
c001f1bc:	b8 20 00 00 00       	mov    eax,0x20
c001f1c1:	29 d8                	sub    eax,ebx
c001f1c3:	88 d9                	mov    cl,bl
c001f1c5:	d3 e2                	shl    edx,cl
c001f1c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1cb:	89 fa                	mov    edx,edi
c001f1cd:	88 c1                	mov    cl,al
c001f1cf:	d3 ea                	shr    edx,cl
c001f1d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1d5:	09 d1                	or     ecx,edx
c001f1d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1db:	88 d9                	mov    cl,bl
c001f1dd:	d3 e7                	shl    edi,cl
c001f1df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1e3:	89 f7                	mov    edi,esi
c001f1e5:	88 c1                	mov    cl,al
c001f1e7:	d3 ef                	shr    edi,cl
c001f1e9:	88 d9                	mov    cl,bl
c001f1eb:	d3 e6                	shl    esi,cl
c001f1ed:	89 ea                	mov    edx,ebp
c001f1ef:	88 c1                	mov    cl,al
c001f1f1:	d3 ea                	shr    edx,cl
c001f1f3:	09 d6                	or     esi,edx
c001f1f5:	89 f0                	mov    eax,esi
c001f1f7:	89 fa                	mov    edx,edi
c001f1f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f1fd:	89 d7                	mov    edi,edx
c001f1ff:	89 c6                	mov    esi,eax
c001f201:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f205:	39 d7                	cmp    edi,edx
c001f207:	72 13                	jb     c001f21c <__udivdi3+0xec>
c001f209:	74 09                	je     c001f214 <__udivdi3+0xe4>
c001f20b:	89 f0                	mov    eax,esi
c001f20d:	31 db                	xor    ebx,ebx
c001f20f:	e9 43 ff ff ff       	jmp    c001f157 <__udivdi3+0x27>
c001f214:	88 d9                	mov    cl,bl
c001f216:	d3 e5                	shl    ebp,cl
c001f218:	39 c5                	cmp    ebp,eax
c001f21a:	73 ef                	jae    c001f20b <__udivdi3+0xdb>
c001f21c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f21f:	31 db                	xor    ebx,ebx
c001f221:	e9 31 ff ff ff       	jmp    c001f157 <__udivdi3+0x27>
c001f226:	66 90                	xchg   ax,ax
c001f228:	31 c0                	xor    eax,eax
c001f22a:	e9 28 ff ff ff       	jmp    c001f157 <__udivdi3+0x27>
c001f22f:	90                   	nop

c001f230 <__umoddi3>:
c001f230:	55                   	push   ebp
c001f231:	57                   	push   edi
c001f232:	56                   	push   esi
c001f233:	53                   	push   ebx
c001f234:	83 ec 1c             	sub    esp,0x1c
c001f237:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f23b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f23f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f243:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f247:	89 da                	mov    edx,ebx
c001f249:	85 c0                	test   eax,eax
c001f24b:	75 37                	jne    c001f284 <__umoddi3+0x54>
c001f24d:	39 df                	cmp    edi,ebx
c001f24f:	76 13                	jbe    c001f264 <__umoddi3+0x34>
c001f251:	89 f0                	mov    eax,esi
c001f253:	f7 f7                	div    edi
c001f255:	89 d0                	mov    eax,edx
c001f257:	31 d2                	xor    edx,edx
c001f259:	83 c4 1c             	add    esp,0x1c
c001f25c:	5b                   	pop    ebx
c001f25d:	5e                   	pop    esi
c001f25e:	5f                   	pop    edi
c001f25f:	5d                   	pop    ebp
c001f260:	c3                   	ret    
c001f261:	8d 76 00             	lea    esi,[esi+0x0]
c001f264:	89 fd                	mov    ebp,edi
c001f266:	85 ff                	test   edi,edi
c001f268:	75 0b                	jne    c001f275 <__umoddi3+0x45>
c001f26a:	b8 01 00 00 00       	mov    eax,0x1
c001f26f:	31 d2                	xor    edx,edx
c001f271:	f7 f7                	div    edi
c001f273:	89 c5                	mov    ebp,eax
c001f275:	89 d8                	mov    eax,ebx
c001f277:	31 d2                	xor    edx,edx
c001f279:	f7 f5                	div    ebp
c001f27b:	89 f0                	mov    eax,esi
c001f27d:	f7 f5                	div    ebp
c001f27f:	89 d0                	mov    eax,edx
c001f281:	eb d4                	jmp    c001f257 <__umoddi3+0x27>
c001f283:	90                   	nop
c001f284:	89 f1                	mov    ecx,esi
c001f286:	39 d8                	cmp    eax,ebx
c001f288:	76 0a                	jbe    c001f294 <__umoddi3+0x64>
c001f28a:	89 f0                	mov    eax,esi
c001f28c:	83 c4 1c             	add    esp,0x1c
c001f28f:	5b                   	pop    ebx
c001f290:	5e                   	pop    esi
c001f291:	5f                   	pop    edi
c001f292:	5d                   	pop    ebp
c001f293:	c3                   	ret    
c001f294:	0f bd e8             	bsr    ebp,eax
c001f297:	83 f5 1f             	xor    ebp,0x1f
c001f29a:	75 1c                	jne    c001f2b8 <__umoddi3+0x88>
c001f29c:	39 d8                	cmp    eax,ebx
c001f29e:	72 04                	jb     c001f2a4 <__umoddi3+0x74>
c001f2a0:	39 f7                	cmp    edi,esi
c001f2a2:	77 08                	ja     c001f2ac <__umoddi3+0x7c>
c001f2a4:	89 da                	mov    edx,ebx
c001f2a6:	29 fe                	sub    esi,edi
c001f2a8:	19 c2                	sbb    edx,eax
c001f2aa:	89 f1                	mov    ecx,esi
c001f2ac:	89 c8                	mov    eax,ecx
c001f2ae:	83 c4 1c             	add    esp,0x1c
c001f2b1:	5b                   	pop    ebx
c001f2b2:	5e                   	pop    esi
c001f2b3:	5f                   	pop    edi
c001f2b4:	5d                   	pop    ebp
c001f2b5:	c3                   	ret    
c001f2b6:	66 90                	xchg   ax,ax
c001f2b8:	ba 20 00 00 00       	mov    edx,0x20
c001f2bd:	29 ea                	sub    edx,ebp
c001f2bf:	89 e9                	mov    ecx,ebp
c001f2c1:	d3 e0                	shl    eax,cl
c001f2c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2c7:	89 f8                	mov    eax,edi
c001f2c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2cd:	88 d1                	mov    cl,dl
c001f2cf:	d3 e8                	shr    eax,cl
c001f2d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2d5:	09 c1                	or     ecx,eax
c001f2d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2db:	89 e9                	mov    ecx,ebp
c001f2dd:	d3 e7                	shl    edi,cl
c001f2df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2e3:	89 d8                	mov    eax,ebx
c001f2e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2e9:	88 d1                	mov    cl,dl
c001f2eb:	d3 e8                	shr    eax,cl
c001f2ed:	89 c7                	mov    edi,eax
c001f2ef:	89 e9                	mov    ecx,ebp
c001f2f1:	d3 e3                	shl    ebx,cl
c001f2f3:	89 f0                	mov    eax,esi
c001f2f5:	88 d1                	mov    cl,dl
c001f2f7:	d3 e8                	shr    eax,cl
c001f2f9:	09 d8                	or     eax,ebx
c001f2fb:	89 e9                	mov    ecx,ebp
c001f2fd:	d3 e6                	shl    esi,cl
c001f2ff:	89 f3                	mov    ebx,esi
c001f301:	89 fa                	mov    edx,edi
c001f303:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f307:	89 d1                	mov    ecx,edx
c001f309:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f30d:	89 c6                	mov    esi,eax
c001f30f:	89 d7                	mov    edi,edx
c001f311:	39 d1                	cmp    ecx,edx
c001f313:	72 27                	jb     c001f33c <__umoddi3+0x10c>
c001f315:	74 21                	je     c001f338 <__umoddi3+0x108>
c001f317:	89 ca                	mov    edx,ecx
c001f319:	29 f3                	sub    ebx,esi
c001f31b:	19 fa                	sbb    edx,edi
c001f31d:	89 d0                	mov    eax,edx
c001f31f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f323:	d3 e0                	shl    eax,cl
c001f325:	89 e9                	mov    ecx,ebp
c001f327:	d3 eb                	shr    ebx,cl
c001f329:	09 d8                	or     eax,ebx
c001f32b:	d3 ea                	shr    edx,cl
c001f32d:	83 c4 1c             	add    esp,0x1c
c001f330:	5b                   	pop    ebx
c001f331:	5e                   	pop    esi
c001f332:	5f                   	pop    edi
c001f333:	5d                   	pop    ebp
c001f334:	c3                   	ret    
c001f335:	8d 76 00             	lea    esi,[esi+0x0]
c001f338:	39 c3                	cmp    ebx,eax
c001f33a:	73 db                	jae    c001f317 <__umoddi3+0xe7>
c001f33c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f340:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f344:	89 d7                	mov    edi,edx
c001f346:	89 c6                	mov    esi,eax
c001f348:	eb cd                	jmp    c001f317 <__umoddi3+0xe7>

Disassembly of section .init:

c001f34a <_init>:
c001f34a:	55                   	push   ebp
c001f34b:	89 e5                	mov    ebp,esp
c001f34d:	e8 a2 0d fe ff       	call   c00000f4 <frame_dummy>
c001f352:	e8 e5 fa ff ff       	call   c001ee3c <__do_global_ctors_aux>
c001f357:	5d                   	pop    ebp
c001f358:	c3                   	ret    

Disassembly of section .fini:

c001f359 <_fini>:
c001f359:	55                   	push   ebp
c001f35a:	89 e5                	mov    ebp,esp
c001f35c:	e8 23 0d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f361:	5d                   	pop    ebp
c001f362:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f364 <Computer::~Computer()>:
c001f364:	83 ec 0c             	sub    esp,0xc
c001f367:	ba 74 06 02 c0       	mov    edx,0xc0020674
c001f36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f370:	89 10                	mov    DWORD PTR [eax],edx
c001f372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f376:	83 ec 0c             	sub    esp,0xc
c001f379:	50                   	push   eax
c001f37a:	e8 75 d1 fe ff       	call   c000c4f4 <Device::~Device()>
c001f37f:	83 c4 10             	add    esp,0x10
c001f382:	90                   	nop
c001f383:	83 c4 0c             	add    esp,0xc
c001f386:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f388 <Computer::~Computer()>:
c001f388:	83 ec 0c             	sub    esp,0xc
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f392:	e8 cd ff ff ff       	call   c001f364 <Computer::~Computer()>
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	83 ec 08             	sub    esp,0x8
c001f39d:	68 70 01 00 00       	push   0x170
c001f3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a6:	e8 6d b4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f3ab:	83 c4 10             	add    esp,0x10
c001f3ae:	83 c4 0c             	add    esp,0xc
c001f3b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f3b2 <idleCommon()>:
c001f3b2:	83 ec 0c             	sub    esp,0xc
c001f3b5:	fa                   	cli    
c001f3b6:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001f3bc:	e8 fb 66 ff ff       	call   c0015abc <schedule()>
c001f3c1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001f3c6:	48                   	dec    eax
c001f3c7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001f3cc:	75 01                	jne    c001f3cf <idleCommon()+0x1d>
c001f3ce:	fb                   	sti    
c001f3cf:	83 c4 0c             	add    esp,0xc
c001f3d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f3d4 <LinkedList<UnixFile>::~LinkedList()>:
c001f3d4:	90                   	nop
c001f3d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f3d6 <LinkedList<UnixFile>::LinkedList()>:
c001f3d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f40f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f416:	90                   	nop
c001f417:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f418 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f420:	75 10                	jne    c001f432 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f422:	83 ec 0c             	sub    esp,0xc
c001f425:	68 88 08 02 c0       	push   0xc0020888
c001f42a:	e8 ce 1d ff ff       	call   c00111fd <KePanic(char const*)>
c001f42f:	83 c4 10             	add    esp,0x10
c001f432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f436:	8b 00                	mov    eax,DWORD PTR [eax]
c001f438:	85 c0                	test   eax,eax
c001f43a:	74 34                	je     c001f470 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f440:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f443:	85 c0                	test   eax,eax
c001f445:	74 29                	je     c001f470 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f44b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f44e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f452:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f45d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f467:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f46e:	eb 65                	jmp    c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f474:	8b 00                	mov    eax,DWORD PTR [eax]
c001f476:	85 c0                	test   eax,eax
c001f478:	75 4b                	jne    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f481:	85 c0                	test   eax,eax
c001f483:	75 40                	jne    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f489:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f48d:	89 10                	mov    DWORD PTR [eax],edx
c001f48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f493:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f497:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4af:	85 c0                	test   eax,eax
c001f4b1:	74 22                	je     c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4b3:	83 ec 0c             	sub    esp,0xc
c001f4b6:	68 aa 08 02 c0       	push   0xc00208aa
c001f4bb:	e8 3d 1d ff ff       	call   c00111fd <KePanic(char const*)>
c001f4c0:	83 c4 10             	add    esp,0x10
c001f4c3:	eb 10                	jmp    c001f4d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4c5:	83 ec 0c             	sub    esp,0xc
c001f4c8:	68 b4 08 02 c0       	push   0xc00208b4
c001f4cd:	e8 2b 1d ff ff       	call   c00111fd <KePanic(char const*)>
c001f4d2:	83 c4 10             	add    esp,0x10
c001f4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4dc:	8d 50 01             	lea    edx,[eax+0x1]
c001f4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4e6:	90                   	nop
c001f4e7:	83 c4 0c             	add    esp,0xc
c001f4ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f4ec <LinkedList<UnixFile>::getFirstElement()>:
c001f4ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f4f4 <LinkedList<UnixFile>::removeFirst()>:
c001f4f4:	83 ec 0c             	sub    esp,0xc
c001f4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4fd:	85 c0                	test   eax,eax
c001f4ff:	75 12                	jne    c001f513 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f501:	83 ec 0c             	sub    esp,0xc
c001f504:	68 c0 08 02 c0       	push   0xc00208c0
c001f509:	e8 ef 1c ff ff       	call   c00111fd <KePanic(char const*)>
c001f50e:	83 c4 10             	add    esp,0x10
c001f511:	eb 7e                	jmp    c001f591 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f517:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f51a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f51d:	85 c0                	test   eax,eax
c001f51f:	74 10                	je     c001f531 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f521:	83 ec 0c             	sub    esp,0xc
c001f524:	68 0b 09 02 c0       	push   0xc002090b
c001f529:	e8 cf 1c ff ff       	call   c00111fd <KePanic(char const*)>
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f535:	8b 00                	mov    eax,DWORD PTR [eax]
c001f537:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f53a:	85 c0                	test   eax,eax
c001f53c:	75 33                	jne    c001f571 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f542:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f54c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f557:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f55a:	83 f8 01             	cmp    eax,0x1
c001f55d:	74 21                	je     c001f580 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f55f:	83 ec 0c             	sub    esp,0xc
c001f562:	68 e4 08 02 c0       	push   0xc00208e4
c001f567:	e8 91 1c ff ff       	call   c00111fd <KePanic(char const*)>
c001f56c:	83 c4 10             	add    esp,0x10
c001f56f:	eb 0f                	jmp    c001f580 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f575:	8b 00                	mov    eax,DWORD PTR [eax]
c001f577:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57e:	89 10                	mov    DWORD PTR [eax],edx
c001f580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f584:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f587:	8d 50 ff             	lea    edx,[eax-0x1]
c001f58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f591:	83 c4 0c             	add    esp,0xc
c001f594:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f596 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f59a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f59d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f59e <DriverlessDevice::~DriverlessDevice()>:
c001f59e:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c001f5a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5a7:	89 10                	mov    DWORD PTR [eax],edx
c001f5a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5ad:	50                   	push   eax
c001f5ae:	e8 41 cf fe ff       	call   c000c4f4 <Device::~Device()>
c001f5b3:	83 c4 04             	add    esp,0x4
c001f5b6:	90                   	nop
c001f5b7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f5b8 <DriverlessDevice::~DriverlessDevice()>:
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	83 ec 0c             	sub    esp,0xc
c001f5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c2:	e8 d7 ff ff ff       	call   c001f59e <DriverlessDevice::~DriverlessDevice()>
c001f5c7:	83 c4 10             	add    esp,0x10
c001f5ca:	83 ec 08             	sub    esp,0x8
c001f5cd:	68 58 01 00 00       	push   0x158
c001f5d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5d6:	e8 3d b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	83 c4 0c             	add    esp,0xc
c001f5e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f5e2 <LinkedList<Device>::addElement(Device*)>:
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5ea:	75 10                	jne    c001f5fc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f5ec:	83 ec 0c             	sub    esp,0xc
c001f5ef:	68 88 08 02 c0       	push   0xc0020888
c001f5f4:	e8 04 1c ff ff       	call   c00111fd <KePanic(char const*)>
c001f5f9:	83 c4 10             	add    esp,0x10
c001f5fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f600:	8b 00                	mov    eax,DWORD PTR [eax]
c001f602:	85 c0                	test   eax,eax
c001f604:	74 3a                	je     c001f640 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f60d:	85 c0                	test   eax,eax
c001f60f:	74 2f                	je     c001f640 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f615:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f618:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f626:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f62a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f631:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f634:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f63e:	eb 68                	jmp    c001f6a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f644:	8b 00                	mov    eax,DWORD PTR [eax]
c001f646:	85 c0                	test   eax,eax
c001f648:	75 4e                	jne    c001f698 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f651:	85 c0                	test   eax,eax
c001f653:	75 43                	jne    c001f698 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f659:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f65d:	89 10                	mov    DWORD PTR [eax],edx
c001f65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f663:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f667:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f671:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f682:	85 c0                	test   eax,eax
c001f684:	74 22                	je     c001f6a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f686:	83 ec 0c             	sub    esp,0xc
c001f689:	68 aa 08 02 c0       	push   0xc00208aa
c001f68e:	e8 6a 1b ff ff       	call   c00111fd <KePanic(char const*)>
c001f693:	83 c4 10             	add    esp,0x10
c001f696:	eb 10                	jmp    c001f6a8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f698:	83 ec 0c             	sub    esp,0xc
c001f69b:	68 b4 08 02 c0       	push   0xc00208b4
c001f6a0:	e8 58 1b ff ff       	call   c00111fd <KePanic(char const*)>
c001f6a5:	83 c4 10             	add    esp,0x10
c001f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6af:	8d 50 01             	lea    edx,[eax+0x1]
c001f6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6b9:	90                   	nop
c001f6ba:	83 c4 0c             	add    esp,0xc
c001f6bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f6be <LinkedList<Device>::LinkedList()>:
c001f6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6fe:	90                   	nop
c001f6ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f700 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f704:	8b 00                	mov    eax,DWORD PTR [eax]
c001f706:	85 c0                	test   eax,eax
c001f708:	75 0e                	jne    c001f718 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f711:	85 c0                	test   eax,eax
c001f713:	75 03                	jne    c001f718 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f715:	b0 01                	mov    al,0x1
c001f717:	c3                   	ret    
c001f718:	b0 00                	mov    al,0x0
c001f71a:	90                   	nop
c001f71b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f71c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f720:	8b 00                	mov    eax,DWORD PTR [eax]
c001f722:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f724 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f724:	83 ec 0c             	sub    esp,0xc
c001f727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f72d:	85 c0                	test   eax,eax
c001f72f:	75 17                	jne    c001f748 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f731:	83 ec 0c             	sub    esp,0xc
c001f734:	68 c0 08 02 c0       	push   0xc00208c0
c001f739:	e8 bf 1a ff ff       	call   c00111fd <KePanic(char const*)>
c001f73e:	83 c4 10             	add    esp,0x10
c001f741:	e9 96 00 00 00       	jmp    c001f7dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f746:	66 90                	xchg   ax,ax
c001f748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f74f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f752:	85 c0                	test   eax,eax
c001f754:	0f 95 c0             	setne  al
c001f757:	0f b6 c0             	movzx  eax,al
c001f75a:	85 c0                	test   eax,eax
c001f75c:	74 12                	je     c001f770 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f75e:	83 ec 0c             	sub    esp,0xc
c001f761:	68 0b 09 02 c0       	push   0xc002090b
c001f766:	e8 92 1a ff ff       	call   c00111fd <KePanic(char const*)>
c001f76b:	83 c4 10             	add    esp,0x10
c001f76e:	66 90                	xchg   ax,ax
c001f770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f774:	8b 00                	mov    eax,DWORD PTR [eax]
c001f776:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f779:	85 c0                	test   eax,eax
c001f77b:	0f 94 c0             	sete   al
c001f77e:	0f b6 c0             	movzx  eax,al
c001f781:	85 c0                	test   eax,eax
c001f783:	74 33                	je     c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f789:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f793:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7a1:	83 f8 01             	cmp    eax,0x1
c001f7a4:	74 22                	je     c001f7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	68 e4 08 02 c0       	push   0xc00208e4
c001f7ae:	e8 4a 1a ff ff       	call   c00111fd <KePanic(char const*)>
c001f7b3:	83 c4 10             	add    esp,0x10
c001f7b6:	eb 10                	jmp    c001f7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c5:	89 10                	mov    DWORD PTR [eax],edx
c001f7c7:	90                   	nop
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7cf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7d9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7dc:	83 c4 0c             	add    esp,0xc
c001f7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7e0:	83 ec 0c             	sub    esp,0xc
c001f7e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7e8:	75 12                	jne    c001f7fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f7ea:	83 ec 0c             	sub    esp,0xc
c001f7ed:	68 88 08 02 c0       	push   0xc0020888
c001f7f2:	e8 06 1a ff ff       	call   c00111fd <KePanic(char const*)>
c001f7f7:	83 c4 10             	add    esp,0x10
c001f7fa:	66 90                	xchg   ax,ax
c001f7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f800:	8b 00                	mov    eax,DWORD PTR [eax]
c001f802:	85 c0                	test   eax,eax
c001f804:	74 36                	je     c001f83c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f80d:	85 c0                	test   eax,eax
c001f80f:	74 2b                	je     c001f83c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f815:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f818:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f81c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f827:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f831:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f838:	eb 6a                	jmp    c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f83a:	66 90                	xchg   ax,ax
c001f83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f840:	8b 00                	mov    eax,DWORD PTR [eax]
c001f842:	85 c0                	test   eax,eax
c001f844:	75 4e                	jne    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f84d:	85 c0                	test   eax,eax
c001f84f:	75 43                	jne    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f855:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f859:	89 10                	mov    DWORD PTR [eax],edx
c001f85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f86d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f878:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f87b:	85 c0                	test   eax,eax
c001f87d:	74 25                	je     c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f87f:	83 ec 0c             	sub    esp,0xc
c001f882:	68 aa 08 02 c0       	push   0xc00208aa
c001f887:	e8 71 19 ff ff       	call   c00111fd <KePanic(char const*)>
c001f88c:	83 c4 10             	add    esp,0x10
c001f88f:	eb 13                	jmp    c001f8a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f891:	8d 76 00             	lea    esi,[esi+0x0]
c001f894:	83 ec 0c             	sub    esp,0xc
c001f897:	68 b4 08 02 c0       	push   0xc00208b4
c001f89c:	e8 5c 19 ff ff       	call   c00111fd <KePanic(char const*)>
c001f8a1:	83 c4 10             	add    esp,0x10
c001f8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8ab:	8d 50 01             	lea    edx,[eax+0x1]
c001f8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8b5:	90                   	nop
c001f8b6:	83 c4 0c             	add    esp,0xc
c001f8b9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f8bc <ACPI::~ACPI()>:
c001f8bc:	83 ec 0c             	sub    esp,0xc
c001f8bf:	ba 00 1a 02 c0       	mov    edx,0xc0021a00
c001f8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c8:	89 10                	mov    DWORD PTR [eax],edx
c001f8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ce:	83 ec 0c             	sub    esp,0xc
c001f8d1:	50                   	push   eax
c001f8d2:	e8 1d cc fe ff       	call   c000c4f4 <Device::~Device()>
c001f8d7:	83 c4 10             	add    esp,0x10
c001f8da:	90                   	nop
c001f8db:	83 c4 0c             	add    esp,0xc
c001f8de:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8e0 <ACPI::~ACPI()>:
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	83 ec 0c             	sub    esp,0xc
c001f8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ea:	e8 cd ff ff ff       	call   c001f8bc <ACPI::~ACPI()>
c001f8ef:	83 c4 10             	add    esp,0x10
c001f8f2:	83 ec 08             	sub    esp,0x8
c001f8f5:	68 64 12 00 00       	push   0x1264
c001f8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8fe:	e8 15 af fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f903:	83 c4 10             	add    esp,0x10
c001f906:	83 c4 0c             	add    esp,0xc
c001f909:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f90c <LinkedList<Device>::~LinkedList()>:
c001f90c:	90                   	nop
c001f90d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f910 <LinkedList<Device>::isEmpty()>:
c001f910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f914:	8b 00                	mov    eax,DWORD PTR [eax]
c001f916:	85 c0                	test   eax,eax
c001f918:	75 0e                	jne    c001f928 <LinkedList<Device>::isEmpty()+0x18>
c001f91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f921:	85 c0                	test   eax,eax
c001f923:	75 03                	jne    c001f928 <LinkedList<Device>::isEmpty()+0x18>
c001f925:	b0 01                	mov    al,0x1
c001f927:	c3                   	ret    
c001f928:	b0 00                	mov    al,0x0
c001f92a:	90                   	nop
c001f92b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f92c <LinkedList<Device>::getFirstElement()>:
c001f92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f930:	8b 00                	mov    eax,DWORD PTR [eax]
c001f932:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f934 <LinkedList<Device>::removeFirst()>:
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93d:	85 c0                	test   eax,eax
c001f93f:	75 17                	jne    c001f958 <LinkedList<Device>::removeFirst()+0x24>
c001f941:	83 ec 0c             	sub    esp,0xc
c001f944:	68 c0 08 02 c0       	push   0xc00208c0
c001f949:	e8 af 18 ff ff       	call   c00111fd <KePanic(char const*)>
c001f94e:	83 c4 10             	add    esp,0x10
c001f951:	e9 92 00 00 00       	jmp    c001f9e8 <LinkedList<Device>::removeFirst()+0xb4>
c001f956:	66 90                	xchg   ax,ax
c001f958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f965:	85 c0                	test   eax,eax
c001f967:	74 13                	je     c001f97c <LinkedList<Device>::removeFirst()+0x48>
c001f969:	83 ec 0c             	sub    esp,0xc
c001f96c:	68 0b 09 02 c0       	push   0xc002090b
c001f971:	e8 87 18 ff ff       	call   c00111fd <KePanic(char const*)>
c001f976:	83 c4 10             	add    esp,0x10
c001f979:	8d 76 00             	lea    esi,[esi+0x0]
c001f97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f980:	8b 00                	mov    eax,DWORD PTR [eax]
c001f982:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f988:	85 c0                	test   eax,eax
c001f98a:	75 34                	jne    c001f9c0 <LinkedList<Device>::removeFirst()+0x8c>
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9a8:	83 f8 01             	cmp    eax,0x1
c001f9ab:	74 27                	je     c001f9d4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9ad:	83 ec 0c             	sub    esp,0xc
c001f9b0:	68 e4 08 02 c0       	push   0xc00208e4
c001f9b5:	e8 43 18 ff ff       	call   c00111fd <KePanic(char const*)>
c001f9ba:	83 c4 10             	add    esp,0x10
c001f9bd:	eb 15                	jmp    c001f9d4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9bf:	90                   	nop
c001f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 10                	mov    DWORD PTR [eax],edx
c001f9d2:	66 90                	xchg   ax,ax
c001f9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9db:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9e8:	83 c4 0c             	add    esp,0xc
c001f9eb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f9ec <CPU::~CPU()>:
c001f9ec:	83 ec 0c             	sub    esp,0xc
c001f9ef:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c001f9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f8:	89 10                	mov    DWORD PTR [eax],edx
c001f9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fe:	83 ec 0c             	sub    esp,0xc
c001fa01:	50                   	push   eax
c001fa02:	e8 ed ca fe ff       	call   c000c4f4 <Device::~Device()>
c001fa07:	83 c4 10             	add    esp,0x10
c001fa0a:	90                   	nop
c001fa0b:	83 c4 0c             	add    esp,0xc
c001fa0e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa10 <CPU::~CPU()>:
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	83 ec 0c             	sub    esp,0xc
c001fa16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1a:	e8 cd ff ff ff       	call   c001f9ec <CPU::~CPU()>
c001fa1f:	83 c4 10             	add    esp,0x10
c001fa22:	83 ec 08             	sub    esp,0x8
c001fa25:	68 94 11 00 00       	push   0x1194
c001fa2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa2e:	e8 e5 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa33:	83 c4 10             	add    esp,0x10
c001fa36:	83 c4 0c             	add    esp,0xc
c001fa39:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa3c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa44 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa44:	90                   	nop
c001fa45:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa48 <ThreadControlBlock::ThreadControlBlock()>:
c001fa48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa4c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa57:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa62:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fa69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fa74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa78:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fa7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa83:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fa87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fa8f:	90                   	nop
c001fa90:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fa94 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fa94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fad4:	90                   	nop
c001fad5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fad6 <PCI::~PCI()>:
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c001fade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae2:	89 10                	mov    DWORD PTR [eax],edx
c001fae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	50                   	push   eax
c001faec:	e8 9b c4 fe ff       	call   c000bf8c <Bus::~Bus()>
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	90                   	nop
c001faf5:	83 c4 0c             	add    esp,0xc
c001faf8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fafa <PCI::~PCI()>:
c001fafa:	83 ec 0c             	sub    esp,0xc
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb04:	e8 cd ff ff ff       	call   c001fad6 <PCI::~PCI()>
c001fb09:	83 c4 10             	add    esp,0x10
c001fb0c:	83 ec 08             	sub    esp,0x8
c001fb0f:	68 5c 01 00 00       	push   0x15c
c001fb14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb18:	e8 fb ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb1d:	83 c4 10             	add    esp,0x10
c001fb20:	83 c4 0c             	add    esp,0xc
c001fb23:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb24 <IDE::~IDE()>:
c001fb24:	83 ec 0c             	sub    esp,0xc
c001fb27:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c001fb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb30:	89 10                	mov    DWORD PTR [eax],edx
c001fb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb36:	83 ec 0c             	sub    esp,0xc
c001fb39:	50                   	push   eax
c001fb3a:	e8 2d ce fe ff       	call   c000c96c <HardDiskController::~HardDiskController()>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	90                   	nop
c001fb43:	83 c4 0c             	add    esp,0xc
c001fb46:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb48 <IDE::~IDE()>:
c001fb48:	83 ec 0c             	sub    esp,0xc
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb52:	e8 cd ff ff ff       	call   c001fb24 <IDE::~IDE()>
c001fb57:	83 c4 10             	add    esp,0x10
c001fb5a:	83 ec 08             	sub    esp,0x8
c001fb5d:	68 70 02 00 00       	push   0x270
c001fb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb66:	e8 ad ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb6b:	83 c4 10             	add    esp,0x10
c001fb6e:	83 c4 0c             	add    esp,0xc
c001fb71:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fb72 <SATABus::~SATABus()>:
c001fb72:	83 ec 0c             	sub    esp,0xc
c001fb75:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c001fb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7e:	89 10                	mov    DWORD PTR [eax],edx
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	50                   	push   eax
c001fb88:	e8 df cd fe ff       	call   c000c96c <HardDiskController::~HardDiskController()>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	90                   	nop
c001fb91:	83 c4 0c             	add    esp,0xc
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fb96 <SATABus::~SATABus()>:
c001fb96:	83 ec 0c             	sub    esp,0xc
c001fb99:	83 ec 0c             	sub    esp,0xc
c001fb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba0:	e8 cd ff ff ff       	call   c001fb72 <SATABus::~SATABus()>
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	83 ec 08             	sub    esp,0x8
c001fbab:	68 64 01 00 00       	push   0x164
c001fbb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbb4:	e8 5f ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbb9:	83 c4 10             	add    esp,0x10
c001fbbc:	83 c4 0c             	add    esp,0xc
c001fbbf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fbc0 <ATA::~ATA()>:
c001fbc0:	83 ec 0c             	sub    esp,0xc
c001fbc3:	ba a8 2b 02 c0       	mov    edx,0xc0022ba8
c001fbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbcc:	89 10                	mov    DWORD PTR [eax],edx
c001fbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	50                   	push   eax
c001fbd6:	e8 73 ce fe ff       	call   c000ca4e <PhysicalDisk::~PhysicalDisk()>
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	90                   	nop
c001fbdf:	83 c4 0c             	add    esp,0xc
c001fbe2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fbe4 <ATA::~ATA()>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbee:	e8 cd ff ff ff       	call   c001fbc0 <ATA::~ATA()>
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	83 ec 08             	sub    esp,0x8
c001fbf9:	68 7c 01 00 00       	push   0x17c
c001fbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc02:	e8 11 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc07:	83 c4 10             	add    esp,0x10
c001fc0a:	83 c4 0c             	add    esp,0xc
c001fc0d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc0e <ATAPI::~ATAPI()>:
c001fc0e:	83 ec 0c             	sub    esp,0xc
c001fc11:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c001fc16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1a:	89 10                	mov    DWORD PTR [eax],edx
c001fc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc20:	83 ec 0c             	sub    esp,0xc
c001fc23:	50                   	push   eax
c001fc24:	e8 25 ce fe ff       	call   c000ca4e <PhysicalDisk::~PhysicalDisk()>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	90                   	nop
c001fc2d:	83 c4 0c             	add    esp,0xc
c001fc30:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc32 <ATAPI::~ATAPI()>:
c001fc32:	83 ec 0c             	sub    esp,0xc
c001fc35:	83 ec 0c             	sub    esp,0xc
c001fc38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc3c:	e8 cd ff ff ff       	call   c001fc0e <ATAPI::~ATAPI()>
c001fc41:	83 c4 10             	add    esp,0x10
c001fc44:	83 ec 08             	sub    esp,0x8
c001fc47:	68 84 01 00 00       	push   0x184
c001fc4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc50:	e8 c3 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	83 c4 0c             	add    esp,0xc
c001fc5b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc5c <SATA::~SATA()>:
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	ba a4 2c 02 c0       	mov    edx,0xc0022ca4
c001fc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc68:	89 10                	mov    DWORD PTR [eax],edx
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	50                   	push   eax
c001fc72:	e8 d7 cd fe ff       	call   c000ca4e <PhysicalDisk::~PhysicalDisk()>
c001fc77:	83 c4 10             	add    esp,0x10
c001fc7a:	90                   	nop
c001fc7b:	83 c4 0c             	add    esp,0xc
c001fc7e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fc80 <SATA::~SATA()>:
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	83 ec 0c             	sub    esp,0xc
c001fc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc8a:	e8 cd ff ff ff       	call   c001fc5c <SATA::~SATA()>
c001fc8f:	83 c4 10             	add    esp,0x10
c001fc92:	83 ec 08             	sub    esp,0x8
c001fc95:	68 7c 01 00 00       	push   0x17c
c001fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc9e:	e8 75 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fca3:	83 c4 10             	add    esp,0x10
c001fca6:	83 c4 0c             	add    esp,0xc
c001fca9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fcaa <SATAPI::~SATAPI()>:
c001fcaa:	83 ec 0c             	sub    esp,0xc
c001fcad:	ba c8 2d 02 c0       	mov    edx,0xc0022dc8
c001fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb6:	89 10                	mov    DWORD PTR [eax],edx
c001fcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	50                   	push   eax
c001fcc0:	e8 89 cd fe ff       	call   c000ca4e <PhysicalDisk::~PhysicalDisk()>
c001fcc5:	83 c4 10             	add    esp,0x10
c001fcc8:	90                   	nop
c001fcc9:	83 c4 0c             	add    esp,0xc
c001fccc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fcce <SATAPI::~SATAPI()>:
c001fcce:	83 ec 0c             	sub    esp,0xc
c001fcd1:	83 ec 0c             	sub    esp,0xc
c001fcd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd8:	e8 cd ff ff ff       	call   c001fcaa <SATAPI::~SATAPI()>
c001fcdd:	83 c4 10             	add    esp,0x10
c001fce0:	83 ec 08             	sub    esp,0x8
c001fce3:	68 84 01 00 00       	push   0x184
c001fce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcec:	e8 27 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	83 c4 0c             	add    esp,0xc
c001fcf7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fcf8 <IOAPIC::~IOAPIC()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	ba 08 2e 02 c0       	mov    edx,0xc0022e08
c001fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd04:	89 10                	mov    DWORD PTR [eax],edx
c001fd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0a:	83 ec 0c             	sub    esp,0xc
c001fd0d:	50                   	push   eax
c001fd0e:	e8 e1 c7 fe ff       	call   c000c4f4 <Device::~Device()>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	90                   	nop
c001fd17:	83 c4 0c             	add    esp,0xc
c001fd1a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd1c <IOAPIC::~IOAPIC()>:
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	83 ec 0c             	sub    esp,0xc
c001fd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd26:	e8 cd ff ff ff       	call   c001fcf8 <IOAPIC::~IOAPIC()>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	83 ec 08             	sub    esp,0x8
c001fd31:	68 68 01 00 00       	push   0x168
c001fd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd3a:	e8 d9 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd3f:	83 c4 10             	add    esp,0x10
c001fd42:	83 c4 0c             	add    esp,0xc
c001fd45:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd48 <APICTimer::~APICTimer()>:
c001fd48:	83 ec 0c             	sub    esp,0xc
c001fd4b:	ba 50 2e 02 c0       	mov    edx,0xc0022e50
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	89 10                	mov    DWORD PTR [eax],edx
c001fd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5a:	83 ec 0c             	sub    esp,0xc
c001fd5d:	50                   	push   eax
c001fd5e:	e8 5d e2 fe ff       	call   c000dfc0 <Timer::~Timer()>
c001fd63:	83 c4 10             	add    esp,0x10
c001fd66:	90                   	nop
c001fd67:	83 c4 0c             	add    esp,0xc
c001fd6a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd6c <APICTimer::~APICTimer()>:
c001fd6c:	83 ec 0c             	sub    esp,0xc
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd76:	e8 cd ff ff ff       	call   c001fd48 <APICTimer::~APICTimer()>
c001fd7b:	83 c4 10             	add    esp,0x10
c001fd7e:	83 ec 08             	sub    esp,0x8
c001fd81:	68 60 01 00 00       	push   0x160
c001fd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8a:	e8 89 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd8f:	83 c4 10             	add    esp,0x10
c001fd92:	83 c4 0c             	add    esp,0xc
c001fd95:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fd98 <PIT::~PIT()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	ba a0 2e 02 c0       	mov    edx,0xc0022ea0
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	89 10                	mov    DWORD PTR [eax],edx
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	50                   	push   eax
c001fdae:	e8 0d e2 fe ff       	call   c000dfc0 <Timer::~Timer()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	90                   	nop
c001fdb7:	83 c4 0c             	add    esp,0xc
c001fdba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdbc <PIT::~PIT()>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc6:	e8 cd ff ff ff       	call   c001fd98 <PIT::~PIT()>
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	83 ec 08             	sub    esp,0x8
c001fdd1:	68 5c 01 00 00       	push   0x15c
c001fdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdda:	e8 39 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fddf:	83 c4 10             	add    esp,0x10
c001fde2:	83 c4 0c             	add    esp,0xc
c001fde5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be b2 1c 02 c0       	mov    esi,0xc0021cb2
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be ce 1c 02 c0       	mov    esi,0xc0021cce
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
