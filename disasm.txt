
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e7 f8 00 00       	call   c000f907 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 90 02 00       	call   c0029118 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ae 9d 02 c0       	mov    ebx,0xc0029dae
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 9d 02 c0    	cmp    ebx,0xc0029dbc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 e7 02 c0       	mov    eax,0xc002e718
c0000049:	3d 18 e7 02 c0       	cmp    eax,0xc002e718
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 e7 02 c0       	push   0xc002e718
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 e7 02 c0       	mov    eax,0xc002e718
c0000075:	2d 18 e7 02 c0       	sub    eax,0xc002e718
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 e7 02 c0       	push   0xc002e718
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 ed 02 c0 00 	cmp    BYTE PTR ds:0xc002ed48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 9d 02 c0       	mov    ebx,0xc0029dc4
c00000bb:	81 eb c0 9d 02 c0    	sub    ebx,0xc0029dc0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 9d 02 c0       	mov    esi,0xc0029dc0
c00000ca:	a1 4c ed 02 c0       	mov    eax,ds:0xc002ed4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c ed 02 c0       	mov    ds:0xc002ed4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c ed 02 c0       	mov    eax,ds:0xc002ed4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 e7 02 c0       	push   0xc002e718
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 ed 02 c0       	push   0xc002ed50
c000012c:	68 18 e7 02 c0       	push   0xc002e718
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 55 d9 01 00       	call   c001dcf8 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 50 25 01 00       	call   c001290b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 33 d9 01 00       	call   c001dcf8 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 db dd 01 00       	call   c001e1bf <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 39 e4 01 00       	call   c001e826 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 f1 02 c0 	lgdtd  ds:0xc002f190
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 61 42 01 00       	call   c0014843 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 68 ed 02 c0       	mov    ds:0xc002ed68,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 68 ed 02 c0    	mov    DWORD PTR ds:0xc002ed68,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 68 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed68
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 e0 9d 02 c0 02 	test   BYTE PTR [edx-0x3ffd6220],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 e0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6220],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 e0 9d 02 c0 08 	test   BYTE PTR [edx-0x3ffd6220],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 e0 9d 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6220],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 e0 9d 02 c0 01 	test   BYTE PTR [edx-0x3ffd6220],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 80 ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002ed80
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 80 ed 02 c0    	mov    DWORD PTR ds:0xc002ed80,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 84 ed 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd127c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 84 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd127c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 80 ed 02 c0    	mov    DWORD PTR ds:0xc002ed80,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ac ed 02 c0    	cmp    DWORD PTR ds:0xc002edac,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d bc ed 02 c0    	mov    ecx,DWORD PTR ds:0xc002edbc
c0000e38:	c7 42 0c b4 ed 02 c0 	mov    DWORD PTR [edx+0xc],0xc002edb4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 bc ed 02 c0    	mov    DWORD PTR ds:0xc002edbc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ac ed 02 c0    	mov    DWORD PTR ds:0xc002edac,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 80 ed 02 c0 02 	test   BYTE PTR ds:0xc002ed80,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 80 ed 02 c0    	mov    edi,DWORD PTR ds:0xc002ed80
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 84 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd127c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 84 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd127c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 b4 ed 02 c0 	lea    edx,[eax*8-0x3ffd124c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d c0 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edc0
c00011ba:	81 fb b4 ed 02 c0    	cmp    ebx,0xc002edb4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d b4 ed 02 c0       	cmp    eax,0xc002edb4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d b0 ed 02 c0    	cmp    DWORD PTR ds:0xc002edb0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 bc ed 02 c0       	mov    ds:0xc002edbc,eax
c00011f6:	a3 c0 ed 02 c0       	mov    ds:0xc002edc0,eax
c00011fb:	a3 b0 ed 02 c0       	mov    ds:0xc002edb0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 b4 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002edb4
c0001209:	c7 40 0c b4 ed 02 c0 	mov    DWORD PTR [eax+0xc],0xc002edb4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 c0 ed 02 c0       	mov    ds:0xc002edc0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 b4 ed 02 c0 	mov    DWORD PTR [eax+0x8],0xc002edb4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 78 ed 02 c0 	lea    ebp,[edx*4-0x3ffd1288]
c000125a:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 80 ed 02 c0 	lea    ecx,[edx*4-0x3ffd1280]
c0001275:	8b 14 95 80 ed 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1280]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd b4 f0 02 c0 	or     DWORD PTR [edi*4-0x3ffd0f4c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 b4 ed 02 c0 	lea    eax,[eax*8-0x3ffd124c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d bc ed 02 c0    	mov    DWORD PTR ds:0xc002edbc,ecx
c000132f:	89 0d c0 ed 02 c0    	mov    DWORD PTR ds:0xc002edc0,ecx
c0001335:	c7 41 08 b4 ed 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002edb4
c000133c:	c7 41 0c b4 ed 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002edb4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ac ed 02 c0 	lea    edx,[ecx*8-0x3ffd1254]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d b4 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0f4c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d b4 f0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0f4c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ac ed 02 c0 	lea    edx,[eax*4-0x3ffd1254]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d b4 f0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0f4c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d bc ed 02 c0    	mov    DWORD PTR ds:0xc002edbc,edi
c0001402:	89 3d c0 ed 02 c0    	mov    DWORD PTR ds:0xc002edc0,edi
c0001408:	c7 47 08 b4 ed 02 c0 	mov    DWORD PTR [edi+0x8],0xc002edb4
c000140f:	c7 47 0c b4 ed 02 c0 	mov    DWORD PTR [edi+0xc],0xc002edb4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d b0 ed 02 c0    	mov    DWORD PTR ds:0xc002edb0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ac ed 02 c0       	mov    eax,ds:0xc002edac
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ac ed 02 c0    	mov    DWORD PTR ds:0xc002edac,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 80 ed 02 c0       	mov    edx,0xc002ed80
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 80 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed80,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d d4 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f0d4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 d4 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0d4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d d4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0d4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ac ed 02 c0    	cmp    DWORD PTR ds:0xc002edac,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ac ed 02 c0    	mov    DWORD PTR ds:0xc002edac,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 80 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed80,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 dc f0 02 c0    	push   DWORD PTR ds:0xc002f0dc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 80 ed 02 c0 00 	cmp    DWORD PTR ds:0xc002ed80,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 dc f0 02 c0       	mov    eax,ds:0xc002f0dc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ac ed 02 c0 00 	cmp    DWORD PTR ds:0xc002edac,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ac ed 02 c0       	mov    eax,ds:0xc002edac
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 84 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd127c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 b4 ed 02 c0       	mov    eax,0xc002edb4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ac f0 02 c0       	cmp    eax,0xc002f0ac
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 e8 f0 02 c0       	mov    eax,ds:0xc002f0e8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 d0 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0d0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 e4 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0e4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 f4 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f0f4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 80 ed 02 c0       	mov    eax,0xc002ed80
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 e4 9e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd611c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 80 ed 02 c0       	mov    eax,ds:0xc002ed80
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 80 ed 02 c0       	mov    ds:0xc002ed80,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d c4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d c8 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d cc f0 02 c0    	mov    DWORD PTR ds:0xc002f0cc,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 d4 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f0d4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 60 28 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd7a0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 84 f7 01 00       	jmp    c0021376 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 60 28 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd7a0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 b5 f7 01 00       	jmp    c00213bd <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 60 28 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd7a0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 dd f7 01 00       	jmp    c0021404 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 6a 55 02 00       	call   c0027474 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 00 a0 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6000]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 00 a0 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6000]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 00 9f 02 c0       	mov    edx,0xc0029f00
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 20 a0 02 c0       	mov    edx,0xc002a020
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 44 d4 02 c0       	mov    edx,0xc002d444
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 20 f1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0ee0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 00 f1 02 c0    	mov    ax,ds:0xc002f100
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 00 f1 02 c0    	mov    ds:0xc002f100,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 67 43 02 00       	call   c0027474 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 32 a0 02 c0       	mov    eax,0xc002a032
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 80 9f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6080]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 3b a0 02 c0       	mov    eax,0xc002a03b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 00 a0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6000]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 32 2d 02 00       	call   c0027474 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 10 a0 02 c0       	mov    edx,0xc002a010
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 00 9f 02 c0       	mov    edx,0xc0029f00
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 10 9f 02 c0       	mov    edx,0xc0029f10
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 20 f1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ee0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 20 f1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0ee0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 f9 16 02 00       	call   c0027474 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 df 16 02 00       	call   c0027474 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 57 9f 02 c0       	mov    eax,0xc0029f57
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 50 9f 02 c0       	mov    eax,0xc0029f50
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 20 f1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ee0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 40 9f 02 c0       	mov    esi,0xc0029f40
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 22 fe 01 00       	call   c0027474 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 20 a0 02 c0       	mov    edx,0xc002a020
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 20 9f 02 c0       	mov    edx,0xc0029f20
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 30 9f 02 c0       	mov    edx,0xc0029f30
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 42 a0 02 c0       	mov    edx,0xc002a042
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 4e a0 02 c0       	mov    edx,0xc002a04e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 62 a0 02 c0       	mov    edx,0xc002a062
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 80 a3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a380
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 80 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a380
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 80 a1 02 c0       	mov    eax,0xc002a180
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 c0 a0 02 c0       	mov    eax,0xc002a0c0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 80 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f80]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 76 07 02 00       	call   c0028f47 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 39 07 02 00       	call   c0028f29 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 0d 07 02 00       	call   c0028f47 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 c0 fd 01 00       	call   c002864c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 42 08 02 00       	call   c00290e0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 87 06 02 00       	call   c0028f47 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 c9 05 02 00       	call   c0028f47 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 96 05 02 00       	call   c0028f29 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 83 04 02 00       	call   c0028f47 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 4b 04 02 00       	call   c0028f29 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 80 a4 02 c0       	mov    eax,0xc002a480
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 57 02 02 00       	call   c0028f47 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 1c 02 02 00       	call   c0028f29 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 e0 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5720]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 2c ff 01 00       	call   c0028cdb <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 aa f8 01 00       	call   c0028678 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 66 01 02 00       	call   c0028f4b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 54 02 02 00       	call   c002906f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 3e f8 01 00       	call   c0028678 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 e9 00 02 00       	call   c0028f45 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 ca 00 02 00       	call   c0028f49 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 60 02 02 00       	call   c0029100 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 0a fe 01 00       	call   c0028cdb <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 88 f7 01 00       	call   c0028678 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 44 00 02 00       	call   c0028f4b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 32 01 02 00       	call   c002906f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 1c f7 01 00       	call   c0028678 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 c7 ff 01 00       	call   c0028f45 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 a7 ff 01 00       	call   c0028f49 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 3c 01 02 00       	call   c0029100 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 e2 fe 01 00       	call   c0028f47 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 a0 fe 01 00       	call   c0028f29 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 88 fe 01 00       	call   c0028f47 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 fa fb 01 00       	call   c0028cdb <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 fc ee 01 00       	call   c0027ffb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 5f f5 01 00       	call   c0028678 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 b1 fb 01 00       	call   c0028cdb <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 b7 ee 01 00       	call   c0027ffb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 86 fb 01 00       	call   c0028cdb <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 d6 fd 01 00       	call   c0028f45 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 b3 f4 01 00       	call   c002864c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 35 ff 01 00       	call   c00290e0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 5c fd 01 00       	call   c0028f29 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 57 f4 01 00       	call   c002864c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 d5 fa 01 00       	call   c0028cdb <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 58 f4 01 00       	call   c0028678 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 aa fa 01 00       	call   c0028cdb <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 11 f7 01 00       	call   c002895c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 90 ed 01 00       	call   c0027ffb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 f0 e6 01 00       	call   c0027990 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 c7 fd 01 00       	call   c002906f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 b0 f3 01 00       	call   c0028678 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 97 fd 01 00       	call   c002906f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 09 ed 01 00       	call   c0027ffb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 42 fc 01 00       	call   c0028f4b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 2a f6 01 00       	call   c002895c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 b0 ec 01 00       	call   c0027ffb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 9e fd 01 00       	call   c0029100 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 70 f9 01 00       	call   c0028cdb <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 c7 f2 01 00       	call   c002864c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 a6 fb 01 00       	call   c0028f47 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 3f ec 01 00       	call   c0027ffb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 6b f2 01 00       	call   c002864c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 0d fd 01 00       	call   c0029100 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 be f8 01 00       	call   c0028cdb <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 3b f2 01 00       	call   c0028678 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 8e f8 01 00       	call   c0028cdb <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 94 eb 01 00       	call   c0027ffb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 64 f8 01 00       	call   c0028cdb <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 b6 fa 01 00       	call   c0028f47 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 8d f1 01 00       	call   c002864c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 0f fc 01 00       	call   c00290e0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 36 fa 01 00       	call   c0028f29 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 30 f1 01 00       	call   c002864c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 ae f7 01 00       	call   c0028cdb <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 31 f1 01 00       	call   c0028678 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 83 f7 01 00       	call   c0028cdb <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ea f3 01 00       	call   c002895c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 69 ea 01 00       	call   c0027ffb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 b9 e3 01 00       	call   c0027990 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 90 fa 01 00       	call   c002906f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 79 f0 01 00       	call   c0028678 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 60 fa 01 00       	call   c002906f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 d2 e9 01 00       	call   c0027ffb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 0b f9 01 00       	call   c0028f4b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 f2 f2 01 00       	call   c002895c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 71 e9 01 00       	call   c0027ffb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 5f fa 01 00       	call   c0029100 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 31 f6 01 00       	call   c0028cdb <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 88 ef 01 00       	call   c002864c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 67 f8 01 00       	call   c0028f47 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 00 e9 01 00       	call   c0027ffb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 2c ef 01 00       	call   c002864c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 a1 f5 01 00       	call   c0028cdb <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 a7 e8 01 00       	call   c0027ffb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 40 a9 02 c0       	mov    eax,0xc002a940
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 54 a9 02 c0       	mov    eax,0xc002a954
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 1c f4 01 00       	call   c0028cdb <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 9a ed 01 00       	call   c0028678 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 2c e0 01 00       	call   c0027990 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 03 f7 01 00       	call   c002906f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 ec ec 01 00       	call   c0028678 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 cf f6 01 00       	call   c002906f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 41 e6 01 00       	call   c0027ffb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 a1 f6 01 00       	call   c002906f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 90 ec 01 00       	call   c0028678 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 f9 e5 01 00       	call   c0027ffb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 1a df 01 00       	call   c0027990 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 f1 f5 01 00       	call   c002906f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 da eb 01 00       	call   c0028678 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 bd f5 01 00       	call   c002906f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 2f e5 01 00       	call   c0027ffb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 8f f5 01 00       	call   c002906f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 7e eb 01 00       	call   c0028678 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 e7 e4 01 00       	call   c0027ffb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 c5 e4 01 00       	call   c0027ffb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 a1 dd 01 00       	call   c0027990 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 78 f4 01 00       	call   c002906f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 61 ea 01 00       	call   c0028678 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 44 f4 01 00       	call   c002906f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 b6 e3 01 00       	call   c0027ffb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 16 f4 01 00       	call   c002906f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 ff e9 01 00       	call   c0028678 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 68 e3 01 00       	call   c0027ffb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 c8 f3 01 00       	call   c002906f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 b1 e9 01 00       	call   c0028678 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 1a e3 01 00       	call   c0027ffb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 2f dc 01 00       	call   c0027990 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 06 f3 01 00       	call   c002906f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 ef e8 01 00       	call   c0028678 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 d6 f2 01 00       	call   c002906f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 48 e2 01 00       	call   c0027ffb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 a8 f2 01 00       	call   c002906f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 91 e8 01 00       	call   c0028678 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 fa e1 01 00       	call   c0027ffb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 5a f2 01 00       	call   c002906f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 43 e8 01 00       	call   c0028678 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 ac e1 01 00       	call   c0027ffb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 80 e1 01 00       	call   c0027ffb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 dd e7 01 00       	call   c0028678 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 99 f0 01 00       	call   c0028f4b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 28 e1 01 00       	call   c0027ffb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 85 e7 01 00       	call   c0028678 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 41 f0 01 00       	call   c0028f4b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 bb d9 01 00       	call   c0027990 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 92 f0 01 00       	call   c002906f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 7b e6 01 00       	call   c0028678 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 5e f0 01 00       	call   c002906f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 d0 df 01 00       	call   c0027ffb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 30 f0 01 00       	call   c002906f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 19 e6 01 00       	call   c0028678 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 82 df 01 00       	call   c0027ffb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 e2 ef 01 00       	call   c002906f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 cb e5 01 00       	call   c0028678 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 34 df 01 00       	call   c0027ffb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 94 ef 01 00       	call   c002906f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 7d e5 01 00       	call   c0028678 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 e6 de 01 00       	call   c0027ffb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 46 ef 01 00       	call   c002906f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 2f e5 01 00       	call   c0028678 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 98 de 01 00       	call   c0027ffb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 9a d7 01 00       	call   c0027990 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 71 ee 01 00       	call   c002906f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 5a e4 01 00       	call   c0028678 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 41 ee 01 00       	call   c002906f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 b3 dd 01 00       	call   c0027ffb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 13 ee 01 00       	call   c002906f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 fc e3 01 00       	call   c0028678 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 65 dd 01 00       	call   c0027ffb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 c5 ed 01 00       	call   c002906f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 ae e3 01 00       	call   c0028678 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 17 dd 01 00       	call   c0027ffb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 77 ed 01 00       	call   c002906f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 60 e3 01 00       	call   c0028678 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 c9 dc 01 00       	call   c0027ffb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 29 ed 01 00       	call   c002906f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 12 e3 01 00       	call   c0028678 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 7b dc 01 00       	call   c0027ffb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 4f dc 01 00       	call   c0027ffb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 ac e2 01 00       	call   c0028678 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 68 eb 01 00       	call   c0028f4b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 f7 db 01 00       	call   c0027ffb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 54 e2 01 00       	call   c0028678 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 10 eb 01 00       	call   c0028f4b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 9e db 01 00       	call   c0027ffb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 fb e1 01 00       	call   c0028678 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 b7 ea 01 00       	call   c0028f4b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 45 db 01 00       	call   c0027ffb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 a2 e1 01 00       	call   c0028678 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 5e ea 01 00       	call   c0028f4b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 bc d3 01 00       	call   c0027990 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 93 ea 01 00       	call   c002906f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 7c e0 01 00       	call   c0028678 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 5f ea 01 00       	call   c002906f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 d1 d9 01 00       	call   c0027ffb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 31 ea 01 00       	call   c002906f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 1a e0 01 00       	call   c0028678 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 83 d9 01 00       	call   c0027ffb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 e3 e9 01 00       	call   c002906f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 cc df 01 00       	call   c0028678 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 35 d9 01 00       	call   c0027ffb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 95 e9 01 00       	call   c002906f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 7e df 01 00       	call   c0028678 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 e7 d8 01 00       	call   c0027ffb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 47 e9 01 00       	call   c002906f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 30 df 01 00       	call   c0028678 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 99 d8 01 00       	call   c0027ffb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 f9 e8 01 00       	call   c002906f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 e2 de 01 00       	call   c0028678 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 48 d8 01 00       	call   c0027ffb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 a8 e8 01 00       	call   c002906f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 91 de 01 00       	call   c0028678 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 fa d7 01 00       	call   c0027ffb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 f4 d0 01 00       	call   c0027990 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 cb e7 01 00       	call   c002906f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 b4 dd 01 00       	call   c0028678 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 94 e7 01 00       	call   c002906f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 06 d7 01 00       	call   c0027ffb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 66 e7 01 00       	call   c002906f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 4f dd 01 00       	call   c0028678 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 b8 d6 01 00       	call   c0027ffb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 18 e7 01 00       	call   c002906f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 01 dd 01 00       	call   c0028678 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 6a d6 01 00       	call   c0027ffb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 ca e6 01 00       	call   c002906f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 b3 dc 01 00       	call   c0028678 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 1c d6 01 00       	call   c0027ffb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 7c e6 01 00       	call   c002906f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 65 dc 01 00       	call   c0028678 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 ce d5 01 00       	call   c0027ffb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 2e e6 01 00       	call   c002906f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 17 dc 01 00       	call   c0028678 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 7d d5 01 00       	call   c0027ffb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 dd e5 01 00       	call   c002906f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 c6 db 01 00       	call   c0028678 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 35 d5 01 00       	call   c0027ffb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 0e d5 01 00       	call   c0027ffb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 6c db 01 00       	call   c0028678 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 28 e4 01 00       	call   c0028f4b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 b7 d4 01 00       	call   c0027ffb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 15 db 01 00       	call   c0028678 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 d1 e3 01 00       	call   c0028f4b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 5f d4 01 00       	call   c0027ffb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 bd da 01 00       	call   c0028678 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 79 e3 01 00       	call   c0028f4b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 07 d4 01 00       	call   c0027ffb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 65 da 01 00       	call   c0028678 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 21 e3 01 00       	call   c0028f4b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 af d3 01 00       	call   c0027ffb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 0d da 01 00       	call   c0028678 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 c9 e2 01 00       	call   c0028f4b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 5d d3 01 00       	call   c0027ffb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 bb d9 01 00       	call   c0028678 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 77 e2 01 00       	call   c0028f4b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 8b cb 01 00       	call   c0027990 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 62 e2 01 00       	call   c002906f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 4b d8 01 00       	call   c0028678 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 32 e2 01 00       	call   c002906f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 a4 d1 01 00       	call   c0027ffb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 84 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd567c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 d8 e1 01 00       	call   c002906f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 c1 d7 01 00       	call   c0028678 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 2c d1 01 00       	call   c0027ffb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 79 e1 01 00       	call   c002906f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 62 d7 01 00       	call   c0028678 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 cd d0 01 00       	call   c0027ffb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 1a e1 01 00       	call   c002906f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 03 d7 01 00       	call   c0028678 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 6e d0 01 00       	call   c0027ffb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 bb e0 01 00       	call   c002906f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 a4 d6 01 00       	call   c0028678 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 0f d0 01 00       	call   c0027ffb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 5c e0 01 00       	call   c002906f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 45 d6 01 00       	call   c0028678 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 b0 cf 01 00       	call   c0027ffb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 fd df 01 00       	call   c002906f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 e6 d5 01 00       	call   c0028678 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 51 cf 01 00       	call   c0027ffb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 9e df 01 00       	call   c002906f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 87 d5 01 00       	call   c0028678 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 f2 ce 01 00       	call   c0027ffb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 3f df 01 00       	call   c002906f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 28 d5 01 00       	call   c0028678 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 93 ce 01 00       	call   c0027ffb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 9d c7 01 00       	call   c0027990 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 74 de 01 00       	call   c002906f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 5d d4 01 00       	call   c0028678 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 44 de 01 00       	call   c002906f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 b6 cd 01 00       	call   c0027ffb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 a0 a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5660]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 e9 dd 01 00       	call   c002906f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 d2 d3 01 00       	call   c0028678 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 3d cd 01 00       	call   c0027ffb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 89 dd 01 00       	call   c002906f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 72 d3 01 00       	call   c0028678 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 dd cc 01 00       	call   c0027ffb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 29 dd 01 00       	call   c002906f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 12 d3 01 00       	call   c0028678 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 7d cc 01 00       	call   c0027ffb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 c9 dc 01 00       	call   c002906f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 b2 d2 01 00       	call   c0028678 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 1d cc 01 00       	call   c0027ffb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 69 dc 01 00       	call   c002906f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 52 d2 01 00       	call   c0028678 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 bd cb 01 00       	call   c0027ffb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 09 dc 01 00       	call   c002906f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 f2 d1 01 00       	call   c0028678 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 5d cb 01 00       	call   c0027ffb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 a9 db 01 00       	call   c002906f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 92 d1 01 00       	call   c0028678 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 fd ca 01 00       	call   c0027ffb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 49 db 01 00       	call   c002906f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 32 d1 01 00       	call   c0028678 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 9d ca 01 00       	call   c0027ffb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 bc a9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5644]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 42 ca 01 00       	call   c0027ffb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 9f d0 01 00       	call   c0028678 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 5b d9 01 00       	call   c0028f4b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 e5 c9 01 00       	call   c0027ffb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 42 d0 01 00       	call   c0028678 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 fe d8 01 00       	call   c0028f4b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 88 c9 01 00       	call   c0027ffb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 e5 cf 01 00       	call   c0028678 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 a1 d8 01 00       	call   c0028f4b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 2b c9 01 00       	call   c0027ffb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 88 cf 01 00       	call   c0028678 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 44 d8 01 00       	call   c0028f4b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 ce c8 01 00       	call   c0027ffb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 2b cf 01 00       	call   c0028678 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 e7 d7 01 00       	call   c0028f4b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 71 c8 01 00       	call   c0027ffb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 ce ce 01 00       	call   c0028678 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 8a d7 01 00       	call   c0028f4b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 14 c8 01 00       	call   c0027ffb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 71 ce 01 00       	call   c0028678 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 2d d7 01 00       	call   c0028f4b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 b7 c7 01 00       	call   c0027ffb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 14 ce 01 00       	call   c0028678 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 d0 d6 01 00       	call   c0028f4b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 cc cd 01 00       	call   c0028678 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 44 d8 01 00       	jmp    c0029100 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 ae d4 01 00       	call   c0028f47 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 6c d4 01 00       	call   c0028f29 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 03 d2 01 00       	call   c0028cdb <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 04 c5 01 00       	call   c0027ffb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 d3 d1 01 00       	call   c0028cdb <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 3a ce 01 00       	call   c002895c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 d9 d3 01 00       	call   c0028f29 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 dc d3 01 00       	call   c0028f47 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 af d3 01 00       	call   c0028f47 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 a8 cd 01 00       	call   c002895c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 32 d5 01 00       	call   c0029100 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 0d d5 01 00       	call   c0029100 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 df d0 01 00       	call   c0028cdb <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 36 ca 01 00       	call   c002864c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 15 d3 01 00       	call   c0028f47 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 ae c3 01 00       	call   c0027ffb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 d2 c9 01 00       	call   c002864c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 74 d4 01 00       	call   c0029100 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 ac cc 01 00       	call   c002895c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 29 c3 01 00       	call   c0027ffb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 55 cf 01 00       	call   c0028cdb <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 55 c2 01 00       	call   c0027ffb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 35 c2 01 00       	call   c0027ffb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 05 cf 01 00       	call   c0028cdb <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 55 d1 01 00       	call   c0028f45 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 34 c8 01 00       	call   c002864c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 b6 d2 01 00       	call   c00290e0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 dd d0 01 00       	call   c0028f29 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 db c7 01 00       	call   c002864c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 59 ce 01 00       	call   c0028cdb <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 dc c7 01 00       	call   c0028678 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 2e ce 01 00       	call   c0028cdb <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 95 ca 01 00       	call   c002895c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 14 c1 01 00       	call   c0027ffb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 de cd 01 00       	call   c0028cdb <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 2a d0 01 00       	call   c0028f47 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 1f c7 01 00       	call   c0028678 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 f1 c6 01 00       	call   c0028678 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 2a cd 01 00       	call   c0028cdb <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 8e c9 01 00       	call   c002895c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 56 c9 01 00       	call   c002895c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 d5 bf 01 00       	call   c0027ffb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 c2 d0 01 00       	call   c0029100 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 94 cc 01 00       	call   c0028cdb <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 eb c5 01 00       	call   c002864c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 ca ce 01 00       	call   c0028f47 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 62 bf 01 00       	call   c0027ffb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 86 c5 01 00       	call   c002864c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 28 d0 01 00       	call   c0029100 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 e9 cd 01 00       	call   c0028f47 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 a7 cd 01 00       	call   c0028f29 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 3e cb 01 00       	call   c0028cdb <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 3f be 01 00       	call   c0027ffb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 0e cb 01 00       	call   c0028cdb <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 75 c7 01 00       	call   c002895c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 14 cd 01 00       	call   c0028f29 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 17 cd 01 00       	call   c0028f47 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ea cc 01 00       	call   c0028f47 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 e3 c6 01 00       	call   c002895c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 6d ce 01 00       	call   c0029100 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 48 ce 01 00       	call   c0029100 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 1a ca 01 00       	call   c0028cdb <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 71 c3 01 00       	call   c002864c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 50 cc 01 00       	call   c0028f47 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 e9 bc 01 00       	call   c0027ffb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 0d c3 01 00       	call   c002864c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 af cd 01 00       	call   c0029100 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 e7 c5 01 00       	call   c002895c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 64 bc 01 00       	call   c0027ffb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 8f c8 01 00       	call   c0028cdb <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 8f bb 01 00       	call   c0027ffb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 6f bb 01 00       	call   c0027ffb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 3f c8 01 00       	call   c0028cdb <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 8f ca 01 00       	call   c0028f45 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 6d c1 01 00       	call   c002864c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 ef cb 01 00       	call   c00290e0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 16 ca 01 00       	call   c0028f29 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 13 c1 01 00       	call   c002864c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 91 c7 01 00       	call   c0028cdb <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 14 c1 01 00       	call   c0028678 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 66 c7 01 00       	call   c0028cdb <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 cd c3 01 00       	call   c002895c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 4c ba 01 00       	call   c0027ffb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 16 c7 01 00       	call   c0028cdb <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 62 c9 01 00       	call   c0028f47 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 57 c0 01 00       	call   c0028678 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 29 c0 01 00       	call   c0028678 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 60 c6 01 00       	call   c0028cdb <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 c4 c2 01 00       	call   c002895c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 91 c2 01 00       	call   c002895c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 10 b9 01 00       	call   c0027ffb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 fd c9 01 00       	call   c0029100 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 cf c5 01 00       	call   c0028cdb <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 26 bf 01 00       	call   c002864c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 05 c8 01 00       	call   c0028f47 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 9d b8 01 00       	call   c0027ffb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 c1 be 01 00       	call   c002864c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 63 c9 01 00       	call   c0029100 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 24 c7 01 00       	call   c0028f47 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 e2 c6 01 00       	call   c0028f29 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 79 c4 01 00       	call   c0028cdb <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 7a b7 01 00       	call   c0027ffb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 49 c4 01 00       	call   c0028cdb <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 b0 c0 01 00       	call   c002895c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 4f c6 01 00       	call   c0028f29 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 52 c6 01 00       	call   c0028f47 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 25 c6 01 00       	call   c0028f47 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 1e c0 01 00       	call   c002895c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 a8 c7 01 00       	call   c0029100 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 83 c7 01 00       	call   c0029100 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 55 c3 01 00       	call   c0028cdb <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 ac bc 01 00       	call   c002864c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 8b c5 01 00       	call   c0028f47 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 24 b6 01 00       	call   c0027ffb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 48 bc 01 00       	call   c002864c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ea c6 01 00       	call   c0029100 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 22 bf 01 00       	call   c002895c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 9f b5 01 00       	call   c0027ffb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 ca c1 01 00       	call   c0028cdb <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 ca b4 01 00       	call   c0027ffb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 aa b4 01 00       	call   c0027ffb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 7a c1 01 00       	call   c0028cdb <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 ca c3 01 00       	call   c0028f45 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 a8 ba 01 00       	call   c002864c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 2a c5 01 00       	call   c00290e0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 51 c3 01 00       	call   c0028f29 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 4e ba 01 00       	call   c002864c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 cc c0 01 00       	call   c0028cdb <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 4f ba 01 00       	call   c0028678 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 a1 c0 01 00       	call   c0028cdb <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 08 bd 01 00       	call   c002895c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 87 b3 01 00       	call   c0027ffb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 51 c0 01 00       	call   c0028cdb <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 9d c2 01 00       	call   c0028f47 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 92 b9 01 00       	call   c0028678 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 64 b9 01 00       	call   c0028678 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 9b bf 01 00       	call   c0028cdb <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 ff bb 01 00       	call   c002895c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 cc bb 01 00       	call   c002895c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 4b b2 01 00       	call   c0027ffb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 38 c3 01 00       	call   c0029100 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 0a bf 01 00       	call   c0028cdb <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 61 b8 01 00       	call   c002864c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 40 c1 01 00       	call   c0028f47 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 d8 b1 01 00       	call   c0027ffb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 fc b7 01 00       	call   c002864c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 9e c2 01 00       	call   c0029100 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 5f c0 01 00       	call   c0028f47 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 1d c0 01 00       	call   c0028f29 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 b4 bd 01 00       	call   c0028cdb <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 b5 b0 01 00       	call   c0027ffb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 84 bd 01 00       	call   c0028cdb <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 eb b9 01 00       	call   c002895c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 8a bf 01 00       	call   c0028f29 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 8d bf 01 00       	call   c0028f47 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 60 bf 01 00       	call   c0028f47 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 59 b9 01 00       	call   c002895c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 e3 c0 01 00       	call   c0029100 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 be c0 01 00       	call   c0029100 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 90 bc 01 00       	call   c0028cdb <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 e7 b5 01 00       	call   c002864c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 c6 be 01 00       	call   c0028f47 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 5f af 01 00       	call   c0027ffb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 83 b5 01 00       	call   c002864c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 25 c0 01 00       	call   c0029100 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 5d b8 01 00       	call   c002895c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 da ae 01 00       	call   c0027ffb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 05 bb 01 00       	call   c0028cdb <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 05 ae 01 00       	call   c0027ffb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 e5 ad 01 00       	call   c0027ffb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 b5 ba 01 00       	call   c0028cdb <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 05 bd 01 00       	call   c0028f45 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 e3 b3 01 00       	call   c002864c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 65 be 01 00       	call   c00290e0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 8c bc 01 00       	call   c0028f29 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 89 b3 01 00       	call   c002864c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 07 ba 01 00       	call   c0028cdb <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 8a b3 01 00       	call   c0028678 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 dc b9 01 00       	call   c0028cdb <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 43 b6 01 00       	call   c002895c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 c2 ac 01 00       	call   c0027ffb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 8c b9 01 00       	call   c0028cdb <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 d8 bb 01 00       	call   c0028f47 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 cd b2 01 00       	call   c0028678 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 9f b2 01 00       	call   c0028678 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 d6 b8 01 00       	call   c0028cdb <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 3a b5 01 00       	call   c002895c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 07 b5 01 00       	call   c002895c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 86 ab 01 00       	call   c0027ffb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 73 bc 01 00       	call   c0029100 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 45 b8 01 00       	call   c0028cdb <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 9c b1 01 00       	call   c002864c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 7b ba 01 00       	call   c0028f47 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 13 ab 01 00       	call   c0027ffb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 37 b1 01 00       	call   c002864c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 d9 bb 01 00       	call   c0029100 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 97 b9 01 00       	call   c0028f47 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 55 b9 01 00       	call   c0028f29 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 ec b6 01 00       	call   c0028cdb <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 ed a9 01 00       	call   c0027ffb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 bc b6 01 00       	call   c0028cdb <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 23 b3 01 00       	call   c002895c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 c2 b8 01 00       	call   c0028f29 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 c5 b8 01 00       	call   c0028f47 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 98 b8 01 00       	call   c0028f47 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 91 b2 01 00       	call   c002895c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 1b ba 01 00       	call   c0029100 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 f2 b9 01 00       	call   c0029100 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 c4 b5 01 00       	call   c0028cdb <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 1b af 01 00       	call   c002864c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 fa b7 01 00       	call   c0028f47 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 93 a8 01 00       	call   c0027ffb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 bb ae 01 00       	call   c002864c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 5d b9 01 00       	call   c0029100 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 96 b1 01 00       	call   c002895c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 13 a8 01 00       	call   c0027ffb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 3f b4 01 00       	call   c0028cdb <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 3f a7 01 00       	call   c0027ffb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 1f a7 01 00       	call   c0027ffb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 ef b3 01 00       	call   c0028cdb <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 23 b6 01 00       	call   c0028f29 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 1a ad 01 00       	call   c002864c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 9c b7 01 00       	call   c00290e0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 c3 b5 01 00       	call   c0028f29 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 bd ac 01 00       	call   c002864c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 3b b3 01 00       	call   c0028cdb <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 be ac 01 00       	call   c0028678 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 10 b3 01 00       	call   c0028cdb <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 77 af 01 00       	call   c002895c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 f6 a5 01 00       	call   c0027ffb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 c0 b2 01 00       	call   c0028cdb <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 0c b5 01 00       	call   c0028f47 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 01 ac 01 00       	call   c0028678 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 d3 ab 01 00       	call   c0028678 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 17 b2 01 00       	call   c0028cdb <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 7e ae 01 00       	call   c002895c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 67 ab 01 00       	call   c0028678 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 23 b4 01 00       	call   c0028f4b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 16 ae 01 00       	call   c002895c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 95 a4 01 00       	call   c0027ffb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 82 b5 01 00       	call   c0029100 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 54 b1 01 00       	call   c0028cdb <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 ab aa 01 00       	call   c002864c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 8a b3 01 00       	call   c0028f47 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 22 a4 01 00       	call   c0027ffb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 4a aa 01 00       	call   c002864c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 ec b4 01 00       	call   c0029100 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 e4 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd561c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 d8 a9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5628]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 9f b1 01 00       	call   c0028f47 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 5d b1 01 00       	call   c0028f29 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 49 b1 01 00       	call   c0028f47 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 bb ae 01 00       	call   c0028cdb <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 39 a8 01 00       	call   c0028678 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 8b ae 01 00       	call   c0028cdb <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 91 a1 01 00       	call   c0027ffb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 60 ae 01 00       	call   c0028cdb <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 b0 b0 01 00       	call   c0028f45 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 91 a7 01 00       	call   c002864c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 13 b2 01 00       	call   c00290e0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 3a b0 01 00       	call   c0028f29 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 39 a7 01 00       	call   c002864c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 b7 ad 01 00       	call   c0028cdb <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 3a a7 01 00       	call   c0028678 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 8c ad 01 00       	call   c0028cdb <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 f3 a9 01 00       	call   c002895c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 72 a0 01 00       	call   c0027ffb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 9a a9 01 00       	call   c002895c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 20 a0 01 00       	call   c0027ffb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 0e b1 01 00       	call   c0029100 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 e0 ac 01 00       	call   c0028cdb <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 37 a6 01 00       	call   c002864c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 16 af 01 00       	call   c0028f47 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 af 9f 01 00       	call   c0027ffb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 db a5 01 00       	call   c002864c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 7d b0 01 00       	call   c0029100 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 2a ac 01 00       	call   c0028cdb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 a7 a5 01 00       	call   c0028678 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 f8 ab 01 00       	call   c0028cdb <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 fe 9e 01 00       	call   c0027ffb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 ce ab 01 00       	call   c0028cdb <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 22 ae 01 00       	call   c0028f49 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 fb a4 01 00       	call   c002864c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 7d af 01 00       	call   c00290e0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 a4 ad 01 00       	call   c0028f29 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 a2 a4 01 00       	call   c002864c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 20 ab 01 00       	call   c0028cdb <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 a3 a4 01 00       	call   c0028678 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 f5 aa 01 00       	call   c0028cdb <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 5c a7 01 00       	call   c002895c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 db 9d 01 00       	call   c0027ffb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 f7 a6 01 00       	call   c002895c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 76 9d 01 00       	call   c0027ffb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 64 ae 01 00       	call   c0029100 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 36 aa 01 00       	call   c0028cdb <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 8d a3 01 00       	call   c002864c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 6c ac 01 00       	call   c0028f47 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 05 9d 01 00       	call   c0027ffb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 31 a3 01 00       	call   c002864c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 a2 a9 01 00       	call   c0028cdb <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 a8 9c 01 00       	call   c0027ffb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 fe aa 02 c0       	mov    eax,0xc002aafe
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 0f ab 02 c0       	mov    eax,0xc002ab0f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c000e4e3:	ff 05 c4 26 03 c0    	inc    DWORD PTR ds:0xc00326c4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d c0 26 03 c0 00 	cmp    DWORD PTR ds:0xc00326c0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c000e50d:	e8 3a ff 00 00       	call   c001e44c <schedule()>
c000e512:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c000e517:	48                   	dec    eax
c000e518:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 46 ab 02 c0       	push   0xc002ab46
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 88 f1 02 c0       	mov    eax,0xc002f188
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 4f ab 02 c0       	push   0xc002ab4f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 74 74 02 c0       	mov    eax,0xc0027474
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 59 ab 02 c0       	push   0xc002ab59
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 a8 71 02 c0       	mov    eax,0xc00271a8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 62 ab 02 c0       	push   0xc002ab62
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 74 75 02 c0       	mov    eax,0xc0027574
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 6c ab 02 c0       	push   0xc002ab6c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 f4 72 02 c0       	mov    eax,0xc00272f4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 75 ab 02 c0       	push   0xc002ab75
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 8c f1 02 c0       	mov    eax,0xc002f18c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 82 ab 02 c0       	push   0xc002ab82
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 8d f1 02 c0       	mov    eax,0xc002f18d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 83 5a 00 00       	call   c00140f0 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c000e6b2:	68 8f ab 02 c0       	push   0xc002ab8f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 51 f9 00 00       	call   c001e010 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 34 fb 00 00       	call   c001e208 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 86 ec 01 c0       	push   0xc001ec86
c000e6dd:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c000e6e3:	e8 20 fb 00 00       	call   c001e208 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 a8 26 03 c0       	mov    ds:0xc00326a8,eax
c000e6f0:	c6 05 8d f1 02 c0 01 	mov    BYTE PTR ds:0xc002f18d,0x1
c000e6f7:	e8 c1 09 01 00       	call   c001f0bd <Vm::initialise8086()>
c000e6fc:	e8 b7 47 00 00       	call   c0012eb8 <Fs::initVFS()>
c000e701:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 80 e1 00 00       	call   c001c89d <Sys::loadSyscalls()>
c000e71d:	e8 3e be 00 00       	call   c001a560 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 9c ab 02 c0       	push   0xc002ab9c
c000e72c:	68 a5 ab 02 c0       	push   0xc002aba5
c000e731:	e8 19 cd 00 00       	call   c001b44f <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 6a 52 00 00       	call   c00139a8 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 61 59 00 00       	call   c00140b0 <Device::loadDriversForAll()>
c000e74f:	e8 58 b9 00 00       	call   c001a0ac <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 ad ab 02 c0       	push   0xc002abad
c000e763:	e8 05 f3 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 27 f5 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 cd fe 00 00       	call   c001e64b <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 c9 ab 02 c0       	push   0xc002abc9
c000e793:	50                   	push   eax
c000e794:	e8 d1 59 00 00       	call   c001416a <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 a1 f1 02 c0 04 	test   BYTE PTR ds:0xc002f1a1,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 09 88 01 00       	call   c0027136 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 54 a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 2d a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 0b a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 e9 a3 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 a0 f1 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f1a0,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 f7 a2 00 00       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 d2 a2 00 00       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 73 86 01 00       	call   c00270f0 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 30 86 01 00       	call   c00270d0 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 ee a2 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 d9 ab 02 c0       	push   0xc002abd9
c000eaf9:	e8 2f 40 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 ec ab 02 c0       	push   0xc002abec
c000eb1c:	e8 0c 40 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 fd ab 02 c0       	push   0xc002abfd
c000eb3f:	e8 e9 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 0e ac 02 c0       	push   0xc002ac0e
c000eb62:	e8 c6 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 1f ac 02 c0       	push   0xc002ac1f
c000eb85:	e8 a3 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 30 ac 02 c0       	push   0xc002ac30
c000eba8:	e8 80 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 41 ac 02 c0       	push   0xc002ac41
c000ebcb:	e8 5d 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 52 ac 02 c0       	push   0xc002ac52
c000ebee:	e8 3a 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 63 ac 02 c0       	push   0xc002ac63
c000ec11:	e8 17 3f 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 74 ac 02 c0       	push   0xc002ac74
c000ec34:	e8 f4 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 85 ac 02 c0       	push   0xc002ac85
c000ec57:	e8 d1 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 96 ac 02 c0       	push   0xc002ac96
c000ec7a:	e8 ae 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 a7 ac 02 c0       	push   0xc002aca7
c000ec9d:	e8 8b 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 b8 ac 02 c0       	push   0xc002acb8
c000ecc0:	e8 68 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 c9 ac 02 c0       	push   0xc002acc9
c000ece3:	e8 45 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 da ac 02 c0       	push   0xc002acda
c000ed06:	e8 22 3e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 eb ac 02 c0       	push   0xc002aceb
c000ed29:	e8 ff 3d 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 fc ac 02 c0       	push   0xc002acfc
c000ed4c:	e8 dc 3d 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 0d ad 02 c0       	push   0xc002ad0d
c000ed6b:	e8 bd 3d 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 c8 c7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c7c8
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 ac 3d 00 00       	jmp    c0012b2d <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 1e ad 02 c0       	push   0xc002ad1e
c000ee54:	e8 40 b8 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 24 ad 02 c0       	push   0xc002ad24
c000ee8c:	e8 08 b8 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 a0 f1 02 c0 04 	test   BYTE PTR ds:0xc002f1a0,0x4
c000eee4:	68 68 12 00 00       	push   0x1268
c000eee9:	0f 94 05 c4 e0 02 c0 	sete   BYTE PTR ds:0xc002e0c4
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 c3 90 00 00       	call   c0017fc2 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 58 50 00 00       	call   c0013f66 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 36 9f 00 00       	call   c0018e74 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 19 50 00 00       	call   c0013f66 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 a5 55 00 00       	call   c001450e <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 e9 4f 00 00       	call   c0013f66 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 8b f3 00 00       	call   c001e32a <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 2a ad 02 c0       	push   0xc002ad2a
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 40 3b 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 3b ad 02 c0       	push   0xc002ad3b
c000f00a:	e8 8a b6 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 48 ad 02 c0       	push   0xc002ad48
c000f01f:	e8 75 b6 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 52 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad52
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 5e b6 00 00       	jmp    c001a699 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 8c ad 02 c0       	push   0xc002ad8c
c000f0d0:	e8 58 3a 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 92 f1 02 c0       	mov    ds:0xc002f192,eax
c000f111:	66 89 15 90 f1 02 c0 	mov    WORD PTR ds:0xc002f190,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c000f228:	48                   	dec    eax
c000f229:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 01 9f 01 00       	call   c0029180 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 f8 9e 01 00       	call   c0029180 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 98 f1 02 c0 ff 07 	mov    WORD PTR ds:0xc002f198,0x7ff
c000f375:	a3 9a f1 02 c0       	mov    ds:0xc002f19a,eax
c000f37a:	0f 01 1d 98 f1 02 c0 	lidtd  ds:0xc002f198
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c000f66c:	e8 ef 29 00 00       	call   c0012060 <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 c9 19 00 00       	call   c0011058 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 fa 19 00 00       	call   c0011098 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 88 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f188
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d b0 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e0b0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 b0 e0 02 c0       	mov    eax,ds:0xc002e0b0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 a8 ad 02 c0       	push   0xc002ada8
c000f745:	e8 e3 33 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 b0 e0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e0b0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c000f771:	8b 2d b0 e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e0b0
c000f777:	e8 72 04 00 00       	call   c000fbee <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 d5 27 00 00       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d b0 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0b0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 d8 ad 02 c0       	push   0xc002add8
c000f7fd:	e8 97 ae 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 dd ad 02 c0       	push   0xc002addd
c000f813:	e8 81 ae 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c000f833:	48                   	dec    eax
c000f834:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c000f854:	e8 07 28 00 00       	call   c0012060 <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c000f86a:	e8 9b 24 00 00       	call   c0011d0a <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <setupTextMode()>:
c000f8e6:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f8eb:	83 e0 30             	and    eax,0x30
c000f8ee:	66 83 f8 30          	cmp    ax,0x30
c000f8f2:	74 01                	je     c000f8f5 <setupTextMode()+0xf>
c000f8f4:	c3                   	ret    
c000f8f5:	81 2d c0 e0 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e0c0,0x8000
c000f8ff:	c6 05 20 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f220,0x1
c000f906:	c3                   	ret    

c000f907 <kernel_main>:
c000f907:	57                   	push   edi
c000f908:	bf f9 03 00 00       	mov    edi,0x3f9
c000f90d:	56                   	push   esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	53                   	push   ebx
c000f911:	31 f6                	xor    esi,esi
c000f913:	83 ec 2c             	sub    esp,0x2c
c000f916:	89 f0                	mov    eax,esi
c000f918:	ee                   	out    dx,al
c000f919:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f91e:	b0 80                	mov    al,0x80
c000f920:	89 da                	mov    edx,ebx
c000f922:	ee                   	out    dx,al
c000f923:	b1 03                	mov    cl,0x3
c000f925:	ba f8 03 00 00       	mov    edx,0x3f8
c000f92a:	88 c8                	mov    al,cl
c000f92c:	ee                   	out    dx,al
c000f92d:	89 f0                	mov    eax,esi
c000f92f:	89 fa                	mov    edx,edi
c000f931:	ee                   	out    dx,al
c000f932:	88 c8                	mov    al,cl
c000f934:	89 da                	mov    edx,ebx
c000f936:	ee                   	out    dx,al
c000f937:	b0 c7                	mov    al,0xc7
c000f939:	ba fa 03 00 00       	mov    edx,0x3fa
c000f93e:	ee                   	out    dx,al
c000f93f:	b0 0b                	mov    al,0xb
c000f941:	ba fc 03 00 00       	mov    edx,0x3fc
c000f946:	ee                   	out    dx,al
c000f947:	68 e4 ad 02 c0       	push   0xc002ade4
c000f94c:	e8 dc 31 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000f951:	e8 4a 09 00 00       	call   c00102a0 <installVgaTextImplementation()>
c000f956:	e8 8b ff ff ff       	call   c000f8e6 <setupTextMode()>
c000f95b:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f960:	05 ff 0f 00 00       	add    eax,0xfff
c000f965:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f96d:	e8 f5 03 00 00       	call   c000fd67 <Phys::physicalMemorySetup(unsigned int)>
c000f972:	e8 6f 1f 00 00       	call   c00118e6 <Virt::virtualMemorySetup()>
c000f977:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f986:	75 0e                	jne    c000f996 <kernel_main+0x8f>
c000f988:	89 d8                	mov    eax,ebx
c000f98a:	25 48 03 00 00       	and    eax,0x348
c000f98f:	3d 00 03 00 00       	cmp    eax,0x300
c000f994:	74 10                	je     c000f9a6 <kernel_main+0x9f>
c000f996:	83 ec 0c             	sub    esp,0xc
c000f999:	68 c9 c7 02 c0       	push   0xc002c7c9
c000f99e:	e8 f6 ac 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000f9a3:	83 c4 10             	add    esp,0x10
c000f9a6:	83 ec 0c             	sub    esp,0xc
c000f9a9:	89 1d a0 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a0,ebx
c000f9af:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9b3:	53                   	push   ebx
c000f9b4:	e8 79 21 00 00       	call   c0011b32 <VAS::VAS()>
c000f9b9:	89 1d 10 f3 02 c0    	mov    DWORD PTR ds:0xc002f310,ebx
c000f9bf:	e8 5c 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9c4:	c7 04 24 fb ad 02 c0 	mov    DWORD PTR [esp],0xc002adfb
c000f9cb:	e8 5d 31 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000f9d0:	e8 90 1f 00 00       	call   c0011965 <Virt::swappingSetup()>
c000f9d5:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9dc:	e8 ab fe ff ff       	call   c000f88c <malloc>
c000f9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9e4:	89 c6                	mov    esi,eax
c000f9e6:	e8 99 ed ff ff       	call   c000e784 <Computer::Computer()>
c000f9eb:	58                   	pop    eax
c000f9ec:	89 35 88 f1 02 c0    	mov    DWORD PTR ds:0xc002f188,esi
c000f9f2:	5a                   	pop    edx
c000f9f3:	56                   	push   esi
c000f9f4:	68 18 ae 02 c0       	push   0xc002ae18
c000f9f9:	e8 2f 31 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000f9fe:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c000fa03:	8b 10                	mov    edx,DWORD PTR [eax]
c000fa05:	6a 00                	push   0x0
c000fa07:	6a 00                	push   0x0
c000fa09:	6a 00                	push   0x0
c000fa0b:	50                   	push   eax
c000fa0c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fa0f:	83 c4 14             	add    esp,0x14
c000fa12:	53                   	push   ebx
c000fa13:	e8 ca 23 00 00       	call   c0011de2 <VAS::~VAS()>
c000fa18:	c7 04 24 2b ae 02 c0 	mov    DWORD PTR [esp],0xc002ae2b
c000fa1f:	e8 75 ac 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000fa24:	83 c4 30             	add    esp,0x30
c000fa27:	5b                   	pop    ebx
c000fa28:	5e                   	pop    esi
c000fa29:	5f                   	pop    edi
c000fa2a:	c3                   	ret    

c000fa2b <Phys::allocateDMA(unsigned long)>:
c000fa2b:	55                   	push   ebp
c000fa2c:	31 d2                	xor    edx,edx
c000fa2e:	57                   	push   edi
c000fa2f:	31 ed                	xor    ebp,ebp
c000fa31:	56                   	push   esi
c000fa32:	31 c9                	xor    ecx,ecx
c000fa34:	53                   	push   ebx
c000fa35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa39:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa3f:	31 c0                	xor    eax,eax
c000fa41:	c1 ee 0c             	shr    esi,0xc
c000fa44:	eb 17                	jmp    c000fa5d <Phys::allocateDMA(unsigned long)+0x32>
c000fa46:	85 c9                	test   ecx,ecx
c000fa48:	75 04                	jne    c000fa4e <Phys::allocateDMA(unsigned long)+0x23>
c000fa4a:	89 d5                	mov    ebp,edx
c000fa4c:	89 d0                	mov    eax,edx
c000fa4e:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa51:	39 de                	cmp    esi,ebx
c000fa53:	74 20                	je     c000fa75 <Phys::allocateDMA(unsigned long)+0x4a>
c000fa55:	42                   	inc    edx
c000fa56:	89 d9                	mov    ecx,ebx
c000fa58:	83 fa 2f             	cmp    edx,0x2f
c000fa5b:	7f 11                	jg     c000fa6e <Phys::allocateDMA(unsigned long)+0x43>
c000fa5d:	80 ba e0 f1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0e20],0x0
c000fa64:	74 e0                	je     c000fa46 <Phys::allocateDMA(unsigned long)+0x1b>
c000fa66:	31 c9                	xor    ecx,ecx
c000fa68:	42                   	inc    edx
c000fa69:	83 fa 2f             	cmp    edx,0x2f
c000fa6c:	7e ef                	jle    c000fa5d <Phys::allocateDMA(unsigned long)+0x32>
c000fa6e:	5b                   	pop    ebx
c000fa6f:	31 c0                	xor    eax,eax
c000fa71:	5e                   	pop    esi
c000fa72:	5f                   	pop    edi
c000fa73:	5d                   	pop    ebp
c000fa74:	c3                   	ret    
c000fa75:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa78:	89 d7                	mov    edi,edx
c000fa7a:	4f                   	dec    edi
c000fa7b:	79 03                	jns    c000fa80 <Phys::allocateDMA(unsigned long)+0x55>
c000fa7d:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa80:	c1 ff 04             	sar    edi,0x4
c000fa83:	89 c2                	mov    edx,eax
c000fa85:	c1 fa 04             	sar    edx,0x4
c000fa88:	39 fa                	cmp    edx,edi
c000fa8a:	75 2f                	jne    c000fabb <Phys::allocateDMA(unsigned long)+0x90>
c000fa8c:	85 db                	test   ebx,ebx
c000fa8e:	74 1a                	je     c000faaa <Phys::allocateDMA(unsigned long)+0x7f>
c000fa90:	be e0 f1 02 c0       	mov    esi,0xc002f1e0
c000fa95:	8d 90 e0 f1 02 c0    	lea    edx,[eax-0x3ffd0e20]
c000fa9b:	f7 d6                	not    esi
c000fa9d:	29 c6                	sub    esi,eax
c000fa9f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000faa2:	42                   	inc    edx
c000faa3:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000faa6:	39 d9                	cmp    ecx,ebx
c000faa8:	7f f5                	jg     c000fa9f <Phys::allocateDMA(unsigned long)+0x74>
c000faaa:	85 ff                	test   edi,edi
c000faac:	74 13                	je     c000fac1 <Phys::allocateDMA(unsigned long)+0x96>
c000faae:	5b                   	pop    ebx
c000faaf:	05 50 20 0c 00       	add    eax,0xc2050
c000fab4:	5e                   	pop    esi
c000fab5:	c1 e0 0c             	shl    eax,0xc
c000fab8:	5f                   	pop    edi
c000fab9:	5d                   	pop    ebp
c000faba:	c3                   	ret    
c000fabb:	89 ea                	mov    edx,ebp
c000fabd:	31 c9                	xor    ecx,ecx
c000fabf:	eb a7                	jmp    c000fa68 <Phys::allocateDMA(unsigned long)+0x3d>
c000fac1:	5b                   	pop    ebx
c000fac2:	c1 e0 0c             	shl    eax,0xc
c000fac5:	5e                   	pop    esi
c000fac6:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000facb:	5f                   	pop    edi
c000facc:	5d                   	pop    ebp
c000facd:	c3                   	ret    

c000face <Phys::freeDMA(unsigned long, unsigned long)>:
c000face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fad2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fad6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fadc:	c1 e9 0c             	shr    ecx,0xc
c000fadf:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fae4:	76 25                	jbe    c000fb0b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fae6:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000faeb:	c1 e8 0c             	shr    eax,0xc
c000faee:	8d 50 10             	lea    edx,[eax+0x10]
c000faf1:	85 c9                	test   ecx,ecx
c000faf3:	74 15                	je     c000fb0a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000faf5:	8d 82 e0 f1 02 c0    	lea    eax,[edx-0x3ffd0e20]
c000fafb:	8d 94 11 e0 f1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0e20]
c000fb02:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fb05:	40                   	inc    eax
c000fb06:	39 d0                	cmp    eax,edx
c000fb08:	75 f8                	jne    c000fb02 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fb0a:	c3                   	ret    
c000fb0b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb11:	c1 ea 0c             	shr    edx,0xc
c000fb14:	eb db                	jmp    c000faf1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fb16 <Phys::setPageState(unsigned long, bool)>:
c000fb16:	56                   	push   esi
c000fb17:	ba 01 00 00 00       	mov    edx,0x1
c000fb1c:	53                   	push   ebx
c000fb1d:	8b 35 b4 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0b4
c000fb23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb2b:	89 c8                	mov    eax,ecx
c000fb2d:	83 e1 07             	and    ecx,0x7
c000fb30:	c1 e8 03             	shr    eax,0x3
c000fb33:	d3 e3                	shl    ebx,cl
c000fb35:	01 c6                	add    esi,eax
c000fb37:	d3 e2                	shl    edx,cl
c000fb39:	f7 d2                	not    edx
c000fb3b:	20 16                	and    BYTE PTR [esi],dl
c000fb3d:	03 05 b4 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e0b4
c000fb43:	08 18                	or     BYTE PTR [eax],bl
c000fb45:	5b                   	pop    ebx
c000fb46:	5e                   	pop    esi
c000fb47:	c3                   	ret    

c000fb48 <Phys::getPageState(unsigned long)>:
c000fb48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb4c:	8b 15 b4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0b4
c000fb52:	89 c8                	mov    eax,ecx
c000fb54:	83 e1 07             	and    ecx,0x7
c000fb57:	c1 e8 03             	shr    eax,0x3
c000fb5a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb5e:	d3 f8                	sar    eax,cl
c000fb60:	83 e0 01             	and    eax,0x1
c000fb63:	c3                   	ret    

c000fb64 <Phys::freePage(unsigned long)>:
c000fb64:	53                   	push   ebx
c000fb65:	83 ec 08             	sub    esp,0x8
c000fb68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb6c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fb72:	76 57                	jbe    c000fbcb <Phys::freePage(unsigned long)+0x67>
c000fb74:	c1 eb 0c             	shr    ebx,0xc
c000fb77:	53                   	push   ebx
c000fb78:	e8 cb ff ff ff       	call   c000fb48 <Phys::getPageState(unsigned long)>
c000fb7d:	5a                   	pop    edx
c000fb7e:	84 c0                	test   al,al
c000fb80:	74 5b                	je     c000fbdd <Phys::freePage(unsigned long)+0x79>
c000fb82:	a1 d0 f1 02 c0       	mov    eax,ds:0xc002f1d0
c000fb87:	48                   	dec    eax
c000fb88:	a3 d0 f1 02 c0       	mov    ds:0xc002f1d0,eax
c000fb8d:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb90:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb93:	c1 e0 02             	shl    eax,0x2
c000fb96:	99                   	cdq    
c000fb97:	f7 3d d4 f1 02 c0    	idiv   DWORD PTR ds:0xc002f1d4
c000fb9d:	39 05 cc f1 02 c0    	cmp    DWORD PTR ds:0xc002f1cc,eax
c000fba3:	75 13                	jne    c000fbb8 <Phys::freePage(unsigned long)+0x54>
c000fba5:	83 ec 08             	sub    esp,0x8
c000fba8:	6a 00                	push   0x0
c000fbaa:	53                   	push   ebx
c000fbab:	e8 66 ff ff ff       	call   c000fb16 <Phys::setPageState(unsigned long, bool)>
c000fbb0:	83 c4 10             	add    esp,0x10
c000fbb3:	83 c4 08             	add    esp,0x8
c000fbb6:	5b                   	pop    ebx
c000fbb7:	c3                   	ret    
c000fbb8:	83 ec 0c             	sub    esp,0xc
c000fbbb:	a3 cc f1 02 c0       	mov    ds:0xc002f1cc,eax
c000fbc0:	50                   	push   eax
c000fbc1:	e8 08 0a 00 00       	call   c00105ce <VgaText::updateRAMUsageDisplay(int)>
c000fbc6:	83 c4 10             	add    esp,0x10
c000fbc9:	eb da                	jmp    c000fba5 <Phys::freePage(unsigned long)+0x41>
c000fbcb:	68 00 10 00 00       	push   0x1000
c000fbd0:	53                   	push   ebx
c000fbd1:	e8 f8 fe ff ff       	call   c000face <Phys::freeDMA(unsigned long, unsigned long)>
c000fbd6:	59                   	pop    ecx
c000fbd7:	5b                   	pop    ebx
c000fbd8:	83 c4 08             	add    esp,0x8
c000fbdb:	5b                   	pop    ebx
c000fbdc:	c3                   	ret    
c000fbdd:	c7 44 24 10 46 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae46
c000fbe5:	83 c4 08             	add    esp,0x8
c000fbe8:	5b                   	pop    ebx
c000fbe9:	e9 ab aa 00 00       	jmp    c001a699 <Krnl::panic(char const*)>

c000fbee <Phys::allocatePage()>:
c000fbee:	56                   	push   esi
c000fbef:	53                   	push   ebx
c000fbf0:	51                   	push   ecx
c000fbf1:	8b 35 c4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1c4
c000fbf7:	89 f3                	mov    ebx,esi
c000fbf9:	eb 0a                	jmp    c000fc05 <Phys::allocatePage()+0x17>
c000fbfb:	89 1d c4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c4,ebx
c000fc01:	39 de                	cmp    esi,ebx
c000fc03:	74 24                	je     c000fc29 <Phys::allocatePage()+0x3b>
c000fc05:	53                   	push   ebx
c000fc06:	e8 3d ff ff ff       	call   c000fb48 <Phys::getPageState(unsigned long)>
c000fc0b:	5a                   	pop    edx
c000fc0c:	84 c0                	test   al,al
c000fc0e:	74 77                	je     c000fc87 <Phys::allocatePage()+0x99>
c000fc10:	43                   	inc    ebx
c000fc11:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc17:	75 e2                	jne    c000fbfb <Phys::allocatePage()+0xd>
c000fc19:	31 db                	xor    ebx,ebx
c000fc1b:	c7 05 c4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c4,0x0
c000fc25:	39 de                	cmp    esi,ebx
c000fc27:	75 dc                	jne    c000fc05 <Phys::allocatePage()+0x17>
c000fc29:	83 ec 0c             	sub    esp,0xc
c000fc2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fc31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc34:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc3a:	e8 1b 2c 00 00       	call   c001285a <VAS::scanForEviction()>
c000fc3f:	83 c4 10             	add    esp,0x10
c000fc42:	85 c0                	test   eax,eax
c000fc44:	75 76                	jne    c000fcbc <Phys::allocatePage()+0xce>
c000fc46:	83 ec 0c             	sub    esp,0xc
c000fc49:	68 5c ae 02 c0       	push   0xc002ae5c
c000fc4e:	e8 da 2e 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000fc53:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fc5a:	e8 cc fd ff ff       	call   c000fa2b <Phys::allocateDMA(unsigned long)>
c000fc5f:	83 c4 10             	add    esp,0x10
c000fc62:	85 c0                	test   eax,eax
c000fc64:	75 56                	jne    c000fcbc <Phys::allocatePage()+0xce>
c000fc66:	83 ec 0c             	sub    esp,0xc
c000fc69:	68 6d ae 02 c0       	push   0xc002ae6d
c000fc6e:	e8 26 aa 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	8b 1d c4 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1c4
c000fc7c:	53                   	push   ebx
c000fc7d:	e8 c6 fe ff ff       	call   c000fb48 <Phys::getPageState(unsigned long)>
c000fc82:	5a                   	pop    edx
c000fc83:	84 c0                	test   al,al
c000fc85:	75 89                	jne    c000fc10 <Phys::allocatePage()+0x22>
c000fc87:	6a 01                	push   0x1
c000fc89:	53                   	push   ebx
c000fc8a:	e8 87 fe ff ff       	call   c000fb16 <Phys::setPageState(unsigned long, bool)>
c000fc8f:	a1 d0 f1 02 c0       	mov    eax,ds:0xc002f1d0
c000fc94:	59                   	pop    ecx
c000fc95:	40                   	inc    eax
c000fc96:	5b                   	pop    ebx
c000fc97:	a3 d0 f1 02 c0       	mov    ds:0xc002f1d0,eax
c000fc9c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc9f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fca2:	c1 e0 02             	shl    eax,0x2
c000fca5:	99                   	cdq    
c000fca6:	f7 3d d4 f1 02 c0    	idiv   DWORD PTR ds:0xc002f1d4
c000fcac:	39 05 cc f1 02 c0    	cmp    DWORD PTR ds:0xc002f1cc,eax
c000fcb2:	75 0c                	jne    c000fcc0 <Phys::allocatePage()+0xd2>
c000fcb4:	a1 c4 f1 02 c0       	mov    eax,ds:0xc002f1c4
c000fcb9:	c1 e0 0c             	shl    eax,0xc
c000fcbc:	5a                   	pop    edx
c000fcbd:	5b                   	pop    ebx
c000fcbe:	5e                   	pop    esi
c000fcbf:	c3                   	ret    
c000fcc0:	83 ec 0c             	sub    esp,0xc
c000fcc3:	a3 cc f1 02 c0       	mov    ds:0xc002f1cc,eax
c000fcc8:	50                   	push   eax
c000fcc9:	e8 00 09 00 00       	call   c00105ce <VgaText::updateRAMUsageDisplay(int)>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	eb e1                	jmp    c000fcb4 <Phys::allocatePage()+0xc6>

c000fcd3 <Phys::allocateContiguousPages(int)>:
c000fcd3:	57                   	push   edi
c000fcd4:	56                   	push   esi
c000fcd5:	53                   	push   ebx
c000fcd6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcda:	fa                   	cli    
c000fcdb:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c000fce1:	31 db                	xor    ebx,ebx
c000fce3:	85 db                	test   ebx,ebx
c000fce5:	75 11                	jne    c000fcf8 <Phys::allocateContiguousPages(int)+0x25>
c000fce7:	e8 02 ff ff ff       	call   c000fbee <Phys::allocatePage()>
c000fcec:	83 fe 01             	cmp    esi,0x1
c000fcef:	89 c7                	mov    edi,eax
c000fcf1:	74 21                	je     c000fd14 <Phys::allocateContiguousPages(int)+0x41>
c000fcf3:	bb 01 00 00 00       	mov    ebx,0x1
c000fcf8:	e8 f1 fe ff ff       	call   c000fbee <Phys::allocatePage()>
c000fcfd:	89 da                	mov    edx,ebx
c000fcff:	c1 e2 0c             	shl    edx,0xc
c000fd02:	01 fa                	add    edx,edi
c000fd04:	39 c2                	cmp    edx,eax
c000fd06:	74 20                	je     c000fd28 <Phys::allocateContiguousPages(int)+0x55>
c000fd08:	bb 01 00 00 00       	mov    ebx,0x1
c000fd0d:	89 c7                	mov    edi,eax
c000fd0f:	83 fe 01             	cmp    esi,0x1
c000fd12:	75 e4                	jne    c000fcf8 <Phys::allocateContiguousPages(int)+0x25>
c000fd14:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c000fd19:	48                   	dec    eax
c000fd1a:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c000fd1f:	75 01                	jne    c000fd22 <Phys::allocateContiguousPages(int)+0x4f>
c000fd21:	fb                   	sti    
c000fd22:	89 f8                	mov    eax,edi
c000fd24:	5b                   	pop    ebx
c000fd25:	5e                   	pop    esi
c000fd26:	5f                   	pop    edi
c000fd27:	c3                   	ret    
c000fd28:	43                   	inc    ebx
c000fd29:	39 f3                	cmp    ebx,esi
c000fd2b:	75 b6                	jne    c000fce3 <Phys::allocateContiguousPages(int)+0x10>
c000fd2d:	eb e5                	jmp    c000fd14 <Phys::allocateContiguousPages(int)+0x41>

c000fd2f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fd2f:	56                   	push   esi
c000fd30:	53                   	push   ebx
c000fd31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd35:	39 1d c8 f1 02 c0    	cmp    DWORD PTR ds:0xc002f1c8,ebx
c000fd3b:	73 06                	jae    c000fd43 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fd3d:	89 1d c8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1c8,ebx
c000fd43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd47:	c1 eb 0c             	shr    ebx,0xc
c000fd4a:	c1 e8 0c             	shr    eax,0xc
c000fd4d:	39 d8                	cmp    eax,ebx
c000fd4f:	73 13                	jae    c000fd64 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fd51:	6a 00                	push   0x0
c000fd53:	8d 70 01             	lea    esi,[eax+0x1]
c000fd56:	50                   	push   eax
c000fd57:	e8 ba fd ff ff       	call   c000fb16 <Phys::setPageState(unsigned long, bool)>
c000fd5c:	5a                   	pop    edx
c000fd5d:	89 f0                	mov    eax,esi
c000fd5f:	59                   	pop    ecx
c000fd60:	39 f3                	cmp    ebx,esi
c000fd62:	75 ed                	jne    c000fd51 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fd64:	5b                   	pop    ebx
c000fd65:	5e                   	pop    esi
c000fd66:	c3                   	ret    

c000fd67 <Phys::physicalMemorySetup(unsigned int)>:
c000fd67:	55                   	push   ebp
c000fd68:	57                   	push   edi
c000fd69:	56                   	push   esi
c000fd6a:	53                   	push   ebx
c000fd6b:	31 db                	xor    ebx,ebx
c000fd6d:	83 ec 40             	sub    esp,0x40
c000fd70:	6a 30                	push   0x30
c000fd72:	6a 00                	push   0x0
c000fd74:	68 e0 f1 02 c0       	push   0xc002f1e0
c000fd79:	e8 d2 09 ff ff       	call   c0000750 <memset>
c000fd7e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd82:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd87:	05 00 10 00 00       	add    eax,0x1000
c000fd8c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	83 ec 08             	sub    esp,0x8
c000fd96:	6a 01                	push   0x1
c000fd98:	53                   	push   ebx
c000fd99:	43                   	inc    ebx
c000fd9a:	e8 77 fd ff ff       	call   c000fb16 <Phys::setPageState(unsigned long, bool)>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fda8:	75 e9                	jne    c000fd93 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fdaa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fdb1:	66 85 c0             	test   ax,ax
c000fdb4:	0f 84 8e 01 00 00    	je     c000ff48 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fdba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fdbe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fdc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdca:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fdcf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdd3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fddb:	eb 15                	jmp    c000fdf2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fddd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fde1:	83 c3 18             	add    ebx,0x18
c000fde4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fdec:	0f 84 66 01 00 00    	je     c000ff58 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fdf2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fdf5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fdf8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fdfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fdff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe03:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe05:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe08:	01 f0                	add    eax,esi
c000fe0a:	55                   	push   ebp
c000fe0b:	11 fa                	adc    edx,edi
c000fe0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe11:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fe19:	56                   	push   esi
c000fe1a:	68 a8 ae 02 c0       	push   0xc002aea8
c000fe1f:	e8 09 2d 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000fe24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe28:	83 c4 10             	add    esp,0x10
c000fe2b:	09 f8                	or     eax,edi
c000fe2d:	0f 85 25 01 00 00    	jne    c000ff58 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe33:	4d                   	dec    ebp
c000fe34:	75 a7                	jne    c000fddd <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe36:	ba 00 00 08 00       	mov    edx,0x80000
c000fe3b:	89 c1                	mov    ecx,eax
c000fe3d:	39 f2                	cmp    edx,esi
c000fe3f:	19 f9                	sbb    ecx,edi
c000fe41:	0f 82 a7 00 00 00    	jb     c000feee <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe47:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fe4b:	89 c1                	mov    ecx,eax
c000fe4d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fe51:	0f 83 97 00 00 00    	jae    c000feee <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fe57:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fe5c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe60:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe64:	39 fa                	cmp    edx,edi
c000fe66:	19 e8                	sbb    eax,ebp
c000fe68:	0f 82 14 01 00 00    	jb     c000ff82 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fe6e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe72:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe76:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fe7c:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe81:	83 d5 ff             	adc    ebp,0xffffffff
c000fe84:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe88:	31 c0                	xor    eax,eax
c000fe8a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe8e:	39 fa                	cmp    edx,edi
c000fe90:	89 c1                	mov    ecx,eax
c000fe92:	19 e9                	sbb    ecx,ebp
c000fe94:	0f 83 43 ff ff ff    	jae    c000fddd <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe9a:	be 00 00 08 00       	mov    esi,0x80000
c000fe9f:	50                   	push   eax
c000fea0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fea4:	57                   	push   edi
c000fea5:	56                   	push   esi
c000fea6:	68 cc ae 02 c0       	push   0xc002aecc
c000feab:	e8 7d 2c 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000feb0:	5a                   	pop    edx
c000feb1:	59                   	pop    ecx
c000feb2:	57                   	push   edi
c000feb3:	56                   	push   esi
c000feb4:	e8 76 fe ff ff       	call   c000fd2f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000feb9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000febd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fec1:	83 c4 0c             	add    esp,0xc
c000fec4:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fec8:	03 05 d4 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f1d4
c000fece:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fed5:	a3 d4 f1 02 c0       	mov    ds:0xc002f1d4,eax
c000feda:	52                   	push   edx
c000fedb:	50                   	push   eax
c000fedc:	68 89 ae 02 c0       	push   0xc002ae89
c000fee1:	e8 47 2c 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c000fee6:	83 c4 10             	add    esp,0x10
c000fee9:	e9 ef fe ff ff       	jmp    c000fddd <Phys::physicalMemorySetup(unsigned int)+0x76>
c000feee:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fef2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fef6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fefa:	39 ea                	cmp    edx,ebp
c000fefc:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff00:	0f 82 d7 fe ff ff    	jb     c000fddd <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff06:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff0b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff0f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff13:	0f 83 c4 fe ff ff    	jae    c000fddd <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff19:	39 ee                	cmp    esi,ebp
c000ff1b:	89 f8                	mov    eax,edi
c000ff1d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ff21:	0f 83 78 ff ff ff    	jae    c000fe9f <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff2f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ff33:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ff37:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ff3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff43:	e9 57 ff ff ff       	jmp    c000fe9f <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ff48:	83 ec 0c             	sub    esp,0xc
c000ff4b:	68 7b ae 02 c0       	push   0xc002ae7b
c000ff50:	e8 44 a7 00 00       	call   c001a699 <Krnl::panic(char const*)>
c000ff55:	83 c4 10             	add    esp,0x10
c000ff58:	bb 40 01 00 00       	mov    ebx,0x140
c000ff5d:	83 ec 08             	sub    esp,0x8
c000ff60:	6a 00                	push   0x0
c000ff62:	53                   	push   ebx
c000ff63:	43                   	inc    ebx
c000ff64:	e8 ad fb ff ff       	call   c000fb16 <Phys::setPageState(unsigned long, bool)>
c000ff69:	ff 05 d4 f1 02 c0    	inc    DWORD PTR ds:0xc002f1d4
c000ff6f:	83 c4 10             	add    esp,0x10
c000ff72:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ff78:	75 e3                	jne    c000ff5d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000ff7a:	83 c4 3c             	add    esp,0x3c
c000ff7d:	5b                   	pop    ebx
c000ff7e:	5e                   	pop    esi
c000ff7f:	5f                   	pop    edi
c000ff80:	5d                   	pop    ebp
c000ff81:	c3                   	ret    
c000ff82:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff92:	e9 d7 fe ff ff       	jmp    c000fe6e <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ff97:	90                   	nop

c000ff98 <Pipe::isAtty()>:
c000ff98:	31 c0                	xor    eax,eax
c000ff9a:	c3                   	ret    
c000ff9b:	90                   	nop

c000ff9c <Pipe::~Pipe()>:
c000ff9c:	83 ec 0c             	sub    esp,0xc
c000ff9f:	ba 38 af 02 c0       	mov    edx,0xc002af38
c000ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa8:	89 10                	mov    DWORD PTR [eax],edx
c000ffaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffae:	83 ec 0c             	sub    esp,0xc
c000ffb1:	50                   	push   eax
c000ffb2:	e8 0f 15 00 00       	call   c00114c6 <UnixFile::~UnixFile()>
c000ffb7:	83 c4 10             	add    esp,0x10
c000ffba:	90                   	nop
c000ffbb:	83 c4 0c             	add    esp,0xc
c000ffbe:	c3                   	ret    
c000ffbf:	90                   	nop

c000ffc0 <Pipe::~Pipe()>:
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	83 ec 0c             	sub    esp,0xc
c000ffc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffca:	e8 cd ff ff ff       	call   c000ff9c <Pipe::~Pipe()>
c000ffcf:	83 c4 10             	add    esp,0x10
c000ffd2:	83 ec 08             	sub    esp,0x8
c000ffd5:	6a 20                	push   0x20
c000ffd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffdb:	e8 6d 2a 00 00       	call   c0012a4d <operator delete(void*, unsigned long)>
c000ffe0:	83 c4 10             	add    esp,0x10
c000ffe3:	83 c4 0c             	add    esp,0xc
c000ffe6:	c3                   	ret    
c000ffe7:	90                   	nop

c000ffe8 <Pipe::read(unsigned long long, void*, int*)>:
c000ffe8:	55                   	push   ebp
c000ffe9:	57                   	push   edi
c000ffea:	56                   	push   esi
c000ffeb:	53                   	push   ebx
c000ffec:	83 ec 1c             	sub    esp,0x1c
c000ffef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fff3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fff7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fffb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fffe:	89 c8                	mov    eax,ecx
c0010000:	99                   	cdq    
c0010001:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010005:	74 24                	je     c001002b <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010007:	39 f9                	cmp    ecx,edi
c0010009:	89 d1                	mov    ecx,edx
c001000b:	19 f1                	sbb    ecx,esi
c001000d:	73 1c                	jae    c001002b <Pipe::read(unsigned long long, void*, int*)+0x43>
c001000f:	fa                   	cli    
c0010010:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c0010016:	e8 31 e4 00 00       	call   c001e44c <schedule()>
c001001b:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0010020:	48                   	dec    eax
c0010021:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0010026:	75 d3                	jne    c000fffb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010028:	fb                   	sti    
c0010029:	eb d0                	jmp    c000fffb <Pipe::read(unsigned long long, void*, int*)+0x13>
c001002b:	39 f8                	cmp    eax,edi
c001002d:	89 d1                	mov    ecx,edx
c001002f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010032:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010036:	19 f1                	sbb    ecx,esi
c0010038:	73 07                	jae    c0010041 <Pipe::read(unsigned long long, void*, int*)+0x59>
c001003a:	89 04 24             	mov    DWORD PTR [esp],eax
c001003d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010041:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010044:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010047:	29 f7                	sub    edi,esi
c0010049:	89 f8                	mov    eax,edi
c001004b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001004f:	99                   	cdq    
c0010050:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010057:	19 d0                	sbb    eax,edx
c0010059:	73 07                	jae    c0010062 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001005b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001005e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010062:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010065:	89 ea                	mov    edx,ebp
c0010067:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c001006b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010070:	74 0d                	je     c001007f <Pipe::read(unsigned long long, void*, int*)+0x97>
c0010072:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010075:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010079:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001007d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001007f:	85 d2                	test   edx,edx
c0010081:	74 11                	je     c0010094 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0010083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010087:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001008a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001008e:	89 d1                	mov    ecx,edx
c0010090:	89 c7                	mov    edi,eax
c0010092:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010094:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010097:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001009a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001009d:	99                   	cdq    
c001009e:	89 f7                	mov    edi,esi
c00100a0:	03 04 24             	add    eax,DWORD PTR [esp]
c00100a3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00100a7:	c1 ff 1f             	sar    edi,0x1f
c00100aa:	57                   	push   edi
c00100ab:	56                   	push   esi
c00100ac:	52                   	push   edx
c00100ad:	50                   	push   eax
c00100ae:	e8 c1 74 01 00       	call   c0027574 <__umoddi3>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00100b9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100be:	75 10                	jne    c00100d0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	68 f5 ae 02 c0       	push   0xc002aef5
c00100c8:	e8 cc a5 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00100cd:	83 c4 10             	add    esp,0x10
c00100d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100d4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100d7:	89 10                	mov    DWORD PTR [eax],edx
c00100d9:	83 c4 1c             	add    esp,0x1c
c00100dc:	31 c0                	xor    eax,eax
c00100de:	5b                   	pop    ebx
c00100df:	5e                   	pop    esi
c00100e0:	5f                   	pop    edi
c00100e1:	5d                   	pop    ebp
c00100e2:	c3                   	ret    
c00100e3:	90                   	nop

c00100e4 <Pipe::write(unsigned long long, void*, int*)>:
c00100e4:	55                   	push   ebp
c00100e5:	57                   	push   edi
c00100e6:	56                   	push   esi
c00100e7:	53                   	push   ebx
c00100e8:	83 ec 1c             	sub    esp,0x1c
c00100eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00100f3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00100f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00100fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00100fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010101:	89 d8                	mov    eax,ebx
c0010103:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010106:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001010a:	89 d6                	mov    esi,edx
c001010c:	89 d7                	mov    edi,edx
c001010e:	c1 ff 1f             	sar    edi,0x1f
c0010111:	03 34 24             	add    esi,DWORD PTR [esp]
c0010114:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010118:	c1 f8 1f             	sar    eax,0x1f
c001011b:	39 f3                	cmp    ebx,esi
c001011d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010121:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010125:	19 f8                	sbb    eax,edi
c0010127:	b8 01 00 00 00       	mov    eax,0x1
c001012c:	72 6e                	jb     c001019c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001012e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010131:	01 d0                	add    eax,edx
c0010133:	99                   	cdq    
c0010134:	f7 fb                	idiv   ebx
c0010136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001013a:	29 d3                	sub    ebx,edx
c001013c:	89 d7                	mov    edi,edx
c001013e:	89 de                	mov    esi,ebx
c0010140:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010143:	c1 fb 1f             	sar    ebx,0x1f
c0010146:	39 f2                	cmp    edx,esi
c0010148:	19 d8                	sbb    eax,ebx
c001014a:	b8 00 00 00 00       	mov    eax,0x0
c001014f:	72 04                	jb     c0010155 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010151:	89 d0                	mov    eax,edx
c0010153:	29 f0                	sub    eax,esi
c0010155:	89 d3                	mov    ebx,edx
c0010157:	29 c3                	sub    ebx,eax
c0010159:	74 0b                	je     c0010166 <Pipe::write(unsigned long long, void*, int*)+0x82>
c001015b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001015e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010162:	89 d9                	mov    ecx,ebx
c0010164:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010166:	85 c0                	test   eax,eax
c0010168:	74 0d                	je     c0010177 <Pipe::write(unsigned long long, void*, int*)+0x93>
c001016a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001016e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010171:	89 de                	mov    esi,ebx
c0010173:	89 c1                	mov    ecx,eax
c0010175:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010177:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001017a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001017f:	75 10                	jne    c0010191 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010181:	83 ec 0c             	sub    esp,0xc
c0010184:	68 11 af 02 c0       	push   0xc002af11
c0010189:	e8 0b a5 00 00       	call   c001a699 <Krnl::panic(char const*)>
c001018e:	83 c4 10             	add    esp,0x10
c0010191:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010195:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010198:	89 08                	mov    DWORD PTR [eax],ecx
c001019a:	31 c0                	xor    eax,eax
c001019c:	83 c4 1c             	add    esp,0x1c
c001019f:	5b                   	pop    ebx
c00101a0:	5e                   	pop    esi
c00101a1:	5f                   	pop    edi
c00101a2:	5d                   	pop    ebp
c00101a3:	c3                   	ret    

c00101a4 <Pipe::Pipe(int)>:
c00101a4:	83 ec 0c             	sub    esp,0xc
c00101a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ab:	83 ec 08             	sub    esp,0x8
c00101ae:	6a 00                	push   0x0
c00101b0:	50                   	push   eax
c00101b1:	e8 2e 11 00 00       	call   c00112e4 <UnixFile::UnixFile(int)>
c00101b6:	83 c4 10             	add    esp,0x10
c00101b9:	ba 38 af 02 c0       	mov    edx,0xc002af38
c00101be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c2:	89 10                	mov    DWORD PTR [eax],edx
c00101c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00101cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00101cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101d3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00101da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101de:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00101e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101e9:	83 ec 0c             	sub    esp,0xc
c00101ec:	50                   	push   eax
c00101ed:	e8 9a f6 ff ff       	call   c000f88c <malloc>
c00101f2:	83 c4 10             	add    esp,0x10
c00101f5:	89 c2                	mov    edx,eax
c00101f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00101fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010202:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010206:	90                   	nop
c0010207:	83 c4 0c             	add    esp,0xc
c001020a:	c3                   	ret    
c001020b:	90                   	nop

c001020c <VgaText::isAtty()>:
c001020c:	b0 01                	mov    al,0x1
c001020e:	c3                   	ret    
c001020f:	90                   	nop

c0010210 <VgaText::~VgaText()>:
c0010210:	83 ec 0c             	sub    esp,0xc
c0010213:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c0010218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021c:	89 10                	mov    DWORD PTR [eax],edx
c001021e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010222:	83 ec 0c             	sub    esp,0xc
c0010225:	50                   	push   eax
c0010226:	e8 9b 12 00 00       	call   c00114c6 <UnixFile::~UnixFile()>
c001022b:	83 c4 10             	add    esp,0x10
c001022e:	90                   	nop
c001022f:	83 c4 0c             	add    esp,0xc
c0010232:	c3                   	ret    
c0010233:	90                   	nop

c0010234 <VgaText::~VgaText()>:
c0010234:	83 ec 0c             	sub    esp,0xc
c0010237:	83 ec 0c             	sub    esp,0xc
c001023a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001023e:	e8 cd ff ff ff       	call   c0010210 <VgaText::~VgaText()>
c0010243:	83 c4 10             	add    esp,0x10
c0010246:	83 ec 08             	sub    esp,0x8
c0010249:	68 c4 02 00 00       	push   0x2c4
c001024e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010252:	e8 f6 27 00 00       	call   c0012a4d <operator delete(void*, unsigned long)>
c0010257:	83 c4 10             	add    esp,0x10
c001025a:	83 c4 0c             	add    esp,0xc
c001025d:	c3                   	ret    

c001025e <VgaText::read(unsigned long long, void*, int*)>:
c001025e:	83 ec 10             	sub    esp,0x10
c0010261:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010265:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001026d:	e8 70 5d 00 00       	call   c0015fe2 <readKeyboard(VgaText*, char*, unsigned long)>
c0010272:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010276:	89 02                	mov    DWORD PTR [edx],eax
c0010278:	31 c0                	xor    eax,eax
c001027a:	83 c4 1c             	add    esp,0x1c
c001027d:	c3                   	ret    

c001027e <setTerminalScrollLock(bool)>:
c001027e:	c3                   	ret    

c001027f <addToTerminalCycle(VgaText*)>:
c001027f:	8b 15 60 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f260
c0010285:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010289:	85 d2                	test   edx,edx
c001028b:	75 09                	jne    c0010296 <addToTerminalCycle(VgaText*)+0x17>
c001028d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010290:	a3 60 f2 02 c0       	mov    ds:0xc002f260,eax
c0010295:	c3                   	ret    
c0010296:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010299:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001029c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001029f:	c3                   	ret    

c00102a0 <installVgaTextImplementation()>:
c00102a0:	83 ec 10             	sub    esp,0x10
c00102a3:	6a 20                	push   0x20
c00102a5:	6a 00                	push   0x0
c00102a7:	68 40 f2 02 c0       	push   0xc002f240
c00102ac:	e8 9f 04 ff ff       	call   c0000750 <memset>
c00102b1:	83 c4 1c             	add    esp,0x1c
c00102b4:	c3                   	ret    

c00102b5 <scrollTerminalScrollLock(int)>:
c00102b5:	c3                   	ret    

c00102b6 <VgaText::load()>:
c00102b6:	53                   	push   ebx
c00102b7:	31 c0                	xor    eax,eax
c00102b9:	83 ec 58             	sub    esp,0x58
c00102bc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00102c0:	89 e2                	mov    edx,esp
c00102c2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00102c6:	40                   	inc    eax
c00102c7:	83 f8 50             	cmp    eax,0x50
c00102ca:	75 f6                	jne    c00102c2 <VgaText::load()+0xc>
c00102cc:	31 c0                	xor    eax,eax
c00102ce:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00102d5:	84 c9                	test   cl,cl
c00102d7:	74 06                	je     c00102df <VgaText::load()+0x29>
c00102d9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00102dc:	40                   	inc    eax
c00102dd:	eb ef                	jmp    c00102ce <VgaText::load()+0x18>
c00102df:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00102e2:	85 c0                	test   eax,eax
c00102e4:	74 09                	je     c00102ef <VgaText::load()+0x39>
c00102e6:	51                   	push   ecx
c00102e7:	51                   	push   ecx
c00102e8:	52                   	push   edx
c00102e9:	53                   	push   ebx
c00102ea:	ff d0                	call   eax
c00102ec:	83 c4 10             	add    esp,0x10
c00102ef:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00102f2:	85 c0                	test   eax,eax
c00102f4:	74 09                	je     c00102ff <VgaText::load()+0x49>
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	53                   	push   ebx
c00102fa:	ff d0                	call   eax
c00102fc:	83 c4 10             	add    esp,0x10
c00102ff:	83 c4 58             	add    esp,0x58
c0010302:	5b                   	pop    ebx
c0010303:	c3                   	ret    

c0010304 <VgaText::updateCursor()>:
c0010304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010308:	39 05 64 f2 02 c0    	cmp    DWORD PTR ds:0xc002f264,eax
c001030e:	75 09                	jne    c0010319 <VgaText::updateCursor()+0x15>
c0010310:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010313:	85 c0                	test   eax,eax
c0010315:	74 02                	je     c0010319 <VgaText::updateCursor()+0x15>
c0010317:	ff e0                	jmp    eax
c0010319:	c3                   	ret    

c001031a <VgaText::showCursor(bool)>:
c001031a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010322:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010325:	c3                   	ret    

c0010326 <VgaText::disableBlink(bool)>:
c0010326:	56                   	push   esi
c0010327:	53                   	push   ebx
c0010328:	51                   	push   ecx
c0010329:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001032d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010331:	39 1d 64 f2 02 c0    	cmp    DWORD PTR ds:0xc002f264,ebx
c0010337:	75 15                	jne    c001034e <VgaText::disableBlink(bool)+0x28>
c0010339:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c001033c:	85 c0                	test   eax,eax
c001033e:	74 0e                	je     c001034e <VgaText::disableBlink(bool)+0x28>
c0010340:	89 f1                	mov    ecx,esi
c0010342:	52                   	push   edx
c0010343:	52                   	push   edx
c0010344:	0f b6 d1             	movzx  edx,cl
c0010347:	52                   	push   edx
c0010348:	53                   	push   ebx
c0010349:	ff d0                	call   eax
c001034b:	83 c4 10             	add    esp,0x10
c001034e:	89 f0                	mov    eax,esi
c0010350:	83 f0 01             	xor    eax,0x1
c0010353:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010356:	58                   	pop    eax
c0010357:	5b                   	pop    ebx
c0010358:	5e                   	pop    esi
c0010359:	c3                   	ret    

c001035a <VgaText::doANSI_SGR(int)>:
c001035a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001035e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010362:	85 d2                	test   edx,edx
c0010364:	75 0b                	jne    c0010371 <VgaText::doANSI_SGR(int)+0x17>
c0010366:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010369:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001036c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001036f:	eb 59                	jmp    c00103ca <VgaText::doANSI_SGR(int)+0x70>
c0010371:	83 fa 07             	cmp    edx,0x7
c0010374:	75 0b                	jne    c0010381 <VgaText::doANSI_SGR(int)+0x27>
c0010376:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010379:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001037c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001037f:	eb 49                	jmp    c00103ca <VgaText::doANSI_SGR(int)+0x70>
c0010381:	83 fa 1b             	cmp    edx,0x1b
c0010384:	74 e0                	je     c0010366 <VgaText::doANSI_SGR(int)+0xc>
c0010386:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010389:	83 f9 07             	cmp    ecx,0x7
c001038c:	77 09                	ja     c0010397 <VgaText::doANSI_SGR(int)+0x3d>
c001038e:	8b 14 8d e0 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1f20]
c0010395:	eb 20                	jmp    c00103b7 <VgaText::doANSI_SGR(int)+0x5d>
c0010397:	8d 4a d8             	lea    ecx,[edx-0x28]
c001039a:	83 f9 07             	cmp    ecx,0x7
c001039d:	77 09                	ja     c00103a8 <VgaText::doANSI_SGR(int)+0x4e>
c001039f:	8b 14 8d e0 e0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1f20]
c00103a6:	eb 22                	jmp    c00103ca <VgaText::doANSI_SGR(int)+0x70>
c00103a8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00103ab:	83 f9 07             	cmp    ecx,0x7
c00103ae:	77 0b                	ja     c00103bb <VgaText::doANSI_SGR(int)+0x61>
c00103b0:	8b 14 95 98 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2068]
c00103b7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103ba:	c3                   	ret    
c00103bb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00103be:	83 f9 07             	cmp    ecx,0x7
c00103c1:	77 0a                	ja     c00103cd <VgaText::doANSI_SGR(int)+0x73>
c00103c3:	8b 14 95 70 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2090]
c00103ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103cd:	c3                   	ret    

c00103ce <VgaText::setDefaultBgColour(VgaColour)>:
c00103ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103d6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00103d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103dc:	c3                   	ret    
c00103dd:	90                   	nop

c00103de <VgaText::setDefaultFgColour(VgaColour)>:
c00103de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00103e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00103ee:	53                   	push   ebx
c00103ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103fb:	51                   	push   ecx
c00103fc:	e8 cd ff ff ff       	call   c00103ce <VgaText::setDefaultBgColour(VgaColour)>
c0010401:	58                   	pop    eax
c0010402:	5a                   	pop    edx
c0010403:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010407:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001040b:	5b                   	pop    ebx
c001040c:	eb d0                	jmp    c00103de <VgaText::setDefaultFgColour(VgaColour)>

c001040e <VgaText::combineColours(unsigned char, unsigned char)>:
c001040e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010412:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010417:	83 e0 0f             	and    eax,0xf
c001041a:	c1 e2 04             	shl    edx,0x4
c001041d:	09 d0                	or     eax,edx
c001041f:	c3                   	ret    

c0010420 <VgaText::scrollScreen()>:
c0010420:	55                   	push   ebp
c0010421:	b9 01 00 00 00       	mov    ecx,0x1
c0010426:	57                   	push   edi
c0010427:	56                   	push   esi
c0010428:	53                   	push   ebx
c0010429:	83 ec 0c             	sub    esp,0xc
c001042c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010430:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010436:	31 ff                	xor    edi,edi
c0010438:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001043b:	83 f9 17             	cmp    ecx,0x17
c001043e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010441:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010448:	75 27                	jne    c0010471 <VgaText::scrollScreen()+0x51>
c001044a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001044d:	01 f5                	add    ebp,esi
c001044f:	f7 c7 01 00 00 00    	test   edi,0x1
c0010455:	74 16                	je     c001046d <VgaText::scrollScreen()+0x4d>
c0010457:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001045b:	50                   	push   eax
c001045c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010460:	50                   	push   eax
c0010461:	e8 a8 ff ff ff       	call   c001040e <VgaText::combineColours(unsigned char, unsigned char)>
c0010466:	5a                   	pop    edx
c0010467:	5a                   	pop    edx
c0010468:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001046b:	eb 04                	jmp    c0010471 <VgaText::scrollScreen()+0x51>
c001046d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010471:	47                   	inc    edi
c0010472:	46                   	inc    esi
c0010473:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010479:	75 bd                	jne    c0010438 <VgaText::scrollScreen()+0x18>
c001047b:	41                   	inc    ecx
c001047c:	83 f9 18             	cmp    ecx,0x18
c001047f:	75 af                	jne    c0010430 <VgaText::scrollScreen()+0x10>
c0010481:	39 1d 64 f2 02 c0    	cmp    DWORD PTR ds:0xc002f264,ebx
c0010487:	75 1b                	jne    c00104a4 <VgaText::scrollScreen()+0x84>
c0010489:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001048d:	74 05                	je     c0010494 <VgaText::scrollScreen()+0x74>
c001048f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010492:	eb 10                	jmp    c00104a4 <VgaText::scrollScreen()+0x84>
c0010494:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010497:	85 c0                	test   eax,eax
c0010499:	74 09                	je     c00104a4 <VgaText::scrollScreen()+0x84>
c001049b:	83 ec 0c             	sub    esp,0xc
c001049e:	53                   	push   ebx
c001049f:	ff d0                	call   eax
c00104a1:	83 c4 10             	add    esp,0x10
c00104a4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104a8:	83 c4 0c             	add    esp,0xc
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	5f                   	pop    edi
c00104ae:	5d                   	pop    ebp
c00104af:	e9 50 fe ff ff       	jmp    c0010304 <VgaText::updateCursor()>

c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00104b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104b9:	c1 e0 08             	shl    eax,0x8
c00104bc:	89 c2                	mov    edx,eax
c00104be:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00104c3:	09 d0                	or     eax,edx
c00104c5:	c3                   	ret    

c00104c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104c6:	56                   	push   esi
c00104c7:	53                   	push   ebx
c00104c8:	51                   	push   ecx
c00104c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104cd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104d2:	50                   	push   eax
c00104d3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104d8:	50                   	push   eax
c00104d9:	e8 30 ff ff ff       	call   c001040e <VgaText::combineColours(unsigned char, unsigned char)>
c00104de:	5b                   	pop    ebx
c00104df:	0f b6 c0             	movzx  eax,al
c00104e2:	5e                   	pop    esi
c00104e3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00104e8:	50                   	push   eax
c00104e9:	53                   	push   ebx
c00104ea:	e8 c5 ff ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c00104ef:	5a                   	pop    edx
c00104f0:	5e                   	pop    esi
c00104f1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00104f4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00104fa:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00104fe:	0f b7 d2             	movzx  edx,dx
c0010501:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010505:	39 0d 64 f2 02 c0    	cmp    DWORD PTR ds:0xc002f264,ecx
c001050b:	75 10                	jne    c001051d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001050d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010510:	85 c0                	test   eax,eax
c0010512:	74 09                	je     c001051d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010514:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010518:	5a                   	pop    edx
c0010519:	5b                   	pop    ebx
c001051a:	5e                   	pop    esi
c001051b:	ff e0                	jmp    eax
c001051d:	58                   	pop    eax
c001051e:	5b                   	pop    ebx
c001051f:	5e                   	pop    esi
c0010520:	c3                   	ret    
c0010521:	90                   	nop

c0010522 <VgaText::getCursorX()>:
c0010522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010526:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010529:	c3                   	ret    

c001052a <VgaText::getCursorY()>:
c001052a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001052e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010531:	c3                   	ret    

c0010532 <VgaText::setCursor(int, int)>:
c0010532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001053a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001053d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010541:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010544:	e9 bb fd ff ff       	jmp    c0010304 <VgaText::updateCursor()>
c0010549:	90                   	nop

c001054a <VgaText::setCursorX(int)>:
c001054a:	83 ec 10             	sub    esp,0x10
c001054d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010551:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010558:	50                   	push   eax
c0010559:	e8 d4 ff ff ff       	call   c0010532 <VgaText::setCursor(int, int)>
c001055e:	83 c4 1c             	add    esp,0x1c
c0010561:	c3                   	ret    

c0010562 <VgaText::setCursorY(int)>:
c0010562:	83 ec 10             	sub    esp,0x10
c0010565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010569:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001056d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010570:	50                   	push   eax
c0010571:	e8 bc ff ff ff       	call   c0010532 <VgaText::setCursor(int, int)>
c0010576:	83 c4 1c             	add    esp,0x1c
c0010579:	c3                   	ret    

c001057a <VgaText::incrementCursor(bool)>:
c001057a:	56                   	push   esi
c001057b:	53                   	push   ebx
c001057c:	51                   	push   ecx
c001057d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010581:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010585:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010588:	40                   	inc    eax
c0010589:	83 f8 50             	cmp    eax,0x50
c001058c:	74 05                	je     c0010593 <VgaText::incrementCursor(bool)+0x19>
c001058e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010591:	eb 24                	jmp    c00105b7 <VgaText::incrementCursor(bool)+0x3d>
c0010593:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010596:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001059d:	8d 50 01             	lea    edx,[eax+0x1]
c00105a0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00105a3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00105a6:	75 0f                	jne    c00105b7 <VgaText::incrementCursor(bool)+0x3d>
c00105a8:	83 ec 0c             	sub    esp,0xc
c00105ab:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105ae:	53                   	push   ebx
c00105af:	e8 6c fe ff ff       	call   c0010420 <VgaText::scrollScreen()>
c00105b4:	83 c4 10             	add    esp,0x10
c00105b7:	89 f0                	mov    eax,esi
c00105b9:	84 c0                	test   al,al
c00105bb:	74 0c                	je     c00105c9 <VgaText::incrementCursor(bool)+0x4f>
c00105bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105c1:	5a                   	pop    edx
c00105c2:	5b                   	pop    ebx
c00105c3:	5e                   	pop    esi
c00105c4:	e9 3b fd ff ff       	jmp    c0010304 <VgaText::updateCursor()>
c00105c9:	58                   	pop    eax
c00105ca:	5b                   	pop    ebx
c00105cb:	5e                   	pop    esi
c00105cc:	c3                   	ret    
c00105cd:	90                   	nop

c00105ce <VgaText::updateRAMUsageDisplay(int)>:
c00105ce:	56                   	push   esi
c00105cf:	8b 35 c0 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e0c0
c00105d5:	53                   	push   ebx
c00105d6:	bb 0a 00 00 00       	mov    ebx,0xa
c00105db:	6a 0f                	push   0xf
c00105dd:	6a 00                	push   0x0
c00105df:	e8 2a fe ff ff       	call   c001040e <VgaText::combineColours(unsigned char, unsigned char)>
c00105e4:	5a                   	pop    edx
c00105e5:	59                   	pop    ecx
c00105e6:	0f b6 c8             	movzx  ecx,al
c00105e9:	51                   	push   ecx
c00105ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ee:	99                   	cdq    
c00105ef:	f7 fb                	idiv   ebx
c00105f1:	89 d3                	mov    ebx,edx
c00105f3:	83 c0 30             	add    eax,0x30
c00105f6:	83 c3 30             	add    ebx,0x30
c00105f9:	0f be c0             	movsx  eax,al
c00105fc:	0f b6 db             	movzx  ebx,bl
c00105ff:	50                   	push   eax
c0010600:	e8 af fe ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010605:	5a                   	pop    edx
c0010606:	5a                   	pop    edx
c0010607:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001060e:	51                   	push   ecx
c001060f:	53                   	push   ebx
c0010610:	e8 9f fe ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010615:	5b                   	pop    ebx
c0010616:	5a                   	pop    edx
c0010617:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001061e:	51                   	push   ecx
c001061f:	6a 25                	push   0x25
c0010621:	e8 8e fe ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010626:	59                   	pop    ecx
c0010627:	5b                   	pop    ebx
c0010628:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001062f:	5b                   	pop    ebx
c0010630:	5e                   	pop    esi
c0010631:	c3                   	ret    

c0010632 <VgaText::updateDiskUsage()>:
c0010632:	55                   	push   ebp
c0010633:	bd 10 27 00 00       	mov    ebp,0x2710
c0010638:	57                   	push   edi
c0010639:	8b 3d c0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0c0
c001063f:	56                   	push   esi
c0010640:	53                   	push   ebx
c0010641:	6a 0f                	push   0xf
c0010643:	6a 00                	push   0x0
c0010645:	e8 c4 fd ff ff       	call   c001040e <VgaText::combineColours(unsigned char, unsigned char)>
c001064a:	5a                   	pop    edx
c001064b:	0f b6 d8             	movzx  ebx,al
c001064e:	59                   	pop    ecx
c001064f:	8b 35 f8 34 03 c0    	mov    esi,DWORD PTR ds:0xc00334f8
c0010655:	53                   	push   ebx
c0010656:	b9 0a 00 00 00       	mov    ecx,0xa
c001065b:	89 f0                	mov    eax,esi
c001065d:	99                   	cdq    
c001065e:	f7 fd                	idiv   ebp
c0010660:	99                   	cdq    
c0010661:	f7 f9                	idiv   ecx
c0010663:	8d 42 30             	lea    eax,[edx+0x30]
c0010666:	0f b6 c0             	movzx  eax,al
c0010669:	50                   	push   eax
c001066a:	e8 45 fe ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c001066f:	5d                   	pop    ebp
c0010670:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010675:	5a                   	pop    edx
c0010676:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001067a:	53                   	push   ebx
c001067b:	89 f0                	mov    eax,esi
c001067d:	99                   	cdq    
c001067e:	f7 fd                	idiv   ebp
c0010680:	99                   	cdq    
c0010681:	f7 f9                	idiv   ecx
c0010683:	8d 42 30             	lea    eax,[edx+0x30]
c0010686:	0f b6 c0             	movzx  eax,al
c0010689:	50                   	push   eax
c001068a:	e8 25 fe ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c001068f:	5d                   	pop    ebp
c0010690:	bd 64 00 00 00       	mov    ebp,0x64
c0010695:	5a                   	pop    edx
c0010696:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001069d:	53                   	push   ebx
c001069e:	89 f0                	mov    eax,esi
c00106a0:	99                   	cdq    
c00106a1:	f7 fd                	idiv   ebp
c00106a3:	99                   	cdq    
c00106a4:	f7 f9                	idiv   ecx
c00106a6:	8d 42 30             	lea    eax,[edx+0x30]
c00106a9:	0f b6 c0             	movzx  eax,al
c00106ac:	50                   	push   eax
c00106ad:	e8 02 fe ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c00106b2:	5d                   	pop    ebp
c00106b3:	5a                   	pop    edx
c00106b4:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00106bb:	53                   	push   ebx
c00106bc:	89 f0                	mov    eax,esi
c00106be:	99                   	cdq    
c00106bf:	f7 f9                	idiv   ecx
c00106c1:	89 d6                	mov    esi,edx
c00106c3:	99                   	cdq    
c00106c4:	f7 f9                	idiv   ecx
c00106c6:	8d 42 30             	lea    eax,[edx+0x30]
c00106c9:	0f b6 c0             	movzx  eax,al
c00106cc:	50                   	push   eax
c00106cd:	e8 e2 fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c00106d2:	5d                   	pop    ebp
c00106d3:	5a                   	pop    edx
c00106d4:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00106db:	53                   	push   ebx
c00106dc:	8d 46 30             	lea    eax,[esi+0x30]
c00106df:	0f b6 f0             	movzx  esi,al
c00106e2:	56                   	push   esi
c00106e3:	e8 cc fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c00106e8:	5e                   	pop    esi
c00106e9:	8b 35 f4 34 03 c0    	mov    esi,DWORD PTR ds:0xc00334f4
c00106ef:	5d                   	pop    ebp
c00106f0:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00106f7:	bd 10 27 00 00       	mov    ebp,0x2710
c00106fc:	53                   	push   ebx
c00106fd:	89 f0                	mov    eax,esi
c00106ff:	99                   	cdq    
c0010700:	f7 fd                	idiv   ebp
c0010702:	99                   	cdq    
c0010703:	f7 f9                	idiv   ecx
c0010705:	8d 42 30             	lea    eax,[edx+0x30]
c0010708:	0f b6 c0             	movzx  eax,al
c001070b:	50                   	push   eax
c001070c:	e8 a3 fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010711:	5a                   	pop    edx
c0010712:	5d                   	pop    ebp
c0010713:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c001071a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001071f:	53                   	push   ebx
c0010720:	89 f0                	mov    eax,esi
c0010722:	99                   	cdq    
c0010723:	f7 fd                	idiv   ebp
c0010725:	99                   	cdq    
c0010726:	f7 f9                	idiv   ecx
c0010728:	8d 42 30             	lea    eax,[edx+0x30]
c001072b:	0f b6 c0             	movzx  eax,al
c001072e:	50                   	push   eax
c001072f:	e8 80 fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010734:	5a                   	pop    edx
c0010735:	5d                   	pop    ebp
c0010736:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c001073d:	bd 64 00 00 00       	mov    ebp,0x64
c0010742:	53                   	push   ebx
c0010743:	89 f0                	mov    eax,esi
c0010745:	99                   	cdq    
c0010746:	f7 fd                	idiv   ebp
c0010748:	99                   	cdq    
c0010749:	f7 f9                	idiv   ecx
c001074b:	83 c2 30             	add    edx,0x30
c001074e:	0f b6 d2             	movzx  edx,dl
c0010751:	52                   	push   edx
c0010752:	e8 5d fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010757:	5a                   	pop    edx
c0010758:	5d                   	pop    ebp
c0010759:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010760:	53                   	push   ebx
c0010761:	89 f0                	mov    eax,esi
c0010763:	99                   	cdq    
c0010764:	f7 f9                	idiv   ecx
c0010766:	89 d6                	mov    esi,edx
c0010768:	99                   	cdq    
c0010769:	f7 f9                	idiv   ecx
c001076b:	8d 42 30             	lea    eax,[edx+0x30]
c001076e:	0f b6 c0             	movzx  eax,al
c0010771:	50                   	push   eax
c0010772:	e8 3d fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010777:	5a                   	pop    edx
c0010778:	59                   	pop    ecx
c0010779:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010780:	53                   	push   ebx
c0010781:	8d 46 30             	lea    eax,[esi+0x30]
c0010784:	0f b6 f0             	movzx  esi,al
c0010787:	56                   	push   esi
c0010788:	e8 27 fd ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c001078d:	5b                   	pop    ebx
c001078e:	5e                   	pop    esi
c001078f:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010796:	5b                   	pop    ebx
c0010797:	5e                   	pop    esi
c0010798:	5f                   	pop    edi
c0010799:	5d                   	pop    ebp
c001079a:	c3                   	ret    
c001079b:	90                   	nop

c001079c <VgaText::updateTitle()>:
c001079c:	53                   	push   ebx
c001079d:	31 c0                	xor    eax,eax
c001079f:	83 ec 58             	sub    esp,0x58
c00107a2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00107a6:	89 e1                	mov    ecx,esp
c00107a8:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00107ac:	40                   	inc    eax
c00107ad:	83 f8 50             	cmp    eax,0x50
c00107b0:	75 f6                	jne    c00107a8 <VgaText::updateTitle()+0xc>
c00107b2:	31 c0                	xor    eax,eax
c00107b4:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00107bb:	84 db                	test   bl,bl
c00107bd:	74 06                	je     c00107c5 <VgaText::updateTitle()+0x29>
c00107bf:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00107c2:	40                   	inc    eax
c00107c3:	eb ef                	jmp    c00107b4 <VgaText::updateTitle()+0x18>
c00107c5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00107c8:	85 c0                	test   eax,eax
c00107ca:	74 09                	je     c00107d5 <VgaText::updateTitle()+0x39>
c00107cc:	53                   	push   ebx
c00107cd:	53                   	push   ebx
c00107ce:	51                   	push   ecx
c00107cf:	52                   	push   edx
c00107d0:	ff d0                	call   eax
c00107d2:	83 c4 10             	add    esp,0x10
c00107d5:	e8 58 fe ff ff       	call   c0010632 <VgaText::updateDiskUsage()>
c00107da:	83 c4 58             	add    esp,0x58
c00107dd:	5b                   	pop    ebx
c00107de:	c3                   	ret    
c00107df:	90                   	nop

c00107e0 <VgaText::setTitleTextColour(VgaColour)>:
c00107e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00107eb:	eb af                	jmp    c001079c <VgaText::updateTitle()>
c00107ed:	90                   	nop

c00107ee <VgaText::setTitleColour(VgaColour)>:
c00107ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00107f9:	eb a1                	jmp    c001079c <VgaText::updateTitle()>
c00107fb:	90                   	nop

c00107fc <VgaText::setTitle(char*)>:
c00107fc:	53                   	push   ebx
c00107fd:	83 ec 10             	sub    esp,0x10
c0010800:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010808:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001080e:	50                   	push   eax
c001080f:	e8 f8 ff fe ff       	call   c000080c <strcpy>
c0010814:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010818:	83 c4 18             	add    esp,0x18
c001081b:	5b                   	pop    ebx
c001081c:	e9 7b ff ff ff       	jmp    c001079c <VgaText::updateTitle()>
c0010821:	90                   	nop

c0010822 <VgaText::decrementCursor(bool)>:
c0010822:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010826:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001082a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001082d:	85 c0                	test   eax,eax
c001082f:	74 04                	je     c0010835 <VgaText::decrementCursor(bool)+0x13>
c0010831:	48                   	dec    eax
c0010832:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010835:	84 c9                	test   cl,cl
c0010837:	74 09                	je     c0010842 <VgaText::decrementCursor(bool)+0x20>
c0010839:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001083d:	e9 c2 fa ff ff       	jmp    c0010304 <VgaText::updateCursor()>
c0010842:	c3                   	ret    
c0010843:	90                   	nop

c0010844 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010844:	53                   	push   ebx
c0010845:	83 ec 08             	sub    esp,0x8
c0010848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001084c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010850:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010854:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010858:	3c 07                	cmp    al,0x7
c001085a:	75 2a                	jne    c0010886 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001085c:	a1 18 f3 02 c0       	mov    eax,ds:0xc002f318
c0010861:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010869:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010871:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010879:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001087d:	83 c4 08             	add    esp,0x8
c0010880:	5b                   	pop    ebx
c0010881:	e9 b4 30 00 00       	jmp    c001393a <Buzzer::beep(int, int, bool)>
c0010886:	3c 0d                	cmp    al,0xd
c0010888:	75 09                	jne    c0010893 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001088a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010891:	eb 2c                	jmp    c00108bf <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010893:	3c 0a                	cmp    al,0xa
c0010895:	75 31                	jne    c00108c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010897:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001089a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108a1:	8d 50 01             	lea    edx,[eax+0x1]
c00108a4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108a7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108aa:	75 0f                	jne    c00108bb <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108b2:	53                   	push   ebx
c00108b3:	e8 68 fb ff ff       	call   c0010420 <VgaText::scrollScreen()>
c00108b8:	83 c4 10             	add    esp,0x10
c00108bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108bf:	83 c4 08             	add    esp,0x8
c00108c2:	5b                   	pop    ebx
c00108c3:	e9 3c fa ff ff       	jmp    c0010304 <VgaText::updateCursor()>
c00108c8:	3c 08                	cmp    al,0x8
c00108ca:	75 25                	jne    c00108f1 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00108cc:	50                   	push   eax
c00108cd:	50                   	push   eax
c00108ce:	6a 01                	push   0x1
c00108d0:	53                   	push   ebx
c00108d1:	e8 4c ff ff ff       	call   c0010822 <VgaText::decrementCursor(bool)>
c00108d6:	5a                   	pop    edx
c00108d7:	59                   	pop    ecx
c00108d8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108db:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108e4:	6a 20                	push   0x20
c00108e6:	53                   	push   ebx
c00108e7:	e8 da fb ff ff       	call   c00104c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108ec:	83 c4 28             	add    esp,0x28
c00108ef:	5b                   	pop    ebx
c00108f0:	c3                   	ret    
c00108f1:	83 ec 08             	sub    esp,0x8
c00108f4:	0f be c0             	movsx  eax,al
c00108f7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108fa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108fd:	51                   	push   ecx
c00108fe:	52                   	push   edx
c00108ff:	50                   	push   eax
c0010900:	53                   	push   ebx
c0010901:	e8 c0 fb ff ff       	call   c00104c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010906:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001090a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010912:	83 c4 28             	add    esp,0x28
c0010915:	5b                   	pop    ebx
c0010916:	e9 5f fc ff ff       	jmp    c001057a <VgaText::incrementCursor(bool)>
c001091b:	90                   	nop

c001091c <VgaText::isShowingCursor()>:
c001091c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010920:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010923:	c3                   	ret    

c0010924 <VgaText::isBlinkDisabled()>:
c0010924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010928:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c001092b:	83 f0 01             	xor    eax,0x1
c001092e:	c3                   	ret    
c001092f:	90                   	nop

c0010930 <VgaText::setCursorHeight(int)>:
c0010930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010934:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010938:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001093b:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c001093f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010943:	e9 d2 f9 ff ff       	jmp    c001031a <VgaText::showCursor(bool)>

c0010948 <VgaText::getCursorHeight()>:
c0010948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001094c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001094f:	c3                   	ret    

c0010950 <setActiveTerminal(VgaText*)>:
c0010950:	53                   	push   ebx
c0010951:	83 ec 08             	sub    esp,0x8
c0010954:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010958:	85 db                	test   ebx,ebx
c001095a:	75 11                	jne    c001096d <setActiveTerminal(VgaText*)+0x1d>
c001095c:	c7 44 24 10 4c af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af4c
c0010964:	83 c4 08             	add    esp,0x8
c0010967:	5b                   	pop    ebx
c0010968:	e9 2c 9d 00 00       	jmp    c001a699 <Krnl::panic(char const*)>
c001096d:	50                   	push   eax
c001096e:	50                   	push   eax
c001096f:	53                   	push   ebx
c0010970:	68 5a af 02 c0       	push   0xc002af5a
c0010975:	e8 b3 21 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001097a:	a1 64 f2 02 c0       	mov    eax,ds:0xc002f264
c001097f:	83 c4 10             	add    esp,0x10
c0010982:	85 c0                	test   eax,eax
c0010984:	74 0c                	je     c0010992 <setActiveTerminal(VgaText*)+0x42>
c0010986:	83 ec 0c             	sub    esp,0xc
c0010989:	50                   	push   eax
c001098a:	e8 75 f9 ff ff       	call   c0010304 <VgaText::updateCursor()>
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	89 1d 64 f2 02 c0    	mov    DWORD PTR ds:0xc002f264,ebx
c0010998:	51                   	push   ecx
c0010999:	51                   	push   ecx
c001099a:	53                   	push   ebx
c001099b:	68 72 af 02 c0       	push   0xc002af72
c00109a0:	e8 88 21 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00109a5:	83 c4 0c             	add    esp,0xc
c00109a8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00109ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00109ae:	53                   	push   ebx
c00109af:	e8 7e fb ff ff       	call   c0010532 <VgaText::setCursor(int, int)>
c00109b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b7:	e8 68 ff ff ff       	call   c0010924 <VgaText::isBlinkDisabled()>
c00109bc:	5a                   	pop    edx
c00109bd:	0f b6 c0             	movzx  eax,al
c00109c0:	59                   	pop    ecx
c00109c1:	50                   	push   eax
c00109c2:	53                   	push   ebx
c00109c3:	e8 5e f9 ff ff       	call   c0010326 <VgaText::disableBlink(bool)>
c00109c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109cb:	e8 78 ff ff ff       	call   c0010948 <VgaText::getCursorHeight()>
c00109d0:	5a                   	pop    edx
c00109d1:	59                   	pop    ecx
c00109d2:	50                   	push   eax
c00109d3:	53                   	push   ebx
c00109d4:	e8 57 ff ff ff       	call   c0010930 <VgaText::setCursorHeight(int)>
c00109d9:	83 c4 10             	add    esp,0x10
c00109dc:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00109e0:	75 07                	jne    c00109e9 <setActiveTerminal(VgaText*)+0x99>
c00109e2:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00109e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109ed:	83 c4 08             	add    esp,0x8
c00109f0:	5b                   	pop    ebx
c00109f1:	e9 c0 f8 ff ff       	jmp    c00102b6 <VgaText::load()>

c00109f6 <doTerminalCycle()>:
c00109f6:	83 ec 18             	sub    esp,0x18
c00109f9:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c00109fe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a01:	50                   	push   eax
c0010a02:	a3 60 f2 02 c0       	mov    ds:0xc002f260,eax
c0010a07:	e8 44 ff ff ff       	call   c0010950 <setActiveTerminal(VgaText*)>
c0010a0c:	83 c4 1c             	add    esp,0x1c
c0010a0f:	c3                   	ret    

c0010a10 <VgaText::doUpdate()>:
c0010a10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a14:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010a17:	85 c0                	test   eax,eax
c0010a19:	74 02                	je     c0010a1d <VgaText::doUpdate()+0xd>
c0010a1b:	ff e0                	jmp    eax
c0010a1d:	c3                   	ret    

c0010a1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a1e:	55                   	push   ebp
c0010a1f:	31 ed                	xor    ebp,ebp
c0010a21:	57                   	push   edi
c0010a22:	56                   	push   esi
c0010a23:	53                   	push   ebx
c0010a24:	83 ec 1c             	sub    esp,0x1c
c0010a27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010a2b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a30:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010a37:	50                   	push   eax
c0010a38:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a3d:	50                   	push   eax
c0010a3e:	e8 cb f9 ff ff       	call   c001040e <VgaText::combineColours(unsigned char, unsigned char)>
c0010a43:	59                   	pop    ecx
c0010a44:	0f b6 c0             	movzx  eax,al
c0010a47:	5e                   	pop    esi
c0010a48:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a4d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010a51:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010a54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a58:	0f b7 f6             	movzx  esi,si
c0010a5b:	01 f6                	add    esi,esi
c0010a5d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a60:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010a63:	84 c0                	test   al,al
c0010a65:	0f 84 fd 00 00 00    	je     c0010b68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010a6b:	3c 0d                	cmp    al,0xd
c0010a6d:	75 0c                	jne    c0010a7b <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010a6f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010a76:	e9 e7 00 00 00       	jmp    c0010b62 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010a7b:	3c 0a                	cmp    al,0xa
c0010a7d:	75 47                	jne    c0010ac6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010a7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010a82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010a89:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a8c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010a8f:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010a92:	75 0f                	jne    c0010aa3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010a9a:	53                   	push   ebx
c0010a9b:	e8 80 f9 ff ff       	call   c0010420 <VgaText::scrollScreen()>
c0010aa0:	83 c4 10             	add    esp,0x10
c0010aa3:	83 ec 0c             	sub    esp,0xc
c0010aa6:	31 ed                	xor    ebp,ebp
c0010aa8:	53                   	push   ebx
c0010aa9:	e8 56 f8 ff ff       	call   c0010304 <VgaText::updateCursor()>
c0010aae:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ab3:	83 c4 10             	add    esp,0x10
c0010ab6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010ab9:	0f b7 f6             	movzx  esi,si
c0010abc:	01 f6                	add    esi,esi
c0010abe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ac1:	e9 9c 00 00 00       	jmp    c0010b62 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010ac6:	3c 08                	cmp    al,0x8
c0010ac8:	75 35                	jne    c0010aff <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010aca:	56                   	push   esi
c0010acb:	56                   	push   esi
c0010acc:	6a 01                	push   0x1
c0010ace:	53                   	push   ebx
c0010acf:	e8 4e fd ff ff       	call   c0010822 <VgaText::decrementCursor(bool)>
c0010ad4:	58                   	pop    eax
c0010ad5:	5a                   	pop    edx
c0010ad6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ad9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010adc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010adf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ae2:	6a 20                	push   0x20
c0010ae4:	53                   	push   ebx
c0010ae5:	e8 dc f9 ff ff       	call   c00104c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010aea:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010aef:	83 c4 20             	add    esp,0x20
c0010af2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010af5:	0f b7 f6             	movzx  esi,si
c0010af8:	01 f6                	add    esi,esi
c0010afa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010afd:	eb 63                	jmp    c0010b62 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010aff:	51                   	push   ecx
c0010b00:	51                   	push   ecx
c0010b01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010b05:	50                   	push   eax
c0010b06:	e8 a9 f9 ff ff       	call   c00104b4 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	66 89 06             	mov    WORD PTR [esi],ax
c0010b11:	39 1d 64 f2 02 c0    	cmp    DWORD PTR ds:0xc002f264,ebx
c0010b17:	75 21                	jne    c0010b3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010b19:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	74 1a                	je     c0010b3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010b20:	52                   	push   edx
c0010b21:	52                   	push   edx
c0010b22:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010b25:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010b28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b30:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010b33:	51                   	push   ecx
c0010b34:	53                   	push   ebx
c0010b35:	ff d0                	call   eax
c0010b37:	83 c4 20             	add    esp,0x20
c0010b3a:	83 c6 02             	add    esi,0x2
c0010b3d:	50                   	push   eax
c0010b3e:	50                   	push   eax
c0010b3f:	6a 00                	push   0x0
c0010b41:	53                   	push   ebx
c0010b42:	e8 33 fa ff ff       	call   c001057a <VgaText::incrementCursor(bool)>
c0010b47:	83 c4 10             	add    esp,0x10
c0010b4a:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010b4e:	75 0d                	jne    c0010b5d <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010b50:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010b55:	0f b7 f6             	movzx  esi,si
c0010b58:	01 f6                	add    esi,esi
c0010b5a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010b5d:	bd 01 00 00 00       	mov    ebp,0x1
c0010b62:	47                   	inc    edi
c0010b63:	e9 f8 fe ff ff       	jmp    c0010a60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	53                   	push   ebx
c0010b6c:	e8 93 f7 ff ff       	call   c0010304 <VgaText::updateCursor()>
c0010b71:	83 c4 10             	add    esp,0x10
c0010b74:	89 e8                	mov    eax,ebp
c0010b76:	84 c0                	test   al,al
c0010b78:	74 0c                	je     c0010b86 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010b7a:	83 ec 0c             	sub    esp,0xc
c0010b7d:	53                   	push   ebx
c0010b7e:	e8 8d fe ff ff       	call   c0010a10 <VgaText::doUpdate()>
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010b8d:	83 c4 1c             	add    esp,0x1c
c0010b90:	5b                   	pop    ebx
c0010b91:	5e                   	pop    esi
c0010b92:	5f                   	pop    edi
c0010b93:	5d                   	pop    ebp
c0010b94:	c3                   	ret    
c0010b95:	90                   	nop

c0010b96 <VgaText::clearScreen()>:
c0010b96:	57                   	push   edi
c0010b97:	56                   	push   esi
c0010b98:	31 f6                	xor    esi,esi
c0010b9a:	53                   	push   ebx
c0010b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b9f:	52                   	push   edx
c0010ba0:	6a 00                	push   0x0
c0010ba2:	6a 00                	push   0x0
c0010ba4:	53                   	push   ebx
c0010ba5:	e8 88 f9 ff ff       	call   c0010532 <VgaText::setCursor(int, int)>
c0010baa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010bb7:	7e 20                	jle    c0010bd9 <VgaText::clearScreen()+0x43>
c0010bb9:	31 ff                	xor    edi,edi
c0010bbb:	50                   	push   eax
c0010bbc:	50                   	push   eax
c0010bbd:	56                   	push   esi
c0010bbe:	57                   	push   edi
c0010bbf:	47                   	inc    edi
c0010bc0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bc3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bc6:	6a 20                	push   0x20
c0010bc8:	53                   	push   ebx
c0010bc9:	e8 f8 f8 ff ff       	call   c00104c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010bce:	83 c4 20             	add    esp,0x20
c0010bd1:	83 ff 50             	cmp    edi,0x50
c0010bd4:	75 e5                	jne    c0010bbb <VgaText::clearScreen()+0x25>
c0010bd6:	46                   	inc    esi
c0010bd7:	eb db                	jmp    c0010bb4 <VgaText::clearScreen()+0x1e>
c0010bd9:	83 ec 0c             	sub    esp,0xc
c0010bdc:	53                   	push   ebx
c0010bdd:	e8 2e fe ff ff       	call   c0010a10 <VgaText::doUpdate()>
c0010be2:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010be9:	83 c4 10             	add    esp,0x10
c0010bec:	5b                   	pop    ebx
c0010bed:	5e                   	pop    esi
c0010bee:	5f                   	pop    edi
c0010bef:	c3                   	ret    

c0010bf0 <VgaText::putchar(char)>:
c0010bf0:	56                   	push   esi
c0010bf1:	53                   	push   ebx
c0010bf2:	83 ec 14             	sub    esp,0x14
c0010bf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010bf9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bfd:	3c 5b                	cmp    al,0x5b
c0010bff:	75 18                	jne    c0010c19 <VgaText::putchar(char)+0x29>
c0010c01:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010c05:	74 1f                	je     c0010c26 <VgaText::putchar(char)+0x36>
c0010c07:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010c0d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010c14:	e9 bd 00 00 00       	jmp    c0010cd6 <VgaText::putchar(char)+0xe6>
c0010c19:	3c 1b                	cmp    al,0x1b
c0010c1b:	75 09                	jne    c0010c26 <VgaText::putchar(char)+0x36>
c0010c1d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010c21:	e9 b0 00 00 00       	jmp    c0010cd6 <VgaText::putchar(char)+0xe6>
c0010c26:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010c29:	84 c9                	test   cl,cl
c0010c2b:	0f 84 92 00 00 00    	je     c0010cc3 <VgaText::putchar(char)+0xd3>
c0010c31:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c34:	80 fa 3e             	cmp    dl,0x3e
c0010c37:	77 76                	ja     c0010caf <VgaText::putchar(char)+0xbf>
c0010c39:	3c 6d                	cmp    al,0x6d
c0010c3b:	75 47                	jne    c0010c84 <VgaText::putchar(char)+0x94>
c0010c3d:	31 f6                	xor    esi,esi
c0010c3f:	31 d2                	xor    edx,edx
c0010c41:	31 c0                	xor    eax,eax
c0010c43:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010c46:	7e 2d                	jle    c0010c75 <VgaText::putchar(char)+0x85>
c0010c48:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010c4d:	80 fa 3b             	cmp    dl,0x3b
c0010c50:	75 17                	jne    c0010c69 <VgaText::putchar(char)+0x79>
c0010c52:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c56:	50                   	push   eax
c0010c57:	53                   	push   ebx
c0010c58:	e8 fd f6 ff ff       	call   c001035a <VgaText::doANSI_SGR(int)>
c0010c5d:	59                   	pop    ecx
c0010c5e:	31 d2                	xor    edx,edx
c0010c60:	58                   	pop    eax
c0010c61:	31 c0                	xor    eax,eax
c0010c63:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c67:	eb 09                	jmp    c0010c72 <VgaText::putchar(char)+0x82>
c0010c69:	6b c0 0a             	imul   eax,eax,0xa
c0010c6c:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010c70:	88 ca                	mov    dl,cl
c0010c72:	46                   	inc    esi
c0010c73:	eb ce                	jmp    c0010c43 <VgaText::putchar(char)+0x53>
c0010c75:	84 d2                	test   dl,dl
c0010c77:	74 2e                	je     c0010ca7 <VgaText::putchar(char)+0xb7>
c0010c79:	50                   	push   eax
c0010c7a:	53                   	push   ebx
c0010c7b:	e8 da f6 ff ff       	call   c001035a <VgaText::doANSI_SGR(int)>
c0010c80:	58                   	pop    eax
c0010c81:	5a                   	pop    edx
c0010c82:	eb 23                	jmp    c0010ca7 <VgaText::putchar(char)+0xb7>
c0010c84:	3c 4a                	cmp    al,0x4a
c0010c86:	75 1f                	jne    c0010ca7 <VgaText::putchar(char)+0xb7>
c0010c88:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010c8c:	75 19                	jne    c0010ca7 <VgaText::putchar(char)+0xb7>
c0010c8e:	83 ec 0c             	sub    esp,0xc
c0010c91:	53                   	push   ebx
c0010c92:	e8 ff fe ff ff       	call   c0010b96 <VgaText::clearScreen()>
c0010c97:	83 c4 0c             	add    esp,0xc
c0010c9a:	6a 00                	push   0x0
c0010c9c:	6a 00                	push   0x0
c0010c9e:	53                   	push   ebx
c0010c9f:	e8 8e f8 ff ff       	call   c0010532 <VgaText::setCursor(int, int)>
c0010ca4:	83 c4 10             	add    esp,0x10
c0010ca7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010cad:	eb 27                	jmp    c0010cd6 <VgaText::putchar(char)+0xe6>
c0010caf:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010cb2:	83 fa 0e             	cmp    edx,0xe
c0010cb5:	7f 1f                	jg     c0010cd6 <VgaText::putchar(char)+0xe6>
c0010cb7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010cba:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010cbd:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010cc1:	eb 13                	jmp    c0010cd6 <VgaText::putchar(char)+0xe6>
c0010cc3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010cc6:	0f be c0             	movsx  eax,al
c0010cc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ccc:	50                   	push   eax
c0010ccd:	53                   	push   ebx
c0010cce:	e8 71 fb ff ff       	call   c0010844 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	83 c4 14             	add    esp,0x14
c0010cd9:	5b                   	pop    ebx
c0010cda:	5e                   	pop    esi
c0010cdb:	c3                   	ret    

c0010cdc <VgaText::puts(char const*)>:
c0010cdc:	53                   	push   ebx
c0010cdd:	83 ec 08             	sub    esp,0x8
c0010ce0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ce4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ce7:	84 c0                	test   al,al
c0010ce9:	74 12                	je     c0010cfd <VgaText::puts(char const*)+0x21>
c0010ceb:	43                   	inc    ebx
c0010cec:	51                   	push   ecx
c0010ced:	51                   	push   ecx
c0010cee:	50                   	push   eax
c0010cef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010cf3:	e8 f8 fe ff ff       	call   c0010bf0 <VgaText::putchar(char)>
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	eb e7                	jmp    c0010ce4 <VgaText::puts(char const*)+0x8>
c0010cfd:	83 c4 08             	add    esp,0x8
c0010d00:	5b                   	pop    ebx
c0010d01:	c3                   	ret    

c0010d02 <VgaText::putx(unsigned int)>:
c0010d02:	57                   	push   edi
c0010d03:	b9 11 00 00 00       	mov    ecx,0x11
c0010d08:	56                   	push   esi
c0010d09:	be 8e af 02 c0       	mov    esi,0xc002af8e
c0010d0e:	53                   	push   ebx
c0010d0f:	83 ec 20             	sub    esp,0x20
c0010d12:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d16:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d1a:	fc                   	cld    
c0010d1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d1d:	be 08 00 00 00       	mov    esi,0x8
c0010d22:	50                   	push   eax
c0010d23:	50                   	push   eax
c0010d24:	89 d8                	mov    eax,ebx
c0010d26:	c1 e3 04             	shl    ebx,0x4
c0010d29:	c1 e8 1c             	shr    eax,0x1c
c0010d2c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010d31:	50                   	push   eax
c0010d32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d36:	e8 b5 fe ff ff       	call   c0010bf0 <VgaText::putchar(char)>
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	4e                   	dec    esi
c0010d3f:	75 e1                	jne    c0010d22 <VgaText::putx(unsigned int)+0x20>
c0010d41:	83 c4 20             	add    esp,0x20
c0010d44:	5b                   	pop    ebx
c0010d45:	5e                   	pop    esi
c0010d46:	5f                   	pop    edi
c0010d47:	c3                   	ret    

c0010d48 <VgaText::VgaText(char const*)>:
c0010d48:	57                   	push   edi
c0010d49:	56                   	push   esi
c0010d4a:	53                   	push   ebx
c0010d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4f:	83 ec 08             	sub    esp,0x8
c0010d52:	6a 00                	push   0x0
c0010d54:	50                   	push   eax
c0010d55:	e8 8a 05 00 00       	call   c00112e4 <UnixFile::UnixFile(int)>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	ba f4 af 02 c0       	mov    edx,0xc002aff4
c0010d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d66:	89 10                	mov    DWORD PTR [eax],edx
c0010d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d77:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d82:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d92:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d9d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010db3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dbe:	8d 50 60             	lea    edx,[eax+0x60]
c0010dc1:	bb 40 f2 02 c0       	mov    ebx,0xc002f240
c0010dc6:	b8 08 00 00 00       	mov    eax,0x8
c0010dcb:	fc                   	cld    
c0010dcc:	89 d7                	mov    edi,edx
c0010dce:	89 de                	mov    esi,ebx
c0010dd0:	89 c1                	mov    ecx,eax
c0010dd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd8:	05 82 00 00 00       	add    eax,0x82
c0010ddd:	83 ec 08             	sub    esp,0x8
c0010de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de4:	50                   	push   eax
c0010de5:	e8 22 fa fe ff       	call   c000080c <strcpy>
c0010dea:	83 c4 10             	add    esp,0x10
c0010ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010df1:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010df8:	83 ec 0c             	sub    esp,0xc
c0010dfb:	6a 01                	push   0x1
c0010dfd:	e8 25 09 00 00       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0010e02:	83 c4 10             	add    esp,0x10
c0010e05:	89 c2                	mov    edx,eax
c0010e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e0e:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c0010e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e1b:	89 c6                	mov    esi,eax
c0010e1d:	e8 cc ed ff ff       	call   c000fbee <Phys::allocatePage()>
c0010e22:	6a 05                	push   0x5
c0010e24:	56                   	push   esi
c0010e25:	50                   	push   eax
c0010e26:	53                   	push   ebx
c0010e27:	e8 32 11 00 00       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0010e2c:	83 c4 10             	add    esp,0x10
c0010e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e36:	83 ec 04             	sub    esp,0x4
c0010e39:	68 00 0f 00 00       	push   0xf00
c0010e3e:	6a 00                	push   0x0
c0010e40:	50                   	push   eax
c0010e41:	e8 0a f9 fe ff       	call   c0000750 <memset>
c0010e46:	83 c4 10             	add    esp,0x10
c0010e49:	83 ec 04             	sub    esp,0x4
c0010e4c:	6a 00                	push   0x0
c0010e4e:	6a 07                	push   0x7
c0010e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e54:	e8 95 f5 ff ff       	call   c00103ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	83 ec 08             	sub    esp,0x8
c0010e5f:	6a 02                	push   0x2
c0010e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e65:	e8 c6 fa ff ff       	call   c0010930 <VgaText::setCursorHeight(int)>
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	83 ec 04             	sub    esp,0x4
c0010e70:	6a 00                	push   0x0
c0010e72:	6a 00                	push   0x0
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 b5 f6 ff ff       	call   c0010532 <VgaText::setCursor(int, int)>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	83 ec 08             	sub    esp,0x8
c0010e83:	6a 01                	push   0x1
c0010e85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e89:	e8 8c f4 ff ff       	call   c001031a <VgaText::showCursor(bool)>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	83 ec 08             	sub    esp,0x8
c0010e94:	6a 01                	push   0x1
c0010e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e9a:	e8 87 f4 ff ff       	call   c0010326 <VgaText::disableBlink(bool)>
c0010e9f:	83 c4 10             	add    esp,0x10
c0010ea2:	83 ec 0c             	sub    esp,0xc
c0010ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea9:	e8 e8 fc ff ff       	call   c0010b96 <VgaText::clearScreen()>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb5:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ebd:	05 02 01 00 00       	add    eax,0x102
c0010ec2:	83 ec 04             	sub    esp,0x4
c0010ec5:	68 96 00 00 00       	push   0x96
c0010eca:	6a 00                	push   0x0
c0010ecc:	50                   	push   eax
c0010ecd:	e8 7e f8 fe ff       	call   c0000750 <memset>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ed9:	05 98 01 00 00       	add    eax,0x198
c0010ede:	83 ec 04             	sub    esp,0x4
c0010ee1:	68 2c 01 00 00       	push   0x12c
c0010ee6:	6a 00                	push   0x0
c0010ee8:	50                   	push   eax
c0010ee9:	e8 62 f8 fe ff       	call   c0000750 <memset>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	90                   	nop
c0010ef2:	5b                   	pop    ebx
c0010ef3:	5e                   	pop    esi
c0010ef4:	5f                   	pop    edi
c0010ef5:	c3                   	ret    

c0010ef6 <VgaText::receiveKey(unsigned char)>:
c0010ef6:	55                   	push   ebp
c0010ef7:	57                   	push   edi
c0010ef8:	56                   	push   esi
c0010ef9:	53                   	push   ebx
c0010efa:	83 ec 1c             	sub    esp,0x1c
c0010efd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f01:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f05:	84 db                	test   bl,bl
c0010f07:	0f 84 c9 00 00 00    	je     c0010fd6 <VgaText::receiveKey(unsigned char)+0xe0>
c0010f0d:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010f13:	80 fb 08             	cmp    bl,0x8
c0010f16:	75 2c                	jne    c0010f44 <VgaText::receiveKey(unsigned char)+0x4e>
c0010f18:	83 ec 0c             	sub    esp,0xc
c0010f1b:	57                   	push   edi
c0010f1c:	e8 4b f8 fe ff       	call   c000076c <strlen>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	85 c0                	test   eax,eax
c0010f26:	74 41                	je     c0010f69 <VgaText::receiveKey(unsigned char)+0x73>
c0010f28:	50                   	push   eax
c0010f29:	50                   	push   eax
c0010f2a:	6a 08                	push   0x8
c0010f2c:	56                   	push   esi
c0010f2d:	e8 be fc ff ff       	call   c0010bf0 <VgaText::putchar(char)>
c0010f32:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f35:	e8 32 f8 fe ff       	call   c000076c <strlen>
c0010f3a:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010f42:	eb 22                	jmp    c0010f66 <VgaText::receiveKey(unsigned char)+0x70>
c0010f44:	0f be c3             	movsx  eax,bl
c0010f47:	52                   	push   edx
c0010f48:	52                   	push   edx
c0010f49:	50                   	push   eax
c0010f4a:	56                   	push   esi
c0010f4b:	e8 a0 fc ff ff       	call   c0010bf0 <VgaText::putchar(char)>
c0010f50:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010f54:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010f59:	59                   	pop    ecx
c0010f5a:	5d                   	pop    ebp
c0010f5b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010f5f:	50                   	push   eax
c0010f60:	57                   	push   edi
c0010f61:	e8 e6 f9 fe ff       	call   c000094c <strcat>
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010f70:	75 05                	jne    c0010f77 <VgaText::receiveKey(unsigned char)+0x81>
c0010f72:	80 fb 0a             	cmp    bl,0xa
c0010f75:	75 53                	jne    c0010fca <VgaText::receiveKey(unsigned char)+0xd4>
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010f80:	53                   	push   ebx
c0010f81:	e8 e6 f7 fe ff       	call   c000076c <strlen>
c0010f86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f89:	89 c5                	mov    ebp,eax
c0010f8b:	e8 dc f7 fe ff       	call   c000076c <strlen>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f97:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f9c:	76 10                	jbe    c0010fae <VgaText::receiveKey(unsigned char)+0xb8>
c0010f9e:	83 ec 0c             	sub    esp,0xc
c0010fa1:	68 9f af 02 c0       	push   0xc002af9f
c0010fa6:	e8 ee 96 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0010fab:	83 c4 10             	add    esp,0x10
c0010fae:	50                   	push   eax
c0010faf:	50                   	push   eax
c0010fb0:	57                   	push   edi
c0010fb1:	53                   	push   ebx
c0010fb2:	e8 95 f9 fe ff       	call   c000094c <strcat>
c0010fb7:	83 c4 0c             	add    esp,0xc
c0010fba:	68 96 00 00 00       	push   0x96
c0010fbf:	6a 00                	push   0x0
c0010fc1:	57                   	push   edi
c0010fc2:	e8 89 f7 fe ff       	call   c0000750 <memset>
c0010fc7:	83 c4 10             	add    esp,0x10
c0010fca:	83 ec 0c             	sub    esp,0xc
c0010fcd:	56                   	push   esi
c0010fce:	e8 3d fa ff ff       	call   c0010a10 <VgaText::doUpdate()>
c0010fd3:	83 c4 10             	add    esp,0x10
c0010fd6:	83 c4 1c             	add    esp,0x1c
c0010fd9:	5b                   	pop    ebx
c0010fda:	5e                   	pop    esi
c0010fdb:	5f                   	pop    edi
c0010fdc:	5d                   	pop    ebp
c0010fdd:	c3                   	ret    

c0010fde <VgaText::write(unsigned long long, void*, int*)>:
c0010fde:	55                   	push   ebp
c0010fdf:	57                   	push   edi
c0010fe0:	56                   	push   esi
c0010fe1:	53                   	push   ebx
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010fe9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010fed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ff1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010ff8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010ffb:	39 eb                	cmp    ebx,ebp
c0010ffd:	74 13                	je     c0011012 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010fff:	43                   	inc    ebx
c0011000:	50                   	push   eax
c0011001:	50                   	push   eax
c0011002:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011006:	50                   	push   eax
c0011007:	56                   	push   esi
c0011008:	e8 e3 fb ff ff       	call   c0010bf0 <VgaText::putchar(char)>
c001100d:	83 c4 10             	add    esp,0x10
c0011010:	eb e9                	jmp    c0010ffb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011012:	83 ec 0c             	sub    esp,0xc
c0011015:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001101c:	56                   	push   esi
c001101d:	e8 ee f9 ff ff       	call   c0010a10 <VgaText::doUpdate()>
c0011022:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011026:	89 38                	mov    DWORD PTR [eax],edi
c0011028:	83 c4 1c             	add    esp,0x1c
c001102b:	31 c0                	xor    eax,eax
c001102d:	5b                   	pop    ebx
c001102e:	5e                   	pop    esi
c001102f:	5f                   	pop    edi
c0011030:	5d                   	pop    ebp
c0011031:	c3                   	ret    

c0011032 <newTerminal(char*)>:
c0011032:	83 ec 28             	sub    esp,0x28
c0011035:	68 c4 02 00 00       	push   0x2c4
c001103a:	e8 4d e8 ff ff       	call   c000f88c <malloc>
c001103f:	5a                   	pop    edx
c0011040:	59                   	pop    ecx
c0011041:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011045:	50                   	push   eax
c0011046:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001104a:	e8 f9 fc ff ff       	call   c0010d48 <VgaText::VgaText(char const*)>
c001104f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011053:	83 c4 2c             	add    esp,0x2c
c0011056:	c3                   	ret    
c0011057:	90                   	nop

c0011058 <TSS::TSS()>:
c0011058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011063:	90                   	nop
c0011064:	c3                   	ret    
c0011065:	90                   	nop

c0011066 <TSS::setESP(unsigned long)>:
c0011066:	55                   	push   ebp
c0011067:	89 e5                	mov    ebp,esp
c0011069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001106c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001106f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011072:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011075:	90                   	nop
c0011076:	5d                   	pop    ebp
c0011077:	c3                   	ret    

c0011078 <TSS::flush()>:
c0011078:	55                   	push   ebp
c0011079:	89 e5                	mov    ebp,esp
c001107b:	83 ec 10             	sub    esp,0x10
c001107e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011081:	8b 00                	mov    eax,DWORD PTR [eax]
c0011083:	83 c8 03             	or     eax,0x3
c0011086:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001108a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001108e:	66 89 d0             	mov    ax,dx
c0011091:	0f 00 d8             	ltr    ax
c0011094:	90                   	nop
c0011095:	c9                   	leave  
c0011096:	c3                   	ret    
c0011097:	90                   	nop

c0011098 <TSS::setup(unsigned long, unsigned long)>:
c0011098:	55                   	push   ebp
c0011099:	89 e5                	mov    ebp,esp
c001109b:	83 ec 18             	sub    esp,0x18
c001109e:	83 ec 0c             	sub    esp,0xc
c00110a1:	6a 68                	push   0x68
c00110a3:	e8 e4 e7 ff ff       	call   c000f88c <malloc>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	89 c2                	mov    edx,eax
c00110ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b9:	83 ec 04             	sub    esp,0x4
c00110bc:	6a 68                	push   0x68
c00110be:	6a 00                	push   0x0
c00110c0:	50                   	push   eax
c00110c1:	e8 8a f6 fe ff       	call   c0000750 <memset>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110cf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00110d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110db:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00110e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110ea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00110f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001110b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011117:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001111d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011120:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011123:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001113b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001113e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011147:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001114a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001114d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011153:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001115a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011160:	0f 20 da             	mov    edx,cr3
c0011163:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011166:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011169:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001116c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001116f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011172:	83 ec 08             	sub    esp,0x8
c0011175:	50                   	push   eax
c0011176:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011179:	50                   	push   eax
c001117a:	e8 e9 de ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	83 ec 08             	sub    esp,0x8
c0011185:	6a 68                	push   0x68
c0011187:	8d 45 ec             	lea    eax,[ebp-0x14]
c001118a:	50                   	push   eax
c001118b:	e8 f4 de ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011197:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001119a:	83 e0 0f             	and    eax,0xf
c001119d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00111a0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00111a3:	83 c8 40             	or     eax,0x40
c00111a6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00111a9:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00111ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111b4:	05 78 01 00 00       	add    eax,0x178
c00111b9:	83 ec 04             	sub    esp,0x4
c00111bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00111bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00111c2:	50                   	push   eax
c00111c3:	e8 f0 de ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c00111c8:	83 c4 10             	add    esp,0x10
c00111cb:	89 c2                	mov    edx,eax
c00111cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111d0:	89 10                	mov    DWORD PTR [eax],edx
c00111d2:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00111d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111dd:	05 78 01 00 00       	add    eax,0x178
c00111e2:	83 ec 0c             	sub    esp,0xc
c00111e5:	50                   	push   eax
c00111e6:	e8 11 df ff ff       	call   c000f0fc <GDT::flush()>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00111f3:	83 ec 08             	sub    esp,0x8
c00111f6:	50                   	push   eax
c00111f7:	68 08 b0 02 c0       	push   0xc002b008
c00111fc:	e8 2c 19 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011207:	8b 00                	mov    eax,DWORD PTR [eax]
c0011209:	c9                   	leave  
c001120a:	c3                   	ret    
c001120b:	90                   	nop

c001120c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001120c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011210:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011217:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001121c:	75 08                	jne    c0011226 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001121e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011224:	eb 38                	jmp    c001125e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011226:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001122b:	75 17                	jne    c0011244 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001122d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011232:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011235:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001123b:	8b 10                	mov    edx,DWORD PTR [eax]
c001123d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011241:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011244:	89 c1                	mov    ecx,eax
c0011246:	83 e1 fd             	and    ecx,0xfffffffd
c0011249:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001124f:	74 cd                	je     c001121e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011251:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011256:	83 e0 ef             	and    eax,0xffffffef
c0011259:	83 f8 08             	cmp    eax,0x8
c001125c:	76 c0                	jbe    c001121e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001125e:	31 c0                	xor    eax,eax
c0011260:	c3                   	ret    
c0011261:	90                   	nop

c0011262 <ReservedFilename::isAtty()>:
c0011262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011266:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011269:	31 c0                	xor    eax,eax
c001126b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011271:	74 09                	je     c001127c <ReservedFilename::isAtty()+0x1a>
c0011273:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011279:	0f 94 c0             	sete   al
c001127c:	c3                   	ret    
c001127d:	90                   	nop

c001127e <ReservedFilename::write(unsigned long long, void*, int*)>:
c001127e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011282:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001128d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011292:	75 08                	jne    c001129c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011294:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001129a:	eb 3d                	jmp    c00112d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001129c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00112a1:	75 17                	jne    c00112ba <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00112a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112b7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00112ba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112bf:	75 04                	jne    c00112c5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00112c1:	89 0a                	mov    DWORD PTR [edx],ecx
c00112c3:	eb 14                	jmp    c00112d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00112c5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00112ca:	74 c8                	je     c0011294 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00112cc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112d1:	83 e0 ef             	and    eax,0xffffffef
c00112d4:	83 f8 08             	cmp    eax,0x8
c00112d7:	76 bb                	jbe    c0011294 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00112d9:	31 c0                	xor    eax,eax
c00112db:	c3                   	ret    

c00112dc <UnixFile::getFileDescriptor()>:
c00112dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e3:	c3                   	ret    

c00112e4 <UnixFile::UnixFile(int)>:
c00112e4:	53                   	push   ebx
c00112e5:	83 ec 28             	sub    esp,0x28
c00112e8:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c00112ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112f1:	89 10                	mov    DWORD PTR [eax],edx
c00112f3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00112fb:	0f 8f 8c 01 00 00    	jg     c001148d <UnixFile::UnixFile(int)+0x1a9>
c0011301:	a1 20 e1 02 c0       	mov    eax,ds:0xc002e120
c0011306:	8d 50 01             	lea    edx,[eax+0x1]
c0011309:	89 15 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,edx
c001130f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011313:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011316:	83 ec 08             	sub    esp,0x8
c0011319:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001131d:	68 f8 f2 02 c0       	push   0xc002f2f8
c0011322:	e8 d5 7e 01 00       	call   c00291fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	a0 f4 f2 02 c0       	mov    al,ds:0xc002f2f4
c001132f:	83 f0 01             	xor    eax,0x1
c0011332:	84 c0                	test   al,al
c0011334:	0f 84 54 01 00 00    	je     c001148e <UnixFile::UnixFile(int)+0x1aa>
c001133a:	c6 05 f4 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2f4,0x1
c0011341:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011349:	83 ec 0c             	sub    esp,0xc
c001134c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011350:	e8 37 e5 ff ff       	call   c000f88c <malloc>
c0011355:	83 c4 10             	add    esp,0x10
c0011358:	89 c3                	mov    ebx,eax
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	68 03 ff ff 0f       	push   0xfffff03
c0011362:	53                   	push   ebx
c0011363:	e8 2c 01 00 00       	call   c0011494 <ReservedFilename::ReservedFilename(int)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	89 1d ec f2 02 c0    	mov    DWORD PTR ds:0xc002f2ec,ebx
c0011371:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011380:	e8 07 e5 ff ff       	call   c000f88c <malloc>
c0011385:	83 c4 10             	add    esp,0x10
c0011388:	89 c3                	mov    ebx,eax
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	68 01 ff ff 0f       	push   0xfffff01
c0011392:	53                   	push   ebx
c0011393:	e8 fc 00 00 00       	call   c0011494 <ReservedFilename::ReservedFilename(int)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	89 1d f0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2f0,ebx
c00113a1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00113a9:	83 ec 0c             	sub    esp,0xc
c00113ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00113b0:	e8 d7 e4 ff ff       	call   c000f88c <malloc>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	89 c3                	mov    ebx,eax
c00113ba:	83 ec 08             	sub    esp,0x8
c00113bd:	68 00 ff ff 0f       	push   0xfffff00
c00113c2:	53                   	push   ebx
c00113c3:	e8 cc 00 00 00       	call   c0011494 <ReservedFilename::ReservedFilename(int)>
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	89 1d e4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2e4,ebx
c00113d1:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00113d9:	83 ec 0c             	sub    esp,0xc
c00113dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00113e0:	e8 a7 e4 ff ff       	call   c000f88c <malloc>
c00113e5:	83 c4 10             	add    esp,0x10
c00113e8:	89 c3                	mov    ebx,eax
c00113ea:	83 ec 08             	sub    esp,0x8
c00113ed:	68 02 ff ff 0f       	push   0xfffff02
c00113f2:	53                   	push   ebx
c00113f3:	e8 9c 00 00 00       	call   c0011494 <ReservedFilename::ReservedFilename(int)>
c00113f8:	83 c4 10             	add    esp,0x10
c00113fb:	89 1d e8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2e8,ebx
c0011401:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011409:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001140e:	7f 7e                	jg     c001148e <UnixFile::UnixFile(int)+0x1aa>
c0011410:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011418:	83 ec 0c             	sub    esp,0xc
c001141b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001141f:	e8 68 e4 ff ff       	call   c000f88c <malloc>
c0011424:	83 c4 10             	add    esp,0x10
c0011427:	89 c3                	mov    ebx,eax
c0011429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001142d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011432:	83 ec 08             	sub    esp,0x8
c0011435:	50                   	push   eax
c0011436:	53                   	push   ebx
c0011437:	e8 58 00 00 00       	call   c0011494 <ReservedFilename::ReservedFilename(int)>
c001143c:	83 c4 10             	add    esp,0x10
c001143f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011443:	89 1c 85 c0 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d40],ebx
c001144a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011459:	e8 2e e4 ff ff       	call   c000f88c <malloc>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	89 c3                	mov    ebx,eax
c0011463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011467:	05 20 ff ff 0f       	add    eax,0xfffff20
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	50                   	push   eax
c0011470:	53                   	push   ebx
c0011471:	e8 1e 00 00 00       	call   c0011494 <ReservedFilename::ReservedFilename(int)>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001147d:	89 1c 85 80 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d80],ebx
c0011484:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011488:	e9 7c ff ff ff       	jmp    c0011409 <UnixFile::UnixFile(int)+0x125>
c001148d:	90                   	nop
c001148e:	83 c4 28             	add    esp,0x28
c0011491:	5b                   	pop    ebx
c0011492:	c3                   	ret    
c0011493:	90                   	nop

c0011494 <ReservedFilename::ReservedFilename(int)>:
c0011494:	83 ec 0c             	sub    esp,0xc
c0011497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001149b:	83 ec 08             	sub    esp,0x8
c001149e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a2:	50                   	push   eax
c00114a3:	e8 3c fe ff ff       	call   c00112e4 <UnixFile::UnixFile(int)>
c00114a8:	83 c4 10             	add    esp,0x10
c00114ab:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c00114b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b4:	89 10                	mov    DWORD PTR [eax],edx
c00114b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00114be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c1:	90                   	nop
c00114c2:	83 c4 0c             	add    esp,0xc
c00114c5:	c3                   	ret    

c00114c6 <UnixFile::~UnixFile()>:
c00114c6:	83 ec 1c             	sub    esp,0x1c
c00114c9:	ba f4 b0 02 c0       	mov    edx,0xc002b0f4
c00114ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114d2:	89 10                	mov    DWORD PTR [eax],edx
c00114d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114db:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00114e0:	7f 73                	jg     c0011555 <UnixFile::~UnixFile()+0x8f>
c00114e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	68 f8 f2 02 c0       	push   0xc002f2f8
c00114f2:	e8 d9 7d 01 00       	call   c00292d0 <LinkedList<UnixFile>::getFirstElement()>
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114fe:	83 ec 0c             	sub    esp,0xc
c0011501:	68 f8 f2 02 c0       	push   0xc002f2f8
c0011506:	e8 cd 7d 01 00       	call   c00292d8 <LinkedList<UnixFile>::removeFirst()>
c001150b:	83 c4 10             	add    esp,0x10
c001150e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011512:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011516:	74 40                	je     c0011558 <UnixFile::~UnixFile()+0x92>
c0011518:	83 ec 08             	sub    esp,0x8
c001151b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001151f:	68 f8 f2 02 c0       	push   0xc002f2f8
c0011524:	e8 d3 7c 01 00       	call   c00291fc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011530:	8d 50 01             	lea    edx,[eax+0x1]
c0011533:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011537:	3d 88 13 00 00       	cmp    eax,0x1388
c001153c:	0f 94 c0             	sete   al
c001153f:	84 c0                	test   al,al
c0011541:	74 a7                	je     c00114ea <UnixFile::~UnixFile()+0x24>
c0011543:	83 ec 0c             	sub    esp,0xc
c0011546:	68 cc b0 02 c0       	push   0xc002b0cc
c001154b:	e8 49 91 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011550:	83 c4 10             	add    esp,0x10
c0011553:	eb 95                	jmp    c00114ea <UnixFile::~UnixFile()+0x24>
c0011555:	90                   	nop
c0011556:	eb 01                	jmp    c0011559 <UnixFile::~UnixFile()+0x93>
c0011558:	90                   	nop
c0011559:	90                   	nop
c001155a:	83 c4 1c             	add    esp,0x1c
c001155d:	c3                   	ret    

c001155e <UnixFile::~UnixFile()>:
c001155e:	83 ec 0c             	sub    esp,0xc
c0011561:	83 ec 0c             	sub    esp,0xc
c0011564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011568:	e8 59 ff ff ff       	call   c00114c6 <UnixFile::~UnixFile()>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	6a 0c                	push   0xc
c0011575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011579:	e8 cf 14 00 00       	call   c0012a4d <operator delete(void*, unsigned long)>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	83 c4 0c             	add    esp,0xc
c0011584:	c3                   	ret    
c0011585:	90                   	nop

c0011586 <ReservedFilename::~ReservedFilename()>:
c0011586:	83 ec 0c             	sub    esp,0xc
c0011589:	ba 10 b1 02 c0       	mov    edx,0xc002b110
c001158e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011592:	89 10                	mov    DWORD PTR [eax],edx
c0011594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011598:	83 ec 0c             	sub    esp,0xc
c001159b:	50                   	push   eax
c001159c:	e8 25 ff ff ff       	call   c00114c6 <UnixFile::~UnixFile()>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	90                   	nop
c00115a5:	83 c4 0c             	add    esp,0xc
c00115a8:	c3                   	ret    
c00115a9:	90                   	nop

c00115aa <ReservedFilename::~ReservedFilename()>:
c00115aa:	83 ec 0c             	sub    esp,0xc
c00115ad:	83 ec 0c             	sub    esp,0xc
c00115b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115b4:	e8 cd ff ff ff       	call   c0011586 <ReservedFilename::~ReservedFilename()>
c00115b9:	83 c4 10             	add    esp,0x10
c00115bc:	83 ec 08             	sub    esp,0x8
c00115bf:	6a 0c                	push   0xc
c00115c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c5:	e8 83 14 00 00       	call   c0012a4d <operator delete(void*, unsigned long)>
c00115ca:	83 c4 10             	add    esp,0x10
c00115cd:	83 c4 0c             	add    esp,0xc
c00115d0:	c3                   	ret    

c00115d1 <getFromFileDescriptor(int)>:
c00115d1:	53                   	push   ebx
c00115d2:	83 ec 08             	sub    esp,0x8
c00115d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115d9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00115df:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00115e5:	7f 2c                	jg     c0011613 <getFromFileDescriptor(int)+0x42>
c00115e7:	83 ec 0c             	sub    esp,0xc
c00115ea:	68 f8 f2 02 c0       	push   0xc002f2f8
c00115ef:	e8 dc 7c 01 00       	call   c00292d0 <LinkedList<UnixFile>::getFirstElement()>
c00115f4:	83 c4 10             	add    esp,0x10
c00115f7:	85 c0                	test   eax,eax
c00115f9:	75 04                	jne    c00115ff <getFromFileDescriptor(int)+0x2e>
c00115fb:	31 c0                	xor    eax,eax
c00115fd:	eb 6e                	jmp    c001166d <getFromFileDescriptor(int)+0x9c>
c00115ff:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011602:	74 69                	je     c001166d <getFromFileDescriptor(int)+0x9c>
c0011604:	52                   	push   edx
c0011605:	52                   	push   edx
c0011606:	50                   	push   eax
c0011607:	68 f8 f2 02 c0       	push   0xc002f2f8
c001160c:	e8 69 7d 01 00       	call   c002937a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011611:	eb e1                	jmp    c00115f4 <getFromFileDescriptor(int)+0x23>
c0011613:	a1 ec f2 02 c0       	mov    eax,ds:0xc002f2ec
c0011618:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001161e:	74 4d                	je     c001166d <getFromFileDescriptor(int)+0x9c>
c0011620:	a1 f0 f2 02 c0       	mov    eax,ds:0xc002f2f0
c0011625:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001162b:	74 40                	je     c001166d <getFromFileDescriptor(int)+0x9c>
c001162d:	a1 e8 f2 02 c0       	mov    eax,ds:0xc002f2e8
c0011632:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011638:	74 33                	je     c001166d <getFromFileDescriptor(int)+0x9c>
c001163a:	a1 e4 f2 02 c0       	mov    eax,ds:0xc002f2e4
c001163f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011645:	74 26                	je     c001166d <getFromFileDescriptor(int)+0x9c>
c0011647:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001164d:	83 f8 08             	cmp    eax,0x8
c0011650:	77 09                	ja     c001165b <getFromFileDescriptor(int)+0x8a>
c0011652:	8b 04 85 c0 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0d40]
c0011659:	eb 12                	jmp    c001166d <getFromFileDescriptor(int)+0x9c>
c001165b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011661:	83 fb 08             	cmp    ebx,0x8
c0011664:	77 95                	ja     c00115fb <getFromFileDescriptor(int)+0x2a>
c0011666:	8b 04 9d 80 f2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0d80]
c001166d:	83 c4 08             	add    esp,0x8
c0011670:	5b                   	pop    ebx
c0011671:	c3                   	ret    

c0011672 <__static_initialization_and_destruction_0(int, int)>:
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001167a:	75 34                	jne    c00116b0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001167c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011684:	75 2a                	jne    c00116b0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011686:	83 ec 0c             	sub    esp,0xc
c0011689:	68 f8 f2 02 c0       	push   0xc002f2f8
c001168e:	e8 11 7b 01 00       	call   c00291a4 <LinkedList<UnixFile>::LinkedList()>
c0011693:	83 c4 10             	add    esp,0x10
c0011696:	83 ec 04             	sub    esp,0x4
c0011699:	68 ac e0 02 c0       	push   0xc002e0ac
c001169e:	68 f8 f2 02 c0       	push   0xc002f2f8
c00116a3:	68 a2 91 02 c0       	push   0xc00291a2
c00116a8:	e8 1a 13 00 00       	call   c00129c7 <__cxa_atexit>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	90                   	nop
c00116b1:	83 c4 0c             	add    esp,0xc
c00116b4:	c3                   	ret    

c00116b5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00116b5:	83 ec 0c             	sub    esp,0xc
c00116b8:	83 ec 08             	sub    esp,0x8
c00116bb:	68 ff ff 00 00       	push   0xffff
c00116c0:	6a 01                	push   0x1
c00116c2:	e8 ab ff ff ff       	call   c0011672 <__static_initialization_and_destruction_0(int, int)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	83 c4 0c             	add    esp,0xc
c00116cd:	c3                   	ret    

c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00116ce:	53                   	push   ebx
c00116cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00116d7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00116dd:	89 c8                	mov    eax,ecx
c00116df:	d1 e8                	shr    eax,1
c00116e1:	03 05 28 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e128
c00116e7:	83 e1 01             	and    ecx,0x1
c00116ea:	8a 10                	mov    dl,BYTE PTR [eax]
c00116ec:	75 09                	jne    c00116f7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00116ee:	83 e2 f0             	and    edx,0xfffffff0
c00116f1:	09 da                	or     edx,ebx
c00116f3:	88 10                	mov    BYTE PTR [eax],dl
c00116f5:	5b                   	pop    ebx
c00116f6:	c3                   	ret    
c00116f7:	c1 e3 04             	shl    ebx,0x4
c00116fa:	83 e2 0f             	and    edx,0xf
c00116fd:	09 da                	or     edx,ebx
c00116ff:	88 10                	mov    BYTE PTR [eax],dl
c0011701:	5b                   	pop    ebx
c0011702:	c3                   	ret    

c0011703 <Virt::getPageState(unsigned long)>:
c0011703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011707:	8b 0d 28 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e128
c001170d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011713:	89 d0                	mov    eax,edx
c0011715:	d1 e8                	shr    eax,1
c0011717:	83 e2 01             	and    edx,0x1
c001171a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001171d:	75 04                	jne    c0011723 <Virt::getPageState(unsigned long)+0x20>
c001171f:	83 e0 0f             	and    eax,0xf
c0011722:	c3                   	ret    
c0011723:	c0 e8 04             	shr    al,0x4
c0011726:	c3                   	ret    

c0011727 <Virt::allocateKernelVirtualPages(int)>:
c0011727:	55                   	push   ebp
c0011728:	31 ed                	xor    ebp,ebp
c001172a:	57                   	push   edi
c001172b:	56                   	push   esi
c001172c:	53                   	push   ebx
c001172d:	31 db                	xor    ebx,ebx
c001172f:	83 ec 1c             	sub    esp,0x1c
c0011732:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011736:	8b 3d 24 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e124
c001173c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011741:	57                   	push   edi
c0011742:	e8 bc ff ff ff       	call   c0011703 <Virt::getPageState(unsigned long)>
c0011747:	5a                   	pop    edx
c0011748:	84 c0                	test   al,al
c001174a:	75 3a                	jne    c0011786 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001174c:	85 db                	test   ebx,ebx
c001174e:	75 02                	jne    c0011752 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011750:	89 fd                	mov    ebp,edi
c0011752:	43                   	inc    ebx
c0011753:	39 f3                	cmp    ebx,esi
c0011755:	74 5a                	je     c00117b1 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011757:	47                   	inc    edi
c0011758:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001175e:	76 31                	jbe    c0011791 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011760:	c7 05 24 e1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e124,0xc8000
c001176a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001176f:	75 28                	jne    c0011799 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011771:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011776:	bf 00 80 0c 00       	mov    edi,0xc8000
c001177b:	57                   	push   edi
c001177c:	e8 82 ff ff ff       	call   c0011703 <Virt::getPageState(unsigned long)>
c0011781:	5a                   	pop    edx
c0011782:	84 c0                	test   al,al
c0011784:	74 c6                	je     c001174c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011786:	31 db                	xor    ebx,ebx
c0011788:	47                   	inc    edi
c0011789:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001178f:	77 cf                	ja     c0011760 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011791:	89 3d 24 e1 02 c0    	mov    DWORD PTR ds:0xc002e124,edi
c0011797:	eb a8                	jmp    c0011741 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011799:	83 ec 0c             	sub    esp,0xc
c001179c:	68 24 b1 02 c0       	push   0xc002b124
c00117a1:	e8 f3 8e 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00117a6:	8b 3d 24 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e124
c00117ac:	83 c4 10             	add    esp,0x10
c00117af:	eb 90                	jmp    c0011741 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00117b1:	89 2d 24 e1 02 c0    	mov    DWORD PTR ds:0xc002e124,ebp
c00117b7:	4b                   	dec    ebx
c00117b8:	74 5f                	je     c0011819 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00117ba:	85 f6                	test   esi,esi
c00117bc:	74 3d                	je     c00117fb <Virt::allocateKernelVirtualPages(int)+0xd4>
c00117be:	89 e8                	mov    eax,ebp
c00117c0:	31 db                	xor    ebx,ebx
c00117c2:	8d 7e ff             	lea    edi,[esi-0x1]
c00117c5:	eb 14                	jmp    c00117db <Virt::allocateKernelVirtualPages(int)+0xb4>
c00117c7:	6a 01                	push   0x1
c00117c9:	43                   	inc    ebx
c00117ca:	50                   	push   eax
c00117cb:	e8 fe fe ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117d0:	58                   	pop    eax
c00117d1:	39 f3                	cmp    ebx,esi
c00117d3:	5a                   	pop    edx
c00117d4:	74 25                	je     c00117fb <Virt::allocateKernelVirtualPages(int)+0xd4>
c00117d6:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c00117db:	8d 50 01             	lea    edx,[eax+0x1]
c00117de:	85 db                	test   ebx,ebx
c00117e0:	89 15 24 e1 02 c0    	mov    DWORD PTR ds:0xc002e124,edx
c00117e6:	74 20                	je     c0011808 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00117e8:	39 df                	cmp    edi,ebx
c00117ea:	75 db                	jne    c00117c7 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00117ec:	6a 03                	push   0x3
c00117ee:	43                   	inc    ebx
c00117ef:	50                   	push   eax
c00117f0:	e8 d9 fe ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117f5:	59                   	pop    ecx
c00117f6:	39 f3                	cmp    ebx,esi
c00117f8:	58                   	pop    eax
c00117f9:	75 db                	jne    c00117d6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00117fb:	83 c4 1c             	add    esp,0x1c
c00117fe:	89 e8                	mov    eax,ebp
c0011800:	5b                   	pop    ebx
c0011801:	c1 e0 0c             	shl    eax,0xc
c0011804:	5e                   	pop    esi
c0011805:	5f                   	pop    edi
c0011806:	5d                   	pop    ebp
c0011807:	c3                   	ret    
c0011808:	6a 02                	push   0x2
c001180a:	bb 01 00 00 00       	mov    ebx,0x1
c001180f:	50                   	push   eax
c0011810:	e8 b9 fe ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011815:	58                   	pop    eax
c0011816:	5a                   	pop    edx
c0011817:	eb bd                	jmp    c00117d6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011819:	6a 04                	push   0x4
c001181b:	8d 45 01             	lea    eax,[ebp+0x1]
c001181e:	55                   	push   ebp
c001181f:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c0011824:	e8 a5 fe ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011829:	59                   	pop    ecx
c001182a:	89 e8                	mov    eax,ebp
c001182c:	5b                   	pop    ebx
c001182d:	c1 e0 0c             	shl    eax,0xc
c0011830:	83 c4 1c             	add    esp,0x1c
c0011833:	5b                   	pop    ebx
c0011834:	5e                   	pop    esi
c0011835:	5f                   	pop    edi
c0011836:	5d                   	pop    ebp
c0011837:	c3                   	ret    

c0011838 <Virt::freeSwapfilePage(unsigned long)>:
c0011838:	53                   	push   ebx
c0011839:	8b 15 0c f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f30c
c001183f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011843:	b8 01 00 00 00       	mov    eax,0x1
c0011848:	89 cb                	mov    ebx,ecx
c001184a:	d3 e0                	shl    eax,cl
c001184c:	c1 eb 05             	shr    ebx,0x5
c001184f:	f7 d0                	not    eax
c0011851:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011854:	5b                   	pop    ebx
c0011855:	c3                   	ret    

c0011856 <Virt::swapIDToSector(unsigned long)>:
c0011856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001185a:	0f af 05 2c e1 02 c0 	imul   eax,DWORD PTR ds:0xc002e12c
c0011861:	03 05 34 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e134
c0011867:	c3                   	ret    

c0011868 <Virt::allocateSwapfilePage()>:
c0011868:	55                   	push   ebp
c0011869:	31 d2                	xor    edx,edx
c001186b:	57                   	push   edi
c001186c:	56                   	push   esi
c001186d:	53                   	push   ebx
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	8b 0d 2c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e12c
c0011877:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c001187c:	f7 f1                	div    ecx
c001187e:	39 0d 30 e1 02 c0    	cmp    DWORD PTR ds:0xc002e130,ecx
c0011884:	72 2d                	jb     c00118b3 <Virt::allocateSwapfilePage()+0x4b>
c0011886:	8b 35 0c f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f30c
c001188c:	8b 16                	mov    edx,DWORD PTR [esi]
c001188e:	f6 c2 01             	test   dl,0x1
c0011891:	74 3c                	je     c00118cf <Virt::allocateSwapfilePage()+0x67>
c0011893:	31 c9                	xor    ecx,ecx
c0011895:	bf 01 00 00 00       	mov    edi,0x1
c001189a:	eb 12                	jmp    c00118ae <Virt::allocateSwapfilePage()+0x46>
c001189c:	89 fd                	mov    ebp,edi
c001189e:	89 ca                	mov    edx,ecx
c00118a0:	d3 e5                	shl    ebp,cl
c00118a2:	c1 ea 05             	shr    edx,0x5
c00118a5:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00118a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00118aa:	85 ea                	test   edx,ebp
c00118ac:	74 2a                	je     c00118d8 <Virt::allocateSwapfilePage()+0x70>
c00118ae:	41                   	inc    ecx
c00118af:	39 c8                	cmp    eax,ecx
c00118b1:	77 e9                	ja     c001189c <Virt::allocateSwapfilePage()+0x34>
c00118b3:	83 ec 0c             	sub    esp,0xc
c00118b6:	68 ab b2 02 c0       	push   0xc002b2ab
c00118bb:	e8 d9 8d 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	31 c9                	xor    ecx,ecx
c00118c5:	83 c4 0c             	add    esp,0xc
c00118c8:	89 c8                	mov    eax,ecx
c00118ca:	5b                   	pop    ebx
c00118cb:	5e                   	pop    esi
c00118cc:	5f                   	pop    edi
c00118cd:	5d                   	pop    ebp
c00118ce:	c3                   	ret    
c00118cf:	89 f3                	mov    ebx,esi
c00118d1:	bd 01 00 00 00       	mov    ebp,0x1
c00118d6:	31 c9                	xor    ecx,ecx
c00118d8:	09 ea                	or     edx,ebp
c00118da:	89 c8                	mov    eax,ecx
c00118dc:	89 13                	mov    DWORD PTR [ebx],edx
c00118de:	83 c4 0c             	add    esp,0xc
c00118e1:	5b                   	pop    ebx
c00118e2:	5e                   	pop    esi
c00118e3:	5f                   	pop    edi
c00118e4:	5d                   	pop    ebp
c00118e5:	c3                   	ret    

c00118e6 <Virt::virtualMemorySetup()>:
c00118e6:	53                   	push   ebx
c00118e7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118ec:	83 ec 08             	sub    esp,0x8
c00118ef:	6a 0f                	push   0xf
c00118f1:	53                   	push   ebx
c00118f2:	43                   	inc    ebx
c00118f3:	e8 d6 fd ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118f8:	59                   	pop    ecx
c00118f9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118ff:	58                   	pop    eax
c0011900:	75 ed                	jne    c00118ef <Virt::virtualMemorySetup()+0x9>
c0011902:	83 ec 08             	sub    esp,0x8
c0011905:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001190a:	68 00 00 00 c8       	push   0xc8000000
c001190f:	68 c2 b2 02 c0       	push   0xc002b2c2
c0011914:	e8 14 12 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011919:	58                   	pop    eax
c001191a:	5a                   	pop    edx
c001191b:	68 00 f0 ff ef       	push   0xeffff000
c0011920:	68 d6 b2 02 c0       	push   0xc002b2d6
c0011925:	e8 03 12 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001192a:	83 c4 10             	add    esp,0x10
c001192d:	83 ec 08             	sub    esp,0x8
c0011930:	6a 00                	push   0x0
c0011932:	53                   	push   ebx
c0011933:	43                   	inc    ebx
c0011934:	e8 95 fd ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011939:	83 c4 10             	add    esp,0x10
c001193c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011942:	75 e9                	jne    c001192d <Virt::virtualMemorySetup()+0x47>
c0011944:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	6a 0f                	push   0xf
c001194e:	53                   	push   ebx
c001194f:	43                   	inc    ebx
c0011950:	e8 79 fd ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001195e:	75 e9                	jne    c0011949 <Virt::virtualMemorySetup()+0x63>
c0011960:	83 c4 08             	add    esp,0x8
c0011963:	5b                   	pop    ebx
c0011964:	c3                   	ret    

c0011965 <Virt::swappingSetup()>:
c0011965:	c3                   	ret    

c0011966 <Virt::setupPageSwapping(int)>:
c0011966:	57                   	push   edi
c0011967:	56                   	push   esi
c0011968:	53                   	push   ebx
c0011969:	83 ec 1c             	sub    esp,0x1c
c001196c:	68 ea b2 02 c0       	push   0xc002b2ea
c0011971:	e8 b7 11 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011976:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001197d:	e8 0a df ff ff       	call   c000f88c <malloc>
c0011982:	83 c4 0c             	add    esp,0xc
c0011985:	89 c6                	mov    esi,eax
c0011987:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001198d:	68 fe b2 02 c0       	push   0xc002b2fe
c0011992:	50                   	push   eax
c0011993:	e8 f4 16 00 00       	call   c001308c <File::File(char const*, Process*)>
c0011998:	89 34 24             	mov    DWORD PTR [esp],esi
c001199b:	e8 c8 18 00 00       	call   c0013268 <File::unlink()>
c00119a0:	59                   	pop    ecx
c00119a1:	5b                   	pop    ebx
c00119a2:	6a 12                	push   0x12
c00119a4:	56                   	push   esi
c00119a5:	e8 46 17 00 00       	call   c00130f0 <File::open(FileOpenMode)>
c00119aa:	83 c4 10             	add    esp,0x10
c00119ad:	85 c0                	test   eax,eax
c00119af:	0f 85 5b 01 00 00    	jne    c0011b10 <Virt::setupPageSwapping(int)+0x1aa>
c00119b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119b9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119c1:	c1 e3 08             	shl    ebx,0x8
c00119c4:	83 ec 0c             	sub    esp,0xc
c00119c7:	68 00 00 01 00       	push   0x10000
c00119cc:	e8 bb de ff ff       	call   c000f88c <malloc>
c00119d1:	83 c4 0c             	add    esp,0xc
c00119d4:	89 c7                	mov    edi,eax
c00119d6:	68 00 00 01 00       	push   0x10000
c00119db:	68 ee 00 00 00       	push   0xee
c00119e0:	50                   	push   eax
c00119e1:	e8 6a ed fe ff       	call   c0000750 <memset>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	85 db                	test   ebx,ebx
c00119eb:	79 03                	jns    c00119f0 <Virt::setupPageSwapping(int)+0x8a>
c00119ed:	83 c3 0f             	add    ebx,0xf
c00119f0:	c1 fb 04             	sar    ebx,0x4
c00119f3:	4b                   	dec    ebx
c00119f4:	83 fb ff             	cmp    ebx,0xffffffff
c00119f7:	74 4f                	je     c0011a48 <Virt::setupPageSwapping(int)+0xe2>
c00119f9:	83 ec 0c             	sub    esp,0xc
c00119fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00119fe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011a02:	52                   	push   edx
c0011a03:	57                   	push   edi
c0011a04:	6a 00                	push   0x0
c0011a06:	68 00 00 01 00       	push   0x10000
c0011a0b:	56                   	push   esi
c0011a0c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011a0f:	83 c4 20             	add    esp,0x20
c0011a12:	85 c0                	test   eax,eax
c0011a14:	0f 85 e0 00 00 00    	jne    c0011afa <Virt::setupPageSwapping(int)+0x194>
c0011a1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a1e:	3d 00 00 01 00       	cmp    eax,0x10000
c0011a23:	74 ce                	je     c00119f3 <Virt::setupPageSwapping(int)+0x8d>
c0011a25:	83 ec 08             	sub    esp,0x8
c0011a28:	4b                   	dec    ebx
c0011a29:	50                   	push   eax
c0011a2a:	68 51 b3 02 c0       	push   0xc002b351
c0011a2f:	e8 f9 10 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011a34:	c7 04 24 5a b3 02 c0 	mov    DWORD PTR [esp],0xc002b35a
c0011a3b:	e8 59 8c 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011a40:	83 c4 10             	add    esp,0x10
c0011a43:	83 fb ff             	cmp    ebx,0xffffffff
c0011a46:	75 b1                	jne    c00119f9 <Virt::setupPageSwapping(int)+0x93>
c0011a48:	83 ec 0c             	sub    esp,0xc
c0011a4b:	56                   	push   esi
c0011a4c:	e8 fd 16 00 00       	call   c001314e <File::close()>
c0011a51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a54:	e8 53 de ff ff       	call   c000f8ac <rfree>
c0011a59:	83 c4 10             	add    esp,0x10
c0011a5c:	85 f6                	test   esi,esi
c0011a5e:	74 0c                	je     c0011a6c <Virt::setupPageSwapping(int)+0x106>
c0011a60:	83 ec 0c             	sub    esp,0xc
c0011a63:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a65:	56                   	push   esi
c0011a66:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a69:	83 c4 10             	add    esp,0x10
c0011a6c:	83 ec 08             	sub    esp,0x8
c0011a6f:	a1 a8 f7 02 c0       	mov    eax,ds:0xc002f7a8
c0011a74:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011a7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a7c:	68 fe b2 02 c0       	push   0xc002b2fe
c0011a81:	50                   	push   eax
c0011a82:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011a85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a89:	c6 05 38 e1 02 c0 43 	mov    BYTE PTR ds:0xc002e138,0x43
c0011a90:	c1 e2 0b             	shl    edx,0xb
c0011a93:	a3 34 e1 02 c0       	mov    ds:0xc002e134,eax
c0011a98:	89 15 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,edx
c0011a9e:	c7 05 2c e1 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e12c,0x8
c0011aa8:	c1 ea 08             	shr    edx,0x8
c0011aab:	89 14 24             	mov    DWORD PTR [esp],edx
c0011aae:	e8 d9 dd ff ff       	call   c000f88c <malloc>
c0011ab3:	83 c4 0c             	add    esp,0xc
c0011ab6:	89 c1                	mov    ecx,eax
c0011ab8:	a3 0c f3 02 c0       	mov    ds:0xc002f30c,eax
c0011abd:	31 d2                	xor    edx,edx
c0011abf:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0011ac4:	f7 35 2c e1 02 c0    	div    DWORD PTR ds:0xc002e12c
c0011aca:	c1 e8 05             	shr    eax,0x5
c0011acd:	50                   	push   eax
c0011ace:	6a 00                	push   0x0
c0011ad0:	51                   	push   ecx
c0011ad1:	e8 7a ec fe ff       	call   c0000750 <memset>
c0011ad6:	58                   	pop    eax
c0011ad7:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0011adc:	5a                   	pop    edx
c0011add:	31 d2                	xor    edx,edx
c0011adf:	f7 35 2c e1 02 c0    	div    DWORD PTR ds:0xc002e12c
c0011ae5:	c1 e8 05             	shr    eax,0x5
c0011ae8:	50                   	push   eax
c0011ae9:	68 60 b3 02 c0       	push   0xc002b360
c0011aee:	e8 3a 10 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011af3:	83 c4 20             	add    esp,0x20
c0011af6:	5b                   	pop    ebx
c0011af7:	5e                   	pop    esi
c0011af8:	5f                   	pop    edi
c0011af9:	c3                   	ret    
c0011afa:	83 ec 08             	sub    esp,0x8
c0011afd:	50                   	push   eax
c0011afe:	68 39 b3 02 c0       	push   0xc002b339
c0011b03:	e8 25 10 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011b08:	83 c4 10             	add    esp,0x10
c0011b0b:	e9 0a ff ff ff       	jmp    c0011a1a <Virt::setupPageSwapping(int)+0xb4>
c0011b10:	83 ec 08             	sub    esp,0x8
c0011b13:	50                   	push   eax
c0011b14:	68 15 b3 02 c0       	push   0xc002b315
c0011b19:	e8 0f 10 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011b1e:	c7 04 24 1e b3 02 c0 	mov    DWORD PTR [esp],0xc002b31e
c0011b25:	e8 6f 8b 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011b2a:	83 c4 10             	add    esp,0x10
c0011b2d:	e9 83 fe ff ff       	jmp    c00119b5 <Virt::setupPageSwapping(int)+0x4f>

c0011b32 <VAS::VAS()>:
c0011b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b4c:	a3 10 f3 02 c0       	mov    ds:0xc002f310,eax
c0011b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b55:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011b59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b5d:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b64:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011b6b:	90                   	nop
c0011b6c:	c3                   	ret    
c0011b6d:	90                   	nop

c0011b6e <VAS::VAS(VAS*)>:
c0011b6e:	83 ec 0c             	sub    esp,0xc
c0011b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011b87:	83 ec 0c             	sub    esp,0xc
c0011b8a:	68 44 b1 02 c0       	push   0xc002b144
c0011b8f:	e8 05 8b 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	90                   	nop
c0011b98:	83 c4 0c             	add    esp,0xc
c0011b9b:	c3                   	ret    

c0011b9c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ba0:	89 c2                	mov    edx,eax
c0011ba2:	c1 e8 0a             	shr    eax,0xa
c0011ba5:	c1 ea 16             	shr    edx,0x16
c0011ba8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bad:	19 c9                	sbb    ecx,ecx
c0011baf:	c1 e2 0c             	shl    edx,0xc
c0011bb2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011bb8:	25 fc 0f 00 00       	and    eax,0xffc
c0011bbd:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011bc4:	01 d0                	add    eax,edx
c0011bc6:	c3                   	ret    
c0011bc7:	90                   	nop

c0011bc8 <VAS::getPageTableEntry(unsigned long)>:
c0011bc8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011bcc:	89 ca                	mov    edx,ecx
c0011bce:	c1 e9 0a             	shr    ecx,0xa
c0011bd1:	c1 ea 16             	shr    edx,0x16
c0011bd4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011bda:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011be0:	c1 e0 0c             	shl    eax,0xc
c0011be3:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011be6:	c3                   	ret    

c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011be7:	57                   	push   edi
c0011be8:	56                   	push   esi
c0011be9:	be 01 00 00 00       	mov    esi,0x1
c0011bee:	53                   	push   ebx
c0011bef:	83 ec 10             	sub    esp,0x10
c0011bf2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bf6:	c1 eb 0c             	shr    ebx,0xc
c0011bf9:	eb 3f                	jmp    c0011c3a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011bfb:	83 ec 08             	sub    esp,0x8
c0011bfe:	57                   	push   edi
c0011bff:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c0011c05:	e8 be ff ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c13:	f6 c4 04             	test   ah,0x4
c0011c16:	75 5f                	jne    c0011c77 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c18:	80 fa 04             	cmp    dl,0x4
c0011c1b:	74 78                	je     c0011c95 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c1d:	80 fa 02             	cmp    dl,0x2
c0011c20:	0f 84 88 00 00 00    	je     c0011cae <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c26:	80 fa 03             	cmp    dl,0x3
c0011c29:	0f 84 ad 00 00 00    	je     c0011cdc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011c2f:	fe ca                	dec    dl
c0011c31:	0f 84 92 00 00 00    	je     c0011cc9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c37:	43                   	inc    ebx
c0011c38:	31 f6                	xor    esi,esi
c0011c3a:	53                   	push   ebx
c0011c3b:	89 df                	mov    edi,ebx
c0011c3d:	e8 c1 fa ff ff       	call   c0011703 <Virt::getPageState(unsigned long)>
c0011c42:	c1 e7 0c             	shl    edi,0xc
c0011c45:	59                   	pop    ecx
c0011c46:	84 c0                	test   al,al
c0011c48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011c4c:	75 ad                	jne    c0011bfb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011c4e:	83 ec 0c             	sub    esp,0xc
c0011c51:	68 7b b3 02 c0       	push   0xc002b37b
c0011c56:	e8 3e 8a 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011c5b:	58                   	pop    eax
c0011c5c:	5a                   	pop    edx
c0011c5d:	57                   	push   edi
c0011c5e:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c0011c64:	e8 5f ff ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c72:	f6 c4 04             	test   ah,0x4
c0011c75:	74 c0                	je     c0011c37 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c77:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011c7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c80:	83 ec 0c             	sub    esp,0xc
c0011c83:	50                   	push   eax
c0011c84:	e8 db de ff ff       	call   c000fb64 <Phys::freePage(unsigned long)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c90:	80 fa 04             	cmp    dl,0x4
c0011c93:	75 88                	jne    c0011c1d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011c95:	89 f0                	mov    eax,esi
c0011c97:	84 c0                	test   al,al
c0011c99:	75 47                	jne    c0011ce2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011c9b:	c7 44 24 20 68 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b168
c0011ca3:	83 c4 10             	add    esp,0x10
c0011ca6:	5b                   	pop    ebx
c0011ca7:	5e                   	pop    esi
c0011ca8:	5f                   	pop    edi
c0011ca9:	e9 eb 89 00 00       	jmp    c001a699 <Krnl::panic(char const*)>
c0011cae:	89 f0                	mov    eax,esi
c0011cb0:	84 c0                	test   al,al
c0011cb2:	75 15                	jne    c0011cc9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	68 97 b3 02 c0       	push   0xc002b397
c0011cbc:	e8 d8 89 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	e9 6e ff ff ff       	jmp    c0011c37 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cc9:	83 ec 08             	sub    esp,0x8
c0011ccc:	6a 00                	push   0x0
c0011cce:	53                   	push   ebx
c0011ccf:	e8 fa f9 ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cd4:	83 c4 10             	add    esp,0x10
c0011cd7:	e9 5b ff ff ff       	jmp    c0011c37 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cdc:	89 f0                	mov    eax,esi
c0011cde:	84 c0                	test   al,al
c0011ce0:	75 15                	jne    c0011cf7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ce2:	83 ec 08             	sub    esp,0x8
c0011ce5:	6a 00                	push   0x0
c0011ce7:	53                   	push   ebx
c0011ce8:	e8 e1 f9 ff ff       	call   c00116ce <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	83 c4 10             	add    esp,0x10
c0011cf3:	5b                   	pop    ebx
c0011cf4:	5e                   	pop    esi
c0011cf5:	5f                   	pop    edi
c0011cf6:	c3                   	ret    
c0011cf7:	c7 44 24 20 b3 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b3b3
c0011cff:	83 c4 10             	add    esp,0x10
c0011d02:	5b                   	pop    ebx
c0011d03:	5e                   	pop    esi
c0011d04:	5f                   	pop    edi
c0011d05:	e9 8f 89 00 00       	jmp    c001a699 <Krnl::panic(char const*)>

c0011d0a <VAS::freeAllocatedPages(unsigned long)>:
c0011d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d12:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d16:	74 09                	je     c0011d21 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d1c:	e9 c6 fe ff ff       	jmp    c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d21:	c7 44 24 04 8c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b18c
c0011d29:	e9 ff 0d 00 00       	jmp    c0012b2d <Dbg::kprintf(char const*, ...)>

c0011d2e <VAS::virtualToPhysical(unsigned long)>:
c0011d2e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d32:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d36:	e8 8d fe ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c0011d3b:	5a                   	pop    edx
c0011d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3e:	59                   	pop    ecx
c0011d3f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d44:	c3                   	ret    
c0011d45:	90                   	nop

c0011d46 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011d46:	55                   	push   ebp
c0011d47:	57                   	push   edi
c0011d48:	56                   	push   esi
c0011d49:	53                   	push   ebx
c0011d4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011d4e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011d52:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011d56:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011d5a:	85 db                	test   ebx,ebx
c0011d5c:	7e 22                	jle    c0011d80 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011d5e:	c1 e3 0c             	shl    ebx,0xc
c0011d61:	01 f3                	add    ebx,esi
c0011d63:	56                   	push   esi
c0011d64:	81 c6 00 10 00 00    	add    esi,0x1000
c0011d6a:	55                   	push   ebp
c0011d6b:	e8 58 fe ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c0011d70:	5a                   	pop    edx
c0011d71:	59                   	pop    ecx
c0011d72:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d74:	21 f9                	and    ecx,edi
c0011d76:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011d7a:	39 f3                	cmp    ebx,esi
c0011d7c:	89 08                	mov    DWORD PTR [eax],ecx
c0011d7e:	75 e3                	jne    c0011d63 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011d80:	5b                   	pop    ebx
c0011d81:	5e                   	pop    esi
c0011d82:	5f                   	pop    edi
c0011d83:	5d                   	pop    ebp
c0011d84:	c3                   	ret    
c0011d85:	90                   	nop

c0011d86 <VAS::setToWriteCombining(unsigned long, int)>:
c0011d86:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0011d8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d91:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011d98:	75 01                	jne    c0011d9b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011d9a:	c3                   	ret    
c0011d9b:	68 80 00 00 00       	push   0x80
c0011da0:	6a ff                	push   0xffffffff
c0011da2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011daa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011dae:	e8 93 ff ff ff       	call   c0011d46 <VAS::reflagRange(unsigned long, int, int, int)>
c0011db3:	83 c4 14             	add    esp,0x14
c0011db6:	c3                   	ret    
c0011db7:	90                   	nop

c0011db8 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011db8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011dbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dc1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dc8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011dcb:	19 c0                	sbb    eax,eax
c0011dcd:	83 ca 03             	or     edx,0x3
c0011dd0:	83 e0 fc             	and    eax,0xfffffffc
c0011dd3:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011dda:	0f 20 d8             	mov    eax,cr3
c0011ddd:	0f 22 d8             	mov    cr3,eax
c0011de0:	c3                   	ret    
c0011de1:	90                   	nop

c0011de2 <VAS::~VAS()>:
c0011de2:	83 ec 2c             	sub    esp,0x2c
c0011de5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ded:	fa                   	cli    
c0011dee:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0011df3:	40                   	inc    eax
c0011df4:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0011df9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e03:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011e0d:	6a 01                	push   0x1
c0011e0f:	50                   	push   eax
c0011e10:	e8 a3 ff ff ff       	call   c0011db8 <VAS::mapOtherVASIn(bool, VAS*)>
c0011e15:	83 c4 0c             	add    esp,0xc
c0011e18:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e20:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e28:	0f 8f d4 00 00 00    	jg     c0011f02 <VAS::~VAS()+0x120>
c0011e2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e39:	c1 e2 02             	shl    edx,0x2
c0011e3c:	01 d0                	add    eax,edx
c0011e3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e48:	83 e0 01             	and    eax,0x1
c0011e4b:	0f 84 a8 00 00 00    	je     c0011ef9 <VAS::~VAS()+0x117>
c0011e51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011e59:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011e61:	7f 72                	jg     c0011ed5 <VAS::~VAS()+0xf3>
c0011e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e67:	c1 e0 0a             	shl    eax,0xa
c0011e6a:	89 c2                	mov    edx,eax
c0011e6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e70:	01 d0                	add    eax,edx
c0011e72:	c1 e0 0c             	shl    eax,0xc
c0011e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e79:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e83:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011e8d:	6a 01                	push   0x1
c0011e8f:	50                   	push   eax
c0011e90:	e8 07 fd ff ff       	call   c0011b9c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e95:	83 c4 0c             	add    esp,0xc
c0011e98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eaa:	25 01 04 00 00       	and    eax,0x401
c0011eaf:	3d 01 04 00 00       	cmp    eax,0x401
c0011eb4:	75 19                	jne    c0011ecf <VAS::~VAS()+0xed>
c0011eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eba:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ebf:	83 ec 0c             	sub    esp,0xc
c0011ec2:	50                   	push   eax
c0011ec3:	e8 9c dc ff ff       	call   c000fb64 <Phys::freePage(unsigned long)>
c0011ec8:	83 c4 10             	add    esp,0x10
c0011ecb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ecf:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011ed3:	eb 84                	jmp    c0011e59 <VAS::~VAS()+0x77>
c0011ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ed9:	25 00 04 00 00       	and    eax,0x400
c0011ede:	74 19                	je     c0011ef9 <VAS::~VAS()+0x117>
c0011ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ee9:	83 ec 0c             	sub    esp,0xc
c0011eec:	50                   	push   eax
c0011eed:	e8 72 dc ff ff       	call   c000fb64 <Phys::freePage(unsigned long)>
c0011ef2:	83 c4 10             	add    esp,0x10
c0011ef5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ef9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011efd:	e9 1e ff ff ff       	jmp    c0011e20 <VAS::~VAS()+0x3e>
c0011f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f09:	83 ec 0c             	sub    esp,0xc
c0011f0c:	50                   	push   eax
c0011f0d:	e8 d5 fc ff ff       	call   c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f19:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f1c:	83 ec 0c             	sub    esp,0xc
c0011f1f:	50                   	push   eax
c0011f20:	e8 3f dc ff ff       	call   c000fb64 <Phys::freePage(unsigned long)>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f30:	c1 e0 02             	shl    eax,0x2
c0011f33:	83 ec 08             	sub    esp,0x8
c0011f36:	50                   	push   eax
c0011f37:	68 b0 b1 02 c0       	push   0xc002b1b0
c0011f3c:	e8 ec 0b 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011f41:	83 c4 10             	add    esp,0x10
c0011f44:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0011f49:	48                   	dec    eax
c0011f4a:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0011f4f:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0011f54:	85 c0                	test   eax,eax
c0011f56:	75 01                	jne    c0011f59 <VAS::~VAS()+0x177>
c0011f58:	fb                   	sti    
c0011f59:	90                   	nop
c0011f5a:	83 c4 2c             	add    esp,0x2c
c0011f5d:	c3                   	ret    

c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011f5e:	55                   	push   ebp
c0011f5f:	57                   	push   edi
c0011f60:	56                   	push   esi
c0011f61:	53                   	push   ebx
c0011f62:	83 ec 1c             	sub    esp,0x1c
c0011f65:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011f69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f6d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011f73:	77 08                	ja     c0011f7d <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011f75:	0f 20 d8             	mov    eax,cr3
c0011f78:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011f7b:	75 47                	jne    c0011fc4 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011f7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f81:	09 d8                	or     eax,ebx
c0011f83:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f88:	75 57                	jne    c0011fe1 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011f8a:	89 de                	mov    esi,ebx
c0011f8c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f8f:	c1 ee 16             	shr    esi,0x16
c0011f92:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011f99:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011f9d:	74 54                	je     c0011ff3 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011f9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fa3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011fa9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011fad:	c1 e6 0c             	shl    esi,0xc
c0011fb0:	c1 eb 0a             	shr    ebx,0xa
c0011fb3:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011fb9:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011fbc:	83 c4 1c             	add    esp,0x1c
c0011fbf:	5b                   	pop    ebx
c0011fc0:	5e                   	pop    esi
c0011fc1:	5f                   	pop    edi
c0011fc2:	5d                   	pop    ebp
c0011fc3:	c3                   	ret    
c0011fc4:	83 ec 0c             	sub    esp,0xc
c0011fc7:	68 d0 b1 02 c0       	push   0xc002b1d0
c0011fcc:	e8 5c 0b 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0011fd1:	83 c4 10             	add    esp,0x10
c0011fd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd8:	09 d8                	or     eax,ebx
c0011fda:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fdf:	74 a9                	je     c0011f8a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011fe1:	83 ec 0c             	sub    esp,0xc
c0011fe4:	68 38 b2 02 c0       	push   0xc002b238
c0011fe9:	e8 ab 86 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0011fee:	83 c4 10             	add    esp,0x10
c0011ff1:	eb 97                	jmp    c0011f8a <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ff3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ff7:	e8 f2 db ff ff       	call   c000fbee <Phys::allocatePage()>
c0011ffc:	83 ec 0c             	sub    esp,0xc
c0011fff:	89 c5                	mov    ebp,eax
c0012001:	8b 0d 10 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f310
c0012007:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001200b:	6a 01                	push   0x1
c001200d:	e8 15 f7 ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0012012:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012019:	6a 01                	push   0x1
c001201b:	50                   	push   eax
c001201c:	55                   	push   ebp
c001201d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012023:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012027:	51                   	push   ecx
c0012028:	e8 27 02 00 00       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001202d:	83 c4 1c             	add    esp,0x1c
c0012030:	68 00 10 00 00       	push   0x1000
c0012035:	6a 00                	push   0x0
c0012037:	50                   	push   eax
c0012038:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001203c:	e8 0f e7 fe ff       	call   c0000750 <memset>
c0012041:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012045:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012048:	e8 9a fb ff ff       	call   c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c001204d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012051:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012054:	83 c4 10             	add    esp,0x10
c0012057:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001205a:	e9 40 ff ff ff       	jmp    c0011f9f <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001205f:	90                   	nop

c0012060 <VAS::allocatePages(int, int)>:
c0012060:	55                   	push   ebp
c0012061:	57                   	push   edi
c0012062:	56                   	push   esi
c0012063:	53                   	push   ebx
c0012064:	83 ec 1c             	sub    esp,0x1c
c0012067:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001206b:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0012070:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012076:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001207c:	83 e0 01             	and    eax,0x1
c001207f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012083:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012087:	0f 85 cc 00 00 00    	jne    c0012159 <VAS::allocatePages(int, int)+0xf9>
c001208d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012090:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012094:	85 c0                	test   eax,eax
c0012096:	0f 84 a1 00 00 00    	je     c001213d <VAS::allocatePages(int, int)+0xdd>
c001209c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00120a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120a4:	c1 e6 0c             	shl    esi,0xc
c00120a7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00120ab:	85 c0                	test   eax,eax
c00120ad:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00120b0:	7e 33                	jle    c00120e5 <VAS::allocatePages(int, int)+0x85>
c00120b2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00120b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120ba:	81 cd 00 04 00 00    	or     ebp,0x400
c00120c0:	e8 29 db ff ff       	call   c000fbee <Phys::allocatePage()>
c00120c5:	55                   	push   ebp
c00120c6:	53                   	push   ebx
c00120c7:	50                   	push   eax
c00120c8:	57                   	push   edi
c00120c9:	e8 90 fe ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c00120ce:	83 c4 10             	add    esp,0x10
c00120d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120d6:	74 03                	je     c00120db <VAS::allocatePages(int, int)+0x7b>
c00120d8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120db:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120e1:	39 de                	cmp    esi,ebx
c00120e3:	75 db                	jne    c00120c0 <VAS::allocatePages(int, int)+0x60>
c00120e5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120ea:	75 12                	jne    c00120fe <VAS::allocatePages(int, int)+0x9e>
c00120ec:	0f 20 d8             	mov    eax,cr3
c00120ef:	0f 22 d8             	mov    cr3,eax
c00120f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120f6:	83 c4 1c             	add    esp,0x1c
c00120f9:	5b                   	pop    ebx
c00120fa:	5e                   	pop    esi
c00120fb:	5f                   	pop    edi
c00120fc:	5d                   	pop    ebp
c00120fd:	c3                   	ret    
c00120fe:	c1 ee 0a             	shr    esi,0xa
c0012101:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012105:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001210b:	c1 eb 0a             	shr    ebx,0xa
c001210e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012114:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001211a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012120:	39 c3                	cmp    ebx,eax
c0012122:	77 ce                	ja     c00120f2 <VAS::allocatePages(int, int)+0x92>
c0012124:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012127:	81 c3 00 10 00 00    	add    ebx,0x1000
c001212d:	39 d8                	cmp    eax,ebx
c001212f:	73 f3                	jae    c0012124 <VAS::allocatePages(int, int)+0xc4>
c0012131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012135:	83 c4 1c             	add    esp,0x1c
c0012138:	5b                   	pop    ebx
c0012139:	5e                   	pop    esi
c001213a:	5f                   	pop    edi
c001213b:	5d                   	pop    ebp
c001213c:	c3                   	ret    
c001213d:	83 ec 0c             	sub    esp,0xc
c0012140:	68 5c b2 02 c0       	push   0xc002b25c
c0012145:	e8 4f 85 00 00       	call   c001a699 <Krnl::panic(char const*)>
c001214a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001214d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012151:	83 c4 10             	add    esp,0x10
c0012154:	e9 43 ff ff ff       	jmp    c001209c <VAS::allocatePages(int, int)+0x3c>
c0012159:	83 ec 0c             	sub    esp,0xc
c001215c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012160:	e8 c2 f5 ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0012165:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012171:	0f 87 9b 00 00 00    	ja     c0012212 <VAS::allocatePages(int, int)+0x1b2>
c0012177:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001217b:	85 d2                	test   edx,edx
c001217d:	7e 3c                	jle    c00121bb <VAS::allocatePages(int, int)+0x15b>
c001217f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012183:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012187:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001218b:	c1 e5 0c             	shl    ebp,0xc
c001218e:	81 ce 00 04 00 00    	or     esi,0x400
c0012194:	01 dd                	add    ebp,ebx
c0012196:	e8 53 da ff ff       	call   c000fbee <Phys::allocatePage()>
c001219b:	56                   	push   esi
c001219c:	53                   	push   ebx
c001219d:	50                   	push   eax
c001219e:	57                   	push   edi
c001219f:	e8 ba fd ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c00121a4:	83 c4 10             	add    esp,0x10
c00121a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121ac:	74 03                	je     c00121b1 <VAS::allocatePages(int, int)+0x151>
c00121ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121b7:	39 dd                	cmp    ebp,ebx
c00121b9:	75 db                	jne    c0012196 <VAS::allocatePages(int, int)+0x136>
c00121bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121c0:	0f 84 26 ff ff ff    	je     c00120ec <VAS::allocatePages(int, int)+0x8c>
c00121c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121ce:	89 d3                	mov    ebx,edx
c00121d0:	c1 e0 0c             	shl    eax,0xc
c00121d3:	c1 eb 0a             	shr    ebx,0xa
c00121d6:	01 d0                	add    eax,edx
c00121d8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121de:	c1 e8 0a             	shr    eax,0xa
c00121e1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121ec:	2d 00 00 40 00       	sub    eax,0x400000
c00121f1:	39 c3                	cmp    ebx,eax
c00121f3:	0f 87 f9 fe ff ff    	ja     c00120f2 <VAS::allocatePages(int, int)+0x92>
c00121f9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121fc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012202:	39 d8                	cmp    eax,ebx
c0012204:	73 f3                	jae    c00121f9 <VAS::allocatePages(int, int)+0x199>
c0012206:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001220a:	83 c4 1c             	add    esp,0x1c
c001220d:	5b                   	pop    ebx
c001220e:	5e                   	pop    esi
c001220f:	5f                   	pop    edi
c0012210:	5d                   	pop    ebp
c0012211:	c3                   	ret    
c0012212:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0012217:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001221d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012224:	0f 84 4d ff ff ff    	je     c0012177 <VAS::allocatePages(int, int)+0x117>
c001222a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012232:	e9 40 ff ff ff       	jmp    c0012177 <VAS::allocatePages(int, int)+0x117>
c0012237:	90                   	nop

c0012238 <VAS::setCPUSpecific(unsigned long)>:
c0012238:	83 ec 0c             	sub    esp,0xc
c001223b:	6a 05                	push   0x5
c001223d:	68 00 00 40 c2       	push   0xc2400000
c0012242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001224a:	e8 0f fd ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001224f:	83 c4 1c             	add    esp,0x1c
c0012252:	c3                   	ret    
c0012253:	90                   	nop

c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012254:	55                   	push   ebp
c0012255:	57                   	push   edi
c0012256:	56                   	push   esi
c0012257:	53                   	push   ebx
c0012258:	83 ec 1c             	sub    esp,0x1c
c001225b:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0012260:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001226a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001226e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012274:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012278:	83 e0 01             	and    eax,0x1
c001227b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001227f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012283:	85 c0                	test   eax,eax
c0012285:	7e 39                	jle    c00122c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012287:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001228b:	89 f3                	mov    ebx,esi
c001228d:	c1 e0 0c             	shl    eax,0xc
c0012290:	01 f0                	add    eax,esi
c0012292:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012296:	55                   	push   ebp
c0012297:	53                   	push   ebx
c0012298:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001229c:	29 f0                	sub    eax,esi
c001229e:	01 d8                	add    eax,ebx
c00122a0:	50                   	push   eax
c00122a1:	57                   	push   edi
c00122a2:	e8 b7 fc ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c00122a7:	83 c4 10             	add    esp,0x10
c00122aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00122af:	74 03                	je     c00122b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00122b1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00122b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122ba:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00122be:	75 d6                	jne    c0012296 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00122c0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00122c5:	75 10                	jne    c00122d7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00122c7:	0f 20 d8             	mov    eax,cr3
c00122ca:	0f 22 d8             	mov    cr3,eax
c00122cd:	83 c4 1c             	add    esp,0x1c
c00122d0:	89 f0                	mov    eax,esi
c00122d2:	5b                   	pop    ebx
c00122d3:	5e                   	pop    esi
c00122d4:	5f                   	pop    edi
c00122d5:	5d                   	pop    ebp
c00122d6:	c3                   	ret    
c00122d7:	89 f3                	mov    ebx,esi
c00122d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122dd:	c1 eb 0a             	shr    ebx,0xa
c00122e0:	c1 e0 0c             	shl    eax,0xc
c00122e3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00122e9:	01 f0                	add    eax,esi
c00122eb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00122f1:	c1 e8 0a             	shr    eax,0xa
c00122f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122f9:	2d 00 00 40 00       	sub    eax,0x400000
c00122fe:	39 c3                	cmp    ebx,eax
c0012300:	77 cb                	ja     c00122cd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012302:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012305:	81 c3 00 10 00 00    	add    ebx,0x1000
c001230b:	39 d8                	cmp    eax,ebx
c001230d:	73 f3                	jae    c0012302 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001230f:	83 c4 1c             	add    esp,0x1c
c0012312:	89 f0                	mov    eax,esi
c0012314:	5b                   	pop    ebx
c0012315:	5e                   	pop    esi
c0012316:	5f                   	pop    edi
c0012317:	5d                   	pop    ebp
c0012318:	c3                   	ret    
c0012319:	90                   	nop

c001231a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001231a:	55                   	push   ebp
c001231b:	57                   	push   edi
c001231c:	56                   	push   esi
c001231d:	53                   	push   ebx
c001231e:	83 ec 1c             	sub    esp,0x1c
c0012321:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012329:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001232d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012331:	a9 ff 0f 00 00       	test   eax,0xfff
c0012336:	75 4a                	jne    c0012382 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012338:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001233c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001233f:	c1 eb 16             	shr    ebx,0x16
c0012342:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012349:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001234d:	74 4d                	je     c001239c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001234f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012353:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012357:	c1 e8 0a             	shr    eax,0xa
c001235a:	80 fa 01             	cmp    dl,0x1
c001235d:	19 d2                	sbb    edx,edx
c001235f:	c1 e3 0c             	shl    ebx,0xc
c0012362:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012366:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001236c:	25 fc 0f 00 00       	and    eax,0xffc
c0012371:	01 d8                	add    eax,ebx
c0012373:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001237a:	83 c4 1c             	add    esp,0x1c
c001237d:	5b                   	pop    ebx
c001237e:	5e                   	pop    esi
c001237f:	5f                   	pop    edi
c0012380:	5d                   	pop    ebp
c0012381:	c3                   	ret    
c0012382:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012386:	83 ec 0c             	sub    esp,0xc
c0012389:	68 88 b2 02 c0       	push   0xc002b288
c001238e:	e8 06 83 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0012393:	83 c4 10             	add    esp,0x10
c0012396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001239a:	eb 9c                	jmp    c0012338 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001239c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123a0:	e8 49 d8 ff ff       	call   c000fbee <Phys::allocatePage()>
c00123a5:	83 ec 0c             	sub    esp,0xc
c00123a8:	89 c5                	mov    ebp,eax
c00123aa:	8b 0d 10 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f310
c00123b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00123b4:	6a 01                	push   0x1
c00123b6:	e8 6c f3 ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c00123bb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123c2:	6a 01                	push   0x1
c00123c4:	50                   	push   eax
c00123c5:	55                   	push   ebp
c00123c6:	81 cd 07 04 00 00    	or     ebp,0x407
c00123cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123d0:	51                   	push   ecx
c00123d1:	e8 7e fe ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123d6:	83 c4 1c             	add    esp,0x1c
c00123d9:	68 00 10 00 00       	push   0x1000
c00123de:	6a 00                	push   0x0
c00123e0:	50                   	push   eax
c00123e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123e5:	e8 66 e3 fe ff       	call   c0000750 <memset>
c00123ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123f1:	e8 f1 f7 ff ff       	call   c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c00123f6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00123ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012403:	e9 47 ff ff ff       	jmp    c001234f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012408 <VAS::VAS(bool)>:
c0012408:	53                   	push   ebx
c0012409:	83 ec 28             	sub    esp,0x28
c001240c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012410:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012414:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012418:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001241f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012423:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001242a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001242e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012432:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012435:	e8 b4 d7 ff ff       	call   c000fbee <Phys::allocatePage()>
c001243a:	89 c2                	mov    edx,eax
c001243c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012440:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012443:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c0012449:	83 ec 0c             	sub    esp,0xc
c001244c:	6a 01                	push   0x1
c001244e:	e8 d4 f2 ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0012453:	83 c4 10             	add    esp,0x10
c0012456:	89 c2                	mov    edx,eax
c0012458:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001245c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001245f:	83 ec 0c             	sub    esp,0xc
c0012462:	6a 03                	push   0x3
c0012464:	6a 01                	push   0x1
c0012466:	52                   	push   edx
c0012467:	50                   	push   eax
c0012468:	53                   	push   ebx
c0012469:	e8 e6 fd ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001246e:	83 c4 20             	add    esp,0x20
c0012471:	89 c2                	mov    edx,eax
c0012473:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012477:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001247a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012482:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001248a:	7f 1c                	jg     c00124a8 <VAS::VAS(bool)+0xa0>
c001248c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012490:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012493:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012497:	c1 e2 02             	shl    edx,0x2
c001249a:	01 d0                	add    eax,edx
c001249c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00124a6:	eb da                	jmp    c0012482 <VAS::VAS(bool)+0x7a>
c00124a8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00124b0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00124b8:	7f 7a                	jg     c0012534 <VAS::VAS(bool)+0x12c>
c00124ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124be:	2d 00 02 00 00       	sub    eax,0x200
c00124c3:	c1 e0 0c             	shl    eax,0xc
c00124c6:	83 c8 03             	or     eax,0x3
c00124c9:	89 c2                	mov    edx,eax
c00124cb:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00124d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124d6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124dc:	83 e0 10             	and    eax,0x10
c00124df:	84 c0                	test   al,al
c00124e1:	74 07                	je     c00124ea <VAS::VAS(bool)+0xe2>
c00124e3:	b8 00 01 00 00       	mov    eax,0x100
c00124e8:	eb 05                	jmp    c00124ef <VAS::VAS(bool)+0xe7>
c00124ea:	b8 00 00 00 00       	mov    eax,0x0
c00124ef:	09 d0                	or     eax,edx
c00124f1:	89 c1                	mov    ecx,eax
c00124f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00124fe:	c1 e2 02             	shl    edx,0x2
c0012501:	01 d0                	add    eax,edx
c0012503:	89 ca                	mov    edx,ecx
c0012505:	89 10                	mov    DWORD PTR [eax],edx
c0012507:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001250b:	2d 40 03 00 00       	sub    eax,0x340
c0012510:	83 f8 7f             	cmp    eax,0x7f
c0012513:	77 16                	ja     c001252b <VAS::VAS(bool)+0x123>
c0012515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012519:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001251c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012520:	c1 e2 02             	shl    edx,0x2
c0012523:	01 d0                	add    eax,edx
c0012525:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001252b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001252f:	e9 7c ff ff ff       	jmp    c00124b0 <VAS::VAS(bool)+0xa8>
c0012534:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0012539:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001253f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012545:	83 e0 10             	and    eax,0x10
c0012548:	84 c0                	test   al,al
c001254a:	74 07                	je     c0012553 <VAS::VAS(bool)+0x14b>
c001254c:	b8 03 41 00 00       	mov    eax,0x4103
c0012551:	eb 05                	jmp    c0012558 <VAS::VAS(bool)+0x150>
c0012553:	b8 03 40 00 00       	mov    eax,0x4003
c0012558:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001255c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c001255f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012565:	89 02                	mov    DWORD PTR [edx],eax
c0012567:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001256c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012572:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012578:	83 ec 08             	sub    esp,0x8
c001257b:	50                   	push   eax
c001257c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012580:	e8 b3 fc ff ff       	call   c0012238 <VAS::setCPUSpecific(unsigned long)>
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001258c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001258f:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0012594:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001259a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125a0:	83 e0 10             	and    eax,0x10
c00125a3:	84 c0                	test   al,al
c00125a5:	74 07                	je     c00125ae <VAS::VAS(bool)+0x1a6>
c00125a7:	b8 00 01 00 00       	mov    eax,0x100
c00125ac:	eb 05                	jmp    c00125b3 <VAS::VAS(bool)+0x1ab>
c00125ae:	b8 00 00 00 00       	mov    eax,0x0
c00125b3:	09 c2                	or     edx,eax
c00125b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125bc:	05 fc 0f 00 00       	add    eax,0xffc
c00125c1:	83 ca 03             	or     edx,0x3
c00125c4:	89 10                	mov    DWORD PTR [eax],edx
c00125c6:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00125cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d1:	83 ec 0c             	sub    esp,0xc
c00125d4:	50                   	push   eax
c00125d5:	e8 8c 1c 00 00       	call   c0014266 <Device::getName()>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	83 ec 08             	sub    esp,0x8
c00125e0:	68 cd b3 02 c0       	push   0xc002b3cd
c00125e5:	50                   	push   eax
c00125e6:	e8 ad e2 fe ff       	call   c0000898 <strcmp>
c00125eb:	83 c4 10             	add    esp,0x10
c00125ee:	85 c0                	test   eax,eax
c00125f0:	0f 94 c0             	sete   al
c00125f3:	84 c0                	test   al,al
c00125f5:	0f 84 87 00 00 00    	je     c0012682 <VAS::VAS(bool)+0x27a>
c00125fb:	fa                   	cli    
c00125fc:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0012601:	40                   	inc    eax
c0012602:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0012607:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001260c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012612:	05 7c 09 00 00       	add    eax,0x97c
c0012617:	83 ec 0c             	sub    esp,0xc
c001261a:	50                   	push   eax
c001261b:	e8 ee cc ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012628:	89 c3                	mov    ebx,eax
c001262a:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001262f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012635:	05 7c 09 00 00       	add    eax,0x97c
c001263a:	83 ec 0c             	sub    esp,0xc
c001263d:	50                   	push   eax
c001263e:	e8 cb cc ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012643:	83 c4 10             	add    esp,0x10
c0012646:	83 ec 08             	sub    esp,0x8
c0012649:	50                   	push   eax
c001264a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001264e:	e8 75 f5 ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c0012653:	83 c4 10             	add    esp,0x10
c0012656:	8b 00                	mov    eax,DWORD PTR [eax]
c0012658:	25 00 f0 ff ff       	and    eax,0xfffff000
c001265d:	6a 11                	push   0x11
c001265f:	53                   	push   ebx
c0012660:	50                   	push   eax
c0012661:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012665:	e8 f4 f8 ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001266a:	83 c4 10             	add    esp,0x10
c001266d:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0012672:	48                   	dec    eax
c0012673:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0012678:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001267d:	85 c0                	test   eax,eax
c001267f:	75 01                	jne    c0012682 <VAS::VAS(bool)+0x27a>
c0012681:	fb                   	sti    
c0012682:	90                   	nop
c0012683:	83 c4 28             	add    esp,0x28
c0012686:	5b                   	pop    ebx
c0012687:	c3                   	ret    

c0012688 <VAS::evict(unsigned long)>:
c0012688:	55                   	push   ebp
c0012689:	57                   	push   edi
c001268a:	56                   	push   esi
c001268b:	53                   	push   ebx
c001268c:	83 ec 1c             	sub    esp,0x1c
c001268f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012693:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012697:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001269b:	e8 c8 f1 ff ff       	call   c0011868 <Virt::allocateSwapfilePage()>
c00126a0:	89 c7                	mov    edi,eax
c00126a2:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c00126a7:	85 c0                	test   eax,eax
c00126a9:	7e 3d                	jle    c00126e8 <VAS::evict(unsigned long)+0x60>
c00126ab:	89 ee                	mov    esi,ebp
c00126ad:	31 db                	xor    ebx,ebx
c00126af:	83 ec 0c             	sub    esp,0xc
c00126b2:	57                   	push   edi
c00126b3:	e8 9e f1 ff ff       	call   c0011856 <Virt::swapIDToSector(unsigned long)>
c00126b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00126bb:	01 d8                	add    eax,ebx
c00126bd:	6a 01                	push   0x1
c00126bf:	31 d2                	xor    edx,edx
c00126c1:	43                   	inc    ebx
c00126c2:	52                   	push   edx
c00126c3:	81 c6 00 02 00 00    	add    esi,0x200
c00126c9:	50                   	push   eax
c00126ca:	0f be 05 38 e1 02 c0 	movsx  eax,BYTE PTR ds:0xc002e138
c00126d1:	ff 34 85 9c f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0964]
c00126d8:	e8 39 3e 00 00       	call   c0016516 <LogicalDisk::write(unsigned long long, int, void*)>
c00126dd:	83 c4 20             	add    esp,0x20
c00126e0:	39 1d 2c e1 02 c0    	cmp    DWORD PTR ds:0xc002e12c,ebx
c00126e6:	7f c7                	jg     c00126af <VAS::evict(unsigned long)+0x27>
c00126e8:	83 ec 08             	sub    esp,0x8
c00126eb:	c1 e7 0b             	shl    edi,0xb
c00126ee:	55                   	push   ebp
c00126ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126f3:	e8 d0 f4 ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c00126f8:	83 c4 0c             	add    esp,0xc
c00126fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00126fd:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012703:	09 d7                	or     edi,edx
c0012705:	89 38                	mov    DWORD PTR [eax],edi
c0012707:	a1 08 f3 02 c0       	mov    eax,ds:0xc002f308
c001270c:	40                   	inc    eax
c001270d:	a3 08 f3 02 c0       	mov    ds:0xc002f308,eax
c0012712:	0f 20 da             	mov    edx,cr3
c0012715:	0f 22 da             	mov    cr3,edx
c0012718:	50                   	push   eax
c0012719:	55                   	push   ebp
c001271a:	68 db b3 02 c0       	push   0xc002b3db
c001271f:	e8 09 04 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0012724:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c0012729:	c7 44 24 40 f0 b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b3f0
c0012731:	8d 50 01             	lea    edx,[eax+0x1]
c0012734:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012738:	89 15 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,edx
c001273e:	83 c4 2c             	add    esp,0x2c
c0012741:	5b                   	pop    ebx
c0012742:	5e                   	pop    esi
c0012743:	5f                   	pop    edi
c0012744:	5d                   	pop    ebp
c0012745:	e9 e3 03 00 00       	jmp    c0012b2d <Dbg::kprintf(char const*, ...)>

c001274a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001274a:	55                   	push   ebp
c001274b:	57                   	push   edi
c001274c:	56                   	push   esi
c001274d:	53                   	push   ebx
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012755:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001275b:	0f 84 dc 00 00 00    	je     c001283d <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012761:	56                   	push   esi
c0012762:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012766:	e8 5d f4 ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c001276b:	5b                   	pop    ebx
c001276c:	85 c0                	test   eax,eax
c001276e:	5f                   	pop    edi
c001276f:	89 c3                	mov    ebx,eax
c0012771:	0f 84 c6 00 00 00    	je     c001283d <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012777:	8b 38                	mov    edi,DWORD PTR [eax]
c0012779:	31 c0                	xor    eax,eax
c001277b:	89 fa                	mov    edx,edi
c001277d:	81 e2 01 04 00 00    	and    edx,0x401
c0012783:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012789:	0f 85 b0 00 00 00    	jne    c001283f <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001278f:	e8 5a d4 ff ff       	call   c000fbee <Phys::allocatePage()>
c0012794:	c1 ef 0b             	shr    edi,0xb
c0012797:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012799:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001279f:	09 c2                	or     edx,eax
c00127a1:	81 ca 01 08 00 00    	or     edx,0x801
c00127a7:	89 13                	mov    DWORD PTR [ebx],edx
c00127a9:	8b 0d 2c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e12c
c00127af:	85 c9                	test   ecx,ecx
c00127b1:	7e 3d                	jle    c00127f0 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c00127b3:	89 f5                	mov    ebp,esi
c00127b5:	31 db                	xor    ebx,ebx
c00127b7:	83 ec 0c             	sub    esp,0xc
c00127ba:	57                   	push   edi
c00127bb:	e8 96 f0 ff ff       	call   c0011856 <Virt::swapIDToSector(unsigned long)>
c00127c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00127c3:	01 d8                	add    eax,ebx
c00127c5:	6a 01                	push   0x1
c00127c7:	31 d2                	xor    edx,edx
c00127c9:	43                   	inc    ebx
c00127ca:	52                   	push   edx
c00127cb:	81 c5 00 02 00 00    	add    ebp,0x200
c00127d1:	50                   	push   eax
c00127d2:	0f be 05 38 e1 02 c0 	movsx  eax,BYTE PTR ds:0xc002e138
c00127d9:	ff 34 85 9c f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0964]
c00127e0:	e8 c5 3c 00 00       	call   c00164aa <LogicalDisk::read(unsigned long long, int, void*)>
c00127e5:	83 c4 20             	add    esp,0x20
c00127e8:	39 1d 2c e1 02 c0    	cmp    DWORD PTR ds:0xc002e12c,ebx
c00127ee:	7f c7                	jg     c00127b7 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00127f0:	a1 08 f3 02 c0       	mov    eax,ds:0xc002f308
c00127f5:	48                   	dec    eax
c00127f6:	52                   	push   edx
c00127f7:	a3 08 f3 02 c0       	mov    ds:0xc002f308,eax
c00127fc:	50                   	push   eax
c00127fd:	56                   	push   esi
c00127fe:	68 01 b4 02 c0       	push   0xc002b401
c0012803:	e8 25 03 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0012808:	89 3c 24             	mov    DWORD PTR [esp],edi
c001280b:	e8 28 f0 ff ff       	call   c0011838 <Virt::freeSwapfilePage(unsigned long)>
c0012810:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	48                   	dec    eax
c0012819:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001281e:	85 c0                	test   eax,eax
c0012820:	75 01                	jne    c0012823 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012822:	fb                   	sti    
c0012823:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012827:	25 ff 0f 00 00       	and    eax,0xfff
c001282c:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012831:	77 14                	ja     c0012847 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012833:	0f 20 d8             	mov    eax,cr3
c0012836:	0f 22 d8             	mov    cr3,eax
c0012839:	b0 01                	mov    al,0x1
c001283b:	eb 02                	jmp    c001283f <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001283d:	31 c0                	xor    eax,eax
c001283f:	83 c4 0c             	add    esp,0xc
c0012842:	5b                   	pop    ebx
c0012843:	5e                   	pop    esi
c0012844:	5f                   	pop    edi
c0012845:	5d                   	pop    ebp
c0012846:	c3                   	ret    
c0012847:	83 ec 0c             	sub    esp,0xc
c001284a:	68 16 b4 02 c0       	push   0xc002b416
c001284f:	e8 d9 02 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	eb da                	jmp    c0012833 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012859:	90                   	nop

c001285a <VAS::scanForEviction()>:
c001285a:	57                   	push   edi
c001285b:	56                   	push   esi
c001285c:	53                   	push   ebx
c001285d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012861:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012864:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001286a:	75 0e                	jne    c001287a <VAS::scanForEviction()+0x20>
c001286c:	89 da                	mov    edx,ebx
c001286e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012871:	c1 ea 16             	shr    edx,0x16
c0012874:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012878:	74 48                	je     c00128c2 <VAS::scanForEviction()+0x68>
c001287a:	53                   	push   ebx
c001287b:	56                   	push   esi
c001287c:	e8 47 f3 ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c0012881:	5a                   	pop    edx
c0012882:	8b 38                	mov    edi,DWORD PTR [eax]
c0012884:	59                   	pop    ecx
c0012885:	89 fa                	mov    edx,edi
c0012887:	81 e2 00 0c 00 00    	and    edx,0xc00
c001288d:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012893:	74 3d                	je     c00128d2 <VAS::scanForEviction()+0x78>
c0012895:	81 c3 00 10 00 00    	add    ebx,0x1000
c001289b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00128a1:	76 2a                	jbe    c00128cd <VAS::scanForEviction()+0x73>
c00128a3:	31 db                	xor    ebx,ebx
c00128a5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00128ac:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00128b2:	75 c6                	jne    c001287a <VAS::scanForEviction()+0x20>
c00128b4:	89 da                	mov    edx,ebx
c00128b6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00128b9:	c1 ea 16             	shr    edx,0x16
c00128bc:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00128c0:	75 b8                	jne    c001287a <VAS::scanForEviction()+0x20>
c00128c2:	81 c3 00 00 40 00    	add    ebx,0x400000
c00128c8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00128cb:	eb 97                	jmp    c0012864 <VAS::scanForEviction()+0xa>
c00128cd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00128d0:	eb 92                	jmp    c0012864 <VAS::scanForEviction()+0xa>
c00128d2:	f7 c7 01 00 00 00    	test   edi,0x1
c00128d8:	74 bb                	je     c0012895 <VAS::scanForEviction()+0x3b>
c00128da:	f7 c7 20 00 00 00    	test   edi,0x20
c00128e0:	74 0a                	je     c00128ec <VAS::scanForEviction()+0x92>
c00128e2:	83 e7 df             	and    edi,0xffffffdf
c00128e5:	89 38                	mov    DWORD PTR [eax],edi
c00128e7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00128ea:	eb a9                	jmp    c0012895 <VAS::scanForEviction()+0x3b>
c00128ec:	83 ec 08             	sub    esp,0x8
c00128ef:	53                   	push   ebx
c00128f0:	56                   	push   esi
c00128f1:	e8 92 fd ff ff       	call   c0012688 <VAS::evict(unsigned long)>
c00128f6:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	89 f8                	mov    eax,edi
c0012902:	5b                   	pop    ebx
c0012903:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012908:	5e                   	pop    esi
c0012909:	5f                   	pop    edi
c001290a:	c3                   	ret    

c001290b <mapVASFirstTime>:
c001290b:	55                   	push   ebp
c001290c:	57                   	push   edi
c001290d:	56                   	push   esi
c001290e:	53                   	push   ebx
c001290f:	83 ec 0c             	sub    esp,0xc
c0012912:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012917:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001291a:	4a                   	dec    edx
c001291b:	0f 84 8e 00 00 00    	je     c00129af <mapVASFirstTime+0xa4>
c0012921:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012924:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012927:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001292c:	c1 e5 15             	shl    ebp,0x15
c001292f:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012934:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001293a:	29 eb                	sub    ebx,ebp
c001293c:	29 ee                	sub    esi,ebp
c001293e:	e8 ab d2 ff ff       	call   c000fbee <Phys::allocatePage()>
c0012943:	83 ec 0c             	sub    esp,0xc
c0012946:	68 03 04 00 00       	push   0x403
c001294b:	6a 01                	push   0x1
c001294d:	53                   	push   ebx
c001294e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012954:	50                   	push   eax
c0012955:	57                   	push   edi
c0012956:	e8 f9 f8 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001295b:	83 c4 20             	add    esp,0x20
c001295e:	39 f3                	cmp    ebx,esi
c0012960:	75 dc                	jne    c001293e <mapVASFirstTime+0x33>
c0012962:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012967:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001296c:	29 ee                	sub    esi,ebp
c001296e:	29 e8                	sub    eax,ebp
c0012970:	89 c5                	mov    ebp,eax
c0012972:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012976:	19 db                	sbb    ebx,ebx
c0012978:	e8 71 d2 ff ff       	call   c000fbee <Phys::allocatePage()>
c001297d:	83 e3 04             	and    ebx,0x4
c0012980:	83 ec 0c             	sub    esp,0xc
c0012983:	81 c3 03 04 00 00    	add    ebx,0x403
c0012989:	53                   	push   ebx
c001298a:	6a 01                	push   0x1
c001298c:	56                   	push   esi
c001298d:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012993:	50                   	push   eax
c0012994:	57                   	push   edi
c0012995:	e8 ba f8 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001299a:	83 c4 20             	add    esp,0x20
c001299d:	39 f5                	cmp    ebp,esi
c001299f:	75 d1                	jne    c0012972 <mapVASFirstTime+0x67>
c00129a1:	0f 20 d8             	mov    eax,cr3
c00129a4:	0f 22 d8             	mov    cr3,eax
c00129a7:	83 c4 0c             	add    esp,0xc
c00129aa:	5b                   	pop    ebx
c00129ab:	5e                   	pop    esi
c00129ac:	5f                   	pop    edi
c00129ad:	5d                   	pop    ebp
c00129ae:	c3                   	ret    
c00129af:	83 ec 0c             	sub    esp,0xc
c00129b2:	68 26 b4 02 c0       	push   0xc002b426
c00129b7:	e8 71 01 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	83 c4 0c             	add    esp,0xc
c00129c2:	5b                   	pop    ebx
c00129c3:	5e                   	pop    esi
c00129c4:	5f                   	pop    edi
c00129c5:	5d                   	pop    ebp
c00129c6:	c3                   	ret    

c00129c7 <__cxa_atexit>:
c00129c7:	31 c0                	xor    eax,eax
c00129c9:	c3                   	ret    

c00129ca <__cxa_finalize>:
c00129ca:	c3                   	ret    

c00129cb <__stack_chk_fail>:
c00129cb:	55                   	push   ebp
c00129cc:	89 e5                	mov    ebp,esp
c00129ce:	83 ec 14             	sub    esp,0x14
c00129d1:	68 3f b4 02 c0       	push   0xc002b43f
c00129d6:	e8 52 01 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00129db:	58                   	pop    eax
c00129dc:	5a                   	pop    edx
c00129dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129e0:	68 8f b4 02 c0       	push   0xc002b48f
c00129e5:	e8 43 01 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00129ea:	59                   	pop    ecx
c00129eb:	58                   	pop    eax
c00129ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129f2:	68 8f b4 02 c0       	push   0xc002b48f
c00129f7:	e8 31 01 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00129fc:	5a                   	pop    edx
c00129fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a00:	59                   	pop    ecx
c0012a01:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a03:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a06:	68 8f b4 02 c0       	push   0xc002b48f
c0012a0b:	e8 1d 01 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0012a10:	5a                   	pop    edx
c0012a11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a14:	59                   	pop    ecx
c0012a15:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a19:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a1c:	68 8f b4 02 c0       	push   0xc002b48f
c0012a21:	e8 07 01 00 00       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0012a26:	c7 04 24 97 b4 02 c0 	mov    DWORD PTR [esp],0xc002b497
c0012a2d:	e8 67 7c 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0012a32:	83 c4 10             	add    esp,0x10
c0012a35:	c9                   	leave  
c0012a36:	c3                   	ret    

c0012a37 <__cxa_pure_virtual>:
c0012a37:	83 ec 18             	sub    esp,0x18
c0012a3a:	68 af b4 02 c0       	push   0xc002b4af
c0012a3f:	e8 55 7c 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0012a44:	83 c4 1c             	add    esp,0x1c
c0012a47:	c3                   	ret    

c0012a48 <operator new[](unsigned long)>:
c0012a48:	e9 3f ce ff ff       	jmp    c000f88c <malloc>

c0012a4d <operator delete(void*, unsigned long)>:
c0012a4d:	e9 5a ce ff ff       	jmp    c000f8ac <rfree>

c0012a52 <operator delete[](void*)>:
c0012a52:	e9 55 ce ff ff       	jmp    c000f8ac <rfree>

c0012a57 <operator delete[](void*, unsigned long)>:
c0012a57:	e9 50 ce ff ff       	jmp    c000f8ac <rfree>

c0012a5c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a5c:	57                   	push   edi
c0012a5d:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a62:	56                   	push   esi
c0012a63:	be c4 b4 02 c0       	mov    esi,0xc002b4c4
c0012a68:	53                   	push   ebx
c0012a69:	83 ec 40             	sub    esp,0x40
c0012a6c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a70:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a74:	fc                   	cld    
c0012a75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a77:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a7b:	83 f9 3e             	cmp    ecx,0x3e
c0012a7e:	7e 05                	jle    c0012a85 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a80:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a85:	89 df                	mov    edi,ebx
c0012a87:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a8b:	eb 02                	jmp    c0012a8f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a8d:	89 c7                	mov    edi,eax
c0012a8f:	31 d2                	xor    edx,edx
c0012a91:	46                   	inc    esi
c0012a92:	89 f8                	mov    eax,edi
c0012a94:	f7 f1                	div    ecx
c0012a96:	39 cf                	cmp    edi,ecx
c0012a98:	73 f3                	jae    c0012a8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a9a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a9d:	eb 02                	jmp    c0012aa1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a9f:	89 c3                	mov    ebx,eax
c0012aa1:	31 d2                	xor    edx,edx
c0012aa3:	4e                   	dec    esi
c0012aa4:	89 d8                	mov    eax,ebx
c0012aa6:	f7 f1                	div    ecx
c0012aa8:	39 cb                	cmp    ebx,ecx
c0012aaa:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012aae:	88 16                	mov    BYTE PTR [esi],dl
c0012ab0:	73 ed                	jae    c0012a9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ab2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012ab6:	83 c4 40             	add    esp,0x40
c0012ab9:	5b                   	pop    ebx
c0012aba:	5e                   	pop    esi
c0012abb:	5f                   	pop    edi
c0012abc:	c3                   	ret    

c0012abd <Dbg::logc(char)>:
c0012abd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ac1:	ba fd 03 00 00       	mov    edx,0x3fd
c0012ac6:	ec                   	in     al,dx
c0012ac7:	a8 20                	test   al,0x20
c0012ac9:	74 fb                	je     c0012ac6 <Dbg::logc(char)+0x9>
c0012acb:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ad0:	88 c8                	mov    al,cl
c0012ad2:	ee                   	out    dx,al
c0012ad3:	c3                   	ret    

c0012ad4 <Dbg::logs(char*)>:
c0012ad4:	53                   	push   ebx
c0012ad5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ad9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012adc:	84 c0                	test   al,al
c0012ade:	74 0f                	je     c0012aef <Dbg::logs(char*)+0x1b>
c0012ae0:	50                   	push   eax
c0012ae1:	43                   	inc    ebx
c0012ae2:	e8 d6 ff ff ff       	call   c0012abd <Dbg::logc(char)>
c0012ae7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012aea:	5a                   	pop    edx
c0012aeb:	84 c0                	test   al,al
c0012aed:	75 f1                	jne    c0012ae0 <Dbg::logs(char*)+0xc>
c0012aef:	5b                   	pop    ebx
c0012af0:	c3                   	ret    

c0012af1 <Dbg::logWriteInt(unsigned int)>:
c0012af1:	83 ec 10             	sub    esp,0x10
c0012af4:	6a 0a                	push   0xa
c0012af6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012afa:	50                   	push   eax
c0012afb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aff:	e8 58 ff ff ff       	call   c0012a5c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b04:	50                   	push   eax
c0012b05:	e8 ca ff ff ff       	call   c0012ad4 <Dbg::logs(char*)>
c0012b0a:	83 c4 20             	add    esp,0x20
c0012b0d:	c3                   	ret    

c0012b0e <Dbg::logWriteIntBase(unsigned int, int)>:
c0012b0e:	83 ec 10             	sub    esp,0x10
c0012b11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b15:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b19:	50                   	push   eax
c0012b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b1e:	e8 39 ff ff ff       	call   c0012a5c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b23:	50                   	push   eax
c0012b24:	e8 ab ff ff ff       	call   c0012ad4 <Dbg::logs(char*)>
c0012b29:	83 c4 20             	add    esp,0x20
c0012b2c:	c3                   	ret    

c0012b2d <Dbg::kprintf(char const*, ...)>:
c0012b2d:	55                   	push   ebp
c0012b2e:	57                   	push   edi
c0012b2f:	56                   	push   esi
c0012b30:	53                   	push   ebx
c0012b31:	83 ec 0c             	sub    esp,0xc
c0012b34:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b38:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b40:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b43:	84 c0                	test   al,al
c0012b45:	74 4a                	je     c0012b91 <Dbg::kprintf(char const*, ...)+0x64>
c0012b47:	31 db                	xor    ebx,ebx
c0012b49:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b4c:	3c 25                	cmp    al,0x25
c0012b4e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b51:	0f 85 e4 00 00 00    	jne    c0012c3b <Dbg::kprintf(char const*, ...)+0x10e>
c0012b57:	83 c3 02             	add    ebx,0x2
c0012b5a:	8a 07                	mov    al,BYTE PTR [edi]
c0012b5c:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b5f:	83 e8 25             	sub    eax,0x25
c0012b62:	3c 53                	cmp    al,0x53
c0012b64:	0f 87 ba 00 00 00    	ja     c0012c24 <Dbg::kprintf(char const*, ...)+0xf7>
c0012b6a:	0f b6 c0             	movzx  eax,al
c0012b6d:	ff 24 85 04 b5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4afc]
c0012b74:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b78:	89 c8                	mov    eax,ecx
c0012b7a:	83 c1 04             	add    ecx,0x4
c0012b7d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b81:	ff 30                	push   DWORD PTR [eax]
c0012b83:	e8 4c ff ff ff       	call   c0012ad4 <Dbg::logs(char*)>
c0012b88:	58                   	pop    eax
c0012b89:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b8d:	84 c0                	test   al,al
c0012b8f:	75 b8                	jne    c0012b49 <Dbg::kprintf(char const*, ...)+0x1c>
c0012b91:	83 c4 0c             	add    esp,0xc
c0012b94:	5b                   	pop    ebx
c0012b95:	5e                   	pop    esi
c0012b96:	5f                   	pop    edi
c0012b97:	5d                   	pop    ebp
c0012b98:	c3                   	ret    
c0012b99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b9d:	89 d0                	mov    eax,edx
c0012b9f:	83 c2 04             	add    edx,0x4
c0012ba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ba6:	ff 30                	push   DWORD PTR [eax]
c0012ba8:	e8 44 ff ff ff       	call   c0012af1 <Dbg::logWriteInt(unsigned int)>
c0012bad:	58                   	pop    eax
c0012bae:	eb d9                	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bb0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bb4:	89 d0                	mov    eax,edx
c0012bb6:	83 c2 04             	add    edx,0x4
c0012bb9:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012bbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012bc0:	50                   	push   eax
c0012bc1:	e8 f7 fe ff ff       	call   c0012abd <Dbg::logc(char)>
c0012bc6:	58                   	pop    eax
c0012bc7:	eb c0                	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bc9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bcd:	89 c8                	mov    eax,ecx
c0012bcf:	83 c1 04             	add    ecx,0x4
c0012bd2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bd6:	ff 30                	push   DWORD PTR [eax]
c0012bd8:	e8 14 ff ff ff       	call   c0012af1 <Dbg::logWriteInt(unsigned int)>
c0012bdd:	5f                   	pop    edi
c0012bde:	eb a9                	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012be0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012be4:	89 c8                	mov    eax,ecx
c0012be6:	83 c1 04             	add    ecx,0x4
c0012be9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bed:	6a 10                	push   0x10
c0012bef:	ff 30                	push   DWORD PTR [eax]
c0012bf1:	e8 18 ff ff ff       	call   c0012b0e <Dbg::logWriteIntBase(unsigned int, int)>
c0012bf6:	59                   	pop    ecx
c0012bf7:	5f                   	pop    edi
c0012bf8:	eb 8f                	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bfa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bfe:	89 d0                	mov    eax,edx
c0012c00:	83 c2 08             	add    edx,0x8
c0012c03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c07:	6a 10                	push   0x10
c0012c09:	ff 30                	push   DWORD PTR [eax]
c0012c0b:	e8 fe fe ff ff       	call   c0012b0e <Dbg::logWriteIntBase(unsigned int, int)>
c0012c10:	58                   	pop    eax
c0012c11:	5a                   	pop    edx
c0012c12:	e9 72 ff ff ff       	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c17:	6a 25                	push   0x25
c0012c19:	e8 9f fe ff ff       	call   c0012abd <Dbg::logc(char)>
c0012c1e:	58                   	pop    eax
c0012c1f:	e9 65 ff ff ff       	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c24:	6a 25                	push   0x25
c0012c26:	e8 92 fe ff ff       	call   c0012abd <Dbg::logc(char)>
c0012c2b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c2e:	50                   	push   eax
c0012c2f:	e8 89 fe ff ff       	call   c0012abd <Dbg::logc(char)>
c0012c34:	5a                   	pop    edx
c0012c35:	59                   	pop    ecx
c0012c36:	e9 4e ff ff ff       	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c3b:	50                   	push   eax
c0012c3c:	89 eb                	mov    ebx,ebp
c0012c3e:	e8 7a fe ff ff       	call   c0012abd <Dbg::logc(char)>
c0012c43:	89 fd                	mov    ebp,edi
c0012c45:	58                   	pop    eax
c0012c46:	e9 3e ff ff ff       	jmp    c0012b89 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c4b:	90                   	nop

c0012c4c <File::read(unsigned long long, void*, int*)>:
c0012c4c:	53                   	push   ebx
c0012c4d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c55:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c5c:	3c 19                	cmp    al,0x19
c0012c5e:	77 35                	ja     c0012c95 <File::read(unsigned long long, void*, int*)+0x49>
c0012c60:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c0012c67:	85 c0                	test   eax,eax
c0012c69:	74 2a                	je     c0012c95 <File::read(unsigned long long, void*, int*)+0x49>
c0012c6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c71:	85 c0                	test   eax,eax
c0012c73:	74 20                	je     c0012c95 <File::read(unsigned long long, void*, int*)+0x49>
c0012c75:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c79:	74 21                	je     c0012c9c <File::read(unsigned long long, void*, int*)+0x50>
c0012c7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c81:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c8f:	5b                   	pop    ebx
c0012c90:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c93:	ff e0                	jmp    eax
c0012c95:	b8 0b 00 00 00       	mov    eax,0xb
c0012c9a:	eb 05                	jmp    c0012ca1 <File::read(unsigned long long, void*, int*)+0x55>
c0012c9c:	b8 05 00 00 00       	mov    eax,0x5
c0012ca1:	5b                   	pop    ebx
c0012ca2:	c3                   	ret    
c0012ca3:	90                   	nop

c0012ca4 <File::write(unsigned long long, void*, int*)>:
c0012ca4:	53                   	push   ebx
c0012ca5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ca9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012cad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cb4:	3c 19                	cmp    al,0x19
c0012cb6:	77 35                	ja     c0012ced <File::write(unsigned long long, void*, int*)+0x49>
c0012cb8:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c0012cbf:	85 c0                	test   eax,eax
c0012cc1:	74 2a                	je     c0012ced <File::write(unsigned long long, void*, int*)+0x49>
c0012cc3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cc9:	85 c0                	test   eax,eax
c0012ccb:	74 20                	je     c0012ced <File::write(unsigned long long, void*, int*)+0x49>
c0012ccd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cd1:	74 21                	je     c0012cf4 <File::write(unsigned long long, void*, int*)+0x50>
c0012cd3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cd5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cd9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ce3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ce7:	5b                   	pop    ebx
c0012ce8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ceb:	ff e0                	jmp    eax
c0012ced:	b8 0b 00 00 00       	mov    eax,0xb
c0012cf2:	eb 05                	jmp    c0012cf9 <File::write(unsigned long long, void*, int*)+0x55>
c0012cf4:	b8 05 00 00 00       	mov    eax,0x5
c0012cf9:	5b                   	pop    ebx
c0012cfa:	c3                   	ret    
c0012cfb:	90                   	nop

c0012cfc <Directory::read(unsigned long long, void*, int*)>:
c0012cfc:	53                   	push   ebx
c0012cfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d05:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012d0c:	3c 19                	cmp    al,0x19
c0012d0e:	77 35                	ja     c0012d45 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d10:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c0012d17:	85 c0                	test   eax,eax
c0012d19:	74 2a                	je     c0012d45 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d1b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d21:	85 c0                	test   eax,eax
c0012d23:	74 20                	je     c0012d45 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d25:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d29:	74 21                	je     c0012d4c <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d2b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d2d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d31:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d3b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d3f:	5b                   	pop    ebx
c0012d40:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d43:	ff e0                	jmp    eax
c0012d45:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4a:	eb 05                	jmp    c0012d51 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d4c:	b8 05 00 00 00       	mov    eax,0x5
c0012d51:	5b                   	pop    ebx
c0012d52:	c3                   	ret    
c0012d53:	90                   	nop

c0012d54 <Directory::write(unsigned long long, void*, int*)>:
c0012d54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d58:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d5f:	b8 0b 00 00 00       	mov    eax,0xb
c0012d64:	80 fa 19             	cmp    dl,0x19
c0012d67:	77 18                	ja     c0012d81 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d69:	8b 14 95 a0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0860]
c0012d70:	85 d2                	test   edx,edx
c0012d72:	74 0d                	je     c0012d81 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d74:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d7b:	19 c0                	sbb    eax,eax
c0012d7d:	83 e0 0a             	and    eax,0xa
c0012d80:	40                   	inc    eax
c0012d81:	c3                   	ret    

c0012d82 <File::isAtty()>:
c0012d82:	31 c0                	xor    eax,eax
c0012d84:	c3                   	ret    
c0012d85:	90                   	nop

c0012d86 <Directory::isAtty()>:
c0012d86:	31 c0                	xor    eax,eax
c0012d88:	c3                   	ret    
c0012d89:	90                   	nop

c0012d8a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d8a:	b8 0a 00 00 00       	mov    eax,0xa
c0012d8f:	c3                   	ret    

c0012d90 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d90:	b8 0a 00 00 00       	mov    eax,0xa
c0012d95:	c3                   	ret    

c0012d96 <Filesystem::getFileFirstSector(char const*)>:
c0012d96:	31 c0                	xor    eax,eax
c0012d98:	31 d2                	xor    edx,edx
c0012d9a:	c3                   	ret    
c0012d9b:	90                   	nop

c0012d9c <File::~File()>:
c0012d9c:	83 ec 0c             	sub    esp,0xc
c0012d9f:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c0012da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da8:	89 10                	mov    DWORD PTR [eax],edx
c0012daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	50                   	push   eax
c0012db2:	e8 0f e7 ff ff       	call   c00114c6 <UnixFile::~UnixFile()>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	90                   	nop
c0012dbb:	83 c4 0c             	add    esp,0xc
c0012dbe:	c3                   	ret    
c0012dbf:	90                   	nop

c0012dc0 <File::~File()>:
c0012dc0:	83 ec 0c             	sub    esp,0xc
c0012dc3:	83 ec 0c             	sub    esp,0xc
c0012dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dca:	e8 cd ff ff ff       	call   c0012d9c <File::~File()>
c0012dcf:	83 c4 10             	add    esp,0x10
c0012dd2:	83 ec 08             	sub    esp,0x8
c0012dd5:	68 14 01 00 00       	push   0x114
c0012dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dde:	e8 6a fc ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0012de3:	83 c4 10             	add    esp,0x10
c0012de6:	83 c4 0c             	add    esp,0xc
c0012de9:	c3                   	ret    

c0012dea <Directory::~Directory()>:
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0012df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df6:	89 10                	mov    DWORD PTR [eax],edx
c0012df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	50                   	push   eax
c0012e00:	e8 c1 e6 ff ff       	call   c00114c6 <UnixFile::~UnixFile()>
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	90                   	nop
c0012e09:	83 c4 0c             	add    esp,0xc
c0012e0c:	c3                   	ret    
c0012e0d:	90                   	nop

c0012e0e <Directory::~Directory()>:
c0012e0e:	83 ec 0c             	sub    esp,0xc
c0012e11:	83 ec 0c             	sub    esp,0xc
c0012e14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e18:	e8 cd ff ff ff       	call   c0012dea <Directory::~Directory()>
c0012e1d:	83 c4 10             	add    esp,0x10
c0012e20:	83 ec 08             	sub    esp,0x8
c0012e23:	68 14 01 00 00       	push   0x114
c0012e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e2c:	e8 1c fc ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0012e31:	83 c4 10             	add    esp,0x10
c0012e34:	83 c4 0c             	add    esp,0xc
c0012e37:	c3                   	ret    

c0012e38 <Filesystem::Filesystem()>:
c0012e38:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c0012e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e41:	89 10                	mov    DWORD PTR [eax],edx
c0012e43:	8b 15 14 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f314
c0012e49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e54:	a3 14 f3 02 c0       	mov    ds:0xc002f314,eax
c0012e59:	90                   	nop
c0012e5a:	c3                   	ret    
c0012e5b:	90                   	nop

c0012e5c <Filesystem::~Filesystem()>:
c0012e5c:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c0012e61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e65:	89 10                	mov    DWORD PTR [eax],edx
c0012e67:	90                   	nop
c0012e68:	c3                   	ret    
c0012e69:	90                   	nop

c0012e6a <Filesystem::~Filesystem()>:
c0012e6a:	83 ec 0c             	sub    esp,0xc
c0012e6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e71:	e8 e6 ff ff ff       	call   c0012e5c <Filesystem::~Filesystem()>
c0012e76:	83 c4 04             	add    esp,0x4
c0012e79:	83 ec 08             	sub    esp,0x8
c0012e7c:	6a 08                	push   0x8
c0012e7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e82:	e8 c6 fb ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	83 c4 0c             	add    esp,0xc
c0012e8d:	c3                   	ret    

c0012e8e <Fs::getcwd(Process*, char*, int)>:
c0012e8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e92:	31 c0                	xor    eax,eax
c0012e94:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e97:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e9b:	7d 15                	jge    c0012eb2 <Fs::getcwd(Process*, char*, int)+0x24>
c0012e9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ea1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ea8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012eab:	84 c9                	test   cl,cl
c0012ead:	74 06                	je     c0012eb5 <Fs::getcwd(Process*, char*, int)+0x27>
c0012eaf:	40                   	inc    eax
c0012eb0:	eb e2                	jmp    c0012e94 <Fs::getcwd(Process*, char*, int)+0x6>
c0012eb2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012eb5:	31 c0                	xor    eax,eax
c0012eb7:	c3                   	ret    

c0012eb8 <Fs::initVFS()>:
c0012eb8:	83 ec 18             	sub    esp,0x18
c0012ebb:	6a 08                	push   0x8
c0012ebd:	e8 ca c9 ff ff       	call   c000f88c <malloc>
c0012ec2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ec5:	e8 3e e6 00 00       	call   c0021508 <FAT::FAT()>
c0012eca:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ed1:	e8 b6 c9 ff ff       	call   c000f88c <malloc>
c0012ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ed9:	e8 66 f8 00 00       	call   c0022744 <ISO9660::ISO9660()>
c0012ede:	83 c4 1c             	add    esp,0x1c
c0012ee1:	c3                   	ret    

c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ee2:	55                   	push   ebp
c0012ee3:	57                   	push   edi
c0012ee4:	56                   	push   esi
c0012ee5:	53                   	push   ebx
c0012ee6:	81 ec 10 04 00 00    	sub    esp,0x410
c0012eec:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ef3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012efa:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012f01:	68 00 04 00 00       	push   0x400
c0012f06:	6a 00                	push   0x0
c0012f08:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012f0c:	56                   	push   esi
c0012f0d:	e8 3e d8 fe ff       	call   c0000750 <memset>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012f19:	75 0b                	jne    c0012f26 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012f1b:	50                   	push   eax
c0012f1c:	50                   	push   eax
c0012f1d:	57                   	push   edi
c0012f1e:	56                   	push   esi
c0012f1f:	e8 e8 d8 fe ff       	call   c000080c <strcpy>
c0012f24:	eb 41                	jmp    c0012f67 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f26:	8a 07                	mov    al,BYTE PTR [edi]
c0012f28:	3c 5c                	cmp    al,0x5c
c0012f2a:	74 04                	je     c0012f30 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f2c:	3c 2f                	cmp    al,0x2f
c0012f2e:	75 18                	jne    c0012f48 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f30:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f33:	3c 60                	cmp    al,0x60
c0012f35:	7e 03                	jle    c0012f3a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f37:	83 e8 20             	sub    eax,0x20
c0012f3a:	88 04 24             	mov    BYTE PTR [esp],al
c0012f3d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f44:	50                   	push   eax
c0012f45:	50                   	push   eax
c0012f46:	eb 18                	jmp    c0012f60 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f48:	50                   	push   eax
c0012f49:	50                   	push   eax
c0012f4a:	55                   	push   ebp
c0012f4b:	56                   	push   esi
c0012f4c:	e8 bb d8 fe ff       	call   c000080c <strcpy>
c0012f51:	5a                   	pop    edx
c0012f52:	59                   	pop    ecx
c0012f53:	68 c5 ce 02 c0       	push   0xc002cec5
c0012f58:	56                   	push   esi
c0012f59:	e8 ee d9 fe ff       	call   c000094c <strcat>
c0012f5e:	5d                   	pop    ebp
c0012f5f:	58                   	pop    eax
c0012f60:	57                   	push   edi
c0012f61:	56                   	push   esi
c0012f62:	e8 e5 d9 fe ff       	call   c000094c <strcat>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f6d:	3c 60                	cmp    al,0x60
c0012f6f:	7e 03                	jle    c0012f74 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f71:	83 e8 20             	sub    eax,0x20
c0012f74:	88 04 24             	mov    BYTE PTR [esp],al
c0012f77:	88 03                	mov    BYTE PTR [ebx],al
c0012f79:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f80:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f86:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f8a:	bf 03 00 00 00       	mov    edi,0x3
c0012f8f:	b8 03 00 00 00       	mov    eax,0x3
c0012f94:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f97:	84 d2                	test   dl,dl
c0012f99:	0f 84 91 00 00 00    	je     c0013030 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012fa2:	80 fa 5c             	cmp    dl,0x5c
c0012fa5:	74 05                	je     c0012fac <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012fa7:	80 fa 2f             	cmp    dl,0x2f
c0012faa:	75 12                	jne    c0012fbe <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012fac:	89 c5                	mov    ebp,eax
c0012fae:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012fb3:	74 09                	je     c0012fbe <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012fb5:	40                   	inc    eax
c0012fb6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012fba:	89 cf                	mov    edi,ecx
c0012fbc:	eb d6                	jmp    c0012f94 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012fbe:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012fc3:	75 5b                	jne    c0013020 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fc5:	80 fa 2e             	cmp    dl,0x2e
c0012fc8:	75 56                	jne    c0013020 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fca:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012fce:	74 19                	je     c0012fe9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012fd0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fd5:	74 53                	je     c001302a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fd7:	89 f9                	mov    ecx,edi
c0012fd9:	41                   	inc    ecx
c0012fda:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fdd:	80 fa 2f             	cmp    dl,0x2f
c0012fe0:	74 f7                	je     c0012fd9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fe2:	80 fa 5c             	cmp    dl,0x5c
c0012fe5:	74 f2                	je     c0012fd9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fe7:	eb d1                	jmp    c0012fba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fe9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fee:	74 3a                	je     c001302a <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ff0:	83 f8 03             	cmp    eax,0x3
c0012ff3:	74 c5                	je     c0012fba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ff5:	41                   	inc    ecx
c0012ff6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ff9:	80 fa 2f             	cmp    dl,0x2f
c0012ffc:	74 f7                	je     c0012ff5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ffe:	80 fa 5c             	cmp    dl,0x5c
c0013001:	74 f2                	je     c0012ff5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013003:	48                   	dec    eax
c0013004:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013008:	75 06                	jne    c0013010 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001300a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001300e:	eb f3                	jmp    c0013003 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013010:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013014:	74 07                	je     c001301d <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013016:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001301a:	48                   	dec    eax
c001301b:	eb f3                	jmp    c0013010 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001301d:	40                   	inc    eax
c001301e:	eb 9a                	jmp    c0012fba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013020:	80 fa 2f             	cmp    dl,0x2f
c0013023:	74 95                	je     c0012fba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013025:	80 fa 5c             	cmp    dl,0x5c
c0013028:	74 90                	je     c0012fba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001302a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001302d:	40                   	inc    eax
c001302e:	eb 8a                	jmp    c0012fba <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013030:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	53                   	push   ebx
c0013038:	e8 2f d7 fe ff       	call   c000076c <strlen>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013045:	75 26                	jne    c001306d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013047:	83 ec 0c             	sub    esp,0xc
c001304a:	53                   	push   ebx
c001304b:	e8 1c d7 fe ff       	call   c000076c <strlen>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013058:	74 26                	je     c0013080 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001305a:	83 ec 0c             	sub    esp,0xc
c001305d:	53                   	push   ebx
c001305e:	e8 09 d7 fe ff       	call   c000076c <strlen>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001306b:	eb c7                	jmp    c0013034 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001306d:	83 ec 0c             	sub    esp,0xc
c0013070:	53                   	push   ebx
c0013071:	e8 f6 d6 fe ff       	call   c000076c <strlen>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001307e:	74 c7                	je     c0013047 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013080:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013086:	5b                   	pop    ebx
c0013087:	5e                   	pop    esi
c0013088:	5f                   	pop    edi
c0013089:	5d                   	pop    ebp
c001308a:	c3                   	ret    
c001308b:	90                   	nop

c001308c <File::File(char const*, Process*)>:
c001308c:	83 ec 0c             	sub    esp,0xc
c001308f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013093:	83 ec 08             	sub    esp,0x8
c0013096:	6a 00                	push   0x0
c0013098:	50                   	push   eax
c0013099:	e8 46 e2 ff ff       	call   c00112e4 <UnixFile::UnixFile(int)>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	ba c4 b6 02 c0       	mov    edx,0xc002b6c4
c00130a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130aa:	89 10                	mov    DWORD PTR [eax],edx
c00130ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ba:	83 c0 0d             	add    eax,0xd
c00130bd:	83 ec 04             	sub    esp,0x4
c00130c0:	52                   	push   edx
c00130c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c5:	50                   	push   eax
c00130c6:	e8 17 fe ff ff       	call   c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130d5:	8d 50 bf             	lea    edx,[eax-0x41]
c00130d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130dc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130ea:	90                   	nop
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	c3                   	ret    
c00130ef:	90                   	nop

c00130f0 <File::open(FileOpenMode)>:
c00130f0:	53                   	push   ebx
c00130f1:	b8 0b 00 00 00       	mov    eax,0xb
c00130f6:	83 ec 08             	sub    esp,0x8
c00130f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130fd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013104:	80 fa 19             	cmp    dl,0x19
c0013107:	77 40                	ja     c0013149 <File::open(FileOpenMode)+0x59>
c0013109:	8b 14 95 a0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0860]
c0013110:	85 d2                	test   edx,edx
c0013112:	74 35                	je     c0013149 <File::open(FileOpenMode)+0x59>
c0013114:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001311a:	85 d2                	test   edx,edx
c001311c:	74 2b                	je     c0013149 <File::open(FileOpenMode)+0x59>
c001311e:	b8 06 00 00 00       	mov    eax,0x6
c0013123:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013127:	75 20                	jne    c0013149 <File::open(FileOpenMode)+0x59>
c0013129:	8b 02                	mov    eax,DWORD PTR [edx]
c001312b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013131:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013135:	51                   	push   ecx
c0013136:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013139:	51                   	push   ecx
c001313a:	52                   	push   edx
c001313b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001313e:	83 c4 10             	add    esp,0x10
c0013141:	85 c0                	test   eax,eax
c0013143:	75 04                	jne    c0013149 <File::open(FileOpenMode)+0x59>
c0013145:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013149:	83 c4 08             	add    esp,0x8
c001314c:	5b                   	pop    ebx
c001314d:	c3                   	ret    

c001314e <File::close()>:
c001314e:	53                   	push   ebx
c001314f:	b8 0b 00 00 00       	mov    eax,0xb
c0013154:	83 ec 08             	sub    esp,0x8
c0013157:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001315b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013162:	80 fa 19             	cmp    dl,0x19
c0013165:	77 41                	ja     c00131a8 <File::close()+0x5a>
c0013167:	8b 1c 95 a0 f7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0860]
c001316e:	85 db                	test   ebx,ebx
c0013170:	74 36                	je     c00131a8 <File::close()+0x5a>
c0013172:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013179:	74 2d                	je     c00131a8 <File::close()+0x5a>
c001317b:	b8 05 00 00 00       	mov    eax,0x5
c0013180:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013184:	74 22                	je     c00131a8 <File::close()+0x5a>
c0013186:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001318a:	8b 04 95 a0 f7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0860]
c0013191:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013197:	53                   	push   ebx
c0013198:	53                   	push   ebx
c0013199:	8b 10                	mov    edx,DWORD PTR [eax]
c001319b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131a1:	50                   	push   eax
c00131a2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	83 c4 08             	add    esp,0x8
c00131ab:	5b                   	pop    ebx
c00131ac:	c3                   	ret    
c00131ad:	90                   	nop

c00131ae <File::seek(unsigned long long)>:
c00131ae:	56                   	push   esi
c00131af:	53                   	push   ebx
c00131b0:	b8 0b 00 00 00       	mov    eax,0xb
c00131b5:	51                   	push   ecx
c00131b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00131be:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00131c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131c9:	80 fa 19             	cmp    dl,0x19
c00131cc:	77 31                	ja     c00131ff <File::seek(unsigned long long)+0x51>
c00131ce:	8b 14 95 a0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0860]
c00131d5:	85 d2                	test   edx,edx
c00131d7:	74 26                	je     c00131ff <File::seek(unsigned long long)+0x51>
c00131d9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131df:	85 d2                	test   edx,edx
c00131e1:	74 1c                	je     c00131ff <File::seek(unsigned long long)+0x51>
c00131e3:	b8 05 00 00 00       	mov    eax,0x5
c00131e8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131ec:	74 11                	je     c00131ff <File::seek(unsigned long long)+0x51>
c00131ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00131f0:	53                   	push   ebx
c00131f1:	51                   	push   ecx
c00131f2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131f8:	52                   	push   edx
c00131f9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	5a                   	pop    edx
c0013200:	5b                   	pop    ebx
c0013201:	5e                   	pop    esi
c0013202:	c3                   	ret    
c0013203:	90                   	nop

c0013204 <File::tell(unsigned long long*)>:
c0013204:	83 ec 0c             	sub    esp,0xc
c0013207:	b8 0b 00 00 00       	mov    eax,0xb
c001320c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013210:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013217:	80 fa 19             	cmp    dl,0x19
c001321a:	77 34                	ja     c0013250 <File::tell(unsigned long long*)+0x4c>
c001321c:	8b 14 95 a0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0860]
c0013223:	85 d2                	test   edx,edx
c0013225:	74 29                	je     c0013250 <File::tell(unsigned long long*)+0x4c>
c0013227:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001322d:	85 d2                	test   edx,edx
c001322f:	74 1f                	je     c0013250 <File::tell(unsigned long long*)+0x4c>
c0013231:	b8 05 00 00 00       	mov    eax,0x5
c0013236:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001323a:	74 14                	je     c0013250 <File::tell(unsigned long long*)+0x4c>
c001323c:	50                   	push   eax
c001323d:	8b 02                	mov    eax,DWORD PTR [edx]
c001323f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013243:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013249:	52                   	push   edx
c001324a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	83 c4 0c             	add    esp,0xc
c0013253:	c3                   	ret    

c0013254 <File::rewind()>:
c0013254:	83 ec 10             	sub    esp,0x10
c0013257:	6a 00                	push   0x0
c0013259:	6a 00                	push   0x0
c001325b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325f:	e8 4a ff ff ff       	call   c00131ae <File::seek(unsigned long long)>
c0013264:	83 c4 1c             	add    esp,0x1c
c0013267:	c3                   	ret    

c0013268 <File::unlink()>:
c0013268:	83 ec 0c             	sub    esp,0xc
c001326b:	b8 0b 00 00 00       	mov    eax,0xb
c0013270:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013274:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001327b:	80 f9 19             	cmp    cl,0x19
c001327e:	77 2f                	ja     c00132af <File::unlink()+0x47>
c0013280:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c0013287:	85 c9                	test   ecx,ecx
c0013289:	74 24                	je     c00132af <File::unlink()+0x47>
c001328b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013291:	85 c9                	test   ecx,ecx
c0013293:	74 1a                	je     c00132af <File::unlink()+0x47>
c0013295:	b8 06 00 00 00       	mov    eax,0x6
c001329a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001329e:	75 0f                	jne    c00132af <File::unlink()+0x47>
c00132a0:	83 c2 0d             	add    edx,0xd
c00132a3:	50                   	push   eax
c00132a4:	50                   	push   eax
c00132a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132a7:	52                   	push   edx
c00132a8:	51                   	push   ecx
c00132a9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	83 c4 0c             	add    esp,0xc
c00132b2:	c3                   	ret    
c00132b3:	90                   	nop

c00132b4 <File::rename(char const*)>:
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	b8 0b 00 00 00       	mov    eax,0xb
c00132bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132c7:	80 f9 19             	cmp    cl,0x19
c00132ca:	77 32                	ja     c00132fe <File::rename(char const*)+0x4a>
c00132cc:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c00132d3:	85 c9                	test   ecx,ecx
c00132d5:	74 27                	je     c00132fe <File::rename(char const*)+0x4a>
c00132d7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132dd:	85 c9                	test   ecx,ecx
c00132df:	74 1d                	je     c00132fe <File::rename(char const*)+0x4a>
c00132e1:	b8 06 00 00 00       	mov    eax,0x6
c00132e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132ea:	75 12                	jne    c00132fe <File::rename(char const*)+0x4a>
c00132ec:	83 c2 0d             	add    edx,0xd
c00132ef:	50                   	push   eax
c00132f0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132f6:	52                   	push   edx
c00132f7:	51                   	push   ecx
c00132f8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	83 c4 0c             	add    esp,0xc
c0013301:	c3                   	ret    

c0013302 <File::chfatattr(unsigned char, unsigned char)>:
c0013302:	57                   	push   edi
c0013303:	b8 0b 00 00 00       	mov    eax,0xb
c0013308:	56                   	push   esi
c0013309:	53                   	push   ebx
c001330a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001330e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013312:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013319:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001331d:	80 f9 19             	cmp    cl,0x19
c0013320:	77 37                	ja     c0013359 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013322:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c0013329:	85 c9                	test   ecx,ecx
c001332b:	74 2c                	je     c0013359 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001332d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013333:	85 c9                	test   ecx,ecx
c0013335:	74 22                	je     c0013359 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013337:	b8 06 00 00 00       	mov    eax,0x6
c001333c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013340:	75 17                	jne    c0013359 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013342:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013344:	89 f0                	mov    eax,esi
c0013346:	83 c2 0d             	add    edx,0xd
c0013349:	0f b6 f0             	movzx  esi,al
c001334c:	0f b6 db             	movzx  ebx,bl
c001334f:	56                   	push   esi
c0013350:	53                   	push   ebx
c0013351:	52                   	push   edx
c0013352:	51                   	push   ecx
c0013353:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013356:	83 c4 10             	add    esp,0x10
c0013359:	5b                   	pop    ebx
c001335a:	5e                   	pop    esi
c001335b:	5f                   	pop    edi
c001335c:	c3                   	ret    
c001335d:	90                   	nop

c001335e <File::exists()>:
c001335e:	83 ec 0c             	sub    esp,0xc
c0013361:	31 c0                	xor    eax,eax
c0013363:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013367:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001336e:	80 f9 19             	cmp    cl,0x19
c0013371:	77 24                	ja     c0013397 <File::exists()+0x39>
c0013373:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c001337a:	85 c9                	test   ecx,ecx
c001337c:	74 19                	je     c0013397 <File::exists()+0x39>
c001337e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013384:	85 c9                	test   ecx,ecx
c0013386:	74 0f                	je     c0013397 <File::exists()+0x39>
c0013388:	83 c2 0d             	add    edx,0xd
c001338b:	50                   	push   eax
c001338c:	50                   	push   eax
c001338d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001338f:	52                   	push   edx
c0013390:	51                   	push   ecx
c0013391:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	83 c4 0c             	add    esp,0xc
c001339a:	c3                   	ret    
c001339b:	90                   	nop

c001339c <File::stat(unsigned long long*, bool*)>:
c001339c:	56                   	push   esi
c001339d:	53                   	push   ebx
c001339e:	50                   	push   eax
c001339f:	b8 0b 00 00 00       	mov    eax,0xb
c00133a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00133ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133b7:	80 f9 19             	cmp    cl,0x19
c00133ba:	77 3d                	ja     c00133f9 <File::stat(unsigned long long*, bool*)+0x5d>
c00133bc:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c00133c3:	85 c9                	test   ecx,ecx
c00133c5:	74 32                	je     c00133f9 <File::stat(unsigned long long*, bool*)+0x5d>
c00133c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133cd:	85 c9                	test   ecx,ecx
c00133cf:	74 28                	je     c00133f9 <File::stat(unsigned long long*, bool*)+0x5d>
c00133d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133d3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133d7:	74 13                	je     c00133ec <File::stat(unsigned long long*, bool*)+0x50>
c00133d9:	83 ec 04             	sub    esp,0x4
c00133dc:	56                   	push   esi
c00133dd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133e3:	51                   	push   ecx
c00133e4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133e7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133ea:	eb 0a                	jmp    c00133f6 <File::stat(unsigned long long*, bool*)+0x5a>
c00133ec:	53                   	push   ebx
c00133ed:	83 c2 0d             	add    edx,0xd
c00133f0:	56                   	push   esi
c00133f1:	52                   	push   edx
c00133f2:	51                   	push   ecx
c00133f3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	5a                   	pop    edx
c00133fa:	5b                   	pop    ebx
c00133fb:	5e                   	pop    esi
c00133fc:	c3                   	ret    

c00133fd <Fs::setcwd(Process*, char*)>:
c00133fd:	55                   	push   ebp
c00133fe:	57                   	push   edi
c00133ff:	56                   	push   esi
c0013400:	53                   	push   ebx
c0013401:	81 ec 20 02 00 00    	sub    esp,0x220
c0013407:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001340e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013414:	57                   	push   edi
c0013415:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001341c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013420:	56                   	push   esi
c0013421:	e8 bc fa ff ff       	call   c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013426:	89 34 24             	mov    DWORD PTR [esp],esi
c0013429:	e8 3e d3 fe ff       	call   c000076c <strlen>
c001342e:	83 c4 10             	add    esp,0x10
c0013431:	83 f8 02             	cmp    eax,0x2
c0013434:	77 17                	ja     c001344d <Fs::setcwd(Process*, char*)+0x50>
c0013436:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001343b:	83 e8 41             	sub    eax,0x41
c001343e:	83 f8 19             	cmp    eax,0x19
c0013441:	76 24                	jbe    c0013467 <Fs::setcwd(Process*, char*)+0x6a>
c0013443:	b8 03 00 00 00       	mov    eax,0x3
c0013448:	e9 e0 00 00 00       	jmp    c001352d <Fs::setcwd(Process*, char*)+0x130>
c001344d:	83 ec 0c             	sub    esp,0xc
c0013450:	56                   	push   esi
c0013451:	e8 16 d3 fe ff       	call   c000076c <strlen>
c0013456:	83 c4 10             	add    esp,0x10
c0013459:	83 f8 03             	cmp    eax,0x3
c001345c:	75 34                	jne    c0013492 <Fs::setcwd(Process*, char*)+0x95>
c001345e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013463:	75 2d                	jne    c0013492 <Fs::setcwd(Process*, char*)+0x95>
c0013465:	eb cf                	jmp    c0013436 <Fs::setcwd(Process*, char*)+0x39>
c0013467:	8b 14 85 a0 f7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0860]
c001346e:	b8 05 00 00 00       	mov    eax,0x5
c0013473:	85 d2                	test   edx,edx
c0013475:	0f 84 b2 00 00 00    	je     c001352d <Fs::setcwd(Process*, char*)+0x130>
c001347b:	b8 06 00 00 00       	mov    eax,0x6
c0013480:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013487:	0f 85 92 00 00 00    	jne    c001351f <Fs::setcwd(Process*, char*)+0x122>
c001348d:	e9 9b 00 00 00       	jmp    c001352d <Fs::setcwd(Process*, char*)+0x130>
c0013492:	83 ec 0c             	sub    esp,0xc
c0013495:	68 14 01 00 00       	push   0x114
c001349a:	e8 ed c3 ff ff       	call   c000f88c <malloc>
c001349f:	83 c4 0c             	add    esp,0xc
c00134a2:	89 c3                	mov    ebx,eax
c00134a4:	55                   	push   ebp
c00134a5:	56                   	push   esi
c00134a6:	50                   	push   eax
c00134a7:	e8 e0 fb ff ff       	call   c001308c <File::File(char const*, Process*)>
c00134ac:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134b1:	83 c4 0c             	add    esp,0xc
c00134b4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00134b8:	50                   	push   eax
c00134b9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00134bd:	50                   	push   eax
c00134be:	53                   	push   ebx
c00134bf:	e8 d8 fe ff ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	83 f8 02             	cmp    eax,0x2
c00134ca:	74 04                	je     c00134d0 <Fs::setcwd(Process*, char*)+0xd3>
c00134cc:	85 c0                	test   eax,eax
c00134ce:	74 1c                	je     c00134ec <Fs::setcwd(Process*, char*)+0xef>
c00134d0:	b8 01 00 00 00       	mov    eax,0x1
c00134d5:	85 db                	test   ebx,ebx
c00134d7:	74 54                	je     c001352d <Fs::setcwd(Process*, char*)+0x130>
c00134d9:	83 ec 0c             	sub    esp,0xc
c00134dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134de:	53                   	push   ebx
c00134df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	b8 01 00 00 00       	mov    eax,0x1
c00134ea:	eb 41                	jmp    c001352d <Fs::setcwd(Process*, char*)+0x130>
c00134ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134f1:	75 1c                	jne    c001350f <Fs::setcwd(Process*, char*)+0x112>
c00134f3:	b8 02 00 00 00       	mov    eax,0x2
c00134f8:	85 db                	test   ebx,ebx
c00134fa:	74 31                	je     c001352d <Fs::setcwd(Process*, char*)+0x130>
c00134fc:	83 ec 0c             	sub    esp,0xc
c00134ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013501:	53                   	push   ebx
c0013502:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	b8 02 00 00 00       	mov    eax,0x2
c001350d:	eb 1e                	jmp    c001352d <Fs::setcwd(Process*, char*)+0x130>
c001350f:	85 db                	test   ebx,ebx
c0013511:	74 0c                	je     c001351f <Fs::setcwd(Process*, char*)+0x122>
c0013513:	83 ec 0c             	sub    esp,0xc
c0013516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013518:	53                   	push   ebx
c0013519:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001351c:	83 c4 10             	add    esp,0x10
c001351f:	50                   	push   eax
c0013520:	50                   	push   eax
c0013521:	56                   	push   esi
c0013522:	57                   	push   edi
c0013523:	e8 e4 d2 fe ff       	call   c000080c <strcpy>
c0013528:	83 c4 10             	add    esp,0x10
c001352b:	31 c0                	xor    eax,eax
c001352d:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013533:	5b                   	pop    ebx
c0013534:	5e                   	pop    esi
c0013535:	5f                   	pop    edi
c0013536:	5d                   	pop    ebp
c0013537:	c3                   	ret    

c0013538 <Directory::Directory(char const*, Process*)>:
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353f:	83 ec 08             	sub    esp,0x8
c0013542:	6a 00                	push   0x0
c0013544:	50                   	push   eax
c0013545:	e8 9a dd ff ff       	call   c00112e4 <UnixFile::UnixFile(int)>
c001354a:	83 c4 10             	add    esp,0x10
c001354d:	ba e0 b6 02 c0       	mov    edx,0xc002b6e0
c0013552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013556:	89 10                	mov    DWORD PTR [eax],edx
c0013558:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001355c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013566:	83 c0 0d             	add    eax,0xd
c0013569:	83 ec 04             	sub    esp,0x4
c001356c:	52                   	push   edx
c001356d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013571:	50                   	push   eax
c0013572:	e8 6b f9 ff ff       	call   c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013577:	83 c4 10             	add    esp,0x10
c001357a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013581:	8d 50 bf             	lea    edx,[eax-0x41]
c0013584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013588:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001358e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013592:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013596:	90                   	nop
c0013597:	83 c4 0c             	add    esp,0xc
c001359a:	c3                   	ret    
c001359b:	90                   	nop

c001359c <Directory::open()>:
c001359c:	53                   	push   ebx
c001359d:	b8 0b 00 00 00       	mov    eax,0xb
c00135a2:	83 ec 08             	sub    esp,0x8
c00135a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135a9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135b0:	80 fa 19             	cmp    dl,0x19
c00135b3:	77 3d                	ja     c00135f2 <Directory::open()+0x56>
c00135b5:	8b 14 95 a0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0860]
c00135bc:	85 d2                	test   edx,edx
c00135be:	74 32                	je     c00135f2 <Directory::open()+0x56>
c00135c0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135c6:	85 d2                	test   edx,edx
c00135c8:	74 28                	je     c00135f2 <Directory::open()+0x56>
c00135ca:	b8 06 00 00 00       	mov    eax,0x6
c00135cf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135d3:	75 1d                	jne    c00135f2 <Directory::open()+0x56>
c00135d5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135db:	50                   	push   eax
c00135dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00135de:	51                   	push   ecx
c00135df:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135e2:	51                   	push   ecx
c00135e3:	52                   	push   edx
c00135e4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135e7:	83 c4 10             	add    esp,0x10
c00135ea:	85 c0                	test   eax,eax
c00135ec:	75 04                	jne    c00135f2 <Directory::open()+0x56>
c00135ee:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135f2:	83 c4 08             	add    esp,0x8
c00135f5:	5b                   	pop    ebx
c00135f6:	c3                   	ret    
c00135f7:	90                   	nop

c00135f8 <Directory::close()>:
c00135f8:	53                   	push   ebx
c00135f9:	b8 0b 00 00 00       	mov    eax,0xb
c00135fe:	83 ec 08             	sub    esp,0x8
c0013601:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013605:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001360c:	80 fa 19             	cmp    dl,0x19
c001360f:	77 41                	ja     c0013652 <Directory::close()+0x5a>
c0013611:	8b 1c 95 a0 f7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0860]
c0013618:	85 db                	test   ebx,ebx
c001361a:	74 36                	je     c0013652 <Directory::close()+0x5a>
c001361c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013623:	74 2d                	je     c0013652 <Directory::close()+0x5a>
c0013625:	b8 05 00 00 00       	mov    eax,0x5
c001362a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001362e:	74 22                	je     c0013652 <Directory::close()+0x5a>
c0013630:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013634:	8b 04 95 a0 f7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0860]
c001363b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013641:	53                   	push   ebx
c0013642:	53                   	push   ebx
c0013643:	8b 10                	mov    edx,DWORD PTR [eax]
c0013645:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001364b:	50                   	push   eax
c001364c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	83 c4 08             	add    esp,0x8
c0013655:	5b                   	pop    ebx
c0013656:	c3                   	ret    
c0013657:	90                   	nop

c0013658 <Directory::unlink()>:
c0013658:	83 ec 0c             	sub    esp,0xc
c001365b:	b8 0b 00 00 00       	mov    eax,0xb
c0013660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013664:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001366b:	80 f9 19             	cmp    cl,0x19
c001366e:	77 2f                	ja     c001369f <Directory::unlink()+0x47>
c0013670:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c0013677:	85 c9                	test   ecx,ecx
c0013679:	74 24                	je     c001369f <Directory::unlink()+0x47>
c001367b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013681:	85 c9                	test   ecx,ecx
c0013683:	74 1a                	je     c001369f <Directory::unlink()+0x47>
c0013685:	b8 06 00 00 00       	mov    eax,0x6
c001368a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001368e:	75 0f                	jne    c001369f <Directory::unlink()+0x47>
c0013690:	83 c2 0d             	add    edx,0xd
c0013693:	50                   	push   eax
c0013694:	50                   	push   eax
c0013695:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013697:	52                   	push   edx
c0013698:	51                   	push   ecx
c0013699:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	83 c4 0c             	add    esp,0xc
c00136a2:	c3                   	ret    
c00136a3:	90                   	nop

c00136a4 <Directory::rename(char const*)>:
c00136a4:	83 ec 0c             	sub    esp,0xc
c00136a7:	b8 0b 00 00 00       	mov    eax,0xb
c00136ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b7:	80 f9 19             	cmp    cl,0x19
c00136ba:	77 32                	ja     c00136ee <Directory::rename(char const*)+0x4a>
c00136bc:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c00136c3:	85 c9                	test   ecx,ecx
c00136c5:	74 27                	je     c00136ee <Directory::rename(char const*)+0x4a>
c00136c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136cd:	85 c9                	test   ecx,ecx
c00136cf:	74 1d                	je     c00136ee <Directory::rename(char const*)+0x4a>
c00136d1:	b8 06 00 00 00       	mov    eax,0x6
c00136d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136da:	75 12                	jne    c00136ee <Directory::rename(char const*)+0x4a>
c00136dc:	83 c2 0d             	add    edx,0xd
c00136df:	50                   	push   eax
c00136e0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136e6:	52                   	push   edx
c00136e7:	51                   	push   ecx
c00136e8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136eb:	83 c4 10             	add    esp,0x10
c00136ee:	83 c4 0c             	add    esp,0xc
c00136f1:	c3                   	ret    

c00136f2 <Directory::exists()>:
c00136f2:	83 ec 0c             	sub    esp,0xc
c00136f5:	31 c0                	xor    eax,eax
c00136f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136fb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013702:	80 f9 19             	cmp    cl,0x19
c0013705:	77 24                	ja     c001372b <Directory::exists()+0x39>
c0013707:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c001370e:	85 c9                	test   ecx,ecx
c0013710:	74 19                	je     c001372b <Directory::exists()+0x39>
c0013712:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013718:	85 c9                	test   ecx,ecx
c001371a:	74 0f                	je     c001372b <Directory::exists()+0x39>
c001371c:	83 c2 0d             	add    edx,0xd
c001371f:	50                   	push   eax
c0013720:	50                   	push   eax
c0013721:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013723:	52                   	push   edx
c0013724:	51                   	push   ecx
c0013725:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	83 c4 0c             	add    esp,0xc
c001372e:	c3                   	ret    
c001372f:	90                   	nop

c0013730 <Directory::read(dirent*)>:
c0013730:	83 ec 1c             	sub    esp,0x1c
c0013733:	b8 0b 00 00 00       	mov    eax,0xb
c0013738:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001373c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013743:	80 fa 19             	cmp    dl,0x19
c0013746:	77 30                	ja     c0013778 <Directory::read(dirent*)+0x48>
c0013748:	8b 14 95 a0 f7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0860]
c001374f:	85 d2                	test   edx,edx
c0013751:	74 25                	je     c0013778 <Directory::read(dirent*)+0x48>
c0013753:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001375a:	74 1c                	je     c0013778 <Directory::read(dirent*)+0x48>
c001375c:	83 ec 0c             	sub    esp,0xc
c001375f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013761:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013765:	52                   	push   edx
c0013766:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001376a:	6a 00                	push   0x0
c001376c:	68 10 01 00 00       	push   0x110
c0013771:	51                   	push   ecx
c0013772:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013775:	83 c4 20             	add    esp,0x20
c0013778:	83 c4 1c             	add    esp,0x1c
c001377b:	c3                   	ret    

c001377c <Directory::create()>:
c001377c:	83 ec 0c             	sub    esp,0xc
c001377f:	b8 0b 00 00 00       	mov    eax,0xb
c0013784:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013788:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001378f:	80 f9 19             	cmp    cl,0x19
c0013792:	77 2f                	ja     c00137c3 <Directory::create()+0x47>
c0013794:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c001379b:	85 c9                	test   ecx,ecx
c001379d:	74 24                	je     c00137c3 <Directory::create()+0x47>
c001379f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137a5:	85 c9                	test   ecx,ecx
c00137a7:	74 1a                	je     c00137c3 <Directory::create()+0x47>
c00137a9:	b8 06 00 00 00       	mov    eax,0x6
c00137ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137b2:	75 0f                	jne    c00137c3 <Directory::create()+0x47>
c00137b4:	83 c2 0d             	add    edx,0xd
c00137b7:	50                   	push   eax
c00137b8:	50                   	push   eax
c00137b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137bb:	52                   	push   edx
c00137bc:	51                   	push   ecx
c00137bd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00137c0:	83 c4 10             	add    esp,0x10
c00137c3:	83 c4 0c             	add    esp,0xc
c00137c6:	c3                   	ret    
c00137c7:	90                   	nop

c00137c8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00137c8:	b8 0a 00 00 00       	mov    eax,0xa
c00137cd:	c3                   	ret    

c00137ce <Bus::Bus(char const*)>:
c00137ce:	83 ec 0c             	sub    esp,0xc
c00137d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d5:	83 ec 08             	sub    esp,0x8
c00137d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137dc:	50                   	push   eax
c00137dd:	e8 88 09 00 00       	call   c001416a <Device::Device(char const*)>
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c00137ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ee:	89 10                	mov    DWORD PTR [eax],edx
c00137f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137fe:	90                   	nop
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	c3                   	ret    
c0013803:	90                   	nop

c0013804 <Bus::~Bus()>:
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	ba fc b6 02 c0       	mov    edx,0xc002b6fc
c001380c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013810:	89 10                	mov    DWORD PTR [eax],edx
c0013812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013816:	83 ec 0c             	sub    esp,0xc
c0013819:	50                   	push   eax
c001381a:	e8 15 06 00 00       	call   c0013e34 <Device::~Device()>
c001381f:	83 c4 10             	add    esp,0x10
c0013822:	90                   	nop
c0013823:	83 c4 0c             	add    esp,0xc
c0013826:	c3                   	ret    
c0013827:	90                   	nop

c0013828 <Bus::~Bus()>:
c0013828:	83 ec 0c             	sub    esp,0xc
c001382b:	83 ec 0c             	sub    esp,0xc
c001382e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013832:	e8 cd ff ff ff       	call   c0013804 <Bus::~Bus()>
c0013837:	83 c4 10             	add    esp,0x10
c001383a:	83 ec 08             	sub    esp,0x8
c001383d:	68 58 01 00 00       	push   0x158
c0013842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013846:	e8 02 f2 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c001384b:	83 c4 10             	add    esp,0x10
c001384e:	83 c4 0c             	add    esp,0xc
c0013851:	c3                   	ret    

c0013852 <Buzzer::Buzzer(char const*)>:
c0013852:	83 ec 0c             	sub    esp,0xc
c0013855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013859:	83 ec 08             	sub    esp,0x8
c001385c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013860:	50                   	push   eax
c0013861:	e8 04 09 00 00       	call   c001416a <Device::Device(char const*)>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c001386e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013872:	89 10                	mov    DWORD PTR [eax],edx
c0013874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013878:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013886:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013890:	90                   	nop
c0013891:	83 c4 0c             	add    esp,0xc
c0013894:	c3                   	ret    
c0013895:	90                   	nop

c0013896 <Buzzer::~Buzzer()>:
c0013896:	83 ec 0c             	sub    esp,0xc
c0013899:	ba 28 b7 02 c0       	mov    edx,0xc002b728
c001389e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a2:	89 10                	mov    DWORD PTR [eax],edx
c00138a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a8:	83 ec 0c             	sub    esp,0xc
c00138ab:	50                   	push   eax
c00138ac:	e8 83 05 00 00       	call   c0013e34 <Device::~Device()>
c00138b1:	83 c4 10             	add    esp,0x10
c00138b4:	90                   	nop
c00138b5:	83 c4 0c             	add    esp,0xc
c00138b8:	c3                   	ret    
c00138b9:	90                   	nop

c00138ba <Buzzer::~Buzzer()>:
c00138ba:	83 ec 0c             	sub    esp,0xc
c00138bd:	83 ec 0c             	sub    esp,0xc
c00138c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c4:	e8 cd ff ff ff       	call   c0013896 <Buzzer::~Buzzer()>
c00138c9:	83 c4 10             	add    esp,0x10
c00138cc:	83 ec 08             	sub    esp,0x8
c00138cf:	68 5c 01 00 00       	push   0x15c
c00138d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138d8:	e8 70 f1 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00138dd:	83 c4 10             	add    esp,0x10
c00138e0:	83 c4 0c             	add    esp,0xc
c00138e3:	c3                   	ret    

c00138e4 <Buzzer::stop()>:
c00138e4:	83 ec 14             	sub    esp,0x14
c00138e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00138ed:	6a 00                	push   0x0
c00138ef:	50                   	push   eax
c00138f0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138f3:	83 c4 1c             	add    esp,0x1c
c00138f6:	c3                   	ret    

c00138f7 <beepThread(void*)>:
c00138f7:	53                   	push   ebx
c00138f8:	83 ec 08             	sub    esp,0x8
c00138fb:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0013900:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013904:	48                   	dec    eax
c0013905:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001390a:	75 01                	jne    c001390d <beepThread(void*)+0x16>
c001390c:	fb                   	sti    
c001390d:	50                   	push   eax
c001390e:	50                   	push   eax
c001390f:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013914:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001391a:	52                   	push   edx
c001391b:	50                   	push   eax
c001391c:	e8 2e ae 00 00       	call   c001e74f <nanoSleep(unsigned long long)>
c0013921:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013924:	e8 bb ff ff ff       	call   c00138e4 <Buzzer::stop()>
c0013929:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013931:	83 c4 18             	add    esp,0x18
c0013934:	5b                   	pop    ebx
c0013935:	e9 11 ad 00 00       	jmp    c001e64b <blockTask(TaskState)>

c001393a <Buzzer::beep(int, int, bool)>:
c001393a:	57                   	push   edi
c001393b:	56                   	push   esi
c001393c:	53                   	push   ebx
c001393d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013941:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013945:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013949:	52                   	push   edx
c001394a:	52                   	push   edx
c001394b:	8b 06                	mov    eax,DWORD PTR [esi]
c001394d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013951:	56                   	push   esi
c0013952:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013955:	83 c4 10             	add    esp,0x10
c0013958:	89 f8                	mov    eax,edi
c001395a:	84 c0                	test   al,al
c001395c:	74 1f                	je     c001397d <Buzzer::beep(int, int, bool)+0x43>
c001395e:	50                   	push   eax
c001395f:	50                   	push   eax
c0013960:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013966:	99                   	cdq    
c0013967:	52                   	push   edx
c0013968:	50                   	push   eax
c0013969:	e8 e1 ad 00 00       	call   c001e74f <nanoSleep(unsigned long long)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013975:	5b                   	pop    ebx
c0013976:	5e                   	pop    esi
c0013977:	5f                   	pop    edi
c0013978:	e9 67 ff ff ff       	jmp    c00138e4 <Buzzer::stop()>
c001397d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013983:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0013988:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013990:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013994:	c7 44 24 14 f7 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138f7
c001399c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00139a0:	5b                   	pop    ebx
c00139a1:	5e                   	pop    esi
c00139a2:	5f                   	pop    edi
c00139a3:	e9 60 a8 00 00       	jmp    c001e208 <Process::createThread(void (*)(void*), void*, int)>

c00139a8 <User::loadClockSettings(int)>:
c00139a8:	53                   	push   ebx
c00139a9:	83 ec 14             	sub    esp,0x14
c00139ac:	68 14 01 00 00       	push   0x114
c00139b1:	e8 d6 be ff ff       	call   c000f88c <malloc>
c00139b6:	83 c4 0c             	add    esp,0xc
c00139b9:	89 c3                	mov    ebx,eax
c00139bb:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c00139c1:	68 50 b7 02 c0       	push   0xc002b750
c00139c6:	50                   	push   eax
c00139c7:	e8 c0 f6 ff ff       	call   c001308c <File::File(char const*, Process*)>
c00139cc:	58                   	pop    eax
c00139cd:	5a                   	pop    edx
c00139ce:	6a 01                	push   0x1
c00139d0:	53                   	push   ebx
c00139d1:	e8 1a f7 ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c00139d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139d9:	e8 70 f7 ff ff       	call   c001314e <File::close()>
c00139de:	83 c4 10             	add    esp,0x10
c00139e1:	85 db                	test   ebx,ebx
c00139e3:	74 0f                	je     c00139f4 <User::loadClockSettings(int)+0x4c>
c00139e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139ee:	83 c4 08             	add    esp,0x8
c00139f1:	5b                   	pop    ebx
c00139f2:	ff e0                	jmp    eax
c00139f4:	83 c4 08             	add    esp,0x8
c00139f7:	5b                   	pop    ebx
c00139f8:	c3                   	ret    
c00139f9:	90                   	nop

c00139fa <Clock::Clock(char const*)>:
c00139fa:	83 ec 0c             	sub    esp,0xc
c00139fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a01:	83 ec 08             	sub    esp,0x8
c0013a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a08:	50                   	push   eax
c0013a09:	e8 5c 07 00 00       	call   c001416a <Device::Device(char const*)>
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0013a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1a:	89 10                	mov    DWORD PTR [eax],edx
c0013a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a20:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013a2a:	90                   	nop
c0013a2b:	83 c4 0c             	add    esp,0xc
c0013a2e:	c3                   	ret    
c0013a2f:	90                   	nop

c0013a30 <Clock::~Clock()>:
c0013a30:	83 ec 0c             	sub    esp,0xc
c0013a33:	ba 78 b7 02 c0       	mov    edx,0xc002b778
c0013a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3c:	89 10                	mov    DWORD PTR [eax],edx
c0013a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a42:	83 ec 0c             	sub    esp,0xc
c0013a45:	50                   	push   eax
c0013a46:	e8 e9 03 00 00       	call   c0013e34 <Device::~Device()>
c0013a4b:	83 c4 10             	add    esp,0x10
c0013a4e:	90                   	nop
c0013a4f:	83 c4 0c             	add    esp,0xc
c0013a52:	c3                   	ret    
c0013a53:	90                   	nop

c0013a54 <Clock::~Clock()>:
c0013a54:	83 ec 0c             	sub    esp,0xc
c0013a57:	83 ec 0c             	sub    esp,0xc
c0013a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a5e:	e8 cd ff ff ff       	call   c0013a30 <Clock::~Clock()>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	83 ec 08             	sub    esp,0x8
c0013a69:	68 58 01 00 00       	push   0x158
c0013a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a72:	e8 d6 ef ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	83 c4 0c             	add    esp,0xc
c0013a7d:	c3                   	ret    

c0013a7e <Clock::timeInSecondsLocal()>:
c0013a7e:	53                   	push   ebx
c0013a7f:	83 ec 14             	sub    esp,0x14
c0013a82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a86:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a88:	50                   	push   eax
c0013a89:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a8c:	0f b6 0d 1c f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f31c
c0013a93:	03 0d 20 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f320
c0013a99:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a9f:	89 cb                	mov    ebx,ecx
c0013aa1:	c1 fb 1f             	sar    ebx,0x1f
c0013aa4:	01 c8                	add    eax,ecx
c0013aa6:	11 da                	adc    edx,ebx
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	31 c9                	xor    ecx,ecx
c0013aad:	80 3d 1d f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f31d,0x0
c0013ab4:	74 05                	je     c0013abb <Clock::timeInSecondsLocal()+0x3d>
c0013ab6:	b9 08 07 00 00       	mov    ecx,0x708
c0013abb:	31 db                	xor    ebx,ebx
c0013abd:	01 c8                	add    eax,ecx
c0013abf:	11 da                	adc    edx,ebx
c0013ac1:	83 c4 08             	add    esp,0x8
c0013ac4:	5b                   	pop    ebx
c0013ac5:	c3                   	ret    

c0013ac6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013ac6:	57                   	push   edi
c0013ac7:	56                   	push   esi
c0013ac8:	53                   	push   ebx
c0013ac9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013acd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ad1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ad7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ada:	0f b6 05 1c f3 02 c0 	movzx  eax,BYTE PTR ds:0xc002f31c
c0013ae1:	03 05 20 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f320
c0013ae7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013aed:	99                   	cdq    
c0013aee:	29 c6                	sub    esi,eax
c0013af0:	19 d7                	sbb    edi,edx
c0013af2:	89 f0                	mov    eax,esi
c0013af4:	89 fa                	mov    edx,edi
c0013af6:	31 f6                	xor    esi,esi
c0013af8:	80 3d 1d f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f31d,0x0
c0013aff:	74 05                	je     c0013b06 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013b01:	be 08 07 00 00       	mov    esi,0x708
c0013b06:	31 ff                	xor    edi,edi
c0013b08:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013b0c:	29 f0                	sub    eax,esi
c0013b0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b12:	19 fa                	sbb    edx,edi
c0013b14:	89 d8                	mov    eax,ebx
c0013b16:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b1a:	5b                   	pop    ebx
c0013b1b:	5e                   	pop    esi
c0013b1c:	5f                   	pop    edi
c0013b1d:	ff e0                	jmp    eax

c0013b1f <datetimeToSeconds(datetime_t)>:
c0013b1f:	55                   	push   ebp
c0013b20:	57                   	push   edi
c0013b21:	56                   	push   esi
c0013b22:	53                   	push   ebx
c0013b23:	83 ec 14             	sub    esp,0x14
c0013b26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013b2a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b2e:	89 d3                	mov    ebx,edx
c0013b30:	0f b6 c6             	movzx  eax,dh
c0013b33:	c1 eb 10             	shr    ebx,0x10
c0013b36:	48                   	dec    eax
c0013b37:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b3c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b40:	0f b6 f5             	movzx  esi,ch
c0013b43:	89 cf                	mov    edi,ecx
c0013b45:	6b f6 3c             	imul   esi,esi,0x3c
c0013b48:	c1 ef 10             	shr    edi,0x10
c0013b4b:	0f b6 c9             	movzx  ecx,cl
c0013b4e:	89 f8                	mov    eax,edi
c0013b50:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b56:	0f b6 f8             	movzx  edi,al
c0013b59:	0f b6 d2             	movzx  edx,dl
c0013b5c:	01 fe                	add    esi,edi
c0013b5e:	01 f1                	add    ecx,esi
c0013b60:	0f b7 f3             	movzx  esi,bx
c0013b63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b67:	c1 f9 1f             	sar    ecx,0x1f
c0013b6a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b73:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b78:	8b 0c 8d c0 b7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4840]
c0013b7f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b83:	76 29                	jbe    c0013bae <datetimeToSeconds(datetime_t)+0x8f>
c0013b85:	f6 c3 03             	test   bl,0x3
c0013b88:	75 24                	jne    c0013bae <datetimeToSeconds(datetime_t)+0x8f>
c0013b8a:	31 d2                	xor    edx,edx
c0013b8c:	bf 64 00 00 00       	mov    edi,0x64
c0013b91:	89 d8                	mov    eax,ebx
c0013b93:	66 f7 f7             	div    di
c0013b96:	66 85 d2             	test   dx,dx
c0013b99:	75 12                	jne    c0013bad <datetimeToSeconds(datetime_t)+0x8e>
c0013b9b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ba1:	bf 90 01 00 00       	mov    edi,0x190
c0013ba6:	99                   	cdq    
c0013ba7:	f7 ff                	idiv   edi
c0013ba9:	85 d2                	test   edx,edx
c0013bab:	75 01                	jne    c0013bae <datetimeToSeconds(datetime_t)+0x8f>
c0013bad:	41                   	inc    ecx
c0013bae:	66 83 fb 46          	cmp    bx,0x46
c0013bb2:	76 45                	jbe    c0013bf9 <datetimeToSeconds(datetime_t)+0xda>
c0013bb4:	bb 46 00 00 00       	mov    ebx,0x46
c0013bb9:	bf 64 00 00 00       	mov    edi,0x64
c0013bbe:	bd 90 01 00 00       	mov    ebp,0x190
c0013bc3:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bc8:	f6 c3 03             	test   bl,0x3
c0013bcb:	75 23                	jne    c0013bf0 <datetimeToSeconds(datetime_t)+0xd1>
c0013bcd:	89 d8                	mov    eax,ebx
c0013bcf:	99                   	cdq    
c0013bd0:	f7 ff                	idiv   edi
c0013bd2:	b8 6e 01 00 00       	mov    eax,0x16e
c0013bd7:	85 d2                	test   edx,edx
c0013bd9:	75 15                	jne    c0013bf0 <datetimeToSeconds(datetime_t)+0xd1>
c0013bdb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013be1:	99                   	cdq    
c0013be2:	f7 fd                	idiv   ebp
c0013be4:	83 fa 01             	cmp    edx,0x1
c0013be7:	19 c0                	sbb    eax,eax
c0013be9:	f7 d0                	not    eax
c0013beb:	05 6e 01 00 00       	add    eax,0x16e
c0013bf0:	01 c1                	add    ecx,eax
c0013bf2:	43                   	inc    ebx
c0013bf3:	39 f3                	cmp    ebx,esi
c0013bf5:	7c cc                	jl     c0013bc3 <datetimeToSeconds(datetime_t)+0xa4>
c0013bf7:	eb 35                	jmp    c0013c2e <datetimeToSeconds(datetime_t)+0x10f>
c0013bf9:	74 33                	je     c0013c2e <datetimeToSeconds(datetime_t)+0x10f>
c0013bfb:	b8 45 00 00 00       	mov    eax,0x45
c0013c00:	89 c2                	mov    edx,eax
c0013c02:	83 e2 03             	and    edx,0x3
c0013c05:	39 f0                	cmp    eax,esi
c0013c07:	7e 0f                	jle    c0013c18 <datetimeToSeconds(datetime_t)+0xf9>
c0013c09:	83 fa 01             	cmp    edx,0x1
c0013c0c:	19 d2                	sbb    edx,edx
c0013c0e:	48                   	dec    eax
c0013c0f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013c16:	eb e8                	jmp    c0013c00 <datetimeToSeconds(datetime_t)+0xe1>
c0013c18:	b8 6d 01 00 00       	mov    eax,0x16d
c0013c1d:	85 d2                	test   edx,edx
c0013c1f:	75 0b                	jne    c0013c2c <datetimeToSeconds(datetime_t)+0x10d>
c0013c21:	66 83 fb 01          	cmp    bx,0x1
c0013c25:	19 c0                	sbb    eax,eax
c0013c27:	05 6e 01 00 00       	add    eax,0x16e
c0013c2c:	29 c1                	sub    ecx,eax
c0013c2e:	b8 80 51 01 00       	mov    eax,0x15180
c0013c33:	f7 e9                	imul   ecx
c0013c35:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c39:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c3d:	83 c4 14             	add    esp,0x14
c0013c40:	5b                   	pop    ebx
c0013c41:	5e                   	pop    esi
c0013c42:	5f                   	pop    edi
c0013c43:	5d                   	pop    ebp
c0013c44:	c3                   	ret    
c0013c45:	90                   	nop

c0013c46 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c46:	57                   	push   edi
c0013c47:	56                   	push   esi
c0013c48:	53                   	push   ebx
c0013c49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c4f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c5a:	e8 c0 fe ff ff       	call   c0013b1f <datetimeToSeconds(datetime_t)>
c0013c5f:	59                   	pop    ecx
c0013c60:	0f b6 0d 1c f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f31c
c0013c67:	5b                   	pop    ebx
c0013c68:	03 0d 20 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f320
c0013c6e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c74:	89 cb                	mov    ebx,ecx
c0013c76:	c1 fb 1f             	sar    ebx,0x1f
c0013c79:	29 c8                	sub    eax,ecx
c0013c7b:	19 da                	sbb    edx,ebx
c0013c7d:	31 c9                	xor    ecx,ecx
c0013c7f:	80 3d 1d f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f31d,0x0
c0013c86:	74 05                	je     c0013c8d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c88:	b9 08 07 00 00       	mov    ecx,0x708
c0013c8d:	31 db                	xor    ebx,ebx
c0013c8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c93:	29 c8                	sub    eax,ecx
c0013c95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c99:	19 da                	sbb    edx,ebx
c0013c9b:	89 f8                	mov    eax,edi
c0013c9d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ca1:	5b                   	pop    ebx
c0013ca2:	5e                   	pop    esi
c0013ca3:	5f                   	pop    edi
c0013ca4:	ff e0                	jmp    eax

c0013ca6 <secondsToDatetime(unsigned long long)>:
c0013ca6:	55                   	push   ebp
c0013ca7:	57                   	push   edi
c0013ca8:	56                   	push   esi
c0013ca9:	53                   	push   ebx
c0013caa:	83 ec 1c             	sub    esp,0x1c
c0013cad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013cb1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013cb5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013cb9:	6a 00                	push   0x0
c0013cbb:	68 80 51 01 00       	push   0x15180
c0013cc0:	55                   	push   ebp
c0013cc1:	57                   	push   edi
c0013cc2:	e8 ad 37 01 00       	call   c0027474 <__udivdi3>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013cd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013cd4:	6a 00                	push   0x0
c0013cd6:	68 80 51 01 00       	push   0x15180
c0013cdb:	55                   	push   ebp
c0013cdc:	57                   	push   edi
c0013cdd:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ce2:	e8 8d 38 01 00       	call   c0027574 <__umoddi3>
c0013ce7:	83 c4 10             	add    esp,0x10
c0013cea:	99                   	cdq    
c0013ceb:	f7 ff                	idiv   edi
c0013ced:	bf 3c 00 00 00       	mov    edi,0x3c
c0013cf2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013cf5:	89 d0                	mov    eax,edx
c0013cf7:	99                   	cdq    
c0013cf8:	f7 ff                	idiv   edi
c0013cfa:	85 db                	test   ebx,ebx
c0013cfc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013cff:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013d02:	79 11                	jns    c0013d15 <secondsToDatetime(unsigned long long)+0x6f>
c0013d04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d08:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013d0e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d13:	eb 07                	jmp    c0013d1c <secondsToDatetime(unsigned long long)+0x76>
c0013d15:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d1a:	89 d8                	mov    eax,ebx
c0013d1c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013d21:	99                   	cdq    
c0013d22:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013d27:	f7 f9                	idiv   ecx
c0013d29:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d32:	31 d2                	xor    edx,edx
c0013d34:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d3c:	01 c3                	add    ebx,eax
c0013d3e:	89 d8                	mov    eax,ebx
c0013d40:	f7 f1                	div    ecx
c0013d42:	31 d2                	xor    edx,edx
c0013d44:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d47:	89 d8                	mov    eax,ebx
c0013d49:	f7 f7                	div    edi
c0013d4b:	31 d2                	xor    edx,edx
c0013d4d:	29 c1                	sub    ecx,eax
c0013d4f:	89 d8                	mov    eax,ebx
c0013d51:	f7 f5                	div    ebp
c0013d53:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d58:	29 c1                	sub    ecx,eax
c0013d5a:	31 d2                	xor    edx,edx
c0013d5c:	89 c8                	mov    eax,ecx
c0013d5e:	f7 f5                	div    ebp
c0013d60:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d69:	31 d2                	xor    edx,edx
c0013d6b:	89 c8                	mov    eax,ecx
c0013d6d:	f7 f5                	div    ebp
c0013d6f:	31 d2                	xor    edx,edx
c0013d71:	01 c3                	add    ebx,eax
c0013d73:	89 c8                	mov    eax,ecx
c0013d75:	f7 f7                	div    edi
c0013d77:	bf 99 00 00 00       	mov    edi,0x99
c0013d7c:	29 c3                	sub    ebx,eax
c0013d7e:	31 d2                	xor    edx,edx
c0013d80:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d88:	29 c3                	sub    ebx,eax
c0013d8a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d8d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d90:	bb 05 00 00 00       	mov    ebx,0x5
c0013d95:	83 c1 02             	add    ecx,0x2
c0013d98:	89 c8                	mov    eax,ecx
c0013d9a:	f7 f7                	div    edi
c0013d9c:	31 d2                	xor    edx,edx
c0013d9e:	89 c7                	mov    edi,eax
c0013da0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013da6:	83 c0 02             	add    eax,0x2
c0013da9:	f7 f3                	div    ebx
c0013dab:	89 eb                	mov    ebx,ebp
c0013dad:	29 c3                	sub    ebx,eax
c0013daf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013db5:	88 1e                	mov    BYTE PTR [esi],bl
c0013db7:	19 c0                	sbb    eax,eax
c0013db9:	31 d2                	xor    edx,edx
c0013dbb:	83 e0 0c             	and    eax,0xc
c0013dbe:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013dc2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013dca:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013dce:	83 f9 01             	cmp    ecx,0x1
c0013dd1:	0f 96 c2             	setbe  dl
c0013dd4:	41                   	inc    ecx
c0013dd5:	01 d0                	add    eax,edx
c0013dd7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013dda:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013dde:	83 c4 1c             	add    esp,0x1c
c0013de1:	89 f0                	mov    eax,esi
c0013de3:	5b                   	pop    ebx
c0013de4:	5e                   	pop    esi
c0013de5:	5f                   	pop    edi
c0013de6:	5d                   	pop    ebp
c0013de7:	c2 04 00             	ret    0x4

c0013dea <Clock::timeInDatetimeLocal()>:
c0013dea:	53                   	push   ebx
c0013deb:	83 ec 14             	sub    esp,0x14
c0013dee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013df2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013df6:	e8 83 fc ff ff       	call   c0013a7e <Clock::timeInSecondsLocal()>
c0013dfb:	83 c4 0c             	add    esp,0xc
c0013dfe:	52                   	push   edx
c0013dff:	50                   	push   eax
c0013e00:	53                   	push   ebx
c0013e01:	e8 a0 fe ff ff       	call   c0013ca6 <secondsToDatetime(unsigned long long)>
c0013e06:	89 d8                	mov    eax,ebx
c0013e08:	83 c4 14             	add    esp,0x14
c0013e0b:	5b                   	pop    ebx
c0013e0c:	c2 04 00             	ret    0x4
c0013e0f:	90                   	nop

c0013e10 <Device::hibernate()>:
c0013e10:	c3                   	ret    
c0013e11:	90                   	nop

c0013e12 <Device::wake()>:
c0013e12:	c3                   	ret    
c0013e13:	90                   	nop

c0013e14 <Device::detect()>:
c0013e14:	c3                   	ret    
c0013e15:	90                   	nop

c0013e16 <Device::disableLegacy()>:
c0013e16:	c3                   	ret    
c0013e17:	90                   	nop

c0013e18 <Device::powerSaving(PowerSavingLevel)>:
c0013e18:	c3                   	ret    
c0013e19:	90                   	nop

c0013e1a <DriverlessDevice::close(int, int, void*)>:
c0013e1a:	31 c0                	xor    eax,eax
c0013e1c:	c3                   	ret    
c0013e1d:	90                   	nop

c0013e1e <DriverlessDevice::detect()>:
c0013e1e:	c3                   	ret    
c0013e1f:	90                   	nop

c0013e20 <DriverlessDevice::open(int, int, void*)>:
c0013e20:	83 ec 18             	sub    esp,0x18
c0013e23:	68 f0 b7 02 c0       	push   0xc002b7f0
c0013e28:	e8 6c 68 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0013e2d:	83 c8 ff             	or     eax,0xffffffff
c0013e30:	83 c4 1c             	add    esp,0x1c
c0013e33:	c3                   	ret    

c0013e34 <Device::~Device()>:
c0013e34:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c0013e39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e3d:	89 10                	mov    DWORD PTR [eax],edx
c0013e3f:	90                   	nop
c0013e40:	c3                   	ret    
c0013e41:	90                   	nop

c0013e42 <Device::~Device()>:
c0013e42:	83 ec 0c             	sub    esp,0xc
c0013e45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e49:	e8 e6 ff ff ff       	call   c0013e34 <Device::~Device()>
c0013e4e:	83 c4 04             	add    esp,0x4
c0013e51:	83 ec 08             	sub    esp,0x8
c0013e54:	68 58 01 00 00       	push   0x158
c0013e59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e5d:	e8 eb eb ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	83 c4 0c             	add    esp,0xc
c0013e68:	c3                   	ret    
c0013e69:	90                   	nop

c0013e6a <Device::findAndLoadDriver()>:
c0013e6a:	c7 44 24 04 0e b8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b80e
c0013e72:	e9 b6 ec ff ff       	jmp    c0012b2d <Dbg::kprintf(char const*, ...)>
c0013e77:	90                   	nop

c0013e78 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e78:	57                   	push   edi
c0013e79:	b9 09 00 00 00       	mov    ecx,0x9
c0013e7e:	56                   	push   esi
c0013e7f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e83:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e87:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e91:	81 c7 18 01 00 00    	add    edi,0x118
c0013e97:	fc                   	cld    
c0013e98:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e9a:	5e                   	pop    esi
c0013e9b:	5f                   	pop    edi
c0013e9c:	c3                   	ret    
c0013e9d:	90                   	nop

c0013e9e <Device::preOpenACPI(void*, char*, char*)>:
c0013e9e:	57                   	push   edi
c0013e9f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013ea4:	56                   	push   esi
c0013ea5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ea9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ead:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013eb7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013ebd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013ec3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ec7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec9:	b9 0e 00 00 00       	mov    ecx,0xe
c0013ece:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013ed4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ed8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013eda:	5e                   	pop    esi
c0013edb:	5f                   	pop    edi
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ee2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ee7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013eee:	75 0b                	jne    c0013efb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ef2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ef6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013ef9:	eb 1e                	jmp    c0013f19 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013efb:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0013f00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f06:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f0e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f16:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013f19:	ff e0                	jmp    eax
c0013f1b:	90                   	nop

c0013f1c <Device::getParent()>:
c0013f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f20:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013f26:	c3                   	ret    
c0013f27:	90                   	nop

c0013f28 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f2c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f31:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f38:	75 0b                	jne    c0013f45 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f3c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f40:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f43:	eb 1e                	jmp    c0013f63 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f45:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0013f4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f50:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f56:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f60:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f63:	ff e0                	jmp    eax
c0013f65:	90                   	nop

c0013f66 <Device::addChild(Device*)>:
c0013f66:	53                   	push   ebx
c0013f67:	83 ec 08             	sub    esp,0x8
c0013f6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f72:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f78:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f80:	85 d2                	test   edx,edx
c0013f82:	74 04                	je     c0013f88 <Device::addChild(Device*)+0x22>
c0013f84:	89 d3                	mov    ebx,edx
c0013f86:	eb f6                	jmp    c0013f7e <Device::addChild(Device*)+0x18>
c0013f88:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f8b:	83 ec 0c             	sub    esp,0xc
c0013f8e:	6a 08                	push   0x8
c0013f90:	e8 f7 b8 ff ff       	call   c000f88c <malloc>
c0013f95:	89 03                	mov    DWORD PTR [ebx],eax
c0013f97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fa4:	83 c4 18             	add    esp,0x18
c0013fa7:	5b                   	pop    ebx
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <Device::removeAllChildren()>:
c0013faa:	56                   	push   esi
c0013fab:	53                   	push   ebx
c0013fac:	52                   	push   edx
c0013fad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fb1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013fb7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fba:	74 17                	je     c0013fd3 <Device::removeAllChildren()+0x29>
c0013fbc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013fbf:	85 c0                	test   eax,eax
c0013fc1:	74 0c                	je     c0013fcf <Device::removeAllChildren()+0x25>
c0013fc3:	83 ec 0c             	sub    esp,0xc
c0013fc6:	8b 10                	mov    edx,DWORD PTR [eax]
c0013fc8:	50                   	push   eax
c0013fc9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013fcc:	83 c4 10             	add    esp,0x10
c0013fcf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fd1:	eb e4                	jmp    c0013fb7 <Device::removeAllChildren()+0xd>
c0013fd3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fdf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fec:	58                   	pop    eax
c0013fed:	5b                   	pop    ebx
c0013fee:	5e                   	pop    esi
c0013fef:	c3                   	ret    

c0013ff0 <Device::hibernateAll()>:
c0013ff0:	53                   	push   ebx
c0013ff1:	83 ec 14             	sub    esp,0x14
c0013ff4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ffa:	53                   	push   ebx
c0013ffb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013ffe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014004:	83 c4 10             	add    esp,0x10
c0014007:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001400a:	74 0f                	je     c001401b <Device::hibernateAll()+0x2b>
c001400c:	83 ec 0c             	sub    esp,0xc
c001400f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014012:	e8 d9 ff ff ff       	call   c0013ff0 <Device::hibernateAll()>
c0014017:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014019:	eb e9                	jmp    c0014004 <Device::hibernateAll()+0x14>
c001401b:	83 c4 08             	add    esp,0x8
c001401e:	5b                   	pop    ebx
c001401f:	c3                   	ret    

c0014020 <Device::wakeAll()>:
c0014020:	53                   	push   ebx
c0014021:	83 ec 14             	sub    esp,0x14
c0014024:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014028:	8b 03                	mov    eax,DWORD PTR [ebx]
c001402a:	53                   	push   ebx
c001402b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001402e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014034:	83 c4 10             	add    esp,0x10
c0014037:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001403a:	74 0f                	je     c001404b <Device::wakeAll()+0x2b>
c001403c:	83 ec 0c             	sub    esp,0xc
c001403f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014042:	e8 d9 ff ff ff       	call   c0014020 <Device::wakeAll()>
c0014047:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014049:	eb e9                	jmp    c0014034 <Device::wakeAll()+0x14>
c001404b:	83 c4 08             	add    esp,0x8
c001404e:	5b                   	pop    ebx
c001404f:	c3                   	ret    

c0014050 <Device::detectAll()>:
c0014050:	53                   	push   ebx
c0014051:	83 ec 14             	sub    esp,0x14
c0014054:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014058:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405a:	53                   	push   ebx
c001405b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001405e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001406a:	74 0f                	je     c001407b <Device::detectAll()+0x2b>
c001406c:	83 ec 0c             	sub    esp,0xc
c001406f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014072:	e8 d9 ff ff ff       	call   c0014050 <Device::detectAll()>
c0014077:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014079:	eb e9                	jmp    c0014064 <Device::detectAll()+0x14>
c001407b:	83 c4 08             	add    esp,0x8
c001407e:	5b                   	pop    ebx
c001407f:	c3                   	ret    

c0014080 <Device::disableLegacyAll()>:
c0014080:	53                   	push   ebx
c0014081:	83 ec 14             	sub    esp,0x14
c0014084:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014088:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408a:	53                   	push   ebx
c001408b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001408e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014094:	83 c4 10             	add    esp,0x10
c0014097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001409a:	74 0f                	je     c00140ab <Device::disableLegacyAll()+0x2b>
c001409c:	83 ec 0c             	sub    esp,0xc
c001409f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140a2:	e8 d9 ff ff ff       	call   c0014080 <Device::disableLegacyAll()>
c00140a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140a9:	eb e9                	jmp    c0014094 <Device::disableLegacyAll()+0x14>
c00140ab:	83 c4 08             	add    esp,0x8
c00140ae:	5b                   	pop    ebx
c00140af:	c3                   	ret    

c00140b0 <Device::loadDriversForAll()>:
c00140b0:	53                   	push   ebx
c00140b1:	83 ec 08             	sub    esp,0x8
c00140b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140b8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c00140bf:	75 0c                	jne    c00140cd <Device::loadDriversForAll()+0x1d>
c00140c1:	83 ec 0c             	sub    esp,0xc
c00140c4:	53                   	push   ebx
c00140c5:	e8 a0 fd ff ff       	call   c0013e6a <Device::findAndLoadDriver()>
c00140ca:	83 c4 10             	add    esp,0x10
c00140cd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140d6:	74 12                	je     c00140ea <Device::loadDriversForAll()+0x3a>
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140de:	e8 cd ff ff ff       	call   c00140b0 <Device::loadDriversForAll()>
c00140e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140e5:	83 c4 10             	add    esp,0x10
c00140e8:	eb e9                	jmp    c00140d3 <Device::loadDriversForAll()+0x23>
c00140ea:	83 c4 08             	add    esp,0x8
c00140ed:	5b                   	pop    ebx
c00140ee:	c3                   	ret    
c00140ef:	90                   	nop

c00140f0 <Device::closeAll()>:
c00140f0:	53                   	push   ebx
c00140f1:	83 ec 08             	sub    esp,0x8
c00140f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140fa:	6a 00                	push   0x0
c00140fc:	6a 00                	push   0x0
c00140fe:	6a 00                	push   0x0
c0014100:	53                   	push   ebx
c0014101:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014104:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001410a:	83 c4 10             	add    esp,0x10
c001410d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014110:	74 0f                	je     c0014121 <Device::closeAll()+0x31>
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014118:	e8 d3 ff ff ff       	call   c00140f0 <Device::closeAll()>
c001411d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001411f:	eb e9                	jmp    c001410a <Device::closeAll()+0x1a>
c0014121:	83 c4 08             	add    esp,0x8
c0014124:	5b                   	pop    ebx
c0014125:	c3                   	ret    

c0014126 <Device::powerSavingAll(PowerSavingLevel)>:
c0014126:	56                   	push   esi
c0014127:	53                   	push   ebx
c0014128:	83 ec 0c             	sub    esp,0xc
c001412b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001412f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014133:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014135:	56                   	push   esi
c0014136:	53                   	push   ebx
c0014137:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001413a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014146:	74 0f                	je     c0014157 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014148:	52                   	push   edx
c0014149:	52                   	push   edx
c001414a:	56                   	push   esi
c001414b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001414e:	e8 d3 ff ff ff       	call   c0014126 <Device::powerSavingAll(PowerSavingLevel)>
c0014153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014155:	eb e9                	jmp    c0014140 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014157:	58                   	pop    eax
c0014158:	5b                   	pop    ebx
c0014159:	5e                   	pop    esi
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <Device::setName(char const*)>:
c001415c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014164:	e9 a3 c6 fe ff       	jmp    c000080c <strcpy>
c0014169:	90                   	nop

c001416a <Device::Device(char const*)>:
c001416a:	83 ec 1c             	sub    esp,0x1c
c001416d:	ba 50 b8 02 c0       	mov    edx,0xc002b850
c0014172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014176:	89 10                	mov    DWORD PTR [eax],edx
c0014178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001417c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001418a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014198:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141a6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00141b0:	83 ec 08             	sub    esp,0x8
c00141b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141bb:	e8 9c ff ff ff       	call   c001415c <Device::setName(char const*)>
c00141c0:	83 c4 10             	add    esp,0x10
c00141c3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00141cb:	83 ec 0c             	sub    esp,0xc
c00141ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141d2:	e8 b5 b6 ff ff       	call   c000f88c <malloc>
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141eb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014205:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001420b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014216:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001421d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014221:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001422c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001423a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014248:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014256:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014260:	90                   	nop
c0014261:	83 c4 1c             	add    esp,0x1c
c0014264:	c3                   	ret    
c0014265:	90                   	nop

c0014266 <Device::getName()>:
c0014266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001426a:	05 d0 00 00 00       	add    eax,0xd0
c001426f:	c3                   	ret    

c0014270 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014270:	83 ec 0c             	sub    esp,0xc
c0014273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014277:	83 ec 08             	sub    esp,0x8
c001427a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001427e:	50                   	push   eax
c001427f:	e8 e6 fe ff ff       	call   c001416a <Device::Device(char const*)>
c0014284:	83 c4 10             	add    esp,0x10
c0014287:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c001428c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014290:	89 10                	mov    DWORD PTR [eax],edx
c0014292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014296:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00142a0:	90                   	nop
c00142a1:	83 c4 0c             	add    esp,0xc
c00142a4:	c3                   	ret    
c00142a5:	90                   	nop

c00142a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00142a6:	57                   	push   edi
c00142a7:	56                   	push   esi
c00142a8:	53                   	push   ebx
c00142a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00142b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142b5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00142bb:	75 0c                	jne    c00142c9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00142bd:	52                   	push   edx
c00142be:	52                   	push   edx
c00142bf:	53                   	push   ebx
c00142c0:	56                   	push   esi
c00142c1:	e8 00 51 01 00       	call   c00293c6 <LinkedList<Device>::addElement(Device*)>
c00142c6:	83 c4 10             	add    esp,0x10
c00142c9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142d2:	74 12                	je     c00142e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00142d4:	50                   	push   eax
c00142d5:	57                   	push   edi
c00142d6:	56                   	push   esi
c00142d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142da:	e8 c7 ff ff ff       	call   c00142a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142e1:	83 c4 10             	add    esp,0x10
c00142e4:	eb e9                	jmp    c00142cf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00142e6:	5b                   	pop    ebx
c00142e7:	5e                   	pop    esi
c00142e8:	5f                   	pop    edi
c00142e9:	c3                   	ret    

c00142ea <getDevicesOfType(DeviceType)>:
c00142ea:	53                   	push   ebx
c00142eb:	83 ec 14             	sub    esp,0x14
c00142ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142f2:	53                   	push   ebx
c00142f3:	e8 aa 51 01 00       	call   c00294a2 <LinkedList<Device>::LinkedList()>
c00142f8:	83 c4 0c             	add    esp,0xc
c00142fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142ff:	53                   	push   ebx
c0014300:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c0014306:	e8 9b ff ff ff       	call   c00142a6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001430b:	89 d8                	mov    eax,ebx
c001430d:	83 c4 18             	add    esp,0x18
c0014310:	5b                   	pop    ebx
c0014311:	c2 04 00             	ret    0x4

c0014314 <HardDiskController::HardDiskController(char const*)>:
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001431b:	83 ec 08             	sub    esp,0x8
c001431e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014322:	50                   	push   eax
c0014323:	e8 42 fe ff ff       	call   c001416a <Device::Device(char const*)>
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c0014330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014334:	89 10                	mov    DWORD PTR [eax],edx
c0014336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001433a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014344:	90                   	nop
c0014345:	83 c4 0c             	add    esp,0xc
c0014348:	c3                   	ret    
c0014349:	90                   	nop

c001434a <HardDiskController::~HardDiskController()>:
c001434a:	83 ec 0c             	sub    esp,0xc
c001434d:	ba a8 b8 02 c0       	mov    edx,0xc002b8a8
c0014352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014356:	89 10                	mov    DWORD PTR [eax],edx
c0014358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	50                   	push   eax
c0014360:	e8 cf fa ff ff       	call   c0013e34 <Device::~Device()>
c0014365:	83 c4 10             	add    esp,0x10
c0014368:	90                   	nop
c0014369:	83 c4 0c             	add    esp,0xc
c001436c:	c3                   	ret    
c001436d:	90                   	nop

c001436e <HardDiskController::~HardDiskController()>:
c001436e:	83 ec 0c             	sub    esp,0xc
c0014371:	83 ec 0c             	sub    esp,0xc
c0014374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014378:	e8 cd ff ff ff       	call   c001434a <HardDiskController::~HardDiskController()>
c001437d:	83 c4 10             	add    esp,0x10
c0014380:	83 ec 08             	sub    esp,0x8
c0014383:	68 58 01 00 00       	push   0x158
c0014388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001438c:	e8 bc e6 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0014391:	83 c4 10             	add    esp,0x10
c0014394:	83 c4 0c             	add    esp,0xc
c0014397:	c3                   	ret    

c0014398 <PhysicalDisk::eject()>:
c0014398:	83 ec 18             	sub    esp,0x18
c001439b:	68 cc b8 02 c0       	push   0xc002b8cc
c00143a0:	e8 88 e7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00143a5:	83 c8 ff             	or     eax,0xffffffff
c00143a8:	83 c4 1c             	add    esp,0x1c
c00143ab:	c3                   	ret    

c00143ac <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00143ac:	83 ec 0c             	sub    esp,0xc
c00143af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b3:	83 ec 08             	sub    esp,0x8
c00143b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ba:	50                   	push   eax
c00143bb:	e8 aa fd ff ff       	call   c001416a <Device::Device(char const*)>
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	ba fc b8 02 c0       	mov    edx,0xc002b8fc
c00143c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143cc:	89 10                	mov    DWORD PTR [eax],edx
c00143ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143d2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00143d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143dd:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00143e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143e8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00143f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014404:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001440e:	90                   	nop
c001440f:	83 c4 0c             	add    esp,0xc
c0014412:	c3                   	ret    
c0014413:	90                   	nop

c0014414 <PhysicalDisk::startCache()>:
c0014414:	56                   	push   esi
c0014415:	53                   	push   ebx
c0014416:	83 ec 10             	sub    esp,0x10
c0014419:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001441d:	6a 44                	push   0x44
c001441f:	e8 68 b4 ff ff       	call   c000f88c <malloc>
c0014424:	89 c6                	mov    esi,eax
c0014426:	58                   	pop    eax
c0014427:	5a                   	pop    edx
c0014428:	53                   	push   ebx
c0014429:	56                   	push   esi
c001442a:	e8 a9 28 00 00       	call   c0016cd8 <VCache::VCache(PhysicalDisk*)>
c001442f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014435:	83 c4 14             	add    esp,0x14
c0014438:	5b                   	pop    ebx
c0014439:	5e                   	pop    esi
c001443a:	c3                   	ret    
c001443b:	90                   	nop

c001443c <PhysicalDisk::~PhysicalDisk()>:
c001443c:	83 ec 0c             	sub    esp,0xc
c001443f:	ba fc b8 02 c0       	mov    edx,0xc002b8fc
c0014444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014448:	89 10                	mov    DWORD PTR [eax],edx
c001444a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001444e:	83 ec 0c             	sub    esp,0xc
c0014451:	50                   	push   eax
c0014452:	e8 dd f9 ff ff       	call   c0013e34 <Device::~Device()>
c0014457:	83 c4 10             	add    esp,0x10
c001445a:	90                   	nop
c001445b:	83 c4 0c             	add    esp,0xc
c001445e:	c3                   	ret    
c001445f:	90                   	nop

c0014460 <PhysicalDisk::~PhysicalDisk()>:
c0014460:	83 ec 0c             	sub    esp,0xc
c0014463:	83 ec 0c             	sub    esp,0xc
c0014466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001446a:	e8 cd ff ff ff       	call   c001443c <PhysicalDisk::~PhysicalDisk()>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	83 ec 08             	sub    esp,0x8
c0014475:	68 6c 01 00 00       	push   0x16c
c001447a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001447e:	e8 ca e5 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0014483:	83 c4 10             	add    esp,0x10
c0014486:	83 c4 0c             	add    esp,0xc
c0014489:	c3                   	ret    

c001448a <FPU::FPU(char const*)>:
c001448a:	83 ec 0c             	sub    esp,0xc
c001448d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014491:	83 ec 08             	sub    esp,0x8
c0014494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014498:	50                   	push   eax
c0014499:	e8 cc fc ff ff       	call   c001416a <Device::Device(char const*)>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c00144a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144aa:	89 10                	mov    DWORD PTR [eax],edx
c00144ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144b0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00144ba:	90                   	nop
c00144bb:	83 c4 0c             	add    esp,0xc
c00144be:	c3                   	ret    
c00144bf:	90                   	nop

c00144c0 <FPU::~FPU()>:
c00144c0:	83 ec 0c             	sub    esp,0xc
c00144c3:	ba 40 b9 02 c0       	mov    edx,0xc002b940
c00144c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144cc:	89 10                	mov    DWORD PTR [eax],edx
c00144ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144d2:	83 ec 0c             	sub    esp,0xc
c00144d5:	50                   	push   eax
c00144d6:	e8 59 f9 ff ff       	call   c0013e34 <Device::~Device()>
c00144db:	83 c4 10             	add    esp,0x10
c00144de:	90                   	nop
c00144df:	83 c4 0c             	add    esp,0xc
c00144e2:	c3                   	ret    
c00144e3:	90                   	nop

c00144e4 <FPU::~FPU()>:
c00144e4:	83 ec 0c             	sub    esp,0xc
c00144e7:	83 ec 0c             	sub    esp,0xc
c00144ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144ee:	e8 cd ff ff ff       	call   c00144c0 <FPU::~FPU()>
c00144f3:	83 c4 10             	add    esp,0x10
c00144f6:	83 ec 08             	sub    esp,0x8
c00144f9:	68 58 01 00 00       	push   0x158
c00144fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014502:	e8 46 e5 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	83 c4 0c             	add    esp,0xc
c001450d:	c3                   	ret    

c001450e <setupFPU()>:
c001450e:	53                   	push   ebx
c001450f:	83 ec 08             	sub    esp,0x8
c0014512:	8b 15 88 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f188
c0014518:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001451f:	74 19                	je     c001453a <setupFPU()+0x2c>
c0014521:	83 ec 0c             	sub    esp,0xc
c0014524:	68 58 01 00 00       	push   0x158
c0014529:	e8 5e b3 ff ff       	call   c000f88c <malloc>
c001452e:	89 c3                	mov    ebx,eax
c0014530:	89 04 24             	mov    DWORD PTR [esp],eax
c0014533:	e8 bc 1a 01 00       	call   c0025ff4 <AVX::AVX()>
c0014538:	eb 5b                	jmp    c0014595 <setupFPU()+0x87>
c001453a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014540:	84 c0                	test   al,al
c0014542:	79 19                	jns    c001455d <setupFPU()+0x4f>
c0014544:	83 ec 0c             	sub    esp,0xc
c0014547:	68 58 01 00 00       	push   0x158
c001454c:	e8 3b b3 ff ff       	call   c000f88c <malloc>
c0014551:	89 c3                	mov    ebx,eax
c0014553:	89 04 24             	mov    DWORD PTR [esp],eax
c0014556:	e8 bf 1b 01 00       	call   c002611a <SSE::SSE()>
c001455b:	eb 38                	jmp    c0014595 <setupFPU()+0x87>
c001455d:	a8 20                	test   al,0x20
c001455f:	74 19                	je     c001457a <setupFPU()+0x6c>
c0014561:	83 ec 0c             	sub    esp,0xc
c0014564:	68 58 01 00 00       	push   0x158
c0014569:	e8 1e b3 ff ff       	call   c000f88c <malloc>
c001456e:	89 c3                	mov    ebx,eax
c0014570:	89 04 24             	mov    DWORD PTR [esp],eax
c0014573:	e8 0c 1b 01 00       	call   c0026084 <MMX::MMX()>
c0014578:	eb 1b                	jmp    c0014595 <setupFPU()+0x87>
c001457a:	a8 10                	test   al,0x10
c001457c:	74 1c                	je     c001459a <setupFPU()+0x8c>
c001457e:	83 ec 0c             	sub    esp,0xc
c0014581:	68 58 01 00 00       	push   0x158
c0014586:	e8 01 b3 ff ff       	call   c000f88c <malloc>
c001458b:	89 c3                	mov    ebx,eax
c001458d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014590:	e8 13 1c 01 00       	call   c00261a8 <x87::x87()>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	eb 24                	jmp    c00145be <setupFPU()+0xb0>
c001459a:	83 e0 ef             	and    eax,0xffffffef
c001459d:	83 ec 0c             	sub    esp,0xc
c00145a0:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00145a6:	68 2c b9 02 c0       	push   0xc002b92c
c00145ab:	e8 7d e5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00145b0:	0f 20 c0             	mov    eax,cr0
c00145b3:	83 c8 04             	or     eax,0x4
c00145b6:	0f 22 c0             	mov    cr0,eax
c00145b9:	31 db                	xor    ebx,ebx
c00145bb:	83 c4 10             	add    esp,0x10
c00145be:	89 d8                	mov    eax,ebx
c00145c0:	83 c4 08             	add    esp,0x8
c00145c3:	5b                   	pop    ebx
c00145c4:	c3                   	ret    
c00145c5:	90                   	nop

c00145c6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00145c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145ce:	c1 e0 04             	shl    eax,0x4
c00145d1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00145d5:	8d 50 10             	lea    edx,[eax+0x10]
c00145d8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00145de:	74 08                	je     c00145e8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00145e0:	83 c0 04             	add    eax,0x4
c00145e3:	39 d0                	cmp    eax,edx
c00145e5:	75 f1                	jne    c00145d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00145e7:	c3                   	ret    
c00145e8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145f2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145fc:	eb e2                	jmp    c00145e0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145fe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145fe:	57                   	push   edi
c00145ff:	31 c0                	xor    eax,eax
c0014601:	56                   	push   esi
c0014602:	53                   	push   ebx
c0014603:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014607:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001460b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001460f:	89 da                	mov    edx,ebx
c0014611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014615:	c1 e2 04             	shl    edx,0x4
c0014618:	01 ca                	add    edx,ecx
c001461a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014622:	74 16                	je     c001463a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014624:	40                   	inc    eax
c0014625:	83 f8 04             	cmp    eax,0x4
c0014628:	75 f0                	jne    c001461a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001462a:	c7 44 24 10 70 b9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b970
c0014632:	5b                   	pop    ebx
c0014633:	5e                   	pop    esi
c0014634:	5f                   	pop    edi
c0014635:	e9 5f 60 00 00       	jmp    c001a699 <Krnl::panic(char const*)>
c001463a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001463d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014640:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014646:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001464c:	5b                   	pop    ebx
c001464d:	5e                   	pop    esi
c001464e:	5f                   	pop    edi
c001464f:	c3                   	ret    

c0014650 <doubleFault(regs*, void*)>:
c0014650:	55                   	push   ebp
c0014651:	89 e5                	mov    ebp,esp
c0014653:	83 ec 08             	sub    esp,0x8
c0014656:	83 ec 0c             	sub    esp,0xc
c0014659:	68 ab b9 02 c0       	push   0xc002b9ab
c001465e:	e8 36 60 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0014663:	83 c4 10             	add    esp,0x10
c0014666:	90                   	nop
c0014667:	c9                   	leave  
c0014668:	c3                   	ret    
c0014669:	90                   	nop

c001466a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001466a:	56                   	push   esi
c001466b:	53                   	push   ebx
c001466c:	50                   	push   eax
c001466d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014671:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014675:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001467a:	75 35                	jne    c00146b1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001467c:	8d 43 20             	lea    eax,[ebx+0x20]
c001467f:	31 d2                	xor    edx,edx
c0014681:	89 c1                	mov    ecx,eax
c0014683:	c1 e1 04             	shl    ecx,0x4
c0014686:	01 f1                	add    ecx,esi
c0014688:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014690:	74 3e                	je     c00146d0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014692:	42                   	inc    edx
c0014693:	83 fa 04             	cmp    edx,0x4
c0014696:	75 f0                	jne    c0014688 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	68 f0 b9 02 c0       	push   0xc002b9f0
c00146a0:	e8 f4 5f 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00146ad:	5a                   	pop    edx
c00146ae:	5b                   	pop    ebx
c00146af:	5e                   	pop    esi
c00146b0:	c3                   	ret    
c00146b1:	83 ec 0c             	sub    esp,0xc
c00146b4:	56                   	push   esi
c00146b5:	e8 ac fb ff ff       	call   c0014266 <Device::getName()>
c00146ba:	83 c4 10             	add    esp,0x10
c00146bd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146c0:	75 ba                	jne    c001467c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146c2:	83 fb 0f             	cmp    ebx,0xf
c00146c5:	7f 29                	jg     c00146f0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00146c7:	0f b6 9b e0 e3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1c20]
c00146ce:	eb ac                	jmp    c001467c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146d0:	8d 04 82             	lea    eax,[edx+eax*4]
c00146d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146d7:	8d 04 86             	lea    eax,[esi+eax*4]
c00146da:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00146e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146e4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00146ea:	89 d8                	mov    eax,ebx
c00146ec:	5a                   	pop    edx
c00146ed:	5b                   	pop    ebx
c00146ee:	5e                   	pop    esi
c00146ef:	c3                   	ret    
c00146f0:	83 ec 0c             	sub    esp,0xc
c00146f3:	68 b8 b9 02 c0       	push   0xc002b9b8
c00146f8:	e8 9c 5f 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00146fd:	83 c4 10             	add    esp,0x10
c0014700:	e9 77 ff ff ff       	jmp    c001467c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014705:	90                   	nop

c0014706 <InterruptController::clearAllHandlers(int, bool)>:
c0014706:	56                   	push   esi
c0014707:	53                   	push   ebx
c0014708:	52                   	push   edx
c0014709:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001470d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014711:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014716:	75 61                	jne    c0014779 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014718:	8d 46 20             	lea    eax,[esi+0x20]
c001471b:	c1 e6 04             	shl    esi,0x4
c001471e:	c1 e0 04             	shl    eax,0x4
c0014721:	01 de                	add    esi,ebx
c0014723:	01 d8                	add    eax,ebx
c0014725:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001472f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014739:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014743:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001474d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014757:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014761:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001476b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014775:	58                   	pop    eax
c0014776:	5b                   	pop    ebx
c0014777:	5e                   	pop    esi
c0014778:	c3                   	ret    
c0014779:	83 ec 0c             	sub    esp,0xc
c001477c:	53                   	push   ebx
c001477d:	e8 e4 fa ff ff       	call   c0014266 <Device::getName()>
c0014782:	83 c4 10             	add    esp,0x10
c0014785:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014788:	75 8e                	jne    c0014718 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001478a:	83 fe 0f             	cmp    esi,0xf
c001478d:	7f 09                	jg     c0014798 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001478f:	0f b6 b6 e0 e3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1c20]
c0014796:	eb 80                	jmp    c0014718 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014798:	83 ec 0c             	sub    esp,0xc
c001479b:	68 2c ba 02 c0       	push   0xc002ba2c
c00147a0:	e8 f4 5e 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	e9 6b ff ff ff       	jmp    c0014718 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147ad:	90                   	nop

c00147ae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00147ae:	56                   	push   esi
c00147af:	53                   	push   ebx
c00147b0:	52                   	push   edx
c00147b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00147b9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00147be:	75 3a                	jne    c00147fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00147c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147c4:	8d 50 20             	lea    edx,[eax+0x20]
c00147c7:	c1 e2 04             	shl    edx,0x4
c00147ca:	8d 04 16             	lea    eax,[esi+edx*1]
c00147cd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00147d1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00147d7:	74 0b                	je     c00147e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00147d9:	83 c0 04             	add    eax,0x4
c00147dc:	39 d0                	cmp    eax,edx
c00147de:	75 f1                	jne    c00147d1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00147e0:	58                   	pop    eax
c00147e1:	5b                   	pop    ebx
c00147e2:	5e                   	pop    esi
c00147e3:	c3                   	ret    
c00147e4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147ee:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147f8:	eb df                	jmp    c00147d9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	56                   	push   esi
c00147fe:	e8 63 fa ff ff       	call   c0014266 <Device::getName()>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014809:	75 b5                	jne    c00147c0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001480b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014810:	7f 11                	jg     c0014823 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014816:	0f b6 80 e0 e3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1c20]
c001481d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014821:	eb 9d                	jmp    c00147c0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014823:	83 ec 0c             	sub    esp,0xc
c0014826:	68 2c ba 02 c0       	push   0xc002ba2c
c001482b:	e8 69 5e 00 00       	call   c001a699 <Krnl::panic(char const*)>
c0014830:	83 c4 10             	add    esp,0x10
c0014833:	eb 8b                	jmp    c00147c0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014835 <nmiHandler(regs*, void*)>:
c0014835:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001483a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001483e:	e9 93 a7 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014843 <int_handler>:
c0014843:	55                   	push   ebp
c0014844:	57                   	push   edi
c0014845:	56                   	push   esi
c0014846:	53                   	push   ebx
c0014847:	83 ec 0c             	sub    esp,0xc
c001484a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001484e:	80 3d e4 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031ce4,0x0
c0014855:	74 0b                	je     c0014862 <int_handler+0x1f>
c0014857:	fa                   	cli    
c0014858:	f4                   	hlt    
c0014859:	80 3d e4 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031ce4,0x0
c0014860:	75 f5                	jne    c0014857 <int_handler+0x14>
c0014862:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0014867:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001486a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014870:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014876:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014879:	83 f8 17             	cmp    eax,0x17
c001487c:	77 13                	ja     c0014891 <int_handler+0x4e>
c001487e:	83 ec 08             	sub    esp,0x8
c0014881:	8b 17                	mov    edx,DWORD PTR [edi]
c0014883:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014886:	0f b6 c0             	movzx  eax,al
c0014889:	50                   	push   eax
c001488a:	57                   	push   edi
c001488b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001488e:	83 c4 10             	add    esp,0x10
c0014891:	83 c3 15             	add    ebx,0x15
c0014894:	c1 e3 04             	shl    ebx,0x4
c0014897:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001489b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00148a2:	31 db                	xor    ebx,ebx
c00148a4:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00148a8:	85 c0                	test   eax,eax
c00148aa:	74 13                	je     c00148bf <int_handler+0x7c>
c00148ac:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00148af:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00148b3:	74 1c                	je     c00148d1 <int_handler+0x8e>
c00148b5:	83 ec 08             	sub    esp,0x8
c00148b8:	52                   	push   edx
c00148b9:	56                   	push   esi
c00148ba:	ff d0                	call   eax
c00148bc:	83 c4 10             	add    esp,0x10
c00148bf:	43                   	inc    ebx
c00148c0:	83 fb 04             	cmp    ebx,0x4
c00148c3:	75 df                	jne    c00148a4 <int_handler+0x61>
c00148c5:	83 c4 0c             	add    esp,0xc
c00148c8:	31 c0                	xor    eax,eax
c00148ca:	5b                   	pop    ebx
c00148cb:	31 d2                	xor    edx,edx
c00148cd:	5e                   	pop    esi
c00148ce:	5f                   	pop    edi
c00148cf:	5d                   	pop    ebp
c00148d0:	c3                   	ret    
c00148d1:	83 ec 08             	sub    esp,0x8
c00148d4:	52                   	push   edx
c00148d5:	56                   	push   esi
c00148d6:	ff d0                	call   eax
c00148d8:	83 c4 10             	add    esp,0x10
c00148db:	83 c4 0c             	add    esp,0xc
c00148de:	5b                   	pop    ebx
c00148df:	5e                   	pop    esi
c00148e0:	5f                   	pop    edi
c00148e1:	5d                   	pop    ebp
c00148e2:	c3                   	ret    
c00148e3:	90                   	nop

c00148e4 <InterruptController::InterruptController(char const*)>:
c00148e4:	83 ec 1c             	sub    esp,0x1c
c00148e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148eb:	83 ec 08             	sub    esp,0x8
c00148ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148f2:	50                   	push   eax
c00148f3:	e8 72 f8 ff ff       	call   c001416a <Device::Device(char const*)>
c00148f8:	83 c4 10             	add    esp,0x10
c00148fb:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c0014900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014904:	89 10                	mov    DWORD PTR [eax],edx
c0014906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001490a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014914:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001491c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014924:	7f 5e                	jg     c0014984 <InterruptController::InterruptController(char const*)+0xa0>
c0014926:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001492e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014933:	7f 49                	jg     c001497e <InterruptController::InterruptController(char const*)+0x9a>
c0014935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014939:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001493d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014948:	01 ca                	add    edx,ecx
c001494a:	83 c2 54             	add    edx,0x54
c001494d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014959:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001495d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014964:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014968:	01 ca                	add    edx,ecx
c001496a:	81 c2 54 04 00 00    	add    edx,0x454
c0014970:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014978:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001497c:	eb b0                	jmp    c001492e <InterruptController::InterruptController(char const*)+0x4a>
c001497e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014982:	eb 98                	jmp    c001491c <InterruptController::InterruptController(char const*)+0x38>
c0014984:	90                   	nop
c0014985:	83 c4 1c             	add    esp,0x1c
c0014988:	c3                   	ret    
c0014989:	90                   	nop

c001498a <InterruptController::~InterruptController()>:
c001498a:	83 ec 0c             	sub    esp,0xc
c001498d:	ba ec bc 02 c0       	mov    edx,0xc002bcec
c0014992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014996:	89 10                	mov    DWORD PTR [eax],edx
c0014998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001499c:	83 ec 0c             	sub    esp,0xc
c001499f:	50                   	push   eax
c00149a0:	e8 8f f4 ff ff       	call   c0013e34 <Device::~Device()>
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	90                   	nop
c00149a9:	83 c4 0c             	add    esp,0xc
c00149ac:	c3                   	ret    
c00149ad:	90                   	nop

c00149ae <InterruptController::~InterruptController()>:
c00149ae:	83 ec 0c             	sub    esp,0xc
c00149b1:	83 ec 0c             	sub    esp,0xc
c00149b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149b8:	e8 cd ff ff ff       	call   c001498a <InterruptController::~InterruptController()>
c00149bd:	83 c4 10             	add    esp,0x10
c00149c0:	83 ec 08             	sub    esp,0x8
c00149c3:	68 58 21 00 00       	push   0x2158
c00149c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149cc:	e8 7c e0 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00149d1:	83 c4 10             	add    esp,0x10
c00149d4:	83 c4 0c             	add    esp,0xc
c00149d7:	c3                   	ret    

c00149d8 <displayDebugInfo(regs*)>:
c00149d8:	55                   	push   ebp
c00149d9:	57                   	push   edi
c00149da:	56                   	push   esi
c00149db:	53                   	push   ebx
c00149dc:	83 ec 24             	sub    esp,0x24
c00149df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00149e3:	0f 20 c2             	mov    edx,cr0
c00149e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00149ea:	0f 20 d7             	mov    edi,cr2
c00149ed:	0f 20 de             	mov    esi,cr3
c00149f0:	0f 20 e5             	mov    ebp,cr4
c00149f3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00149f6:	68 66 ba 02 c0       	push   0xc002ba66
c00149fb:	e8 2d e1 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a00:	59                   	pop    ecx
c0014a01:	58                   	pop    eax
c0014a02:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a05:	68 71 ba 02 c0       	push   0xc002ba71
c0014a0a:	e8 1e e1 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a0f:	58                   	pop    eax
c0014a10:	5a                   	pop    edx
c0014a11:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014a14:	68 7c ba 02 c0       	push   0xc002ba7c
c0014a19:	e8 0f e1 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a1e:	59                   	pop    ecx
c0014a1f:	58                   	pop    eax
c0014a20:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a23:	68 87 ba 02 c0       	push   0xc002ba87
c0014a28:	e8 00 e1 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a2d:	58                   	pop    eax
c0014a2e:	5a                   	pop    edx
c0014a2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014a32:	68 92 ba 02 c0       	push   0xc002ba92
c0014a37:	e8 f1 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a3c:	59                   	pop    ecx
c0014a3d:	58                   	pop    eax
c0014a3e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014a41:	68 9d ba 02 c0       	push   0xc002ba9d
c0014a46:	e8 e2 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a4b:	58                   	pop    eax
c0014a4c:	5a                   	pop    edx
c0014a4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a50:	68 a8 ba 02 c0       	push   0xc002baa8
c0014a55:	e8 d3 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a5a:	59                   	pop    ecx
c0014a5b:	58                   	pop    eax
c0014a5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a5f:	68 b3 ba 02 c0       	push   0xc002bab3
c0014a64:	e8 c4 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a69:	58                   	pop    eax
c0014a6a:	5a                   	pop    edx
c0014a6b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a6e:	68 be ba 02 c0       	push   0xc002babe
c0014a73:	e8 b5 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a78:	59                   	pop    ecx
c0014a79:	58                   	pop    eax
c0014a7a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a7d:	68 cd ba 02 c0       	push   0xc002bacd
c0014a82:	e8 a6 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a87:	58                   	pop    eax
c0014a88:	5a                   	pop    edx
c0014a89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a8c:	68 d8 ba 02 c0       	push   0xc002bad8
c0014a91:	e8 97 e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014a96:	59                   	pop    ecx
c0014a97:	58                   	pop    eax
c0014a98:	57                   	push   edi
c0014a99:	68 e3 ba 02 c0       	push   0xc002bae3
c0014a9e:	e8 8a e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014aa3:	58                   	pop    eax
c0014aa4:	5a                   	pop    edx
c0014aa5:	56                   	push   esi
c0014aa6:	68 ee ba 02 c0       	push   0xc002baee
c0014aab:	e8 7d e0 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014ab0:	59                   	pop    ecx
c0014ab1:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014ab6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abc:	e8 8f be ff ff       	call   c0010950 <setActiveTerminal(VgaText*)>
c0014ac1:	58                   	pop    eax
c0014ac2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ac5:	5a                   	pop    edx
c0014ac6:	c1 e0 05             	shl    eax,0x5
c0014ac9:	05 40 e1 02 c0       	add    eax,0xc002e140
c0014ace:	50                   	push   eax
c0014acf:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014ad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ada:	e8 fd c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014adf:	59                   	pop    ecx
c0014ae0:	58                   	pop    eax
c0014ae1:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014ae6:	68 f9 ba 02 c0       	push   0xc002baf9
c0014aeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af1:	e8 e6 c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014af6:	58                   	pop    eax
c0014af7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014afc:	5a                   	pop    edx
c0014afd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b00:	83 c0 0c             	add    eax,0xc
c0014b03:	50                   	push   eax
c0014b04:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b0f:	e8 c8 c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014b14:	59                   	pop    ecx
c0014b15:	58                   	pop    eax
c0014b16:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b1b:	68 02 bb 02 c0       	push   0xc002bb02
c0014b20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b26:	e8 b1 c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014b2b:	58                   	pop    eax
c0014b2c:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b31:	5a                   	pop    edx
c0014b32:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3b:	e8 c2 c1 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014b40:	59                   	pop    ecx
c0014b41:	58                   	pop    eax
c0014b42:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b47:	68 0a bb 02 c0       	push   0xc002bb0a
c0014b4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b52:	e8 85 c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014b57:	58                   	pop    eax
c0014b58:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b5d:	5a                   	pop    edx
c0014b5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b67:	e8 96 c1 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014b6c:	59                   	pop    ecx
c0014b6d:	58                   	pop    eax
c0014b6e:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b73:	68 12 bb 02 c0       	push   0xc002bb12
c0014b78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7e:	e8 59 c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014b83:	58                   	pop    eax
c0014b84:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b89:	5a                   	pop    edx
c0014b8a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b93:	e8 6a c1 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014b98:	59                   	pop    ecx
c0014b99:	58                   	pop    eax
c0014b9a:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014b9f:	68 1a bb 02 c0       	push   0xc002bb1a
c0014ba4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014baa:	e8 2d c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014baf:	58                   	pop    eax
c0014bb0:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014bb5:	5a                   	pop    edx
c0014bb6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014bb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbf:	e8 3e c1 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014bc4:	59                   	pop    ecx
c0014bc5:	58                   	pop    eax
c0014bc6:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014bcb:	68 22 bb 02 c0       	push   0xc002bb22
c0014bd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd6:	e8 01 c1 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014bdb:	58                   	pop    eax
c0014bdc:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014be1:	5a                   	pop    edx
c0014be2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014be5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014beb:	e8 12 c1 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014bf0:	59                   	pop    ecx
c0014bf1:	58                   	pop    eax
c0014bf2:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014bf7:	68 2a bb 02 c0       	push   0xc002bb2a
c0014bfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c02:	e8 d5 c0 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014c07:	58                   	pop    eax
c0014c08:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c0d:	5a                   	pop    edx
c0014c0e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014c11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c17:	e8 e6 c0 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014c1c:	59                   	pop    ecx
c0014c1d:	58                   	pop    eax
c0014c1e:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c23:	68 32 bb 02 c0       	push   0xc002bb32
c0014c28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c2e:	e8 a9 c0 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014c33:	58                   	pop    eax
c0014c34:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c39:	5a                   	pop    edx
c0014c3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c3e:	52                   	push   edx
c0014c3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c45:	e8 b8 c0 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014c4a:	59                   	pop    ecx
c0014c4b:	58                   	pop    eax
c0014c4c:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c51:	68 3b bb 02 c0       	push   0xc002bb3b
c0014c56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5c:	e8 7b c0 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014c61:	58                   	pop    eax
c0014c62:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c67:	5a                   	pop    edx
c0014c68:	57                   	push   edi
c0014c69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c6f:	e8 8e c0 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014c74:	59                   	pop    ecx
c0014c75:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c7a:	5f                   	pop    edi
c0014c7b:	68 43 bb 02 c0       	push   0xc002bb43
c0014c80:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c86:	e8 51 c0 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014c8b:	58                   	pop    eax
c0014c8c:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014c91:	5a                   	pop    edx
c0014c92:	56                   	push   esi
c0014c93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c99:	e8 64 c0 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014c9e:	59                   	pop    ecx
c0014c9f:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014ca4:	5e                   	pop    esi
c0014ca5:	68 4b bb 02 c0       	push   0xc002bb4b
c0014caa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cb0:	e8 27 c0 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014cb5:	5f                   	pop    edi
c0014cb6:	58                   	pop    eax
c0014cb7:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014cbc:	55                   	push   ebp
c0014cbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc3:	e8 3a c0 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014cc8:	58                   	pop    eax
c0014cc9:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014cce:	5a                   	pop    edx
c0014ccf:	68 53 bb 02 c0       	push   0xc002bb53
c0014cd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cda:	e8 fd bf ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014cdf:	0f 21 c0             	mov    eax,db0
c0014ce2:	59                   	pop    ecx
c0014ce3:	5e                   	pop    esi
c0014ce4:	50                   	push   eax
c0014ce5:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014cea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cf0:	e8 0d c0 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014cf5:	5f                   	pop    edi
c0014cf6:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014cfb:	5d                   	pop    ebp
c0014cfc:	68 5c bb 02 c0       	push   0xc002bb5c
c0014d01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d07:	e8 d0 bf ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014d0c:	0f 21 c8             	mov    eax,db1
c0014d0f:	5a                   	pop    edx
c0014d10:	59                   	pop    ecx
c0014d11:	50                   	push   eax
c0014d12:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d1d:	e8 e0 bf ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014d22:	5e                   	pop    esi
c0014d23:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d28:	5f                   	pop    edi
c0014d29:	68 64 bb 02 c0       	push   0xc002bb64
c0014d2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d34:	e8 a3 bf ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014d39:	0f 21 d0             	mov    eax,db2
c0014d3c:	5d                   	pop    ebp
c0014d3d:	5a                   	pop    edx
c0014d3e:	50                   	push   eax
c0014d3f:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d4a:	e8 b3 bf ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014d4f:	59                   	pop    ecx
c0014d50:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d55:	5e                   	pop    esi
c0014d56:	68 6c bb 02 c0       	push   0xc002bb6c
c0014d5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d61:	e8 76 bf ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014d66:	0f 21 d8             	mov    eax,db3
c0014d69:	5f                   	pop    edi
c0014d6a:	5d                   	pop    ebp
c0014d6b:	50                   	push   eax
c0014d6c:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d77:	e8 86 bf ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014d7c:	58                   	pop    eax
c0014d7d:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d82:	5a                   	pop    edx
c0014d83:	68 74 bb 02 c0       	push   0xc002bb74
c0014d88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8e:	e8 49 bf ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014d93:	0f 21 f0             	mov    eax,db6
c0014d96:	59                   	pop    ecx
c0014d97:	5e                   	pop    esi
c0014d98:	50                   	push   eax
c0014d99:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014d9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da4:	e8 59 bf ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014da9:	5f                   	pop    edi
c0014daa:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014daf:	5d                   	pop    ebp
c0014db0:	68 7c bb 02 c0       	push   0xc002bb7c
c0014db5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dbb:	e8 1c bf ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014dc0:	0f 21 f8             	mov    eax,db7
c0014dc3:	5a                   	pop    edx
c0014dc4:	59                   	pop    ecx
c0014dc5:	50                   	push   eax
c0014dc6:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014dcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd1:	e8 2c bf ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014dd6:	5e                   	pop    esi
c0014dd7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dda:	e8 3d 8c 00 00       	call   c001da1c <Thr::getDriverNameFromAddress(unsigned long)>
c0014ddf:	83 c4 10             	add    esp,0x10
c0014de2:	85 c0                	test   eax,eax
c0014de4:	74 7d                	je     c0014e63 <displayDebugInfo(regs*)+0x48b>
c0014de6:	89 c6                	mov    esi,eax
c0014de8:	50                   	push   eax
c0014de9:	50                   	push   eax
c0014dea:	56                   	push   esi
c0014deb:	68 84 bb 02 c0       	push   0xc002bb84
c0014df0:	e8 38 dd ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014df5:	5a                   	pop    edx
c0014df6:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014dfb:	59                   	pop    ecx
c0014dfc:	68 92 bb 02 c0       	push   0xc002bb92
c0014e01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e07:	e8 d0 be ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014e0c:	5f                   	pop    edi
c0014e0d:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014e12:	5d                   	pop    ebp
c0014e13:	56                   	push   esi
c0014e14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e1a:	e8 bd be ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014e1f:	58                   	pop    eax
c0014e20:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014e25:	5a                   	pop    edx
c0014e26:	68 9e bb 02 c0       	push   0xc002bb9e
c0014e2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e31:	e8 a6 be ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c0014e36:	59                   	pop    ecx
c0014e37:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0014e3c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014e42:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e45:	e8 09 8c 00 00       	call   c001da53 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014e4a:	5b                   	pop    ebx
c0014e4b:	5d                   	pop    ebp
c0014e4c:	50                   	push   eax
c0014e4d:	57                   	push   edi
c0014e4e:	e8 af be ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c0014e53:	58                   	pop    eax
c0014e54:	5a                   	pop    edx
c0014e55:	56                   	push   esi
c0014e56:	68 aa bb 02 c0       	push   0xc002bbaa
c0014e5b:	e8 cd dc ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014e60:	83 c4 10             	add    esp,0x10
c0014e63:	fa                   	cli    
c0014e64:	f4                   	hlt    
c0014e65:	eb fe                	jmp    c0014e65 <displayDebugInfo(regs*)+0x48d>

c0014e67 <x87EmulHandler(regs*, void*)>:
c0014e67:	83 ec 0c             	sub    esp,0xc
c0014e6a:	0f 20 c2             	mov    edx,cr0
c0014e6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e72:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014e76:	75 4b                	jne    c0014ec3 <x87EmulHandler(regs*, void*)+0x5c>
c0014e78:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0014e7d:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014e83:	85 c0                	test   eax,eax
c0014e85:	74 05                	je     c0014e8c <x87EmulHandler(regs*, void*)+0x25>
c0014e87:	83 e2 08             	and    edx,0x8
c0014e8a:	75 17                	jne    c0014ea3 <x87EmulHandler(regs*, void*)+0x3c>
c0014e8c:	83 ec 0c             	sub    esp,0xc
c0014e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e93:	e8 7b b0 00 00       	call   c001ff13 <Vm::x87Handler(regs*)>
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	84 c0                	test   al,al
c0014e9d:	74 24                	je     c0014ec3 <x87EmulHandler(regs*, void*)+0x5c>
c0014e9f:	83 c4 0c             	add    esp,0xc
c0014ea2:	c3                   	ret    
c0014ea3:	83 ec 0c             	sub    esp,0xc
c0014ea6:	68 d0 bb 02 c0       	push   0xc002bbd0
c0014eab:	e8 7d dc ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014eb0:	0f 06                	clts   
c0014eb2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eb7:	83 c4 10             	add    esp,0x10
c0014eba:	a3 28 f3 02 c0       	mov    ds:0xc002f328,eax
c0014ebf:	83 c4 0c             	add    esp,0xc
c0014ec2:	c3                   	ret    
c0014ec3:	83 ec 0c             	sub    esp,0xc
c0014ec6:	68 ba bb 02 c0       	push   0xc002bbba
c0014ecb:	e8 5d dc ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014ed0:	5a                   	pop    edx
c0014ed1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ed5:	e8 fe fa ff ff       	call   c00149d8 <displayDebugInfo(regs*)>

c0014eda <gpFault(regs*, void*)>:
c0014eda:	53                   	push   ebx
c0014edb:	83 ec 14             	sub    esp,0x14
c0014ede:	c7 05 24 f3 02 c0 ec f3 01 c0 	mov    DWORD PTR ds:0xc002f324,0xc001f3ec
c0014ee8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014eec:	53                   	push   ebx
c0014eed:	e8 fa a4 00 00       	call   c001f3ec <Vm::faultHandler(regs*)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	84 c0                	test   al,al
c0014ef7:	74 05                	je     c0014efe <gpFault(regs*, void*)+0x24>
c0014ef9:	83 c4 08             	add    esp,0x8
c0014efc:	5b                   	pop    ebx
c0014efd:	c3                   	ret    
c0014efe:	83 ec 0c             	sub    esp,0xc
c0014f01:	68 dd bb 02 c0       	push   0xc002bbdd
c0014f06:	e8 22 dc ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014f0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f0e:	e8 c5 fa ff ff       	call   c00149d8 <displayDebugInfo(regs*)>

c0014f13 <pgFault(regs*, void*)>:
c0014f13:	83 ec 18             	sub    esp,0x18
c0014f16:	68 f8 bb 02 c0       	push   0xc002bbf8
c0014f1b:	e8 0d dc ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014f20:	58                   	pop    eax
c0014f21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f25:	e8 ae fa ff ff       	call   c00149d8 <displayDebugInfo(regs*)>

c0014f2a <otherISRHandler(regs*, void*)>:
c0014f2a:	53                   	push   ebx
c0014f2b:	83 ec 0c             	sub    esp,0xc
c0014f2e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f32:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f35:	50                   	push   eax
c0014f36:	50                   	push   eax
c0014f37:	68 05 bc 02 c0       	push   0xc002bc05
c0014f3c:	e8 ec db ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014f41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f44:	e8 8f fa ff ff       	call   c00149d8 <displayDebugInfo(regs*)>

c0014f49 <opcodeFault(regs*, void*)>:
c0014f49:	55                   	push   ebp
c0014f4a:	89 e5                	mov    ebp,esp
c0014f4c:	56                   	push   esi
c0014f4d:	53                   	push   ebx
c0014f4e:	83 ec 40             	sub    esp,0x40
c0014f51:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0014f56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f5c:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014f62:	84 c0                	test   al,al
c0014f64:	74 24                	je     c0014f8a <opcodeFault(regs*, void*)+0x41>
c0014f66:	83 ec 0c             	sub    esp,0xc
c0014f69:	68 24 bc 02 c0       	push   0xc002bc24
c0014f6e:	e8 ba db ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7c:	8d 50 19             	lea    edx,[eax+0x19]
c0014f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f82:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f85:	e9 d5 05 00 00       	jmp    c001555f <opcodeFault(regs*, void*)+0x616>
c0014f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f90:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f93:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f97:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014fa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa9:	3c f0                	cmp    al,0xf0
c0014fab:	75 17                	jne    c0014fc4 <opcodeFault(regs*, void*)+0x7b>
c0014fad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0014fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fbf:	e9 da 00 00 00       	jmp    c001509e <opcodeFault(regs*, void*)+0x155>
c0014fc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fc7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc9:	3c f2                	cmp    al,0xf2
c0014fcb:	74 09                	je     c0014fd6 <opcodeFault(regs*, void*)+0x8d>
c0014fcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd2:	3c f3                	cmp    al,0xf3
c0014fd4:	75 1b                	jne    c0014ff1 <opcodeFault(regs*, void*)+0xa8>
c0014fd6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fda:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fe3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fec:	e9 ad 00 00 00       	jmp    c001509e <opcodeFault(regs*, void*)+0x155>
c0014ff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff6:	3c 66                	cmp    al,0x66
c0014ff8:	75 1f                	jne    c0015019 <opcodeFault(regs*, void*)+0xd0>
c0014ffa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ffe:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015002:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015008:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001500b:	8d 50 01             	lea    edx,[eax+0x1]
c001500e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015011:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015014:	e9 85 00 00 00       	jmp    c001509e <opcodeFault(regs*, void*)+0x155>
c0015019:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501c:	8a 00                	mov    al,BYTE PTR [eax]
c001501e:	3c 67                	cmp    al,0x67
c0015020:	75 18                	jne    c001503a <opcodeFault(regs*, void*)+0xf1>
c0015022:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015026:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001502f:	8d 50 01             	lea    edx,[eax+0x1]
c0015032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015035:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015038:	eb 64                	jmp    c001509e <opcodeFault(regs*, void*)+0x155>
c001503a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503d:	8a 00                	mov    al,BYTE PTR [eax]
c001503f:	3c 2e                	cmp    al,0x2e
c0015041:	74 09                	je     c001504c <opcodeFault(regs*, void*)+0x103>
c0015043:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015046:	8a 00                	mov    al,BYTE PTR [eax]
c0015048:	3c 3e                	cmp    al,0x3e
c001504a:	75 18                	jne    c0015064 <opcodeFault(regs*, void*)+0x11b>
c001504c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015050:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015056:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015059:	8d 50 01             	lea    edx,[eax+0x1]
c001505c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015062:	eb 3a                	jmp    c001509e <opcodeFault(regs*, void*)+0x155>
c0015064:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015067:	8a 00                	mov    al,BYTE PTR [eax]
c0015069:	3c 36                	cmp    al,0x36
c001506b:	74 1b                	je     c0015088 <opcodeFault(regs*, void*)+0x13f>
c001506d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015070:	8a 00                	mov    al,BYTE PTR [eax]
c0015072:	3c 26                	cmp    al,0x26
c0015074:	74 12                	je     c0015088 <opcodeFault(regs*, void*)+0x13f>
c0015076:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015079:	8a 00                	mov    al,BYTE PTR [eax]
c001507b:	3c 64                	cmp    al,0x64
c001507d:	74 09                	je     c0015088 <opcodeFault(regs*, void*)+0x13f>
c001507f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015082:	8a 00                	mov    al,BYTE PTR [eax]
c0015084:	3c 65                	cmp    al,0x65
c0015086:	75 16                	jne    c001509e <opcodeFault(regs*, void*)+0x155>
c0015088:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001508c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001508f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015092:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015095:	8d 50 01             	lea    edx,[eax+0x1]
c0015098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001509e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a1:	8a 00                	mov    al,BYTE PTR [eax]
c00150a3:	3c 0f                	cmp    al,0xf
c00150a5:	0f 85 ad 00 00 00    	jne    c0015158 <opcodeFault(regs*, void*)+0x20f>
c00150ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ae:	40                   	inc    eax
c00150af:	8a 00                	mov    al,BYTE PTR [eax]
c00150b1:	3c c2                	cmp    al,0xc2
c00150b3:	74 0e                	je     c00150c3 <opcodeFault(regs*, void*)+0x17a>
c00150b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b8:	40                   	inc    eax
c00150b9:	8a 00                	mov    al,BYTE PTR [eax]
c00150bb:	3c c3                	cmp    al,0xc3
c00150bd:	0f 85 95 00 00 00    	jne    c0015158 <opcodeFault(regs*, void*)+0x20f>
c00150c3:	83 ec 0c             	sub    esp,0xc
c00150c6:	68 47 bc 02 c0       	push   0xc002bc47
c00150cb:	e8 5d da ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00150d0:	83 c4 10             	add    esp,0x10
c00150d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d9:	8d 50 01             	lea    edx,[eax+0x1]
c00150dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150e2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e8:	8a 00                	mov    al,BYTE PTR [eax]
c00150ea:	8d 50 fe             	lea    edx,[eax-0x2]
c00150ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f0:	88 10                	mov    BYTE PTR [eax],dl
c00150f2:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00150f5:	50                   	push   eax
c00150f6:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00150f9:	50                   	push   eax
c00150fa:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00150fd:	50                   	push   eax
c00150fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015101:	e8 60 4c 00 00       	call   c0019d66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015106:	83 c4 10             	add    esp,0x10
c0015109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001510f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015112:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015115:	01 d0                	add    eax,edx
c0015117:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001511a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015120:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015123:	48                   	dec    eax
c0015124:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001512d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015133:	83 ec 04             	sub    esp,0x4
c0015136:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015139:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001513c:	50                   	push   eax
c001513d:	e8 72 b0 fe ff       	call   c00001b4 <voodooXADD>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015148:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001514b:	01 c2                	add    edx,eax
c001514d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015150:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015153:	e9 07 04 00 00       	jmp    c001555f <opcodeFault(regs*, void*)+0x616>
c0015158:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515b:	8a 00                	mov    al,BYTE PTR [eax]
c001515d:	3c 0f                	cmp    al,0xf
c001515f:	0f 85 8b 01 00 00    	jne    c00152f0 <opcodeFault(regs*, void*)+0x3a7>
c0015165:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015168:	40                   	inc    eax
c0015169:	8a 00                	mov    al,BYTE PTR [eax]
c001516b:	3c c7                	cmp    al,0xc7
c001516d:	0f 86 7d 01 00 00    	jbe    c00152f0 <opcodeFault(regs*, void*)+0x3a7>
c0015173:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015176:	40                   	inc    eax
c0015177:	8a 00                	mov    al,BYTE PTR [eax]
c0015179:	3c cf                	cmp    al,0xcf
c001517b:	0f 87 6f 01 00 00    	ja     c00152f0 <opcodeFault(regs*, void*)+0x3a7>
c0015181:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015184:	40                   	inc    eax
c0015185:	8a 00                	mov    al,BYTE PTR [eax]
c0015187:	83 c0 38             	add    eax,0x38
c001518a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001518d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015191:	75 0b                	jne    c001519e <opcodeFault(regs*, void*)+0x255>
c0015193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015196:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015199:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001519c:	eb 75                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c001519e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151a2:	75 0b                	jne    c00151af <opcodeFault(regs*, void*)+0x266>
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00151aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151ad:	eb 64                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c00151af:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151b3:	75 0b                	jne    c00151c0 <opcodeFault(regs*, void*)+0x277>
c00151b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00151bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151be:	eb 53                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c00151c0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151c4:	75 0b                	jne    c00151d1 <opcodeFault(regs*, void*)+0x288>
c00151c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151cc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151cf:	eb 42                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c00151d1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151d5:	75 0b                	jne    c00151e2 <opcodeFault(regs*, void*)+0x299>
c00151d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151da:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151dd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151e0:	eb 31                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c00151e2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151e6:	75 0b                	jne    c00151f3 <opcodeFault(regs*, void*)+0x2aa>
c00151e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151eb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151f1:	eb 20                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c00151f3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151f7:	75 0b                	jne    c0015204 <opcodeFault(regs*, void*)+0x2bb>
c00151f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015202:	eb 0f                	jmp    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c0015204:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015208:	75 09                	jne    c0015213 <opcodeFault(regs*, void*)+0x2ca>
c001520a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015210:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015213:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015217:	74 10                	je     c0015229 <opcodeFault(regs*, void*)+0x2e0>
c0015219:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015220:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015227:	eb 2d                	jmp    c0015256 <opcodeFault(regs*, void*)+0x30d>
c0015229:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001522c:	c1 e0 18             	shl    eax,0x18
c001522f:	89 c2                	mov    edx,eax
c0015231:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015234:	c1 e0 08             	shl    eax,0x8
c0015237:	25 00 00 ff 00       	and    eax,0xff0000
c001523c:	09 c2                	or     edx,eax
c001523e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015241:	c1 e8 08             	shr    eax,0x8
c0015244:	25 00 ff 00 00       	and    eax,0xff00
c0015249:	09 c2                	or     edx,eax
c001524b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001524e:	c1 e8 18             	shr    eax,0x18
c0015251:	09 d0                	or     eax,edx
c0015253:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015256:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001525a:	75 0b                	jne    c0015267 <opcodeFault(regs*, void*)+0x31e>
c001525c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015262:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015265:	eb 75                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c0015267:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001526b:	75 0b                	jne    c0015278 <opcodeFault(regs*, void*)+0x32f>
c001526d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015270:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015273:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015276:	eb 64                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c0015278:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001527c:	75 0b                	jne    c0015289 <opcodeFault(regs*, void*)+0x340>
c001527e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015281:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015284:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015287:	eb 53                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c0015289:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001528d:	75 0b                	jne    c001529a <opcodeFault(regs*, void*)+0x351>
c001528f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015292:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015295:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015298:	eb 42                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c001529a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001529e:	75 0b                	jne    c00152ab <opcodeFault(regs*, void*)+0x362>
c00152a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152a6:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00152a9:	eb 31                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c00152ab:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00152af:	75 0b                	jne    c00152bc <opcodeFault(regs*, void*)+0x373>
c00152b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00152ba:	eb 20                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c00152bc:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00152c0:	75 0b                	jne    c00152cd <opcodeFault(regs*, void*)+0x384>
c00152c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00152cb:	eb 0f                	jmp    c00152dc <opcodeFault(regs*, void*)+0x393>
c00152cd:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00152d1:	75 09                	jne    c00152dc <opcodeFault(regs*, void*)+0x393>
c00152d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00152dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e2:	8d 50 02             	lea    edx,[eax+0x2]
c00152e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152eb:	e9 6f 02 00 00       	jmp    c001555f <opcodeFault(regs*, void*)+0x616>
c00152f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f3:	8a 00                	mov    al,BYTE PTR [eax]
c00152f5:	3c 0f                	cmp    al,0xf
c00152f7:	0f 85 8d 01 00 00    	jne    c001548a <opcodeFault(regs*, void*)+0x541>
c00152fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015300:	40                   	inc    eax
c0015301:	8a 00                	mov    al,BYTE PTR [eax]
c0015303:	3c c7                	cmp    al,0xc7
c0015305:	0f 85 7f 01 00 00    	jne    c001548a <opcodeFault(regs*, void*)+0x541>
c001530b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001530e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015311:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015314:	8d 50 01             	lea    edx,[eax+0x1]
c0015317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001531d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015320:	50                   	push   eax
c0015321:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015324:	50                   	push   eax
c0015325:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015328:	50                   	push   eax
c0015329:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001532c:	e8 35 4a 00 00       	call   c0019d66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015337:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001533a:	83 f0 01             	xor    eax,0x1
c001533d:	84 c0                	test   al,al
c001533f:	0f 84 45 01 00 00    	je     c001548a <opcodeFault(regs*, void*)+0x541>
c0015345:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015348:	3c 01                	cmp    al,0x1
c001534a:	0f 85 3a 01 00 00    	jne    c001548a <opcodeFault(regs*, void*)+0x541>
c0015350:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015353:	83 f0 01             	xor    eax,0x1
c0015356:	84 c0                	test   al,al
c0015358:	0f 84 2c 01 00 00    	je     c001548a <opcodeFault(regs*, void*)+0x541>
c001535e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015361:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015364:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015367:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001536e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015371:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015374:	89 c2                	mov    edx,eax
c0015376:	b8 00 00 00 00       	mov    eax,0x0
c001537b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001537e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015384:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015387:	ba 00 00 00 00       	mov    edx,0x0
c001538c:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001538f:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015395:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015398:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001539b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00153a2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153a5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153a8:	89 c2                	mov    edx,eax
c00153aa:	b8 00 00 00 00       	mov    eax,0x0
c00153af:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00153b2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00153b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153bb:	ba 00 00 00 00       	mov    edx,0x0
c00153c0:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00153c3:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00153c6:	fa                   	cli    
c00153c7:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c00153cc:	40                   	inc    eax
c00153cd:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c00153d2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00153d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00153d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153da:	89 c1                	mov    ecx,eax
c00153dc:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00153df:	89 cb                	mov    ebx,ecx
c00153e1:	89 d0                	mov    eax,edx
c00153e3:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00153e6:	89 c6                	mov    esi,eax
c00153e8:	89 f0                	mov    eax,esi
c00153ea:	09 d8                	or     eax,ebx
c00153ec:	85 c0                	test   eax,eax
c00153ee:	75 21                	jne    c0015411 <opcodeFault(regs*, void*)+0x4c8>
c00153f0:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00153f3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153f6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153f9:	89 01                	mov    DWORD PTR [ecx],eax
c00153fb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00153fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015401:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015404:	83 c8 40             	or     eax,0x40
c0015407:	89 c2                	mov    edx,eax
c0015409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001540f:	eb 3e                	jmp    c001544f <opcodeFault(regs*, void*)+0x506>
c0015411:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015414:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015417:	8b 00                	mov    eax,DWORD PTR [eax]
c0015419:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001541c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001541f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015425:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015428:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001542b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001542e:	89 d0                	mov    eax,edx
c0015430:	31 d2                	xor    edx,edx
c0015432:	89 c3                	mov    ebx,eax
c0015434:	89 d6                	mov    esi,edx
c0015436:	89 da                	mov    edx,ebx
c0015438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001543e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015441:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015444:	83 e0 bf             	and    eax,0xffffffbf
c0015447:	89 c2                	mov    edx,eax
c0015449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001544f:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0015454:	48                   	dec    eax
c0015455:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001545a:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001545f:	85 c0                	test   eax,eax
c0015461:	75 01                	jne    c0015464 <opcodeFault(regs*, void*)+0x51b>
c0015463:	fb                   	sti    
c0015464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015467:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001546d:	01 c2                	add    edx,eax
c001546f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015472:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015475:	83 ec 0c             	sub    esp,0xc
c0015478:	68 56 bc 02 c0       	push   0xc002bc56
c001547d:	e8 ab d6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	e9 d5 00 00 00       	jmp    c001555f <opcodeFault(regs*, void*)+0x616>
c001548a:	83 ec 0c             	sub    esp,0xc
c001548d:	68 69 bc 02 c0       	push   0xc002bc69
c0015492:	e8 96 d6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154a6:	c1 e0 04             	shl    eax,0x4
c00154a9:	01 d0                	add    eax,edx
c00154ab:	83 c0 03             	add    eax,0x3
c00154ae:	8a 00                	mov    al,BYTE PTR [eax]
c00154b0:	0f b6 d8             	movzx  ebx,al
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154bf:	c1 e0 04             	shl    eax,0x4
c00154c2:	01 d0                	add    eax,edx
c00154c4:	83 c0 02             	add    eax,0x2
c00154c7:	8a 00                	mov    al,BYTE PTR [eax]
c00154c9:	0f b6 c8             	movzx  ecx,al
c00154cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cf:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00154d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154d8:	c1 e0 04             	shl    eax,0x4
c00154db:	01 d0                	add    eax,edx
c00154dd:	40                   	inc    eax
c00154de:	8a 00                	mov    al,BYTE PTR [eax]
c00154e0:	0f b6 d0             	movzx  edx,al
c00154e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00154e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154ef:	c1 e0 04             	shl    eax,0x4
c00154f2:	01 f0                	add    eax,esi
c00154f4:	8a 00                	mov    al,BYTE PTR [eax]
c00154f6:	0f b6 c0             	movzx  eax,al
c00154f9:	83 ec 0c             	sub    esp,0xc
c00154fc:	53                   	push   ebx
c00154fd:	51                   	push   ecx
c00154fe:	52                   	push   edx
c00154ff:	50                   	push   eax
c0015500:	68 7c bc 02 c0       	push   0xc002bc7c
c0015505:	e8 23 d6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001550a:	83 c4 20             	add    esp,0x20
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015513:	83 c0 03             	add    eax,0x3
c0015516:	8a 00                	mov    al,BYTE PTR [eax]
c0015518:	0f b6 d8             	movzx  ebx,al
c001551b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015521:	83 c0 02             	add    eax,0x2
c0015524:	8a 00                	mov    al,BYTE PTR [eax]
c0015526:	0f b6 c8             	movzx  ecx,al
c0015529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001552f:	40                   	inc    eax
c0015530:	8a 00                	mov    al,BYTE PTR [eax]
c0015532:	0f b6 d0             	movzx  edx,al
c0015535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015538:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001553b:	8a 00                	mov    al,BYTE PTR [eax]
c001553d:	0f b6 c0             	movzx  eax,al
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	53                   	push   ebx
c0015544:	51                   	push   ecx
c0015545:	52                   	push   edx
c0015546:	50                   	push   eax
c0015547:	68 a4 bc 02 c0       	push   0xc002bca4
c001554c:	e8 dc d5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0015551:	83 c4 20             	add    esp,0x20
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001555a:	e8 79 f4 ff ff       	call   c00149d8 <displayDebugInfo(regs*)>
c001555f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015562:	5b                   	pop    ebx
c0015563:	5e                   	pop    esi
c0015564:	5d                   	pop    ebp
c0015565:	c3                   	ret    

c0015566 <displayProgramFault(char const*)>:
c0015566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001556e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015574:	85 c0                	test   eax,eax
c0015576:	74 15                	je     c001558d <displayProgramFault(char const*)+0x27>
c0015578:	83 ec 0c             	sub    esp,0xc
c001557b:	6a 04                	push   0x4
c001557d:	6a 0f                	push   0xf
c001557f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015583:	50                   	push   eax
c0015584:	e8 95 b4 ff ff       	call   c0010a1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015589:	83 c4 1c             	add    esp,0x1c
c001558c:	c3                   	ret    
c001558d:	c3                   	ret    

c001558e <setupInterruptController()>:
c001558e:	55                   	push   ebp
c001558f:	89 e5                	mov    ebp,esp
c0015591:	53                   	push   ebx
c0015592:	83 ec 24             	sub    esp,0x24
c0015595:	b8 00 00 00 00       	mov    eax,0x0
c001559a:	85 c0                	test   eax,eax
c001559c:	0f 95 c0             	setne  al
c001559f:	84 c0                	test   al,al
c00155a1:	74 5b                	je     c00155fe <setupInterruptController()+0x70>
c00155a3:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00155aa:	83 ec 0c             	sub    esp,0xc
c00155ad:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00155b0:	e8 d7 a2 ff ff       	call   c000f88c <malloc>
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	89 c3                	mov    ebx,eax
c00155ba:	83 ec 0c             	sub    esp,0xc
c00155bd:	53                   	push   ebx
c00155be:	e8 23 0e 01 00       	call   c00263e6 <APIC::APIC()>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00155c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00155cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d1:	83 c0 08             	add    eax,0x8
c00155d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d6:	6a 00                	push   0x0
c00155d8:	6a 00                	push   0x0
c00155da:	6a 00                	push   0x0
c00155dc:	52                   	push   edx
c00155dd:	ff d0                	call   eax
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00155e7:	83 ec 08             	sub    esp,0x8
c00155ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155ed:	50                   	push   eax
c00155ee:	e8 73 e9 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c00155f3:	83 c4 10             	add    esp,0x10
c00155f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155f9:	e9 89 03 00 00       	jmp    c0015987 <setupInterruptController()+0x3f9>
c00155fe:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c0015603:	84 c0                	test   al,al
c0015605:	75 24                	jne    c001562b <setupInterruptController()+0x9d>
c0015607:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001560c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015612:	83 e2 fe             	and    edx,0xfffffffe
c0015615:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001561b:	83 ec 0c             	sub    esp,0xc
c001561e:	68 c9 bc 02 c0       	push   0xc002bcc9
c0015623:	e8 05 d5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0015630:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015636:	83 e0 01             	and    eax,0x1
c0015639:	84 c0                	test   al,al
c001563b:	0f 95 c0             	setne  al
c001563e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015641:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015648:	83 ec 0c             	sub    esp,0xc
c001564b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001564e:	e8 39 a2 ff ff       	call   c000f88c <malloc>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	89 c3                	mov    ebx,eax
c0015658:	83 ec 0c             	sub    esp,0xc
c001565b:	53                   	push   ebx
c001565c:	e8 dd 12 01 00       	call   c002693e <PIC::PIC()>
c0015661:	83 c4 10             	add    esp,0x10
c0015664:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015667:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001566a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566d:	8b 00                	mov    eax,DWORD PTR [eax]
c001566f:	83 c0 08             	add    eax,0x8
c0015672:	8b 00                	mov    eax,DWORD PTR [eax]
c0015674:	6a 00                	push   0x0
c0015676:	6a 00                	push   0x0
c0015678:	6a 00                	push   0x0
c001567a:	52                   	push   edx
c001567b:	ff d0                	call   eax
c001567d:	83 c4 10             	add    esp,0x10
c0015680:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015684:	74 73                	je     c00156f9 <setupInterruptController()+0x16b>
c0015686:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568c:	8b 00                	mov    eax,DWORD PTR [eax]
c001568e:	83 c0 0c             	add    eax,0xc
c0015691:	8b 00                	mov    eax,DWORD PTR [eax]
c0015693:	6a 00                	push   0x0
c0015695:	6a 00                	push   0x0
c0015697:	6a 00                	push   0x0
c0015699:	52                   	push   edx
c001569a:	ff d0                	call   eax
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156a3:	74 15                	je     c00156ba <setupInterruptController()+0x12c>
c00156a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156aa:	83 c0 04             	add    eax,0x4
c00156ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00156af:	83 ec 0c             	sub    esp,0xc
c00156b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b5:	ff d0                	call   eax
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00156c1:	83 ec 0c             	sub    esp,0xc
c00156c4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00156c7:	e8 c0 a1 ff ff       	call   c000f88c <malloc>
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	89 c3                	mov    ebx,eax
c00156d1:	83 ec 0c             	sub    esp,0xc
c00156d4:	53                   	push   ebx
c00156d5:	e8 0c 0d 01 00       	call   c00263e6 <APIC::APIC()>
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00156e0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00156e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e8:	83 c0 08             	add    eax,0x8
c00156eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ed:	6a 00                	push   0x0
c00156ef:	6a 00                	push   0x0
c00156f1:	6a 00                	push   0x0
c00156f3:	52                   	push   edx
c00156f4:	ff d0                	call   eax
c00156f6:	83 c4 10             	add    esp,0x10
c00156f9:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00156fe:	83 ec 08             	sub    esp,0x8
c0015701:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015704:	50                   	push   eax
c0015705:	e8 5c e8 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c001570a:	83 c4 10             	add    esp,0x10
c001570d:	c7 05 28 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f328,0x0
c0015717:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001571a:	8b 00                	mov    eax,DWORD PTR [eax]
c001571c:	83 c0 24             	add    eax,0x24
c001571f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015721:	6a 00                	push   0x0
c0015723:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015728:	6a 00                	push   0x0
c001572a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001572d:	ff d0                	call   eax
c001572f:	83 c4 10             	add    esp,0x10
c0015732:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015735:	8b 00                	mov    eax,DWORD PTR [eax]
c0015737:	83 c0 24             	add    eax,0x24
c001573a:	8b 00                	mov    eax,DWORD PTR [eax]
c001573c:	6a 00                	push   0x0
c001573e:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015743:	6a 01                	push   0x1
c0015745:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015748:	ff d0                	call   eax
c001574a:	83 c4 10             	add    esp,0x10
c001574d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015750:	8b 00                	mov    eax,DWORD PTR [eax]
c0015752:	83 c0 24             	add    eax,0x24
c0015755:	8b 00                	mov    eax,DWORD PTR [eax]
c0015757:	6a 00                	push   0x0
c0015759:	68 35 48 01 c0       	push   0xc0014835
c001575e:	6a 02                	push   0x2
c0015760:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015763:	ff d0                	call   eax
c0015765:	83 c4 10             	add    esp,0x10
c0015768:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001576b:	8b 00                	mov    eax,DWORD PTR [eax]
c001576d:	83 c0 24             	add    eax,0x24
c0015770:	8b 00                	mov    eax,DWORD PTR [eax]
c0015772:	6a 00                	push   0x0
c0015774:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015779:	6a 03                	push   0x3
c001577b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001577e:	ff d0                	call   eax
c0015780:	83 c4 10             	add    esp,0x10
c0015783:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015786:	8b 00                	mov    eax,DWORD PTR [eax]
c0015788:	83 c0 24             	add    eax,0x24
c001578b:	8b 00                	mov    eax,DWORD PTR [eax]
c001578d:	6a 00                	push   0x0
c001578f:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015794:	6a 04                	push   0x4
c0015796:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015799:	ff d0                	call   eax
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a3:	83 c0 24             	add    eax,0x24
c00157a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a8:	6a 00                	push   0x0
c00157aa:	68 2a 4f 01 c0       	push   0xc0014f2a
c00157af:	6a 05                	push   0x5
c00157b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b4:	ff d0                	call   eax
c00157b6:	83 c4 10             	add    esp,0x10
c00157b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157be:	83 c0 24             	add    eax,0x24
c00157c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c3:	6a 00                	push   0x0
c00157c5:	68 49 4f 01 c0       	push   0xc0014f49
c00157ca:	6a 06                	push   0x6
c00157cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157cf:	ff d0                	call   eax
c00157d1:	83 c4 10             	add    esp,0x10
c00157d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d9:	83 c0 24             	add    eax,0x24
c00157dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157de:	6a 00                	push   0x0
c00157e0:	68 67 4e 01 c0       	push   0xc0014e67
c00157e5:	6a 07                	push   0x7
c00157e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ea:	ff d0                	call   eax
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f4:	83 c0 24             	add    eax,0x24
c00157f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f9:	6a 00                	push   0x0
c00157fb:	68 50 46 01 c0       	push   0xc0014650
c0015800:	6a 08                	push   0x8
c0015802:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015805:	ff d0                	call   eax
c0015807:	83 c4 10             	add    esp,0x10
c001580a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001580d:	8b 00                	mov    eax,DWORD PTR [eax]
c001580f:	83 c0 24             	add    eax,0x24
c0015812:	8b 00                	mov    eax,DWORD PTR [eax]
c0015814:	6a 00                	push   0x0
c0015816:	68 2a 4f 01 c0       	push   0xc0014f2a
c001581b:	6a 09                	push   0x9
c001581d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015820:	ff d0                	call   eax
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015828:	8b 00                	mov    eax,DWORD PTR [eax]
c001582a:	83 c0 24             	add    eax,0x24
c001582d:	8b 00                	mov    eax,DWORD PTR [eax]
c001582f:	6a 00                	push   0x0
c0015831:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015836:	6a 0a                	push   0xa
c0015838:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001583b:	ff d0                	call   eax
c001583d:	83 c4 10             	add    esp,0x10
c0015840:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015843:	8b 00                	mov    eax,DWORD PTR [eax]
c0015845:	83 c0 24             	add    eax,0x24
c0015848:	8b 00                	mov    eax,DWORD PTR [eax]
c001584a:	6a 00                	push   0x0
c001584c:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015851:	6a 0b                	push   0xb
c0015853:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015856:	ff d0                	call   eax
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001585e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015860:	83 c0 24             	add    eax,0x24
c0015863:	8b 00                	mov    eax,DWORD PTR [eax]
c0015865:	6a 00                	push   0x0
c0015867:	68 2a 4f 01 c0       	push   0xc0014f2a
c001586c:	6a 0c                	push   0xc
c001586e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015871:	ff d0                	call   eax
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015879:	8b 00                	mov    eax,DWORD PTR [eax]
c001587b:	83 c0 24             	add    eax,0x24
c001587e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015880:	6a 00                	push   0x0
c0015882:	68 da 4e 01 c0       	push   0xc0014eda
c0015887:	6a 0d                	push   0xd
c0015889:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001588c:	ff d0                	call   eax
c001588e:	83 c4 10             	add    esp,0x10
c0015891:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015894:	8b 00                	mov    eax,DWORD PTR [eax]
c0015896:	83 c0 24             	add    eax,0x24
c0015899:	8b 00                	mov    eax,DWORD PTR [eax]
c001589b:	6a 00                	push   0x0
c001589d:	68 13 4f 01 c0       	push   0xc0014f13
c00158a2:	6a 0e                	push   0xe
c00158a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158a7:	ff d0                	call   eax
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158af:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b1:	83 c0 24             	add    eax,0x24
c00158b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b6:	6a 00                	push   0x0
c00158b8:	68 2a 4f 01 c0       	push   0xc0014f2a
c00158bd:	6a 0f                	push   0xf
c00158bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158c2:	ff d0                	call   eax
c00158c4:	83 c4 10             	add    esp,0x10
c00158c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00158cc:	83 c0 24             	add    eax,0x24
c00158cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d1:	6a 00                	push   0x0
c00158d3:	68 2a 4f 01 c0       	push   0xc0014f2a
c00158d8:	6a 10                	push   0x10
c00158da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158dd:	ff d0                	call   eax
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e7:	83 c0 24             	add    eax,0x24
c00158ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ec:	6a 00                	push   0x0
c00158ee:	68 2a 4f 01 c0       	push   0xc0014f2a
c00158f3:	6a 11                	push   0x11
c00158f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158f8:	ff d0                	call   eax
c00158fa:	83 c4 10             	add    esp,0x10
c00158fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015900:	8b 00                	mov    eax,DWORD PTR [eax]
c0015902:	83 c0 24             	add    eax,0x24
c0015905:	8b 00                	mov    eax,DWORD PTR [eax]
c0015907:	6a 00                	push   0x0
c0015909:	68 2a 4f 01 c0       	push   0xc0014f2a
c001590e:	6a 12                	push   0x12
c0015910:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015913:	ff d0                	call   eax
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001591b:	8b 00                	mov    eax,DWORD PTR [eax]
c001591d:	83 c0 24             	add    eax,0x24
c0015920:	8b 00                	mov    eax,DWORD PTR [eax]
c0015922:	6a 00                	push   0x0
c0015924:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015929:	6a 13                	push   0x13
c001592b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001592e:	ff d0                	call   eax
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015936:	8b 00                	mov    eax,DWORD PTR [eax]
c0015938:	83 c0 24             	add    eax,0x24
c001593b:	8b 00                	mov    eax,DWORD PTR [eax]
c001593d:	6a 00                	push   0x0
c001593f:	68 2a 4f 01 c0       	push   0xc0014f2a
c0015944:	6a 14                	push   0x14
c0015946:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015949:	ff d0                	call   eax
c001594b:	83 c4 10             	add    esp,0x10
c001594e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015951:	8b 00                	mov    eax,DWORD PTR [eax]
c0015953:	83 c0 24             	add    eax,0x24
c0015956:	8b 00                	mov    eax,DWORD PTR [eax]
c0015958:	6a 00                	push   0x0
c001595a:	68 2a 4f 01 c0       	push   0xc0014f2a
c001595f:	6a 1e                	push   0x1e
c0015961:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015964:	ff d0                	call   eax
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001596c:	8b 00                	mov    eax,DWORD PTR [eax]
c001596e:	83 c0 24             	add    eax,0x24
c0015971:	8b 00                	mov    eax,DWORD PTR [eax]
c0015973:	6a 00                	push   0x0
c0015975:	68 92 ca 01 c0       	push   0xc001ca92
c001597a:	6a 60                	push   0x60
c001597c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001597f:	ff d0                	call   eax
c0015981:	83 c4 10             	add    esp,0x10
c0015984:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015987:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001598a:	c9                   	leave  
c001598b:	c3                   	ret    

c001598c <InterruptController::convertLegacyIRQNumber(int)>:
c001598c:	55                   	push   ebp
c001598d:	89 e5                	mov    ebp,esp
c001598f:	83 ec 08             	sub    esp,0x8
c0015992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015995:	83 ec 0c             	sub    esp,0xc
c0015998:	50                   	push   eax
c0015999:	e8 c8 e8 ff ff       	call   c0014266 <Device::getName()>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	8a 00                	mov    al,BYTE PTR [eax]
c00159a3:	3c 41                	cmp    al,0x41
c00159a5:	0f 94 c0             	sete   al
c00159a8:	84 c0                	test   al,al
c00159aa:	74 28                	je     c00159d4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00159ac:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00159b0:	7f 12                	jg     c00159c4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00159b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159b5:	05 e0 e3 02 c0       	add    eax,0xc002e3e0
c00159ba:	8a 00                	mov    al,BYTE PTR [eax]
c00159bc:	0f b6 c0             	movzx  eax,al
c00159bf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00159c2:	eb 10                	jmp    c00159d4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	68 b8 b9 02 c0       	push   0xc002b9b8
c00159cc:	e8 c8 4c 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00159d1:	83 c4 10             	add    esp,0x10
c00159d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159d7:	c9                   	leave  
c00159d8:	c3                   	ret    
c00159d9:	90                   	nop

c00159da <startGUI(void*)>:
c00159da:	55                   	push   ebp
c00159db:	89 e5                	mov    ebp,esp
c00159dd:	53                   	push   ebx
c00159de:	83 ec 04             	sub    esp,0x4
c00159e1:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c00159e6:	48                   	dec    eax
c00159e7:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c00159ec:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c00159f1:	85 c0                	test   eax,eax
c00159f3:	75 01                	jne    c00159f6 <startGUI(void*)+0x1c>
c00159f5:	fb                   	sti    
c00159f6:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c00159fc:	83 ec 08             	sub    esp,0x8
c00159ff:	6a 01                	push   0x1
c0015a01:	68 2c bd 02 c0       	push   0xc002bd2c
c0015a06:	e8 62 80 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	83 ec 08             	sub    esp,0x8
c0015a11:	53                   	push   ebx
c0015a12:	50                   	push   eax
c0015a13:	e8 80 82 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0015a18:	83 c4 10             	add    esp,0x10
c0015a1b:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c0015a21:	83 ec 08             	sub    esp,0x8
c0015a24:	6a 01                	push   0x1
c0015a26:	68 46 bd 02 c0       	push   0xc002bd46
c0015a2b:	e8 3d 80 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c0015a30:	83 c4 10             	add    esp,0x10
c0015a33:	83 ec 08             	sub    esp,0x8
c0015a36:	53                   	push   ebx
c0015a37:	50                   	push   eax
c0015a38:	e8 5b 82 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	90                   	nop
c0015a41:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a44:	c9                   	leave  
c0015a45:	c3                   	ret    

c0015a46 <startGUIVESA(void*)>:
c0015a46:	55                   	push   ebp
c0015a47:	89 e5                	mov    ebp,esp
c0015a49:	53                   	push   ebx
c0015a4a:	83 ec 04             	sub    esp,0x4
c0015a4d:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0015a52:	48                   	dec    eax
c0015a53:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0015a58:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0015a5d:	85 c0                	test   eax,eax
c0015a5f:	75 01                	jne    c0015a62 <startGUIVESA(void*)+0x1c>
c0015a61:	fb                   	sti    
c0015a62:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c0015a68:	83 ec 08             	sub    esp,0x8
c0015a6b:	6a 01                	push   0x1
c0015a6d:	68 60 bd 02 c0       	push   0xc002bd60
c0015a72:	e8 f6 7f 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c0015a77:	83 c4 10             	add    esp,0x10
c0015a7a:	83 ec 08             	sub    esp,0x8
c0015a7d:	53                   	push   ebx
c0015a7e:	50                   	push   eax
c0015a7f:	e8 14 82 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0015a84:	83 c4 10             	add    esp,0x10
c0015a87:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c0015a8d:	83 ec 08             	sub    esp,0x8
c0015a90:	6a 01                	push   0x1
c0015a92:	68 46 bd 02 c0       	push   0xc002bd46
c0015a97:	e8 d1 7f 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c0015a9c:	83 c4 10             	add    esp,0x10
c0015a9f:	83 ec 08             	sub    esp,0x8
c0015aa2:	53                   	push   ebx
c0015aa3:	50                   	push   eax
c0015aa4:	e8 ef 81 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0015aa9:	83 c4 10             	add    esp,0x10
c0015aac:	90                   	nop
c0015aad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ab0:	c9                   	leave  
c0015ab1:	c3                   	ret    

c0015ab2 <sendKeyToTerminal(unsigned char)>:
c0015ab2:	55                   	push   ebp
c0015ab3:	89 e5                	mov    ebp,esp
c0015ab5:	83 ec 28             	sub    esp,0x28
c0015ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015abe:	a1 64 f2 02 c0       	mov    eax,ds:0xc002f264
c0015ac3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ac7:	83 ec 08             	sub    esp,0x8
c0015aca:	52                   	push   edx
c0015acb:	50                   	push   eax
c0015acc:	e8 25 b4 ff ff       	call   c0010ef6 <VgaText::receiveKey(unsigned char)>
c0015ad1:	83 c4 10             	add    esp,0x10
c0015ad4:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ad8:	0f 85 8f 00 00 00    	jne    c0015b6d <sendKeyToTerminal(unsigned char)+0xbb>
c0015ade:	fa                   	cli    
c0015adf:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0015ae4:	40                   	inc    eax
c0015ae5:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0015aea:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c0015aef:	40                   	inc    eax
c0015af0:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c0015af5:	a1 40 f3 02 c0       	mov    eax,ds:0xc002f340
c0015afa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015afd:	c7 05 40 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f340,0x0
c0015b07:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015b0b:	74 1f                	je     c0015b2c <sendKeyToTerminal(unsigned char)+0x7a>
c0015b0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015b13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015b16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015b1c:	83 ec 0c             	sub    esp,0xc
c0015b1f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015b22:	e8 e9 8d 00 00       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	eb db                	jmp    c0015b07 <sendKeyToTerminal(unsigned char)+0x55>
c0015b2c:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c0015b31:	48                   	dec    eax
c0015b32:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c0015b37:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c0015b3c:	85 c0                	test   eax,eax
c0015b3e:	75 18                	jne    c0015b58 <sendKeyToTerminal(unsigned char)+0xa6>
c0015b40:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c0015b45:	85 c0                	test   eax,eax
c0015b47:	74 0f                	je     c0015b58 <sendKeyToTerminal(unsigned char)+0xa6>
c0015b49:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c0015b53:	e8 f4 88 00 00       	call   c001e44c <schedule()>
c0015b58:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0015b5d:	48                   	dec    eax
c0015b5e:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0015b63:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0015b68:	85 c0                	test   eax,eax
c0015b6a:	75 01                	jne    c0015b6d <sendKeyToTerminal(unsigned char)+0xbb>
c0015b6c:	fb                   	sti    
c0015b6d:	90                   	nop
c0015b6e:	c9                   	leave  
c0015b6f:	c3                   	ret    

c0015b70 <sendKeyboardToken(KeyboardToken)>:
c0015b70:	55                   	push   ebp
c0015b71:	89 e5                	mov    ebp,esp
c0015b73:	83 ec 18             	sub    esp,0x18
c0015b76:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7c:	0f b7 c0             	movzx  eax,ax
c0015b7f:	83 f2 01             	xor    edx,0x1
c0015b82:	88 90 60 f3 02 c0    	mov    BYTE PTR [eax-0x3ffd0ca0],dl
c0015b88:	a1 48 f3 02 c0       	mov    eax,ds:0xc002f348
c0015b8d:	85 c0                	test   eax,eax
c0015b8f:	74 24                	je     c0015bb5 <sendKeyboardToken(KeyboardToken)+0x45>
c0015b91:	8b 0d 48 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f348
c0015b97:	83 ec 04             	sub    esp,0x4
c0015b9a:	68 60 f3 02 c0       	push   0xc002f360
c0015b9f:	83 ec 08             	sub    esp,0x8
c0015ba2:	89 e2                	mov    edx,esp
c0015ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba7:	89 02                	mov    DWORD PTR [edx],eax
c0015ba9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bac:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bb0:	ff d1                	call   ecx
c0015bb2:	83 c4 10             	add    esp,0x10
c0015bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb8:	66 3d 03 02          	cmp    ax,0x203
c0015bbc:	75 07                	jne    c0015bc5 <sendKeyboardToken(KeyboardToken)+0x55>
c0015bbe:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c0015bc3:	84 c0                	test   al,al
c0015bc5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015bc9:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015bcc:	a0 68 f7 02 c0       	mov    al,ds:0xc002f768
c0015bd1:	38 c2                	cmp    dl,al
c0015bd3:	74 1c                	je     c0015bf1 <sendKeyboardToken(KeyboardToken)+0x81>
c0015bd5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015bd8:	a2 68 f7 02 c0       	mov    ds:0xc002f768,al
c0015bdd:	a0 68 f7 02 c0       	mov    al,ds:0xc002f768
c0015be2:	0f b6 c0             	movzx  eax,al
c0015be5:	83 ec 0c             	sub    esp,0xc
c0015be8:	50                   	push   eax
c0015be9:	e8 90 a6 ff ff       	call   c001027e <setTerminalScrollLock(bool)>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015bf4:	84 c0                	test   al,al
c0015bf6:	0f 84 ae 00 00 00    	je     c0015caa <sendKeyboardToken(KeyboardToken)+0x13a>
c0015bfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bff:	66 3d 10 03          	cmp    ax,0x310
c0015c03:	75 06                	jne    c0015c0b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015c05:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0e:	66 3d 11 03          	cmp    ax,0x311
c0015c12:	75 06                	jne    c0015c1a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015c14:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1d:	66 3d 12 03          	cmp    ax,0x312
c0015c21:	75 06                	jne    c0015c29 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015c23:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2c:	66 3d 13 03          	cmp    ax,0x313
c0015c30:	75 06                	jne    c0015c38 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015c32:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3b:	66 3d 14 03          	cmp    ax,0x314
c0015c3f:	75 06                	jne    c0015c47 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015c41:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c4a:	66 3d 15 03          	cmp    ax,0x315
c0015c4e:	75 06                	jne    c0015c56 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015c50:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c59:	66 3d 16 03          	cmp    ax,0x316
c0015c5d:	75 06                	jne    c0015c65 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015c5f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c68:	66 3d 17 03          	cmp    ax,0x317
c0015c6c:	75 06                	jne    c0015c74 <sendKeyboardToken(KeyboardToken)+0x104>
c0015c6e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c77:	66 3d 18 03          	cmp    ax,0x318
c0015c7b:	75 06                	jne    c0015c83 <sendKeyboardToken(KeyboardToken)+0x113>
c0015c7d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c86:	66 3d 19 03          	cmp    ax,0x319
c0015c8a:	75 06                	jne    c0015c92 <sendKeyboardToken(KeyboardToken)+0x122>
c0015c8c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c95:	66 3d 1a 03          	cmp    ax,0x31a
c0015c99:	0f 85 c9 00 00 00    	jne    c0015d68 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c9f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015ca5:	e9 be 00 00 00       	jmp    c0015d68 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cad:	66 3d 10 03          	cmp    ax,0x310
c0015cb1:	75 0a                	jne    c0015cbd <sendKeyboardToken(KeyboardToken)+0x14d>
c0015cb3:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015cb9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc0:	66 3d 11 03          	cmp    ax,0x311
c0015cc4:	75 0a                	jne    c0015cd0 <sendKeyboardToken(KeyboardToken)+0x160>
c0015cc6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ccc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd3:	66 3d 12 03          	cmp    ax,0x312
c0015cd7:	75 0a                	jne    c0015ce3 <sendKeyboardToken(KeyboardToken)+0x173>
c0015cd9:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015cdf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce6:	66 3d 13 03          	cmp    ax,0x313
c0015cea:	75 0a                	jne    c0015cf6 <sendKeyboardToken(KeyboardToken)+0x186>
c0015cec:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015cf2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf9:	66 3d 14 03          	cmp    ax,0x314
c0015cfd:	75 0a                	jne    c0015d09 <sendKeyboardToken(KeyboardToken)+0x199>
c0015cff:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015d05:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0c:	66 3d 15 03          	cmp    ax,0x315
c0015d10:	75 0a                	jne    c0015d1c <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015d12:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015d18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d1f:	66 3d 16 03          	cmp    ax,0x316
c0015d23:	75 0a                	jne    c0015d2f <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015d25:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015d2b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d32:	66 3d 17 03          	cmp    ax,0x317
c0015d36:	75 0a                	jne    c0015d42 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015d38:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015d3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d45:	66 3d 18 03          	cmp    ax,0x318
c0015d49:	75 0a                	jne    c0015d55 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015d4b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015d51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d58:	66 3d 19 03          	cmp    ax,0x319
c0015d5c:	75 0a                	jne    c0015d68 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015d5e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015d64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d6b:	66 3d 00 02          	cmp    ax,0x200
c0015d6f:	75 2c                	jne    c0015d9d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015d71:	a0 60 f7 02 c0       	mov    al,ds:0xc002f760
c0015d76:	83 f0 01             	xor    eax,0x1
c0015d79:	84 c0                	test   al,al
c0015d7b:	74 20                	je     c0015d9d <sendKeyboardToken(KeyboardToken)+0x22d>
c0015d7d:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0015d82:	6a 01                	push   0x1
c0015d84:	6a 00                	push   0x0
c0015d86:	68 da 59 01 c0       	push   0xc00159da
c0015d8b:	50                   	push   eax
c0015d8c:	e8 77 84 00 00       	call   c001e208 <Process::createThread(void (*)(void*), void*, int)>
c0015d91:	83 c4 10             	add    esp,0x10
c0015d94:	c6 05 60 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f760,0x1
c0015d9b:	eb 33                	jmp    c0015dd0 <sendKeyboardToken(KeyboardToken)+0x260>
c0015d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da0:	66 3d 01 02          	cmp    ax,0x201
c0015da4:	75 2a                	jne    c0015dd0 <sendKeyboardToken(KeyboardToken)+0x260>
c0015da6:	a0 60 f7 02 c0       	mov    al,ds:0xc002f760
c0015dab:	83 f0 01             	xor    eax,0x1
c0015dae:	84 c0                	test   al,al
c0015db0:	74 1e                	je     c0015dd0 <sendKeyboardToken(KeyboardToken)+0x260>
c0015db2:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0015db7:	6a 01                	push   0x1
c0015db9:	6a 00                	push   0x0
c0015dbb:	68 46 5a 01 c0       	push   0xc0015a46
c0015dc0:	50                   	push   eax
c0015dc1:	e8 42 84 00 00       	call   c001e208 <Process::createThread(void (*)(void*), void*, int)>
c0015dc6:	83 c4 10             	add    esp,0x10
c0015dc9:	c6 05 60 f7 02 c0 01 	mov    BYTE PTR ds:0xc002f760,0x1
c0015dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd3:	66 3d 1d 03          	cmp    ax,0x31d
c0015dd7:	75 06                	jne    c0015ddf <sendKeyboardToken(KeyboardToken)+0x26f>
c0015dd9:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de2:	66 3d 1c 03          	cmp    ax,0x31c
c0015de6:	75 06                	jne    c0015dee <sendKeyboardToken(KeyboardToken)+0x27e>
c0015de8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df1:	66 3d 1b 03          	cmp    ax,0x31b
c0015df5:	75 06                	jne    c0015dfd <sendKeyboardToken(KeyboardToken)+0x28d>
c0015df7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e00:	66 3d 1e 03          	cmp    ax,0x31e
c0015e04:	75 06                	jne    c0015e0c <sendKeyboardToken(KeyboardToken)+0x29c>
c0015e06:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0f:	66 3d 1f 03          	cmp    ax,0x31f
c0015e13:	75 06                	jne    c0015e1b <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015e15:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1e:	66 3d 1a 03          	cmp    ax,0x31a
c0015e22:	75 06                	jne    c0015e2a <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015e24:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015e2a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015e2e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e31:	83 f0 01             	xor    eax,0x1
c0015e34:	84 c0                	test   al,al
c0015e36:	74 77                	je     c0015eaf <sendKeyboardToken(KeyboardToken)+0x33f>
c0015e38:	a0 61 f4 02 c0       	mov    al,ds:0xc002f461
c0015e3d:	84 c0                	test   al,al
c0015e3f:	74 41                	je     c0015e82 <sendKeyboardToken(KeyboardToken)+0x312>
c0015e41:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015e45:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015e49:	74 2b                	je     c0015e76 <sendKeyboardToken(KeyboardToken)+0x306>
c0015e4b:	8b 15 64 f7 02 c0    	mov    edx,DWORD PTR ds:0xc002f764
c0015e51:	89 d0                	mov    eax,edx
c0015e53:	c1 e0 02             	shl    eax,0x2
c0015e56:	01 d0                	add    eax,edx
c0015e58:	01 c0                	add    eax,eax
c0015e5a:	a3 64 f7 02 c0       	mov    ds:0xc002f764,eax
c0015e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e62:	0f b7 c0             	movzx  eax,ax
c0015e65:	8d 50 d0             	lea    edx,[eax-0x30]
c0015e68:	a1 64 f7 02 c0       	mov    eax,ds:0xc002f764
c0015e6d:	01 d0                	add    eax,edx
c0015e6f:	a3 64 f7 02 c0       	mov    ds:0xc002f764,eax
c0015e74:	eb 6d                	jmp    c0015ee3 <sendKeyboardToken(KeyboardToken)+0x373>
c0015e76:	c7 05 64 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f764,0x0
c0015e80:	eb 61                	jmp    c0015ee3 <sendKeyboardToken(KeyboardToken)+0x373>
c0015e82:	a1 64 f7 02 c0       	mov    eax,ds:0xc002f764
c0015e87:	85 c0                	test   eax,eax
c0015e89:	74 18                	je     c0015ea3 <sendKeyboardToken(KeyboardToken)+0x333>
c0015e8b:	a1 64 f7 02 c0       	mov    eax,ds:0xc002f764
c0015e90:	0f b6 c0             	movzx  eax,al
c0015e93:	83 ec 0c             	sub    esp,0xc
c0015e96:	50                   	push   eax
c0015e97:	e8 16 fc ff ff       	call   c0015ab2 <sendKeyToTerminal(unsigned char)>
c0015e9c:	83 c4 10             	add    esp,0x10
c0015e9f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ea3:	c7 05 64 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f764,0x0
c0015ead:	eb 34                	jmp    c0015ee3 <sendKeyboardToken(KeyboardToken)+0x373>
c0015eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb2:	66 3d 01 01          	cmp    ax,0x101
c0015eb6:	75 2b                	jne    c0015ee3 <sendKeyboardToken(KeyboardToken)+0x373>
c0015eb8:	a1 64 f7 02 c0       	mov    eax,ds:0xc002f764
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	74 18                	je     c0015ed9 <sendKeyboardToken(KeyboardToken)+0x369>
c0015ec1:	a1 64 f7 02 c0       	mov    eax,ds:0xc002f764
c0015ec6:	0f b6 c0             	movzx  eax,al
c0015ec9:	83 ec 0c             	sub    esp,0xc
c0015ecc:	50                   	push   eax
c0015ecd:	e8 e0 fb ff ff       	call   c0015ab2 <sendKeyToTerminal(unsigned char)>
c0015ed2:	83 c4 10             	add    esp,0x10
c0015ed5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ed9:	c7 05 64 f7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f764,0x0
c0015ee3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ee6:	83 f0 01             	xor    eax,0x1
c0015ee9:	84 c0                	test   al,al
c0015eeb:	74 4c                	je     c0015f39 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015eed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ef0:	83 f0 01             	xor    eax,0x1
c0015ef3:	84 c0                	test   al,al
c0015ef5:	74 42                	je     c0015f39 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ef7:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c0015efc:	83 f0 01             	xor    eax,0x1
c0015eff:	84 c0                	test   al,al
c0015f01:	74 36                	je     c0015f39 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f06:	66 83 f8 1f          	cmp    ax,0x1f
c0015f0a:	76 09                	jbe    c0015f15 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0f:	66 83 f8 7e          	cmp    ax,0x7e
c0015f13:	76 12                	jbe    c0015f27 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f18:	66 83 f8 0a          	cmp    ax,0xa
c0015f1c:	74 09                	je     c0015f27 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f21:	66 83 f8 08          	cmp    ax,0x8
c0015f25:	75 12                	jne    c0015f39 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2a:	0f b6 c0             	movzx  eax,al
c0015f2d:	83 ec 0c             	sub    esp,0xc
c0015f30:	50                   	push   eax
c0015f31:	e8 7c fb ff ff       	call   c0015ab2 <sendKeyToTerminal(unsigned char)>
c0015f36:	83 c4 10             	add    esp,0x10
c0015f39:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015f3c:	83 f0 01             	xor    eax,0x1
c0015f3f:	84 c0                	test   al,al
c0015f41:	74 4f                	je     c0015f92 <sendKeyboardToken(KeyboardToken)+0x422>
c0015f43:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f46:	83 f0 01             	xor    eax,0x1
c0015f49:	84 c0                	test   al,al
c0015f4b:	74 45                	je     c0015f92 <sendKeyboardToken(KeyboardToken)+0x422>
c0015f4d:	a0 60 f4 02 c0       	mov    al,ds:0xc002f460
c0015f52:	84 c0                	test   al,al
c0015f54:	74 3c                	je     c0015f92 <sendKeyboardToken(KeyboardToken)+0x422>
c0015f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f59:	66 83 f8 3f          	cmp    ax,0x3f
c0015f5d:	76 33                	jbe    c0015f92 <sendKeyboardToken(KeyboardToken)+0x422>
c0015f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f62:	66 83 f8 7f          	cmp    ax,0x7f
c0015f66:	77 2a                	ja     c0015f92 <sendKeyboardToken(KeyboardToken)+0x422>
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	88 c2                	mov    dl,al
c0015f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f70:	66 83 f8 5f          	cmp    ax,0x5f
c0015f74:	76 04                	jbe    c0015f7a <sendKeyboardToken(KeyboardToken)+0x40a>
c0015f76:	b0 20                	mov    al,0x20
c0015f78:	eb 02                	jmp    c0015f7c <sendKeyboardToken(KeyboardToken)+0x40c>
c0015f7a:	b0 00                	mov    al,0x0
c0015f7c:	29 c2                	sub    edx,eax
c0015f7e:	88 d0                	mov    al,dl
c0015f80:	83 e8 40             	sub    eax,0x40
c0015f83:	0f b6 c0             	movzx  eax,al
c0015f86:	83 ec 0c             	sub    esp,0xc
c0015f89:	50                   	push   eax
c0015f8a:	e8 23 fb ff ff       	call   c0015ab2 <sendKeyToTerminal(unsigned char)>
c0015f8f:	83 c4 10             	add    esp,0x10
c0015f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f95:	66 3d 00 03          	cmp    ax,0x300
c0015f99:	75 0f                	jne    c0015faa <sendKeyboardToken(KeyboardToken)+0x43a>
c0015f9b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f9e:	83 f0 01             	xor    eax,0x1
c0015fa1:	84 c0                	test   al,al
c0015fa3:	74 05                	je     c0015faa <sendKeyboardToken(KeyboardToken)+0x43a>
c0015fa5:	e8 4c aa ff ff       	call   c00109f6 <doTerminalCycle()>
c0015faa:	90                   	nop
c0015fab:	c9                   	leave  
c0015fac:	c3                   	ret    

c0015fad <clearInternalKeybuffer(VgaText*)>:
c0015fad:	55                   	push   ebp
c0015fae:	89 e5                	mov    ebp,esp
c0015fb0:	83 ec 08             	sub    esp,0x8
c0015fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb6:	05 98 01 00 00       	add    eax,0x198
c0015fbb:	83 ec 0c             	sub    esp,0xc
c0015fbe:	50                   	push   eax
c0015fbf:	e8 a8 a7 fe ff       	call   c000076c <strlen>
c0015fc4:	83 c4 10             	add    esp,0x10
c0015fc7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015fca:	81 c2 98 01 00 00    	add    edx,0x198
c0015fd0:	83 ec 04             	sub    esp,0x4
c0015fd3:	50                   	push   eax
c0015fd4:	6a 00                	push   0x0
c0015fd6:	52                   	push   edx
c0015fd7:	e8 74 a7 fe ff       	call   c0000750 <memset>
c0015fdc:	83 c4 10             	add    esp,0x10
c0015fdf:	90                   	nop
c0015fe0:	c9                   	leave  
c0015fe1:	c3                   	ret    

c0015fe2 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015fe2:	55                   	push   ebp
c0015fe3:	89 e5                	mov    ebp,esp
c0015fe5:	83 ec 18             	sub    esp,0x18
c0015fe8:	a1 48 f3 02 c0       	mov    eax,ds:0xc002f348
c0015fed:	85 c0                	test   eax,eax
c0015fef:	74 2a                	je     c001601b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015ff1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ff7:	8b 0d 48 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f348
c0015ffd:	83 ec 04             	sub    esp,0x4
c0016000:	68 60 f3 02 c0       	push   0xc002f360
c0016005:	83 ec 08             	sub    esp,0x8
c0016008:	89 e2                	mov    edx,esp
c001600a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001600d:	89 02                	mov    DWORD PTR [edx],eax
c001600f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016012:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016016:	ff d1                	call   ecx
c0016018:	83 c4 10             	add    esp,0x10
c001601b:	83 ec 0c             	sub    esp,0xc
c001601e:	68 7b bd 02 c0       	push   0xc002bd7b
c0016023:	e8 05 cb ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0016028:	83 c4 10             	add    esp,0x10
c001602b:	fb                   	sti    
c001602c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016033:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016037:	0f 84 a1 00 00 00    	je     c00160de <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001603d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016040:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016046:	84 c0                	test   al,al
c0016048:	75 28                	jne    c0016072 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001604a:	fa                   	cli    
c001604b:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0016050:	40                   	inc    eax
c0016051:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0016056:	e8 f1 83 00 00       	call   c001e44c <schedule()>
c001605b:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0016060:	48                   	dec    eax
c0016061:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0016066:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001606b:	85 c0                	test   eax,eax
c001606d:	75 ce                	jne    c001603d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001606f:	fb                   	sti    
c0016070:	eb cb                	jmp    c001603d <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016072:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016075:	8d 50 01             	lea    edx,[eax+0x1]
c0016078:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001607b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001607e:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016084:	88 10                	mov    BYTE PTR [eax],dl
c0016086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016089:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001608f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016095:	05 98 01 00 00       	add    eax,0x198
c001609a:	83 ec 0c             	sub    esp,0xc
c001609d:	50                   	push   eax
c001609e:	e8 c9 a6 fe ff       	call   c000076c <strlen>
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00160a9:	81 c2 98 01 00 00    	add    edx,0x198
c00160af:	8d 4a 01             	lea    ecx,[edx+0x1]
c00160b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00160b5:	81 c2 98 01 00 00    	add    edx,0x198
c00160bb:	83 ec 04             	sub    esp,0x4
c00160be:	50                   	push   eax
c00160bf:	51                   	push   ecx
c00160c0:	52                   	push   edx
c00160c1:	e8 c2 a5 fe ff       	call   c0000688 <memmove>
c00160c6:	83 c4 10             	add    esp,0x10
c00160c9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00160cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00160cf:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00160d3:	0f 85 5a ff ff ff    	jne    c0016033 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00160d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00160dc:	eb 03                	jmp    c00160e1 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00160de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00160e1:	c9                   	leave  
c00160e2:	c3                   	ret    
c00160e3:	90                   	nop

c00160e4 <Keyboard::Keyboard(char const*)>:
c00160e4:	83 ec 0c             	sub    esp,0xc
c00160e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160eb:	83 ec 08             	sub    esp,0x8
c00160ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160f2:	50                   	push   eax
c00160f3:	e8 72 e0 ff ff       	call   c001416a <Device::Device(char const*)>
c00160f8:	83 c4 10             	add    esp,0x10
c00160fb:	ba 9c bd 02 c0       	mov    edx,0xc002bd9c
c0016100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016104:	89 10                	mov    DWORD PTR [eax],edx
c0016106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016114:	c6 05 44 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f344,0x1
c001611b:	90                   	nop
c001611c:	83 c4 0c             	add    esp,0xc
c001611f:	c3                   	ret    

c0016120 <Keyboard::~Keyboard()>:
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	ba 9c bd 02 c0       	mov    edx,0xc002bd9c
c0016128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001612c:	89 10                	mov    DWORD PTR [eax],edx
c001612e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016132:	83 ec 0c             	sub    esp,0xc
c0016135:	50                   	push   eax
c0016136:	e8 f9 dc ff ff       	call   c0013e34 <Device::~Device()>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	90                   	nop
c001613f:	83 c4 0c             	add    esp,0xc
c0016142:	c3                   	ret    
c0016143:	90                   	nop

c0016144 <Keyboard::~Keyboard()>:
c0016144:	83 ec 0c             	sub    esp,0xc
c0016147:	83 ec 0c             	sub    esp,0xc
c001614a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001614e:	e8 cd ff ff ff       	call   c0016120 <Keyboard::~Keyboard()>
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	83 ec 08             	sub    esp,0x8
c0016159:	68 5c 01 00 00       	push   0x15c
c001615e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016162:	e8 e6 c8 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0016167:	83 c4 10             	add    esp,0x10
c001616a:	83 c4 0c             	add    esp,0xc
c001616d:	c3                   	ret    

c001616e <LogicalDisk::close(int, int, void*)>:
c001616e:	83 c8 ff             	or     eax,0xffffffff
c0016171:	c3                   	ret    

c0016172 <LogicalDisk::~LogicalDisk()>:
c0016172:	83 ec 0c             	sub    esp,0xc
c0016175:	ba 4c be 02 c0       	mov    edx,0xc002be4c
c001617a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001617e:	89 10                	mov    DWORD PTR [eax],edx
c0016180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016184:	83 ec 0c             	sub    esp,0xc
c0016187:	50                   	push   eax
c0016188:	e8 a7 dc ff ff       	call   c0013e34 <Device::~Device()>
c001618d:	83 c4 10             	add    esp,0x10
c0016190:	90                   	nop
c0016191:	83 c4 0c             	add    esp,0xc
c0016194:	c3                   	ret    
c0016195:	90                   	nop

c0016196 <LogicalDisk::~LogicalDisk()>:
c0016196:	83 ec 0c             	sub    esp,0xc
c0016199:	83 ec 0c             	sub    esp,0xc
c001619c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161a0:	e8 cd ff ff ff       	call   c0016172 <LogicalDisk::~LogicalDisk()>
c00161a5:	83 c4 10             	add    esp,0x10
c00161a8:	83 ec 08             	sub    esp,0x8
c00161ab:	68 74 01 00 00       	push   0x174
c00161b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161b4:	e8 94 c8 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00161b9:	83 c4 10             	add    esp,0x10
c00161bc:	83 c4 0c             	add    esp,0xc
c00161bf:	c3                   	ret    

c00161c0 <LogicalDisk::open(int, int, void*)>:
c00161c0:	83 ec 18             	sub    esp,0x18
c00161c3:	68 c8 bd 02 c0       	push   0xc002bdc8
c00161c8:	e8 cc 44 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00161cd:	83 c8 ff             	or     eax,0xffffffff
c00161d0:	83 c4 1c             	add    esp,0x1c
c00161d3:	c3                   	ret    

c00161d4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00161d4:	53                   	push   ebx
c00161d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00161d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161e1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00161e7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00161ed:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00161f3:	77 10                	ja     c0016205 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00161f5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00161fb:	89 d3                	mov    ebx,edx
c00161fd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016203:	72 05                	jb     c001620a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016205:	83 c8 ff             	or     eax,0xffffffff
c0016208:	89 c2                	mov    edx,eax
c001620a:	5b                   	pop    ebx
c001620b:	c3                   	ret    

c001620c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001620c:	56                   	push   esi
c001620d:	83 c8 ff             	or     eax,0xffffffff
c0016210:	53                   	push   ebx
c0016211:	89 c2                	mov    edx,eax
c0016213:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016217:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001621b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001621f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016225:	77 27                	ja     c001624e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016227:	89 d8                	mov    eax,ebx
c0016229:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001622f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016235:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001623a:	89 c2                	mov    edx,eax
c001623c:	73 10                	jae    c001624e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001623e:	89 c8                	mov    eax,ecx
c0016240:	89 da                	mov    edx,ebx
c0016242:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016248:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001624e:	5b                   	pop    ebx
c001624f:	5e                   	pop    esi
c0016250:	c3                   	ret    
c0016251:	90                   	nop

c0016252 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016252:	83 ec 1c             	sub    esp,0x1c
c0016255:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001625d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016265:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016269:	89 04 24             	mov    DWORD PTR [esp],eax
c001626c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016270:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016278:	83 ec 08             	sub    esp,0x8
c001627b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001627f:	50                   	push   eax
c0016280:	e8 e5 de ff ff       	call   c001416a <Device::Device(char const*)>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	ba 4c be 02 c0       	mov    edx,0xc002be4c
c001628d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016291:	89 10                	mov    DWORD PTR [eax],edx
c0016293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016297:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001629e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162a2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00162a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ad:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00162b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00162bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162c3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00162c9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00162cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00162d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00162d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00162da:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00162e0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00162e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162ee:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00162f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016302:	90                   	nop
c0016303:	83 c4 1c             	add    esp,0x1c
c0016306:	c3                   	ret    
c0016307:	90                   	nop

c0016308 <LogicalDisk::assignDriveLetter()>:
c0016308:	55                   	push   ebp
c0016309:	57                   	push   edi
c001630a:	56                   	push   esi
c001630b:	53                   	push   ebx
c001630c:	83 ec 14             	sub    esp,0x14
c001630f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016313:	8b 3d 80 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f780
c0016319:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001631f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016323:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016329:	8b 3d 84 f7 02 c0    	mov    edi,DWORD PTR ds:0xc002f784
c001632f:	3c 01                	cmp    al,0x1
c0016331:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016335:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016339:	19 c0                	sbb    eax,eax
c001633b:	83 e0 02             	and    eax,0x2
c001633e:	83 c0 41             	add    eax,0x41
c0016341:	0f be e8             	movsx  ebp,al
c0016344:	3c 43                	cmp    al,0x43
c0016346:	75 10                	jne    c0016358 <LogicalDisk::assignDriveLetter()+0x50>
c0016348:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001634f:	75 5d                	jne    c00163ae <LogicalDisk::assignDriveLetter()+0xa6>
c0016351:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016356:	75 56                	jne    c00163ae <LogicalDisk::assignDriveLetter()+0xa6>
c0016358:	8d 75 bf             	lea    esi,[ebp-0x41]
c001635b:	ba 01 00 00 00       	mov    edx,0x1
c0016360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016364:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016368:	d3 e2                	shl    edx,cl
c001636a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001636e:	89 d7                	mov    edi,edx
c0016370:	89 d6                	mov    esi,edx
c0016372:	c1 ff 1f             	sar    edi,0x1f
c0016375:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016379:	21 f9                	and    ecx,edi
c001637b:	09 d1                	or     ecx,edx
c001637d:	75 2f                	jne    c00163ae <LogicalDisk::assignDriveLetter()+0xa6>
c001637f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016387:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001638d:	09 f2                	or     edx,esi
c001638f:	89 15 80 f7 02 c0    	mov    DWORD PTR ds:0xc002f780,edx
c0016395:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016399:	09 fa                	or     edx,edi
c001639b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001639f:	89 15 84 f7 02 c0    	mov    DWORD PTR ds:0xc002f784,edx
c00163a5:	89 1c bd a0 f7 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0860],ebx
c00163ac:	eb 08                	jmp    c00163b6 <LogicalDisk::assignDriveLetter()+0xae>
c00163ae:	45                   	inc    ebp
c00163af:	40                   	inc    eax
c00163b0:	3c 5b                	cmp    al,0x5b
c00163b2:	75 90                	jne    c0016344 <LogicalDisk::assignDriveLetter()+0x3c>
c00163b4:	31 c0                	xor    eax,eax
c00163b6:	83 c4 14             	add    esp,0x14
c00163b9:	5b                   	pop    ebx
c00163ba:	5e                   	pop    esi
c00163bb:	5f                   	pop    edi
c00163bc:	5d                   	pop    ebp
c00163bd:	c3                   	ret    

c00163be <LogicalDisk::mount()>:
c00163be:	56                   	push   esi
c00163bf:	53                   	push   ebx
c00163c0:	50                   	push   eax
c00163c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163c5:	8b 1d 14 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f314
c00163cb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00163d5:	85 db                	test   ebx,ebx
c00163d7:	74 50                	je     c0016429 <LogicalDisk::mount()+0x6b>
c00163d9:	50                   	push   eax
c00163da:	50                   	push   eax
c00163db:	ff 35 c8 26 03 c0    	push   DWORD PTR ds:0xc00326c8
c00163e1:	68 ec bd 02 c0       	push   0xc002bdec
c00163e6:	e8 42 c7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00163eb:	83 c4 0c             	add    esp,0xc
c00163ee:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00163f5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163f7:	83 e8 41             	sub    eax,0x41
c00163fa:	50                   	push   eax
c00163fb:	56                   	push   esi
c00163fc:	53                   	push   ebx
c00163fd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016400:	83 c4 10             	add    esp,0x10
c0016403:	84 c0                	test   al,al
c0016405:	74 08                	je     c001640f <LogicalDisk::mount()+0x51>
c0016407:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001640d:	eb 1c                	jmp    c001642b <LogicalDisk::mount()+0x6d>
c001640f:	51                   	push   ecx
c0016410:	51                   	push   ecx
c0016411:	ff 35 c8 26 03 c0    	push   DWORD PTR ds:0xc00326c8
c0016417:	68 07 be 02 c0       	push   0xc002be07
c001641c:	e8 0c c7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0016421:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	eb ac                	jmp    c00163d5 <LogicalDisk::mount()+0x17>
c0016429:	31 c0                	xor    eax,eax
c001642b:	5a                   	pop    edx
c001642c:	5b                   	pop    ebx
c001642d:	5e                   	pop    esi
c001642e:	c3                   	ret    
c001642f:	90                   	nop

c0016430 <LogicalDisk::unmount()>:
c0016430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016434:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001643e:	c3                   	ret    
c001643f:	90                   	nop

c0016440 <LogicalDisk::eject()>:
c0016440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016444:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001644a:	8b 10                	mov    edx,DWORD PTR [eax]
c001644c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016450:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016453:	90                   	nop

c0016454 <LogicalDisk::unassignDriveLetter()>:
c0016454:	57                   	push   edi
c0016455:	56                   	push   esi
c0016456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001645a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016461:	84 c9                	test   cl,cl
c0016463:	75 0f                	jne    c0016474 <LogicalDisk::unassignDriveLetter()+0x20>
c0016465:	c7 44 24 0c 22 be 02 c0 	mov    DWORD PTR [esp+0xc],0xc002be22
c001646d:	5e                   	pop    esi
c001646e:	5f                   	pop    edi
c001646f:	e9 25 42 00 00       	jmp    c001a699 <Krnl::panic(char const*)>
c0016474:	83 e9 41             	sub    ecx,0x41
c0016477:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001647e:	b8 01 00 00 00       	mov    eax,0x1
c0016483:	c7 04 8d a0 f7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0860],0x0
c001648e:	d3 e0                	shl    eax,cl
c0016490:	89 c7                	mov    edi,eax
c0016492:	f7 d0                	not    eax
c0016494:	c1 ff 1f             	sar    edi,0x1f
c0016497:	21 05 80 f7 02 c0    	and    DWORD PTR ds:0xc002f780,eax
c001649d:	89 fe                	mov    esi,edi
c001649f:	f7 d6                	not    esi
c00164a1:	21 35 84 f7 02 c0    	and    DWORD PTR ds:0xc002f784,esi
c00164a7:	5e                   	pop    esi
c00164a8:	5f                   	pop    edi
c00164a9:	c3                   	ret    

c00164aa <LogicalDisk::read(unsigned long long, int, void*)>:
c00164aa:	57                   	push   edi
c00164ab:	56                   	push   esi
c00164ac:	53                   	push   ebx
c00164ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00164b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00164b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164bd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00164c3:	77 41                	ja     c0016506 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00164c5:	99                   	cdq    
c00164c6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00164cc:	01 c8                	add    eax,ecx
c00164ce:	11 da                	adc    edx,ebx
c00164d0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00164d6:	19 d7                	sbb    edi,edx
c00164d8:	72 33                	jb     c001650d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00164da:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00164e0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00164e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00164ea:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00164ee:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00164f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164fe:	5b                   	pop    ebx
c00164ff:	5e                   	pop    esi
c0016500:	5f                   	pop    edi
c0016501:	e9 ec 0a 00 00       	jmp    c0016ff2 <VCache::read(unsigned long long, int, void*)>
c0016506:	b8 05 00 00 00       	mov    eax,0x5
c001650b:	eb 05                	jmp    c0016512 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001650d:	b8 07 00 00 00       	mov    eax,0x7
c0016512:	5b                   	pop    ebx
c0016513:	5e                   	pop    esi
c0016514:	5f                   	pop    edi
c0016515:	c3                   	ret    

c0016516 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016516:	57                   	push   edi
c0016517:	56                   	push   esi
c0016518:	53                   	push   ebx
c0016519:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001651d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016521:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016525:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016529:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001652f:	77 41                	ja     c0016572 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016531:	99                   	cdq    
c0016532:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016538:	01 c8                	add    eax,ecx
c001653a:	11 da                	adc    edx,ebx
c001653c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016542:	19 d7                	sbb    edi,edx
c0016544:	72 33                	jb     c0016579 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016546:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001654c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016552:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016556:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001655a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016560:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016566:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001656a:	5b                   	pop    ebx
c001656b:	5e                   	pop    esi
c001656c:	5f                   	pop    edi
c001656d:	e9 96 09 00 00       	jmp    c0016f08 <VCache::write(unsigned long long, int, void*)>
c0016572:	b8 05 00 00 00       	mov    eax,0x5
c0016577:	eb 05                	jmp    c001657e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016579:	b8 07 00 00 00       	mov    eax,0x7
c001657e:	5b                   	pop    ebx
c001657f:	5e                   	pop    esi
c0016580:	5f                   	pop    edi
c0016581:	c3                   	ret    

c0016582 <Mouse::Mouse(char const*)>:
c0016582:	83 ec 0c             	sub    esp,0xc
c0016585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016589:	83 ec 08             	sub    esp,0x8
c001658c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016590:	50                   	push   eax
c0016591:	e8 d4 db ff ff       	call   c001416a <Device::Device(char const*)>
c0016596:	83 c4 10             	add    esp,0x10
c0016599:	ba 78 be 02 c0       	mov    edx,0xc002be78
c001659e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a2:	89 10                	mov    DWORD PTR [eax],edx
c00165a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a8:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00165b2:	90                   	nop
c00165b3:	83 c4 0c             	add    esp,0xc
c00165b6:	c3                   	ret    
c00165b7:	90                   	nop

c00165b8 <Mouse::~Mouse()>:
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	ba 78 be 02 c0       	mov    edx,0xc002be78
c00165c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165c4:	89 10                	mov    DWORD PTR [eax],edx
c00165c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	50                   	push   eax
c00165ce:	e8 61 d8 ff ff       	call   c0013e34 <Device::~Device()>
c00165d3:	83 c4 10             	add    esp,0x10
c00165d6:	90                   	nop
c00165d7:	83 c4 0c             	add    esp,0xc
c00165da:	c3                   	ret    
c00165db:	90                   	nop

c00165dc <Mouse::~Mouse()>:
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	83 ec 0c             	sub    esp,0xc
c00165e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165e6:	e8 cd ff ff ff       	call   c00165b8 <Mouse::~Mouse()>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	83 ec 08             	sub    esp,0x8
c00165f1:	68 58 01 00 00       	push   0x158
c00165f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165fa:	e8 4e c4 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00165ff:	83 c4 10             	add    esp,0x10
c0016602:	83 c4 0c             	add    esp,0xc
c0016605:	c3                   	ret    

c0016606 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016606:	55                   	push   ebp
c0016607:	57                   	push   edi
c0016608:	56                   	push   esi
c0016609:	53                   	push   ebx
c001660a:	81 ec 20 01 00 00    	sub    esp,0x120
c0016610:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016617:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001661e:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016625:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001662c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016634:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016638:	56                   	push   esi
c0016639:	68 9c be 02 c0       	push   0xc002be9c
c001663e:	e8 ea c4 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0016643:	58                   	pop    eax
c0016644:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001664b:	e8 16 dc ff ff       	call   c0014266 <Device::getName()>
c0016650:	5a                   	pop    edx
c0016651:	59                   	pop    ecx
c0016652:	50                   	push   eax
c0016653:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016657:	53                   	push   ebx
c0016658:	e8 af a1 fe ff       	call   c000080c <strcpy>
c001665d:	5d                   	pop    ebp
c001665e:	58                   	pop    eax
c001665f:	68 cd be 02 c0       	push   0xc002becd
c0016664:	53                   	push   ebx
c0016665:	e8 e2 a2 fe ff       	call   c000094c <strcat>
c001666a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016671:	e8 16 92 ff ff       	call   c000f88c <malloc>
c0016676:	83 c4 0c             	add    esp,0xc
c0016679:	89 c5                	mov    ebp,eax
c001667b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001667f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016683:	57                   	push   edi
c0016684:	56                   	push   esi
c0016685:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001668c:	53                   	push   ebx
c001668d:	50                   	push   eax
c001668e:	e8 bf fb ff ff       	call   c0016252 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016693:	83 c4 14             	add    esp,0x14
c0016696:	55                   	push   ebp
c0016697:	e8 6c fc ff ff       	call   c0016308 <LogicalDisk::assignDriveLetter()>
c001669c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001669f:	0f be d8             	movsx  ebx,al
c00166a2:	e8 17 fd ff ff       	call   c00163be <LogicalDisk::mount()>
c00166a7:	58                   	pop    eax
c00166a8:	5a                   	pop    edx
c00166a9:	55                   	push   ebp
c00166aa:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00166b1:	e8 b0 d8 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c00166b6:	59                   	pop    ecx
c00166b7:	5e                   	pop    esi
c00166b8:	53                   	push   ebx
c00166b9:	68 d8 be 02 c0       	push   0xc002bed8
c00166be:	e8 6a c4 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00166c3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00166c9:	5b                   	pop    ebx
c00166ca:	5e                   	pop    esi
c00166cb:	5f                   	pop    edi
c00166cc:	5d                   	pop    ebp
c00166cd:	c3                   	ret    

c00166ce <createPartitionsForDisk(PhysicalDisk*)>:
c00166ce:	55                   	push   ebp
c00166cf:	57                   	push   edi
c00166d0:	56                   	push   esi
c00166d1:	53                   	push   ebx
c00166d2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00166d8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00166df:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00166e5:	3d 00 02 00 00       	cmp    eax,0x200
c00166ea:	74 27                	je     c0016713 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00166ec:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00166f2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00166f8:	83 ec 10             	sub    esp,0x10
c00166fb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00166ff:	99                   	cdq    
c0016700:	c1 e6 0a             	shl    esi,0xa
c0016703:	52                   	push   edx
c0016704:	89 fd                	mov    ebp,edi
c0016706:	50                   	push   eax
c0016707:	55                   	push   ebp
c0016708:	56                   	push   esi
c0016709:	e8 66 0d 01 00       	call   c0027474 <__udivdi3>
c001670e:	e9 b1 00 00 00       	jmp    c00167c4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016713:	83 ec 0c             	sub    esp,0xc
c0016716:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016718:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001671c:	56                   	push   esi
c001671d:	6a 01                	push   0x1
c001671f:	6a 00                	push   0x0
c0016721:	6a 00                	push   0x0
c0016723:	53                   	push   ebx
c0016724:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016727:	83 c4 20             	add    esp,0x20
c001672a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016732:	75 0a                	jne    c001673e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016734:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001673c:	74 2c                	je     c001676a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001673e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016744:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001674a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016750:	83 ec 10             	sub    esp,0x10
c0016753:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016757:	89 f7                	mov    edi,esi
c0016759:	c1 e0 0a             	shl    eax,0xa
c001675c:	c1 ff 1f             	sar    edi,0x1f
c001675f:	57                   	push   edi
c0016760:	56                   	push   esi
c0016761:	52                   	push   edx
c0016762:	50                   	push   eax
c0016763:	e8 0c 0d 01 00       	call   c0027474 <__udivdi3>
c0016768:	eb 5a                	jmp    c00167c4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001676a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016771:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016778:	83 e1 7f             	and    ecx,0x7f
c001677b:	83 e0 7f             	and    eax,0x7f
c001677e:	01 c1                	add    ecx,eax
c0016780:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016787:	83 e0 7f             	and    eax,0x7f
c001678a:	01 c1                	add    ecx,eax
c001678c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016793:	83 e0 7f             	and    eax,0x7f
c0016796:	00 c1                	add    cl,al
c0016798:	74 41                	je     c00167db <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001679a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00167a0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00167a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00167ac:	83 ec 10             	sub    esp,0x10
c00167af:	0f a4 c2 0a          	shld   edx,eax,0xa
c00167b3:	89 f7                	mov    edi,esi
c00167b5:	c1 e0 0a             	shl    eax,0xa
c00167b8:	c1 ff 1f             	sar    edi,0x1f
c00167bb:	57                   	push   edi
c00167bc:	56                   	push   esi
c00167bd:	52                   	push   edx
c00167be:	50                   	push   eax
c00167bf:	e8 b0 0c 01 00       	call   c0027474 <__udivdi3>
c00167c4:	83 c4 14             	add    esp,0x14
c00167c7:	52                   	push   edx
c00167c8:	50                   	push   eax
c00167c9:	6a 00                	push   0x0
c00167cb:	6a 00                	push   0x0
c00167cd:	53                   	push   ebx
c00167ce:	e8 33 fe ff ff       	call   c0016606 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00167d3:	83 c4 20             	add    esp,0x20
c00167d6:	e9 79 01 00 00       	jmp    c0016954 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00167db:	89 f0                	mov    eax,esi
c00167dd:	31 f6                	xor    esi,esi
c00167df:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00167e6:	75 02                	jne    c00167ea <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00167e8:	89 f1                	mov    ecx,esi
c00167ea:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00167f1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00167f8:	c1 e2 08             	shl    edx,0x8
c00167fb:	c1 e7 10             	shl    edi,0x10
c00167fe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016806:	09 fa                	or     edx,edi
c0016808:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016810:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016817:	83 c0 10             	add    eax,0x10
c001681a:	09 fa                	or     edx,edi
c001681c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016823:	c1 e7 18             	shl    edi,0x18
c0016826:	09 fa                	or     edx,edi
c0016828:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001682f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016833:	c1 e7 10             	shl    edi,0x10
c0016836:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001683d:	c1 e2 08             	shl    edx,0x8
c0016840:	09 fa                	or     edx,edi
c0016842:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016849:	09 fa                	or     edx,edi
c001684b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016852:	c1 e7 18             	shl    edi,0x18
c0016855:	09 fa                	or     edx,edi
c0016857:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001685b:	46                   	inc    esi
c001685c:	83 fe 04             	cmp    esi,0x4
c001685f:	0f 85 7a ff ff ff    	jne    c00167df <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016869:	83 f0 01             	xor    eax,0x1
c001686c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016870:	75 57                	jne    c00168c9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016876:	83 f0 01             	xor    eax,0x1
c0016879:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001687d:	75 4a                	jne    c00168c9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001687f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016883:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001688b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016893:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016899:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001689f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168a5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168a9:	89 f7                	mov    edi,esi
c00168ab:	c1 e0 0a             	shl    eax,0xa
c00168ae:	c1 ff 1f             	sar    edi,0x1f
c00168b1:	57                   	push   edi
c00168b2:	56                   	push   esi
c00168b3:	52                   	push   edx
c00168b4:	50                   	push   eax
c00168b5:	e8 ba 0b 01 00       	call   c0027474 <__udivdi3>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00168c5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00168c9:	84 c9                	test   cl,cl
c00168cb:	74 53                	je     c0016920 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00168cd:	0f b6 c9             	movzx  ecx,cl
c00168d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00168d8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00168e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00168e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00168e8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00168ec:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00168f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00168f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016900:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016904:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016908:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001690c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016910:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016914:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016918:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001691c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016920:	31 ed                	xor    ebp,ebp
c0016922:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016926:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001692a:	89 f8                	mov    eax,edi
c001692c:	09 f0                	or     eax,esi
c001692e:	74 1e                	je     c001694e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016930:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016934:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016938:	89 d1                	mov    ecx,edx
c001693a:	09 c1                	or     ecx,eax
c001693c:	74 10                	je     c001694e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	57                   	push   edi
c0016942:	56                   	push   esi
c0016943:	52                   	push   edx
c0016944:	50                   	push   eax
c0016945:	53                   	push   ebx
c0016946:	e8 bb fc ff ff       	call   c0016606 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001694b:	83 c4 20             	add    esp,0x20
c001694e:	45                   	inc    ebp
c001694f:	83 fd 04             	cmp    ebp,0x4
c0016952:	75 ce                	jne    c0016922 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016954:	81 c4 5c 02 00 00    	add    esp,0x25c
c001695a:	5b                   	pop    ebx
c001695b:	5e                   	pop    esi
c001695c:	5f                   	pop    edi
c001695d:	5d                   	pop    ebp
c001695e:	c3                   	ret    
c001695f:	90                   	nop

c0016960 <Serial::Serial(char const*)>:
c0016960:	83 ec 0c             	sub    esp,0xc
c0016963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016967:	83 ec 08             	sub    esp,0x8
c001696a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001696e:	50                   	push   eax
c001696f:	e8 f6 d7 ff ff       	call   c001416a <Device::Device(char const*)>
c0016974:	83 c4 10             	add    esp,0x10
c0016977:	ba 04 bf 02 c0       	mov    edx,0xc002bf04
c001697c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016980:	89 10                	mov    DWORD PTR [eax],edx
c0016982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016986:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016990:	90                   	nop
c0016991:	83 c4 0c             	add    esp,0xc
c0016994:	c3                   	ret    
c0016995:	90                   	nop

c0016996 <Serial::~Serial()>:
c0016996:	83 ec 0c             	sub    esp,0xc
c0016999:	ba 04 bf 02 c0       	mov    edx,0xc002bf04
c001699e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169a2:	89 10                	mov    DWORD PTR [eax],edx
c00169a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169a8:	83 ec 0c             	sub    esp,0xc
c00169ab:	50                   	push   eax
c00169ac:	e8 83 d4 ff ff       	call   c0013e34 <Device::~Device()>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	90                   	nop
c00169b5:	83 c4 0c             	add    esp,0xc
c00169b8:	c3                   	ret    
c00169b9:	90                   	nop

c00169ba <Serial::~Serial()>:
c00169ba:	83 ec 0c             	sub    esp,0xc
c00169bd:	83 ec 0c             	sub    esp,0xc
c00169c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169c4:	e8 cd ff ff ff       	call   c0016996 <Serial::~Serial()>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	83 ec 08             	sub    esp,0x8
c00169cf:	68 58 01 00 00       	push   0x158
c00169d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169d8:	e8 70 c0 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00169dd:	83 c4 10             	add    esp,0x10
c00169e0:	83 c4 0c             	add    esp,0xc
c00169e3:	c3                   	ret    

c00169e4 <Timer::Timer(char const*)>:
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169eb:	83 ec 08             	sub    esp,0x8
c00169ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169f2:	50                   	push   eax
c00169f3:	e8 72 d7 ff ff       	call   c001416a <Device::Device(char const*)>
c00169f8:	83 c4 10             	add    esp,0x10
c00169fb:	ba 48 bf 02 c0       	mov    edx,0xc002bf48
c0016a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a04:	89 10                	mov    DWORD PTR [eax],edx
c0016a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a0a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016a14:	90                   	nop
c0016a15:	83 c4 0c             	add    esp,0xc
c0016a18:	c3                   	ret    
c0016a19:	90                   	nop

c0016a1a <Timer::~Timer()>:
c0016a1a:	83 ec 0c             	sub    esp,0xc
c0016a1d:	ba 48 bf 02 c0       	mov    edx,0xc002bf48
c0016a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a26:	89 10                	mov    DWORD PTR [eax],edx
c0016a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a2c:	83 ec 0c             	sub    esp,0xc
c0016a2f:	50                   	push   eax
c0016a30:	e8 ff d3 ff ff       	call   c0013e34 <Device::~Device()>
c0016a35:	83 c4 10             	add    esp,0x10
c0016a38:	90                   	nop
c0016a39:	83 c4 0c             	add    esp,0xc
c0016a3c:	c3                   	ret    
c0016a3d:	90                   	nop

c0016a3e <Timer::~Timer()>:
c0016a3e:	83 ec 0c             	sub    esp,0xc
c0016a41:	83 ec 0c             	sub    esp,0xc
c0016a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a48:	e8 cd ff ff ff       	call   c0016a1a <Timer::~Timer()>
c0016a4d:	83 c4 10             	add    esp,0x10
c0016a50:	83 ec 08             	sub    esp,0x8
c0016a53:	68 5c 01 00 00       	push   0x15c
c0016a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a5c:	e8 ec bf ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0016a61:	83 c4 10             	add    esp,0x10
c0016a64:	83 c4 0c             	add    esp,0xc
c0016a67:	c3                   	ret    

c0016a68 <Timer::read()>:
c0016a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a72:	c3                   	ret    

c0016a73 <timerHandler(unsigned long long)>:
c0016a73:	55                   	push   ebp
c0016a74:	57                   	push   edi
c0016a75:	56                   	push   esi
c0016a76:	53                   	push   ebx
c0016a77:	83 ec 0c             	sub    esp,0xc
c0016a7a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016a7e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016a82:	01 35 10 f8 02 c0    	add    DWORD PTR ds:0xc002f810,esi
c0016a88:	11 3d 14 f8 02 c0    	adc    DWORD PTR ds:0xc002f814,edi
c0016a8e:	80 3d 8d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f18d,0x0
c0016a95:	0f 84 42 01 00 00    	je     c0016bdd <timerHandler(unsigned long long)+0x16a>
c0016a9b:	fa                   	cli    
c0016a9c:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	ff 05 c4 26 03 c0    	inc    DWORD PTR ds:0xc00326c4
c0016aab:	68 d8 26 03 c0       	push   0xc00326d8
c0016ab0:	e8 45 2a 01 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ab5:	83 c4 10             	add    esp,0x10
c0016ab8:	84 c0                	test   al,al
c0016aba:	0f 85 a2 00 00 00    	jne    c0016b62 <timerHandler(unsigned long long)+0xef>
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	68 d8 26 03 c0       	push   0xc00326d8
c0016ac8:	e8 49 2a 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	89 c3                	mov    ebx,eax
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	68 d8 26 03 c0       	push   0xc00326d8
c0016ada:	e8 37 2a 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016adf:	c7 04 24 d8 26 03 c0 	mov    DWORD PTR [esp],0xc00326d8
c0016ae6:	89 c5                	mov    ebp,eax
c0016ae8:	e8 31 2a 01 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016aed:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016af0:	83 c4 10             	add    esp,0x10
c0016af3:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016af6:	39 15 10 f8 02 c0    	cmp    DWORD PTR ds:0xc002f810,edx
c0016afc:	a1 14 f8 02 c0       	mov    eax,ds:0xc002f814
c0016b01:	19 c8                	sbb    eax,ecx
c0016b03:	72 21                	jb     c0016b26 <timerHandler(unsigned long long)+0xb3>
c0016b05:	83 ec 0c             	sub    esp,0xc
c0016b08:	55                   	push   ebp
c0016b09:	e8 02 7e 00 00       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c0016b0e:	83 c4 10             	add    esp,0x10
c0016b11:	39 eb                	cmp    ebx,ebp
c0016b13:	75 21                	jne    c0016b36 <timerHandler(unsigned long long)+0xc3>
c0016b15:	83 ec 0c             	sub    esp,0xc
c0016b18:	68 d8 26 03 c0       	push   0xc00326d8
c0016b1d:	e8 f4 29 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b22:	89 c3                	mov    ebx,eax
c0016b24:	eb 0d                	jmp    c0016b33 <timerHandler(unsigned long long)+0xc0>
c0016b26:	50                   	push   eax
c0016b27:	50                   	push   eax
c0016b28:	55                   	push   ebp
c0016b29:	68 d8 26 03 c0       	push   0xc00326d8
c0016b2e:	e8 99 2a 01 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b33:	83 c4 10             	add    esp,0x10
c0016b36:	83 ec 0c             	sub    esp,0xc
c0016b39:	68 d8 26 03 c0       	push   0xc00326d8
c0016b3e:	e8 b7 29 01 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016b43:	83 c4 10             	add    esp,0x10
c0016b46:	84 c0                	test   al,al
c0016b48:	75 18                	jne    c0016b62 <timerHandler(unsigned long long)+0xef>
c0016b4a:	83 ec 0c             	sub    esp,0xc
c0016b4d:	68 d8 26 03 c0       	push   0xc00326d8
c0016b52:	e8 bf 29 01 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016b57:	83 c4 10             	add    esp,0x10
c0016b5a:	39 d8                	cmp    eax,ebx
c0016b5c:	0f 85 70 ff ff ff    	jne    c0016ad2 <timerHandler(unsigned long long)+0x5f>
c0016b62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b67:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016b6b:	74 3d                	je     c0016baa <timerHandler(unsigned long long)+0x137>
c0016b6d:	80 3d 8c f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f18c,0x0
c0016b74:	74 34                	je     c0016baa <timerHandler(unsigned long long)+0x137>
c0016b76:	fa                   	cli    
c0016b77:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c0016b7d:	31 d2                	xor    edx,edx
c0016b7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b84:	89 f9                	mov    ecx,edi
c0016b86:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016b91:	39 c6                	cmp    esi,eax
c0016b93:	19 d1                	sbb    ecx,edx
c0016b95:	72 05                	jb     c0016b9c <timerHandler(unsigned long long)+0x129>
c0016b97:	e8 b0 78 00 00       	call   c001e44c <schedule()>
c0016b9c:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0016ba1:	48                   	dec    eax
c0016ba2:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0016ba7:	75 01                	jne    c0016baa <timerHandler(unsigned long long)+0x137>
c0016ba9:	fb                   	sti    
c0016baa:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c0016baf:	48                   	dec    eax
c0016bb0:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c0016bb5:	75 18                	jne    c0016bcf <timerHandler(unsigned long long)+0x15c>
c0016bb7:	83 3d c0 26 03 c0 00 	cmp    DWORD PTR ds:0xc00326c0,0x0
c0016bbe:	74 0f                	je     c0016bcf <timerHandler(unsigned long long)+0x15c>
c0016bc0:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c0016bca:	e8 7d 78 00 00       	call   c001e44c <schedule()>
c0016bcf:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0016bd4:	48                   	dec    eax
c0016bd5:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c0016bda:	75 01                	jne    c0016bdd <timerHandler(unsigned long long)+0x16a>
c0016bdc:	fb                   	sti    
c0016bdd:	83 c4 0c             	add    esp,0xc
c0016be0:	5b                   	pop    ebx
c0016be1:	5e                   	pop    esi
c0016be2:	5f                   	pop    edi
c0016be3:	5d                   	pop    ebp
c0016be4:	c3                   	ret    

c0016be5 <setupTimer(int)>:
c0016be5:	57                   	push   edi
c0016be6:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0016beb:	56                   	push   esi
c0016bec:	53                   	push   ebx
c0016bed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bf1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bf7:	83 ec 0c             	sub    esp,0xc
c0016bfa:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016c00:	e8 61 d6 ff ff       	call   c0014266 <Device::getName()>
c0016c05:	83 c4 10             	add    esp,0x10
c0016c08:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016c0b:	0f 85 8d 00 00 00    	jne    c0016c9e <setupTimer(int)+0xb9>
c0016c11:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0016c16:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016c1d:	74 7f                	je     c0016c9e <setupTimer(int)+0xb9>
c0016c1f:	83 ec 0c             	sub    esp,0xc
c0016c22:	68 5c 01 00 00       	push   0x15c
c0016c27:	e8 60 8c ff ff       	call   c000f88c <malloc>
c0016c2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c2f:	89 c3                	mov    ebx,eax
c0016c31:	e8 12 04 01 00       	call   c0027048 <PIT::PIT()>
c0016c36:	59                   	pop    ecx
c0016c37:	5f                   	pop    edi
c0016c38:	53                   	push   ebx
c0016c39:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c0016c3f:	e8 22 d3 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c0016c44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c46:	6a 00                	push   0x0
c0016c48:	6a 00                	push   0x0
c0016c4a:	56                   	push   esi
c0016c4b:	53                   	push   ebx
c0016c4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c4f:	83 c4 14             	add    esp,0x14
c0016c52:	68 60 01 00 00       	push   0x160
c0016c57:	e8 30 8c ff ff       	call   c000f88c <malloc>
c0016c5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c5f:	89 c7                	mov    edi,eax
c0016c61:	e8 92 02 01 00       	call   c0026ef8 <APICTimer::APICTimer()>
c0016c66:	6a 00                	push   0x0
c0016c68:	6a 00                	push   0x0
c0016c6a:	56                   	push   esi
c0016c6b:	57                   	push   edi
c0016c6c:	e8 89 01 01 00       	call   c0026dfa <APICTimer::open(int, int, void*)>
c0016c71:	83 c4 20             	add    esp,0x20
c0016c74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c76:	6a 00                	push   0x0
c0016c78:	6a 00                	push   0x0
c0016c7a:	6a 00                	push   0x0
c0016c7c:	53                   	push   ebx
c0016c7d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c80:	58                   	pop    eax
c0016c81:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0016c86:	5a                   	pop    edx
c0016c87:	57                   	push   edi
c0016c88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c8e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016c94:	e8 cd d2 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	eb 33                	jmp    c0016cd1 <setupTimer(int)+0xec>
c0016c9e:	83 ec 0c             	sub    esp,0xc
c0016ca1:	68 5c 01 00 00       	push   0x15c
c0016ca6:	e8 e1 8b ff ff       	call   c000f88c <malloc>
c0016cab:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cae:	89 c3                	mov    ebx,eax
c0016cb0:	e8 93 03 01 00       	call   c0027048 <PIT::PIT()>
c0016cb5:	58                   	pop    eax
c0016cb6:	5a                   	pop    edx
c0016cb7:	53                   	push   ebx
c0016cb8:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c0016cbe:	e8 a3 d2 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c0016cc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cc5:	6a 00                	push   0x0
c0016cc7:	6a 00                	push   0x0
c0016cc9:	56                   	push   esi
c0016cca:	53                   	push   ebx
c0016ccb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016cce:	83 c4 20             	add    esp,0x20
c0016cd1:	89 d8                	mov    eax,ebx
c0016cd3:	5b                   	pop    ebx
c0016cd4:	5e                   	pop    esi
c0016cd5:	5f                   	pop    edi
c0016cd6:	c3                   	ret    
c0016cd7:	90                   	nop

c0016cd8 <VCache::VCache(PhysicalDisk*)>:
c0016cd8:	53                   	push   ebx
c0016cd9:	83 ec 18             	sub    esp,0x18
c0016cdc:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c0016ce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ce5:	89 10                	mov    DWORD PTR [eax],edx
c0016ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ceb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cf6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d01:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016d08:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d13:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016d1a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d25:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d30:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d38:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016d3f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d4a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016d4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d52:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d5a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016d5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d62:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016d69:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d78:	e8 0f 8b ff ff       	call   c000f88c <malloc>
c0016d7d:	83 c4 10             	add    esp,0x10
c0016d80:	89 c3                	mov    ebx,eax
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	53                   	push   ebx
c0016d86:	e8 6b 74 00 00       	call   c001e1f6 <Mutex::Mutex()>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d92:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016d95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016d9d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016da0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016da4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016dab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016daf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016db5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016dbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dc0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016dc6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016dcc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016dd0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016dd3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016dd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dda:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016dde:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016de2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016de8:	05 00 01 00 00       	add    eax,0x100
c0016ded:	c1 e0 04             	shl    eax,0x4
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	50                   	push   eax
c0016df4:	e8 93 8a ff ff       	call   c000f88c <malloc>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	89 c2                	mov    edx,eax
c0016dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e09:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e1c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e22:	c1 e0 07             	shl    eax,0x7
c0016e25:	83 ec 0c             	sub    esp,0xc
c0016e28:	50                   	push   eax
c0016e29:	e8 5e 8a ff ff       	call   c000f88c <malloc>
c0016e2e:	83 c4 10             	add    esp,0x10
c0016e31:	89 c2                	mov    edx,eax
c0016e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e37:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016e3a:	90                   	nop
c0016e3b:	83 c4 18             	add    esp,0x18
c0016e3e:	5b                   	pop    ebx
c0016e3f:	c3                   	ret    

c0016e40 <VCache::invalidateReadBuffer()>:
c0016e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e44:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016e4a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e4e:	c3                   	ret    
c0016e4f:	90                   	nop

c0016e50 <VCache::writeWriteBuffer()>:
c0016e50:	53                   	push   ebx
c0016e51:	83 ec 14             	sub    esp,0x14
c0016e54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016e58:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e5d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016e60:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016e63:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016e66:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016e69:	50                   	push   eax
c0016e6a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e6d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016e74:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016e7b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016e7f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016e86:	83 c4 28             	add    esp,0x28
c0016e89:	5b                   	pop    ebx
c0016e8a:	c3                   	ret    
c0016e8b:	90                   	nop

c0016e8c <VCache::~VCache()>:
c0016e8c:	83 ec 0c             	sub    esp,0xc
c0016e8f:	ba 78 bf 02 c0       	mov    edx,0xc002bf78
c0016e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e98:	89 10                	mov    DWORD PTR [eax],edx
c0016e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e9e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016ea1:	84 c0                	test   al,al
c0016ea3:	74 0f                	je     c0016eb4 <VCache::~VCache()+0x28>
c0016ea5:	83 ec 0c             	sub    esp,0xc
c0016ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eac:	e8 9f ff ff ff       	call   c0016e50 <VCache::writeWriteBuffer()>
c0016eb1:	83 c4 10             	add    esp,0x10
c0016eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eb8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016ebb:	83 ec 0c             	sub    esp,0xc
c0016ebe:	50                   	push   eax
c0016ebf:	e8 d8 89 ff ff       	call   c000f89c <free>
c0016ec4:	83 c4 10             	add    esp,0x10
c0016ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ecb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ece:	83 ec 0c             	sub    esp,0xc
c0016ed1:	50                   	push   eax
c0016ed2:	e8 c5 89 ff ff       	call   c000f89c <free>
c0016ed7:	83 c4 10             	add    esp,0x10
c0016eda:	90                   	nop
c0016edb:	83 c4 0c             	add    esp,0xc
c0016ede:	c3                   	ret    
c0016edf:	90                   	nop

c0016ee0 <VCache::~VCache()>:
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	83 ec 0c             	sub    esp,0xc
c0016ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eea:	e8 9d ff ff ff       	call   c0016e8c <VCache::~VCache()>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	83 ec 08             	sub    esp,0x8
c0016ef5:	6a 44                	push   0x44
c0016ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016efb:	e8 4d bb ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0016f00:	83 c4 10             	add    esp,0x10
c0016f03:	83 c4 0c             	add    esp,0xc
c0016f06:	c3                   	ret    
c0016f07:	90                   	nop

c0016f08 <VCache::write(unsigned long long, int, void*)>:
c0016f08:	55                   	push   ebp
c0016f09:	57                   	push   edi
c0016f0a:	56                   	push   esi
c0016f0b:	53                   	push   ebx
c0016f0c:	83 ec 18             	sub    esp,0x18
c0016f0f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f17:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016f1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f1e:	e8 61 78 00 00       	call   c001e784 <Semaphore::acquire()>
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f2a:	74 0c                	je     c0016f38 <VCache::write(unsigned long long, int, void*)+0x30>
c0016f2c:	83 ec 0c             	sub    esp,0xc
c0016f2f:	53                   	push   ebx
c0016f30:	e8 0b ff ff ff       	call   c0016e40 <VCache::invalidateReadBuffer()>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016f3c:	74 5c                	je     c0016f9a <VCache::write(unsigned long long, int, void*)+0x92>
c0016f3e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016f41:	89 e8                	mov    eax,ebp
c0016f43:	99                   	cdq    
c0016f44:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016f47:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016f4a:	89 c1                	mov    ecx,eax
c0016f4c:	89 d0                	mov    eax,edx
c0016f4e:	31 f1                	xor    ecx,esi
c0016f50:	31 f8                	xor    eax,edi
c0016f52:	09 c1                	or     ecx,eax
c0016f54:	75 38                	jne    c0016f8e <VCache::write(unsigned long long, int, void*)+0x86>
c0016f56:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016f5b:	75 31                	jne    c0016f8e <VCache::write(unsigned long long, int, void*)+0x86>
c0016f5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f60:	89 ef                	mov    edi,ebp
c0016f62:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f68:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f6c:	0f af f9             	imul   edi,ecx
c0016f6f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016f72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016f77:	40                   	inc    eax
c0016f78:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016f7b:	83 c0 80             	add    eax,0xffffff80
c0016f7e:	75 5c                	jne    c0016fdc <VCache::write(unsigned long long, int, void*)+0xd4>
c0016f80:	83 ec 0c             	sub    esp,0xc
c0016f83:	53                   	push   ebx
c0016f84:	e8 c7 fe ff ff       	call   c0016e50 <VCache::writeWriteBuffer()>
c0016f89:	83 c4 10             	add    esp,0x10
c0016f8c:	eb 4e                	jmp    c0016fdc <VCache::write(unsigned long long, int, void*)+0xd4>
c0016f8e:	83 ec 0c             	sub    esp,0xc
c0016f91:	53                   	push   ebx
c0016f92:	e8 b9 fe ff ff       	call   c0016e50 <VCache::writeWriteBuffer()>
c0016f97:	83 c4 10             	add    esp,0x10
c0016f9a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f9d:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016fa2:	7f 22                	jg     c0016fc6 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016fa4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016fa7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016faa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016fae:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016fb2:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016fb5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016fb8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016fbe:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fc4:	eb 16                	jmp    c0016fdc <VCache::write(unsigned long long, int, void*)+0xd4>
c0016fc6:	83 ec 0c             	sub    esp,0xc
c0016fc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0016fcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fd3:	57                   	push   edi
c0016fd4:	56                   	push   esi
c0016fd5:	50                   	push   eax
c0016fd6:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016fd9:	83 c4 20             	add    esp,0x20
c0016fdc:	83 ec 0c             	sub    esp,0xc
c0016fdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fe2:	e8 d7 7e 00 00       	call   c001eebe <Semaphore::release()>
c0016fe7:	83 c4 1c             	add    esp,0x1c
c0016fea:	31 c0                	xor    eax,eax
c0016fec:	5b                   	pop    ebx
c0016fed:	5e                   	pop    esi
c0016fee:	5f                   	pop    edi
c0016fef:	5d                   	pop    ebp
c0016ff0:	c3                   	ret    
c0016ff1:	90                   	nop

c0016ff2 <VCache::read(unsigned long long, int, void*)>:
c0016ff2:	55                   	push   ebp
c0016ff3:	57                   	push   edi
c0016ff4:	56                   	push   esi
c0016ff5:	53                   	push   ebx
c0016ff6:	83 ec 28             	sub    esp,0x28
c0016ff9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016ffd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017001:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017005:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017009:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001700c:	e8 73 77 00 00       	call   c001e784 <Semaphore::acquire()>
c0017011:	83 c4 10             	add    esp,0x10
c0017014:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017018:	74 0c                	je     c0017026 <VCache::read(unsigned long long, int, void*)+0x34>
c001701a:	83 ec 0c             	sub    esp,0xc
c001701d:	53                   	push   ebx
c001701e:	e8 2d fe ff ff       	call   c0016e50 <VCache::writeWriteBuffer()>
c0017023:	83 c4 10             	add    esp,0x10
c0017026:	83 fd 01             	cmp    ebp,0x1
c0017029:	0f 85 80 00 00 00    	jne    c00170af <VCache::read(unsigned long long, int, void*)+0xbd>
c001702f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017036:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001703d:	75 70                	jne    c00170af <VCache::read(unsigned long long, int, void*)+0xbd>
c001703f:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017042:	89 e9                	mov    ecx,ebp
c0017044:	f7 d9                	neg    ecx
c0017046:	89 c8                	mov    eax,ecx
c0017048:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001704c:	c1 f8 1f             	sar    eax,0x1f
c001704f:	21 f1                	and    ecx,esi
c0017051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017055:	89 c8                	mov    eax,ecx
c0017057:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001705b:	21 f9                	and    ecx,edi
c001705d:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017061:	89 ca                	mov    edx,ecx
c0017063:	74 0a                	je     c001706f <VCache::read(unsigned long long, int, void*)+0x7d>
c0017065:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017068:	75 05                	jne    c001706f <VCache::read(unsigned long long, int, void*)+0x7d>
c001706a:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001706d:	74 23                	je     c0017092 <VCache::read(unsigned long long, int, void*)+0xa0>
c001706f:	83 ec 0c             	sub    esp,0xc
c0017072:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017076:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001707a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001707d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0017080:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017082:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017085:	55                   	push   ebp
c0017086:	52                   	push   edx
c0017087:	50                   	push   eax
c0017088:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001708c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001708f:	83 c4 20             	add    esp,0x20
c0017092:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017095:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017099:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001709f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00170a2:	48                   	dec    eax
c00170a3:	21 c6                	and    esi,eax
c00170a5:	0f af f1             	imul   esi,ecx
c00170a8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00170ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00170ad:	eb 1d                	jmp    c00170cc <VCache::read(unsigned long long, int, void*)+0xda>
c00170af:	83 ec 0c             	sub    esp,0xc
c00170b2:	53                   	push   ebx
c00170b3:	e8 88 fd ff ff       	call   c0016e40 <VCache::invalidateReadBuffer()>
c00170b8:	5a                   	pop    edx
c00170b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00170be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170c2:	55                   	push   ebp
c00170c3:	57                   	push   edi
c00170c4:	56                   	push   esi
c00170c5:	50                   	push   eax
c00170c6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00170c9:	83 c4 20             	add    esp,0x20
c00170cc:	83 ec 0c             	sub    esp,0xc
c00170cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170d2:	e8 e7 7d 00 00       	call   c001eebe <Semaphore::release()>
c00170d7:	83 c4 2c             	add    esp,0x2c
c00170da:	31 c0                	xor    eax,eax
c00170dc:	5b                   	pop    ebx
c00170dd:	5e                   	pop    esi
c00170de:	5f                   	pop    edi
c00170df:	5d                   	pop    ebp
c00170e0:	c3                   	ret    
c00170e1:	90                   	nop

c00170e2 <Video::putrect(int, int, int, int, unsigned int)>:
c00170e2:	55                   	push   ebp
c00170e3:	57                   	push   edi
c00170e4:	56                   	push   esi
c00170e5:	53                   	push   ebx
c00170e6:	83 ec 1c             	sub    esp,0x1c
c00170e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00170ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170f1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00170f5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00170f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00170fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017101:	01 df                	add    edi,ebx
c0017103:	39 fb                	cmp    ebx,edi
c0017105:	7d 1f                	jge    c0017126 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017107:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001710b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001710f:	7d 12                	jge    c0017123 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017111:	8b 16                	mov    edx,DWORD PTR [esi]
c0017113:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017117:	53                   	push   ebx
c0017118:	55                   	push   ebp
c0017119:	45                   	inc    ebp
c001711a:	56                   	push   esi
c001711b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	eb e8                	jmp    c001710b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017123:	43                   	inc    ebx
c0017124:	eb dd                	jmp    c0017103 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017126:	83 c4 1c             	add    esp,0x1c
c0017129:	5b                   	pop    ebx
c001712a:	5e                   	pop    esi
c001712b:	5f                   	pop    edi
c001712c:	5d                   	pop    ebp
c001712d:	c3                   	ret    

c001712e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001712e:	55                   	push   ebp
c001712f:	57                   	push   edi
c0017130:	31 ff                	xor    edi,edi
c0017132:	56                   	push   esi
c0017133:	53                   	push   ebx
c0017134:	83 ec 1c             	sub    esp,0x1c
c0017137:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001713b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001713f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017146:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001714b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001714f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017153:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017157:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001715a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001715e:	01 f9                	add    ecx,edi
c0017160:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017164:	7d 2f                	jge    c0017195 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017166:	31 f6                	xor    esi,esi
c0017168:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001716c:	01 f2                	add    edx,esi
c001716e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017172:	7d 1a                	jge    c001718e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017174:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017177:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001717a:	46                   	inc    esi
c001717b:	51                   	push   ecx
c001717c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017180:	52                   	push   edx
c0017181:	55                   	push   ebp
c0017182:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017185:	83 c4 10             	add    esp,0x10
c0017188:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001718c:	eb da                	jmp    c0017168 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001718e:	47                   	inc    edi
c001718f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017193:	eb c5                	jmp    c001715a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017195:	83 c4 1c             	add    esp,0x1c
c0017198:	5b                   	pop    ebx
c0017199:	5e                   	pop    esi
c001719a:	5f                   	pop    edi
c001719b:	5d                   	pop    ebp
c001719c:	c3                   	ret    
c001719d:	90                   	nop

c001719e <Video::blit(unsigned int*, int, int, int, int)>:
c001719e:	55                   	push   ebp
c001719f:	57                   	push   edi
c00171a0:	56                   	push   esi
c00171a1:	53                   	push   ebx
c00171a2:	83 ec 1c             	sub    esp,0x1c
c00171a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00171ad:	85 c0                	test   eax,eax
c00171af:	79 02                	jns    c00171b3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00171b1:	31 c0                	xor    eax,eax
c00171b3:	c1 e0 02             	shl    eax,0x2
c00171b6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171c2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00171c6:	39 d8                	cmp    eax,ebx
c00171c8:	7e 49                	jle    c0017213 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00171ca:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00171d0:	7c 41                	jl     c0017213 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00171d2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00171d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171da:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00171de:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00171e2:	39 f9                	cmp    ecx,edi
c00171e4:	7e 22                	jle    c0017208 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00171e6:	83 c5 04             	add    ebp,0x4
c00171e9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00171ef:	7c 14                	jl     c0017205 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00171f1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00171f3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00171f6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171fa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171fe:	56                   	push   esi
c00171ff:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017202:	83 c4 10             	add    esp,0x10
c0017205:	47                   	inc    edi
c0017206:	eb d2                	jmp    c00171da <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017208:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001720c:	43                   	inc    ebx
c001720d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017211:	eb ab                	jmp    c00171be <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017213:	83 c4 1c             	add    esp,0x1c
c0017216:	5b                   	pop    ebx
c0017217:	5e                   	pop    esi
c0017218:	5f                   	pop    edi
c0017219:	5d                   	pop    ebp
c001721a:	c3                   	ret    
c001721b:	90                   	nop

c001721c <Video::clearScreen(unsigned int)>:
c001721c:	57                   	push   edi
c001721d:	56                   	push   esi
c001721e:	53                   	push   ebx
c001721f:	31 db                	xor    ebx,ebx
c0017221:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017225:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001722b:	7e 1f                	jle    c001724c <Video::clearScreen(unsigned int)+0x30>
c001722d:	31 ff                	xor    edi,edi
c001722f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017235:	7e 12                	jle    c0017249 <Video::clearScreen(unsigned int)+0x2d>
c0017237:	8b 06                	mov    eax,DWORD PTR [esi]
c0017239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001723d:	53                   	push   ebx
c001723e:	57                   	push   edi
c001723f:	47                   	inc    edi
c0017240:	56                   	push   esi
c0017241:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017244:	83 c4 10             	add    esp,0x10
c0017247:	eb e6                	jmp    c001722f <Video::clearScreen(unsigned int)+0x13>
c0017249:	43                   	inc    ebx
c001724a:	eb d9                	jmp    c0017225 <Video::clearScreen(unsigned int)+0x9>
c001724c:	5b                   	pop    ebx
c001724d:	5e                   	pop    esi
c001724e:	5f                   	pop    edi
c001724f:	c3                   	ret    

c0017250 <Video::putpixel(int, int, unsigned int)>:
c0017250:	c7 44 24 04 80 bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bf80
c0017258:	e9 3c 34 00 00       	jmp    c001a699 <Krnl::panic(char const*)>
c001725d:	90                   	nop

c001725e <Video::Video(char const*)>:
c001725e:	83 ec 0c             	sub    esp,0xc
c0017261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017265:	83 ec 08             	sub    esp,0x8
c0017268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001726c:	50                   	push   eax
c001726d:	e8 f8 ce ff ff       	call   c001416a <Device::Device(char const*)>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	ba 04 c0 02 c0       	mov    edx,0xc002c004
c001727a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001727e:	89 10                	mov    DWORD PTR [eax],edx
c0017280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017284:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001728e:	90                   	nop
c001728f:	83 c4 0c             	add    esp,0xc
c0017292:	c3                   	ret    
c0017293:	90                   	nop

c0017294 <Video::~Video()>:
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	ba 04 c0 02 c0       	mov    edx,0xc002c004
c001729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172a0:	89 10                	mov    DWORD PTR [eax],edx
c00172a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00172a6:	83 ec 0c             	sub    esp,0xc
c00172a9:	50                   	push   eax
c00172aa:	e8 85 cb ff ff       	call   c0013e34 <Device::~Device()>
c00172af:	83 c4 10             	add    esp,0x10
c00172b2:	90                   	nop
c00172b3:	83 c4 0c             	add    esp,0xc
c00172b6:	c3                   	ret    
c00172b7:	90                   	nop

c00172b8 <Video::~Video()>:
c00172b8:	83 ec 0c             	sub    esp,0xc
c00172bb:	83 ec 0c             	sub    esp,0xc
c00172be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172c2:	e8 cd ff ff ff       	call   c0017294 <Video::~Video()>
c00172c7:	83 c4 10             	add    esp,0x10
c00172ca:	83 ec 08             	sub    esp,0x8
c00172cd:	68 64 01 00 00       	push   0x164
c00172d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172d6:	e8 72 b7 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	83 c4 0c             	add    esp,0xc
c00172e1:	c3                   	ret    

c00172e2 <Video::isMonochrome()>:
c00172e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172e6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00172ec:	c3                   	ret    
c00172ed:	90                   	nop

c00172ee <Video::getWidth()>:
c00172ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00172f8:	c3                   	ret    
c00172f9:	90                   	nop

c00172fa <Video::getHeight()>:
c00172fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017304:	c3                   	ret    
c0017305:	90                   	nop

c0017306 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017306:	55                   	push   ebp
c0017307:	57                   	push   edi
c0017308:	56                   	push   esi
c0017309:	53                   	push   ebx
c001730a:	83 ec 2c             	sub    esp,0x2c
c001730d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017311:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017315:	83 f8 01             	cmp    eax,0x1
c0017318:	19 c9                	sbb    ecx,ecx
c001731a:	31 db                	xor    ebx,ebx
c001731c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017320:	89 cd                	mov    ebp,ecx
c0017322:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001732a:	f7 d5                	not    ebp
c001732c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017332:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017336:	01 d8                	add    eax,ebx
c0017338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001733c:	56                   	push   esi
c001733d:	e8 b8 ff ff ff       	call   c00172fa <Video::getHeight()>
c0017342:	59                   	pop    ecx
c0017343:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017347:	7e 70                	jle    c00173b9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017349:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001734d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017351:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017354:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017358:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001735c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017363:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017367:	89 f8                	mov    eax,edi
c0017369:	83 c0 20             	add    eax,0x20
c001736c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017370:	56                   	push   esi
c0017371:	e8 78 ff ff ff       	call   c00172ee <Video::getWidth()>
c0017376:	5a                   	pop    edx
c0017377:	39 c7                	cmp    edi,eax
c0017379:	7d 34                	jge    c00173af <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001737b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017380:	74 05                	je     c0017387 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017382:	8b 06                	mov    eax,DWORD PTR [esi]
c0017384:	55                   	push   ebp
c0017385:	eb 0d                	jmp    c0017394 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017387:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001738c:	74 12                	je     c00173a0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001738e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017394:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017398:	57                   	push   edi
c0017399:	56                   	push   esi
c001739a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00173a4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00173a8:	47                   	inc    edi
c00173a9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00173ad:	75 c1                	jne    c0017370 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00173af:	43                   	inc    ebx
c00173b0:	83 fb 20             	cmp    ebx,0x20
c00173b3:	0f 85 79 ff ff ff    	jne    c0017332 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00173b9:	83 c4 2c             	add    esp,0x2c
c00173bc:	5b                   	pop    ebx
c00173bd:	5e                   	pop    esi
c00173be:	5f                   	pop    edi
c00173bf:	5d                   	pop    ebp
c00173c0:	c3                   	ret    
c00173c1:	90                   	nop

c00173c2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00173c2:	55                   	push   ebp
c00173c3:	57                   	push   edi
c00173c4:	56                   	push   esi
c00173c5:	53                   	push   ebx
c00173c6:	83 ec 28             	sub    esp,0x28
c00173c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00173cd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00173d1:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00173d5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00173d9:	c1 e7 08             	shl    edi,0x8
c00173dc:	01 c7                	add    edi,eax
c00173de:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00173e2:	c1 e0 08             	shl    eax,0x8
c00173e5:	01 d0                	add    eax,edx
c00173e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173ef:	0f af c7             	imul   eax,edi
c00173f2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00173f9:	50                   	push   eax
c00173fa:	e8 8d 84 ff ff       	call   c000f88c <malloc>
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	89 c5                	mov    ebp,eax
c0017404:	85 c0                	test   eax,eax
c0017406:	75 15                	jne    c001741d <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017408:	83 ec 0c             	sub    esp,0xc
c001740b:	68 a1 bf 02 c0       	push   0xc002bfa1
c0017410:	e8 18 b7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0017415:	83 c4 10             	add    esp,0x10
c0017418:	e9 1c 01 00 00       	jmp    c0017539 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001741d:	be 12 00 00 00       	mov    esi,0x12
c0017422:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017426:	74 11                	je     c0017439 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017428:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001742c:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017430:	c1 fe 03             	sar    esi,0x3
c0017433:	0f af f0             	imul   esi,eax
c0017436:	83 c6 12             	add    esi,0x12
c0017439:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001743d:	74 04                	je     c0017443 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001743f:	85 ff                	test   edi,edi
c0017441:	75 12                	jne    c0017455 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017443:	83 ec 0c             	sub    esp,0xc
c0017446:	68 b8 bf 02 c0       	push   0xc002bfb8
c001744b:	e8 dd b6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0017450:	e9 ce 00 00 00       	jmp    c0017523 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017455:	52                   	push   edx
c0017456:	52                   	push   edx
c0017457:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001745b:	50                   	push   eax
c001745c:	68 cd bf 02 c0       	push   0xc002bfcd
c0017461:	e8 c7 b6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0017466:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001746a:	83 c4 10             	add    esp,0x10
c001746d:	80 fa 02             	cmp    dl,0x2
c0017470:	0f 85 98 00 00 00    	jne    c001750e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017476:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001747b:	75 10                	jne    c001748d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001747d:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017481:	75 0a                	jne    c001748d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017483:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017486:	83 e8 18             	sub    eax,0x18
c0017489:	a8 f7                	test   al,0xf7
c001748b:	74 0a                	je     c0017497 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001748d:	83 ec 0c             	sub    esp,0xc
c0017490:	68 da bf 02 c0       	push   0xc002bfda
c0017495:	eb 7f                	jmp    c0017516 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017497:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001749f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00174a7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00174ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00174b3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00174b7:	75 0c                	jne    c00174c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00174b9:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00174be:	c1 e0 18             	shl    eax,0x18
c00174c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174c5:	41                   	inc    ecx
c00174c6:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00174cb:	c1 e2 10             	shl    edx,0x10
c00174ce:	89 d0                	mov    eax,edx
c00174d0:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00174d5:	c1 e2 08             	shl    edx,0x8
c00174d8:	09 c2                	or     edx,eax
c00174da:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00174de:	09 c2                	or     edx,eax
c00174e0:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00174e4:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00174e8:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00174ec:	c1 f8 03             	sar    eax,0x3
c00174ef:	01 c6                	add    esi,eax
c00174f1:	89 c8                	mov    eax,ecx
c00174f3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00174f7:	39 c7                	cmp    edi,eax
c00174f9:	7f b0                	jg     c00174ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00174fb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00174ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017503:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017506:	7e 22                	jle    c001752a <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017508:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001750c:	eb 99                	jmp    c00174a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001750e:	50                   	push   eax
c001750f:	50                   	push   eax
c0017510:	52                   	push   edx
c0017511:	68 e8 bf 02 c0       	push   0xc002bfe8
c0017516:	e8 12 b6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001751b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001751e:	e8 79 83 ff ff       	call   c000f89c <free>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	31 ed                	xor    ebp,ebp
c0017528:	eb 0f                	jmp    c0017539 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001752a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001752e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017531:	89 38                	mov    DWORD PTR [eax],edi
c0017533:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017537:	89 08                	mov    DWORD PTR [eax],ecx
c0017539:	83 c4 1c             	add    esp,0x1c
c001753c:	89 e8                	mov    eax,ebp
c001753e:	5b                   	pop    ebx
c001753f:	5e                   	pop    esi
c0017540:	5f                   	pop    edi
c0017541:	5d                   	pop    ebp
c0017542:	c3                   	ret    
c0017543:	90                   	nop

c0017544 <Video::putTGA(int, int, unsigned char*, int)>:
c0017544:	55                   	push   ebp
c0017545:	57                   	push   edi
c0017546:	56                   	push   esi
c0017547:	53                   	push   ebx
c0017548:	83 ec 28             	sub    esp,0x28
c001754b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001754f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017553:	50                   	push   eax
c0017554:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017558:	50                   	push   eax
c0017559:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001755d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017561:	56                   	push   esi
c0017562:	e8 5b fe ff ff       	call   c00173c2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017567:	83 c4 20             	add    esp,0x20
c001756a:	85 c0                	test   eax,eax
c001756c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017570:	74 35                	je     c00175a7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017572:	89 c7                	mov    edi,eax
c0017574:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017578:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001757c:	39 d8                	cmp    eax,ebx
c001757e:	7e 27                	jle    c00175a7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017580:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017584:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017588:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001758c:	39 e8                	cmp    eax,ebp
c001758e:	7e 14                	jle    c00175a4 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017590:	8b 06                	mov    eax,DWORD PTR [esi]
c0017592:	83 c7 04             	add    edi,0x4
c0017595:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017598:	53                   	push   ebx
c0017599:	55                   	push   ebp
c001759a:	45                   	inc    ebp
c001759b:	56                   	push   esi
c001759c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	eb e0                	jmp    c0017584 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00175a4:	43                   	inc    ebx
c00175a5:	eb cd                	jmp    c0017574 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00175a7:	83 c4 1c             	add    esp,0x1c
c00175aa:	5b                   	pop    ebx
c00175ab:	5e                   	pop    esi
c00175ac:	5f                   	pop    edi
c00175ad:	5d                   	pop    ebp
c00175ae:	c3                   	ret    
c00175af:	90                   	nop

c00175b0 <ACPI::close(int, int, void*)>:
c00175b0:	83 ec 1c             	sub    esp,0x1c
c00175b3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00175bb:	74 0a                	je     c00175c7 <ACPI::close(int, int, void*)+0x17>
c00175bd:	b8 00 00 00 00       	mov    eax,0x0
c00175c2:	e9 9a 00 00 00       	jmp    c0017661 <ACPI::close(int, int, void*)+0xb1>
c00175c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00175cc:	75 37                	jne    c0017605 <ACPI::close(int, int, void*)+0x55>
c00175ce:	83 ec 0c             	sub    esp,0xc
c00175d1:	68 44 c0 02 c0       	push   0xc002c044
c00175d6:	e8 52 b5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00175db:	83 c4 10             	add    esp,0x10
c00175de:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c00175e3:	85 c0                	test   eax,eax
c00175e5:	74 07                	je     c00175ee <ACPI::close(int, int, void*)+0x3e>
c00175e7:	a1 48 18 03 c0       	mov    eax,ds:0xc0031848
c00175ec:	ff d0                	call   eax
c00175ee:	83 ec 0c             	sub    esp,0xc
c00175f1:	68 d4 c1 02 c0       	push   0xc002c1d4
c00175f6:	e8 9e 30 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017603:	eb 5c                	jmp    c0017661 <ACPI::close(int, int, void*)+0xb1>
c0017605:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001760a:	75 50                	jne    c001765c <ACPI::close(int, int, void*)+0xac>
c001760c:	a1 44 18 03 c0       	mov    eax,ds:0xc0031844
c0017611:	85 c0                	test   eax,eax
c0017613:	74 07                	je     c001761c <ACPI::close(int, int, void*)+0x6c>
c0017615:	a1 44 18 03 c0       	mov    eax,ds:0xc0031844
c001761a:	ff d0                	call   eax
c001761c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017621:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017626:	83 e0 02             	and    eax,0x2
c0017629:	74 1c                	je     c0017647 <ACPI::close(int, int, void*)+0x97>
c001762b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017636:	89 c2                	mov    edx,eax
c0017638:	ec                   	in     al,dx
c0017639:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001763d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017641:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017645:	eb da                	jmp    c0017621 <ACPI::close(int, int, void*)+0x71>
c0017647:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001764e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017653:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017657:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001765b:	ee                   	out    dx,al
c001765c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017661:	83 c4 1c             	add    esp,0x1c
c0017664:	c3                   	ret    

c0017665 <findRSDP()>:
c0017665:	83 ec 1c             	sub    esp,0x1c
c0017668:	83 ec 0c             	sub    esp,0xc
c001766b:	68 51 c0 02 c0       	push   0xc002c051
c0017670:	e8 b8 b4 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001767d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017683:	83 e0 04             	and    eax,0x4
c0017686:	84 c0                	test   al,al
c0017688:	75 07                	jne    c0017691 <findRSDP()+0x2c>
c001768a:	b8 00 00 00 00       	mov    eax,0x0
c001768f:	eb 6a                	jmp    c00176fb <findRSDP()+0x96>
c0017691:	a1 d4 f1 02 c0       	mov    eax,ds:0xc002f1d4
c0017696:	3d ff 07 00 00       	cmp    eax,0x7ff
c001769b:	7f 1b                	jg     c00176b8 <findRSDP()+0x53>
c001769d:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00176a2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176a8:	83 e2 fb             	and    edx,0xfffffffb
c00176ab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176b1:	b8 00 00 00 00       	mov    eax,0x0
c00176b6:	eb 43                	jmp    c00176fb <findRSDP()+0x96>
c00176b8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00176c0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00176c8:	77 2c                	ja     c00176f6 <findRSDP()+0x91>
c00176ca:	83 ec 04             	sub    esp,0x4
c00176cd:	6a 08                	push   0x8
c00176cf:	68 5f c0 02 c0       	push   0xc002c05f
c00176d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176d8:	e8 6f 8f fe ff       	call   c000064c <memcmp>
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	85 c0                	test   eax,eax
c00176e2:	0f 94 c0             	sete   al
c00176e5:	84 c0                	test   al,al
c00176e7:	74 06                	je     c00176ef <findRSDP()+0x8a>
c00176e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ed:	eb 0c                	jmp    c00176fb <findRSDP()+0x96>
c00176ef:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00176f4:	eb ca                	jmp    c00176c0 <findRSDP()+0x5b>
c00176f6:	b8 00 00 00 00       	mov    eax,0x0
c00176fb:	83 c4 1c             	add    esp,0x1c
c00176fe:	c3                   	ret    

c00176ff <loadACPITables(unsigned char*)>:
c00176ff:	57                   	push   edi
c0017700:	56                   	push   esi
c0017701:	53                   	push   ebx
c0017702:	83 ec 60             	sub    esp,0x60
c0017705:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001770a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017710:	83 e0 04             	and    eax,0x4
c0017713:	84 c0                	test   al,al
c0017715:	0f 84 33 02 00 00    	je     c001794e <loadACPITables(unsigned char*)+0x24f>
c001771b:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c0017720:	84 c0                	test   al,al
c0017722:	74 75                	je     c0017799 <loadACPITables(unsigned char*)+0x9a>
c0017724:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017728:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001772c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017733:	83 e8 24             	sub    eax,0x24
c0017736:	c1 e8 03             	shr    eax,0x3
c0017739:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001773d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017745:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017749:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001774d:	0f 8d b2 00 00 00    	jge    c0017805 <loadACPITables(unsigned char*)+0x106>
c0017753:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017757:	83 c0 24             	add    eax,0x24
c001775a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001775e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017762:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017766:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001776a:	c1 e0 03             	shl    eax,0x3
c001776d:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017771:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017775:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017778:	8b 00                	mov    eax,DWORD PTR [eax]
c001777a:	89 c1                	mov    ecx,eax
c001777c:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c0017781:	8d 50 01             	lea    edx,[eax+0x1]
c0017784:	89 15 4c 18 03 c0    	mov    DWORD PTR ds:0xc003184c,edx
c001778a:	89 ca                	mov    edx,ecx
c001778c:	89 14 c5 64 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce79c],edx
c0017793:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017797:	eb ac                	jmp    c0017745 <loadACPITables(unsigned char*)+0x46>
c0017799:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001779d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177a8:	83 e8 24             	sub    eax,0x24
c00177ab:	c1 e8 02             	shr    eax,0x2
c00177ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00177b2:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00177ba:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00177be:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00177c2:	7d 41                	jge    c0017805 <loadACPITables(unsigned char*)+0x106>
c00177c4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00177c8:	83 c0 24             	add    eax,0x24
c00177cb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00177cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00177db:	c1 e0 02             	shl    eax,0x2
c00177de:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00177e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00177e8:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c00177ed:	8d 50 01             	lea    edx,[eax+0x1]
c00177f0:	89 15 4c 18 03 c0    	mov    DWORD PTR ds:0xc003184c,edx
c00177f6:	89 ca                	mov    edx,ecx
c00177f8:	89 14 c5 64 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce79c],edx
c00177ff:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017803:	eb b5                	jmp    c00177ba <loadACPITables(unsigned char*)+0xbb>
c0017805:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001780d:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c0017812:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017816:	0f 8d 33 01 00 00    	jge    c001794f <loadACPITables(unsigned char*)+0x250>
c001781c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017820:	8b 04 c5 64 18 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce79c]
c0017827:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001782b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001782f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017837:	25 ff 0f 00 00       	and    eax,0xfff
c001783c:	89 c6                	mov    esi,eax
c001783e:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	6a 01                	push   0x1
c0017849:	e8 d9 9e ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017855:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001785b:	83 ec 0c             	sub    esp,0xc
c001785e:	6a 01                	push   0x1
c0017860:	6a 01                	push   0x1
c0017862:	50                   	push   eax
c0017863:	52                   	push   edx
c0017864:	53                   	push   ebx
c0017865:	e8 ea a9 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001786a:	83 c4 20             	add    esp,0x20
c001786d:	09 f0                	or     eax,esi
c001786f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017873:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017877:	c1 e0 03             	shl    eax,0x3
c001787a:	05 60 18 03 c0       	add    eax,0xc0031860
c001787f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017883:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017887:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001788b:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017897:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001789b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00178a7:	89 c6                	mov    esi,eax
c00178a9:	89 d7                	mov    edi,edx
c00178ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178ad:	89 c8                	mov    eax,ecx
c00178af:	89 fa                	mov    edx,edi
c00178b1:	89 f3                	mov    ebx,esi
c00178b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00178b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00178bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00178ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ce:	05 00 10 00 00       	add    eax,0x1000
c00178d3:	c1 e8 0c             	shr    eax,0xc
c00178d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178e6:	25 ff 0f 00 00       	and    eax,0xfff
c00178eb:	89 c6                	mov    esi,eax
c00178ed:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c00178f3:	83 ec 0c             	sub    esp,0xc
c00178f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00178fa:	e8 28 9e ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017906:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001790c:	83 ec 0c             	sub    esp,0xc
c001790f:	6a 01                	push   0x1
c0017911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017915:	50                   	push   eax
c0017916:	52                   	push   edx
c0017917:	53                   	push   ebx
c0017918:	e8 37 a9 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001791d:	83 c4 20             	add    esp,0x20
c0017920:	09 f0                	or     eax,esi
c0017922:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792a:	83 ec 0c             	sub    esp,0xc
c001792d:	50                   	push   eax
c001792e:	e8 b4 a2 ff ff       	call   c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001793a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001793e:	89 14 c5 64 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce79c],edx
c0017945:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017949:	e9 bf fe ff ff       	jmp    c001780d <loadACPITables(unsigned char*)+0x10e>
c001794e:	90                   	nop
c001794f:	83 c4 60             	add    esp,0x60
c0017952:	5b                   	pop    ebx
c0017953:	5e                   	pop    esi
c0017954:	5f                   	pop    edi
c0017955:	c3                   	ret    

c0017956 <findRSDT(unsigned char*)>:
c0017956:	57                   	push   edi
c0017957:	56                   	push   esi
c0017958:	53                   	push   ebx
c0017959:	83 ec 50             	sub    esp,0x50
c001795c:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017961:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017967:	83 e0 04             	and    eax,0x4
c001796a:	84 c0                	test   al,al
c001796c:	75 0a                	jne    c0017978 <findRSDT(unsigned char*)+0x22>
c001796e:	b8 00 00 00 00       	mov    eax,0x0
c0017973:	e9 21 01 00 00       	jmp    c0017a99 <findRSDT(unsigned char*)+0x143>
c0017978:	89 e0                	mov    eax,esp
c001797a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001797e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017982:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017986:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001798e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017992:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017996:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001799a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001799e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00179a2:	89 c6                	mov    esi,eax
c00179a4:	89 d7                	mov    edi,edx
c00179a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00179a8:	89 c8                	mov    eax,ecx
c00179aa:	89 fa                	mov    edx,edi
c00179ac:	89 f3                	mov    ebx,esi
c00179ae:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00179b2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179ba:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00179be:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00179c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00179ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00179d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00179d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00179de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00179e2:	25 ff 0f 00 00       	and    eax,0xfff
c00179e7:	89 c6                	mov    esi,eax
c00179e9:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c00179ef:	83 ec 0c             	sub    esp,0xc
c00179f2:	6a 02                	push   0x2
c00179f4:	e8 2e 9d ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017a00:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a06:	83 ec 0c             	sub    esp,0xc
c0017a09:	6a 01                	push   0x1
c0017a0b:	6a 02                	push   0x2
c0017a0d:	50                   	push   eax
c0017a0e:	52                   	push   edx
c0017a0f:	53                   	push   ebx
c0017a10:	e8 3f a8 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a15:	83 c4 20             	add    esp,0x20
c0017a18:	09 f0                	or     eax,esi
c0017a1a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a22:	25 ff 0f 00 00       	and    eax,0xfff
c0017a27:	89 c6                	mov    esi,eax
c0017a29:	8b 1d 10 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f310
c0017a2f:	83 ec 0c             	sub    esp,0xc
c0017a32:	6a 02                	push   0x2
c0017a34:	e8 ee 9c ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0017a39:	83 c4 10             	add    esp,0x10
c0017a3c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a40:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a46:	83 ec 0c             	sub    esp,0xc
c0017a49:	6a 01                	push   0x1
c0017a4b:	6a 02                	push   0x2
c0017a4d:	50                   	push   eax
c0017a4e:	52                   	push   edx
c0017a4f:	53                   	push   ebx
c0017a50:	e8 ff a7 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a55:	83 c4 20             	add    esp,0x20
c0017a58:	09 f0                	or     eax,esi
c0017a5a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017a5e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017a63:	75 11                	jne    c0017a76 <findRSDT(unsigned char*)+0x120>
c0017a65:	c6 05 60 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a60,0x0
c0017a6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a74:	eb 1f                	jmp    c0017a95 <findRSDT(unsigned char*)+0x13f>
c0017a76:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017a7b:	75 11                	jne    c0017a8e <findRSDT(unsigned char*)+0x138>
c0017a7d:	c6 05 60 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a60,0x1
c0017a84:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a8c:	eb 07                	jmp    c0017a95 <findRSDT(unsigned char*)+0x13f>
c0017a8e:	b8 00 00 00 00       	mov    eax,0x0
c0017a93:	eb 04                	jmp    c0017a99 <findRSDT(unsigned char*)+0x143>
c0017a95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a99:	83 c4 50             	add    esp,0x50
c0017a9c:	5b                   	pop    ebx
c0017a9d:	5e                   	pop    esi
c0017a9e:	5f                   	pop    edi
c0017a9f:	c3                   	ret    

c0017aa0 <findDataTable(unsigned char*, char*)>:
c0017aa0:	83 ec 1c             	sub    esp,0x1c
c0017aa3:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017aa8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aae:	83 e0 04             	and    eax,0x4
c0017ab1:	84 c0                	test   al,al
c0017ab3:	75 07                	jne    c0017abc <findDataTable(unsigned char*, char*)+0x1c>
c0017ab5:	b8 00 00 00 00       	mov    eax,0x0
c0017aba:	eb 7c                	jmp    c0017b38 <findDataTable(unsigned char*, char*)+0x98>
c0017abc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ac4:	a1 4c 18 03 c0       	mov    eax,ds:0xc003184c
c0017ac9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017acd:	7d 3a                	jge    c0017b09 <findDataTable(unsigned char*, char*)+0x69>
c0017acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ad3:	c1 e0 03             	shl    eax,0x3
c0017ad6:	05 60 18 03 c0       	add    eax,0xc0031860
c0017adb:	83 ec 04             	sub    esp,0x4
c0017ade:	6a 04                	push   0x4
c0017ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ae4:	50                   	push   eax
c0017ae5:	e8 62 8b fe ff       	call   c000064c <memcmp>
c0017aea:	83 c4 10             	add    esp,0x10
c0017aed:	85 c0                	test   eax,eax
c0017aef:	0f 94 c0             	sete   al
c0017af2:	84 c0                	test   al,al
c0017af4:	74 0d                	je     c0017b03 <findDataTable(unsigned char*, char*)+0x63>
c0017af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017afa:	8b 04 c5 64 18 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce79c]
c0017b01:	eb 35                	jmp    c0017b38 <findDataTable(unsigned char*, char*)+0x98>
c0017b03:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017b07:	eb bb                	jmp    c0017ac4 <findDataTable(unsigned char*, char*)+0x24>
c0017b09:	a0 60 1a 03 c0       	mov    al,ds:0xc0031a60
c0017b0e:	84 c0                	test   al,al
c0017b10:	74 07                	je     c0017b19 <findDataTable(unsigned char*, char*)+0x79>
c0017b12:	b8 58 00 00 00       	mov    eax,0x58
c0017b17:	eb 05                	jmp    c0017b1e <findDataTable(unsigned char*, char*)+0x7e>
c0017b19:	b8 52 00 00 00       	mov    eax,0x52
c0017b1e:	83 ec 04             	sub    esp,0x4
c0017b21:	50                   	push   eax
c0017b22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b26:	68 f8 c1 02 c0       	push   0xc002c1f8
c0017b2b:	e8 fd af ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0017b30:	83 c4 10             	add    esp,0x10
c0017b33:	b8 00 00 00 00       	mov    eax,0x0
c0017b38:	83 c4 1c             	add    esp,0x1c
c0017b3b:	c3                   	ret    

c0017b3c <scanMADT()>:
c0017b3c:	53                   	push   ebx
c0017b3d:	83 ec 38             	sub    esp,0x38
c0017b40:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017b45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b4b:	83 e0 04             	and    eax,0x4
c0017b4e:	84 c0                	test   al,al
c0017b50:	0f 84 63 04 00 00    	je     c0017fb9 <scanMADT()+0x47d>
c0017b56:	e8 0a fb ff ff       	call   c0017665 <findRSDP()>
c0017b5b:	a3 6c 1a 03 c0       	mov    ds:0xc0031a6c,eax
c0017b60:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c0017b65:	85 c0                	test   eax,eax
c0017b67:	75 19                	jne    c0017b82 <scanMADT()+0x46>
c0017b69:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017b6e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017b74:	83 e2 fb             	and    edx,0xfffffffb
c0017b77:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017b7d:	e9 3b 04 00 00       	jmp    c0017fbd <scanMADT()+0x481>
c0017b82:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c0017b87:	83 ec 0c             	sub    esp,0xc
c0017b8a:	50                   	push   eax
c0017b8b:	e8 c6 fd ff ff       	call   c0017956 <findRSDT(unsigned char*)>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	a3 68 1a 03 c0       	mov    ds:0xc0031a68,eax
c0017b98:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c0017b9d:	85 c0                	test   eax,eax
c0017b9f:	75 19                	jne    c0017bba <scanMADT()+0x7e>
c0017ba1:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017ba6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bac:	83 e2 fb             	and    edx,0xfffffffb
c0017baf:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bb5:	e9 03 04 00 00       	jmp    c0017fbd <scanMADT()+0x481>
c0017bba:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c0017bbf:	83 ec 0c             	sub    esp,0xc
c0017bc2:	50                   	push   eax
c0017bc3:	e8 37 fb ff ff       	call   c00176ff <loadACPITables(unsigned char*)>
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c0017bd0:	83 ec 08             	sub    esp,0x8
c0017bd3:	68 68 c0 02 c0       	push   0xc002c068
c0017bd8:	50                   	push   eax
c0017bd9:	e8 c2 fe ff ff       	call   c0017aa0 <findDataTable(unsigned char*, char*)>
c0017bde:	83 c4 10             	add    esp,0x10
c0017be1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017be5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017bea:	75 19                	jne    c0017c05 <scanMADT()+0xc9>
c0017bec:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0017bf1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bf7:	83 e2 fe             	and    edx,0xfffffffe
c0017bfa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c00:	e9 b8 03 00 00       	jmp    c0017fbd <scanMADT()+0x481>
c0017c05:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017c0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c14:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017c18:	0f 87 9f 03 00 00    	ja     c0017fbd <scanMADT()+0x481>
c0017c1e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017c26:	0f 87 91 03 00 00    	ja     c0017fbd <scanMADT()+0x481>
c0017c2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c38:	8d 50 01             	lea    edx,[eax+0x1]
c0017c3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c43:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c47:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c4f:	8d 50 01             	lea    edx,[eax+0x1]
c0017c52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c5e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c62:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017c67:	0f 86 4f 03 00 00    	jbe    c0017fbc <scanMADT()+0x480>
c0017c6d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017c72:	75 57                	jne    c0017ccb <scanMADT()+0x18f>
c0017c74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c78:	8d 50 01             	lea    edx,[eax+0x1]
c0017c7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c7f:	8a 15 60 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c60
c0017c85:	0f b6 d2             	movzx  edx,dl
c0017c88:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017c8c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017c90:	88 82 a0 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce360],al
c0017c96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ca1:	8a 15 60 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c60
c0017ca7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017caa:	88 0d 60 1c 03 c0    	mov    BYTE PTR ds:0xc0031c60,cl
c0017cb0:	0f b6 d2             	movzx  edx,dl
c0017cb3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017cb7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017cbb:	88 82 80 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce380],al
c0017cc1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017cc6:	e9 da 02 00 00       	jmp    c0017fa5 <scanMADT()+0x469>
c0017ccb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017cd0:	0f 85 14 01 00 00    	jne    c0017dea <scanMADT()+0x2ae>
c0017cd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cda:	8d 50 01             	lea    edx,[eax+0x1]
c0017cdd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ce1:	8a 15 20 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b20
c0017ce7:	0f b6 d2             	movzx  edx,dl
c0017cea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017cee:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017cf2:	88 82 40 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4c0],al
c0017cf8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017cfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d04:	01 d0                	add    eax,edx
c0017d06:	83 c0 2c             	add    eax,0x2c
c0017d09:	8a 00                	mov    al,BYTE PTR [eax]
c0017d0b:	0f b6 d0             	movzx  edx,al
c0017d0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d12:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d19:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d1d:	0f b6 c0             	movzx  eax,al
c0017d20:	c1 e0 08             	shl    eax,0x8
c0017d23:	89 d1                	mov    ecx,edx
c0017d25:	09 c1                	or     ecx,eax
c0017d27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d2b:	8d 50 02             	lea    edx,[eax+0x2]
c0017d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d32:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d36:	0f b6 c0             	movzx  eax,al
c0017d39:	c1 e0 10             	shl    eax,0x10
c0017d3c:	09 c1                	or     ecx,eax
c0017d3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d42:	8d 50 03             	lea    edx,[eax+0x3]
c0017d45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d49:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d4d:	0f b6 c0             	movzx  eax,al
c0017d50:	c1 e0 18             	shl    eax,0x18
c0017d53:	09 c1                	or     ecx,eax
c0017d55:	89 ca                	mov    edx,ecx
c0017d57:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c0017d5c:	0f b6 c0             	movzx  eax,al
c0017d5f:	89 14 85 60 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4a0],edx
c0017d66:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d73:	01 d0                	add    eax,edx
c0017d75:	83 c0 2c             	add    eax,0x2c
c0017d78:	8a 00                	mov    al,BYTE PTR [eax]
c0017d7a:	0f b6 d0             	movzx  edx,al
c0017d7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d81:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d88:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d8c:	0f b6 c0             	movzx  eax,al
c0017d8f:	c1 e0 08             	shl    eax,0x8
c0017d92:	89 d1                	mov    ecx,edx
c0017d94:	09 c1                	or     ecx,eax
c0017d96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d9a:	8d 50 02             	lea    edx,[eax+0x2]
c0017d9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017da1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017da5:	0f b6 c0             	movzx  eax,al
c0017da8:	c1 e0 10             	shl    eax,0x10
c0017dab:	09 c1                	or     ecx,eax
c0017dad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db1:	8d 50 03             	lea    edx,[eax+0x3]
c0017db4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dbc:	0f b6 c0             	movzx  eax,al
c0017dbf:	c1 e0 18             	shl    eax,0x18
c0017dc2:	09 c1                	or     ecx,eax
c0017dc4:	89 ca                	mov    edx,ecx
c0017dc6:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c0017dcb:	0f b6 c0             	movzx  eax,al
c0017dce:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c0017dd5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017dda:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c0017ddf:	40                   	inc    eax
c0017de0:	a2 20 1b 03 c0       	mov    ds:0xc0031b20,al
c0017de5:	e9 bb 01 00 00       	jmp    c0017fa5 <scanMADT()+0x469>
c0017dea:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017def:	0f 85 e9 00 00 00    	jne    c0017ede <scanMADT()+0x3a2>
c0017df5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df9:	8d 50 01             	lea    edx,[eax+0x1]
c0017dfc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e04:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e08:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017e0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e10:	8d 50 01             	lea    edx,[eax+0x1]
c0017e13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e17:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e1b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e1f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017e23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2b:	01 d0                	add    eax,edx
c0017e2d:	83 c0 2c             	add    eax,0x2c
c0017e30:	8a 00                	mov    al,BYTE PTR [eax]
c0017e32:	0f b6 d0             	movzx  edx,al
c0017e35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e39:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e40:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e44:	0f b6 c0             	movzx  eax,al
c0017e47:	c1 e0 08             	shl    eax,0x8
c0017e4a:	89 d1                	mov    ecx,edx
c0017e4c:	09 c1                	or     ecx,eax
c0017e4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e52:	8d 50 02             	lea    edx,[eax+0x2]
c0017e55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e5d:	0f b6 c0             	movzx  eax,al
c0017e60:	c1 e0 10             	shl    eax,0x10
c0017e63:	09 c1                	or     ecx,eax
c0017e65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e69:	8d 50 03             	lea    edx,[eax+0x3]
c0017e6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e70:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e74:	0f b6 c0             	movzx  eax,al
c0017e77:	c1 e0 18             	shl    eax,0x18
c0017e7a:	09 c8                	or     eax,ecx
c0017e7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e80:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e8d:	01 d0                	add    eax,edx
c0017e8f:	83 c0 2c             	add    eax,0x2c
c0017e92:	8a 00                	mov    al,BYTE PTR [eax]
c0017e94:	0f b6 c0             	movzx  eax,al
c0017e97:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017e9b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017e9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017ea6:	0f b6 d2             	movzx  edx,dl
c0017ea9:	c1 e2 08             	shl    edx,0x8
c0017eac:	09 d0                	or     eax,edx
c0017eae:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017eb3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017eb8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017ebd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ec1:	88 90 e0 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1c20],dl
c0017ec7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ecc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017ed1:	66 89 84 12 00 1b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce500],ax
c0017ed9:	e9 c7 00 00 00       	jmp    c0017fa5 <scanMADT()+0x469>
c0017ede:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017ee3:	0f 85 b0 00 00 00    	jne    c0017f99 <scanMADT()+0x45d>
c0017ee9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eed:	8d 50 01             	lea    edx,[eax+0x1]
c0017ef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ef8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017efc:	0f b6 c0             	movzx  eax,al
c0017eff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0b:	01 d0                	add    eax,edx
c0017f0d:	83 c0 2c             	add    eax,0x2c
c0017f10:	8a 00                	mov    al,BYTE PTR [eax]
c0017f12:	0f b6 d0             	movzx  edx,al
c0017f15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f19:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f20:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f24:	0f b6 c0             	movzx  eax,al
c0017f27:	c1 e0 08             	shl    eax,0x8
c0017f2a:	09 d0                	or     eax,edx
c0017f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f30:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f39:	8d 50 01             	lea    edx,[eax+0x1]
c0017f3c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f44:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f48:	0f b6 c0             	movzx  eax,al
c0017f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f53:	c1 e0 08             	shl    eax,0x8
c0017f56:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017f5a:	89 c1                	mov    ecx,eax
c0017f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f60:	c1 e0 18             	shl    eax,0x18
c0017f63:	89 c3                	mov    ebx,eax
c0017f65:	a1 70 1a 03 c0       	mov    eax,ds:0xc0031a70
c0017f6a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f6d:	89 15 70 1a 03 c0    	mov    DWORD PTR ds:0xc0031a70,edx
c0017f73:	09 d9                	or     ecx,ebx
c0017f75:	89 ca                	mov    edx,ecx
c0017f77:	89 14 85 80 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce580],edx
c0017f7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f8a:	68 28 c2 02 c0       	push   0xc002c228
c0017f8f:	e8 99 ab ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	eb 0c                	jmp    c0017fa5 <scanMADT()+0x469>
c0017f99:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017f9e:	75 05                	jne    c0017fa5 <scanMADT()+0x469>
c0017fa0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017fa5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017faa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fae:	01 d0                	add    eax,edx
c0017fb0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017fb4:	e9 54 fc ff ff       	jmp    c0017c0d <scanMADT()+0xd1>
c0017fb9:	90                   	nop
c0017fba:	eb 01                	jmp    c0017fbd <scanMADT()+0x481>
c0017fbc:	90                   	nop
c0017fbd:	83 c4 38             	add    esp,0x38
c0017fc0:	5b                   	pop    ebx
c0017fc1:	c3                   	ret    

c0017fc2 <ACPI::ACPI()>:
c0017fc2:	83 ec 0c             	sub    esp,0xc
c0017fc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc9:	83 ec 08             	sub    esp,0x8
c0017fcc:	68 6d c0 02 c0       	push   0xc002c06d
c0017fd1:	50                   	push   eax
c0017fd2:	e8 93 c1 ff ff       	call   c001416a <Device::Device(char const*)>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	ba c4 c2 02 c0       	mov    edx,0xc002c2c4
c0017fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe3:	89 10                	mov    DWORD PTR [eax],edx
c0017fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fe9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff4:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018002:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001800c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018010:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001801b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018022:	e8 15 fb ff ff       	call   c0017b3c <scanMADT()>
c0018027:	90                   	nop
c0018028:	83 c4 0c             	add    esp,0xc
c001802b:	c3                   	ret    

c001802c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001802c:	83 ec 2c             	sub    esp,0x2c
c001802f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018033:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018037:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001803b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001803f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018044:	88 d0                	mov    al,dl
c0018046:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001804a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001804f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018057:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001805b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018061:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018065:	0f 8d 97 00 00 00    	jge    c0018102 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001806b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001806f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018073:	83 c2 2a             	add    edx,0x2a
c0018076:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001807a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001807f:	75 78                	jne    c00180f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018081:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018085:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018089:	83 c2 2a             	add    edx,0x2a
c001808c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018090:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018094:	75 63                	jne    c00180f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018096:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001809b:	74 3a                	je     c00180d7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001809d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180a5:	83 c2 2a             	add    edx,0x2a
c00180a8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00180ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00180b3:	39 c2                	cmp    edx,eax
c00180b5:	74 10                	je     c00180c7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00180b7:	83 ec 0c             	sub    esp,0xc
c00180ba:	68 64 c2 02 c0       	push   0xc002c264
c00180bf:	e8 d5 25 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	83 ec 0c             	sub    esp,0xc
c00180ca:	68 72 c0 02 c0       	push   0xc002c072
c00180cf:	e8 c5 25 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00180d4:	83 c4 10             	add    esp,0x10
c00180d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00180db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180e3:	83 c2 2a             	add    edx,0x2a
c00180e6:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00180ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00180ec:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00180ef:	89 01                	mov    DWORD PTR [ecx],eax
c00180f1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00180f4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00180f9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00180fd:	e9 55 ff ff ff       	jmp    c0018057 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018102:	90                   	nop
c0018103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018107:	83 c4 2c             	add    esp,0x2c
c001810a:	c2 04 00             	ret    0x4
c001810d:	90                   	nop

c001810e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001810e:	83 ec 1c             	sub    esp,0x1c
c0018111:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018115:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018119:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001811d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018122:	88 c8                	mov    al,cl
c0018124:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018128:	88 d0                	mov    al,dl
c001812a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001812e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018132:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001813c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001813f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018143:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018151:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018155:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001815c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018165:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001816b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001816f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018176:	83 c2 2a             	add    edx,0x2a
c0018179:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001817d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018181:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001818b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001818e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018192:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001819a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181a0:	8d 50 01             	lea    edx,[eax+0x1]
c00181a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181a7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00181ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181b7:	3d 00 02 00 00       	cmp    eax,0x200
c00181bc:	75 10                	jne    c00181ce <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00181be:	83 ec 0c             	sub    esp,0xc
c00181c1:	68 81 c0 02 c0       	push   0xc002c081
c00181c6:	e8 ce 24 00 00       	call   c001a699 <Krnl::panic(char const*)>
c00181cb:	83 c4 10             	add    esp,0x10
c00181ce:	90                   	nop
c00181cf:	83 c4 1c             	add    esp,0x1c
c00181d2:	c3                   	ret    
c00181d3:	90                   	nop

c00181d4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00181d4:	b8 00 00 00 00       	mov    eax,0x0
c00181d9:	c3                   	ret    

c00181da <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00181da:	83 ec 1c             	sub    esp,0x1c
c00181dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181e1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00181e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181e8:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00181ed:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181f2:	83 ec 08             	sub    esp,0x8
c00181f5:	52                   	push   edx
c00181f6:	50                   	push   eax
c00181f7:	e8 a6 6c ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c00181fc:	83 c4 10             	add    esp,0x10
c00181ff:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018203:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0018208:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001820d:	83 ec 04             	sub    esp,0x4
c0018210:	6a 01                	push   0x1
c0018212:	52                   	push   edx
c0018213:	50                   	push   eax
c0018214:	e8 9f 6d ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018219:	83 c4 10             	add    esp,0x10
c001821c:	90                   	nop
c001821d:	83 c4 1c             	add    esp,0x1c
c0018220:	c3                   	ret    
c0018221:	90                   	nop

c0018222 <ACPI::sleep()>:
c0018222:	83 ec 0c             	sub    esp,0xc
c0018225:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c001822a:	85 c0                	test   eax,eax
c001822c:	74 07                	je     c0018235 <ACPI::sleep()+0x13>
c001822e:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c0018233:	ff d0                	call   eax
c0018235:	90                   	nop
c0018236:	83 c4 0c             	add    esp,0xc
c0018239:	c3                   	ret    

c001823a <ACPI::open(int, int, void*)>:
c001823a:	57                   	push   edi
c001823b:	56                   	push   esi
c001823c:	53                   	push   ebx
c001823d:	81 ec 70 01 00 00    	sub    esp,0x170
c0018243:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001824a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018251:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018258:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001825f:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0018264:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001826a:	83 e0 04             	and    eax,0x4
c001826d:	84 c0                	test   al,al
c001826f:	74 53                	je     c00182c4 <ACPI::open(int, int, void*)+0x8a>
c0018271:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c0018276:	83 ec 08             	sub    esp,0x8
c0018279:	68 9e c0 02 c0       	push   0xc002c09e
c001827e:	50                   	push   eax
c001827f:	e8 1c f8 ff ff       	call   c0017aa0 <findDataTable(unsigned char*, char*)>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	89 84 24 6c 01 00 00 	mov    DWORD PTR [esp+0x16c],eax
c001828e:	83 bc 24 6c 01 00 00 00 	cmp    DWORD PTR [esp+0x16c],0x0
c0018296:	74 2c                	je     c00182c4 <ACPI::open(int, int, void*)+0x8a>
c0018298:	83 ec 0c             	sub    esp,0xc
c001829b:	68 a3 c0 02 c0       	push   0xc002c0a3
c00182a0:	e8 88 a8 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00182a5:	83 c4 10             	add    esp,0x10
c00182a8:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182af:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00182b6:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182bd:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00182c4:	c7 84 24 68 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x168],0xc5f
c00182cf:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00182d6:	8a 00                	mov    al,BYTE PTR [eax]
c00182d8:	3c 01                	cmp    al,0x1
c00182da:	75 2e                	jne    c001830a <ACPI::open(int, int, void*)+0xd0>
c00182dc:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182e3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00182ea:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00182f1:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00182f8:	83 ec 0c             	sub    esp,0xc
c00182fb:	68 b4 c0 02 c0       	push   0xc002c0b4
c0018300:	e8 28 a8 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	eb 2b                	jmp    c0018335 <ACPI::open(int, int, void*)+0xfb>
c001830a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0018311:	8a 00                	mov    al,BYTE PTR [eax]
c0018313:	3c 02                	cmp    al,0x2
c0018315:	75 1e                	jne    c0018335 <ACPI::open(int, int, void*)+0xfb>
c0018317:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001831e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018325:	83 ec 0c             	sub    esp,0xc
c0018328:	68 bc c0 02 c0       	push   0xc002c0bc
c001832d:	e8 fb a7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018332:	83 c4 10             	add    esp,0x10
c0018335:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001833c:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018342:	83 f0 01             	xor    eax,0x1
c0018345:	84 c0                	test   al,al
c0018347:	74 7c                	je     c00183c5 <ACPI::open(int, int, void*)+0x18b>
c0018349:	83 ec 0c             	sub    esp,0xc
c001834c:	68 c4 c0 02 c0       	push   0xc002c0c4
c0018351:	e8 d7 a7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	e8 f2 7d fe ff       	call   c0000150 <manualPCIProbe>
c001835e:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0018365:	83 bc 24 64 01 00 00 01 	cmp    DWORD PTR [esp+0x164],0x1
c001836d:	75 2e                	jne    c001839d <ACPI::open(int, int, void*)+0x163>
c001836f:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018376:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001837d:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018384:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001838b:	83 ec 0c             	sub    esp,0xc
c001838e:	68 d2 c0 02 c0       	push   0xc002c0d2
c0018393:	e8 95 a7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018398:	83 c4 10             	add    esp,0x10
c001839b:	eb 28                	jmp    c00183c5 <ACPI::open(int, int, void*)+0x18b>
c001839d:	83 bc 24 64 01 00 00 02 	cmp    DWORD PTR [esp+0x164],0x2
c00183a5:	75 1e                	jne    c00183c5 <ACPI::open(int, int, void*)+0x18b>
c00183a7:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00183ae:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183b5:	83 ec 0c             	sub    esp,0xc
c00183b8:	68 dc c0 02 c0       	push   0xc002c0dc
c00183bd:	e8 6b a7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00183c2:	83 c4 10             	add    esp,0x10
c00183c5:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00183cc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183d2:	84 c0                	test   al,al
c00183d4:	74 16                	je     c00183ec <ACPI::open(int, int, void*)+0x1b2>
c00183d6:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c00183dd:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00183e3:	83 f0 01             	xor    eax,0x1
c00183e6:	0f b6 c0             	movzx  eax,al
c00183e9:	40                   	inc    eax
c00183ea:	eb 05                	jmp    c00183f1 <ACPI::open(int, int, void*)+0x1b7>
c00183ec:	b8 00 00 00 00       	mov    eax,0x0
c00183f1:	83 ec 08             	sub    esp,0x8
c00183f4:	50                   	push   eax
c00183f5:	68 e6 c0 02 c0       	push   0xc002c0e6
c00183fa:	e8 2e a7 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c0018409:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001840f:	84 c0                	test   al,al
c0018411:	74 7c                	je     c001848f <ACPI::open(int, int, void*)+0x255>
c0018413:	c7 84 24 44 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x144],0x158
c001841e:	83 ec 0c             	sub    esp,0xc
c0018421:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0018428:	e8 5f 74 ff ff       	call   c000f88c <malloc>
c001842d:	83 c4 10             	add    esp,0x10
c0018430:	89 c3                	mov    ebx,eax
c0018432:	83 ec 0c             	sub    esp,0xc
c0018435:	53                   	push   ebx
c0018436:	e8 ef ab 00 00       	call   c002302a <PCI::PCI()>
c001843b:	83 c4 10             	add    esp,0x10
c001843e:	89 9c 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],ebx
c0018445:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c001844c:	83 ec 08             	sub    esp,0x8
c001844f:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018456:	50                   	push   eax
c0018457:	e8 0a bb ff ff       	call   c0013f66 <Device::addChild(Device*)>
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	8b 84 24 60 01 00 00 	mov    eax,DWORD PTR [esp+0x160]
c0018466:	8b 00                	mov    eax,DWORD PTR [eax]
c0018468:	83 c0 08             	add    eax,0x8
c001846b:	8b 00                	mov    eax,DWORD PTR [eax]
c001846d:	6a 00                	push   0x0
c001846f:	6a 00                	push   0x0
c0018471:	6a 00                	push   0x0
c0018473:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001847a:	ff d0                	call   eax
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	83 ec 0c             	sub    esp,0xc
c0018482:	68 ef c0 02 c0       	push   0xc002c0ef
c0018487:	e8 a1 a6 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001848c:	83 c4 10             	add    esp,0x10
c001848f:	83 ec 0c             	sub    esp,0xc
c0018492:	68 fa c0 02 c0       	push   0xc002c0fa
c0018497:	e8 5a 4b 00 00       	call   c001cff6 <Thr::loadKernelSymbolTable(char const*)>
c001849c:	83 c4 10             	add    esp,0x10
c001849f:	83 ec 0c             	sub    esp,0xc
c00184a2:	6a 0c                	push   0xc
c00184a4:	e8 bd 94 ff ff       	call   c0011966 <Virt::setupPageSwapping(int)>
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c00184b2:	83 ec 08             	sub    esp,0x8
c00184b5:	6a 01                	push   0x1
c00184b7:	68 18 c1 02 c0       	push   0xc002c118
c00184bc:	e8 ac 55 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c00184c1:	83 c4 10             	add    esp,0x10
c00184c4:	83 ec 08             	sub    esp,0x8
c00184c7:	53                   	push   ebx
c00184c8:	50                   	push   eax
c00184c9:	e8 ca 57 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00184d8:	83 ec 08             	sub    esp,0x8
c00184db:	6a 12                	push   0x12
c00184dd:	50                   	push   eax
c00184de:	e8 07 be ff ff       	call   c00142ea <getDevicesOfType(DeviceType)>
c00184e3:	83 c4 0c             	add    esp,0xc
c00184e6:	83 ec 0c             	sub    esp,0xc
c00184e9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00184f0:	50                   	push   eax
c00184f1:	e8 fa 11 01 00       	call   c00296f0 <LinkedList<Device>::isEmpty()>
c00184f6:	83 c4 10             	add    esp,0x10
c00184f9:	83 f0 01             	xor    eax,0x1
c00184fc:	84 c0                	test   al,al
c00184fe:	0f 84 c7 01 00 00    	je     c00186cb <ACPI::open(int, int, void*)+0x491>
c0018504:	83 ec 0c             	sub    esp,0xc
c0018507:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001850e:	50                   	push   eax
c001850f:	e8 f8 11 01 00       	call   c002970c <LinkedList<Device>::getFirstElement()>
c0018514:	83 c4 10             	add    esp,0x10
c0018517:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001851e:	83 ec 0c             	sub    esp,0xc
c0018521:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018528:	50                   	push   eax
c0018529:	e8 e6 11 01 00       	call   c0029714 <LinkedList<Device>::removeFirst()>
c001852e:	83 c4 10             	add    esp,0x10
c0018531:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0018538:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001853f:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018546:	83 ec 0c             	sub    esp,0xc
c0018549:	50                   	push   eax
c001854a:	e8 17 bd ff ff       	call   c0014266 <Device::getName()>
c001854f:	83 c4 10             	add    esp,0x10
c0018552:	83 ec 08             	sub    esp,0x8
c0018555:	50                   	push   eax
c0018556:	68 94 c2 02 c0       	push   0xc002c294
c001855b:	e8 cd a5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001856a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001856e:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018574:	ba 09 00 00 00       	mov    edx,0x9
c0018579:	fc                   	cld    
c001857a:	89 c7                	mov    edi,eax
c001857c:	89 de                	mov    esi,ebx
c001857e:	89 d1                	mov    ecx,edx
c0018580:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018582:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018586:	0f b6 c0             	movzx  eax,al
c0018589:	83 ec 08             	sub    esp,0x8
c001858c:	50                   	push   eax
c001858d:	68 33 c1 02 c0       	push   0xc002c133
c0018592:	e8 96 a5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001859e:	0f b6 c0             	movzx  eax,al
c00185a1:	83 ec 08             	sub    esp,0x8
c00185a4:	50                   	push   eax
c00185a5:	68 45 c1 02 c0       	push   0xc002c145
c00185aa:	e8 7e a5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00185af:	83 c4 10             	add    esp,0x10
c00185b2:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00185b7:	0f b7 c0             	movzx  eax,ax
c00185ba:	83 ec 08             	sub    esp,0x8
c00185bd:	50                   	push   eax
c00185be:	68 57 c1 02 c0       	push   0xc002c157
c00185c3:	e8 65 a5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00185c8:	83 c4 10             	add    esp,0x10
c00185cb:	83 ec 08             	sub    esp,0x8
c00185ce:	8d 44 24 38          	lea    eax,[esp+0x38]
c00185d2:	50                   	push   eax
c00185d3:	83 ec 24             	sub    esp,0x24
c00185d6:	89 e0                	mov    eax,esp
c00185d8:	89 c3                	mov    ebx,eax
c00185da:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00185de:	ba 09 00 00 00       	mov    edx,0x9
c00185e3:	89 df                	mov    edi,ebx
c00185e5:	89 c6                	mov    esi,eax
c00185e7:	89 d1                	mov    ecx,edx
c00185e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00185eb:	e8 c6 ad 00 00       	call   c00233b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00185f0:	83 c4 30             	add    esp,0x30
c00185f3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00185fa:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0018602:	0f 84 de fe ff ff    	je     c00184e6 <ACPI::open(int, int, void*)+0x2ac>
c0018608:	83 ec 08             	sub    esp,0x8
c001860b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018612:	68 69 c1 02 c0       	push   0xc002c169
c0018617:	e8 11 a5 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001861c:	83 c4 10             	add    esp,0x10
c001861f:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001862a:	83 ec 0c             	sub    esp,0xc
c001862d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018634:	e8 53 72 ff ff       	call   c000f88c <malloc>
c0018639:	83 c4 10             	add    esp,0x10
c001863c:	89 c3                	mov    ebx,eax
c001863e:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0018643:	83 ec 04             	sub    esp,0x4
c0018646:	50                   	push   eax
c0018647:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001864e:	53                   	push   ebx
c001864f:	e8 38 aa ff ff       	call   c001308c <File::File(char const*, Process*)>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001865e:	83 ec 0c             	sub    esp,0xc
c0018661:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018668:	e8 f1 ac ff ff       	call   c001335e <File::exists()>
c001866d:	83 c4 10             	add    esp,0x10
c0018670:	84 c0                	test   al,al
c0018672:	74 27                	je     c001869b <ACPI::open(int, int, void*)+0x461>
c0018674:	83 ec 08             	sub    esp,0x8
c0018677:	6a 01                	push   0x1
c0018679:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0018680:	e8 e8 53 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c0018685:	83 c4 10             	add    esp,0x10
c0018688:	83 ec 08             	sub    esp,0x8
c001868b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0018692:	50                   	push   eax
c0018693:	e8 00 56 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0018698:	83 c4 10             	add    esp,0x10
c001869b:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00186a3:	0f 84 3d fe ff ff    	je     c00184e6 <ACPI::open(int, int, void*)+0x2ac>
c00186a9:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00186b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b2:	83 c0 08             	add    eax,0x8
c00186b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00186c1:	ff d0                	call   eax
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	e9 1b fe ff ff       	jmp    c00184e6 <ACPI::open(int, int, void*)+0x2ac>
c00186cb:	83 ec 0c             	sub    esp,0xc
c00186ce:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00186d5:	50                   	push   eax
c00186d6:	e8 13 10 01 00       	call   c00296ee <LinkedList<Device>::~LinkedList()>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c00186e4:	83 ec 08             	sub    esp,0x8
c00186e7:	6a 01                	push   0x1
c00186e9:	68 75 c1 02 c0       	push   0xc002c175
c00186ee:	e8 7a 53 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c00186f3:	83 c4 10             	add    esp,0x10
c00186f6:	83 ec 08             	sub    esp,0x8
c00186f9:	53                   	push   ebx
c00186fa:	50                   	push   eax
c00186fb:	e8 98 55 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	8b 1d 88 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f188
c0018709:	83 ec 08             	sub    esp,0x8
c001870c:	6a 01                	push   0x1
c001870e:	68 92 c1 02 c0       	push   0xc002c192
c0018713:	e8 55 53 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	83 ec 08             	sub    esp,0x8
c001871e:	53                   	push   ebx
c001871f:	50                   	push   eax
c0018720:	e8 73 55 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001872d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018733:	83 e0 04             	and    eax,0x4
c0018736:	84 c0                	test   al,al
c0018738:	0f 84 fd 00 00 00    	je     c001883b <ACPI::open(int, int, void*)+0x601>
c001873e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018749:	83 ec 0c             	sub    esp,0xc
c001874c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018753:	e8 34 71 ff ff       	call   c000f88c <malloc>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	89 c3                	mov    ebx,eax
c001875d:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0018762:	83 ec 04             	sub    esp,0x4
c0018765:	50                   	push   eax
c0018766:	68 af c1 02 c0       	push   0xc002c1af
c001876b:	53                   	push   ebx
c001876c:	e8 1b a9 ff ff       	call   c001308c <File::File(char const*, Process*)>
c0018771:	83 c4 10             	add    esp,0x10
c0018774:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001877b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018783:	74 1a                	je     c001879f <ACPI::open(int, int, void*)+0x565>
c0018785:	83 ec 0c             	sub    esp,0xc
c0018788:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001878f:	e8 ca ab ff ff       	call   c001335e <File::exists()>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	84 c0                	test   al,al
c0018799:	74 04                	je     c001879f <ACPI::open(int, int, void*)+0x565>
c001879b:	b0 01                	mov    al,0x1
c001879d:	eb 02                	jmp    c00187a1 <ACPI::open(int, int, void*)+0x567>
c001879f:	b0 00                	mov    al,0x0
c00187a1:	84 c0                	test   al,al
c00187a3:	74 25                	je     c00187ca <ACPI::open(int, int, void*)+0x590>
c00187a5:	83 ec 08             	sub    esp,0x8
c00187a8:	6a 01                	push   0x1
c00187aa:	68 af c1 02 c0       	push   0xc002c1af
c00187af:	e8 b9 52 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c00187b4:	83 c4 10             	add    esp,0x10
c00187b7:	83 ec 08             	sub    esp,0x8
c00187ba:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00187c1:	50                   	push   eax
c00187c2:	e8 d1 54 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c00187c7:	83 c4 10             	add    esp,0x10
c00187ca:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00187d2:	74 27                	je     c00187fb <ACPI::open(int, int, void*)+0x5c1>
c00187d4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00187dc:	74 1d                	je     c00187fb <ACPI::open(int, int, void*)+0x5c1>
c00187de:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00187e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e7:	83 c0 08             	add    eax,0x8
c00187ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00187ec:	83 ec 0c             	sub    esp,0xc
c00187ef:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00187f6:	ff d0                	call   eax
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c0018800:	83 ec 08             	sub    esp,0x8
c0018803:	68 cc c1 02 c0       	push   0xc002c1cc
c0018808:	50                   	push   eax
c0018809:	e8 92 f2 ff ff       	call   c0017aa0 <findDataTable(unsigned char*, char*)>
c001880e:	83 c4 10             	add    esp,0x10
c0018811:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0018818:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018820:	74 19                	je     c001883b <ACPI::open(int, int, void*)+0x601>
c0018822:	83 ec 08             	sub    esp,0x8
c0018825:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001882c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0018833:	e8 a2 f9 ff ff       	call   c00181da <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018838:	83 c4 10             	add    esp,0x10
c001883b:	b8 00 00 00 00       	mov    eax,0x0
c0018840:	81 c4 70 01 00 00    	add    esp,0x170
c0018846:	5b                   	pop    ebx
c0018847:	5e                   	pop    esi
c0018848:	5f                   	pop    edi
c0018849:	c3                   	ret    

c001884a <CPU::close(int, int, void*)>:
c001884a:	31 c0                	xor    eax,eax
c001884c:	c3                   	ret    
c001884d:	90                   	nop

c001884e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001884e:	55                   	push   ebp
c001884f:	57                   	push   edi
c0018850:	56                   	push   esi
c0018851:	53                   	push   ebx
c0018852:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018856:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001885a:	89 ce                	mov    esi,ecx
c001885c:	89 d5                	mov    ebp,edx
c001885e:	80 f9 04             	cmp    cl,0x4
c0018861:	75 28                	jne    c001888b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018863:	8d 42 f9             	lea    eax,[edx-0x7]
c0018866:	3c 03                	cmp    al,0x3
c0018868:	0f 86 63 01 00 00    	jbe    c00189d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001886e:	80 fa 03             	cmp    dl,0x3
c0018871:	0f 84 5a 01 00 00    	je     c00189d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018877:	8d 7a f2             	lea    edi,[edx-0xe]
c001887a:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c001887f:	89 fb                	mov    ebx,edi
c0018881:	80 fb 01             	cmp    bl,0x1
c0018884:	77 4e                	ja     c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018886:	e9 52 01 00 00       	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888b:	80 f9 05             	cmp    cl,0x5
c001888e:	75 4d                	jne    c00188dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018890:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018895:	80 fa 03             	cmp    dl,0x3
c0018898:	0f 86 3f 01 00 00    	jbe    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889e:	8d 7a fa             	lea    edi,[edx-0x6]
c00188a1:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c00188a6:	89 fb                	mov    ebx,edi
c00188a8:	80 fb 01             	cmp    bl,0x1
c00188ab:	0f 86 2c 01 00 00    	jbe    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b1:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c00188b6:	80 fa 08             	cmp    dl,0x8
c00188b9:	0f 84 1e 01 00 00    	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bf:	89 d7                	mov    edi,edx
c00188c1:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c00188c6:	83 e7 fb             	and    edi,0xfffffffb
c00188c9:	89 fb                	mov    ebx,edi
c00188cb:	80 fb 09             	cmp    bl,0x9
c00188ce:	0f 84 09 01 00 00    	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d4:	31 c0                	xor    eax,eax
c00188d6:	89 eb                	mov    ebx,ebp
c00188d8:	0f b6 fb             	movzx  edi,bl
c00188db:	eb 30                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188dd:	31 c0                	xor    eax,eax
c00188df:	80 f9 06             	cmp    cl,0x6
c00188e2:	75 f2                	jne    c00188d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e4:	80 fa 0a             	cmp    dl,0xa
c00188e7:	77 ed                	ja     c00188d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e9:	bf de 05 00 00       	mov    edi,0x5de
c00188ee:	0f a3 d7             	bt     edi,edx
c00188f1:	73 e3                	jae    c00188d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188f3:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c00188f8:	e9 e0 00 00 00       	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fd:	39 c7                	cmp    edi,eax
c00188ff:	0f 84 d3 00 00 00    	je     c00189d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018905:	40                   	inc    eax
c0018906:	3d d0 00 00 00       	cmp    eax,0xd0
c001890b:	74 09                	je     c0018916 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001890d:	89 f3                	mov    ebx,esi
c001890f:	80 fb 0f             	cmp    bl,0xf
c0018912:	75 f1                	jne    c0018905 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018914:	eb e7                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018916:	80 f9 10             	cmp    cl,0x10
c0018919:	75 14                	jne    c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001891b:	8d 42 fc             	lea    eax,[edx-0x4]
c001891e:	83 e0 fb             	and    eax,0xfffffffb
c0018921:	3c 02                	cmp    al,0x2
c0018923:	76 34                	jbe    c0018959 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018925:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c001892a:	80 fa 02             	cmp    dl,0x2
c001892d:	eb 24                	jmp    c0018953 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001892f:	80 f9 11             	cmp    cl,0x11
c0018932:	75 13                	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018934:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018939:	80 fa 03             	cmp    dl,0x3
c001893c:	0f 85 9b 00 00 00    	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018942:	e9 91 00 00 00       	jmp    c00189d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018947:	80 f9 12             	cmp    cl,0x12
c001894a:	75 14                	jne    c0018960 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001894c:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018951:	fe ca                	dec    dl
c0018953:	0f 85 84 00 00 00    	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018959:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c001895e:	eb 7d                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018960:	80 f9 14             	cmp    cl,0x14
c0018963:	75 12                	jne    c0018977 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018965:	4a                   	dec    edx
c0018966:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c001896b:	80 fa 01             	cmp    dl,0x1
c001896e:	77 6d                	ja     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018970:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018975:	eb 66                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018977:	80 f9 15             	cmp    cl,0x15
c001897a:	75 31                	jne    c00189ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001897c:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018981:	80 fa 01             	cmp    dl,0x1
c0018984:	74 57                	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018986:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c001898b:	80 fa 13             	cmp    dl,0x13
c001898e:	76 0c                	jbe    c001899c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018990:	80 fa 30             	cmp    dl,0x30
c0018993:	75 48                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018995:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c001899a:	eb 41                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899c:	b9 04 00 09 00       	mov    ecx,0x90004
c00189a1:	0f a3 d1             	bt     ecx,edx
c00189a4:	73 37                	jae    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a6:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c00189ab:	eb 30                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ad:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c00189b2:	80 f9 16             	cmp    cl,0x16
c00189b5:	75 26                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b7:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c00189bc:	84 d2                	test   dl,dl
c00189be:	74 1d                	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c0:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c00189c5:	80 fa 30             	cmp    dl,0x30
c00189c8:	75 13                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ca:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c00189cf:	eb 0c                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d1:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00189d6:	eb 05                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d8:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c00189dd:	5b                   	pop    ebx
c00189de:	5e                   	pop    esi
c00189df:	5f                   	pop    edi
c00189e0:	5d                   	pop    ebp
c00189e1:	c3                   	ret    

c00189e2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189ea:	80 f9 04             	cmp    cl,0x4
c00189ed:	75 6b                	jne    c0018a5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189ef:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c00189f4:	80 fa 01             	cmp    dl,0x1
c00189f7:	0f 86 92 02 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c0018a02:	80 fa 02             	cmp    dl,0x2
c0018a05:	0f 84 84 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018a10:	80 fa 03             	cmp    dl,0x3
c0018a13:	0f 84 76 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c0018a1e:	80 fa 04             	cmp    dl,0x4
c0018a21:	0f 84 68 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a27:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018a2c:	80 fa 05             	cmp    dl,0x5
c0018a2f:	0f 84 5a 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018a3a:	80 fa 07             	cmp    dl,0x7
c0018a3d:	0f 84 4c 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a43:	83 ea 08             	sub    edx,0x8
c0018a46:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018a4b:	80 fa 01             	cmp    dl,0x1
c0018a4e:	0f 87 3b 02 00 00    	ja     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a54:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018a59:	c3                   	ret    
c0018a5a:	80 f9 05             	cmp    cl,0x5
c0018a5d:	75 45                	jne    c0018aa4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a5f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a62:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018a67:	80 f9 02             	cmp    cl,0x2
c0018a6a:	0f 86 1f 02 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	80 fa 04             	cmp    dl,0x4
c0018a73:	0f 84 f3 01 00 00    	je     c0018c6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a79:	80 fa 07             	cmp    dl,0x7
c0018a7c:	0f 84 0d 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a82:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018a87:	80 fa 08             	cmp    dl,0x8
c0018a8a:	0f 84 ff 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a90:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018a95:	80 fa 09             	cmp    dl,0x9
c0018a98:	0f 85 f1 01 00 00    	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9e:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018aa3:	c3                   	ret    
c0018aa4:	80 f9 06             	cmp    cl,0x6
c0018aa7:	0f 85 85 01 00 00    	jne    c0018c32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018aad:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018ab2:	80 fa 01             	cmp    dl,0x1
c0018ab5:	0f 84 d4 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	8d 42 fb             	lea    eax,[edx-0x5]
c0018abe:	3c 01                	cmp    al,0x1
c0018ac0:	0f 86 ac 01 00 00    	jbe    c0018c72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ac6:	80 fa 03             	cmp    dl,0x3
c0018ac9:	0f 84 a3 01 00 00    	je     c0018c72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018acf:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ad2:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018ad7:	80 f9 01             	cmp    cl,0x1
c0018ada:	0f 86 af 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae0:	80 fa 09             	cmp    dl,0x9
c0018ae3:	0f 84 8f 01 00 00    	je     c0018c78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ae9:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018aec:	80 f9 01             	cmp    cl,0x1
c0018aef:	0f 86 9a 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af5:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018afa:	80 fa 0d             	cmp    dl,0xd
c0018afd:	0f 84 8c 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018b08:	80 fa 0e             	cmp    dl,0xe
c0018b0b:	0f 84 7e 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b11:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018b16:	80 fa 0f             	cmp    dl,0xf
c0018b19:	0f 84 70 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1f:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018b24:	80 fa 15             	cmp    dl,0x15
c0018b27:	0f 84 62 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b30:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018b35:	80 f9 01             	cmp    cl,0x1
c0018b38:	0f 86 51 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3e:	80 fa 1a             	cmp    dl,0x1a
c0018b41:	0f 84 37 01 00 00    	je     c0018c7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b47:	80 fa 1c             	cmp    dl,0x1c
c0018b4a:	0f 84 34 01 00 00    	je     c0018c84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b50:	80 fa 1d             	cmp    dl,0x1d
c0018b53:	0f 84 36 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018b5e:	80 fa 25             	cmp    dl,0x25
c0018b61:	0f 84 28 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b67:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b6a:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018b6f:	80 f9 01             	cmp    cl,0x1
c0018b72:	0f 86 17 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018b7d:	80 fa 2a             	cmp    dl,0x2a
c0018b80:	0f 84 09 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018b8b:	80 fa 2c             	cmp    dl,0x2c
c0018b8e:	0f 84 fb 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b94:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018b99:	80 fa 2d             	cmp    dl,0x2d
c0018b9c:	0f 84 ed 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba2:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018ba7:	80 fa 2e             	cmp    dl,0x2e
c0018baa:	0f 84 df 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb0:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018bb5:	80 fa 2f             	cmp    dl,0x2f
c0018bb8:	0f 84 d1 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbe:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bc1:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018bc6:	80 f9 01             	cmp    cl,0x1
c0018bc9:	0f 86 c0 00 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcf:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018bd4:	80 fa 37             	cmp    dl,0x37
c0018bd7:	0f 84 b2 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdd:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018be2:	80 fa 3a             	cmp    dl,0x3a
c0018be5:	0f 84 a4 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018beb:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018bf0:	80 fa 3c             	cmp    dl,0x3c
c0018bf3:	0f 84 96 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf9:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018bfe:	80 fa 3d             	cmp    dl,0x3d
c0018c01:	0f 84 88 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c07:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018c0c:	80 fa 3e             	cmp    dl,0x3e
c0018c0f:	74 7e                	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c11:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c14:	3c 01                	cmp    al,0x1
c0018c16:	76 72                	jbe    c0018c8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c18:	80 fa 3f             	cmp    dl,0x3f
c0018c1b:	74 6d                	je     c0018c8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c1d:	80 fa 4a             	cmp    dl,0x4a
c0018c20:	74 0a                	je     c0018c2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c22:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018c27:	80 fa 4d             	cmp    dl,0x4d
c0018c2a:	75 63                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2c:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c0018c31:	c3                   	ret    
c0018c32:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018c37:	80 f9 0b             	cmp    cl,0xb
c0018c3a:	75 0a                	jne    c0018c46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c3c:	fe ca                	dec    dl
c0018c3e:	75 4f                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c40:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018c45:	c3                   	ret    
c0018c46:	80 f9 0f             	cmp    cl,0xf
c0018c49:	75 44                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c4b:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018c50:	80 fa 02             	cmp    dl,0x2
c0018c53:	76 3a                	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c55:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c58:	3c 01                	cmp    al,0x1
c0018c5a:	76 0a                	jbe    c0018c66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c5c:	b8 da c5 02 c0       	mov    eax,0xc002c5da
c0018c61:	80 fa 06             	cmp    dl,0x6
c0018c64:	75 29                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c66:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018c6b:	c3                   	ret    
c0018c6c:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018c71:	c3                   	ret    
c0018c72:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c0018c77:	c3                   	ret    
c0018c78:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c0018c7d:	c3                   	ret    
c0018c7e:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018c83:	c3                   	ret    
c0018c84:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c0018c89:	c3                   	ret    
c0018c8a:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018c8f:	c3                   	ret    

c0018c90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c90:	60                   	pusha  
c0018c91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c9d:	9c                   	pushf  
c0018c9e:	fa                   	cli    
c0018c9f:	0f 09                	wbinvd 
c0018ca1:	0f 30                	wrmsr  
c0018ca3:	9d                   	popf   
c0018ca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ca8:	89 02                	mov    DWORD PTR [edx],eax
c0018caa:	61                   	popa   
c0018cab:	c3                   	ret    

c0018cac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018cac:	60                   	pusha  
c0018cad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cb1:	9c                   	pushf  
c0018cb2:	fa                   	cli    
c0018cb3:	0f 09                	wbinvd 
c0018cb5:	31 c0                	xor    eax,eax
c0018cb7:	31 d2                	xor    edx,edx
c0018cb9:	0f 32                	rdmsr  
c0018cbb:	9d                   	popf   
c0018cbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cc0:	89 02                	mov    DWORD PTR [edx],eax
c0018cc2:	61                   	popa   
c0018cc3:	c3                   	ret    

c0018cc4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018cc4:	56                   	push   esi
c0018cc5:	53                   	push   ebx
c0018cc6:	83 ec 10             	sub    esp,0x10
c0018cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ccd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cd2:	75 5d                	jne    c0018d31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cd4:	83 f8 08             	cmp    eax,0x8
c0018cd7:	75 09                	jne    c0018ce2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cd9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cde:	7e 13                	jle    c0018cf3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ce0:	eb 30                	jmp    c0018d12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ce2:	83 f8 06             	cmp    eax,0x6
c0018ce5:	7c 4a                	jl     c0018d31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ce7:	83 f8 07             	cmp    eax,0x7
c0018cea:	7e 07                	jle    c0018cf3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cec:	83 f8 09             	cmp    eax,0x9
c0018cef:	74 21                	je     c0018d12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cf1:	eb 3e                	jmp    c0018d31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cf3:	89 e6                	mov    esi,esp
c0018cf5:	8b 1d c8 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1c8
c0018cfb:	56                   	push   esi
c0018cfc:	c1 eb 15             	shr    ebx,0x15
c0018cff:	68 82 00 00 c0       	push   0xc0000082
c0018d04:	83 e3 7e             	and    ebx,0x7e
c0018d07:	e8 a0 ff ff ff       	call   c0018cac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d0c:	56                   	push   esi
c0018d0d:	6a 00                	push   0x0
c0018d0f:	53                   	push   ebx
c0018d10:	eb 12                	jmp    c0018d24 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d12:	89 e3                	mov    ebx,esp
c0018d14:	53                   	push   ebx
c0018d15:	68 82 00 00 c0       	push   0xc0000082
c0018d1a:	e8 8d ff ff ff       	call   c0018cac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d1f:	53                   	push   ebx
c0018d20:	6a 00                	push   0x0
c0018d22:	6a 00                	push   0x0
c0018d24:	68 82 00 00 c0       	push   0xc0000082
c0018d29:	e8 62 ff ff ff       	call   c0018c90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d2e:	83 c4 18             	add    esp,0x18
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	5b                   	pop    ebx
c0018d35:	5e                   	pop    esi
c0018d36:	c3                   	ret    
c0018d37:	90                   	nop

c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d38:	55                   	push   ebp
c0018d39:	57                   	push   edi
c0018d3a:	56                   	push   esi
c0018d3b:	53                   	push   ebx
c0018d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d48:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d4c:	39 05 a0 e6 02 c0    	cmp    DWORD PTR ds:0xc002e6a0,eax
c0018d52:	75 23                	jne    c0018d77 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d54:	a1 cc 1c 03 c0       	mov    eax,ds:0xc0031ccc
c0018d59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d5d:	89 06                	mov    DWORD PTR [esi],eax
c0018d5f:	a1 c8 1c 03 c0       	mov    eax,ds:0xc0031cc8
c0018d64:	89 07                	mov    DWORD PTR [edi],eax
c0018d66:	a1 c4 1c 03 c0       	mov    eax,ds:0xc0031cc4
c0018d6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d6e:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0018d73:	89 02                	mov    DWORD PTR [edx],eax
c0018d75:	eb 3f                	jmp    c0018db6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d77:	31 c9                	xor    ecx,ecx
c0018d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d7d:	0f a2                	cpuid  
c0018d7f:	89 06                	mov    DWORD PTR [esi],eax
c0018d81:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d87:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d8a:	89 10                	mov    DWORD PTR [eax],edx
c0018d8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d90:	a3 a0 e6 02 c0       	mov    ds:0xc002e6a0,eax
c0018d95:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d97:	a3 cc 1c 03 c0       	mov    ds:0xc0031ccc,eax
c0018d9c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d9e:	a3 c8 1c 03 c0       	mov    ds:0xc0031cc8,eax
c0018da3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018da6:	a3 c4 1c 03 c0       	mov    ds:0xc0031cc4,eax
c0018dab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018db1:	a3 c0 1c 03 c0       	mov    ds:0xc0031cc0,eax
c0018db6:	5b                   	pop    ebx
c0018db7:	5e                   	pop    esi
c0018db8:	5f                   	pop    edi
c0018db9:	5d                   	pop    ebp
c0018dba:	c3                   	ret    
c0018dbb:	90                   	nop

c0018dbc <CPU::cpuidCheckEDX(unsigned int)>:
c0018dbc:	83 ec 10             	sub    esp,0x10
c0018dbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc3:	50                   	push   eax
c0018dc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc8:	50                   	push   eax
c0018dc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcd:	50                   	push   eax
c0018dce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd2:	50                   	push   eax
c0018dd3:	6a 01                	push   0x1
c0018dd5:	e8 5e ff ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dde:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018de2:	0f 95 c0             	setne  al
c0018de5:	83 c4 24             	add    esp,0x24
c0018de8:	c3                   	ret    
c0018de9:	90                   	nop

c0018dea <CPU::cpuidCheckECX(unsigned int)>:
c0018dea:	83 ec 10             	sub    esp,0x10
c0018ded:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df1:	50                   	push   eax
c0018df2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df6:	50                   	push   eax
c0018df7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfb:	50                   	push   eax
c0018dfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e00:	50                   	push   eax
c0018e01:	6a 01                	push   0x1
c0018e03:	e8 30 ff ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e10:	0f 95 c0             	setne  al
c0018e13:	83 c4 24             	add    esp,0x24
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop

c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e18:	83 ec 10             	sub    esp,0x10
c0018e1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1f:	50                   	push   eax
c0018e20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e24:	50                   	push   eax
c0018e25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e29:	50                   	push   eax
c0018e2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2e:	50                   	push   eax
c0018e2f:	6a 07                	push   0x7
c0018e31:	e8 02 ff ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e3e:	0f 95 c0             	setne  al
c0018e41:	83 c4 24             	add    esp,0x24
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e46:	83 ec 10             	sub    esp,0x10
c0018e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4d:	50                   	push   eax
c0018e4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e52:	50                   	push   eax
c0018e53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e57:	50                   	push   eax
c0018e58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e5c:	50                   	push   eax
c0018e5d:	6a 07                	push   0x7
c0018e5f:	e8 d4 fe ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e68:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e6c:	0f 95 c0             	setne  al
c0018e6f:	83 c4 24             	add    esp,0x24
c0018e72:	c3                   	ret    
c0018e73:	90                   	nop

c0018e74 <CPU::CPU()>:
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7b:	83 ec 08             	sub    esp,0x8
c0018e7e:	68 da c5 02 c0       	push   0xc002c5da
c0018e83:	50                   	push   eax
c0018e84:	e8 e1 b2 ff ff       	call   c001416a <Device::Device(char const*)>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	ba b4 c6 02 c0       	mov    edx,0xc002c6b4
c0018e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e95:	89 10                	mov    DWORD PTR [eax],edx
c0018e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea9:	05 78 01 00 00       	add    eax,0x178
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	50                   	push   eax
c0018eb2:	e8 eb 61 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018eb7:	83 c4 10             	add    esp,0x10
c0018eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebe:	05 7c 09 00 00       	add    eax,0x97c
c0018ec3:	83 ec 0c             	sub    esp,0xc
c0018ec6:	50                   	push   eax
c0018ec7:	e8 40 64 ff ff       	call   c000f30c <IDT::IDT()>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed3:	05 7c 11 00 00       	add    eax,0x117c
c0018ed8:	83 ec 0c             	sub    esp,0xc
c0018edb:	50                   	push   eax
c0018edc:	e8 77 81 ff ff       	call   c0011058 <TSS::TSS()>
c0018ee1:	83 c4 10             	add    esp,0x10
c0018ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018efd:	90                   	nop
c0018efe:	83 c4 0c             	add    esp,0xc
c0018f01:	c3                   	ret    

c0018f02 <CPU::displayFeatures()>:
c0018f02:	53                   	push   ebx
c0018f03:	83 ec 10             	sub    esp,0x10
c0018f06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f0a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f10:	68 e8 c2 02 c0       	push   0xc002c2e8
c0018f15:	e8 13 9c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018f1a:	59                   	pop    ecx
c0018f1b:	58                   	pop    eax
c0018f1c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f22:	50                   	push   eax
c0018f23:	68 f9 c2 02 c0       	push   0xc002c2f9
c0018f28:	e8 00 9c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018f2d:	58                   	pop    eax
c0018f2e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f34:	5a                   	pop    edx
c0018f35:	c1 e8 0e             	shr    eax,0xe
c0018f38:	0f b6 c0             	movzx  eax,al
c0018f3b:	50                   	push   eax
c0018f3c:	68 0a c3 02 c0       	push   0xc002c30a
c0018f41:	e8 e7 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018f46:	59                   	pop    ecx
c0018f47:	58                   	pop    eax
c0018f48:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f4e:	66 c1 e8 06          	shr    ax,0x6
c0018f52:	0f b6 c0             	movzx  eax,al
c0018f55:	50                   	push   eax
c0018f56:	68 1b c3 02 c0       	push   0xc002c31b
c0018f5b:	e8 cd 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018f60:	c7 04 24 c8 c7 02 c0 	mov    DWORD PTR [esp],0xc002c7c8
c0018f67:	e8 c1 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018f6c:	83 c4 10             	add    esp,0x10
c0018f6f:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018f74:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f7b:	74 05                	je     c0018f82 <CPU::displayFeatures()+0x80>
c0018f7d:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018f82:	52                   	push   edx
c0018f83:	52                   	push   edx
c0018f84:	50                   	push   eax
c0018f85:	68 2c c3 02 c0       	push   0xc002c32c
c0018f8a:	e8 9e 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018f97:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f9e:	78 05                	js     c0018fa5 <CPU::displayFeatures()+0xa3>
c0018fa0:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018fa5:	51                   	push   ecx
c0018fa6:	51                   	push   ecx
c0018fa7:	50                   	push   eax
c0018fa8:	68 43 c3 02 c0       	push   0xc002c343
c0018fad:	e8 7b 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018fba:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fc1:	75 05                	jne    c0018fc8 <CPU::displayFeatures()+0xc6>
c0018fc3:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018fc8:	52                   	push   edx
c0018fc9:	52                   	push   edx
c0018fca:	50                   	push   eax
c0018fcb:	68 5a c3 02 c0       	push   0xc002c35a
c0018fd0:	e8 58 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018fd5:	83 c4 10             	add    esp,0x10
c0018fd8:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0018fdd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fe4:	75 05                	jne    c0018feb <CPU::displayFeatures()+0xe9>
c0018fe6:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0018feb:	51                   	push   ecx
c0018fec:	51                   	push   ecx
c0018fed:	50                   	push   eax
c0018fee:	68 71 c3 02 c0       	push   0xc002c371
c0018ff3:	e8 35 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019000:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019007:	75 05                	jne    c001900e <CPU::displayFeatures()+0x10c>
c0019009:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001900e:	52                   	push   edx
c001900f:	52                   	push   edx
c0019010:	50                   	push   eax
c0019011:	68 88 c3 02 c0       	push   0xc002c388
c0019016:	e8 12 9b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001901b:	83 c4 10             	add    esp,0x10
c001901e:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019023:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001902a:	75 05                	jne    c0019031 <CPU::displayFeatures()+0x12f>
c001902c:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019031:	51                   	push   ecx
c0019032:	51                   	push   ecx
c0019033:	50                   	push   eax
c0019034:	68 9f c3 02 c0       	push   0xc002c39f
c0019039:	e8 ef 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001903e:	83 c4 10             	add    esp,0x10
c0019041:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019046:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001904d:	75 05                	jne    c0019054 <CPU::displayFeatures()+0x152>
c001904f:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019054:	52                   	push   edx
c0019055:	52                   	push   edx
c0019056:	50                   	push   eax
c0019057:	68 b6 c3 02 c0       	push   0xc002c3b6
c001905c:	e8 cc 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019069:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019070:	75 05                	jne    c0019077 <CPU::displayFeatures()+0x175>
c0019072:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019077:	51                   	push   ecx
c0019078:	51                   	push   ecx
c0019079:	50                   	push   eax
c001907a:	68 cd c3 02 c0       	push   0xc002c3cd
c001907f:	e8 a9 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001908c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019093:	75 05                	jne    c001909a <CPU::displayFeatures()+0x198>
c0019095:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001909a:	52                   	push   edx
c001909b:	52                   	push   edx
c001909c:	50                   	push   eax
c001909d:	68 e4 c3 02 c0       	push   0xc002c3e4
c00190a2:	e8 86 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00190a7:	83 c4 10             	add    esp,0x10
c00190aa:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00190af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190b6:	75 05                	jne    c00190bd <CPU::displayFeatures()+0x1bb>
c00190b8:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00190bd:	51                   	push   ecx
c00190be:	51                   	push   ecx
c00190bf:	50                   	push   eax
c00190c0:	68 fb c3 02 c0       	push   0xc002c3fb
c00190c5:	e8 63 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00190d2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190d9:	75 05                	jne    c00190e0 <CPU::displayFeatures()+0x1de>
c00190db:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c00190e0:	52                   	push   edx
c00190e1:	52                   	push   edx
c00190e2:	50                   	push   eax
c00190e3:	68 12 c4 02 c0       	push   0xc002c412
c00190e8:	e8 40 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c00190f5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190fc:	75 05                	jne    c0019103 <CPU::displayFeatures()+0x201>
c00190fe:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019103:	51                   	push   ecx
c0019104:	51                   	push   ecx
c0019105:	50                   	push   eax
c0019106:	68 29 c4 02 c0       	push   0xc002c429
c001910b:	e8 1d 9a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019110:	83 c4 10             	add    esp,0x10
c0019113:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c0019118:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001911f:	75 05                	jne    c0019126 <CPU::displayFeatures()+0x224>
c0019121:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019126:	52                   	push   edx
c0019127:	52                   	push   edx
c0019128:	50                   	push   eax
c0019129:	68 40 c4 02 c0       	push   0xc002c440
c001912e:	e8 fa 99 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001913b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019142:	78 05                	js     c0019149 <CPU::displayFeatures()+0x247>
c0019144:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c0019149:	51                   	push   ecx
c001914a:	51                   	push   ecx
c001914b:	50                   	push   eax
c001914c:	68 57 c4 02 c0       	push   0xc002c457
c0019151:	e8 d7 99 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	b8 d2 ab 02 c0       	mov    eax,0xc002abd2
c001915e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019165:	75 05                	jne    c001916c <CPU::displayFeatures()+0x26a>
c0019167:	b8 d6 ab 02 c0       	mov    eax,0xc002abd6
c001916c:	52                   	push   edx
c001916d:	52                   	push   edx
c001916e:	50                   	push   eax
c001916f:	68 6e c4 02 c0       	push   0xc002c46e
c0019174:	e8 b4 99 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019179:	83 c4 18             	add    esp,0x18
c001917c:	5b                   	pop    ebx
c001917d:	c3                   	ret    

c001917e <CPU::detectFeatures()>:
c001917e:	55                   	push   ebp
c001917f:	57                   	push   edi
c0019180:	56                   	push   esi
c0019181:	53                   	push   ebx
c0019182:	83 ec 50             	sub    esp,0x50
c0019185:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019189:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019193:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001919a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00191a0:	6a 0d                	push   0xd
c00191a2:	6a 00                	push   0x0
c00191a4:	55                   	push   ebp
c00191a5:	e8 a6 75 fe ff       	call   c0000750 <memset>
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00191b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191b9:	0f 84 22 09 00 00    	je     c0019ae1 <CPU::detectFeatures()+0x963>
c00191bf:	83 ec 0c             	sub    esp,0xc
c00191c2:	89 ef                	mov    edi,ebp
c00191c4:	6a 10                	push   0x10
c00191c6:	e8 f1 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c00191cb:	83 e0 01             	and    eax,0x1
c00191ce:	8d 14 00             	lea    edx,[eax+eax*1]
c00191d1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d7:	83 e0 fd             	and    eax,0xfffffffd
c00191da:	09 d0                	or     eax,edx
c00191dc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191e9:	e8 ce fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c00191ee:	83 e0 01             	and    eax,0x1
c00191f1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191f8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191fe:	83 e0 fb             	and    eax,0xfffffffb
c0019201:	09 d0                	or     eax,edx
c0019203:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019209:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019210:	e8 a7 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c0019215:	83 e0 01             	and    eax,0x1
c0019218:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001921f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019225:	83 e0 f7             	and    eax,0xfffffff7
c0019228:	09 d0                	or     eax,edx
c001922a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019230:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019237:	e8 80 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c001923c:	83 e0 01             	and    eax,0x1
c001923f:	c1 e0 04             	shl    eax,0x4
c0019242:	88 c2                	mov    dl,al
c0019244:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001924a:	83 e0 ef             	and    eax,0xffffffef
c001924d:	09 d0                	or     eax,edx
c001924f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019255:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001925c:	e8 5b fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c0019261:	83 e0 01             	and    eax,0x1
c0019264:	c1 e0 05             	shl    eax,0x5
c0019267:	88 c2                	mov    dl,al
c0019269:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001926f:	83 e0 df             	and    eax,0xffffffdf
c0019272:	09 d0                	or     eax,edx
c0019274:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001927a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019281:	e8 36 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c0019286:	83 e0 01             	and    eax,0x1
c0019289:	8d 14 00             	lea    edx,[eax+eax*1]
c001928c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019292:	83 e0 fd             	and    eax,0xfffffffd
c0019295:	09 d0                	or     eax,edx
c0019297:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001929d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192a4:	e8 13 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c00192a9:	83 e0 01             	and    eax,0x1
c00192ac:	c1 e0 06             	shl    eax,0x6
c00192af:	88 c2                	mov    dl,al
c00192b1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192b7:	83 e0 bf             	and    eax,0xffffffbf
c00192ba:	09 d0                	or     eax,edx
c00192bc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192c2:	58                   	pop    eax
c00192c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192c7:	50                   	push   eax
c00192c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192cc:	50                   	push   eax
c00192cd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192d1:	56                   	push   esi
c00192d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192d6:	50                   	push   eax
c00192d7:	6a 00                	push   0x0
c00192d9:	e8 5a fa ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192de:	b8 04 00 00 00       	mov    eax,0x4
c00192e3:	89 c1                	mov    ecx,eax
c00192e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192e7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00192ed:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00192f1:	89 c1                	mov    ecx,eax
c00192f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192f5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00192fb:	8d 74 24 38          	lea    esi,[esp+0x38]
c00192ff:	89 c1                	mov    ecx,eax
c0019301:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019303:	83 c4 18             	add    esp,0x18
c0019306:	68 85 c4 02 c0       	push   0xc002c485
c001930b:	55                   	push   ebp
c001930c:	e8 87 75 fe ff       	call   c0000898 <strcmp>
c0019311:	83 c4 10             	add    esp,0x10
c0019314:	85 c0                	test   eax,eax
c0019316:	75 0f                	jne    c0019327 <CPU::detectFeatures()+0x1a9>
c0019318:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019322:	e9 22 02 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c0019327:	50                   	push   eax
c0019328:	50                   	push   eax
c0019329:	68 92 c4 02 c0       	push   0xc002c492
c001932e:	55                   	push   ebp
c001932f:	e8 64 75 fe ff       	call   c0000898 <strcmp>
c0019334:	83 c4 10             	add    esp,0x10
c0019337:	85 c0                	test   eax,eax
c0019339:	74 dd                	je     c0019318 <CPU::detectFeatures()+0x19a>
c001933b:	50                   	push   eax
c001933c:	50                   	push   eax
c001933d:	68 9f c4 02 c0       	push   0xc002c49f
c0019342:	55                   	push   ebp
c0019343:	e8 50 75 fe ff       	call   c0000898 <strcmp>
c0019348:	83 c4 10             	add    esp,0x10
c001934b:	85 c0                	test   eax,eax
c001934d:	74 2a                	je     c0019379 <CPU::detectFeatures()+0x1fb>
c001934f:	50                   	push   eax
c0019350:	50                   	push   eax
c0019351:	68 ac c4 02 c0       	push   0xc002c4ac
c0019356:	55                   	push   ebp
c0019357:	e8 3c 75 fe ff       	call   c0000898 <strcmp>
c001935c:	83 c4 10             	add    esp,0x10
c001935f:	85 c0                	test   eax,eax
c0019361:	74 16                	je     c0019379 <CPU::detectFeatures()+0x1fb>
c0019363:	50                   	push   eax
c0019364:	50                   	push   eax
c0019365:	68 b9 c4 02 c0       	push   0xc002c4b9
c001936a:	55                   	push   ebp
c001936b:	e8 28 75 fe ff       	call   c0000898 <strcmp>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	85 c0                	test   eax,eax
c0019375:	74 48                	je     c00193bf <CPU::detectFeatures()+0x241>
c0019377:	eb 0f                	jmp    c0019388 <CPU::detectFeatures()+0x20a>
c0019379:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019383:	e9 c1 01 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c0019388:	50                   	push   eax
c0019389:	50                   	push   eax
c001938a:	68 c6 c4 02 c0       	push   0xc002c4c6
c001938f:	55                   	push   ebp
c0019390:	e8 03 75 fe ff       	call   c0000898 <strcmp>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	85 c0                	test   eax,eax
c001939a:	74 23                	je     c00193bf <CPU::detectFeatures()+0x241>
c001939c:	57                   	push   edi
c001939d:	57                   	push   edi
c001939e:	68 d3 c4 02 c0       	push   0xc002c4d3
c00193a3:	55                   	push   ebp
c00193a4:	e8 ef 74 fe ff       	call   c0000898 <strcmp>
c00193a9:	83 c4 10             	add    esp,0x10
c00193ac:	85 c0                	test   eax,eax
c00193ae:	75 1e                	jne    c00193ce <CPU::detectFeatures()+0x250>
c00193b0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193ba:	e9 8a 01 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c00193bf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193c9:	e9 7b 01 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c00193ce:	56                   	push   esi
c00193cf:	56                   	push   esi
c00193d0:	68 e0 c4 02 c0       	push   0xc002c4e0
c00193d5:	55                   	push   ebp
c00193d6:	e8 bd 74 fe ff       	call   c0000898 <strcmp>
c00193db:	83 c4 10             	add    esp,0x10
c00193de:	85 c0                	test   eax,eax
c00193e0:	75 0f                	jne    c00193f1 <CPU::detectFeatures()+0x273>
c00193e2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193ec:	e9 58 01 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c00193f1:	51                   	push   ecx
c00193f2:	51                   	push   ecx
c00193f3:	68 9f c4 02 c0       	push   0xc002c49f
c00193f8:	55                   	push   ebp
c00193f9:	e8 9a 74 fe ff       	call   c0000898 <strcmp>
c00193fe:	83 c4 10             	add    esp,0x10
c0019401:	85 c0                	test   eax,eax
c0019403:	75 0f                	jne    c0019414 <CPU::detectFeatures()+0x296>
c0019405:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001940f:	e9 35 01 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c0019414:	52                   	push   edx
c0019415:	52                   	push   edx
c0019416:	68 ed c4 02 c0       	push   0xc002c4ed
c001941b:	55                   	push   ebp
c001941c:	e8 77 74 fe ff       	call   c0000898 <strcmp>
c0019421:	83 c4 10             	add    esp,0x10
c0019424:	85 c0                	test   eax,eax
c0019426:	75 0f                	jne    c0019437 <CPU::detectFeatures()+0x2b9>
c0019428:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019432:	e9 12 01 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c0019437:	50                   	push   eax
c0019438:	50                   	push   eax
c0019439:	68 fa c4 02 c0       	push   0xc002c4fa
c001943e:	55                   	push   ebp
c001943f:	e8 54 74 fe ff       	call   c0000898 <strcmp>
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	85 c0                	test   eax,eax
c0019449:	75 0f                	jne    c001945a <CPU::detectFeatures()+0x2dc>
c001944b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019455:	e9 ef 00 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c001945a:	50                   	push   eax
c001945b:	50                   	push   eax
c001945c:	68 07 c5 02 c0       	push   0xc002c507
c0019461:	55                   	push   ebp
c0019462:	e8 31 74 fe ff       	call   c0000898 <strcmp>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	85 c0                	test   eax,eax
c001946c:	75 0f                	jne    c001947d <CPU::detectFeatures()+0x2ff>
c001946e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019478:	e9 cc 00 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c001947d:	50                   	push   eax
c001947e:	50                   	push   eax
c001947f:	68 14 c5 02 c0       	push   0xc002c514
c0019484:	55                   	push   ebp
c0019485:	e8 0e 74 fe ff       	call   c0000898 <strcmp>
c001948a:	83 c4 10             	add    esp,0x10
c001948d:	85 c0                	test   eax,eax
c001948f:	75 0f                	jne    c00194a0 <CPU::detectFeatures()+0x322>
c0019491:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001949b:	e9 a9 00 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c00194a0:	50                   	push   eax
c00194a1:	50                   	push   eax
c00194a2:	68 21 c5 02 c0       	push   0xc002c521
c00194a7:	55                   	push   ebp
c00194a8:	e8 eb 73 fe ff       	call   c0000898 <strcmp>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	85 c0                	test   eax,eax
c00194b2:	75 0f                	jne    c00194c3 <CPU::detectFeatures()+0x345>
c00194b4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194be:	e9 86 00 00 00       	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c00194c3:	50                   	push   eax
c00194c4:	50                   	push   eax
c00194c5:	68 2e c5 02 c0       	push   0xc002c52e
c00194ca:	55                   	push   ebp
c00194cb:	e8 c8 73 fe ff       	call   c0000898 <strcmp>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	85 c0                	test   eax,eax
c00194d5:	75 0c                	jne    c00194e3 <CPU::detectFeatures()+0x365>
c00194d7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194e1:	eb 66                	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c00194e3:	50                   	push   eax
c00194e4:	50                   	push   eax
c00194e5:	68 3b c5 02 c0       	push   0xc002c53b
c00194ea:	55                   	push   ebp
c00194eb:	e8 a8 73 fe ff       	call   c0000898 <strcmp>
c00194f0:	83 c4 10             	add    esp,0x10
c00194f3:	85 c0                	test   eax,eax
c00194f5:	75 0c                	jne    c0019503 <CPU::detectFeatures()+0x385>
c00194f7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019501:	eb 46                	jmp    c0019549 <CPU::detectFeatures()+0x3cb>
c0019503:	57                   	push   edi
c0019504:	57                   	push   edi
c0019505:	68 48 c5 02 c0       	push   0xc002c548
c001950a:	55                   	push   ebp
c001950b:	e8 88 73 fe ff       	call   c0000898 <strcmp>
c0019510:	83 c4 10             	add    esp,0x10
c0019513:	85 c0                	test   eax,eax
c0019515:	74 e0                	je     c00194f7 <CPU::detectFeatures()+0x379>
c0019517:	56                   	push   esi
c0019518:	56                   	push   esi
c0019519:	68 55 c5 02 c0       	push   0xc002c555
c001951e:	55                   	push   ebp
c001951f:	e8 74 73 fe ff       	call   c0000898 <strcmp>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	85 c0                	test   eax,eax
c0019529:	74 cc                	je     c00194f7 <CPU::detectFeatures()+0x379>
c001952b:	51                   	push   ecx
c001952c:	51                   	push   ecx
c001952d:	68 62 c5 02 c0       	push   0xc002c562
c0019532:	55                   	push   ebp
c0019533:	e8 60 73 fe ff       	call   c0000898 <strcmp>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	85 c0                	test   eax,eax
c001953d:	74 b8                	je     c00194f7 <CPU::detectFeatures()+0x379>
c001953f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019549:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001954e:	0f 86 be 00 00 00    	jbe    c0019612 <CPU::detectFeatures()+0x494>
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	68 80 00 00 00       	push   0x80
c001955c:	e8 b7 f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019561:	83 e0 01             	and    eax,0x1
c0019564:	c1 e0 06             	shl    eax,0x6
c0019567:	88 c2                	mov    dl,al
c0019569:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001956f:	83 e0 bf             	and    eax,0xffffffbf
c0019572:	09 d0                	or     eax,edx
c0019574:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001957a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019581:	e8 92 f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019586:	83 e0 01             	and    eax,0x1
c0019589:	c1 e0 04             	shl    eax,0x4
c001958c:	88 c2                	mov    dl,al
c001958e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019594:	83 e0 ef             	and    eax,0xffffffef
c0019597:	09 d0                	or     eax,edx
c0019599:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001959f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195a6:	e8 6d f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195ab:	c1 e0 07             	shl    eax,0x7
c00195ae:	88 c2                	mov    dl,al
c00195b0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195b6:	83 e0 7f             	and    eax,0x7f
c00195b9:	09 d0                	or     eax,edx
c00195bb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195c1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195c8:	e8 79 f8 ff ff       	call   c0018e46 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195cd:	83 e0 01             	and    eax,0x1
c00195d0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195d7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195dd:	83 e0 f7             	and    eax,0xfffffff7
c00195e0:	09 d0                	or     eax,edx
c00195e2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195e8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195ef:	e8 52 f8 ff ff       	call   c0018e46 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195f4:	83 c4 10             	add    esp,0x10
c00195f7:	83 e0 01             	and    eax,0x1
c00195fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019601:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019607:	83 e0 fb             	and    eax,0xfffffffb
c001960a:	09 d0                	or     eax,edx
c001960c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019612:	83 ec 0c             	sub    esp,0xc
c0019615:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019619:	50                   	push   eax
c001961a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001961e:	50                   	push   eax
c001961f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019623:	56                   	push   esi
c0019624:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019628:	50                   	push   eax
c0019629:	6a 01                	push   0x1
c001962b:	e8 08 f7 ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019630:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019634:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001963a:	88 ca                	mov    dl,cl
c001963c:	83 e0 f0             	and    eax,0xfffffff0
c001963f:	83 e2 0f             	and    edx,0xf
c0019642:	09 d0                	or     eax,edx
c0019644:	88 ca                	mov    dl,cl
c0019646:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001964c:	c0 ea 04             	shr    dl,0x4
c001964f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019653:	0f b6 c2             	movzx  eax,dl
c0019656:	83 c4 20             	add    esp,0x20
c0019659:	c1 e0 06             	shl    eax,0x6
c001965c:	89 c7                	mov    edi,eax
c001965e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019664:	66 25 3f c0          	and    ax,0xc03f
c0019668:	09 f8                	or     eax,edi
c001966a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019671:	89 c8                	mov    eax,ecx
c0019673:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001967a:	c1 e8 08             	shr    eax,0x8
c001967d:	83 e5 3f             	and    ebp,0x3f
c0019680:	83 e0 0f             	and    eax,0xf
c0019683:	89 c7                	mov    edi,eax
c0019685:	c1 e7 06             	shl    edi,0x6
c0019688:	09 ef                	or     edi,ebp
c001968a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019691:	89 fa                	mov    edx,edi
c0019693:	83 e5 c0             	and    ebp,0xffffffc0
c0019696:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001969c:	88 c2                	mov    dl,al
c001969e:	c0 ea 02             	shr    dl,0x2
c00196a1:	89 d7                	mov    edi,edx
c00196a3:	09 ef                	or     edi,ebp
c00196a5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196ab:	89 fa                	mov    edx,edi
c00196ad:	83 e5 cf             	and    ebp,0xffffffcf
c00196b0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196b6:	89 cf                	mov    edi,ecx
c00196b8:	c1 ef 0c             	shr    edi,0xc
c00196bb:	83 e7 03             	and    edi,0x3
c00196be:	c1 e7 04             	shl    edi,0x4
c00196c1:	09 ef                	or     edi,ebp
c00196c3:	3c 06                	cmp    al,0x6
c00196c5:	89 fa                	mov    edx,edi
c00196c7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196cd:	74 04                	je     c00196d3 <CPU::detectFeatures()+0x555>
c00196cf:	3c 0f                	cmp    al,0xf
c00196d1:	75 5c                	jne    c001972f <CPU::detectFeatures()+0x5b1>
c00196d3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196d7:	89 cf                	mov    edi,ecx
c00196d9:	c1 ef 10             	shr    edi,0x10
c00196dc:	c1 e7 04             	shl    edi,0x4
c00196df:	09 fa                	or     edx,edi
c00196e1:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00196e7:	0f b6 d2             	movzx  edx,dl
c00196ea:	66 81 e7 3f c0       	and    di,0xc03f
c00196ef:	c1 e2 06             	shl    edx,0x6
c00196f2:	09 fa                	or     edx,edi
c00196f4:	3c 0f                	cmp    al,0xf
c00196f6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196fd:	75 30                	jne    c001972f <CPU::detectFeatures()+0x5b1>
c00196ff:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019705:	c1 e9 14             	shr    ecx,0x14
c0019708:	83 e0 3f             	and    eax,0x3f
c001970b:	83 c1 0f             	add    ecx,0xf
c001970e:	88 ca                	mov    dl,cl
c0019710:	c0 e9 02             	shr    cl,0x2
c0019713:	c1 e2 06             	shl    edx,0x6
c0019716:	09 d0                	or     eax,edx
c0019718:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001971e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019724:	83 e0 c0             	and    eax,0xffffffc0
c0019727:	09 c1                	or     ecx,eax
c0019729:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001972f:	83 ec 0c             	sub    esp,0xc
c0019732:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019739:	8d 44 24 28          	lea    eax,[esp+0x28]
c001973d:	50                   	push   eax
c001973e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019742:	55                   	push   ebp
c0019743:	56                   	push   esi
c0019744:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019748:	57                   	push   edi
c0019749:	68 00 00 00 80       	push   0x80000000
c001974e:	e8 e5 f5 ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019753:	83 c4 20             	add    esp,0x20
c0019756:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001975e:	76 22                	jbe    c0019782 <CPU::detectFeatures()+0x604>
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019767:	50                   	push   eax
c0019768:	55                   	push   ebp
c0019769:	56                   	push   esi
c001976a:	57                   	push   edi
c001976b:	68 01 00 00 80       	push   0x80000001
c0019770:	e8 c3 f5 ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019775:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001977f:	83 c4 20             	add    esp,0x20
c0019782:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019788:	83 f8 01             	cmp    eax,0x1
c001978b:	75 6f                	jne    c00197fc <CPU::detectFeatures()+0x67e>
c001978d:	51                   	push   ecx
c001978e:	51                   	push   ecx
c001978f:	68 6e c5 02 c0       	push   0xc002c56e
c0019794:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019798:	56                   	push   esi
c0019799:	e8 6e 70 fe ff       	call   c000080c <strcpy>
c001979e:	5f                   	pop    edi
c001979f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a5:	5d                   	pop    ebp
c00197a6:	66 c1 e8 06          	shr    ax,0x6
c00197aa:	0f b6 c0             	movzx  eax,al
c00197ad:	50                   	push   eax
c00197ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b4:	c1 e8 0e             	shr    eax,0xe
c00197b7:	0f b6 c0             	movzx  eax,al
c00197ba:	50                   	push   eax
c00197bb:	e8 22 f2 ff ff       	call   c00189e2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197c0:	5a                   	pop    edx
c00197c1:	59                   	pop    ecx
c00197c2:	50                   	push   eax
c00197c3:	56                   	push   esi
c00197c4:	e8 83 71 fe ff       	call   c000094c <strcat>
c00197c9:	5f                   	pop    edi
c00197ca:	5d                   	pop    ebp
c00197cb:	56                   	push   esi
c00197cc:	53                   	push   ebx
c00197cd:	e8 8a a9 ff ff       	call   c001415c <Device::setName(char const*)>
c00197d2:	58                   	pop    eax
c00197d3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197d9:	5a                   	pop    edx
c00197da:	68 75 c5 02 c0       	push   0xc002c575
c00197df:	50                   	push   eax
c00197e0:	e8 b3 70 fe ff       	call   c0000898 <strcmp>
c00197e5:	83 c4 10             	add    esp,0x10
c00197e8:	85 c0                	test   eax,eax
c00197ea:	0f 85 71 03 00 00    	jne    c0019b61 <CPU::detectFeatures()+0x9e3>
c00197f0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197f7:	e9 65 03 00 00       	jmp    c0019b61 <CPU::detectFeatures()+0x9e3>
c00197fc:	83 f8 02             	cmp    eax,0x2
c00197ff:	0f 85 b5 00 00 00    	jne    c00198ba <CPU::detectFeatures()+0x73c>
c0019805:	57                   	push   edi
c0019806:	57                   	push   edi
c0019807:	68 87 c5 02 c0       	push   0xc002c587
c001980c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019810:	56                   	push   esi
c0019811:	e8 f6 6f fe ff       	call   c000080c <strcpy>
c0019816:	5d                   	pop    ebp
c0019817:	58                   	pop    eax
c0019818:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001981e:	66 c1 e8 06          	shr    ax,0x6
c0019822:	0f b6 c0             	movzx  eax,al
c0019825:	50                   	push   eax
c0019826:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001982c:	c1 e8 0e             	shr    eax,0xe
c001982f:	0f b6 c0             	movzx  eax,al
c0019832:	50                   	push   eax
c0019833:	e8 16 f0 ff ff       	call   c001884e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019838:	5a                   	pop    edx
c0019839:	59                   	pop    ecx
c001983a:	50                   	push   eax
c001983b:	56                   	push   esi
c001983c:	e8 0b 71 fe ff       	call   c000094c <strcat>
c0019841:	5f                   	pop    edi
c0019842:	5d                   	pop    ebp
c0019843:	56                   	push   esi
c0019844:	53                   	push   ebx
c0019845:	e8 12 a9 ff ff       	call   c001415c <Device::setName(char const*)>
c001984a:	58                   	pop    eax
c001984b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019851:	5a                   	pop    edx
c0019852:	68 8c c5 02 c0       	push   0xc002c58c
c0019857:	50                   	push   eax
c0019858:	e8 3b 70 fe ff       	call   c0000898 <strcmp>
c001985d:	83 c4 10             	add    esp,0x10
c0019860:	85 c0                	test   eax,eax
c0019862:	75 20                	jne    c0019884 <CPU::detectFeatures()+0x706>
c0019864:	8b 15 88 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f188
c001986a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019870:	a8 01                	test   al,0x1
c0019872:	74 10                	je     c0019884 <CPU::detectFeatures()+0x706>
c0019874:	83 e0 fe             	and    eax,0xfffffffe
c0019877:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001987d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019884:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001988a:	c1 e8 0e             	shr    eax,0xe
c001988d:	3c 05                	cmp    al,0x5
c001988f:	0f 85 cc 02 00 00    	jne    c0019b61 <CPU::detectFeatures()+0x9e3>
c0019895:	56                   	push   esi
c0019896:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001989c:	83 e0 0f             	and    eax,0xf
c001989f:	50                   	push   eax
c00198a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198a6:	66 c1 e8 06          	shr    ax,0x6
c00198aa:	0f b6 c0             	movzx  eax,al
c00198ad:	50                   	push   eax
c00198ae:	6a 05                	push   0x5
c00198b0:	e8 0f f4 ff ff       	call   c0018cc4 <CPU::AMD_K6_writeback(int, int, int)>
c00198b5:	e9 1f 02 00 00       	jmp    c0019ad9 <CPU::detectFeatures()+0x95b>
c00198ba:	8d 50 fd             	lea    edx,[eax-0x3]
c00198bd:	83 fa 01             	cmp    edx,0x1
c00198c0:	76 09                	jbe    c00198cb <CPU::detectFeatures()+0x74d>
c00198c2:	83 f8 06             	cmp    eax,0x6
c00198c5:	0f 85 91 01 00 00    	jne    c0019a5c <CPU::detectFeatures()+0x8de>
c00198cb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198d1:	c1 ea 0e             	shr    edx,0xe
c00198d4:	80 fa 05             	cmp    dl,0x5
c00198d7:	75 7b                	jne    c0019954 <CPU::detectFeatures()+0x7d6>
c00198d9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198df:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198e4:	66 81 fa 00 01       	cmp    dx,0x100
c00198e9:	75 0c                	jne    c00198f7 <CPU::detectFeatures()+0x779>
c00198eb:	51                   	push   ecx
c00198ec:	51                   	push   ecx
c00198ed:	68 93 c5 02 c0       	push   0xc002c593
c00198f2:	e9 dc 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c00198f7:	66 81 fa 00 02       	cmp    dx,0x200
c00198fc:	75 0c                	jne    c001990a <CPU::detectFeatures()+0x78c>
c00198fe:	52                   	push   edx
c00198ff:	52                   	push   edx
c0019900:	68 a6 c5 02 c0       	push   0xc002c5a6
c0019905:	e9 c9 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c001990a:	66 81 fa 40 02       	cmp    dx,0x240
c001990f:	75 0c                	jne    c001991d <CPU::detectFeatures()+0x79f>
c0019911:	50                   	push   eax
c0019912:	50                   	push   eax
c0019913:	68 b8 c5 02 c0       	push   0xc002c5b8
c0019918:	e9 b6 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c001991d:	83 f8 06             	cmp    eax,0x6
c0019920:	75 0c                	jne    c001992e <CPU::detectFeatures()+0x7b0>
c0019922:	50                   	push   eax
c0019923:	50                   	push   eax
c0019924:	68 ca c5 02 c0       	push   0xc002c5ca
c0019929:	e9 a5 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c001992e:	83 f8 04             	cmp    eax,0x4
c0019931:	75 0c                	jne    c001993f <CPU::detectFeatures()+0x7c1>
c0019933:	50                   	push   eax
c0019934:	50                   	push   eax
c0019935:	68 d6 c5 02 c0       	push   0xc002c5d6
c001993a:	e9 94 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c001993f:	83 f8 03             	cmp    eax,0x3
c0019942:	0f 85 19 02 00 00    	jne    c0019b61 <CPU::detectFeatures()+0x9e3>
c0019948:	50                   	push   eax
c0019949:	50                   	push   eax
c001994a:	68 de c5 02 c0       	push   0xc002c5de
c001994f:	e9 7f 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019954:	80 fa 06             	cmp    dl,0x6
c0019957:	0f 85 db 00 00 00    	jne    c0019a38 <CPU::detectFeatures()+0x8ba>
c001995d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019963:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019968:	66 81 fa 80 01       	cmp    dx,0x180
c001996d:	75 0c                	jne    c001997b <CPU::detectFeatures()+0x7fd>
c001996f:	50                   	push   eax
c0019970:	50                   	push   eax
c0019971:	68 e9 c5 02 c0       	push   0xc002c5e9
c0019976:	e9 58 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c001997b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019981:	66 f7 c1 80 ff       	test   cx,0xff80
c0019986:	75 0c                	jne    c0019994 <CPU::detectFeatures()+0x816>
c0019988:	50                   	push   eax
c0019989:	50                   	push   eax
c001998a:	68 f9 c5 02 c0       	push   0xc002c5f9
c001998f:	e9 3f 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019994:	66 81 fa 40 02       	cmp    dx,0x240
c0019999:	75 0c                	jne    c00199a7 <CPU::detectFeatures()+0x829>
c001999b:	55                   	push   ebp
c001999c:	55                   	push   ebp
c001999d:	68 00 c6 02 c0       	push   0xc002c600
c00199a2:	e9 2c 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c00199a7:	66 81 fa 80 02       	cmp    dx,0x280
c00199ac:	75 0c                	jne    c00199ba <CPU::detectFeatures()+0x83c>
c00199ae:	57                   	push   edi
c00199af:	57                   	push   edi
c00199b0:	68 09 c6 02 c0       	push   0xc002c609
c00199b5:	e9 19 01 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c00199ba:	66 81 fa 40 03       	cmp    dx,0x340
c00199bf:	74 ed                	je     c00199ae <CPU::detectFeatures()+0x830>
c00199c1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199c6:	75 0c                	jne    c00199d4 <CPU::detectFeatures()+0x856>
c00199c8:	56                   	push   esi
c00199c9:	56                   	push   esi
c00199ca:	68 10 c6 02 c0       	push   0xc002c610
c00199cf:	e9 ff 00 00 00       	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c00199d4:	83 f8 06             	cmp    eax,0x6
c00199d7:	0f 84 45 ff ff ff    	je     c0019922 <CPU::detectFeatures()+0x7a4>
c00199dd:	83 f8 04             	cmp    eax,0x4
c00199e0:	0f 84 4d ff ff ff    	je     c0019933 <CPU::detectFeatures()+0x7b5>
c00199e6:	83 f8 03             	cmp    eax,0x3
c00199e9:	0f 85 72 01 00 00    	jne    c0019b61 <CPU::detectFeatures()+0x9e3>
c00199ef:	51                   	push   ecx
c00199f0:	51                   	push   ecx
c00199f1:	68 19 c6 02 c0       	push   0xc002c619
c00199f6:	53                   	push   ebx
c00199f7:	e8 60 a7 ff ff       	call   c001415c <Device::setName(char const*)>
c00199fc:	b1 c1                	mov    cl,0xc1
c00199fe:	88 c8                	mov    al,cl
c0019a00:	e6 22                	out    0x22,al
c0019a02:	e4 23                	in     al,0x23
c0019a04:	88 c2                	mov    dl,al
c0019a06:	88 c8                	mov    al,cl
c0019a08:	e6 22                	out    0x22,al
c0019a0a:	88 d0                	mov    al,dl
c0019a0c:	83 c8 10             	or     eax,0x10
c0019a0f:	e6 23                	out    0x23,al
c0019a11:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a1b:	89 d0                	mov    eax,edx
c0019a1d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a23:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a27:	40                   	inc    eax
c0019a28:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a2e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a33:	e9 a1 00 00 00       	jmp    c0019ad9 <CPU::detectFeatures()+0x95b>
c0019a38:	83 f8 06             	cmp    eax,0x6
c0019a3b:	0f 84 e1 fe ff ff    	je     c0019922 <CPU::detectFeatures()+0x7a4>
c0019a41:	83 f8 04             	cmp    eax,0x4
c0019a44:	0f 84 e9 fe ff ff    	je     c0019933 <CPU::detectFeatures()+0x7b5>
c0019a4a:	83 f8 03             	cmp    eax,0x3
c0019a4d:	0f 85 0e 01 00 00    	jne    c0019b61 <CPU::detectFeatures()+0x9e3>
c0019a53:	52                   	push   edx
c0019a54:	52                   	push   edx
c0019a55:	68 24 c6 02 c0       	push   0xc002c624
c0019a5a:	eb 77                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019a5c:	83 f8 07             	cmp    eax,0x7
c0019a5f:	75 09                	jne    c0019a6a <CPU::detectFeatures()+0x8ec>
c0019a61:	50                   	push   eax
c0019a62:	50                   	push   eax
c0019a63:	68 2e c6 02 c0       	push   0xc002c62e
c0019a68:	eb 69                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019a6a:	83 f8 0a             	cmp    eax,0xa
c0019a6d:	75 09                	jne    c0019a78 <CPU::detectFeatures()+0x8fa>
c0019a6f:	50                   	push   eax
c0019a70:	50                   	push   eax
c0019a71:	68 39 c6 02 c0       	push   0xc002c639
c0019a76:	eb 5b                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019a78:	83 f8 0b             	cmp    eax,0xb
c0019a7b:	75 09                	jne    c0019a86 <CPU::detectFeatures()+0x908>
c0019a7d:	50                   	push   eax
c0019a7e:	50                   	push   eax
c0019a7f:	68 41 c6 02 c0       	push   0xc002c641
c0019a84:	eb 4d                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019a86:	83 f8 08             	cmp    eax,0x8
c0019a89:	75 09                	jne    c0019a94 <CPU::detectFeatures()+0x916>
c0019a8b:	50                   	push   eax
c0019a8c:	50                   	push   eax
c0019a8d:	68 4a c6 02 c0       	push   0xc002c64a
c0019a92:	eb 3f                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019a94:	83 f8 09             	cmp    eax,0x9
c0019a97:	75 09                	jne    c0019aa2 <CPU::detectFeatures()+0x924>
c0019a99:	50                   	push   eax
c0019a9a:	50                   	push   eax
c0019a9b:	68 52 c6 02 c0       	push   0xc002c652
c0019aa0:	eb 31                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019aa2:	83 f8 05             	cmp    eax,0x5
c0019aa5:	75 09                	jne    c0019ab0 <CPU::detectFeatures()+0x932>
c0019aa7:	50                   	push   eax
c0019aa8:	50                   	push   eax
c0019aa9:	68 5a c6 02 c0       	push   0xc002c65a
c0019aae:	eb 23                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019ab0:	83 f8 0c             	cmp    eax,0xc
c0019ab3:	75 09                	jne    c0019abe <CPU::detectFeatures()+0x940>
c0019ab5:	55                   	push   ebp
c0019ab6:	55                   	push   ebp
c0019ab7:	68 68 c6 02 c0       	push   0xc002c668
c0019abc:	eb 15                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019abe:	83 f8 0d             	cmp    eax,0xd
c0019ac1:	75 09                	jne    c0019acc <CPU::detectFeatures()+0x94e>
c0019ac3:	57                   	push   edi
c0019ac4:	57                   	push   edi
c0019ac5:	68 73 c6 02 c0       	push   0xc002c673
c0019aca:	eb 07                	jmp    c0019ad3 <CPU::detectFeatures()+0x955>
c0019acc:	56                   	push   esi
c0019acd:	56                   	push   esi
c0019ace:	68 87 c6 02 c0       	push   0xc002c687
c0019ad3:	53                   	push   ebx
c0019ad4:	e8 83 a6 ff ff       	call   c001415c <Device::setName(char const*)>
c0019ad9:	83 c4 10             	add    esp,0x10
c0019adc:	e9 80 00 00 00       	jmp    c0019b61 <CPU::detectFeatures()+0x9e3>
c0019ae1:	51                   	push   ecx
c0019ae2:	51                   	push   ecx
c0019ae3:	68 d3 c4 02 c0       	push   0xc002c4d3
c0019ae8:	55                   	push   ebp
c0019ae9:	e8 1e 6d fe ff       	call   c000080c <strcpy>
c0019aee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019af8:	e8 b1 67 fe ff       	call   c00002ae <is486>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	85 c0                	test   eax,eax
c0019b02:	74 2b                	je     c0019b2f <CPU::detectFeatures()+0x9b1>
c0019b04:	52                   	push   edx
c0019b05:	52                   	push   edx
c0019b06:	68 93 c6 02 c0       	push   0xc002c693
c0019b0b:	53                   	push   ebx
c0019b0c:	e8 4b a6 ff ff       	call   c001415c <Device::setName(char const*)>
c0019b11:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b18:	0f 20 c0             	mov    eax,cr0
c0019b1b:	83 e0 14             	and    eax,0x14
c0019b1e:	83 c4 10             	add    esp,0x10
c0019b21:	83 f8 04             	cmp    eax,0x4
c0019b24:	75 1f                	jne    c0019b45 <CPU::detectFeatures()+0x9c7>
c0019b26:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b2d:	eb 32                	jmp    c0019b61 <CPU::detectFeatures()+0x9e3>
c0019b2f:	50                   	push   eax
c0019b30:	50                   	push   eax
c0019b31:	68 9e c6 02 c0       	push   0xc002c69e
c0019b36:	53                   	push   ebx
c0019b37:	e8 20 a6 ff ff       	call   c001415c <Device::setName(char const*)>
c0019b3c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b43:	eb d3                	jmp    c0019b18 <CPU::detectFeatures()+0x99a>
c0019b45:	e8 3f 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b4a:	83 e0 01             	and    eax,0x1
c0019b4d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b50:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b56:	83 e0 fd             	and    eax,0xfffffffd
c0019b59:	09 d0                	or     eax,edx
c0019b5b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b61:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b68:	83 c4 4c             	add    esp,0x4c
c0019b6b:	5b                   	pop    ebx
c0019b6c:	5e                   	pop    esi
c0019b6d:	5f                   	pop    edi
c0019b6e:	5d                   	pop    ebp
c0019b6f:	c3                   	ret    

c0019b70 <CPU::setupSMEP()>:
c0019b70:	0f 20 e0             	mov    eax,cr4
c0019b73:	0d 00 00 10 00       	or     eax,0x100000
c0019b78:	0f 22 e0             	mov    cr4,eax
c0019b7b:	c3                   	ret    

c0019b7c <CPU::setupUMIP()>:
c0019b7c:	0f 20 e0             	mov    eax,cr4
c0019b7f:	80 cc 08             	or     ah,0x8
c0019b82:	0f 22 e0             	mov    cr4,eax
c0019b85:	c3                   	ret    

c0019b86 <CPU::setupTSC()>:
c0019b86:	0f 20 e0             	mov    eax,cr4
c0019b89:	83 c8 04             	or     eax,0x4
c0019b8c:	0f 22 e0             	mov    cr4,eax
c0019b8f:	c3                   	ret    

c0019b90 <CPU::setupLargePages()>:
c0019b90:	0f 20 e0             	mov    eax,cr4
c0019b93:	83 c8 10             	or     eax,0x10
c0019b96:	0f 22 e0             	mov    cr4,eax
c0019b99:	c3                   	ret    

c0019b9a <CPU::setupPAT()>:
c0019b9a:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0019b9f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ba6:	74 2c                	je     c0019bd4 <CPU::setupPAT()+0x3a>
c0019ba8:	53                   	push   ebx
c0019ba9:	83 ec 10             	sub    esp,0x10
c0019bac:	68 77 02 00 00       	push   0x277
c0019bb1:	50                   	push   eax
c0019bb2:	e8 7b 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019bb7:	83 e2 f8             	and    edx,0xfffffff8
c0019bba:	83 ca 01             	or     edx,0x1
c0019bbd:	52                   	push   edx
c0019bbe:	50                   	push   eax
c0019bbf:	68 77 02 00 00       	push   0x277
c0019bc4:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c0019bca:	e8 8f 52 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bcf:	83 c4 28             	add    esp,0x28
c0019bd2:	5b                   	pop    ebx
c0019bd3:	c3                   	ret    
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <CPU::setupMTRR()>:
c0019bd6:	c3                   	ret    
c0019bd7:	90                   	nop

c0019bd8 <CPU::setupGlobalPages()>:
c0019bd8:	0f 20 e0             	mov    eax,cr4
c0019bdb:	0c 80                	or     al,0x80
c0019bdd:	0f 22 e0             	mov    cr4,eax
c0019be0:	c3                   	ret    
c0019be1:	90                   	nop

c0019be2 <CPU::allowUsermodeDataAccess()>:
c0019be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bed:	74 03                	je     c0019bf2 <CPU::allowUsermodeDataAccess()+0x10>
c0019bef:	0f 01 cb             	stac   
c0019bf2:	c3                   	ret    
c0019bf3:	90                   	nop

c0019bf4 <CPU::prohibitUsermodeDataAccess()>:
c0019bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bff:	74 03                	je     c0019c04 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019c01:	0f 01 ca             	clac   
c0019c04:	c3                   	ret    
c0019c05:	90                   	nop

c0019c06 <CPU::setupSMAP()>:
c0019c06:	0f 20 e0             	mov    eax,cr4
c0019c09:	0d 00 00 20 00       	or     eax,0x200000
c0019c0e:	0f 22 e0             	mov    cr4,eax
c0019c11:	eb e1                	jmp    c0019bf4 <CPU::prohibitUsermodeDataAccess()>
c0019c13:	90                   	nop

c0019c14 <CPU::setupFeatures()>:
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c1b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c22:	74 07                	je     c0019c2b <CPU::setupFeatures()+0x17>
c0019c24:	52                   	push   edx
c0019c25:	e8 46 ff ff ff       	call   c0019b70 <CPU::setupSMEP()>
c0019c2a:	58                   	pop    eax
c0019c2b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c32:	74 07                	je     c0019c3b <CPU::setupFeatures()+0x27>
c0019c34:	52                   	push   edx
c0019c35:	e8 cc ff ff ff       	call   c0019c06 <CPU::setupSMAP()>
c0019c3a:	58                   	pop    eax
c0019c3b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c42:	74 07                	je     c0019c4b <CPU::setupFeatures()+0x37>
c0019c44:	52                   	push   edx
c0019c45:	e8 32 ff ff ff       	call   c0019b7c <CPU::setupUMIP()>
c0019c4a:	58                   	pop    eax
c0019c4b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c52:	74 07                	je     c0019c5b <CPU::setupFeatures()+0x47>
c0019c54:	52                   	push   edx
c0019c55:	e8 2c ff ff ff       	call   c0019b86 <CPU::setupTSC()>
c0019c5a:	58                   	pop    eax
c0019c5b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c62:	74 07                	je     c0019c6b <CPU::setupFeatures()+0x57>
c0019c64:	52                   	push   edx
c0019c65:	e8 26 ff ff ff       	call   c0019b90 <CPU::setupLargePages()>
c0019c6a:	59                   	pop    ecx
c0019c6b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c72:	74 07                	je     c0019c7b <CPU::setupFeatures()+0x67>
c0019c74:	52                   	push   edx
c0019c75:	e8 5e ff ff ff       	call   c0019bd8 <CPU::setupGlobalPages()>
c0019c7a:	58                   	pop    eax
c0019c7b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c82:	74 0c                	je     c0019c90 <CPU::setupFeatures()+0x7c>
c0019c84:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c88:	83 c4 0c             	add    esp,0xc
c0019c8b:	e9 0a ff ff ff       	jmp    c0019b9a <CPU::setupPAT()>
c0019c90:	83 c4 0c             	add    esp,0xc
c0019c93:	c3                   	ret    

c0019c94 <CPU::open(int, int, void*)>:
c0019c94:	57                   	push   edi
c0019c95:	56                   	push   esi
c0019c96:	53                   	push   ebx
c0019c97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c9f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ca5:	83 ec 0c             	sub    esp,0xc
c0019ca8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cae:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cb4:	50                   	push   eax
c0019cb5:	e8 64 54 ff ff       	call   c000f11e <GDT::setup()>
c0019cba:	83 c4 0c             	add    esp,0xc
c0019cbd:	6a 00                	push   0x0
c0019cbf:	68 ef be ad de       	push   0xdeadbeef
c0019cc4:	57                   	push   edi
c0019cc5:	e8 ce 73 ff ff       	call   c0011098 <TSS::setup(unsigned long, unsigned long)>
c0019cca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ccd:	e8 a6 73 ff ff       	call   c0011078 <TSS::flush()>
c0019cd2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cdb:	e8 a2 56 ff ff       	call   c000f382 <IDT::setup()>
c0019ce0:	b8 00 04 00 00       	mov    eax,0x400
c0019ce5:	0f 23 f8             	mov    db7,eax
c0019ce8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cf2:	e8 f7 5e ff ff       	call   c000fbee <Phys::allocatePage()>
c0019cf7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cfd:	89 30                	mov    DWORD PTR [eax],esi
c0019cff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d05:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d08:	58                   	pop    eax
c0019d09:	5a                   	pop    edx
c0019d0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d14:	e8 1f 85 ff ff       	call   c0012238 <VAS::setCPUSpecific(unsigned long)>
c0019d19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d1c:	e8 5d f4 ff ff       	call   c001917e <CPU::detectFeatures()>
c0019d21:	e8 68 b8 ff ff       	call   c001558e <setupInterruptController()>
c0019d26:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d2c:	a1 a0 f1 02 c0       	mov    eax,ds:0xc002f1a0
c0019d31:	83 e0 10             	and    eax,0x10
c0019d34:	83 f8 01             	cmp    eax,0x1
c0019d37:	19 c0                	sbb    eax,eax
c0019d39:	83 e0 46             	and    eax,0x46
c0019d3c:	83 c0 1e             	add    eax,0x1e
c0019d3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d42:	e8 9e ce ff ff       	call   c0016be5 <setupTimer(int)>
c0019d47:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d50:	e8 bf fe ff ff       	call   c0019c14 <CPU::setupFeatures()>
c0019d55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d58:	e8 a5 f1 ff ff       	call   c0018f02 <CPU::displayFeatures()>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	31 c0                	xor    eax,eax
c0019d62:	5b                   	pop    ebx
c0019d63:	5e                   	pop    esi
c0019d64:	5f                   	pop    edi
c0019d65:	c3                   	ret    

c0019d66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d66:	57                   	push   edi
c0019d67:	56                   	push   esi
c0019d68:	53                   	push   ebx
c0019d69:	51                   	push   ecx
c0019d6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d6e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d71:	0f 02 c0             	lar    eax,ax
c0019d74:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d7b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d7e:	88 ca                	mov    dl,cl
c0019d80:	c0 ea 06             	shr    dl,0x6
c0019d83:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d87:	89 ca                	mov    edx,ecx
c0019d89:	66 c1 ea 03          	shr    dx,0x3
c0019d8d:	83 e2 07             	and    edx,0x7
c0019d90:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d95:	88 17                	mov    BYTE PTR [edi],dl
c0019d97:	0f 84 a6 01 00 00    	je     c0019f43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d9d:	83 e1 07             	and    ecx,0x7
c0019da0:	80 f9 04             	cmp    cl,0x4
c0019da3:	0f 84 98 00 00 00    	je     c0019e41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019da9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dae:	0f 95 c0             	setne  al
c0019db1:	80 f9 05             	cmp    cl,0x5
c0019db4:	0f 95 c2             	setne  dl
c0019db7:	08 c2                	or     dl,al
c0019db9:	74 79                	je     c0019e34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019dbb:	84 c9                	test   cl,cl
c0019dbd:	75 05                	jne    c0019dc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019dbf:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dc2:	eb 3c                	jmp    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc4:	80 f9 01             	cmp    cl,0x1
c0019dc7:	75 05                	jne    c0019dce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019dc9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dcc:	eb 32                	jmp    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dce:	80 f9 02             	cmp    cl,0x2
c0019dd1:	75 05                	jne    c0019dd8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019dd3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dd6:	eb 28                	jmp    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd8:	31 c0                	xor    eax,eax
c0019dda:	80 f9 03             	cmp    cl,0x3
c0019ddd:	75 05                	jne    c0019de4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ddf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019de2:	eb 1c                	jmp    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de4:	80 f9 05             	cmp    cl,0x5
c0019de7:	75 05                	jne    c0019dee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019de9:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dec:	eb 12                	jmp    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dee:	80 f9 06             	cmp    cl,0x6
c0019df1:	75 05                	jne    c0019df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019df3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019df6:	eb 08                	jmp    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df8:	80 f9 07             	cmp    cl,0x7
c0019dfb:	75 03                	jne    c0019e00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e00:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e05:	75 10                	jne    c0019e17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e07:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e0b:	b9 03 00 00 00       	mov    ecx,0x3
c0019e10:	01 d0                	add    eax,edx
c0019e12:	e9 37 01 00 00       	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e17:	b9 02 00 00 00       	mov    ecx,0x2
c0019e1c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e21:	0f 85 27 01 00 00    	jne    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e27:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e2a:	b9 06 00 00 00       	mov    ecx,0x6
c0019e2f:	e9 1a 01 00 00       	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e34:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e37:	b9 06 00 00 00       	mov    ecx,0x6
c0019e3c:	e9 0f 01 00 00       	jmp    c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e41:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e44:	88 ca                	mov    dl,cl
c0019e46:	c0 ea 06             	shr    dl,0x6
c0019e49:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e4d:	89 ca                	mov    edx,ecx
c0019e4f:	66 c1 ea 03          	shr    dx,0x3
c0019e53:	83 e2 07             	and    edx,0x7
c0019e56:	80 e1 07             	and    cl,0x7
c0019e59:	75 05                	jne    c0019e60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e5b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e5e:	eb 4c                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e60:	80 f9 01             	cmp    cl,0x1
c0019e63:	75 05                	jne    c0019e6a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e65:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e68:	eb 42                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e6a:	80 f9 02             	cmp    cl,0x2
c0019e6d:	75 05                	jne    c0019e74 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e6f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e72:	eb 38                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e74:	80 f9 03             	cmp    cl,0x3
c0019e77:	75 05                	jne    c0019e7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e79:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e7c:	eb 2e                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7e:	80 f9 04             	cmp    cl,0x4
c0019e81:	75 12                	jne    c0019e95 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e83:	f6 c4 60             	test   ah,0x60
c0019e86:	75 08                	jne    c0019e90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e88:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e8b:	8d 78 14             	lea    edi,[eax+0x14]
c0019e8e:	eb 1c                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e90:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e93:	eb 17                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e95:	80 f9 05             	cmp    cl,0x5
c0019e98:	75 05                	jne    c0019e9f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e9a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e9d:	eb 0d                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e9f:	80 f9 06             	cmp    cl,0x6
c0019ea2:	75 05                	jne    c0019ea9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ea4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ea7:	eb 03                	jmp    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019eac:	84 d2                	test   dl,dl
c0019eae:	75 05                	jne    c0019eb5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019eb0:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019eb3:	eb 3c                	jmp    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb5:	80 fa 01             	cmp    dl,0x1
c0019eb8:	75 05                	jne    c0019ebf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019eba:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ebd:	eb 32                	jmp    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ebf:	80 fa 02             	cmp    dl,0x2
c0019ec2:	75 05                	jne    c0019ec9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ec4:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ec7:	eb 28                	jmp    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec9:	80 fa 03             	cmp    dl,0x3
c0019ecc:	75 05                	jne    c0019ed3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ece:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ed1:	eb 1e                	jmp    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed3:	31 c0                	xor    eax,eax
c0019ed5:	80 fa 04             	cmp    dl,0x4
c0019ed8:	74 17                	je     c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eda:	80 fa 05             	cmp    dl,0x5
c0019edd:	75 05                	jne    c0019ee4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019edf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ee2:	eb 0d                	jmp    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee4:	80 fa 06             	cmp    dl,0x6
c0019ee7:	75 05                	jne    c0019eee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ee9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019eec:	eb 03                	jmp    c0019ef1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ef1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ef6:	0f 94 c2             	sete   dl
c0019ef9:	80 f9 05             	cmp    cl,0x5
c0019efc:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019f00:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f05:	d3 e0                	shl    eax,cl
c0019f07:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f0b:	74 0a                	je     c0019f17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f0d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f10:	b9 07 00 00 00       	mov    ecx,0x7
c0019f15:	eb 37                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f17:	01 f8                	add    eax,edi
c0019f19:	b9 03 00 00 00       	mov    ecx,0x3
c0019f1e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f23:	74 2b                	je     c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f25:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f2a:	75 0d                	jne    c0019f39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f2c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f30:	01 c8                	add    eax,ecx
c0019f32:	b9 04 00 00 00       	mov    ecx,0x4
c0019f37:	eb 17                	jmp    c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f39:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f3c:	b9 07 00 00 00       	mov    ecx,0x7
c0019f41:	eb 0d                	jmp    c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f43:	b9 02 00 00 00       	mov    ecx,0x2
c0019f48:	b2 01                	mov    dl,0x1
c0019f4a:	31 c0                	xor    eax,eax
c0019f4c:	eb 02                	jmp    c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f4e:	31 d2                	xor    edx,edx
c0019f50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f54:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f5a:	88 11                	mov    BYTE PTR [ecx],dl
c0019f5c:	5a                   	pop    edx
c0019f5d:	5b                   	pop    ebx
c0019f5e:	5e                   	pop    esi
c0019f5f:	5f                   	pop    edi
c0019f60:	c3                   	ret    

c0019f61 <Krnl::smpEntry()>:
c0019f61:	eb fe                	jmp    c0019f61 <Krnl::smpEntry()>

c0019f63 <Krnl::startCPU(int)>:
c0019f63:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0019f68:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f6f:	0f 84 36 01 00 00    	je     c001a0ab <Krnl::startCPU(int)+0x148>
c0019f75:	53                   	push   ebx
c0019f76:	83 ec 10             	sub    esp,0x10
c0019f79:	fa                   	cli    
c0019f7a:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c0019f80:	6a 1b                	push   0x1b
c0019f82:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c0019f88:	e8 a5 4e ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019f8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f92:	89 c3                	mov    ebx,eax
c0019f94:	58                   	pop    eax
c0019f95:	5a                   	pop    edx
c0019f96:	53                   	push   ebx
c0019f97:	68 d8 c6 02 c0       	push   0xc002c6d8
c0019f9c:	e8 8c 8b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0019fa1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019faf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb9:	c1 e0 18             	shl    eax,0x18
c0019fbc:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fcb:	09 c2                	or     edx,eax
c0019fcd:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fd3:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fd9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fdf:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fe5:	80 cd c5             	or     ch,0xc5
c0019fe8:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fee:	f3 90                	pause  
c0019ff0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ff2:	0f ba e1 0c          	bt     ecx,0xc
c0019ff6:	72 f6                	jb     c0019fee <Krnl::startCPU(int)+0x8b>
c0019ff8:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ffe:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a004:	09 c1                	or     ecx,eax
c001a006:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a00c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a012:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a018:	80 cd 85             	or     ch,0x85
c001a01b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a021:	f3 90                	pause  
c001a023:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a025:	0f ba e1 0c          	bt     ecx,0xc
c001a029:	72 f6                	jb     c001a021 <Krnl::startCPU(int)+0xbe>
c001a02b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a035:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a03b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a041:	09 c1                	or     ecx,eax
c001a043:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a049:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a04f:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a055:	81 c9 02 06 00 00    	or     ecx,0x602
c001a05b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a061:	f3 90                	pause  
c001a063:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a065:	0f ba e1 0c          	bt     ecx,0xc
c001a069:	72 f6                	jb     c001a061 <Krnl::startCPU(int)+0xfe>
c001a06b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a075:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a07b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a081:	09 c8                	or     eax,ecx
c001a083:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a089:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a08f:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a094:	0d 02 06 00 00       	or     eax,0x602
c001a099:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a09f:	f3 90                	pause  
c001a0a1:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0a3:	0f ba e0 0c          	bt     eax,0xc
c001a0a7:	72 f6                	jb     c001a09f <Krnl::startCPU(int)+0x13c>
c001a0a9:	eb fe                	jmp    c001a0a9 <Krnl::startCPU(int)+0x146>
c001a0ab:	c3                   	ret    

c001a0ac <Krnl::startCPUs()>:
c001a0ac:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001a0b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0b7:	88 c2                	mov    dl,al
c001a0b9:	83 e2 0a             	and    edx,0xa
c001a0bc:	80 fa 0a             	cmp    dl,0xa
c001a0bf:	75 09                	jne    c001a0ca <Krnl::startCPUs()+0x1e>
c001a0c1:	a8 01                	test   al,0x1
c001a0c3:	74 05                	je     c001a0ca <Krnl::startCPUs()+0x1e>
c001a0c5:	e9 d1 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0ca:	c3                   	ret    
c001a0cb:	90                   	nop

c001a0cc <EnvVarContainer::getEnv(char const*)>:
c001a0cc:	57                   	push   edi
c001a0cd:	56                   	push   esi
c001a0ce:	53                   	push   ebx
c001a0cf:	31 db                	xor    ebx,ebx
c001a0d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0d5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0d7:	7e 2b                	jle    c001a104 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0d9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0e0:	50                   	push   eax
c001a0e1:	50                   	push   eax
c001a0e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0e5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0ec:	e8 a7 67 fe ff       	call   c0000898 <strcmp>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	85 c0                	test   eax,eax
c001a0f6:	75 09                	jne    c001a101 <EnvVarContainer::getEnv(char const*)+0x35>
c001a0f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0fb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0ff:	eb 05                	jmp    c001a106 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a101:	43                   	inc    ebx
c001a102:	eb d1                	jmp    c001a0d5 <EnvVarContainer::getEnv(char const*)+0x9>
c001a104:	31 c0                	xor    eax,eax
c001a106:	5b                   	pop    ebx
c001a107:	5e                   	pop    esi
c001a108:	5f                   	pop    edi
c001a109:	c3                   	ret    

c001a10a <EnvVarContainer::setEnv(char const*, char const*)>:
c001a10a:	55                   	push   ebp
c001a10b:	57                   	push   edi
c001a10c:	56                   	push   esi
c001a10d:	53                   	push   ebx
c001a10e:	83 ec 28             	sub    esp,0x28
c001a111:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a115:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a119:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a11d:	56                   	push   esi
c001a11e:	e8 49 66 fe ff       	call   c000076c <strlen>
c001a123:	40                   	inc    eax
c001a124:	89 04 24             	mov    DWORD PTR [esp],eax
c001a127:	e8 60 57 ff ff       	call   c000f88c <malloc>
c001a12c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a12f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a133:	e8 34 66 fe ff       	call   c000076c <strlen>
c001a138:	40                   	inc    eax
c001a139:	89 04 24             	mov    DWORD PTR [esp],eax
c001a13c:	e8 4b 57 ff ff       	call   c000f88c <malloc>
c001a141:	89 34 24             	mov    DWORD PTR [esp],esi
c001a144:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a148:	e8 1f 66 fe ff       	call   c000076c <strlen>
c001a14d:	83 c4 0c             	add    esp,0xc
c001a150:	40                   	inc    eax
c001a151:	50                   	push   eax
c001a152:	6a 00                	push   0x0
c001a154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a158:	e8 f3 65 fe ff       	call   c0000750 <memset>
c001a15d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a160:	e8 07 66 fe ff       	call   c000076c <strlen>
c001a165:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a169:	8d 48 01             	lea    ecx,[eax+0x1]
c001a16c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a16e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a171:	89 de                	mov    esi,ebx
c001a173:	e8 f4 65 fe ff       	call   c000076c <strlen>
c001a178:	83 c4 0c             	add    esp,0xc
c001a17b:	40                   	inc    eax
c001a17c:	50                   	push   eax
c001a17d:	6a 00                	push   0x0
c001a17f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a183:	e8 c8 65 fe ff       	call   c0000750 <memset>
c001a188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a18b:	e8 dc 65 fe ff       	call   c000076c <strlen>
c001a190:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a194:	8d 48 01             	lea    ecx,[eax+0x1]
c001a197:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a199:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a19c:	40                   	inc    eax
c001a19d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a1a0:	c1 e0 03             	shl    eax,0x3
c001a1a3:	5a                   	pop    edx
c001a1a4:	59                   	pop    ecx
c001a1a5:	50                   	push   eax
c001a1a6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1a9:	e8 ca 56 ff ff       	call   c000f878 <realloc>
c001a1ae:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a1b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1b5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a1b8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a1bc:	b9 08 00 00 00       	mov    ecx,0x8
c001a1c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1c3:	83 c4 2c             	add    esp,0x2c
c001a1c6:	5b                   	pop    ebx
c001a1c7:	5e                   	pop    esi
c001a1c8:	5f                   	pop    edi
c001a1c9:	5d                   	pop    ebp
c001a1ca:	c3                   	ret    
c001a1cb:	90                   	nop

c001a1cc <EnvVarContainer::deleteEnv(char const*)>:
c001a1cc:	c3                   	ret    
c001a1cd:	90                   	nop

c001a1ce <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1ce:	55                   	push   ebp
c001a1cf:	57                   	push   edi
c001a1d0:	56                   	push   esi
c001a1d1:	53                   	push   ebx
c001a1d2:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1d8:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a1df:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a1e6:	68 14 01 00 00       	push   0x114
c001a1eb:	e8 9c 56 ff ff       	call   c000f88c <malloc>
c001a1f0:	83 c4 0c             	add    esp,0xc
c001a1f3:	89 c5                	mov    ebp,eax
c001a1f5:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a1f8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a1ff:	50                   	push   eax
c001a200:	e8 87 8e ff ff       	call   c001308c <File::File(char const*, Process*)>
c001a205:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a208:	e8 51 91 ff ff       	call   c001335e <File::exists()>
c001a20d:	83 c4 10             	add    esp,0x10
c001a210:	84 c0                	test   al,al
c001a212:	75 32                	jne    c001a246 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a214:	51                   	push   ecx
c001a215:	51                   	push   ecx
c001a216:	6a 12                	push   0x12
c001a218:	55                   	push   ebp
c001a219:	e8 d2 8e ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001a21e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a221:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a224:	89 34 24             	mov    DWORD PTR [esp],esi
c001a227:	e8 40 65 fe ff       	call   c000076c <strlen>
c001a22c:	5a                   	pop    edx
c001a22d:	31 d2                	xor    edx,edx
c001a22f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a233:	51                   	push   ecx
c001a234:	56                   	push   esi
c001a235:	52                   	push   edx
c001a236:	50                   	push   eax
c001a237:	55                   	push   ebp
c001a238:	ff d7                	call   edi
c001a23a:	83 c4 14             	add    esp,0x14
c001a23d:	55                   	push   ebp
c001a23e:	e8 0b 8f ff ff       	call   c001314e <File::close()>
c001a243:	83 c4 10             	add    esp,0x10
c001a246:	31 f6                	xor    esi,esi
c001a248:	50                   	push   eax
c001a249:	68 00 01 00 00       	push   0x100
c001a24e:	6a 00                	push   0x0
c001a250:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a254:	50                   	push   eax
c001a255:	e8 f6 64 fe ff       	call   c0000750 <memset>
c001a25a:	58                   	pop    eax
c001a25b:	5a                   	pop    edx
c001a25c:	6a 01                	push   0x1
c001a25e:	55                   	push   ebp
c001a25f:	e8 8c 8e ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001a264:	83 c4 10             	add    esp,0x10
c001a267:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a26f:	83 ec 0c             	sub    esp,0xc
c001a272:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a275:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a279:	51                   	push   ecx
c001a27a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a27e:	52                   	push   edx
c001a27f:	6a 00                	push   0x0
c001a281:	6a 01                	push   0x1
c001a283:	55                   	push   ebp
c001a284:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a287:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a28b:	83 c4 20             	add    esp,0x20
c001a28e:	3c 0d                	cmp    al,0xd
c001a290:	0f 84 16 01 00 00    	je     c001a3ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a296:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a29b:	0f 84 fc 00 00 00    	je     c001a39d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a2a1:	3c 0a                	cmp    al,0xa
c001a2a3:	74 13                	je     c001a2b8 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a2a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2aa:	74 0c                	je     c001a2b8 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a2ac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a2b2:	0f 8e e5 00 00 00    	jle    c001a39d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a2b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2bc:	83 ec 0c             	sub    esp,0xc
c001a2bf:	8d 78 01             	lea    edi,[eax+0x1]
c001a2c2:	57                   	push   edi
c001a2c3:	e8 c4 55 ff ff       	call   c000f88c <malloc>
c001a2c8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2d0:	8d 56 04             	lea    edx,[esi+0x4]
c001a2d3:	89 14 24             	mov    DWORD PTR [esp],edx
c001a2d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2da:	e8 ad 55 ff ff       	call   c000f88c <malloc>
c001a2df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2e3:	83 c4 0c             	add    esp,0xc
c001a2e6:	57                   	push   edi
c001a2e7:	6a 00                	push   0x0
c001a2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ed:	e8 5e 64 fe ff       	call   c0000750 <memset>
c001a2f2:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a2f6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a2fa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a2fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a300:	83 c4 0c             	add    esp,0xc
c001a303:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a307:	52                   	push   edx
c001a308:	6a 00                	push   0x0
c001a30a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a30e:	e8 3d 64 fe ff       	call   c0000750 <memset>
c001a313:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a317:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a31b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a31e:	e8 49 64 fe ff       	call   c000076c <strlen>
c001a323:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a327:	89 c1                	mov    ecx,eax
c001a329:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a32b:	5e                   	pop    esi
c001a32c:	5f                   	pop    edi
c001a32d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a331:	68 e9 c6 02 c0       	push   0xc002c6e9
c001a336:	e8 f2 87 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a33b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a33d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a340:	40                   	inc    eax
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	89 03                	mov    DWORD PTR [ebx],eax
c001a346:	85 d2                	test   edx,edx
c001a348:	75 0c                	jne    c001a356 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a34a:	83 ec 0c             	sub    esp,0xc
c001a34d:	6a 08                	push   0x8
c001a34f:	e8 38 55 ff ff       	call   c000f88c <malloc>
c001a354:	eb 0c                	jmp    c001a362 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a356:	c1 e0 03             	shl    eax,0x3
c001a359:	51                   	push   ecx
c001a35a:	51                   	push   ecx
c001a35b:	50                   	push   eax
c001a35c:	52                   	push   edx
c001a35d:	e8 16 55 ff ff       	call   c000f878 <realloc>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a368:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a36a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a36d:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a371:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a375:	b9 08 00 00 00       	mov    ecx,0x8
c001a37a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a37c:	31 f6                	xor    esi,esi
c001a37e:	52                   	push   edx
c001a37f:	68 00 01 00 00       	push   0x100
c001a384:	6a 00                	push   0x0
c001a386:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a38a:	50                   	push   eax
c001a38b:	e8 c0 63 fe ff       	call   c0000750 <memset>
c001a390:	83 c4 10             	add    esp,0x10
c001a393:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a39b:	eb 0f                	jmp    c001a3ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a39d:	3c 3d                	cmp    al,0x3d
c001a39f:	74 07                	je     c001a3a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a3a1:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a3a5:	46                   	inc    esi
c001a3a6:	eb 04                	jmp    c001a3ac <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a3a8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a3ac:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3b1:	0f 85 b8 fe ff ff    	jne    c001a26f <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a3b7:	50                   	push   eax
c001a3b8:	50                   	push   eax
c001a3b9:	ff 33                	push   DWORD PTR [ebx]
c001a3bb:	68 f7 c6 02 c0       	push   0xc002c6f7
c001a3c0:	e8 68 87 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a3c5:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3cb:	5b                   	pop    ebx
c001a3cc:	5e                   	pop    esi
c001a3cd:	5f                   	pop    edi
c001a3ce:	5d                   	pop    ebp
c001a3cf:	c3                   	ret    

c001a3d0 <EnvVarContainer::__loadSystem()>:
c001a3d0:	83 ec 10             	sub    esp,0x10
c001a3d3:	68 c0 e6 02 c0       	push   0xc002e6c0
c001a3d8:	68 22 c7 02 c0       	push   0xc002c722
c001a3dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3e1:	e8 e8 fd ff ff       	call   c001a1ce <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3e6:	83 c4 1c             	add    esp,0x1c
c001a3e9:	c3                   	ret    

c001a3ea <EnvVarContainer::__loadUser()>:
c001a3ea:	c3                   	ret    
c001a3eb:	90                   	nop

c001a3ec <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a405:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a40c:	90                   	nop
c001a40d:	c3                   	ret    

c001a40e <EnvVarContainer::~EnvVarContainer()>:
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a415:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a418:	85 c0                	test   eax,eax
c001a41a:	74 1d                	je     c001a439 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a420:	8b 00                	mov    eax,DWORD PTR [eax]
c001a422:	85 c0                	test   eax,eax
c001a424:	74 13                	je     c001a439 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a42a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a42d:	83 ec 0c             	sub    esp,0xc
c001a430:	50                   	push   eax
c001a431:	e8 66 54 ff ff       	call   c000f89c <free>
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	90                   	nop
c001a43a:	83 c4 0c             	add    esp,0xc
c001a43d:	c3                   	ret    

c001a43e <Krnl::getEnv(Process*, char const*)>:
c001a43e:	53                   	push   ebx
c001a43f:	83 ec 08             	sub    esp,0x8
c001a442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a446:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a44a:	39 05 f0 26 03 c0    	cmp    DWORD PTR ds:0xc00326f0,eax
c001a450:	74 04                	je     c001a456 <Krnl::getEnv(Process*, char const*)+0x18>
c001a452:	85 c0                	test   eax,eax
c001a454:	75 0b                	jne    c001a461 <Krnl::getEnv(Process*, char const*)+0x23>
c001a456:	a1 d4 1c 03 c0       	mov    eax,ds:0xc0031cd4
c001a45b:	85 c0                	test   eax,eax
c001a45d:	75 19                	jne    c001a478 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a45f:	eb 27                	jmp    c001a488 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a461:	52                   	push   edx
c001a462:	52                   	push   edx
c001a463:	53                   	push   ebx
c001a464:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a46a:	e8 5d fc ff ff       	call   c001a0cc <EnvVarContainer::getEnv(char const*)>
c001a46f:	83 c4 10             	add    esp,0x10
c001a472:	85 c0                	test   eax,eax
c001a474:	75 28                	jne    c001a49e <Krnl::getEnv(Process*, char const*)+0x60>
c001a476:	eb de                	jmp    c001a456 <Krnl::getEnv(Process*, char const*)+0x18>
c001a478:	52                   	push   edx
c001a479:	52                   	push   edx
c001a47a:	53                   	push   ebx
c001a47b:	50                   	push   eax
c001a47c:	e8 4b fc ff ff       	call   c001a0cc <EnvVarContainer::getEnv(char const*)>
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	85 c0                	test   eax,eax
c001a486:	75 16                	jne    c001a49e <Krnl::getEnv(Process*, char const*)+0x60>
c001a488:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a48c:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a491:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a495:	83 c4 08             	add    esp,0x8
c001a498:	5b                   	pop    ebx
c001a499:	e9 2e fc ff ff       	jmp    c001a0cc <EnvVarContainer::getEnv(char const*)>
c001a49e:	83 c4 08             	add    esp,0x8
c001a4a1:	5b                   	pop    ebx
c001a4a2:	c3                   	ret    

c001a4a3 <Krnl::setEnvSystem(char const*, char const*)>:
c001a4a3:	83 ec 10             	sub    esp,0x10
c001a4a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4ae:	ff 35 d8 1c 03 c0    	push   DWORD PTR ds:0xc0031cd8
c001a4b4:	e8 51 fc ff ff       	call   c001a10a <EnvVarContainer::setEnv(char const*, char const*)>
c001a4b9:	83 c4 1c             	add    esp,0x1c
c001a4bc:	c3                   	ret    

c001a4bd <Krnl::setEnvUser(char const*, char const*)>:
c001a4bd:	a1 d4 1c 03 c0       	mov    eax,ds:0xc0031cd4
c001a4c2:	85 c0                	test   eax,eax
c001a4c4:	74 15                	je     c001a4db <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4c6:	83 ec 10             	sub    esp,0x10
c001a4c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4d1:	50                   	push   eax
c001a4d2:	e8 33 fc ff ff       	call   c001a10a <EnvVarContainer::setEnv(char const*, char const*)>
c001a4d7:	83 c4 1c             	add    esp,0x1c
c001a4da:	c3                   	ret    
c001a4db:	c3                   	ret    

c001a4dc <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4e0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4ea:	e9 1b fc ff ff       	jmp    c001a10a <EnvVarContainer::setEnv(char const*, char const*)>

c001a4ef <Krnl::deleteEnvSystem(char const*)>:
c001a4ef:	c3                   	ret    

c001a4f0 <Krnl::deleteEnvUser(char const*)>:
c001a4f0:	c3                   	ret    

c001a4f1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4f1:	c3                   	ret    

c001a4f2 <Krnl::newProcessEnv(Process*)>:
c001a4f2:	83 ec 28             	sub    esp,0x28
c001a4f5:	6a 0c                	push   0xc
c001a4f7:	e8 90 53 ff ff       	call   c000f88c <malloc>
c001a4fc:	5a                   	pop    edx
c001a4fd:	59                   	pop    ecx
c001a4fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a502:	50                   	push   eax
c001a503:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a507:	e8 e0 fe ff ff       	call   c001a3ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a50c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a510:	83 c4 2c             	add    esp,0x2c
c001a513:	c3                   	ret    

c001a514 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a514:	57                   	push   edi
c001a515:	56                   	push   esi
c001a516:	53                   	push   ebx
c001a517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a51b:	83 ec 0c             	sub    esp,0xc
c001a51e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a524:	6a 0c                	push   0xc
c001a526:	e8 61 53 ff ff       	call   c000f88c <malloc>
c001a52b:	89 c3                	mov    ebx,eax
c001a52d:	58                   	pop    eax
c001a52e:	5a                   	pop    edx
c001a52f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a533:	53                   	push   ebx
c001a534:	e8 b3 fe ff ff       	call   c001a3ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a539:	8b 07                	mov    eax,DWORD PTR [edi]
c001a53b:	89 03                	mov    DWORD PTR [ebx],eax
c001a53d:	c1 e0 03             	shl    eax,0x3
c001a540:	89 04 24             	mov    DWORD PTR [esp],eax
c001a543:	e8 44 53 ff ff       	call   c000f88c <malloc>
c001a548:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a54b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a54d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a550:	c1 e1 03             	shl    ecx,0x3
c001a553:	89 c7                	mov    edi,eax
c001a555:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a557:	83 c4 10             	add    esp,0x10
c001a55a:	89 d8                	mov    eax,ebx
c001a55c:	5b                   	pop    ebx
c001a55d:	5e                   	pop    esi
c001a55e:	5f                   	pop    edi
c001a55f:	c3                   	ret    

c001a560 <Krnl::loadSystemEnv()>:
c001a560:	53                   	push   ebx
c001a561:	83 ec 14             	sub    esp,0x14
c001a564:	6a 0c                	push   0xc
c001a566:	e8 21 53 ff ff       	call   c000f88c <malloc>
c001a56b:	89 c3                	mov    ebx,eax
c001a56d:	58                   	pop    eax
c001a56e:	5a                   	pop    edx
c001a56f:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001a575:	53                   	push   ebx
c001a576:	e8 71 fe ff ff       	call   c001a3ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a57b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a57e:	89 1d d8 1c 03 c0    	mov    DWORD PTR ds:0xc0031cd8,ebx
c001a584:	e8 47 fe ff ff       	call   c001a3d0 <EnvVarContainer::__loadSystem()>
c001a589:	83 c4 18             	add    esp,0x18
c001a58c:	5b                   	pop    ebx
c001a58d:	c3                   	ret    

c001a58e <Krnl::loadUserEnv()>:
c001a58e:	53                   	push   ebx
c001a58f:	83 ec 14             	sub    esp,0x14
c001a592:	6a 0c                	push   0xc
c001a594:	e8 f3 52 ff ff       	call   c000f88c <malloc>
c001a599:	89 c3                	mov    ebx,eax
c001a59b:	58                   	pop    eax
c001a59c:	5a                   	pop    edx
c001a59d:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001a5a3:	53                   	push   ebx
c001a5a4:	e8 43 fe ff ff       	call   c001a3ec <EnvVarContainer::EnvVarContainer(Process*)>
c001a5a9:	89 1d d4 1c 03 c0    	mov    DWORD PTR ds:0xc0031cd4,ebx
c001a5af:	83 c4 18             	add    esp,0x18
c001a5b2:	5b                   	pop    ebx
c001a5b3:	c3                   	ret    

c001a5b4 <Krnl::flushEnv()>:
c001a5b4:	c3                   	ret    

c001a5b5 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b9:	8b 15 d4 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cd4
c001a5bf:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5c5:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a5ca:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5cc:	03 01                	add    eax,DWORD PTR [ecx]
c001a5ce:	85 d2                	test   edx,edx
c001a5d0:	74 02                	je     c001a5d4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5d2:	03 02                	add    eax,DWORD PTR [edx]
c001a5d4:	c3                   	ret    

c001a5d5 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5d5:	57                   	push   edi
c001a5d6:	8b 0d d4 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031cd4
c001a5dc:	56                   	push   esi
c001a5dd:	85 c9                	test   ecx,ecx
c001a5df:	53                   	push   ebx
c001a5e0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5e8:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5f2:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5f4:	75 47                	jne    c001a63d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5f6:	39 c3                	cmp    ebx,eax
c001a5f8:	7c 47                	jl     c001a641 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5fa:	8b 15 d8 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cd8
c001a600:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a602:	01 c1                	add    ecx,eax
c001a604:	39 d9                	cmp    ecx,ebx
c001a606:	7e 6c                	jle    c001a674 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a608:	51                   	push   ecx
c001a609:	89 d9                	mov    ecx,ebx
c001a60b:	29 c1                	sub    ecx,eax
c001a60d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a610:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a614:	53                   	push   ebx
c001a615:	68 44 c7 02 c0       	push   0xc002c744
c001a61a:	e8 0e 85 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a61f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a625:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a627:	a1 d8 1c 03 c0       	mov    eax,ds:0xc0031cd8
c001a62c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a62f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a633:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a636:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a639:	89 06                	mov    DWORD PTR [esi],eax
c001a63b:	eb 51                	jmp    c001a68e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a63d:	39 c3                	cmp    ebx,eax
c001a63f:	7d 05                	jge    c001a646 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a641:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a644:	eb 20                	jmp    c001a666 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a646:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a648:	8d 14 07             	lea    edx,[edi+eax*1]
c001a64b:	39 da                	cmp    edx,ebx
c001a64d:	7e 04                	jle    c001a653 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a64f:	29 c3                	sub    ebx,eax
c001a651:	eb 10                	jmp    c001a663 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a653:	8b 0d d8 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031cd8
c001a659:	03 11                	add    edx,DWORD PTR [ecx]
c001a65b:	39 da                	cmp    edx,ebx
c001a65d:	7e 15                	jle    c001a674 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a65f:	29 c3                	sub    ebx,eax
c001a661:	29 fb                	sub    ebx,edi
c001a663:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a666:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a66a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a66d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a670:	89 06                	mov    DWORD PTR [esi],eax
c001a672:	eb 1d                	jmp    c001a691 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a674:	83 ec 0c             	sub    esp,0xc
c001a677:	68 58 c7 02 c0       	push   0xc002c758
c001a67c:	e8 18 00 00 00       	call   c001a699 <Krnl::panic(char const*)>
c001a681:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a687:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	89 f0                	mov    eax,esi
c001a693:	5b                   	pop    ebx
c001a694:	5e                   	pop    esi
c001a695:	5f                   	pop    edi
c001a696:	c2 04 00             	ret    0x4

c001a699 <Krnl::panic(char const*)>:
c001a699:	55                   	push   ebp
c001a69a:	89 e5                	mov    ebp,esp
c001a69c:	53                   	push   ebx
c001a69d:	83 ec 0c             	sub    esp,0xc
c001a6a0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6a3:	fa                   	cli    
c001a6a4:	c6 05 e4 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031ce4,0x1
c001a6ab:	53                   	push   ebx
c001a6ac:	c6 05 c4 e0 02 c0 00 	mov    BYTE PTR ds:0xc002e0c4,0x0
c001a6b3:	68 72 c7 02 c0       	push   0xc002c772
c001a6b8:	e8 70 84 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a6bd:	58                   	pop    eax
c001a6be:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a6c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c9:	e8 82 62 ff ff       	call   c0010950 <setActiveTerminal(VgaText*)>
c001a6ce:	83 c4 0c             	add    esp,0xc
c001a6d1:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a6d6:	6a 01                	push   0x1
c001a6d8:	6a 0f                	push   0xf
c001a6da:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e0:	e8 09 5d ff ff       	call   c00103ee <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6e5:	58                   	pop    eax
c001a6e6:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a6eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f1:	e8 a0 64 ff ff       	call   c0010b96 <VgaText::clearScreen()>
c001a6f6:	58                   	pop    eax
c001a6f7:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a6fc:	5a                   	pop    edx
c001a6fd:	68 8b c7 02 c0       	push   0xc002c78b
c001a702:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a708:	e8 cf 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a70d:	59                   	pop    ecx
c001a70e:	58                   	pop    eax
c001a70f:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a714:	68 30 c8 02 c0       	push   0xc002c830
c001a719:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a71f:	e8 b8 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a724:	58                   	pop    eax
c001a725:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a72a:	5a                   	pop    edx
c001a72b:	68 a7 c7 02 c0       	push   0xc002c7a7
c001a730:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a736:	e8 a1 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a73b:	59                   	pop    ecx
c001a73c:	58                   	pop    eax
c001a73d:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a742:	53                   	push   ebx
c001a743:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a749:	e8 8e 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a74e:	58                   	pop    eax
c001a74f:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a754:	5a                   	pop    edx
c001a755:	68 c7 c7 02 c0       	push   0xc002c7c7
c001a75a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a760:	e8 77 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a765:	a1 e0 1c 03 c0       	mov    eax,ds:0xc0031ce0
c001a76a:	83 c4 10             	add    esp,0x10
c001a76d:	85 c0                	test   eax,eax
c001a76f:	74 02                	je     c001a773 <Krnl::panic(char const*)+0xda>
c001a771:	ff d0                	call   eax
c001a773:	83 ec 0c             	sub    esp,0xc
c001a776:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a779:	e8 9e 32 00 00       	call   c001da1c <Thr::getDriverNameFromAddress(unsigned long)>
c001a77e:	83 c4 10             	add    esp,0x10
c001a781:	89 c3                	mov    ebx,eax
c001a783:	85 c0                	test   eax,eax
c001a785:	0f 84 50 02 00 00    	je     c001a9db <Krnl::panic(char const*)+0x342>
c001a78b:	83 ec 08             	sub    esp,0x8
c001a78e:	8b 15 f0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326f0
c001a794:	68 6c c8 02 c0       	push   0xc002c86c
c001a799:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a79f:	e8 38 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a7a4:	58                   	pop    eax
c001a7a5:	5a                   	pop    edx
c001a7a6:	8b 15 f0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326f0
c001a7ac:	68 a7 c7 02 c0       	push   0xc002c7a7
c001a7b1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7b7:	e8 20 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a7bc:	59                   	pop    ecx
c001a7bd:	58                   	pop    eax
c001a7be:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a7c3:	53                   	push   ebx
c001a7c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ca:	e8 0d 65 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	83 ec 08             	sub    esp,0x8
c001a7d5:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a7da:	68 c6 c7 02 c0       	push   0xc002c7c6
c001a7df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e5:	e8 f2 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a7ea:	58                   	pop    eax
c001a7eb:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a7f0:	5a                   	pop    edx
c001a7f1:	68 c4 c8 02 c0       	push   0xc002c8c4
c001a7f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fc:	e8 db 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a801:	59                   	pop    ecx
c001a802:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a807:	5b                   	pop    ebx
c001a808:	68 04 c9 02 c0       	push   0xc002c904
c001a80d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a813:	e8 c4 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a818:	58                   	pop    eax
c001a819:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a81e:	5a                   	pop    edx
c001a81f:	68 b2 c7 02 c0       	push   0xc002c7b2
c001a824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82a:	e8 ad 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a82f:	59                   	pop    ecx
c001a830:	5b                   	pop    ebx
c001a831:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a834:	68 ca c7 02 c0       	push   0xc002c7ca
c001a839:	e8 ef 82 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a83e:	58                   	pop    eax
c001a83f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a842:	5a                   	pop    edx
c001a843:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a846:	68 d3 c7 02 c0       	push   0xc002c7d3
c001a84b:	e8 dd 82 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a850:	59                   	pop    ecx
c001a851:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a854:	5b                   	pop    ebx
c001a855:	8b 00                	mov    eax,DWORD PTR [eax]
c001a857:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a85a:	68 dc c7 02 c0       	push   0xc002c7dc
c001a85f:	e8 c9 82 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001a864:	58                   	pop    eax
c001a865:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a86a:	5a                   	pop    edx
c001a86b:	68 48 c9 02 c0       	push   0xc002c948
c001a870:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a876:	e8 61 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a87b:	59                   	pop    ecx
c001a87c:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a881:	5b                   	pop    ebx
c001a882:	68 e5 c7 02 c0       	push   0xc002c7e5
c001a887:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a88d:	e8 4a 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a892:	0f 20 c0             	mov    eax,cr0
c001a895:	5a                   	pop    edx
c001a896:	59                   	pop    ecx
c001a897:	50                   	push   eax
c001a898:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a89d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a3:	e8 5a 64 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a8a8:	5b                   	pop    ebx
c001a8a9:	58                   	pop    eax
c001a8aa:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a8af:	68 ef c7 02 c0       	push   0xc002c7ef
c001a8b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ba:	e8 1d 64 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a8bf:	0f 20 d0             	mov    eax,cr2
c001a8c2:	5a                   	pop    edx
c001a8c3:	59                   	pop    ecx
c001a8c4:	50                   	push   eax
c001a8c5:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a8ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d0:	e8 2d 64 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a8d5:	5b                   	pop    ebx
c001a8d6:	58                   	pop    eax
c001a8d7:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a8dc:	68 f9 c7 02 c0       	push   0xc002c7f9
c001a8e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e7:	e8 f0 63 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a8ec:	0f 20 d8             	mov    eax,cr3
c001a8ef:	5a                   	pop    edx
c001a8f0:	59                   	pop    ecx
c001a8f1:	50                   	push   eax
c001a8f2:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a8f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8fd:	e8 00 64 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a902:	5b                   	pop    ebx
c001a903:	58                   	pop    eax
c001a904:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a909:	68 0c c8 02 c0       	push   0xc002c80c
c001a90e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a914:	e8 c3 63 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a919:	0f 20 e0             	mov    eax,cr4
c001a91c:	5a                   	pop    edx
c001a91d:	59                   	pop    ecx
c001a91e:	50                   	push   eax
c001a91f:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a924:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92a:	e8 d3 63 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a92f:	5b                   	pop    ebx
c001a930:	58                   	pop    eax
c001a931:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a936:	68 16 c8 02 c0       	push   0xc002c816
c001a93b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a941:	e8 96 63 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a946:	5a                   	pop    edx
c001a947:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a94c:	59                   	pop    ecx
c001a94d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a953:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a956:	50                   	push   eax
c001a957:	e8 a6 63 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a95c:	5b                   	pop    ebx
c001a95d:	58                   	pop    eax
c001a95e:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a963:	68 e3 d6 02 c0       	push   0xc002d6e3
c001a968:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a96e:	e8 69 63 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a973:	5a                   	pop    edx
c001a974:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a979:	59                   	pop    ecx
c001a97a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a980:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a983:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a986:	50                   	push   eax
c001a987:	e8 76 63 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a98c:	5b                   	pop    ebx
c001a98d:	58                   	pop    eax
c001a98e:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a993:	68 e3 d6 02 c0       	push   0xc002d6e3
c001a998:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a99e:	e8 39 63 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a9a3:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a9a8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9b1:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9b3:	59                   	pop    ecx
c001a9b4:	5b                   	pop    ebx
c001a9b5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9b8:	50                   	push   eax
c001a9b9:	e8 44 63 ff ff       	call   c0010d02 <VgaText::putx(unsigned int)>
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	b2 fe                	mov    dl,0xfe
c001a9c3:	e4 60                	in     al,0x60
c001a9c5:	3c 1c                	cmp    al,0x1c
c001a9c7:	74 04                	je     c001a9cd <Krnl::panic(char const*)+0x334>
c001a9c9:	3c 5a                	cmp    al,0x5a
c001a9cb:	75 f6                	jne    c001a9c3 <Krnl::panic(char const*)+0x32a>
c001a9cd:	e4 64                	in     al,0x64
c001a9cf:	a8 02                	test   al,0x2
c001a9d1:	75 fa                	jne    c001a9cd <Krnl::panic(char const*)+0x334>
c001a9d3:	88 d0                	mov    al,dl
c001a9d5:	e6 64                	out    0x64,al
c001a9d7:	fa                   	cli    
c001a9d8:	f4                   	hlt    
c001a9d9:	eb e8                	jmp    c001a9c3 <Krnl::panic(char const*)+0x32a>
c001a9db:	50                   	push   eax
c001a9dc:	50                   	push   eax
c001a9dd:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a9e2:	68 98 c8 02 c0       	push   0xc002c898
c001a9e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ed:	e8 ea 62 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001a9f2:	58                   	pop    eax
c001a9f3:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001a9f8:	5a                   	pop    edx
c001a9f9:	68 a7 c7 02 c0       	push   0xc002c7a7
c001a9fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa04:	e8 d3 62 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001aa09:	59                   	pop    ecx
c001aa0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa0f:	5b                   	pop    ebx
c001aa10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa13:	83 c0 0c             	add    eax,0xc
c001aa16:	50                   	push   eax
c001aa17:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001aa1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa22:	e8 b5 62 ff ff       	call   c0010cdc <VgaText::puts(char const*)>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	e9 a3 fd ff ff       	jmp    c001a7d2 <Krnl::panic(char const*)+0x139>

c001aa2f <Net::switchEndian16(unsigned short)>:
c001aa2f:	83 ec 04             	sub    esp,0x4
c001aa32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa36:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa3a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa3e:	c1 f8 08             	sar    eax,0x8
c001aa41:	89 c2                	mov    edx,eax
c001aa43:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa47:	c1 e0 08             	shl    eax,0x8
c001aa4a:	09 d0                	or     eax,edx
c001aa4c:	83 c4 04             	add    esp,0x4
c001aa4f:	c3                   	ret    

c001aa50 <Net::switchEndian32(unsigned int)>:
c001aa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa54:	c1 e8 18             	shr    eax,0x18
c001aa57:	89 c2                	mov    edx,eax
c001aa59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa5d:	c1 e0 08             	shl    eax,0x8
c001aa60:	25 00 00 ff 00       	and    eax,0xff0000
c001aa65:	09 c2                	or     edx,eax
c001aa67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6b:	c1 e8 08             	shr    eax,0x8
c001aa6e:	25 00 ff 00 00       	and    eax,0xff00
c001aa73:	09 c2                	or     edx,eax
c001aa75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa79:	c1 e0 18             	shl    eax,0x18
c001aa7c:	09 d0                	or     eax,edx
c001aa7e:	c3                   	ret    

c001aa7f <Net::crc32Calc(unsigned char*, int)>:
c001aa7f:	83 ec 10             	sub    esp,0x10
c001aa82:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa87:	75 07                	jne    c001aa90 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa89:	b8 00 00 00 00       	mov    eax,0x0
c001aa8e:	eb 7c                	jmp    c001ab0c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa95:	7f 07                	jg     c001aa9e <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa97:	b8 00 00 00 00       	mov    eax,0x0
c001aa9c:	eb 6e                	jmp    c001ab0c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa9e:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaa6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aaae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aab2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab6:	7d 4e                	jge    c001ab06 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aabc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aac0:	01 d0                	add    eax,edx
c001aac2:	8a 00                	mov    al,BYTE PTR [eax]
c001aac4:	0f b6 c0             	movzx  eax,al
c001aac7:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aacb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aad3:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aad8:	7f 26                	jg     c001ab00 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aade:	83 e0 01             	and    eax,0x1
c001aae1:	74 0d                	je     c001aaf0 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae7:	d1 e8                	shr    eax,1
c001aae9:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaee:	eb 06                	jmp    c001aaf6 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf4:	d1 e8                	shr    eax,1
c001aaf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aafa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aafe:	eb d3                	jmp    c001aad3 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab00:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab04:	eb a8                	jmp    c001aaae <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab0a:	f7 d0                	not    eax
c001ab0c:	83 c4 10             	add    esp,0x10
c001ab0f:	c3                   	ret    

c001ab10 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab10:	57                   	push   edi
c001ab11:	56                   	push   esi
c001ab12:	53                   	push   ebx
c001ab13:	83 ec 60             	sub    esp,0x60
c001ab16:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab1d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ab21:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ab29:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ab2e:	7f 1a                	jg     c001ab4a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ab30:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab37:	8d 50 01             	lea    edx,[eax+0x1]
c001ab3a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab41:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab44:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ab48:	eb df                	jmp    c001ab29 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001ab4a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab51:	8d 50 01             	lea    edx,[eax+0x1]
c001ab54:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ab5b:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab5e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab69:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001ab6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab71:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001ab79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab85:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab8d:	89 c6                	mov    esi,eax
c001ab8f:	89 d7                	mov    edi,edx
c001ab91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab93:	89 c8                	mov    eax,ecx
c001ab95:	89 fa                	mov    edx,edi
c001ab97:	89 f3                	mov    ebx,esi
c001ab99:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aba1:	89 04 24             	mov    DWORD PTR [esp],eax
c001aba4:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001abac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abb3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001abb7:	8d 44 24 78          	lea    eax,[esp+0x78]
c001abbb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001abbf:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001abc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abcb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001abcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abd3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abd7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001abdb:	89 c6                	mov    esi,eax
c001abdd:	89 d7                	mov    edi,edx
c001abdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abe1:	89 c8                	mov    eax,ecx
c001abe3:	89 fa                	mov    edx,edi
c001abe5:	89 f3                	mov    ebx,esi
c001abe7:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001abeb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001abef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abf3:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001abfb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac02:	0f b7 c0             	movzx  eax,ax
c001ac05:	c1 f8 08             	sar    eax,0x8
c001ac08:	89 c1                	mov    ecx,eax
c001ac0a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac11:	8d 50 01             	lea    edx,[eax+0x1]
c001ac14:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ac1b:	88 ca                	mov    dl,cl
c001ac1d:	88 10                	mov    BYTE PTR [eax],dl
c001ac1f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ac26:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac2d:	8d 48 01             	lea    ecx,[eax+0x1]
c001ac30:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ac37:	88 10                	mov    BYTE PTR [eax],dl
c001ac39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ac3d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ac41:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ac48:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001ac4c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001ac50:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001ac54:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ac58:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ac5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac60:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ac64:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ac68:	89 c6                	mov    esi,eax
c001ac6a:	89 d7                	mov    edi,edx
c001ac6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac6e:	89 c8                	mov    eax,ecx
c001ac70:	89 fa                	mov    edx,edi
c001ac72:	89 f3                	mov    ebx,esi
c001ac74:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ac78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ac7c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac80:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ac84:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001ac8b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac92:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001ac96:	50                   	push   eax
c001ac97:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ac9b:	e8 df fd ff ff       	call   c001aa7f <Net::crc32Calc(unsigned char*, int)>
c001aca0:	83 c4 08             	add    esp,0x8
c001aca3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aca7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001acab:	c1 e8 18             	shr    eax,0x18
c001acae:	89 c1                	mov    ecx,eax
c001acb0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acb7:	8d 50 01             	lea    edx,[eax+0x1]
c001acba:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001acc1:	88 ca                	mov    dl,cl
c001acc3:	88 10                	mov    BYTE PTR [eax],dl
c001acc5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001acc9:	c1 e8 10             	shr    eax,0x10
c001accc:	89 c1                	mov    ecx,eax
c001acce:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acd5:	8d 50 01             	lea    edx,[eax+0x1]
c001acd8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001acdf:	88 ca                	mov    dl,cl
c001ace1:	88 10                	mov    BYTE PTR [eax],dl
c001ace3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ace7:	c1 e8 08             	shr    eax,0x8
c001acea:	89 c1                	mov    ecx,eax
c001acec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001acf3:	8d 50 01             	lea    edx,[eax+0x1]
c001acf6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001acfd:	88 ca                	mov    dl,cl
c001acff:	88 10                	mov    BYTE PTR [eax],dl
c001ad01:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad08:	8d 50 01             	lea    edx,[eax+0x1]
c001ad0b:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ad12:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ad16:	88 10                	mov    BYTE PTR [eax],dl
c001ad18:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ad1c:	83 c4 60             	add    esp,0x60
c001ad1f:	5b                   	pop    ebx
c001ad20:	5e                   	pop    esi
c001ad21:	5f                   	pop    edi
c001ad22:	c3                   	ret    

c001ad23 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ad23:	57                   	push   edi
c001ad24:	56                   	push   esi
c001ad25:	53                   	push   ebx
c001ad26:	83 ec 70             	sub    esp,0x70
c001ad29:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad30:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001ad34:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001ad3c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad43:	83 c0 0e             	add    eax,0xe
c001ad46:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ad4a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad55:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ad5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ad65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad69:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ad6d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ad71:	89 c6                	mov    esi,eax
c001ad73:	89 d7                	mov    edi,edx
c001ad75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad77:	89 c8                	mov    eax,ecx
c001ad79:	89 fa                	mov    edx,edi
c001ad7b:	89 f3                	mov    ebx,esi
c001ad7d:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001ad81:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ad85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad89:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ad91:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad98:	83 c0 08             	add    eax,0x8
c001ad9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001ad9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ada6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001adaa:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001adb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001adb6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001adba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adbe:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001adc2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001adc6:	89 c6                	mov    esi,eax
c001adc8:	89 d7                	mov    edi,edx
c001adca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adcc:	89 c8                	mov    eax,ecx
c001adce:	89 fa                	mov    edx,edi
c001add0:	89 f3                	mov    ebx,esi
c001add2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001add6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001adde:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ade6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aded:	8d 50 01             	lea    edx,[eax+0x1]
c001adf0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001adf7:	8a 00                	mov    al,BYTE PTR [eax]
c001adf9:	0f b6 c0             	movzx  eax,al
c001adfc:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ae01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae08:	8d 50 01             	lea    edx,[eax+0x1]
c001ae0b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ae12:	8a 00                	mov    al,BYTE PTR [eax]
c001ae14:	0f b6 c0             	movzx  eax,al
c001ae17:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ae1c:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ae21:	c1 e0 08             	shl    eax,0x8
c001ae24:	89 c2                	mov    edx,eax
c001ae26:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae2a:	09 d0                	or     eax,edx
c001ae2c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ae33:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ae37:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001ae3f:	75 46                	jne    c001ae87 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ae41:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ae48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae4b:	66 3d dc 05          	cmp    ax,0x5dc
c001ae4f:	77 16                	ja     c001ae67 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001ae51:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ae58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae5b:	0f b7 c0             	movzx  eax,ax
c001ae5e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001ae65:	eb 20                	jmp    c001ae87 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001ae67:	83 ec 0c             	sub    esp,0xc
c001ae6a:	68 70 c9 02 c0       	push   0xc002c970
c001ae6f:	e8 b9 7c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ae74:	83 c4 10             	add    esp,0x10
c001ae77:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ae7e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ae82:	e9 17 01 00 00       	jmp    c001af9e <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ae87:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae8e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ae95:	8b 12                	mov    edx,DWORD PTR [edx]
c001ae97:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae9b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aea2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001aea6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aeaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aeae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aeb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aebe:	89 c6                	mov    esi,eax
c001aec0:	89 d7                	mov    edi,edx
c001aec2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aec4:	89 c8                	mov    eax,ecx
c001aec6:	89 fa                	mov    edx,edi
c001aec8:	89 f3                	mov    ebx,esi
c001aeca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aece:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aed2:	89 04 24             	mov    DWORD PTR [esp],eax
c001aed5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aedc:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aee3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aeea:	8d 50 01             	lea    edx,[eax+0x1]
c001aeed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aef4:	8a 00                	mov    al,BYTE PTR [eax]
c001aef6:	0f b6 c0             	movzx  eax,al
c001aef9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001aefd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af04:	8d 50 01             	lea    edx,[eax+0x1]
c001af07:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af0e:	8a 00                	mov    al,BYTE PTR [eax]
c001af10:	0f b6 c0             	movzx  eax,al
c001af13:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001af17:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af1e:	8d 50 01             	lea    edx,[eax+0x1]
c001af21:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af28:	8a 00                	mov    al,BYTE PTR [eax]
c001af2a:	0f b6 c0             	movzx  eax,al
c001af2d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001af31:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af38:	8d 50 01             	lea    edx,[eax+0x1]
c001af3b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001af42:	8a 00                	mov    al,BYTE PTR [eax]
c001af44:	0f b6 c0             	movzx  eax,al
c001af47:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001af4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af4f:	c1 e0 18             	shl    eax,0x18
c001af52:	89 c2                	mov    edx,eax
c001af54:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001af58:	c1 e0 10             	shl    eax,0x10
c001af5b:	09 c2                	or     edx,eax
c001af5d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af61:	c1 e0 08             	shl    eax,0x8
c001af64:	09 d0                	or     eax,edx
c001af66:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001af6a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af75:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001af79:	83 e8 04             	sub    eax,0x4
c001af7c:	83 ec 08             	sub    esp,0x8
c001af7f:	50                   	push   eax
c001af80:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001af84:	e8 f6 fa ff ff       	call   c001aa7f <Net::crc32Calc(unsigned char*, int)>
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001af90:	0f 94 c2             	sete   dl
c001af93:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001af9a:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001af9d:	90                   	nop
c001af9e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afa5:	83 c4 70             	add    esp,0x70
c001afa8:	5b                   	pop    ebx
c001afa9:	5e                   	pop    esi
c001afaa:	5f                   	pop    edi
c001afab:	c2 04 00             	ret    0x4

c001afae <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001afae:	55                   	push   ebp
c001afaf:	57                   	push   edi
c001afb0:	56                   	push   esi
c001afb1:	53                   	push   ebx
c001afb2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001afb8:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001afbf:	8a 1e                	mov    bl,BYTE PTR [esi]
c001afc1:	8d 6e 01             	lea    ebp,[esi+0x1]
c001afc4:	80 fb 40             	cmp    bl,0x40
c001afc7:	75 1b                	jne    c001afe4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001afc9:	8a 16                	mov    dl,BYTE PTR [esi]
c001afcb:	84 d2                	test   dl,dl
c001afcd:	0f 84 f1 00 00 00    	je     c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001afd3:	8d 46 01             	lea    eax,[esi+0x1]
c001afd6:	80 fa 3a             	cmp    dl,0x3a
c001afd9:	74 04                	je     c001afdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001afdb:	89 c6                	mov    esi,eax
c001afdd:	eb ea                	jmp    c001afc9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001afdf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001afe2:	89 c6                	mov    esi,eax
c001afe4:	50                   	push   eax
c001afe5:	6a 40                	push   0x40
c001afe7:	6a 00                	push   0x0
c001afe9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001afed:	50                   	push   eax
c001afee:	e8 5d 57 fe ff       	call   c0000750 <memset>
c001aff3:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001affa:	31 c0                	xor    eax,eax
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b001:	84 c9                	test   cl,cl
c001b003:	0f 84 bb 00 00 00    	je     c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b009:	3d c7 00 00 00       	cmp    eax,0xc7
c001b00e:	0f 8f b0 00 00 00    	jg     c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b014:	80 f9 0a             	cmp    cl,0xa
c001b017:	0f 85 98 00 00 00    	jne    c001b0b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b01d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b022:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b026:	a8 df                	test   al,0xdf
c001b028:	0f 94 c1             	sete   cl
c001b02b:	3c 23                	cmp    al,0x23
c001b02d:	0f 94 c2             	sete   dl
c001b030:	08 d1                	or     cl,dl
c001b032:	75 4a                	jne    c001b07e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b034:	8d 50 f7             	lea    edx,[eax-0x9]
c001b037:	80 fa 01             	cmp    dl,0x1
c001b03a:	76 42                	jbe    c001b07e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b03c:	3c 5b                	cmp    al,0x5b
c001b03e:	75 42                	jne    c001b082 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b040:	80 fb 40             	cmp    bl,0x40
c001b043:	75 39                	jne    c001b07e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b045:	83 ec 0c             	sub    esp,0xc
c001b048:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b04c:	52                   	push   edx
c001b04d:	e8 1a 57 fe ff       	call   c000076c <strlen>
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	83 f8 3f             	cmp    eax,0x3f
c001b058:	77 6a                	ja     c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b05a:	50                   	push   eax
c001b05b:	50                   	push   eax
c001b05c:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b060:	52                   	push   edx
c001b061:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b065:	52                   	push   edx
c001b066:	e8 a1 57 fe ff       	call   c000080c <strcpy>
c001b06b:	58                   	pop    eax
c001b06c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b070:	52                   	push   edx
c001b071:	e8 f6 56 fe ff       	call   c000076c <strlen>
c001b076:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b07b:	83 c4 10             	add    esp,0x10
c001b07e:	31 d2                	xor    edx,edx
c001b080:	eb 3a                	jmp    c001b0bc <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b082:	80 fb 40             	cmp    bl,0x40
c001b085:	74 06                	je     c001b08d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b087:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b08b:	eb 20                	jmp    c001b0ad <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b08d:	50                   	push   eax
c001b08e:	50                   	push   eax
c001b08f:	55                   	push   ebp
c001b090:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b094:	50                   	push   eax
c001b095:	e8 fe 57 fe ff       	call   c0000898 <strcmp>
c001b09a:	83 c4 10             	add    esp,0x10
c001b09d:	85 c0                	test   eax,eax
c001b09f:	75 dd                	jne    c001b07e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0a1:	eb e4                	jmp    c001b087 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0a3:	8d 50 01             	lea    edx,[eax+0x1]
c001b0a6:	80 f9 3d             	cmp    cl,0x3d
c001b0a9:	74 1d                	je     c001b0c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0ab:	89 d0                	mov    eax,edx
c001b0ad:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0af:	84 c9                	test   cl,cl
c001b0b1:	75 f0                	jne    c001b0a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b0b3:	eb 0f                	jmp    c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0b5:	8d 50 01             	lea    edx,[eax+0x1]
c001b0b8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b0bc:	47                   	inc    edi
c001b0bd:	89 d0                	mov    eax,edx
c001b0bf:	e9 3b ff ff ff       	jmp    c001afff <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b0c4:	31 c0                	xor    eax,eax
c001b0c6:	eb 33                	jmp    c001b0fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b0c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0cc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b0cf:	50                   	push   eax
c001b0d0:	50                   	push   eax
c001b0d1:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b0d5:	50                   	push   eax
c001b0d6:	56                   	push   esi
c001b0d7:	e8 bc 57 fe ff       	call   c0000898 <strcmp>
c001b0dc:	83 c4 10             	add    esp,0x10
c001b0df:	85 c0                	test   eax,eax
c001b0e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0e5:	75 97                	jne    c001b07e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0e7:	51                   	push   ecx
c001b0e8:	51                   	push   ecx
c001b0e9:	52                   	push   edx
c001b0ea:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b0f1:	e8 16 57 fe ff       	call   c000080c <strcpy>
c001b0f6:	83 c4 10             	add    esp,0x10
c001b0f9:	b0 01                	mov    al,0x1
c001b0fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b101:	5b                   	pop    ebx
c001b102:	5e                   	pop    esi
c001b103:	5f                   	pop    edi
c001b104:	5d                   	pop    ebp
c001b105:	c3                   	ret    

c001b106 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b106:	57                   	push   edi
c001b107:	56                   	push   esi
c001b108:	53                   	push   ebx
c001b109:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b10f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b116:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b11d:	53                   	push   ebx
c001b11e:	e8 49 56 fe ff       	call   c000076c <strlen>
c001b123:	89 34 24             	mov    DWORD PTR [esp],esi
c001b126:	89 c7                	mov    edi,eax
c001b128:	e8 3f 56 fe ff       	call   c000076c <strlen>
c001b12d:	83 c4 10             	add    esp,0x10
c001b130:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b134:	3d ff 00 00 00       	cmp    eax,0xff
c001b139:	0f 87 d3 00 00 00    	ja     c001b212 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b13f:	57                   	push   edi
c001b140:	57                   	push   edi
c001b141:	56                   	push   esi
c001b142:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b146:	56                   	push   esi
c001b147:	e8 c0 56 fe ff       	call   c000080c <strcpy>
c001b14c:	58                   	pop    eax
c001b14d:	5a                   	pop    edx
c001b14e:	68 c5 ce 02 c0       	push   0xc002cec5
c001b153:	56                   	push   esi
c001b154:	e8 f3 57 fe ff       	call   c000094c <strcat>
c001b159:	59                   	pop    ecx
c001b15a:	5f                   	pop    edi
c001b15b:	53                   	push   ebx
c001b15c:	56                   	push   esi
c001b15d:	e8 ea 57 fe ff       	call   c000094c <strcat>
c001b162:	58                   	pop    eax
c001b163:	5a                   	pop    edx
c001b164:	68 bc c9 02 c0       	push   0xc002c9bc
c001b169:	56                   	push   esi
c001b16a:	e8 dd 57 fe ff       	call   c000094c <strcat>
c001b16f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b176:	e8 11 47 ff ff       	call   c000f88c <malloc>
c001b17b:	83 c4 0c             	add    esp,0xc
c001b17e:	89 c3                	mov    ebx,eax
c001b180:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001b186:	56                   	push   esi
c001b187:	50                   	push   eax
c001b188:	e8 ff 7e ff ff       	call   c001308c <File::File(char const*, Process*)>
c001b18d:	83 c4 10             	add    esp,0x10
c001b190:	85 db                	test   ebx,ebx
c001b192:	74 7e                	je     c001b212 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b194:	51                   	push   ecx
c001b195:	51                   	push   ecx
c001b196:	6a 01                	push   0x1
c001b198:	53                   	push   ebx
c001b199:	e8 52 7f ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001b19e:	83 c4 10             	add    esp,0x10
c001b1a1:	85 c0                	test   eax,eax
c001b1a3:	74 08                	je     c001b1ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1a5:	83 ec 0c             	sub    esp,0xc
c001b1a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1aa:	53                   	push   ebx
c001b1ab:	eb 5f                	jmp    c001b20c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1ad:	52                   	push   edx
c001b1ae:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b1b2:	50                   	push   eax
c001b1b3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b1b7:	50                   	push   eax
c001b1b8:	53                   	push   ebx
c001b1b9:	e8 de 81 ff ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c001b1be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1c2:	83 c4 10             	add    esp,0x10
c001b1c5:	89 c1                	mov    ecx,eax
c001b1c7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b1cb:	74 31                	je     c001b1fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b1cd:	83 ec 0c             	sub    esp,0xc
c001b1d0:	50                   	push   eax
c001b1d1:	e8 b6 46 ff ff       	call   c000f88c <malloc>
c001b1d6:	89 c6                	mov    esi,eax
c001b1d8:	58                   	pop    eax
c001b1d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1db:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b1df:	52                   	push   edx
c001b1e0:	56                   	push   esi
c001b1e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b1e9:	53                   	push   ebx
c001b1ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b1ed:	83 c4 20             	add    esp,0x20
c001b1f0:	85 c0                	test   eax,eax
c001b1f2:	75 0a                	jne    c001b1fe <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b1f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1f8:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b1fc:	74 18                	je     c001b216 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b1fe:	83 ec 0c             	sub    esp,0xc
c001b201:	53                   	push   ebx
c001b202:	e8 47 7f ff ff       	call   c001314e <File::close()>
c001b207:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b209:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b20c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b20f:	83 c4 10             	add    esp,0x10
c001b212:	31 c0                	xor    eax,eax
c001b214:	eb 3b                	jmp    c001b251 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b216:	83 ec 0c             	sub    esp,0xc
c001b219:	53                   	push   ebx
c001b21a:	e8 2f 7f ff ff       	call   c001314e <File::close()>
c001b21f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b221:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b224:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b227:	83 c4 0c             	add    esp,0xc
c001b22a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b231:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b238:	56                   	push   esi
c001b239:	e8 70 fd ff ff       	call   c001afae <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b23e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b241:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b245:	e8 52 46 ff ff       	call   c000f89c <free>
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b251:	81 c4 20 01 00 00    	add    esp,0x120
c001b257:	5b                   	pop    ebx
c001b258:	5e                   	pop    esi
c001b259:	5f                   	pop    edi
c001b25a:	c3                   	ret    

c001b25b <Reg::getLine(char*, char*, char*)>:
c001b25b:	57                   	push   edi
c001b25c:	56                   	push   esi
c001b25d:	53                   	push   ebx
c001b25e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b262:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b266:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b26a:	57                   	push   edi
c001b26b:	56                   	push   esi
c001b26c:	53                   	push   ebx
c001b26d:	68 c1 c9 02 c0       	push   0xc002c9c1
c001b272:	e8 8f fe ff ff       	call   c001b106 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	84 c0                	test   al,al
c001b27c:	75 10                	jne    c001b28e <Reg::getLine(char*, char*, char*)+0x33>
c001b27e:	57                   	push   edi
c001b27f:	56                   	push   esi
c001b280:	53                   	push   ebx
c001b281:	68 e6 c9 02 c0       	push   0xc002c9e6
c001b286:	e8 7b fe ff ff       	call   c001b106 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b28b:	83 c4 10             	add    esp,0x10
c001b28e:	5b                   	pop    ebx
c001b28f:	5e                   	pop    esi
c001b290:	5f                   	pop    edi
c001b291:	c3                   	ret    

c001b292 <Reg::readInt(char*, char*, int*)>:
c001b292:	55                   	push   ebp
c001b293:	57                   	push   edi
c001b294:	56                   	push   esi
c001b295:	53                   	push   ebx
c001b296:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b29c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2a0:	57                   	push   edi
c001b2a1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2a8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2af:	e8 a7 ff ff ff       	call   c001b25b <Reg::getLine(char*, char*, char*)>
c001b2b4:	83 c4 10             	add    esp,0x10
c001b2b7:	84 c0                	test   al,al
c001b2b9:	0f 84 b3 00 00 00    	je     c001b372 <Reg::readInt(char*, char*, int*)+0xe0>
c001b2bf:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b2c3:	80 fa 2b             	cmp    dl,0x2b
c001b2c6:	74 0c                	je     c001b2d4 <Reg::readInt(char*, char*, int*)+0x42>
c001b2c8:	80 fa 2d             	cmp    dl,0x2d
c001b2cb:	75 0e                	jne    c001b2db <Reg::readInt(char*, char*, int*)+0x49>
c001b2cd:	ba 01 00 00 00       	mov    edx,0x1
c001b2d2:	eb 0b                	jmp    c001b2df <Reg::readInt(char*, char*, int*)+0x4d>
c001b2d4:	ba 01 00 00 00       	mov    edx,0x1
c001b2d9:	eb 02                	jmp    c001b2dd <Reg::readInt(char*, char*, int*)+0x4b>
c001b2db:	31 d2                	xor    edx,edx
c001b2dd:	31 c0                	xor    eax,eax
c001b2df:	be 0a 00 00 00       	mov    esi,0xa
c001b2e4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b2e9:	75 20                	jne    c001b30b <Reg::readInt(char*, char*, int*)+0x79>
c001b2eb:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b2ef:	80 f9 78             	cmp    cl,0x78
c001b2f2:	75 0a                	jne    c001b2fe <Reg::readInt(char*, char*, int*)+0x6c>
c001b2f4:	83 c2 02             	add    edx,0x2
c001b2f7:	be 10 00 00 00       	mov    esi,0x10
c001b2fc:	eb 0d                	jmp    c001b30b <Reg::readInt(char*, char*, int*)+0x79>
c001b2fe:	80 f9 62             	cmp    cl,0x62
c001b301:	75 08                	jne    c001b30b <Reg::readInt(char*, char*, int*)+0x79>
c001b303:	83 c2 02             	add    edx,0x2
c001b306:	be 02 00 00 00       	mov    esi,0x2
c001b30b:	01 d7                	add    edi,edx
c001b30d:	31 d2                	xor    edx,edx
c001b30f:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b311:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b315:	80 fb 0d             	cmp    bl,0xd
c001b318:	0f 94 c3             	sete   bl
c001b31b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b320:	0f 94 c1             	sete   cl
c001b323:	08 cb                	or     bl,cl
c001b325:	75 3a                	jne    c001b361 <Reg::readInt(char*, char*, int*)+0xcf>
c001b327:	0f af d6             	imul   edx,esi
c001b32a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b32f:	83 fe 10             	cmp    esi,0x10
c001b332:	75 26                	jne    c001b35a <Reg::readInt(char*, char*, int*)+0xc8>
c001b334:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b338:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b33b:	89 e9                	mov    ecx,ebp
c001b33d:	80 f9 05             	cmp    cl,0x5
c001b340:	77 06                	ja     c001b348 <Reg::readInt(char*, char*, int*)+0xb6>
c001b342:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b346:	eb 16                	jmp    c001b35e <Reg::readInt(char*, char*, int*)+0xcc>
c001b348:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b34c:	83 e9 61             	sub    ecx,0x61
c001b34f:	80 f9 05             	cmp    cl,0x5
c001b352:	77 06                	ja     c001b35a <Reg::readInt(char*, char*, int*)+0xc8>
c001b354:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b358:	eb 04                	jmp    c001b35e <Reg::readInt(char*, char*, int*)+0xcc>
c001b35a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b35e:	47                   	inc    edi
c001b35f:	eb ae                	jmp    c001b30f <Reg::readInt(char*, char*, int*)+0x7d>
c001b361:	84 c0                	test   al,al
c001b363:	74 02                	je     c001b367 <Reg::readInt(char*, char*, int*)+0xd5>
c001b365:	f7 da                	neg    edx
c001b367:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b36e:	89 10                	mov    DWORD PTR [eax],edx
c001b370:	88 d8                	mov    al,bl
c001b372:	81 c4 ec 00 00 00    	add    esp,0xec
c001b378:	5b                   	pop    ebx
c001b379:	5e                   	pop    esi
c001b37a:	5f                   	pop    edi
c001b37b:	5d                   	pop    ebp
c001b37c:	c3                   	ret    

c001b37d <Reg::readString(char*, char*, char*, int)>:
c001b37d:	57                   	push   edi
c001b37e:	56                   	push   esi
c001b37f:	53                   	push   ebx
c001b380:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b386:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b38d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b391:	57                   	push   edi
c001b392:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b399:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3a0:	e8 b6 fe ff ff       	call   c001b25b <Reg::getLine(char*, char*, char*)>
c001b3a5:	83 c4 10             	add    esp,0x10
c001b3a8:	89 c6                	mov    esi,eax
c001b3aa:	84 c0                	test   al,al
c001b3ac:	74 44                	je     c001b3f2 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3ae:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b3b5:	31 c0                	xor    eax,eax
c001b3b7:	4a                   	dec    edx
c001b3b8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b3bb:	84 c9                	test   cl,cl
c001b3bd:	74 0f                	je     c001b3ce <Reg::readString(char*, char*, char*, int)+0x51>
c001b3bf:	39 c2                	cmp    edx,eax
c001b3c1:	7e 0b                	jle    c001b3ce <Reg::readString(char*, char*, char*, int)+0x51>
c001b3c3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b3c6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b3cb:	40                   	inc    eax
c001b3cc:	eb ea                	jmp    c001b3b8 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b3ce:	83 ec 0c             	sub    esp,0xc
c001b3d1:	53                   	push   ebx
c001b3d2:	e8 95 53 fe ff       	call   c000076c <strlen>
c001b3d7:	83 c4 10             	add    esp,0x10
c001b3da:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b3df:	75 11                	jne    c001b3f2 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3e1:	83 ec 0c             	sub    esp,0xc
c001b3e4:	53                   	push   ebx
c001b3e5:	e8 82 53 fe ff       	call   c000076c <strlen>
c001b3ea:	83 c4 10             	add    esp,0x10
c001b3ed:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b3f2:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b3f8:	89 f0                	mov    eax,esi
c001b3fa:	5b                   	pop    ebx
c001b3fb:	5e                   	pop    esi
c001b3fc:	5f                   	pop    edi
c001b3fd:	c3                   	ret    

c001b3fe <Reg::readBool(char*, char*, bool*)>:
c001b3fe:	83 ec 20             	sub    esp,0x20
c001b401:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b405:	50                   	push   eax
c001b406:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40e:	e8 7f fe ff ff       	call   c001b292 <Reg::readInt(char*, char*, int*)>
c001b413:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b418:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b41c:	0f 95 02             	setne  BYTE PTR [edx]
c001b41f:	83 c4 2c             	add    esp,0x2c
c001b422:	c3                   	ret    

c001b423 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b423:	53                   	push   ebx
c001b424:	83 ec 1c             	sub    esp,0x1c
c001b427:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b42b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b42f:	50                   	push   eax
c001b430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b438:	e8 c1 ff ff ff       	call   c001b3fe <Reg::readBool(char*, char*, bool*)>
c001b43d:	83 c4 10             	add    esp,0x10
c001b440:	84 c0                	test   al,al
c001b442:	74 04                	je     c001b448 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b444:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b448:	88 d8                	mov    al,bl
c001b44a:	83 c4 18             	add    esp,0x18
c001b44d:	5b                   	pop    ebx
c001b44e:	c3                   	ret    

c001b44f <Reg::readIntWithDefault(char*, char*, int)>:
c001b44f:	53                   	push   ebx
c001b450:	83 ec 1c             	sub    esp,0x1c
c001b453:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b457:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b45b:	50                   	push   eax
c001b45c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b460:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b464:	e8 29 fe ff ff       	call   c001b292 <Reg::readInt(char*, char*, int*)>
c001b469:	83 c4 10             	add    esp,0x10
c001b46c:	84 c0                	test   al,al
c001b46e:	74 04                	je     c001b474 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b470:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b474:	89 d8                	mov    eax,ebx
c001b476:	83 c4 18             	add    esp,0x18
c001b479:	5b                   	pop    ebx
c001b47a:	c3                   	ret    

c001b47b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b47b:	57                   	push   edi
c001b47c:	56                   	push   esi
c001b47d:	56                   	push   esi
c001b47e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b482:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b486:	56                   	push   esi
c001b487:	57                   	push   edi
c001b488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b490:	e8 e8 fe ff ff       	call   c001b37d <Reg::readString(char*, char*, char*, int)>
c001b495:	83 c4 10             	add    esp,0x10
c001b498:	84 c0                	test   al,al
c001b49a:	75 1a                	jne    c001b4b6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b49c:	51                   	push   ecx
c001b49d:	56                   	push   esi
c001b49e:	6a 00                	push   0x0
c001b4a0:	57                   	push   edi
c001b4a1:	e8 aa 52 fe ff       	call   c0000750 <memset>
c001b4a6:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b4a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4af:	83 c4 10             	add    esp,0x10
c001b4b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b4b6:	89 f8                	mov    eax,edi
c001b4b8:	5a                   	pop    edx
c001b4b9:	5e                   	pop    esi
c001b4ba:	5f                   	pop    edi
c001b4bb:	c3                   	ret    

c001b4bc <Sys::eject(regs*)>:
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	83 ca ff             	or     edx,0xffffffff
c001b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b4c9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b4ce:	83 e9 41             	sub    ecx,0x41
c001b4d1:	83 f9 19             	cmp    ecx,0x19
c001b4d4:	77 18                	ja     c001b4ee <Sys::eject(regs*)+0x32>
c001b4d6:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c001b4dd:	85 c9                	test   ecx,ecx
c001b4df:	74 0d                	je     c001b4ee <Sys::eject(regs*)+0x32>
c001b4e1:	83 ec 0c             	sub    esp,0xc
c001b4e4:	51                   	push   ecx
c001b4e5:	e8 56 af ff ff       	call   c0016440 <LogicalDisk::eject()>
c001b4ea:	83 c4 10             	add    esp,0x10
c001b4ed:	99                   	cdq    
c001b4ee:	83 c4 0c             	add    esp,0xc
c001b4f1:	c3                   	ret    

c001b4f2 <Sys::exit(regs*)>:
c001b4f2:	83 ec 18             	sub    esp,0x18
c001b4f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4fc:	e8 7e 38 00 00       	call   c001ed7f <terminateTask(int)>
c001b501:	83 c8 ff             	or     eax,0xffffffff
c001b504:	83 c4 1c             	add    esp,0x1c
c001b507:	89 c2                	mov    edx,eax
c001b509:	c3                   	ret    

c001b50a <Sys::getCwd(regs*)>:
c001b50a:	83 ec 10             	sub    esp,0x10
c001b50d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b511:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b514:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b51f:	e8 6a 79 ff ff       	call   c0012e8e <Fs::getcwd(Process*, char*, int)>
c001b524:	83 c4 1c             	add    esp,0x1c
c001b527:	99                   	cdq    
c001b528:	c3                   	ret    

c001b529 <Sys::getPID(regs*)>:
c001b529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b52e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b531:	8b 00                	mov    eax,DWORD PTR [eax]
c001b533:	99                   	cdq    
c001b534:	c3                   	ret    

c001b535 <Sys::getRAMData(regs*)>:
c001b535:	8b 0d d4 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1d4
c001b53b:	6b 05 d0 f1 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f1d0,0x64
c001b542:	99                   	cdq    
c001b543:	f7 f9                	idiv   ecx
c001b545:	c1 e0 18             	shl    eax,0x18
c001b548:	09 c8                	or     eax,ecx
c001b54a:	99                   	cdq    
c001b54b:	c3                   	ret    

c001b54c <Sys::getVGAPtr(regs*)>:
c001b54c:	55                   	push   ebp
c001b54d:	57                   	push   edi
c001b54e:	56                   	push   esi
c001b54f:	53                   	push   ebx
c001b550:	83 ec 18             	sub    esp,0x18
c001b553:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b557:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b55a:	e8 02 33 00 00       	call   c001e861 <Thr::processFromPID(int)>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	89 c1                	mov    ecx,eax
c001b564:	b8 01 00 00 00       	mov    eax,0x1
c001b569:	85 c9                	test   ecx,ecx
c001b56b:	74 59                	je     c001b5c6 <Sys::getVGAPtr(regs*)+0x7a>
c001b56d:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b573:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b577:	74 0c                	je     c001b585 <Sys::getVGAPtr(regs*)+0x39>
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	53                   	push   ebx
c001b57d:	e8 ce 53 ff ff       	call   c0010950 <setActiveTerminal(VgaText*)>
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b588:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b58b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b590:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b592:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b595:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b598:	81 c3 82 00 00 00    	add    ebx,0x82
c001b59e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5a4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5a7:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5aa:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b5b0:	50                   	push   eax
c001b5b1:	50                   	push   eax
c001b5b2:	53                   	push   ebx
c001b5b3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5b6:	05 a8 0f 00 00       	add    eax,0xfa8
c001b5bb:	50                   	push   eax
c001b5bc:	e8 4b 52 fe ff       	call   c000080c <strcpy>
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	31 c0                	xor    eax,eax
c001b5c6:	83 c4 0c             	add    esp,0xc
c001b5c9:	31 d2                	xor    edx,edx
c001b5cb:	5b                   	pop    ebx
c001b5cc:	5e                   	pop    esi
c001b5cd:	5f                   	pop    edi
c001b5ce:	5d                   	pop    ebp
c001b5cf:	c3                   	ret    

c001b5d0 <Sys::loadDLL(regs*)>:
c001b5d0:	56                   	push   esi
c001b5d1:	53                   	push   ebx
c001b5d2:	31 d2                	xor    edx,edx
c001b5d4:	51                   	push   ecx
c001b5d5:	b8 01 00 00 00       	mov    eax,0x1
c001b5da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5de:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b5e2:	0f 84 8c 00 00 00    	je     c001b674 <Sys::loadDLL(regs*)+0xa4>
c001b5e8:	83 ec 0c             	sub    esp,0xc
c001b5eb:	68 14 01 00 00       	push   0x114
c001b5f0:	e8 97 42 ff ff       	call   c000f88c <malloc>
c001b5f5:	83 c4 0c             	add    esp,0xc
c001b5f8:	89 c3                	mov    ebx,eax
c001b5fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ff:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b602:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b605:	53                   	push   ebx
c001b606:	e8 81 7a ff ff       	call   c001308c <File::File(char const*, Process*)>
c001b60b:	83 c4 10             	add    esp,0x10
c001b60e:	31 d2                	xor    edx,edx
c001b610:	b8 02 00 00 00       	mov    eax,0x2
c001b615:	85 db                	test   ebx,ebx
c001b617:	74 5b                	je     c001b674 <Sys::loadDLL(regs*)+0xa4>
c001b619:	83 ec 0c             	sub    esp,0xc
c001b61c:	53                   	push   ebx
c001b61d:	e8 3c 7d ff ff       	call   c001335e <File::exists()>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	84 c0                	test   al,al
c001b627:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b629:	75 11                	jne    c001b63c <Sys::loadDLL(regs*)+0x6c>
c001b62b:	83 ec 0c             	sub    esp,0xc
c001b62e:	53                   	push   ebx
c001b62f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b632:	83 c4 10             	add    esp,0x10
c001b635:	b8 03 00 00 00       	mov    eax,0x3
c001b63a:	eb 36                	jmp    c001b672 <Sys::loadDLL(regs*)+0xa2>
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	53                   	push   ebx
c001b640:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b643:	58                   	pop    eax
c001b644:	5a                   	pop    edx
c001b645:	6a 00                	push   0x0
c001b647:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b64a:	e8 1e 24 00 00       	call   c001da6d <Thr::loadDLL(char const*, bool)>
c001b64f:	83 c4 10             	add    esp,0x10
c001b652:	89 c1                	mov    ecx,eax
c001b654:	31 d2                	xor    edx,edx
c001b656:	b8 04 00 00 00       	mov    eax,0x4
c001b65b:	85 c9                	test   ecx,ecx
c001b65d:	74 15                	je     c001b674 <Sys::loadDLL(regs*)+0xa4>
c001b65f:	53                   	push   ebx
c001b660:	53                   	push   ebx
c001b661:	ff 35 88 f1 02 c0    	push   DWORD PTR ds:0xc002f188
c001b667:	51                   	push   ecx
c001b668:	e8 2b 26 00 00       	call   c001dc98 <Thr::executeDLL(unsigned long, void*)>
c001b66d:	83 c4 10             	add    esp,0x10
c001b670:	31 c0                	xor    eax,eax
c001b672:	31 d2                	xor    edx,edx
c001b674:	59                   	pop    ecx
c001b675:	5b                   	pop    ebx
c001b676:	5e                   	pop    esi
c001b677:	c3                   	ret    

c001b678 <Sys::read(regs*)>:
c001b678:	57                   	push   edi
c001b679:	56                   	push   esi
c001b67a:	53                   	push   ebx
c001b67b:	83 ec 10             	sub    esp,0x10
c001b67e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b682:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b685:	83 f8 02             	cmp    eax,0x2
c001b688:	77 10                	ja     c001b69a <Sys::read(regs*)+0x22>
c001b68a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b692:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b698:	eb 0e                	jmp    c001b6a8 <Sys::read(regs*)+0x30>
c001b69a:	83 ec 0c             	sub    esp,0xc
c001b69d:	50                   	push   eax
c001b69e:	e8 2e 5f ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001b6a3:	83 c4 10             	add    esp,0x10
c001b6a6:	89 c1                	mov    ecx,eax
c001b6a8:	83 c8 ff             	or     eax,0xffffffff
c001b6ab:	85 c9                	test   ecx,ecx
c001b6ad:	89 c2                	mov    edx,eax
c001b6af:	74 28                	je     c001b6d9 <Sys::read(regs*)+0x61>
c001b6b1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6b9:	31 ff                	xor    edi,edi
c001b6bb:	83 ec 0c             	sub    esp,0xc
c001b6be:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6c4:	52                   	push   edx
c001b6c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6c8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6cb:	57                   	push   edi
c001b6cc:	56                   	push   esi
c001b6cd:	51                   	push   ecx
c001b6ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b6d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6d5:	83 c4 20             	add    esp,0x20
c001b6d8:	99                   	cdq    
c001b6d9:	83 c4 10             	add    esp,0x10
c001b6dc:	5b                   	pop    ebx
c001b6dd:	5e                   	pop    esi
c001b6de:	5f                   	pop    edi
c001b6df:	c3                   	ret    

c001b6e0 <Sys::sbrk(regs*)>:
c001b6e0:	56                   	push   esi
c001b6e1:	53                   	push   ebx
c001b6e2:	50                   	push   eax
c001b6e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6ef:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b6f2:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b6f8:	85 db                	test   ebx,ebx
c001b6fa:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b6fd:	74 02                	je     c001b701 <Sys::sbrk(regs*)+0x21>
c001b6ff:	79 06                	jns    c001b707 <Sys::sbrk(regs*)+0x27>
c001b701:	89 f0                	mov    eax,esi
c001b703:	31 d2                	xor    edx,edx
c001b705:	eb 2a                	jmp    c001b731 <Sys::sbrk(regs*)+0x51>
c001b707:	83 c8 ff             	or     eax,0xffffffff
c001b70a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b710:	89 c2                	mov    edx,eax
c001b712:	77 1d                	ja     c001b731 <Sys::sbrk(regs*)+0x51>
c001b714:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b71a:	50                   	push   eax
c001b71b:	c1 ea 0c             	shr    edx,0xc
c001b71e:	68 07 0c 00 00       	push   0xc07
c001b723:	52                   	push   edx
c001b724:	51                   	push   ecx
c001b725:	e8 36 69 ff ff       	call   c0012060 <VAS::allocatePages(int, int)>
c001b72a:	89 f0                	mov    eax,esi
c001b72c:	31 d2                	xor    edx,edx
c001b72e:	83 c4 10             	add    esp,0x10
c001b731:	59                   	pop    ecx
c001b732:	5b                   	pop    ebx
c001b733:	5e                   	pop    esi
c001b734:	c3                   	ret    

c001b735 <Sys::setCwd(regs*)>:
c001b735:	83 ec 14             	sub    esp,0x14
c001b738:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b73c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b73f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b744:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b747:	e8 b1 7c ff ff       	call   c00133fd <Fs::setcwd(Process*, char*)>
c001b74c:	83 c4 1c             	add    esp,0x1c
c001b74f:	99                   	cdq    
c001b750:	c3                   	ret    

c001b751 <Sys::setTime(regs*)>:
c001b751:	55                   	push   ebp
c001b752:	31 d2                	xor    edx,edx
c001b754:	57                   	push   edi
c001b755:	bf 18 00 00 00       	mov    edi,0x18
c001b75a:	56                   	push   esi
c001b75b:	53                   	push   ebx
c001b75c:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b761:	83 ec 30             	sub    esp,0x30
c001b764:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b768:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b76b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b76e:	f7 f3                	div    ebx
c001b770:	89 d6                	mov    esi,edx
c001b772:	31 d2                	xor    edx,edx
c001b774:	f7 f3                	div    ebx
c001b776:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b779:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b77d:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b782:	31 d2                	xor    edx,edx
c001b784:	f7 f3                	div    ebx
c001b786:	31 d2                	xor    edx,edx
c001b788:	bb 0c 00 00 00       	mov    ebx,0xc
c001b78d:	f7 f7                	div    edi
c001b78f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b792:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b796:	0f b7 cd             	movzx  ecx,bp
c001b799:	56                   	push   esi
c001b79a:	89 c7                	mov    edi,eax
c001b79c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7a0:	c1 e6 10             	shl    esi,0x10
c001b7a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7a7:	83 e7 1f             	and    edi,0x1f
c001b7aa:	51                   	push   ecx
c001b7ab:	47                   	inc    edi
c001b7ac:	c1 e8 05             	shr    eax,0x5
c001b7af:	31 d2                	xor    edx,edx
c001b7b1:	f7 f3                	div    ebx
c001b7b3:	31 db                	xor    ebx,ebx
c001b7b5:	52                   	push   edx
c001b7b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b7ba:	57                   	push   edi
c001b7bb:	68 01 ca 02 c0       	push   0xc002ca01
c001b7c0:	e8 68 73 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001b7c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b7c9:	89 f8                	mov    eax,edi
c001b7cb:	31 c9                	xor    ecx,ecx
c001b7cd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b7d1:	88 c1                	mov    cl,al
c001b7d3:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b7d9:	88 d5                	mov    ch,dl
c001b7db:	c1 e0 10             	shl    eax,0x10
c001b7de:	0f b7 d1             	movzx  edx,cx
c001b7e1:	09 c2                	or     edx,eax
c001b7e3:	89 d8                	mov    eax,ebx
c001b7e5:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b7ea:	09 f0                	or     eax,esi
c001b7ec:	89 c3                	mov    ebx,eax
c001b7ee:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b7f2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b7f6:	83 c4 18             	add    esp,0x18
c001b7f9:	53                   	push   ebx
c001b7fa:	52                   	push   edx
c001b7fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b7ff:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b803:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b807:	e8 13 83 ff ff       	call   c0013b1f <datetimeToSeconds(datetime_t)>
c001b80c:	83 c4 0c             	add    esp,0xc
c001b80f:	52                   	push   edx
c001b810:	50                   	push   eax
c001b811:	56                   	push   esi
c001b812:	e8 8f 84 ff ff       	call   c0013ca6 <secondsToDatetime(unsigned long long)>
c001b817:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b81b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b81f:	51                   	push   ecx
c001b820:	89 d6                	mov    esi,edx
c001b822:	51                   	push   ecx
c001b823:	c1 ee 10             	shr    esi,0x10
c001b826:	89 f3                	mov    ebx,esi
c001b828:	0f b6 f3             	movzx  esi,bl
c001b82b:	56                   	push   esi
c001b82c:	0f b6 f6             	movzx  esi,dh
c001b82f:	0f b6 d2             	movzx  edx,dl
c001b832:	56                   	push   esi
c001b833:	52                   	push   edx
c001b834:	89 c2                	mov    edx,eax
c001b836:	c1 ea 10             	shr    edx,0x10
c001b839:	52                   	push   edx
c001b83a:	0f b6 d4             	movzx  edx,ah
c001b83d:	0f b6 c0             	movzx  eax,al
c001b840:	52                   	push   edx
c001b841:	50                   	push   eax
c001b842:	68 1d ca 02 c0       	push   0xc002ca1d
c001b847:	e8 e1 72 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001b84c:	83 c4 2c             	add    esp,0x2c
c001b84f:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001b854:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b858:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b85c:	53                   	push   ebx
c001b85d:	51                   	push   ecx
c001b85e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b864:	e8 dd 83 ff ff       	call   c0013c46 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b869:	83 f0 01             	xor    eax,0x1
c001b86c:	31 d2                	xor    edx,edx
c001b86e:	0f b6 c0             	movzx  eax,al
c001b871:	83 c4 3c             	add    esp,0x3c
c001b874:	5b                   	pop    ebx
c001b875:	5e                   	pop    esi
c001b876:	5f                   	pop    edi
c001b877:	5d                   	pop    ebp
c001b878:	c3                   	ret    

c001b879 <Sys::timezone(regs*)>:
c001b879:	53                   	push   ebx
c001b87a:	83 ec 08             	sub    esp,0x8
c001b87d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b881:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b885:	75 17                	jne    c001b89e <Sys::timezone(regs*)+0x25>
c001b887:	83 ec 0c             	sub    esp,0xc
c001b88a:	68 39 ca 02 c0       	push   0xc002ca39
c001b88f:	e8 99 72 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001b894:	83 c8 ff             	or     eax,0xffffffff
c001b897:	83 c4 10             	add    esp,0x10
c001b89a:	89 c2                	mov    edx,eax
c001b89c:	eb 20                	jmp    c001b8be <Sys::timezone(regs*)+0x45>
c001b89e:	83 ec 0c             	sub    esp,0xc
c001b8a1:	68 71 ca 02 c0       	push   0xc002ca71
c001b8a6:	e8 82 72 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001b8ab:	58                   	pop    eax
c001b8ac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b8af:	e8 f4 80 ff ff       	call   c00139a8 <User::loadClockSettings(int)>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	b8 01 00 00 00       	mov    eax,0x1
c001b8bc:	31 d2                	xor    edx,edx
c001b8be:	83 c4 08             	add    esp,0x8
c001b8c1:	5b                   	pop    ebx
c001b8c2:	c3                   	ret    

c001b8c3 <Sys::write(regs*)>:
c001b8c3:	57                   	push   edi
c001b8c4:	56                   	push   esi
c001b8c5:	53                   	push   ebx
c001b8c6:	83 ec 10             	sub    esp,0x10
c001b8c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8d0:	83 f8 02             	cmp    eax,0x2
c001b8d3:	77 10                	ja     c001b8e5 <Sys::write(regs*)+0x22>
c001b8d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b8e3:	eb 0e                	jmp    c001b8f3 <Sys::write(regs*)+0x30>
c001b8e5:	83 ec 0c             	sub    esp,0xc
c001b8e8:	50                   	push   eax
c001b8e9:	e8 e3 5c ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	89 c1                	mov    ecx,eax
c001b8f3:	83 c8 ff             	or     eax,0xffffffff
c001b8f6:	85 c9                	test   ecx,ecx
c001b8f8:	89 c2                	mov    edx,eax
c001b8fa:	74 28                	je     c001b924 <Sys::write(regs*)+0x61>
c001b8fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b904:	31 ff                	xor    edi,edi
c001b906:	83 ec 0c             	sub    esp,0xc
c001b909:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b90b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b90f:	52                   	push   edx
c001b910:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b913:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b916:	57                   	push   edi
c001b917:	56                   	push   esi
c001b918:	51                   	push   ecx
c001b919:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b91c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b920:	83 c4 20             	add    esp,0x20
c001b923:	99                   	cdq    
c001b924:	83 c4 10             	add    esp,0x10
c001b927:	5b                   	pop    ebx
c001b928:	5e                   	pop    esi
c001b929:	5f                   	pop    edi
c001b92a:	c3                   	ret    

c001b92b <Sys::wsbe(regs*)>:
c001b92b:	57                   	push   edi
c001b92c:	b9 0b 00 00 00       	mov    ecx,0xb
c001b931:	56                   	push   esi
c001b932:	be b0 ca 02 c0       	mov    esi,0xc002cab0
c001b937:	53                   	push   ebx
c001b938:	83 ec 30             	sub    esp,0x30
c001b93b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b93f:	fc                   	cld    
c001b940:	83 ec 0c             	sub    esp,0xc
c001b943:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b945:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b949:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b94e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b951:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b957:	8b 06                	mov    eax,DWORD PTR [esi]
c001b959:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b95c:	57                   	push   edi
c001b95d:	e8 0a 4e fe ff       	call   c000076c <strlen>
c001b962:	5a                   	pop    edx
c001b963:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b967:	52                   	push   edx
c001b968:	31 d2                	xor    edx,edx
c001b96a:	57                   	push   edi
c001b96b:	52                   	push   edx
c001b96c:	50                   	push   eax
c001b96d:	56                   	push   esi
c001b96e:	ff d3                	call   ebx
c001b970:	83 c4 14             	add    esp,0x14
c001b973:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b977:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b97a:	e8 00 34 00 00       	call   c001ed7f <terminateTask(int)>
c001b97f:	83 c4 40             	add    esp,0x40
c001b982:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b987:	5b                   	pop    ebx
c001b988:	31 d2                	xor    edx,edx
c001b98a:	5e                   	pop    esi
c001b98b:	5f                   	pop    edi
c001b98c:	c3                   	ret    

c001b98d <Sys::yield(regs*)>:
c001b98d:	57                   	push   edi
c001b98e:	56                   	push   esi
c001b98f:	53                   	push   ebx
c001b990:	fa                   	cli    
c001b991:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001b997:	e8 b0 2a 00 00       	call   c001e44c <schedule()>
c001b99c:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001b9a1:	48                   	dec    eax
c001b9a2:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001b9a7:	75 01                	jne    c001b9aa <Sys::yield(regs*)+0x1d>
c001b9a9:	fb                   	sti    
c001b9aa:	8b 35 10 f8 02 c0    	mov    esi,DWORD PTR ds:0xc002f810
c001b9b0:	8b 3d 14 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f814
c001b9b6:	89 f0                	mov    eax,esi
c001b9b8:	89 fb                	mov    ebx,edi
c001b9ba:	89 f1                	mov    ecx,esi
c001b9bc:	c1 e0 07             	shl    eax,0x7
c001b9bf:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b9c3:	25 80 30 0f 00       	and    eax,0xf3080
c001b9c8:	c1 eb 17             	shr    ebx,0x17
c001b9cb:	31 c8                	xor    eax,ecx
c001b9cd:	89 da                	mov    edx,ebx
c001b9cf:	5b                   	pop    ebx
c001b9d0:	5e                   	pop    esi
c001b9d1:	5f                   	pop    edi
c001b9d2:	c3                   	ret    

c001b9d3 <sysCallSeekDir(regs*)>:
c001b9d3:	31 c0                	xor    eax,eax
c001b9d5:	31 d2                	xor    edx,edx
c001b9d7:	c3                   	ret    

c001b9d8 <sysCallTellDir(regs*)>:
c001b9d8:	31 c0                	xor    eax,eax
c001b9da:	31 d2                	xor    edx,edx
c001b9dc:	c3                   	ret    

c001b9dd <sysCallVerify(regs*)>:
c001b9dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9e1:	31 d2                	xor    edx,edx
c001b9e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9e6:	c3                   	ret    

c001b9e7 <sysFormatDisk(regs*)>:
c001b9e7:	56                   	push   esi
c001b9e8:	53                   	push   ebx
c001b9e9:	53                   	push   ebx
c001b9ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9ee:	8b 1d 14 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f314
c001b9f4:	eb 25                	jmp    c001ba1b <sysFormatDisk(regs*)+0x34>
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b9fc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9fe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba01:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba04:	50                   	push   eax
c001ba05:	ff 34 85 a0 f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0860]
c001ba0c:	53                   	push   ebx
c001ba0d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba10:	83 c4 20             	add    esp,0x20
c001ba13:	83 f8 08             	cmp    eax,0x8
c001ba16:	75 12                	jne    c001ba2a <sysFormatDisk(regs*)+0x43>
c001ba18:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba1b:	85 db                	test   ebx,ebx
c001ba1d:	75 d7                	jne    c001b9f6 <sysFormatDisk(regs*)+0xf>
c001ba1f:	59                   	pop    ecx
c001ba20:	b8 03 00 00 00       	mov    eax,0x3
c001ba25:	31 d2                	xor    edx,edx
c001ba27:	5b                   	pop    ebx
c001ba28:	5e                   	pop    esi
c001ba29:	c3                   	ret    
c001ba2a:	85 c0                	test   eax,eax
c001ba2c:	74 1b                	je     c001ba49 <sysFormatDisk(regs*)+0x62>
c001ba2e:	83 f8 09             	cmp    eax,0x9
c001ba31:	74 0b                	je     c001ba3e <sysFormatDisk(regs*)+0x57>
c001ba33:	59                   	pop    ecx
c001ba34:	b8 02 00 00 00       	mov    eax,0x2
c001ba39:	31 d2                	xor    edx,edx
c001ba3b:	5b                   	pop    ebx
c001ba3c:	5e                   	pop    esi
c001ba3d:	c3                   	ret    
c001ba3e:	59                   	pop    ecx
c001ba3f:	b8 01 00 00 00       	mov    eax,0x1
c001ba44:	31 d2                	xor    edx,edx
c001ba46:	5b                   	pop    ebx
c001ba47:	5e                   	pop    esi
c001ba48:	c3                   	ret    
c001ba49:	59                   	pop    ecx
c001ba4a:	31 c0                	xor    eax,eax
c001ba4c:	31 d2                	xor    edx,edx
c001ba4e:	5b                   	pop    ebx
c001ba4f:	5e                   	pop    esi
c001ba50:	c3                   	ret    

c001ba51 <sysSetDiskVolumeLabel(regs*)>:
c001ba51:	56                   	push   esi
c001ba52:	53                   	push   ebx
c001ba53:	53                   	push   ebx
c001ba54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba58:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba5b:	83 f8 19             	cmp    eax,0x19
c001ba5e:	77 29                	ja     c001ba89 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba60:	8b 0c 85 a0 f7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0860]
c001ba67:	85 c9                	test   ecx,ecx
c001ba69:	74 1e                	je     c001ba89 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba6b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ba6e:	85 d2                	test   edx,edx
c001ba70:	74 17                	je     c001ba89 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba72:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ba78:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ba7a:	52                   	push   edx
c001ba7b:	50                   	push   eax
c001ba7c:	51                   	push   ecx
c001ba7d:	53                   	push   ebx
c001ba7e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	99                   	cdq    
c001ba85:	59                   	pop    ecx
c001ba86:	5b                   	pop    ebx
c001ba87:	5e                   	pop    esi
c001ba88:	c3                   	ret    
c001ba89:	59                   	pop    ecx
c001ba8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ba8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba94:	5b                   	pop    ebx
c001ba95:	5e                   	pop    esi
c001ba96:	c3                   	ret    

c001ba97 <sysGetDiskVolumeLabel(regs*)>:
c001ba97:	57                   	push   edi
c001ba98:	56                   	push   esi
c001ba99:	53                   	push   ebx
c001ba9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001baa1:	83 fa 19             	cmp    edx,0x19
c001baa4:	77 34                	ja     c001bada <sysGetDiskVolumeLabel(regs*)+0x43>
c001baa6:	8b 0c 95 a0 f7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0860]
c001baad:	85 c9                	test   ecx,ecx
c001baaf:	74 29                	je     c001bada <sysGetDiskVolumeLabel(regs*)+0x43>
c001bab1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bab4:	85 db                	test   ebx,ebx
c001bab6:	74 22                	je     c001bada <sysGetDiskVolumeLabel(regs*)+0x43>
c001bab8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001babb:	85 c0                	test   eax,eax
c001babd:	74 1b                	je     c001bada <sysGetDiskVolumeLabel(regs*)+0x43>
c001babf:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bac5:	83 ec 0c             	sub    esp,0xc
c001bac8:	8b 3e                	mov    edi,DWORD PTR [esi]
c001baca:	50                   	push   eax
c001bacb:	53                   	push   ebx
c001bacc:	52                   	push   edx
c001bacd:	51                   	push   ecx
c001bace:	56                   	push   esi
c001bacf:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bad2:	83 c4 20             	add    esp,0x20
c001bad5:	99                   	cdq    
c001bad6:	5b                   	pop    ebx
c001bad7:	5e                   	pop    esi
c001bad8:	5f                   	pop    edi
c001bad9:	c3                   	ret    
c001bada:	5b                   	pop    ebx
c001badb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bae0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bae5:	5e                   	pop    esi
c001bae6:	5f                   	pop    edi
c001bae7:	c3                   	ret    

c001bae8 <sysShutdown(regs*)>:
c001bae8:	83 ec 0c             	sub    esp,0xc
c001baeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001baf2:	85 c0                	test   eax,eax
c001baf4:	74 18                	je     c001bb0e <sysShutdown(regs*)+0x26>
c001baf6:	83 f8 01             	cmp    eax,0x1
c001baf9:	74 38                	je     c001bb33 <sysShutdown(regs*)+0x4b>
c001bafb:	83 f8 02             	cmp    eax,0x2
c001bafe:	74 24                	je     c001bb24 <sysShutdown(regs*)+0x3c>
c001bb00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb05:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb0a:	83 c4 0c             	add    esp,0xc
c001bb0d:	c3                   	ret    
c001bb0e:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001bb13:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb15:	6a 00                	push   0x0
c001bb17:	6a 00                	push   0x0
c001bb19:	6a 00                	push   0x0
c001bb1b:	50                   	push   eax
c001bb1c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb1f:	83 c4 10             	add    esp,0x10
c001bb22:	eb dc                	jmp    c001bb00 <sysShutdown(regs*)+0x18>
c001bb24:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001bb29:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb2b:	6a 00                	push   0x0
c001bb2d:	6a 00                	push   0x0
c001bb2f:	6a 01                	push   0x1
c001bb31:	eb e8                	jmp    c001bb1b <sysShutdown(regs*)+0x33>
c001bb33:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c001bb38:	85 c0                	test   eax,eax
c001bb3a:	74 02                	je     c001bb3e <sysShutdown(regs*)+0x56>
c001bb3c:	ff d0                	call   eax
c001bb3e:	31 c0                	xor    eax,eax
c001bb40:	31 d2                	xor    edx,edx
c001bb42:	83 c4 0c             	add    esp,0xc
c001bb45:	c3                   	ret    

c001bb46 <sysCallRealpath(regs*)>:
c001bb46:	83 ec 0c             	sub    esp,0xc
c001bb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb4d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bb50:	85 d2                	test   edx,edx
c001bb52:	74 07                	je     c001bb5b <sysCallRealpath(regs*)+0x15>
c001bb54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb57:	85 c0                	test   eax,eax
c001bb59:	75 0b                	jne    c001bb66 <sysCallRealpath(regs*)+0x20>
c001bb5b:	b8 01 00 00 00       	mov    eax,0x1
c001bb60:	31 d2                	xor    edx,edx
c001bb62:	83 c4 0c             	add    esp,0xc
c001bb65:	c3                   	ret    
c001bb66:	51                   	push   ecx
c001bb67:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb6d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb70:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bb76:	51                   	push   ecx
c001bb77:	52                   	push   edx
c001bb78:	50                   	push   eax
c001bb79:	e8 64 73 ff ff       	call   c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb7e:	83 c4 10             	add    esp,0x10
c001bb81:	31 c0                	xor    eax,eax
c001bb83:	31 d2                	xor    edx,edx
c001bb85:	83 c4 0c             	add    esp,0xc
c001bb88:	c3                   	ret    

c001bb89 <sysCallGetArgc(regs*)>:
c001bb89:	83 ec 14             	sub    esp,0x14
c001bb8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb94:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bb9a:	68 dc ca 02 c0       	push   0xc002cadc
c001bb9f:	e8 89 6f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bba4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bba9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbac:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bbb2:	83 c4 1c             	add    esp,0x1c
c001bbb5:	99                   	cdq    
c001bbb6:	c3                   	ret    

c001bbb7 <sysCallReadDir(regs*)>:
c001bbb7:	53                   	push   ebx
c001bbb8:	83 ec 18             	sub    esp,0x18
c001bbbb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbbf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbc2:	83 f8 02             	cmp    eax,0x2
c001bbc5:	76 53                	jbe    c001bc1a <sysCallReadDir(regs*)+0x63>
c001bbc7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbca:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bbd0:	77 4f                	ja     c001bc21 <sysCallReadDir(regs*)+0x6a>
c001bbd2:	83 ec 0c             	sub    esp,0xc
c001bbd5:	50                   	push   eax
c001bbd6:	e8 f6 59 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bbdb:	83 c4 10             	add    esp,0x10
c001bbde:	85 c0                	test   eax,eax
c001bbe0:	74 50                	je     c001bc32 <sysCallReadDir(regs*)+0x7b>
c001bbe2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bbea:	83 ec 0c             	sub    esp,0xc
c001bbed:	8b 10                	mov    edx,DWORD PTR [eax]
c001bbef:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bbf3:	51                   	push   ecx
c001bbf4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbf7:	6a 00                	push   0x0
c001bbf9:	68 10 01 00 00       	push   0x110
c001bbfe:	50                   	push   eax
c001bbff:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc02:	83 c4 20             	add    esp,0x20
c001bc05:	85 c0                	test   eax,eax
c001bc07:	74 38                	je     c001bc41 <sysCallReadDir(regs*)+0x8a>
c001bc09:	83 f8 07             	cmp    eax,0x7
c001bc0c:	74 0c                	je     c001bc1a <sysCallReadDir(regs*)+0x63>
c001bc0e:	b8 02 00 00 00       	mov    eax,0x2
c001bc13:	31 d2                	xor    edx,edx
c001bc15:	83 c4 18             	add    esp,0x18
c001bc18:	5b                   	pop    ebx
c001bc19:	c3                   	ret    
c001bc1a:	b8 01 00 00 00       	mov    eax,0x1
c001bc1f:	eb f2                	jmp    c001bc13 <sysCallReadDir(regs*)+0x5c>
c001bc21:	83 ec 08             	sub    esp,0x8
c001bc24:	52                   	push   edx
c001bc25:	68 00 cc 02 c0       	push   0xc002cc00
c001bc2a:	e8 fe 6e ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bc2f:	83 c4 10             	add    esp,0x10
c001bc32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc37:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3c:	83 c4 18             	add    esp,0x18
c001bc3f:	5b                   	pop    ebx
c001bc40:	c3                   	ret    
c001bc41:	31 c0                	xor    eax,eax
c001bc43:	eb ce                	jmp    c001bc13 <sysCallReadDir(regs*)+0x5c>

c001bc45 <sysCallIsATTY(regs*)>:
c001bc45:	83 ec 0c             	sub    esp,0xc
c001bc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc4f:	83 f8 02             	cmp    eax,0x2
c001bc52:	76 07                	jbe    c001bc5b <sysCallIsATTY(regs*)+0x16>
c001bc54:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc59:	75 26                	jne    c001bc81 <sysCallIsATTY(regs*)+0x3c>
c001bc5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc60:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc63:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bc69:	85 c0                	test   eax,eax
c001bc6b:	74 24                	je     c001bc91 <sysCallIsATTY(regs*)+0x4c>
c001bc6d:	83 ec 0c             	sub    esp,0xc
c001bc70:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc72:	50                   	push   eax
c001bc73:	ff 12                	call   DWORD PTR [edx]
c001bc75:	31 d2                	xor    edx,edx
c001bc77:	0f b6 c0             	movzx  eax,al
c001bc7a:	83 c4 10             	add    esp,0x10
c001bc7d:	83 c4 0c             	add    esp,0xc
c001bc80:	c3                   	ret    
c001bc81:	83 ec 0c             	sub    esp,0xc
c001bc84:	50                   	push   eax
c001bc85:	e8 47 59 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bc8a:	83 c4 10             	add    esp,0x10
c001bc8d:	85 c0                	test   eax,eax
c001bc8f:	75 dc                	jne    c001bc6d <sysCallIsATTY(regs*)+0x28>
c001bc91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc96:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc9b:	83 c4 0c             	add    esp,0xc
c001bc9e:	c3                   	ret    

c001bc9f <sysCallSeek(regs*)>:
c001bc9f:	53                   	push   ebx
c001bca0:	83 ec 08             	sub    esp,0x8
c001bca3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bca7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcaa:	83 f8 02             	cmp    eax,0x2
c001bcad:	76 4a                	jbe    c001bcf9 <sysCallSeek(regs*)+0x5a>
c001bcaf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcb4:	77 32                	ja     c001bce8 <sysCallSeek(regs*)+0x49>
c001bcb6:	83 ec 0c             	sub    esp,0xc
c001bcb9:	50                   	push   eax
c001bcba:	e8 12 59 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bcbf:	83 c4 0c             	add    esp,0xc
c001bcc2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bcc5:	31 db                	xor    ebx,ebx
c001bcc7:	53                   	push   ebx
c001bcc8:	51                   	push   ecx
c001bcc9:	50                   	push   eax
c001bcca:	e8 df 74 ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	85 c0                	test   eax,eax
c001bcd4:	0f 95 c0             	setne  al
c001bcd7:	31 d2                	xor    edx,edx
c001bcd9:	0f b6 c0             	movzx  eax,al
c001bcdc:	f7 d8                	neg    eax
c001bcde:	83 d2 00             	adc    edx,0x0
c001bce1:	83 c4 08             	add    esp,0x8
c001bce4:	f7 da                	neg    edx
c001bce6:	5b                   	pop    ebx
c001bce7:	c3                   	ret    
c001bce8:	83 ec 08             	sub    esp,0x8
c001bceb:	50                   	push   eax
c001bcec:	68 e7 ca 02 c0       	push   0xc002cae7
c001bcf1:	e8 37 6e ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bcf6:	83 c4 10             	add    esp,0x10
c001bcf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd03:	83 c4 08             	add    esp,0x8
c001bd06:	5b                   	pop    ebx
c001bd07:	c3                   	ret    

c001bd08 <sysCallTell(regs*)>:
c001bd08:	53                   	push   ebx
c001bd09:	83 ec 08             	sub    esp,0x8
c001bd0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd13:	83 f8 02             	cmp    eax,0x2
c001bd16:	76 5e                	jbe    c001bd76 <sysCallTell(regs*)+0x6e>
c001bd18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd1d:	77 2d                	ja     c001bd4c <sysCallTell(regs*)+0x44>
c001bd1f:	83 ec 0c             	sub    esp,0xc
c001bd22:	50                   	push   eax
c001bd23:	e8 a9 58 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bd28:	5a                   	pop    edx
c001bd29:	59                   	pop    ecx
c001bd2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd2d:	50                   	push   eax
c001bd2e:	e8 d1 74 ff ff       	call   c0013204 <File::tell(unsigned long long*)>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	85 c0                	test   eax,eax
c001bd38:	0f 95 c0             	setne  al
c001bd3b:	31 d2                	xor    edx,edx
c001bd3d:	0f b6 c0             	movzx  eax,al
c001bd40:	f7 d8                	neg    eax
c001bd42:	83 d2 00             	adc    edx,0x0
c001bd45:	83 c4 08             	add    esp,0x8
c001bd48:	f7 da                	neg    edx
c001bd4a:	5b                   	pop    ebx
c001bd4b:	c3                   	ret    
c001bd4c:	83 ec 08             	sub    esp,0x8
c001bd4f:	50                   	push   eax
c001bd50:	68 01 cb 02 c0       	push   0xc002cb01
c001bd55:	e8 d3 6d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bd5a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd5d:	83 c4 10             	add    esp,0x10
c001bd60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bd66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd6d:	31 d2                	xor    edx,edx
c001bd6f:	31 c0                	xor    eax,eax
c001bd71:	83 c4 08             	add    esp,0x8
c001bd74:	5b                   	pop    ebx
c001bd75:	c3                   	ret    
c001bd76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd80:	83 c4 08             	add    esp,0x8
c001bd83:	5b                   	pop    ebx
c001bd84:	c3                   	ret    

c001bd85 <sysCallSize(regs*)>:
c001bd85:	53                   	push   ebx
c001bd86:	83 ec 18             	sub    esp,0x18
c001bd89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd90:	83 f8 02             	cmp    eax,0x2
c001bd93:	76 64                	jbe    c001bdf9 <sysCallSize(regs*)+0x74>
c001bd95:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd9a:	77 33                	ja     c001bdcf <sysCallSize(regs*)+0x4a>
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	50                   	push   eax
c001bda0:	e8 2c 58 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bda5:	83 c4 0c             	add    esp,0xc
c001bda8:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bdac:	52                   	push   edx
c001bdad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bdb0:	50                   	push   eax
c001bdb1:	e8 e6 75 ff ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c001bdb6:	83 c4 10             	add    esp,0x10
c001bdb9:	85 c0                	test   eax,eax
c001bdbb:	0f 95 c0             	setne  al
c001bdbe:	31 d2                	xor    edx,edx
c001bdc0:	0f b6 c0             	movzx  eax,al
c001bdc3:	f7 d8                	neg    eax
c001bdc5:	83 d2 00             	adc    edx,0x0
c001bdc8:	83 c4 18             	add    esp,0x18
c001bdcb:	f7 da                	neg    edx
c001bdcd:	5b                   	pop    ebx
c001bdce:	c3                   	ret    
c001bdcf:	83 ec 08             	sub    esp,0x8
c001bdd2:	50                   	push   eax
c001bdd3:	68 1b cb 02 c0       	push   0xc002cb1b
c001bdd8:	e8 50 6d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bddd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bde0:	83 c4 10             	add    esp,0x10
c001bde3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bde9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdf0:	31 d2                	xor    edx,edx
c001bdf2:	31 c0                	xor    eax,eax
c001bdf4:	83 c4 18             	add    esp,0x18
c001bdf7:	5b                   	pop    ebx
c001bdf8:	c3                   	ret    
c001bdf9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be03:	83 c4 18             	add    esp,0x18
c001be06:	5b                   	pop    ebx
c001be07:	c3                   	ret    

c001be08 <sysCallSizeFromFilename(regs*)>:
c001be08:	57                   	push   edi
c001be09:	56                   	push   esi
c001be0a:	53                   	push   ebx
c001be0b:	83 ec 20             	sub    esp,0x20
c001be0e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be12:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be15:	83 fb 02             	cmp    ebx,0x2
c001be18:	0f 86 99 00 00 00    	jbe    c001beb7 <sysCallSizeFromFilename(regs*)+0xaf>
c001be1e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be24:	77 65                	ja     c001be8b <sysCallSizeFromFilename(regs*)+0x83>
c001be26:	83 ec 0c             	sub    esp,0xc
c001be29:	68 14 01 00 00       	push   0x114
c001be2e:	e8 59 3a ff ff       	call   c000f88c <malloc>
c001be33:	83 c4 0c             	add    esp,0xc
c001be36:	89 c6                	mov    esi,eax
c001be38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be40:	53                   	push   ebx
c001be41:	56                   	push   esi
c001be42:	e8 45 72 ff ff       	call   c001308c <File::File(char const*, Process*)>
c001be47:	83 c4 0c             	add    esp,0xc
c001be4a:	8d 44 24 23          	lea    eax,[esp+0x23]
c001be4e:	50                   	push   eax
c001be4f:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001be52:	56                   	push   esi
c001be53:	e8 44 75 ff ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c001be58:	83 c4 10             	add    esp,0x10
c001be5b:	85 f6                	test   esi,esi
c001be5d:	74 14                	je     c001be73 <sysCallSizeFromFilename(regs*)+0x6b>
c001be5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be63:	8b 16                	mov    edx,DWORD PTR [esi]
c001be65:	83 ec 0c             	sub    esp,0xc
c001be68:	56                   	push   esi
c001be69:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be6c:	83 c4 10             	add    esp,0x10
c001be6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be73:	85 c0                	test   eax,eax
c001be75:	0f 95 c0             	setne  al
c001be78:	31 d2                	xor    edx,edx
c001be7a:	0f b6 c0             	movzx  eax,al
c001be7d:	f7 d8                	neg    eax
c001be7f:	83 d2 00             	adc    edx,0x0
c001be82:	83 c4 20             	add    esp,0x20
c001be85:	f7 da                	neg    edx
c001be87:	5b                   	pop    ebx
c001be88:	5e                   	pop    esi
c001be89:	5f                   	pop    edi
c001be8a:	c3                   	ret    
c001be8b:	83 ec 08             	sub    esp,0x8
c001be8e:	53                   	push   ebx
c001be8f:	68 1b cb 02 c0       	push   0xc002cb1b
c001be94:	e8 94 6c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001be99:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001be9c:	83 c4 10             	add    esp,0x10
c001be9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bea5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001beac:	31 d2                	xor    edx,edx
c001beae:	83 c4 20             	add    esp,0x20
c001beb1:	31 c0                	xor    eax,eax
c001beb3:	5b                   	pop    ebx
c001beb4:	5e                   	pop    esi
c001beb5:	5f                   	pop    edi
c001beb6:	c3                   	ret    
c001beb7:	83 c4 20             	add    esp,0x20
c001beba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bebf:	5b                   	pop    ebx
c001bec0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bec5:	5e                   	pop    esi
c001bec6:	5f                   	pop    edi
c001bec7:	c3                   	ret    

c001bec8 <sysCallClose(regs*)>:
c001bec8:	53                   	push   ebx
c001bec9:	83 ec 08             	sub    esp,0x8
c001becc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bed3:	83 f8 02             	cmp    eax,0x2
c001bed6:	76 50                	jbe    c001bf28 <sysCallClose(regs*)+0x60>
c001bed8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bedd:	74 58                	je     c001bf37 <sysCallClose(regs*)+0x6f>
c001bedf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bee4:	74 60                	je     c001bf46 <sysCallClose(regs*)+0x7e>
c001bee6:	77 2f                	ja     c001bf17 <sysCallClose(regs*)+0x4f>
c001bee8:	83 ec 0c             	sub    esp,0xc
c001beeb:	50                   	push   eax
c001beec:	e8 e0 56 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bef1:	89 c3                	mov    ebx,eax
c001bef3:	89 04 24             	mov    DWORD PTR [esp],eax
c001bef6:	e8 53 72 ff ff       	call   c001314e <File::close()>
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	85 db                	test   ebx,ebx
c001bf00:	74 0c                	je     c001bf0e <sysCallClose(regs*)+0x46>
c001bf02:	83 ec 0c             	sub    esp,0xc
c001bf05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf07:	53                   	push   ebx
c001bf08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf0b:	83 c4 10             	add    esp,0x10
c001bf0e:	31 c0                	xor    eax,eax
c001bf10:	31 d2                	xor    edx,edx
c001bf12:	83 c4 08             	add    esp,0x8
c001bf15:	5b                   	pop    ebx
c001bf16:	c3                   	ret    
c001bf17:	83 ec 08             	sub    esp,0x8
c001bf1a:	50                   	push   eax
c001bf1b:	68 24 cc 02 c0       	push   0xc002cc24
c001bf20:	e8 08 6c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bf25:	83 c4 10             	add    esp,0x10
c001bf28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf32:	83 c4 08             	add    esp,0x8
c001bf35:	5b                   	pop    ebx
c001bf36:	c3                   	ret    
c001bf37:	83 ec 0c             	sub    esp,0xc
c001bf3a:	68 36 cb 02 c0       	push   0xc002cb36
c001bf3f:	e8 e9 6b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001bf44:	eb c5                	jmp    c001bf0b <sysCallClose(regs*)+0x43>
c001bf46:	83 ec 0c             	sub    esp,0xc
c001bf49:	68 44 cb 02 c0       	push   0xc002cb44
c001bf4e:	eb ef                	jmp    c001bf3f <sysCallClose(regs*)+0x77>

c001bf50 <sysCallOpenDir(regs*)>:
c001bf50:	56                   	push   esi
c001bf51:	53                   	push   ebx
c001bf52:	53                   	push   ebx
c001bf53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf57:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf5a:	85 f6                	test   esi,esi
c001bf5c:	74 59                	je     c001bfb7 <sysCallOpenDir(regs*)+0x67>
c001bf5e:	83 ec 0c             	sub    esp,0xc
c001bf61:	68 14 01 00 00       	push   0x114
c001bf66:	e8 21 39 ff ff       	call   c000f88c <malloc>
c001bf6b:	83 c4 0c             	add    esp,0xc
c001bf6e:	89 c6                	mov    esi,eax
c001bf70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf75:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf78:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf7b:	56                   	push   esi
c001bf7c:	e8 b7 75 ff ff       	call   c0013538 <Directory::Directory(char const*, Process*)>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	85 f6                	test   esi,esi
c001bf86:	74 2f                	je     c001bfb7 <sysCallOpenDir(regs*)+0x67>
c001bf88:	83 ec 0c             	sub    esp,0xc
c001bf8b:	56                   	push   esi
c001bf8c:	e8 0b 76 ff ff       	call   c001359c <Directory::open()>
c001bf91:	83 c4 10             	add    esp,0x10
c001bf94:	85 c0                	test   eax,eax
c001bf96:	75 1f                	jne    c001bfb7 <sysCallOpenDir(regs*)+0x67>
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	56                   	push   esi
c001bf9c:	e8 3b 53 ff ff       	call   c00112dc <UnixFile::getFileDescriptor()>
c001bfa1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfa4:	83 c4 10             	add    esp,0x10
c001bfa7:	89 02                	mov    DWORD PTR [edx],eax
c001bfa9:	c1 f8 1f             	sar    eax,0x1f
c001bfac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfaf:	31 c0                	xor    eax,eax
c001bfb1:	59                   	pop    ecx
c001bfb2:	31 d2                	xor    edx,edx
c001bfb4:	5b                   	pop    ebx
c001bfb5:	5e                   	pop    esi
c001bfb6:	c3                   	ret    
c001bfb7:	59                   	pop    ecx
c001bfb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfc2:	5b                   	pop    ebx
c001bfc3:	5e                   	pop    esi
c001bfc4:	c3                   	ret    

c001bfc5 <sysCallCloseDir(regs*)>:
c001bfc5:	53                   	push   ebx
c001bfc6:	83 ec 08             	sub    esp,0x8
c001bfc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfcd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bfd0:	83 f8 02             	cmp    eax,0x2
c001bfd3:	76 47                	jbe    c001c01c <sysCallCloseDir(regs*)+0x57>
c001bfd5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bfda:	77 2f                	ja     c001c00b <sysCallCloseDir(regs*)+0x46>
c001bfdc:	83 ec 0c             	sub    esp,0xc
c001bfdf:	50                   	push   eax
c001bfe0:	e8 ec 55 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001bfe5:	89 c3                	mov    ebx,eax
c001bfe7:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfea:	e8 09 76 ff ff       	call   c00135f8 <Directory::close()>
c001bfef:	83 c4 10             	add    esp,0x10
c001bff2:	85 db                	test   ebx,ebx
c001bff4:	74 0c                	je     c001c002 <sysCallCloseDir(regs*)+0x3d>
c001bff6:	83 ec 0c             	sub    esp,0xc
c001bff9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bffb:	53                   	push   ebx
c001bffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bfff:	83 c4 10             	add    esp,0x10
c001c002:	31 c0                	xor    eax,eax
c001c004:	31 d2                	xor    edx,edx
c001c006:	83 c4 08             	add    esp,0x8
c001c009:	5b                   	pop    ebx
c001c00a:	c3                   	ret    
c001c00b:	83 ec 08             	sub    esp,0x8
c001c00e:	50                   	push   eax
c001c00f:	68 4c cc 02 c0       	push   0xc002cc4c
c001c014:	e8 14 6b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c019:	83 c4 10             	add    esp,0x10
c001c01c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c021:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c026:	83 c4 08             	add    esp,0x8
c001c029:	5b                   	pop    ebx
c001c02a:	c3                   	ret    

c001c02b <sysCallMakeDir(regs*)>:
c001c02b:	56                   	push   esi
c001c02c:	53                   	push   ebx
c001c02d:	83 ec 10             	sub    esp,0x10
c001c030:	68 14 01 00 00       	push   0x114
c001c035:	e8 52 38 ff ff       	call   c000f88c <malloc>
c001c03a:	83 c4 0c             	add    esp,0xc
c001c03d:	89 c3                	mov    ebx,eax
c001c03f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c044:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c047:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c04b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c04e:	53                   	push   ebx
c001c04f:	e8 e4 74 ff ff       	call   c0013538 <Directory::Directory(char const*, Process*)>
c001c054:	83 c4 10             	add    esp,0x10
c001c057:	85 db                	test   ebx,ebx
c001c059:	74 32                	je     c001c08d <sysCallMakeDir(regs*)+0x62>
c001c05b:	83 ec 0c             	sub    esp,0xc
c001c05e:	53                   	push   ebx
c001c05f:	e8 18 77 ff ff       	call   c001377c <Directory::create()>
c001c064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c067:	89 c6                	mov    esi,eax
c001c069:	e8 8a 75 ff ff       	call   c00135f8 <Directory::close()>
c001c06e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c070:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c076:	83 c4 10             	add    esp,0x10
c001c079:	31 c0                	xor    eax,eax
c001c07b:	59                   	pop    ecx
c001c07c:	85 f6                	test   esi,esi
c001c07e:	5b                   	pop    ebx
c001c07f:	0f 95 c0             	setne  al
c001c082:	5e                   	pop    esi
c001c083:	31 d2                	xor    edx,edx
c001c085:	f7 d8                	neg    eax
c001c087:	83 d2 00             	adc    edx,0x0
c001c08a:	f7 da                	neg    edx
c001c08c:	c3                   	ret    
c001c08d:	59                   	pop    ecx
c001c08e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c093:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c098:	5b                   	pop    ebx
c001c099:	5e                   	pop    esi
c001c09a:	c3                   	ret    

c001c09b <sysCallWait(regs*)>:
c001c09b:	83 ec 10             	sub    esp,0x10
c001c09e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0a2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0a5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0ab:	e8 c8 25 00 00       	call   c001e678 <waitTask(int, int*, int)>
c001c0b0:	83 c4 1c             	add    esp,0x1c
c001c0b3:	99                   	cdq    
c001c0b4:	c3                   	ret    

c001c0b5 <sysCallNotImpl(regs*)>:
c001c0b5:	83 ec 18             	sub    esp,0x18
c001c0b8:	68 52 cb 02 c0       	push   0xc002cb52
c001c0bd:	e8 d7 e5 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001c0c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0cc:	83 c4 1c             	add    esp,0x1c
c001c0cf:	c3                   	ret    

c001c0d0 <sysPanic(regs*)>:
c001c0d0:	83 ec 18             	sub    esp,0x18
c001c0d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0d7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0da:	e8 ba e5 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001c0df:	c7 04 24 6c cb 02 c0 	mov    DWORD PTR [esp],0xc002cb6c
c001c0e6:	e8 ae e5 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001c0eb:	b8 01 00 00 00       	mov    eax,0x1
c001c0f0:	31 d2                	xor    edx,edx
c001c0f2:	83 c4 1c             	add    esp,0x1c
c001c0f5:	c3                   	ret    

c001c0f6 <sysCallRmdir(regs*)>:
c001c0f6:	56                   	push   esi
c001c0f7:	53                   	push   ebx
c001c0f8:	83 ec 20             	sub    esp,0x20
c001c0fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c0ff:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c102:	68 14 01 00 00       	push   0x114
c001c107:	e8 80 37 ff ff       	call   c000f88c <malloc>
c001c10c:	83 c4 0c             	add    esp,0xc
c001c10f:	89 c3                	mov    ebx,eax
c001c111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c116:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c119:	56                   	push   esi
c001c11a:	53                   	push   ebx
c001c11b:	e8 6c 6f ff ff       	call   c001308c <File::File(char const*, Process*)>
c001c120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c123:	e8 40 71 ff ff       	call   c0013268 <File::unlink()>
c001c128:	83 c4 10             	add    esp,0x10
c001c12b:	85 db                	test   ebx,ebx
c001c12d:	74 14                	je     c001c143 <sysCallRmdir(regs*)+0x4d>
c001c12f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c133:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c135:	83 ec 0c             	sub    esp,0xc
c001c138:	53                   	push   ebx
c001c139:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c13c:	83 c4 10             	add    esp,0x10
c001c13f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c143:	85 c0                	test   eax,eax
c001c145:	0f 95 c0             	setne  al
c001c148:	31 d2                	xor    edx,edx
c001c14a:	0f b6 c0             	movzx  eax,al
c001c14d:	f7 d8                	neg    eax
c001c14f:	83 d2 00             	adc    edx,0x0
c001c152:	83 c4 14             	add    esp,0x14
c001c155:	f7 da                	neg    edx
c001c157:	5b                   	pop    ebx
c001c158:	5e                   	pop    esi
c001c159:	c3                   	ret    

c001c15a <sysCallUnlink(regs*)>:
c001c15a:	56                   	push   esi
c001c15b:	53                   	push   ebx
c001c15c:	83 ec 20             	sub    esp,0x20
c001c15f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c163:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c166:	68 14 01 00 00       	push   0x114
c001c16b:	e8 1c 37 ff ff       	call   c000f88c <malloc>
c001c170:	83 c4 0c             	add    esp,0xc
c001c173:	89 c3                	mov    ebx,eax
c001c175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c17a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c17d:	56                   	push   esi
c001c17e:	53                   	push   ebx
c001c17f:	e8 08 6f ff ff       	call   c001308c <File::File(char const*, Process*)>
c001c184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c187:	e8 dc 70 ff ff       	call   c0013268 <File::unlink()>
c001c18c:	83 c4 10             	add    esp,0x10
c001c18f:	85 db                	test   ebx,ebx
c001c191:	74 14                	je     c001c1a7 <sysCallUnlink(regs*)+0x4d>
c001c193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c197:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c199:	83 ec 0c             	sub    esp,0xc
c001c19c:	53                   	push   ebx
c001c19d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1a0:	83 c4 10             	add    esp,0x10
c001c1a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1a7:	85 c0                	test   eax,eax
c001c1a9:	0f 95 c0             	setne  al
c001c1ac:	31 d2                	xor    edx,edx
c001c1ae:	0f b6 c0             	movzx  eax,al
c001c1b1:	f7 d8                	neg    eax
c001c1b3:	83 d2 00             	adc    edx,0x0
c001c1b6:	83 c4 14             	add    esp,0x14
c001c1b9:	f7 da                	neg    edx
c001c1bb:	5b                   	pop    ebx
c001c1bc:	5e                   	pop    esi
c001c1bd:	c3                   	ret    

c001c1be <sysCallGetArgv(regs*)>:
c001c1be:	83 ec 0c             	sub    esp,0xc
c001c1c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c1c5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c1c8:	85 c0                	test   eax,eax
c001c1ca:	78 2b                	js     c001c1f7 <sysCallGetArgv(regs*)+0x39>
c001c1cc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c1d2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c1d5:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c1db:	7d 1a                	jge    c001c1f7 <sysCallGetArgv(regs*)+0x39>
c001c1dd:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c1e4:	85 c0                	test   eax,eax
c001c1e6:	74 17                	je     c001c1ff <sysCallGetArgv(regs*)+0x41>
c001c1e8:	83 ec 08             	sub    esp,0x8
c001c1eb:	50                   	push   eax
c001c1ec:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c1ef:	e8 18 46 fe ff       	call   c000080c <strcpy>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	31 c0                	xor    eax,eax
c001c1f9:	31 d2                	xor    edx,edx
c001c1fb:	83 c4 0c             	add    esp,0xc
c001c1fe:	c3                   	ret    
c001c1ff:	b8 01 00 00 00       	mov    eax,0x1
c001c204:	31 d2                	xor    edx,edx
c001c206:	83 c4 0c             	add    esp,0xc
c001c209:	c3                   	ret    

c001c20a <sysCallTTYName(regs*)>:
c001c20a:	56                   	push   esi
c001c20b:	53                   	push   ebx
c001c20c:	53                   	push   ebx
c001c20d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c211:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c214:	85 c0                	test   eax,eax
c001c216:	74 5f                	je     c001c277 <sysCallTTYName(regs*)+0x6d>
c001c218:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c21b:	83 f8 02             	cmp    eax,0x2
c001c21e:	77 3e                	ja     c001c25e <sysCallTTYName(regs*)+0x54>
c001c220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c225:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c228:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c22e:	85 db                	test   ebx,ebx
c001c230:	74 45                	je     c001c277 <sysCallTTYName(regs*)+0x6d>
c001c232:	83 ec 0c             	sub    esp,0xc
c001c235:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c237:	53                   	push   ebx
c001c238:	ff 10                	call   DWORD PTR [eax]
c001c23a:	83 c4 10             	add    esp,0x10
c001c23d:	84 c0                	test   al,al
c001c23f:	74 41                	je     c001c282 <sysCallTTYName(regs*)+0x78>
c001c241:	83 ec 08             	sub    esp,0x8
c001c244:	81 c3 82 00 00 00    	add    ebx,0x82
c001c24a:	53                   	push   ebx
c001c24b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c24e:	e8 b9 45 fe ff       	call   c000080c <strcpy>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	31 c0                	xor    eax,eax
c001c258:	59                   	pop    ecx
c001c259:	31 d2                	xor    edx,edx
c001c25b:	5b                   	pop    ebx
c001c25c:	5e                   	pop    esi
c001c25d:	c3                   	ret    
c001c25e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c263:	74 bb                	je     c001c220 <sysCallTTYName(regs*)+0x16>
c001c265:	83 ec 0c             	sub    esp,0xc
c001c268:	50                   	push   eax
c001c269:	e8 63 53 ff ff       	call   c00115d1 <getFromFileDescriptor(int)>
c001c26e:	83 c4 10             	add    esp,0x10
c001c271:	89 c3                	mov    ebx,eax
c001c273:	85 db                	test   ebx,ebx
c001c275:	75 bb                	jne    c001c232 <sysCallTTYName(regs*)+0x28>
c001c277:	59                   	pop    ecx
c001c278:	b8 01 00 00 00       	mov    eax,0x1
c001c27d:	31 d2                	xor    edx,edx
c001c27f:	5b                   	pop    ebx
c001c280:	5e                   	pop    esi
c001c281:	c3                   	ret    
c001c282:	59                   	pop    ecx
c001c283:	b8 02 00 00 00       	mov    eax,0x2
c001c288:	31 d2                	xor    edx,edx
c001c28a:	5b                   	pop    ebx
c001c28b:	5e                   	pop    esi
c001c28c:	c3                   	ret    

c001c28d <sysCallUSleep(regs*)>:
c001c28d:	83 ec 14             	sub    esp,0x14
c001c290:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c295:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c299:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2a0:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2a3:	01 ca                	add    edx,ecx
c001c2a5:	52                   	push   edx
c001c2a6:	50                   	push   eax
c001c2a7:	e8 a3 24 00 00       	call   c001e74f <nanoSleep(unsigned long long)>
c001c2ac:	31 c0                	xor    eax,eax
c001c2ae:	31 d2                	xor    edx,edx
c001c2b0:	83 c4 1c             	add    esp,0x1c
c001c2b3:	c3                   	ret    

c001c2b4 <sysCallSpawn(regs*)>:
c001c2b4:	56                   	push   esi
c001c2b5:	53                   	push   ebx
c001c2b6:	50                   	push   eax
c001c2b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2bb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2be:	85 c0                	test   eax,eax
c001c2c0:	75 08                	jne    c001c2ca <sysCallSpawn(regs*)+0x16>
c001c2c2:	59                   	pop    ecx
c001c2c3:	31 c0                	xor    eax,eax
c001c2c5:	31 d2                	xor    edx,edx
c001c2c7:	5b                   	pop    ebx
c001c2c8:	5e                   	pop    esi
c001c2c9:	c3                   	ret    
c001c2ca:	83 ec 08             	sub    esp,0x8
c001c2cd:	50                   	push   eax
c001c2ce:	68 7b cb 02 c0       	push   0xc002cb7b
c001c2d3:	e8 55 68 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c2d8:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c2df:	e8 a8 35 ff ff       	call   c000f88c <malloc>
c001c2e4:	83 c4 10             	add    esp,0x10
c001c2e7:	89 c6                	mov    esi,eax
c001c2e9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c2ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2ef:	85 c0                	test   eax,eax
c001c2f1:	75 32                	jne    c001c325 <sysCallSpawn(regs*)+0x71>
c001c2f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2fb:	52                   	push   edx
c001c2fc:	50                   	push   eax
c001c2fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c300:	56                   	push   esi
c001c301:	e8 26 1b 00 00       	call   c001de2c <Process::Process(char const*, Process*, char**)>
c001c306:	83 c4 10             	add    esp,0x10
c001c309:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c310:	75 b0                	jne    c001c2c2 <sysCallSpawn(regs*)+0xe>
c001c312:	83 ec 0c             	sub    esp,0xc
c001c315:	56                   	push   esi
c001c316:	e8 f3 1f 00 00       	call   c001e30e <Process::createUserThread()>
c001c31b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c31d:	83 c4 10             	add    esp,0x10
c001c320:	99                   	cdq    
c001c321:	59                   	pop    ecx
c001c322:	5b                   	pop    ebx
c001c323:	5e                   	pop    esi
c001c324:	c3                   	ret    
c001c325:	31 c0                	xor    eax,eax
c001c327:	eb d2                	jmp    c001c2fb <sysCallSpawn(regs*)+0x47>

c001c329 <sysCallGetEnv(regs*)>:
c001c329:	55                   	push   ebp
c001c32a:	57                   	push   edi
c001c32b:	56                   	push   esi
c001c32c:	53                   	push   ebx
c001c32d:	83 ec 28             	sub    esp,0x28
c001c330:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c334:	68 89 cb 02 c0       	push   0xc002cb89
c001c339:	e8 ef 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c33e:	5f                   	pop    edi
c001c33f:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c342:	5d                   	pop    ebp
c001c343:	53                   	push   ebx
c001c344:	68 b6 ce 02 c0       	push   0xc002ceb6
c001c349:	e8 df 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c34e:	58                   	pop    eax
c001c34f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c352:	5a                   	pop    edx
c001c353:	57                   	push   edi
c001c354:	68 92 cb 02 c0       	push   0xc002cb92
c001c359:	e8 cf 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c35e:	59                   	pop    ecx
c001c35f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c364:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c367:	e8 49 e2 ff ff       	call   c001a5b5 <Krnl::getProcessTotalEnvCount(Process*)>
c001c36c:	5a                   	pop    edx
c001c36d:	89 c5                	mov    ebp,eax
c001c36f:	59                   	pop    ecx
c001c370:	50                   	push   eax
c001c371:	68 9c cb 02 c0       	push   0xc002cb9c
c001c376:	e8 b2 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	39 ef                	cmp    edi,ebp
c001c380:	7c 15                	jl     c001c397 <sysCallGetEnv(regs*)+0x6e>
c001c382:	85 db                	test   ebx,ebx
c001c384:	75 0c                	jne    c001c392 <sysCallGetEnv(regs*)+0x69>
c001c386:	83 c4 1c             	add    esp,0x1c
c001c389:	31 c0                	xor    eax,eax
c001c38b:	5b                   	pop    ebx
c001c38c:	31 d2                	xor    edx,edx
c001c38e:	5e                   	pop    esi
c001c38f:	5f                   	pop    edi
c001c390:	5d                   	pop    ebp
c001c391:	c3                   	ret    
c001c392:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c395:	eb ef                	jmp    c001c386 <sysCallGetEnv(regs*)+0x5d>
c001c397:	83 ec 0c             	sub    esp,0xc
c001c39a:	68 a8 cb 02 c0       	push   0xc002cba8
c001c39f:	e8 89 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c3a4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3a8:	83 c4 0c             	add    esp,0xc
c001c3ab:	57                   	push   edi
c001c3ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3b2:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c3b5:	50                   	push   eax
c001c3b6:	e8 1a e2 ff ff       	call   c001a5d5 <Krnl::getProcessEnvPair(Process*, int)>
c001c3bb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c3bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c3c3:	68 67 cf 02 c0       	push   0xc002cf67
c001c3c8:	e8 60 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c3d3:	85 f6                	test   esi,esi
c001c3d5:	75 47                	jne    c001c41e <sysCallGetEnv(regs*)+0xf5>
c001c3d7:	83 ec 0c             	sub    esp,0xc
c001c3da:	55                   	push   ebp
c001c3db:	e8 8c 43 fe ff       	call   c000076c <strlen>
c001c3e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3e3:	89 c3                	mov    ebx,eax
c001c3e5:	e8 82 43 fe ff       	call   c000076c <strlen>
c001c3ea:	5a                   	pop    edx
c001c3eb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c3ef:	59                   	pop    ecx
c001c3f0:	50                   	push   eax
c001c3f1:	68 ab cb 02 c0       	push   0xc002cbab
c001c3f6:	e8 32 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c3fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c3fe:	e8 69 43 fe ff       	call   c000076c <strlen>
c001c403:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c406:	89 c3                	mov    ebx,eax
c001c408:	e8 5f 43 fe ff       	call   c000076c <strlen>
c001c40d:	83 c4 10             	add    esp,0x10
c001c410:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c414:	83 c4 1c             	add    esp,0x1c
c001c417:	31 d2                	xor    edx,edx
c001c419:	5b                   	pop    ebx
c001c41a:	5e                   	pop    esi
c001c41b:	5f                   	pop    edi
c001c41c:	5d                   	pop    ebp
c001c41d:	c3                   	ret    
c001c41e:	83 ec 0c             	sub    esp,0xc
c001c421:	68 81 cf 02 c0       	push   0xc002cf81
c001c426:	e8 02 67 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c42b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c42e:	58                   	pop    eax
c001c42f:	5a                   	pop    edx
c001c430:	55                   	push   ebp
c001c431:	53                   	push   ebx
c001c432:	e8 d5 43 fe ff       	call   c000080c <strcpy>
c001c437:	59                   	pop    ecx
c001c438:	5e                   	pop    esi
c001c439:	68 b5 cb 02 c0       	push   0xc002cbb5
c001c43e:	53                   	push   ebx
c001c43f:	e8 08 45 fe ff       	call   c000094c <strcat>
c001c444:	5d                   	pop    ebp
c001c445:	58                   	pop    eax
c001c446:	57                   	push   edi
c001c447:	53                   	push   ebx
c001c448:	e8 ff 44 fe ff       	call   c000094c <strcat>
c001c44d:	c7 04 24 9b cf 02 c0 	mov    DWORD PTR [esp],0xc002cf9b
c001c454:	e8 d4 66 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	e9 25 ff ff ff       	jmp    c001c386 <sysCallGetEnv(regs*)+0x5d>

c001c461 <sysAppSettings(regs*)>:
c001c461:	57                   	push   edi
c001c462:	56                   	push   esi
c001c463:	56                   	push   esi
c001c464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c468:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c46b:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c471:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c476:	66 3d c0 09          	cmp    ax,0x9c0
c001c47a:	75 2e                	jne    c001c4aa <sysAppSettings(regs*)+0x49>
c001c47c:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c482:	83 e0 1f             	and    eax,0x1f
c001c485:	3c 01                	cmp    al,0x1
c001c487:	74 2c                	je     c001c4b5 <sysAppSettings(regs*)+0x54>
c001c489:	3c 07                	cmp    al,0x7
c001c48b:	0f 84 b3 00 00 00    	je     c001c544 <sysAppSettings(regs*)+0xe3>
c001c491:	84 c0                	test   al,al
c001c493:	0f 84 d2 00 00 00    	je     c001c56b <sysAppSettings(regs*)+0x10a>
c001c499:	3c 08                	cmp    al,0x8
c001c49b:	74 63                	je     c001c500 <sysAppSettings(regs*)+0x9f>
c001c49d:	59                   	pop    ecx
c001c49e:	0f b6 c0             	movzx  eax,al
c001c4a1:	5e                   	pop    esi
c001c4a2:	05 e8 03 00 00       	add    eax,0x3e8
c001c4a7:	5f                   	pop    edi
c001c4a8:	99                   	cdq    
c001c4a9:	c3                   	ret    
c001c4aa:	b8 01 00 00 00       	mov    eax,0x1
c001c4af:	59                   	pop    ecx
c001c4b0:	31 d2                	xor    edx,edx
c001c4b2:	5e                   	pop    esi
c001c4b3:	5f                   	pop    edi
c001c4b4:	c3                   	ret    
c001c4b5:	50                   	push   eax
c001c4b6:	68 00 01 00 00       	push   0x100
c001c4bb:	6a 00                	push   0x0
c001c4bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4c5:	83 c0 0c             	add    eax,0xc
c001c4c8:	50                   	push   eax
c001c4c9:	e8 82 42 fe ff       	call   c0000750 <memset>
c001c4ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4d3:	b9 ff 00 00 00       	mov    ecx,0xff
c001c4d8:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c4db:	83 c7 0c             	add    edi,0xc
c001c4de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4e5:	5a                   	pop    edx
c001c4e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c4e9:	59                   	pop    ecx
c001c4ea:	8d 50 0c             	lea    edx,[eax+0xc]
c001c4ed:	52                   	push   edx
c001c4ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c4f4:	e8 03 43 ff ff       	call   c00107fc <VgaText::setTitle(char*)>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	31 c0                	xor    eax,eax
c001c4fe:	eb af                	jmp    c001c4af <sysAppSettings(regs*)+0x4e>
c001c500:	83 ec 08             	sub    esp,0x8
c001c503:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c509:	83 e0 0f             	and    eax,0xf
c001c50c:	50                   	push   eax
c001c50d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c512:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c515:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c51b:	e8 ce 42 ff ff       	call   c00107ee <VgaText::setTitleColour(VgaColour)>
c001c520:	5f                   	pop    edi
c001c521:	58                   	pop    eax
c001c522:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c528:	c1 e8 04             	shr    eax,0x4
c001c52b:	83 e0 0f             	and    eax,0xf
c001c52e:	50                   	push   eax
c001c52f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c534:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c537:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c53d:	e8 9e 42 ff ff       	call   c00107e0 <VgaText::setTitleTextColour(VgaColour)>
c001c542:	eb b5                	jmp    c001c4f9 <sysAppSettings(regs*)+0x98>
c001c544:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c549:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c54c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c552:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c558:	c0 e8 06             	shr    al,0x6
c001c55b:	83 e0 01             	and    eax,0x1
c001c55e:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c564:	31 c0                	xor    eax,eax
c001c566:	e9 44 ff ff ff       	jmp    c001c4af <sysAppSettings(regs*)+0x4e>
c001c56b:	b8 02 00 00 00       	mov    eax,0x2
c001c570:	e9 3a ff ff ff       	jmp    c001c4af <sysAppSettings(regs*)+0x4e>

c001c575 <sysSetFatAttrib(regs*)>:
c001c575:	57                   	push   edi
c001c576:	56                   	push   esi
c001c577:	53                   	push   ebx
c001c578:	83 ec 1c             	sub    esp,0x1c
c001c57b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c57f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c582:	68 14 01 00 00       	push   0x114
c001c587:	e8 00 33 ff ff       	call   c000f88c <malloc>
c001c58c:	83 c4 0c             	add    esp,0xc
c001c58f:	89 c3                	mov    ebx,eax
c001c591:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c596:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c599:	57                   	push   edi
c001c59a:	53                   	push   ebx
c001c59b:	e8 ec 6a ff ff       	call   c001308c <File::File(char const*, Process*)>
c001c5a0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5a3:	83 c4 0c             	add    esp,0xc
c001c5a6:	0f b6 d4             	movzx  edx,ah
c001c5a9:	0f b6 c0             	movzx  eax,al
c001c5ac:	52                   	push   edx
c001c5ad:	50                   	push   eax
c001c5ae:	53                   	push   ebx
c001c5af:	e8 4e 6d ff ff       	call   c0013302 <File::chfatattr(unsigned char, unsigned char)>
c001c5b4:	83 c4 10             	add    esp,0x10
c001c5b7:	85 db                	test   ebx,ebx
c001c5b9:	74 14                	je     c001c5cf <sysSetFatAttrib(regs*)+0x5a>
c001c5bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	53                   	push   ebx
c001c5c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5c8:	83 c4 10             	add    esp,0x10
c001c5cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5cf:	85 c0                	test   eax,eax
c001c5d1:	0f 95 c0             	setne  al
c001c5d4:	31 d2                	xor    edx,edx
c001c5d6:	0f b6 c0             	movzx  eax,al
c001c5d9:	f7 d8                	neg    eax
c001c5db:	83 d2 00             	adc    edx,0x0
c001c5de:	83 c4 10             	add    esp,0x10
c001c5e1:	f7 da                	neg    edx
c001c5e3:	5b                   	pop    ebx
c001c5e4:	5e                   	pop    esi
c001c5e5:	5f                   	pop    edi
c001c5e6:	c3                   	ret    

c001c5e7 <sysPipe(regs*)>:
c001c5e7:	57                   	push   edi
c001c5e8:	56                   	push   esi
c001c5e9:	53                   	push   ebx
c001c5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c5f4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c5f7:	6a 20                	push   0x20
c001c5f9:	e8 8e 32 ff ff       	call   c000f88c <malloc>
c001c5fe:	89 c3                	mov    ebx,eax
c001c600:	58                   	pop    eax
c001c601:	5a                   	pop    edx
c001c602:	68 00 50 00 00       	push   0x5000
c001c607:	53                   	push   ebx
c001c608:	e8 97 3b ff ff       	call   c00101a4 <Pipe::Pipe(int)>
c001c60d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c610:	e8 c7 4c ff ff       	call   c00112dc <UnixFile::getFileDescriptor()>
c001c615:	89 07                	mov    DWORD PTR [edi],eax
c001c617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c61a:	e8 bd 4c ff ff       	call   c00112dc <UnixFile::getFileDescriptor()>
c001c61f:	83 c4 10             	add    esp,0x10
c001c622:	89 06                	mov    DWORD PTR [esi],eax
c001c624:	31 d2                	xor    edx,edx
c001c626:	5b                   	pop    ebx
c001c627:	31 c0                	xor    eax,eax
c001c629:	5e                   	pop    esi
c001c62a:	5f                   	pop    edi
c001c62b:	c3                   	ret    

c001c62c <sysGetUnixTime(regs*)>:
c001c62c:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001c631:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c637:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c63b:	e9 3e 74 ff ff       	jmp    c0013a7e <Clock::timeInSecondsLocal()>

c001c640 <string_ends_with(char const*, char const*)>:
c001c640:	57                   	push   edi
c001c641:	56                   	push   esi
c001c642:	53                   	push   ebx
c001c643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c647:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c64b:	83 ec 0c             	sub    esp,0xc
c001c64e:	53                   	push   ebx
c001c64f:	e8 18 41 fe ff       	call   c000076c <strlen>
c001c654:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c657:	89 c6                	mov    esi,eax
c001c659:	e8 0e 41 fe ff       	call   c000076c <strlen>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	39 c6                	cmp    esi,eax
c001c663:	7d 06                	jge    c001c66b <string_ends_with(char const*, char const*)+0x2b>
c001c665:	5b                   	pop    ebx
c001c666:	31 c0                	xor    eax,eax
c001c668:	5e                   	pop    esi
c001c669:	5f                   	pop    edi
c001c66a:	c3                   	ret    
c001c66b:	83 ec 08             	sub    esp,0x8
c001c66e:	29 c6                	sub    esi,eax
c001c670:	57                   	push   edi
c001c671:	01 f3                	add    ebx,esi
c001c673:	53                   	push   ebx
c001c674:	e8 1f 42 fe ff       	call   c0000898 <strcmp>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	85 c0                	test   eax,eax
c001c67e:	5b                   	pop    ebx
c001c67f:	0f 94 c0             	sete   al
c001c682:	5e                   	pop    esi
c001c683:	0f b6 c0             	movzx  eax,al
c001c686:	5f                   	pop    edi
c001c687:	c3                   	ret    

c001c688 <sysCallOpen(regs*)>:
c001c688:	56                   	push   esi
c001c689:	53                   	push   ebx
c001c68a:	81 ec 04 01 00 00    	sub    esp,0x104
c001c690:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c697:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c69a:	85 c9                	test   ecx,ecx
c001c69c:	0f 84 b3 00 00 00    	je     c001c755 <sysCallOpen(regs*)+0xcd>
c001c6a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6a5:	85 c0                	test   eax,eax
c001c6a7:	0f 84 a8 00 00 00    	je     c001c755 <sysCallOpen(regs*)+0xcd>
c001c6ad:	52                   	push   edx
c001c6ae:	68 b7 cb 02 c0       	push   0xc002cbb7
c001c6b3:	50                   	push   eax
c001c6b4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c6b8:	56                   	push   esi
c001c6b9:	e8 24 68 ff ff       	call   c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c6be:	89 34 24             	mov    DWORD PTR [esp],esi
c001c6c1:	e8 a6 40 fe ff       	call   c000076c <strlen>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	48                   	dec    eax
c001c6ca:	74 1d                	je     c001c6e9 <sysCallOpen(regs*)+0x61>
c001c6cc:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c6cf:	eb 0f                	jmp    c001c6e0 <sysCallOpen(regs*)+0x58>
c001c6d1:	80 fa 3a             	cmp    dl,0x3a
c001c6d4:	74 0f                	je     c001c6e5 <sysCallOpen(regs*)+0x5d>
c001c6d6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c6da:	48                   	dec    eax
c001c6db:	74 0c                	je     c001c6e9 <sysCallOpen(regs*)+0x61>
c001c6dd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c6e0:	80 fa 2e             	cmp    dl,0x2e
c001c6e3:	75 ec                	jne    c001c6d1 <sysCallOpen(regs*)+0x49>
c001c6e5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c6e9:	83 ec 08             	sub    esp,0x8
c001c6ec:	68 bb cb 02 c0       	push   0xc002cbbb
c001c6f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c6f4:	e8 47 ff ff ff       	call   c001c640 <string_ends_with(char const*, char const*)>
c001c6f9:	83 c4 10             	add    esp,0x10
c001c6fc:	85 c0                	test   eax,eax
c001c6fe:	75 17                	jne    c001c717 <sysCallOpen(regs*)+0x8f>
c001c700:	83 ec 08             	sub    esp,0x8
c001c703:	68 dc cb 02 c0       	push   0xc002cbdc
c001c708:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c70b:	e8 30 ff ff ff       	call   c001c640 <string_ends_with(char const*, char const*)>
c001c710:	83 c4 10             	add    esp,0x10
c001c713:	85 c0                	test   eax,eax
c001c715:	74 51                	je     c001c768 <sysCallOpen(regs*)+0xe0>
c001c717:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c71a:	83 ec 08             	sub    esp,0x8
c001c71d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c723:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c72a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c72d:	ff 30                	push   DWORD PTR [eax]
c001c72f:	68 c0 cb 02 c0       	push   0xc002cbc0
c001c734:	e8 f4 63 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c739:	c7 04 24 cf cb 02 c0 	mov    DWORD PTR [esp],0xc002cbcf
c001c740:	e8 e8 63 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	81 c4 04 01 00 00    	add    esp,0x104
c001c74e:	31 c0                	xor    eax,eax
c001c750:	31 d2                	xor    edx,edx
c001c752:	5b                   	pop    ebx
c001c753:	5e                   	pop    esi
c001c754:	c3                   	ret    
c001c755:	81 c4 04 01 00 00    	add    esp,0x104
c001c75b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c760:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c765:	5b                   	pop    ebx
c001c766:	5e                   	pop    esi
c001c767:	c3                   	ret    
c001c768:	83 ec 08             	sub    esp,0x8
c001c76b:	68 bc cb 02 c0       	push   0xc002cbbc
c001c770:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c773:	e8 20 41 fe ff       	call   c0000898 <strcmp>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	85 c0                	test   eax,eax
c001c77d:	74 98                	je     c001c717 <sysCallOpen(regs*)+0x8f>
c001c77f:	83 ec 08             	sub    esp,0x8
c001c782:	68 bb cb 02 c0       	push   0xc002cbbb
c001c787:	56                   	push   esi
c001c788:	e8 b3 fe ff ff       	call   c001c640 <string_ends_with(char const*, char const*)>
c001c78d:	83 c4 10             	add    esp,0x10
c001c790:	85 c0                	test   eax,eax
c001c792:	75 83                	jne    c001c717 <sysCallOpen(regs*)+0x8f>
c001c794:	83 ec 08             	sub    esp,0x8
c001c797:	68 e1 cb 02 c0       	push   0xc002cbe1
c001c79c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c79f:	e8 9c fe ff ff       	call   c001c640 <string_ends_with(char const*, char const*)>
c001c7a4:	83 c4 10             	add    esp,0x10
c001c7a7:	85 c0                	test   eax,eax
c001c7a9:	0f 85 d9 00 00 00    	jne    c001c888 <sysCallOpen(regs*)+0x200>
c001c7af:	83 ec 08             	sub    esp,0x8
c001c7b2:	68 e6 cb 02 c0       	push   0xc002cbe6
c001c7b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7ba:	e8 81 fe ff ff       	call   c001c640 <string_ends_with(char const*, char const*)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	85 c0                	test   eax,eax
c001c7c4:	0f 85 be 00 00 00    	jne    c001c888 <sysCallOpen(regs*)+0x200>
c001c7ca:	83 ec 08             	sub    esp,0x8
c001c7cd:	68 e2 cb 02 c0       	push   0xc002cbe2
c001c7d2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7d5:	e8 be 40 fe ff       	call   c0000898 <strcmp>
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	85 c0                	test   eax,eax
c001c7df:	0f 84 a3 00 00 00    	je     c001c888 <sysCallOpen(regs*)+0x200>
c001c7e5:	83 ec 08             	sub    esp,0x8
c001c7e8:	68 e1 cb 02 c0       	push   0xc002cbe1
c001c7ed:	56                   	push   esi
c001c7ee:	e8 4d fe ff ff       	call   c001c640 <string_ends_with(char const*, char const*)>
c001c7f3:	83 c4 10             	add    esp,0x10
c001c7f6:	85 c0                	test   eax,eax
c001c7f8:	0f 85 8a 00 00 00    	jne    c001c888 <sysCallOpen(regs*)+0x200>
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	68 14 01 00 00       	push   0x114
c001c806:	e8 81 30 ff ff       	call   c000f88c <malloc>
c001c80b:	83 c4 0c             	add    esp,0xc
c001c80e:	89 c6                	mov    esi,eax
c001c810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c815:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c818:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c81b:	56                   	push   esi
c001c81c:	e8 6b 68 ff ff       	call   c001308c <File::File(char const*, Process*)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	85 f6                	test   esi,esi
c001c826:	0f 84 29 ff ff ff    	je     c001c755 <sysCallOpen(regs*)+0xcd>
c001c82c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c82f:	0f b6 c2             	movzx  eax,dl
c001c832:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c835:	89 d0                	mov    eax,edx
c001c837:	83 e0 01             	and    eax,0x1
c001c83a:	f6 c2 02             	test   dl,0x2
c001c83d:	74 03                	je     c001c842 <sysCallOpen(regs*)+0x1ba>
c001c83f:	83 c8 02             	or     eax,0x2
c001c842:	f6 c2 04             	test   dl,0x4
c001c845:	74 03                	je     c001c84a <sysCallOpen(regs*)+0x1c2>
c001c847:	83 c8 04             	or     eax,0x4
c001c84a:	f6 c2 08             	test   dl,0x8
c001c84d:	74 03                	je     c001c852 <sysCallOpen(regs*)+0x1ca>
c001c84f:	83 c8 0a             	or     eax,0xa
c001c852:	83 e2 10             	and    edx,0x10
c001c855:	74 03                	je     c001c85a <sysCallOpen(regs*)+0x1d2>
c001c857:	83 c8 12             	or     eax,0x12
c001c85a:	83 ec 08             	sub    esp,0x8
c001c85d:	50                   	push   eax
c001c85e:	56                   	push   esi
c001c85f:	e8 8c 68 ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001c864:	83 c4 10             	add    esp,0x10
c001c867:	85 c0                	test   eax,eax
c001c869:	0f 85 e6 fe ff ff    	jne    c001c755 <sysCallOpen(regs*)+0xcd>
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	56                   	push   esi
c001c873:	e8 64 4a ff ff       	call   c00112dc <UnixFile::getFileDescriptor()>
c001c878:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c87b:	89 02                	mov    DWORD PTR [edx],eax
c001c87d:	c1 f8 1f             	sar    eax,0x1f
c001c880:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c883:	e9 bd fe ff ff       	jmp    c001c745 <sysCallOpen(regs*)+0xbd>
c001c888:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c88b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c891:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c898:	e9 ab fe ff ff       	jmp    c001c748 <sysCallOpen(regs*)+0xc0>

c001c89d <Sys::loadSyscalls()>:
c001c89d:	c7 05 00 1d 03 c0 8d b9 01 c0 	mov    DWORD PTR ds:0xc0031d00,0xc001b98d
c001c8a7:	c7 05 04 1d 03 c0 f2 b4 01 c0 	mov    DWORD PTR ds:0xc0031d04,0xc001b4f2
c001c8b1:	c7 05 08 1d 03 c0 e0 b6 01 c0 	mov    DWORD PTR ds:0xc0031d08,0xc001b6e0
c001c8bb:	c7 05 0c 1d 03 c0 c3 b8 01 c0 	mov    DWORD PTR ds:0xc0031d0c,0xc001b8c3
c001c8c5:	c7 05 10 1d 03 c0 78 b6 01 c0 	mov    DWORD PTR ds:0xc0031d10,0xc001b678
c001c8cf:	c7 05 14 1d 03 c0 29 b5 01 c0 	mov    DWORD PTR ds:0xc0031d14,0xc001b529
c001c8d9:	c7 05 18 1d 03 c0 0a b5 01 c0 	mov    DWORD PTR ds:0xc0031d18,0xc001b50a
c001c8e3:	c7 05 1c 1d 03 c0 35 b7 01 c0 	mov    DWORD PTR ds:0xc0031d1c,0xc001b735
c001c8ed:	c7 05 24 1d 03 c0 c8 be 01 c0 	mov    DWORD PTR ds:0xc0031d24,0xc001bec8
c001c8f7:	c7 05 20 1d 03 c0 88 c6 01 c0 	mov    DWORD PTR ds:0xc0031d20,0xc001c688
c001c901:	c7 05 28 1d 03 c0 50 bf 01 c0 	mov    DWORD PTR ds:0xc0031d28,0xc001bf50
c001c90b:	c7 05 2c 1d 03 c0 b7 bb 01 c0 	mov    DWORD PTR ds:0xc0031d2c,0xc001bbb7
c001c915:	c7 05 30 1d 03 c0 d3 b9 01 c0 	mov    DWORD PTR ds:0xc0031d30,0xc001b9d3
c001c91f:	c7 05 34 1d 03 c0 d8 b9 01 c0 	mov    DWORD PTR ds:0xc0031d34,0xc001b9d8
c001c929:	c7 05 38 1d 03 c0 2b c0 01 c0 	mov    DWORD PTR ds:0xc0031d38,0xc001c02b
c001c933:	c7 05 3c 1d 03 c0 c5 bf 01 c0 	mov    DWORD PTR ds:0xc0031d3c,0xc001bfc5
c001c93d:	c7 05 40 1d 03 c0 9f bc 01 c0 	mov    DWORD PTR ds:0xc0031d40,0xc001bc9f
c001c947:	c7 05 44 1d 03 c0 08 bd 01 c0 	mov    DWORD PTR ds:0xc0031d44,0xc001bd08
c001c951:	c7 05 48 1d 03 c0 85 bd 01 c0 	mov    DWORD PTR ds:0xc0031d48,0xc001bd85
c001c95b:	c7 05 4c 1d 03 c0 dd b9 01 c0 	mov    DWORD PTR ds:0xc0031d4c,0xc001b9dd
c001c965:	c7 05 50 1d 03 c0 9b c0 01 c0 	mov    DWORD PTR ds:0xc0031d50,0xc001c09b
c001c96f:	c7 05 54 1d 03 c0 b5 c0 01 c0 	mov    DWORD PTR ds:0xc0031d54,0xc001c0b5
c001c979:	c7 05 58 1d 03 c0 b5 c0 01 c0 	mov    DWORD PTR ds:0xc0031d58,0xc001c0b5
c001c983:	c7 05 5c 1d 03 c0 f6 c0 01 c0 	mov    DWORD PTR ds:0xc0031d5c,0xc001c0f6
c001c98d:	c7 05 60 1d 03 c0 5a c1 01 c0 	mov    DWORD PTR ds:0xc0031d60,0xc001c15a
c001c997:	c7 05 64 1d 03 c0 89 bb 01 c0 	mov    DWORD PTR ds:0xc0031d64,0xc001bb89
c001c9a1:	c7 05 68 1d 03 c0 be c1 01 c0 	mov    DWORD PTR ds:0xc0031d68,0xc001c1be
c001c9ab:	c7 05 6c 1d 03 c0 46 bb 01 c0 	mov    DWORD PTR ds:0xc0031d6c,0xc001bb46
c001c9b5:	c7 05 70 1d 03 c0 0a c2 01 c0 	mov    DWORD PTR ds:0xc0031d70,0xc001c20a
c001c9bf:	c7 05 74 1d 03 c0 45 bc 01 c0 	mov    DWORD PTR ds:0xc0031d74,0xc001bc45
c001c9c9:	c7 05 78 1d 03 c0 8d c2 01 c0 	mov    DWORD PTR ds:0xc0031d78,0xc001c28d
c001c9d3:	c7 05 7c 1d 03 c0 08 be 01 c0 	mov    DWORD PTR ds:0xc0031d7c,0xc001be08
c001c9dd:	c7 05 80 1d 03 c0 b4 c2 01 c0 	mov    DWORD PTR ds:0xc0031d80,0xc001c2b4
c001c9e7:	c7 05 84 1d 03 c0 29 c3 01 c0 	mov    DWORD PTR ds:0xc0031d84,0xc001c329
c001c9f1:	c7 05 88 1d 03 c0 61 c4 01 c0 	mov    DWORD PTR ds:0xc0031d88,0xc001c461
c001c9fb:	c7 05 8c 1d 03 c0 e7 b9 01 c0 	mov    DWORD PTR ds:0xc0031d8c,0xc001b9e7
c001ca05:	c7 05 90 1d 03 c0 51 ba 01 c0 	mov    DWORD PTR ds:0xc0031d90,0xc001ba51
c001ca0f:	c7 05 94 1d 03 c0 97 ba 01 c0 	mov    DWORD PTR ds:0xc0031d94,0xc001ba97
c001ca19:	c7 05 98 1d 03 c0 75 c5 01 c0 	mov    DWORD PTR ds:0xc0031d98,0xc001c575
c001ca23:	c7 05 9c 1d 03 c0 d0 c0 01 c0 	mov    DWORD PTR ds:0xc0031d9c,0xc001c0d0
c001ca2d:	c7 05 a0 1d 03 c0 e8 ba 01 c0 	mov    DWORD PTR ds:0xc0031da0,0xc001bae8
c001ca37:	c7 05 a4 1d 03 c0 e7 c5 01 c0 	mov    DWORD PTR ds:0xc0031da4,0xc001c5e7
c001ca41:	c7 05 a8 1d 03 c0 2c c6 01 c0 	mov    DWORD PTR ds:0xc0031da8,0xc001c62c
c001ca4b:	c7 05 ac 1d 03 c0 d0 b5 01 c0 	mov    DWORD PTR ds:0xc0031dac,0xc001b5d0
c001ca55:	c7 05 b0 1d 03 c0 51 b7 01 c0 	mov    DWORD PTR ds:0xc0031db0,0xc001b751
c001ca5f:	c7 05 b4 1d 03 c0 79 b8 01 c0 	mov    DWORD PTR ds:0xc0031db4,0xc001b879
c001ca69:	c7 05 b8 1d 03 c0 bc b4 01 c0 	mov    DWORD PTR ds:0xc0031db8,0xc001b4bc
c001ca73:	c7 05 bc 1d 03 c0 2b b9 01 c0 	mov    DWORD PTR ds:0xc0031dbc,0xc001b92b
c001ca7d:	c7 05 c0 1d 03 c0 35 b5 01 c0 	mov    DWORD PTR ds:0xc0031dc0,0xc001b535
c001ca87:	c7 05 c4 1d 03 c0 4c b5 01 c0 	mov    DWORD PTR ds:0xc0031dc4,0xc001b54c
c001ca91:	c3                   	ret    

c001ca92 <Sys::systemCall(regs*, void*)>:
c001ca92:	53                   	push   ebx
c001ca93:	83 ec 08             	sub    esp,0x8
c001ca96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca9a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ca9d:	83 f8 7f             	cmp    eax,0x7f
c001caa0:	77 16                	ja     c001cab8 <Sys::systemCall(regs*, void*)+0x26>
c001caa2:	8b 14 85 00 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce300]
c001caa9:	85 d2                	test   edx,edx
c001caab:	74 0b                	je     c001cab8 <Sys::systemCall(regs*, void*)+0x26>
c001caad:	83 ec 0c             	sub    esp,0xc
c001cab0:	53                   	push   ebx
c001cab1:	ff d2                	call   edx
c001cab3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cab6:	eb 0d                	jmp    c001cac5 <Sys::systemCall(regs*, void*)+0x33>
c001cab8:	52                   	push   edx
c001cab9:	52                   	push   edx
c001caba:	50                   	push   eax
c001cabb:	68 eb cb 02 c0       	push   0xc002cbeb
c001cac0:	e8 68 60 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001cac5:	83 c4 10             	add    esp,0x10
c001cac8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cacd:	31 d2                	xor    edx,edx
c001cacf:	83 c4 08             	add    esp,0x8
c001cad2:	5b                   	pop    ebx
c001cad3:	c3                   	ret    

c001cad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cad4:	55                   	push   ebp
c001cad5:	57                   	push   edi
c001cad6:	56                   	push   esi
c001cad7:	53                   	push   ebx
c001cad8:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cade:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cae5:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001caec:	85 c0                	test   eax,eax
c001caee:	0f 95 c1             	setne  cl
c001caf1:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001caf9:	0f 94 c2             	sete   dl
c001cafc:	84 d1                	test   cl,dl
c001cafe:	74 23                	je     c001cb23 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb00:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb06:	74 1b                	je     c001cb23 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb08:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb0e:	89 da                	mov    edx,ebx
c001cb10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb16:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb1c:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb23:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cb2a:	05 ff 0f 00 00       	add    eax,0xfff
c001cb2f:	83 ec 0c             	sub    esp,0xc
c001cb32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb36:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cb3c:	c1 e8 0c             	shr    eax,0xc
c001cb3f:	89 fe                	mov    esi,edi
c001cb41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb45:	c1 ee 0c             	shr    esi,0xc
c001cb48:	6a 01                	push   0x1
c001cb4a:	e8 d8 4b ff ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c001cb4f:	89 c5                	mov    ebp,eax
c001cb51:	58                   	pop    eax
c001cb52:	5a                   	pop    edx
c001cb53:	56                   	push   esi
c001cb54:	68 6f cc 02 c0       	push   0xc002cc6f
c001cb59:	e8 cf 5f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001cb5e:	59                   	pop    ecx
c001cb5f:	58                   	pop    eax
c001cb60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb64:	68 81 cc 02 c0       	push   0xc002cc81
c001cb69:	e8 bf 5f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001cb6e:	83 c4 10             	add    esp,0x10
c001cb71:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cb77:	0f 86 31 01 00 00    	jbe    c001ccae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cb7d:	c1 e6 0c             	shl    esi,0xc
c001cb80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb83:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cb86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb8a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cb91:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb94:	01 df                	add    edi,ebx
c001cb96:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cb99:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cb9d:	0f 84 08 01 00 00    	je     c001ccab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001cba3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001cba9:	76 05                	jbe    c001cbb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cbab:	bf 00 10 00 00       	mov    edi,0x1000
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	31 d2                	xor    edx,edx
c001cbb5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cbbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbbe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cbc2:	50                   	push   eax
c001cbc3:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cbc7:	56                   	push   esi
c001cbc8:	52                   	push   edx
c001cbc9:	57                   	push   edi
c001cbca:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cbd1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbd4:	83 c4 20             	add    esp,0x20
c001cbd7:	85 c0                	test   eax,eax
c001cbd9:	74 0a                	je     c001cbe5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cbdb:	53                   	push   ebx
c001cbdc:	53                   	push   ebx
c001cbdd:	50                   	push   eax
c001cbde:	68 93 cc 02 c0       	push   0xc002cc93
c001cbe3:	eb 0f                	jmp    c001cbf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cbe5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001cbe9:	74 20                	je     c001cc0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cbeb:	51                   	push   ecx
c001cbec:	51                   	push   ecx
c001cbed:	6a 00                	push   0x0
c001cbef:	68 be cc 02 c0       	push   0xc002ccbe
c001cbf4:	e8 34 5f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001cbf9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbfc:	e8 e6 4f ff ff       	call   c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c001cc01:	83 c4 10             	add    esp,0x10
c001cc04:	31 c0                	xor    eax,eax
c001cc06:	e9 68 01 00 00       	jmp    c001cd73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cc0b:	fa                   	cli    
c001cc0c:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001cc12:	e8 d7 2f ff ff       	call   c000fbee <Phys::allocatePage()>
c001cc17:	6a 07                	push   0x7
c001cc19:	89 c7                	mov    edi,eax
c001cc1b:	55                   	push   ebp
c001cc1c:	50                   	push   eax
c001cc1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc25:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc2b:	e8 2e 53 ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc30:	83 c4 0c             	add    esp,0xc
c001cc33:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc3a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc40:	6a 00                	push   0x0
c001cc42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc4a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc50:	e8 63 51 ff ff       	call   c0011db8 <VAS::mapOtherVASIn(bool, VAS*)>
c001cc55:	58                   	pop    eax
c001cc56:	5a                   	pop    edx
c001cc57:	68 07 0c 00 00       	push   0xc07
c001cc5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cc60:	57                   	push   edi
c001cc61:	89 ef                	mov    edi,ebp
c001cc63:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cc6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc70:	6a 00                	push   0x0
c001cc72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc7a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc80:	e8 95 56 ff ff       	call   c001231a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cc85:	b9 00 10 00 00       	mov    ecx,0x1000
c001cc8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc8c:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001cc91:	83 c4 20             	add    esp,0x20
c001cc94:	48                   	dec    eax
c001cc95:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001cc9a:	85 c0                	test   eax,eax
c001cc9c:	75 01                	jne    c001cc9f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cc9e:	fb                   	sti    
c001cc9f:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cca6:	e9 df fe ff ff       	jmp    c001cb8a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ccab:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001ccae:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ccb6:	0f 86 a9 00 00 00    	jbe    c001cd65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ccbc:	fa                   	cli    
c001ccbd:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001ccc3:	51                   	push   ecx
c001ccc4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cccb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccd1:	6a 00                	push   0x0
c001ccd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccdb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cce1:	e8 d2 50 ff ff       	call   c0011db8 <VAS::mapOtherVASIn(bool, VAS*)>
c001cce6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ccea:	c1 e6 0c             	shl    esi,0xc
c001cced:	01 de                	add    esi,ebx
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	39 de                	cmp    esi,ebx
c001ccf4:	74 61                	je     c001cd57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001ccf6:	e8 f3 2e ff ff       	call   c000fbee <Phys::allocatePage()>
c001ccfb:	6a 07                	push   0x7
c001ccfd:	89 c7                	mov    edi,eax
c001ccff:	55                   	push   ebp
c001cd00:	50                   	push   eax
c001cd01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd09:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd0f:	e8 4a 52 ff ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd14:	58                   	pop    eax
c001cd15:	5a                   	pop    edx
c001cd16:	68 07 0c 00 00       	push   0xc07
c001cd1b:	53                   	push   ebx
c001cd1c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd22:	57                   	push   edi
c001cd23:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd2a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd30:	6a 00                	push   0x0
c001cd32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd37:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd3a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd40:	e8 d5 55 ff ff       	call   c001231a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd45:	83 c4 1c             	add    esp,0x1c
c001cd48:	68 00 10 00 00       	push   0x1000
c001cd4d:	6a 00                	push   0x0
c001cd4f:	55                   	push   ebp
c001cd50:	e8 fb 39 fe ff       	call   c0000750 <memset>
c001cd55:	eb 98                	jmp    c001ccef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cd57:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001cd5c:	48                   	dec    eax
c001cd5d:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001cd62:	75 01                	jne    c001cd65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd64:	fb                   	sti    
c001cd65:	83 ec 0c             	sub    esp,0xc
c001cd68:	55                   	push   ebp
c001cd69:	e8 79 4e ff ff       	call   c0011be7 <Virt::freeKernelVirtualPages(unsigned long)>
c001cd6e:	83 c4 10             	add    esp,0x10
c001cd71:	b0 01                	mov    al,0x1
c001cd73:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cd79:	5b                   	pop    ebx
c001cd7a:	5e                   	pop    esi
c001cd7b:	5f                   	pop    edi
c001cd7c:	5d                   	pop    ebp
c001cd7d:	c3                   	ret    

c001cd7e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cd7e:	55                   	push   ebp
c001cd7f:	57                   	push   edi
c001cd80:	56                   	push   esi
c001cd81:	53                   	push   ebx
c001cd82:	83 ec 48             	sub    esp,0x48
c001cd85:	68 14 01 00 00       	push   0x114
c001cd8a:	e8 fd 2a ff ff       	call   c000f88c <malloc>
c001cd8f:	83 c4 0c             	add    esp,0xc
c001cd92:	89 c6                	mov    esi,eax
c001cd94:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cd98:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cd9c:	50                   	push   eax
c001cd9d:	e8 ea 62 ff ff       	call   c001308c <File::File(char const*, Process*)>
c001cda2:	58                   	pop    eax
c001cda3:	5a                   	pop    edx
c001cda4:	6a 01                	push   0x1
c001cda6:	56                   	push   esi
c001cda7:	e8 44 63 ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001cdac:	83 c4 10             	add    esp,0x10
c001cdaf:	85 c0                	test   eax,eax
c001cdb1:	0f 85 47 01 00 00    	jne    c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdb7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cdbf:	83 ec 0c             	sub    esp,0xc
c001cdc2:	6a 34                	push   0x34
c001cdc4:	e8 c3 2a ff ff       	call   c000f88c <malloc>
c001cdc9:	89 c3                	mov    ebx,eax
c001cdcb:	58                   	pop    eax
c001cdcc:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdce:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cdd2:	57                   	push   edi
c001cdd3:	53                   	push   ebx
c001cdd4:	6a 00                	push   0x0
c001cdd6:	6a 34                	push   0x34
c001cdd8:	56                   	push   esi
c001cdd9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cddc:	83 c4 20             	add    esp,0x20
c001cddf:	85 c0                	test   eax,eax
c001cde1:	0f 85 17 01 00 00    	jne    c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cde7:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cded:	0f 85 0b 01 00 00    	jne    c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdf3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cdf6:	85 c0                	test   eax,eax
c001cdf8:	0f 84 00 01 00 00    	je     c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdfe:	31 d2                	xor    edx,edx
c001ce00:	55                   	push   ebp
c001ce01:	52                   	push   edx
c001ce02:	50                   	push   eax
c001ce03:	56                   	push   esi
c001ce04:	e8 a5 63 ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	85 c0                	test   eax,eax
c001ce0e:	0f 85 ea 00 00 00    	jne    c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce1a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce22:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce26:	0f af c2             	imul   eax,edx
c001ce29:	50                   	push   eax
c001ce2a:	e8 5d 2a ff ff       	call   c000f88c <malloc>
c001ce2f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce35:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce3c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce40:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce44:	0f af c2             	imul   eax,edx
c001ce47:	99                   	cdq    
c001ce48:	52                   	push   edx
c001ce49:	50                   	push   eax
c001ce4a:	56                   	push   esi
c001ce4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce4e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce51:	83 c4 20             	add    esp,0x20
c001ce54:	85 c0                	test   eax,eax
c001ce56:	0f 84 a2 00 00 00    	je     c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce5c:	31 d2                	xor    edx,edx
c001ce5e:	51                   	push   ecx
c001ce5f:	52                   	push   edx
c001ce60:	50                   	push   eax
c001ce61:	56                   	push   esi
c001ce62:	e8 47 63 ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	85 c0                	test   eax,eax
c001ce6c:	0f 85 8c 00 00 00    	jne    c001cefe <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce72:	83 ec 0c             	sub    esp,0xc
c001ce75:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ce79:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ce7d:	31 ed                	xor    ebp,ebp
c001ce7f:	0f af c2             	imul   eax,edx
c001ce82:	50                   	push   eax
c001ce83:	e8 04 2a ff ff       	call   c000f88c <malloc>
c001ce88:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce95:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ce99:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ce9d:	0f af c2             	imul   eax,edx
c001cea0:	99                   	cdq    
c001cea1:	52                   	push   edx
c001cea2:	50                   	push   eax
c001cea3:	56                   	push   esi
c001cea4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cea7:	83 c4 20             	add    esp,0x20
c001ceaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ceb2:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ceb6:	0f 86 80 00 00 00    	jbe    c001cf3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cebc:	0f b7 fd             	movzx  edi,bp
c001cebf:	c1 e7 05             	shl    edi,0x5
c001cec2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cec6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cec9:	75 6b                	jne    c001cf36 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cecb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cece:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ced2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ced5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ced9:	52                   	push   edx
c001ceda:	31 d2                	xor    edx,edx
c001cedc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cedf:	52                   	push   edx
c001cee0:	50                   	push   eax
c001cee1:	56                   	push   esi
c001cee2:	e8 c7 62 ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001cee7:	83 c4 10             	add    esp,0x10
c001ceea:	85 c0                	test   eax,eax
c001ceec:	74 17                	je     c001cf05 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ceee:	83 ec 0c             	sub    esp,0xc
c001cef1:	68 ea cc 02 c0       	push   0xc002ccea
c001cef6:	e8 32 5c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001cefb:	83 c4 10             	add    esp,0x10
c001cefe:	31 c0                	xor    eax,eax
c001cf00:	e9 87 00 00 00       	jmp    c001cf8c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf05:	83 ec 0c             	sub    esp,0xc
c001cf08:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf0b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf0e:	50                   	push   eax
c001cf0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf17:	56                   	push   esi
c001cf18:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf1c:	e8 b3 fb ff ff       	call   c001cad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf25:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf29:	83 c4 20             	add    esp,0x20
c001cf2c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf30:	73 04                	jae    c001cf36 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf36:	45                   	inc    ebp
c001cf37:	e9 76 ff ff ff       	jmp    c001ceb2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf3c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf48:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cf57:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cf5c:	05 00 10 00 00       	add    eax,0x1000
c001cf61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cf64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf68:	e8 2f 29 ff ff       	call   c000f89c <free>
c001cf6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf70:	e8 27 29 ff ff       	call   c000f89c <free>
c001cf75:	58                   	pop    eax
c001cf76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf7a:	e8 1d 29 ff ff       	call   c000f89c <free>
c001cf7f:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf82:	e8 c7 61 ff ff       	call   c001314e <File::close()>
c001cf87:	83 c4 10             	add    esp,0x10
c001cf8a:	b0 01                	mov    al,0x1
c001cf8c:	83 c4 3c             	add    esp,0x3c
c001cf8f:	5b                   	pop    ebx
c001cf90:	5e                   	pop    esi
c001cf91:	5f                   	pop    edi
c001cf92:	5d                   	pop    ebp
c001cf93:	c3                   	ret    

c001cf94 <Thr::runtimeReferenceHelper()>:
c001cf94:	83 ec 18             	sub    esp,0x18
c001cf97:	68 f2 cc 02 c0       	push   0xc002ccf2
c001cf9c:	e8 8c 5b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001cfa1:	fa                   	cli    
c001cfa2:	83 c4 10             	add    esp,0x10
c001cfa5:	eb fe                	jmp    c001cfa5 <Thr::runtimeReferenceHelper()+0x11>

c001cfa7 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cfa7:	57                   	push   edi
c001cfa8:	56                   	push   esi
c001cfa9:	53                   	push   ebx
c001cfaa:	31 db                	xor    ebx,ebx
c001cfac:	39 1d a0 26 03 c0    	cmp    DWORD PTR ds:0xc00326a0,ebx
c001cfb2:	7e 3c                	jle    c001cff0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cfb4:	8b 34 9d 20 26 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd9e0]
c001cfbb:	31 ff                	xor    edi,edi
c001cfbd:	39 3c 9d 20 25 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdae0],edi
c001cfc4:	7e 27                	jle    c001cfed <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cfc6:	50                   	push   eax
c001cfc7:	50                   	push   eax
c001cfc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfcc:	8b 06                	mov    eax,DWORD PTR [esi]
c001cfce:	03 04 9d a0 25 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcda60]
c001cfd5:	50                   	push   eax
c001cfd6:	e8 bd 38 fe ff       	call   c0000898 <strcmp>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	85 c0                	test   eax,eax
c001cfe0:	75 05                	jne    c001cfe7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cfe2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cfe5:	eb 0b                	jmp    c001cff2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cfe7:	83 c6 10             	add    esi,0x10
c001cfea:	47                   	inc    edi
c001cfeb:	eb d0                	jmp    c001cfbd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cfed:	43                   	inc    ebx
c001cfee:	eb bc                	jmp    c001cfac <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cff0:	31 c0                	xor    eax,eax
c001cff2:	5b                   	pop    ebx
c001cff3:	5e                   	pop    esi
c001cff4:	5f                   	pop    edi
c001cff5:	c3                   	ret    

c001cff6 <Thr::loadKernelSymbolTable(char const*)>:
c001cff6:	55                   	push   ebp
c001cff7:	57                   	push   edi
c001cff8:	56                   	push   esi
c001cff9:	53                   	push   ebx
c001cffa:	83 ec 68             	sub    esp,0x68
c001cffd:	8b 35 f0 26 03 c0    	mov    esi,DWORD PTR ds:0xc00326f0
c001d003:	68 14 01 00 00       	push   0x114
c001d008:	e8 7f 28 ff ff       	call   c000f88c <malloc>
c001d00d:	83 c4 0c             	add    esp,0xc
c001d010:	89 c3                	mov    ebx,eax
c001d012:	56                   	push   esi
c001d013:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d017:	50                   	push   eax
c001d018:	e8 6f 60 ff ff       	call   c001308c <File::File(char const*, Process*)>
c001d01d:	5e                   	pop    esi
c001d01e:	5f                   	pop    edi
c001d01f:	6a 01                	push   0x1
c001d021:	53                   	push   ebx
c001d022:	e8 c9 60 ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001d027:	83 c4 10             	add    esp,0x10
c001d02a:	85 c0                	test   eax,eax
c001d02c:	74 0a                	je     c001d038 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d02e:	83 ec 0c             	sub    esp,0xc
c001d031:	68 14 cd 02 c0       	push   0xc002cd14
c001d036:	eb 34                	jmp    c001d06c <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d038:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d040:	83 ec 0c             	sub    esp,0xc
c001d043:	6a 34                	push   0x34
c001d045:	e8 42 28 ff ff       	call   c000f88c <malloc>
c001d04a:	59                   	pop    ecx
c001d04b:	89 c7                	mov    edi,eax
c001d04d:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d051:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d053:	56                   	push   esi
c001d054:	57                   	push   edi
c001d055:	6a 00                	push   0x0
c001d057:	6a 34                	push   0x34
c001d059:	53                   	push   ebx
c001d05a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d05d:	83 c4 20             	add    esp,0x20
c001d060:	85 c0                	test   eax,eax
c001d062:	74 17                	je     c001d07b <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d064:	83 ec 0c             	sub    esp,0xc
c001d067:	68 2b cd 02 c0       	push   0xc002cd2b
c001d06c:	e8 28 d6 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d071:	83 c4 10             	add    esp,0x10
c001d074:	31 c0                	xor    eax,eax
c001d076:	e9 31 02 00 00       	jmp    c001d2ac <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d07b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d081:	75 e1                	jne    c001d064 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d083:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d086:	85 c0                	test   eax,eax
c001d088:	74 da                	je     c001d064 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d08a:	52                   	push   edx
c001d08b:	31 d2                	xor    edx,edx
c001d08d:	52                   	push   edx
c001d08e:	50                   	push   eax
c001d08f:	53                   	push   ebx
c001d090:	e8 19 61 ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d095:	83 c4 10             	add    esp,0x10
c001d098:	85 c0                	test   eax,eax
c001d09a:	75 c8                	jne    c001d064 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d09c:	83 ec 0c             	sub    esp,0xc
c001d09f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0a7:	31 ed                	xor    ebp,ebp
c001d0a9:	0f af c2             	imul   eax,edx
c001d0ac:	50                   	push   eax
c001d0ad:	e8 da 27 ff ff       	call   c000f88c <malloc>
c001d0b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0b8:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0bf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0c3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0c7:	0f af c2             	imul   eax,edx
c001d0ca:	99                   	cdq    
c001d0cb:	52                   	push   edx
c001d0cc:	50                   	push   eax
c001d0cd:	53                   	push   ebx
c001d0ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d1:	83 c4 20             	add    esp,0x20
c001d0d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d0dc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d0e4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d0ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d0f4:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d0f8:	0f 86 aa 00 00 00    	jbe    c001d1a8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d0fe:	0f b7 f5             	movzx  esi,bp
c001d101:	6b f6 28             	imul   esi,esi,0x28
c001d104:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d108:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d10b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d10f:	50                   	push   eax
c001d110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d114:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d118:	8b 16                	mov    edx,DWORD PTR [esi]
c001d11a:	6b c0 28             	imul   eax,eax,0x28
c001d11d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d121:	89 d0                	mov    eax,edx
c001d123:	31 d2                	xor    edx,edx
c001d125:	52                   	push   edx
c001d126:	50                   	push   eax
c001d127:	53                   	push   ebx
c001d128:	e8 81 60 ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d12d:	83 c4 0c             	add    esp,0xc
c001d130:	6a 20                	push   0x20
c001d132:	6a 00                	push   0x0
c001d134:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d138:	52                   	push   edx
c001d139:	e8 12 36 fe ff       	call   c0000750 <memset>
c001d13e:	58                   	pop    eax
c001d13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d141:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d145:	51                   	push   ecx
c001d146:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d14a:	52                   	push   edx
c001d14b:	6a 00                	push   0x0
c001d14d:	6a 1f                	push   0x1f
c001d14f:	53                   	push   ebx
c001d150:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d153:	83 c4 18             	add    esp,0x18
c001d156:	68 42 cd 02 c0       	push   0xc002cd42
c001d15b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d15f:	52                   	push   edx
c001d160:	e8 33 37 fe ff       	call   c0000898 <strcmp>
c001d165:	83 c4 10             	add    esp,0x10
c001d168:	85 c0                	test   eax,eax
c001d16a:	75 0f                	jne    c001d17b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d16c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d16f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d173:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d17b:	50                   	push   eax
c001d17c:	50                   	push   eax
c001d17d:	68 4a cd 02 c0       	push   0xc002cd4a
c001d182:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d186:	50                   	push   eax
c001d187:	e8 0c 37 fe ff       	call   c0000898 <strcmp>
c001d18c:	83 c4 10             	add    esp,0x10
c001d18f:	85 c0                	test   eax,eax
c001d191:	75 0f                	jne    c001d1a2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d193:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d196:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d19a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d19e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1a2:	45                   	inc    ebp
c001d1a3:	e9 4c ff ff ff       	jmp    c001d0f4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1ad:	75 10                	jne    c001d1bf <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d1af:	83 ec 0c             	sub    esp,0xc
c001d1b2:	68 52 cd 02 c0       	push   0xc002cd52
c001d1b7:	e8 dd d4 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d1bc:	83 c4 10             	add    esp,0x10
c001d1bf:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d1c4:	75 10                	jne    c001d1d6 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d1c6:	83 ec 0c             	sub    esp,0xc
c001d1c9:	68 52 cd 02 c0       	push   0xc002cd52
c001d1ce:	e8 c6 d4 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d1d3:	83 c4 10             	add    esp,0x10
c001d1d6:	31 d2                	xor    edx,edx
c001d1d8:	50                   	push   eax
c001d1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1dd:	52                   	push   edx
c001d1de:	50                   	push   eax
c001d1df:	53                   	push   ebx
c001d1e0:	e8 c9 5f ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d1e5:	5a                   	pop    edx
c001d1e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d1ea:	e8 9d 26 ff ff       	call   c000f88c <malloc>
c001d1ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d1f7:	31 c9                	xor    ecx,ecx
c001d1f9:	5e                   	pop    esi
c001d1fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1fc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d200:	55                   	push   ebp
c001d201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d205:	51                   	push   ecx
c001d206:	52                   	push   edx
c001d207:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d20b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d20f:	53                   	push   ebx
c001d210:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d213:	83 c4 14             	add    esp,0x14
c001d216:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d21a:	e8 6d 26 ff ff       	call   c000f88c <malloc>
c001d21f:	89 c6                	mov    esi,eax
c001d221:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d223:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d226:	56                   	push   esi
c001d227:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d22b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d22f:	51                   	push   ecx
c001d230:	52                   	push   edx
c001d231:	53                   	push   ebx
c001d232:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d235:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d239:	8b 15 a0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326a0
c001d23f:	83 c4 1c             	add    esp,0x1c
c001d242:	c1 e8 04             	shr    eax,0x4
c001d245:	89 04 95 20 25 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdae0],eax
c001d24c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d250:	31 d2                	xor    edx,edx
c001d252:	52                   	push   edx
c001d253:	50                   	push   eax
c001d254:	53                   	push   ebx
c001d255:	e8 54 5f ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d25a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d25c:	31 d2                	xor    edx,edx
c001d25e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d261:	56                   	push   esi
c001d262:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d266:	52                   	push   edx
c001d267:	50                   	push   eax
c001d268:	53                   	push   ebx
c001d269:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d26c:	83 c4 14             	add    esp,0x14
c001d26f:	53                   	push   ebx
c001d270:	e8 d9 5e ff ff       	call   c001314e <File::close()>
c001d275:	5d                   	pop    ebp
c001d276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d27a:	e8 1d 26 ff ff       	call   c000f89c <free>
c001d27f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d282:	e8 15 26 ff ff       	call   c000f89c <free>
c001d287:	a1 a0 26 03 c0       	mov    eax,ds:0xc00326a0
c001d28c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d290:	8d 50 01             	lea    edx,[eax+0x1]
c001d293:	89 0c 85 20 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9e0],ecx
c001d29a:	89 34 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],esi
c001d2a1:	89 15 a0 26 03 c0    	mov    DWORD PTR ds:0xc00326a0,edx
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	b0 01                	mov    al,0x1
c001d2ac:	83 c4 5c             	add    esp,0x5c
c001d2af:	5b                   	pop    ebx
c001d2b0:	5e                   	pop    esi
c001d2b1:	5f                   	pop    edi
c001d2b2:	5d                   	pop    ebp
c001d2b3:	c3                   	ret    

c001d2b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d2b4:	55                   	push   ebp
c001d2b5:	57                   	push   edi
c001d2b6:	56                   	push   esi
c001d2b7:	53                   	push   ebx
c001d2b8:	81 ec 68 03 00 00    	sub    esp,0x368
c001d2be:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d2c5:	8b 1d f0 26 03 c0    	mov    ebx,DWORD PTR ds:0xc00326f0
c001d2cb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d2cf:	68 14 01 00 00       	push   0x114
c001d2d4:	e8 b3 25 ff ff       	call   c000f88c <malloc>
c001d2d9:	83 c4 0c             	add    esp,0xc
c001d2dc:	89 c5                	mov    ebp,eax
c001d2de:	53                   	push   ebx
c001d2df:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d2e6:	50                   	push   eax
c001d2e7:	e8 a0 5d ff ff       	call   c001308c <File::File(char const*, Process*)>
c001d2ec:	5e                   	pop    esi
c001d2ed:	5f                   	pop    edi
c001d2ee:	6a 01                	push   0x1
c001d2f0:	55                   	push   ebp
c001d2f1:	e8 fa 5d ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001d2f6:	83 c4 10             	add    esp,0x10
c001d2f9:	85 c0                	test   eax,eax
c001d2fb:	0f 85 a7 06 00 00    	jne    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d301:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d309:	83 ec 0c             	sub    esp,0xc
c001d30c:	6a 34                	push   0x34
c001d30e:	e8 79 25 ff ff       	call   c000f88c <malloc>
c001d313:	5b                   	pop    ebx
c001d314:	89 c7                	mov    edi,eax
c001d316:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d31a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d31d:	53                   	push   ebx
c001d31e:	57                   	push   edi
c001d31f:	6a 00                	push   0x0
c001d321:	6a 34                	push   0x34
c001d323:	55                   	push   ebp
c001d324:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d327:	83 c4 20             	add    esp,0x20
c001d32a:	85 c0                	test   eax,eax
c001d32c:	0f 85 76 06 00 00    	jne    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d332:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d338:	0f 85 6a 06 00 00    	jne    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d33e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d341:	85 c0                	test   eax,eax
c001d343:	0f 84 5f 06 00 00    	je     c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d349:	31 d2                	xor    edx,edx
c001d34b:	51                   	push   ecx
c001d34c:	52                   	push   edx
c001d34d:	50                   	push   eax
c001d34e:	55                   	push   ebp
c001d34f:	e8 5a 5e ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d354:	83 c4 10             	add    esp,0x10
c001d357:	85 c0                	test   eax,eax
c001d359:	0f 85 49 06 00 00    	jne    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d35f:	83 ec 0c             	sub    esp,0xc
c001d362:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d365:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d369:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d36d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d371:	0f af c2             	imul   eax,edx
c001d374:	50                   	push   eax
c001d375:	e8 12 25 ff ff       	call   c000f88c <malloc>
c001d37a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d37d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d381:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d384:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d388:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d38c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d390:	0f af c2             	imul   eax,edx
c001d393:	99                   	cdq    
c001d394:	52                   	push   edx
c001d395:	50                   	push   eax
c001d396:	55                   	push   ebp
c001d397:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d39a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d39d:	83 c4 20             	add    esp,0x20
c001d3a0:	85 c0                	test   eax,eax
c001d3a2:	0f 84 00 06 00 00    	je     c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3a8:	52                   	push   edx
c001d3a9:	31 d2                	xor    edx,edx
c001d3ab:	52                   	push   edx
c001d3ac:	50                   	push   eax
c001d3ad:	55                   	push   ebp
c001d3ae:	e8 fb 5d ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d3b3:	83 c4 10             	add    esp,0x10
c001d3b6:	85 c0                	test   eax,eax
c001d3b8:	0f 85 ea 05 00 00    	jne    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3be:	83 ec 0c             	sub    esp,0xc
c001d3c1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d3c5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d3c9:	31 f6                	xor    esi,esi
c001d3cb:	0f af c2             	imul   eax,edx
c001d3ce:	50                   	push   eax
c001d3cf:	e8 b8 24 ff ff       	call   c000f88c <malloc>
c001d3d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3e2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d3e6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d3ea:	0f af c2             	imul   eax,edx
c001d3ed:	99                   	cdq    
c001d3ee:	52                   	push   edx
c001d3ef:	50                   	push   eax
c001d3f0:	55                   	push   ebp
c001d3f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3f4:	83 c4 20             	add    esp,0x20
c001d3f7:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d3fb:	0f 86 8a 00 00 00    	jbe    c001d48b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d401:	0f b7 de             	movzx  ebx,si
c001d404:	c1 e3 05             	shl    ebx,0x5
c001d407:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d40b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d40e:	75 75                	jne    c001d485 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d410:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d413:	31 d2                	xor    edx,edx
c001d415:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d419:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d41c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d420:	50                   	push   eax
c001d421:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d424:	52                   	push   edx
c001d425:	50                   	push   eax
c001d426:	55                   	push   ebp
c001d427:	e8 82 5d ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	85 c0                	test   eax,eax
c001d431:	0f 85 71 05 00 00    	jne    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d437:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d43e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d441:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d445:	31 d2                	xor    edx,edx
c001d447:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d44b:	83 ec 0c             	sub    esp,0xc
c001d44e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d452:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d459:	50                   	push   eax
c001d45a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d462:	52                   	push   edx
c001d463:	50                   	push   eax
c001d464:	55                   	push   ebp
c001d465:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d468:	83 c4 1c             	add    esp,0x1c
c001d46b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d46e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d471:	50                   	push   eax
c001d472:	6a 00                	push   0x0
c001d474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d478:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d47c:	50                   	push   eax
c001d47d:	e8 ce 32 fe ff       	call   c0000750 <memset>
c001d482:	83 c4 10             	add    esp,0x10
c001d485:	46                   	inc    esi
c001d486:	e9 6c ff ff ff       	jmp    c001d3f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d48b:	53                   	push   ebx
c001d48c:	31 db                	xor    ebx,ebx
c001d48e:	68 00 01 00 00       	push   0x100
c001d493:	6a 00                	push   0x0
c001d495:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d499:	50                   	push   eax
c001d49a:	e8 b1 32 fe ff       	call   c0000750 <memset>
c001d49f:	83 c4 0c             	add    esp,0xc
c001d4a2:	68 00 01 00 00       	push   0x100
c001d4a7:	6a 00                	push   0x0
c001d4a9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d4b0:	50                   	push   eax
c001d4b1:	e8 9a 32 fe ff       	call   c0000750 <memset>
c001d4b6:	83 c4 10             	add    esp,0x10
c001d4b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d4c1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4c9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d4d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d4d9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d4e1:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d4e5:	0f 86 30 01 00 00    	jbe    c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d4eb:	0f b7 f3             	movzx  esi,bx
c001d4ee:	6b f6 28             	imul   esi,esi,0x28
c001d4f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d4f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d4f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4fc:	52                   	push   edx
c001d4fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d501:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d505:	8b 06                	mov    eax,DWORD PTR [esi]
c001d507:	6b d2 28             	imul   edx,edx,0x28
c001d50a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d50e:	31 d2                	xor    edx,edx
c001d510:	52                   	push   edx
c001d511:	50                   	push   eax
c001d512:	55                   	push   ebp
c001d513:	e8 96 5c ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d518:	83 c4 0c             	add    esp,0xc
c001d51b:	6a 20                	push   0x20
c001d51d:	6a 00                	push   0x0
c001d51f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d526:	51                   	push   ecx
c001d527:	e8 24 32 fe ff       	call   c0000750 <memset>
c001d52c:	59                   	pop    ecx
c001d52d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d530:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d534:	52                   	push   edx
c001d535:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d53c:	51                   	push   ecx
c001d53d:	6a 00                	push   0x0
c001d53f:	6a 1f                	push   0x1f
c001d541:	55                   	push   ebp
c001d542:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d545:	83 c4 1c             	add    esp,0x1c
c001d548:	6a 09                	push   0x9
c001d54a:	68 6c cd 02 c0       	push   0xc002cd6c
c001d54f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d556:	51                   	push   ecx
c001d557:	e8 f0 30 fe ff       	call   c000064c <memcmp>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	85 c0                	test   eax,eax
c001d561:	75 21                	jne    c001d584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d567:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d56b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d56f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d573:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d576:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d57d:	89 d0                	mov    eax,edx
c001d57f:	40                   	inc    eax
c001d580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d584:	50                   	push   eax
c001d585:	6a 09                	push   0x9
c001d587:	68 76 cd 02 c0       	push   0xc002cd76
c001d58c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d593:	50                   	push   eax
c001d594:	e8 b3 30 fe ff       	call   c000064c <memcmp>
c001d599:	83 c4 10             	add    esp,0x10
c001d59c:	85 c0                	test   eax,eax
c001d59e:	75 21                	jne    c001d5c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5a8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5b3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5ba:	89 d0                	mov    eax,edx
c001d5bc:	40                   	inc    eax
c001d5bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5c1:	50                   	push   eax
c001d5c2:	50                   	push   eax
c001d5c3:	68 42 cd 02 c0       	push   0xc002cd42
c001d5c8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5cf:	50                   	push   eax
c001d5d0:	e8 c3 32 fe ff       	call   c0000898 <strcmp>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	85 c0                	test   eax,eax
c001d5da:	75 0f                	jne    c001d5eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d5dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d5e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d5eb:	50                   	push   eax
c001d5ec:	50                   	push   eax
c001d5ed:	68 4a cd 02 c0       	push   0xc002cd4a
c001d5f2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5f9:	50                   	push   eax
c001d5fa:	e8 99 32 fe ff       	call   c0000898 <strcmp>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	85 c0                	test   eax,eax
c001d604:	75 0f                	jne    c001d615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d606:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d609:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d60d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d611:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d615:	43                   	inc    ebx
c001d616:	e9 c6 fe ff ff       	jmp    c001d4e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d61b:	31 d2                	xor    edx,edx
c001d61d:	50                   	push   eax
c001d61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d622:	52                   	push   edx
c001d623:	50                   	push   eax
c001d624:	55                   	push   ebp
c001d625:	e8 84 5b ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d62a:	58                   	pop    eax
c001d62b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d62f:	e8 58 22 ff ff       	call   c000f88c <malloc>
c001d634:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d637:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d63b:	31 d2                	xor    edx,edx
c001d63d:	58                   	pop    eax
c001d63e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d642:	53                   	push   ebx
c001d643:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d647:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d64b:	52                   	push   edx
c001d64c:	50                   	push   eax
c001d64d:	55                   	push   ebp
c001d64e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d651:	83 c4 14             	add    esp,0x14
c001d654:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d658:	e8 2f 22 ff ff       	call   c000f88c <malloc>
c001d65d:	31 d2                	xor    edx,edx
c001d65f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d663:	83 c4 0c             	add    esp,0xc
c001d666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d66a:	52                   	push   edx
c001d66b:	50                   	push   eax
c001d66c:	55                   	push   ebp
c001d66d:	e8 3c 5b ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d672:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d675:	31 d2                	xor    edx,edx
c001d677:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d67a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d67e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d682:	52                   	push   edx
c001d683:	50                   	push   eax
c001d684:	55                   	push   ebp
c001d685:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d688:	83 c4 20             	add    esp,0x20
c001d68b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d693:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d697:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d69b:	0f 84 0b 03 00 00    	je     c001d9ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6a1:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6a8:	31 d2                	xor    edx,edx
c001d6aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6ae:	c1 e8 03             	shr    eax,0x3
c001d6b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d6b5:	51                   	push   ecx
c001d6b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6ba:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d6be:	52                   	push   edx
c001d6bf:	50                   	push   eax
c001d6c0:	55                   	push   ebp
c001d6c1:	e8 e8 5a ff ff       	call   c00131ae <File::seek(unsigned long long)>
c001d6c6:	5b                   	pop    ebx
c001d6c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6cb:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d6d2:	e8 b5 21 ff ff       	call   c000f88c <malloc>
c001d6d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6de:	31 d2                	xor    edx,edx
c001d6e0:	5e                   	pop    esi
c001d6e1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d6e5:	50                   	push   eax
c001d6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6ee:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d6f5:	52                   	push   edx
c001d6f6:	50                   	push   eax
c001d6f7:	55                   	push   ebp
c001d6f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6fb:	83 c4 20             	add    esp,0x20
c001d6fe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d706:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d70a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d70e:	0f 8d 7c 02 00 00    	jge    c001d990 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d714:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d718:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d71c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d721:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d724:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d72c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d730:	89 d8                	mov    eax,ebx
c001d732:	c1 e8 08             	shr    eax,0x8
c001d735:	89 c6                	mov    esi,eax
c001d737:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d73b:	c1 e6 04             	shl    esi,0x4
c001d73e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d742:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d745:	85 d2                	test   edx,edx
c001d747:	0f 85 bf 00 00 00    	jne    c001d80c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d74d:	83 ec 0c             	sub    esp,0xc
c001d750:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d754:	03 06                	add    eax,DWORD PTR [esi]
c001d756:	50                   	push   eax
c001d757:	e8 4b f8 ff ff       	call   c001cfa7 <Thr::getAddressOfKernelSymbol(char const*)>
c001d75c:	83 c4 10             	add    esp,0x10
c001d75f:	89 c2                	mov    edx,eax
c001d761:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d766:	85 c0                	test   eax,eax
c001d768:	0f 85 9e 00 00 00    	jne    c001d80c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d76e:	83 ec 0c             	sub    esp,0xc
c001d771:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d775:	03 06                	add    eax,DWORD PTR [esi]
c001d777:	50                   	push   eax
c001d778:	e8 c2 0d ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d77d:	83 c4 10             	add    esp,0x10
c001d780:	89 c2                	mov    edx,eax
c001d782:	85 c0                	test   eax,eax
c001d784:	0f 85 82 00 00 00    	jne    c001d80c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d78a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d78e:	50                   	push   eax
c001d78f:	50                   	push   eax
c001d790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d794:	03 06                	add    eax,DWORD PTR [esi]
c001d796:	50                   	push   eax
c001d797:	68 80 cd 02 c0       	push   0xc002cd80
c001d79c:	e8 8c 53 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001d7a1:	58                   	pop    eax
c001d7a2:	5a                   	pop    edx
c001d7a3:	68 9a cd 02 c0       	push   0xc002cd9a
c001d7a8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7af:	50                   	push   eax
c001d7b0:	e8 57 30 fe ff       	call   c000080c <strcpy>
c001d7b5:	59                   	pop    ecx
c001d7b6:	58                   	pop    eax
c001d7b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7bb:	03 06                	add    eax,DWORD PTR [esi]
c001d7bd:	50                   	push   eax
c001d7be:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7c5:	50                   	push   eax
c001d7c6:	e8 81 31 fe ff       	call   c000094c <strcat>
c001d7cb:	58                   	pop    eax
c001d7cc:	5a                   	pop    edx
c001d7cd:	68 30 ce 02 c0       	push   0xc002ce30
c001d7d2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7d9:	50                   	push   eax
c001d7da:	e8 6d 31 fe ff       	call   c000094c <strcat>
c001d7df:	83 c4 10             	add    esp,0x10
c001d7e2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d7e7:	0f 84 5d 01 00 00    	je     c001d94a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d7ed:	83 ec 0c             	sub    esp,0xc
c001d7f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7f7:	50                   	push   eax
c001d7f8:	e8 9c ce ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d7fd:	83 c4 10             	add    esp,0x10
c001d800:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d804:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d808:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d80c:	80 fb 01             	cmp    bl,0x1
c001d80f:	0f 85 88 00 00 00    	jne    c001d89d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d815:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d81c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d820:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d824:	01 ce                	add    esi,ecx
c001d826:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d82c:	0f 94 c0             	sete   al
c001d82f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d835:	0f 94 c3             	sete   bl
c001d838:	09 c3                	or     ebx,eax
c001d83a:	8b 06                	mov    eax,DWORD PTR [esi]
c001d83c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d841:	74 41                	je     c001d884 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d843:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d846:	84 db                	test   bl,bl
c001d848:	75 15                	jne    c001d85f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d84a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d84e:	66 83 f8 0c          	cmp    ax,0xc
c001d852:	76 05                	jbe    c001d859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d854:	b8 0c 00 00 00       	mov    eax,0xc
c001d859:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d85d:	76 37                	jbe    c001d896 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d85f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d863:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d868:	0f 84 dc 00 00 00    	je     c001d94a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d86e:	83 ec 0c             	sub    esp,0xc
c001d871:	68 b1 cd 02 c0       	push   0xc002cdb1
c001d876:	e8 1e ce ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d87b:	83 c4 10             	add    esp,0x10
c001d87e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d882:	eb 12                	jmp    c001d896 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d884:	01 c1                	add    ecx,eax
c001d886:	84 db                	test   bl,bl
c001d888:	75 0c                	jne    c001d896 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d88a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d88e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d892:	77 02                	ja     c001d896 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d894:	01 d1                	add    ecx,edx
c001d896:	89 0e                	mov    DWORD PTR [esi],ecx
c001d898:	e9 ea 00 00 00       	jmp    c001d987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d89d:	80 fb 02             	cmp    bl,0x2
c001d8a0:	75 7c                	jne    c001d91e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8a2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8a9:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d8ad:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d8b1:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d8b7:	74 20                	je     c001d8d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8b9:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d8bf:	74 18                	je     c001d8d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8c5:	b9 0a 00 00 00       	mov    ecx,0xa
c001d8ca:	66 83 f8 0e          	cmp    ax,0xe
c001d8ce:	77 03                	ja     c001d8d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d8d0:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d8d3:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d8d7:	76 1f                	jbe    c001d8f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d8d9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d8dd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8e2:	74 66                	je     c001d94a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8e4:	83 ec 0c             	sub    esp,0xc
c001d8e7:	68 cd cd 02 c0       	push   0xc002cdcd
c001d8ec:	e8 a8 cd ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d8f1:	83 c4 10             	add    esp,0x10
c001d8f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8f8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d8fa:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d8ff:	74 13                	je     c001d914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d901:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d905:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d90c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d910:	01 c8                	add    eax,ecx
c001d912:	eb 04                	jmp    c001d918 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d914:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d918:	01 c2                	add    edx,eax
c001d91a:	89 16                	mov    DWORD PTR [esi],edx
c001d91c:	eb 69                	jmp    c001d987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d91e:	0f b6 db             	movzx  ebx,bl
c001d921:	50                   	push   eax
c001d922:	50                   	push   eax
c001d923:	53                   	push   ebx
c001d924:	68 e9 cd 02 c0       	push   0xc002cde9
c001d929:	e8 ff 51 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001d92e:	83 c4 10             	add    esp,0x10
c001d931:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d936:	74 12                	je     c001d94a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	68 f4 cd 02 c0       	push   0xc002cdf4
c001d940:	e8 54 cd ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001d945:	83 c4 10             	add    esp,0x10
c001d948:	eb 3d                	jmp    c001d987 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d94a:	83 ec 0c             	sub    esp,0xc
c001d94d:	55                   	push   ebp
c001d94e:	e8 fb 57 ff ff       	call   c001314e <File::close()>
c001d953:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d956:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d959:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d95c:	59                   	pop    ecx
c001d95d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d961:	e8 36 1f ff ff       	call   c000f89c <free>
c001d966:	5b                   	pop    ebx
c001d967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d96b:	e8 2c 1f ff ff       	call   c000f89c <free>
c001d970:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d973:	e8 24 1f ff ff       	call   c000f89c <free>
c001d978:	5e                   	pop    esi
c001d979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d97d:	e8 1a 1f ff ff       	call   c000f89c <free>
c001d982:	83 c4 10             	add    esp,0x10
c001d985:	eb 21                	jmp    c001d9a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d987:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d98b:	e9 76 fd ff ff       	jmp    c001d706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d990:	83 ec 0c             	sub    esp,0xc
c001d993:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d997:	e8 00 1f ff ff       	call   c000f89c <free>
c001d99c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9a0:	83 c4 10             	add    esp,0x10
c001d9a3:	e9 eb fc ff ff       	jmp    c001d693 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9a8:	31 c0                	xor    eax,eax
c001d9aa:	eb 33                	jmp    c001d9df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d9ac:	83 ec 0c             	sub    esp,0xc
c001d9af:	55                   	push   ebp
c001d9b0:	e8 99 57 ff ff       	call   c001314e <File::close()>
c001d9b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9be:	58                   	pop    eax
c001d9bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9c3:	e8 d4 1e ff ff       	call   c000f89c <free>
c001d9c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9cb:	e8 cc 1e ff ff       	call   c000f89c <free>
c001d9d0:	5a                   	pop    edx
c001d9d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9d5:	e8 c2 1e ff ff       	call   c000f89c <free>
c001d9da:	83 c4 10             	add    esp,0x10
c001d9dd:	b0 01                	mov    al,0x1
c001d9df:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d9e5:	5b                   	pop    ebx
c001d9e6:	5e                   	pop    esi
c001d9e7:	5f                   	pop    edi
c001d9e8:	5d                   	pop    ebp
c001d9e9:	c3                   	ret    

c001d9ea <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d9ea:	56                   	push   esi
c001d9eb:	31 d2                	xor    edx,edx
c001d9ed:	53                   	push   ebx
c001d9ee:	8b 1d 00 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031f00
c001d9f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d9f8:	39 d3                	cmp    ebx,edx
c001d9fa:	7e 1b                	jle    c001da17 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d9fc:	8b 04 95 20 21 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdee0]
c001da03:	39 c8                	cmp    eax,ecx
c001da05:	77 0d                	ja     c001da14 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da07:	8b 34 95 20 1f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce0e0]
c001da0e:	01 c6                	add    esi,eax
c001da10:	39 ce                	cmp    esi,ecx
c001da12:	77 05                	ja     c001da19 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da14:	42                   	inc    edx
c001da15:	eb e1                	jmp    c001d9f8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da17:	31 c0                	xor    eax,eax
c001da19:	5b                   	pop    ebx
c001da1a:	5e                   	pop    esi
c001da1b:	c3                   	ret    

c001da1c <Thr::getDriverNameFromAddress(unsigned long)>:
c001da1c:	53                   	push   ebx
c001da1d:	31 c0                	xor    eax,eax
c001da1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da23:	8b 1d 00 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031f00
c001da29:	39 c3                	cmp    ebx,eax
c001da2b:	7e 22                	jle    c001da4f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da2d:	8b 14 85 20 21 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdee0]
c001da34:	39 ca                	cmp    edx,ecx
c001da36:	77 14                	ja     c001da4c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da38:	03 14 85 20 1f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce0e0]
c001da3f:	39 ca                	cmp    edx,ecx
c001da41:	76 09                	jbe    c001da4c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da43:	8b 04 85 20 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdce0]
c001da4a:	eb 05                	jmp    c001da51 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001da4c:	40                   	inc    eax
c001da4d:	eb da                	jmp    c001da29 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da4f:	31 c0                	xor    eax,eax
c001da51:	5b                   	pop    ebx
c001da52:	c3                   	ret    

c001da53 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da53:	53                   	push   ebx
c001da54:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da58:	53                   	push   ebx
c001da59:	e8 8c ff ff ff       	call   c001d9ea <Thr::getDriverBaseFromAddress(unsigned long)>
c001da5e:	5a                   	pop    edx
c001da5f:	31 d2                	xor    edx,edx
c001da61:	85 c0                	test   eax,eax
c001da63:	74 04                	je     c001da69 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001da65:	89 da                	mov    edx,ebx
c001da67:	29 c2                	sub    edx,eax
c001da69:	89 d0                	mov    eax,edx
c001da6b:	5b                   	pop    ebx
c001da6c:	c3                   	ret    

c001da6d <Thr::loadDLL(char const*, bool)>:
c001da6d:	55                   	push   ebp
c001da6e:	57                   	push   edi
c001da6f:	56                   	push   esi
c001da70:	53                   	push   ebx
c001da71:	81 ec 34 01 00 00    	sub    esp,0x134
c001da77:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001da7e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001da85:	56                   	push   esi
c001da86:	68 0c ce 02 c0       	push   0xc002ce0c
c001da8b:	e8 9d 50 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001da90:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001da97:	e8 f0 1d ff ff       	call   c000f88c <malloc>
c001da9c:	83 c4 0c             	add    esp,0xc
c001da9f:	89 c3                	mov    ebx,eax
c001daa1:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001daa7:	56                   	push   esi
c001daa8:	50                   	push   eax
c001daa9:	e8 de 55 ff ff       	call   c001308c <File::File(char const*, Process*)>
c001daae:	83 c4 10             	add    esp,0x10
c001dab1:	85 db                	test   ebx,ebx
c001dab3:	75 3c                	jne    c001daf1 <Thr::loadDLL(char const*, bool)+0x84>
c001dab5:	89 f8                	mov    eax,edi
c001dab7:	84 c0                	test   al,al
c001dab9:	0f 84 cc 01 00 00    	je     c001dc8b <Thr::loadDLL(char const*, bool)+0x21e>
c001dabf:	55                   	push   ebp
c001dac0:	55                   	push   ebp
c001dac1:	68 1d ce 02 c0       	push   0xc002ce1d
c001dac6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001daca:	55                   	push   ebp
c001dacb:	e8 3c 2d fe ff       	call   c000080c <strcpy>
c001dad0:	58                   	pop    eax
c001dad1:	5a                   	pop    edx
c001dad2:	56                   	push   esi
c001dad3:	55                   	push   ebp
c001dad4:	e8 73 2e fe ff       	call   c000094c <strcat>
c001dad9:	59                   	pop    ecx
c001dada:	58                   	pop    eax
c001dadb:	68 30 ce 02 c0       	push   0xc002ce30
c001dae0:	55                   	push   ebp
c001dae1:	e8 66 2e fe ff       	call   c000094c <strcat>
c001dae6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dae9:	e8 ab cb ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001daee:	83 c4 10             	add    esp,0x10
c001daf1:	51                   	push   ecx
c001daf2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001daf6:	50                   	push   eax
c001daf7:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dafb:	50                   	push   eax
c001dafc:	53                   	push   ebx
c001dafd:	e8 9a 58 ff ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	85 db                	test   ebx,ebx
c001db07:	74 0c                	je     c001db15 <Thr::loadDLL(char const*, bool)+0xa8>
c001db09:	83 ec 0c             	sub    esp,0xc
c001db0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db0e:	53                   	push   ebx
c001db0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db12:	83 c4 10             	add    esp,0x10
c001db15:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db1a:	75 0a                	jne    c001db26 <Thr::loadDLL(char const*, bool)+0xb9>
c001db1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db20:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db24:	75 3c                	jne    c001db62 <Thr::loadDLL(char const*, bool)+0xf5>
c001db26:	89 f8                	mov    eax,edi
c001db28:	84 c0                	test   al,al
c001db2a:	0f 84 43 01 00 00    	je     c001dc73 <Thr::loadDLL(char const*, bool)+0x206>
c001db30:	51                   	push   ecx
c001db31:	51                   	push   ecx
c001db32:	68 1d ce 02 c0       	push   0xc002ce1d
c001db37:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db3b:	53                   	push   ebx
c001db3c:	e8 cb 2c fe ff       	call   c000080c <strcpy>
c001db41:	5d                   	pop    ebp
c001db42:	58                   	pop    eax
c001db43:	56                   	push   esi
c001db44:	53                   	push   ebx
c001db45:	e8 02 2e fe ff       	call   c000094c <strcat>
c001db4a:	58                   	pop    eax
c001db4b:	5a                   	pop    edx
c001db4c:	68 30 ce 02 c0       	push   0xc002ce30
c001db51:	53                   	push   ebx
c001db52:	e8 f5 2d fe ff       	call   c000094c <strcat>
c001db57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db5a:	e8 3a cb ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001db5f:	83 c4 10             	add    esp,0x10
c001db62:	52                   	push   edx
c001db63:	6a 03                	push   0x3
c001db65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db6d:	05 ff 0f 00 00       	add    eax,0xfff
c001db72:	83 d2 00             	adc    edx,0x0
c001db75:	0f ac d0 0c          	shrd   eax,edx,0xc
c001db79:	50                   	push   eax
c001db7a:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c001db80:	e8 db 44 ff ff       	call   c0012060 <VAS::allocatePages(int, int)>
c001db85:	59                   	pop    ecx
c001db86:	89 c3                	mov    ebx,eax
c001db88:	5d                   	pop    ebp
c001db89:	50                   	push   eax
c001db8a:	68 32 ce 02 c0       	push   0xc002ce32
c001db8f:	e8 99 4f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001db94:	89 34 24             	mov    DWORD PTR [esp],esi
c001db97:	e8 d0 2b fe ff       	call   c000076c <strlen>
c001db9c:	8b 2d 00 1f 03 c0    	mov    ebp,DWORD PTR ds:0xc0031f00
c001dba2:	40                   	inc    eax
c001dba3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dba6:	e8 e1 1c ff ff       	call   c000f88c <malloc>
c001dbab:	89 04 ad 20 23 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdce0],eax
c001dbb2:	58                   	pop    eax
c001dbb3:	a1 00 1f 03 c0       	mov    eax,ds:0xc0031f00
c001dbb8:	5a                   	pop    edx
c001dbb9:	56                   	push   esi
c001dbba:	ff 34 85 20 23 03 c0 	push   DWORD PTR [eax*4-0x3ffcdce0]
c001dbc1:	e8 46 2c fe ff       	call   c000080c <strcpy>
c001dbc6:	a1 00 1f 03 c0       	mov    eax,ds:0xc0031f00
c001dbcb:	8d 50 01             	lea    edx,[eax+0x1]
c001dbce:	89 1c 85 20 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdee0],ebx
c001dbd5:	89 15 00 1f 03 c0    	mov    DWORD PTR ds:0xc0031f00,edx
c001dbdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbdf:	83 c4 0c             	add    esp,0xc
c001dbe2:	89 14 85 20 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce0e0],edx
c001dbe9:	6a 01                	push   0x1
c001dbeb:	53                   	push   ebx
c001dbec:	56                   	push   esi
c001dbed:	e8 c2 f6 ff ff       	call   c001d2b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dbf2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dbfe:	0f 85 83 00 00 00    	jne    c001dc87 <Thr::loadDLL(char const*, bool)+0x21a>
c001dc04:	89 f8                	mov    eax,edi
c001dc06:	84 c0                	test   al,al
c001dc08:	74 6d                	je     c001dc77 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc0a:	83 ec 0c             	sub    esp,0xc
c001dc0d:	68 3f ce 02 c0       	push   0xc002ce3f
c001dc12:	e8 82 ca ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001dc17:	83 c4 10             	add    esp,0x10
c001dc1a:	eb 5b                	jmp    c001dc77 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc1c:	89 ee                	mov    esi,ebp
c001dc1e:	50                   	push   eax
c001dc1f:	c1 e6 0c             	shl    esi,0xc
c001dc22:	50                   	push   eax
c001dc23:	01 de                	add    esi,ebx
c001dc25:	56                   	push   esi
c001dc26:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c001dc2c:	e8 97 3f ff ff       	call   c0011bc8 <VAS::getPageTableEntry(unsigned long)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc37:	75 0c                	jne    c001dc45 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc39:	83 ec 0c             	sub    esp,0xc
c001dc3c:	56                   	push   esi
c001dc3d:	e8 22 1f ff ff       	call   c000fb64 <Phys::freePage(unsigned long)>
c001dc42:	83 c4 10             	add    esp,0x10
c001dc45:	45                   	inc    ebp
c001dc46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc4e:	05 ff 0f 00 00       	add    eax,0xfff
c001dc53:	bf 00 00 00 00       	mov    edi,0x0
c001dc58:	83 d2 00             	adc    edx,0x0
c001dc5b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dc5f:	c1 ea 0c             	shr    edx,0xc
c001dc62:	39 c5                	cmp    ebp,eax
c001dc64:	89 d1                	mov    ecx,edx
c001dc66:	89 f8                	mov    eax,edi
c001dc68:	19 c8                	sbb    eax,ecx
c001dc6a:	72 b0                	jb     c001dc1c <Thr::loadDLL(char const*, bool)+0x1af>
c001dc6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc71:	75 18                	jne    c001dc8b <Thr::loadDLL(char const*, bool)+0x21e>
c001dc73:	31 db                	xor    ebx,ebx
c001dc75:	eb 14                	jmp    c001dc8b <Thr::loadDLL(char const*, bool)+0x21e>
c001dc77:	83 ec 0c             	sub    esp,0xc
c001dc7a:	68 5e ce 02 c0       	push   0xc002ce5e
c001dc7f:	e8 15 ca ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001dc84:	83 c4 10             	add    esp,0x10
c001dc87:	31 ed                	xor    ebp,ebp
c001dc89:	eb bb                	jmp    c001dc46 <Thr::loadDLL(char const*, bool)+0x1d9>
c001dc8b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dc91:	89 d8                	mov    eax,ebx
c001dc93:	5b                   	pop    ebx
c001dc94:	5e                   	pop    esi
c001dc95:	5f                   	pop    edi
c001dc96:	5d                   	pop    ebp
c001dc97:	c3                   	ret    

c001dc98 <Thr::executeDLL(unsigned long, void*)>:
c001dc98:	56                   	push   esi
c001dc99:	53                   	push   ebx
c001dc9a:	52                   	push   edx
c001dc9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dca3:	85 db                	test   ebx,ebx
c001dca5:	75 10                	jne    c001dcb7 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dca7:	83 ec 0c             	sub    esp,0xc
c001dcaa:	68 7a ce 02 c0       	push   0xc002ce7a
c001dcaf:	e8 e5 c9 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	50                   	push   eax
c001dcb8:	50                   	push   eax
c001dcb9:	53                   	push   ebx
c001dcba:	68 a4 ce 02 c0       	push   0xc002cea4
c001dcbf:	e8 69 4e ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001dcc4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dcc8:	89 d8                	mov    eax,ebx
c001dcca:	83 c4 14             	add    esp,0x14
c001dccd:	5b                   	pop    ebx
c001dcce:	5e                   	pop    esi
c001dccf:	ff e0                	jmp    eax
c001dcd1:	90                   	nop

c001dcd2 <userModeEntryPoint(void*)>:
c001dcd2:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001dcd7:	48                   	dec    eax
c001dcd8:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001dcdd:	75 01                	jne    c001dce0 <userModeEntryPoint(void*)+0xe>
c001dcdf:	fb                   	sti    
c001dce0:	fb                   	sti    
c001dce1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dce6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dce9:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dcef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcf3:	e9 32 26 fe ff       	jmp    c000032a <goToUsermode>

c001dcf8 <changeTSS>:
c001dcf8:	83 ec 14             	sub    esp,0x14
c001dcfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd00:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd03:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd08:	c1 e2 15             	shl    edx,0x15
c001dd0b:	29 d0                	sub    eax,edx
c001dd0d:	50                   	push   eax
c001dd0e:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001dd13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd19:	05 7c 11 00 00       	add    eax,0x117c
c001dd1e:	50                   	push   eax
c001dd1f:	e8 42 33 ff ff       	call   c0011066 <TSS::setESP(unsigned long)>
c001dd24:	83 c4 1c             	add    esp,0x1c
c001dd27:	c3                   	ret    

c001dd28 <switchToThread(ThreadControlBlock*)>:
c001dd28:	57                   	push   edi
c001dd29:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001dd2e:	56                   	push   esi
c001dd2f:	85 c0                	test   eax,eax
c001dd31:	53                   	push   ebx
c001dd32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd36:	0f 85 88 00 00 00    	jne    c001ddc4 <switchToThread(ThreadControlBlock*)+0x9c>
c001dd3c:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd3f:	3c ff                	cmp    al,0xff
c001dd41:	74 7d                	je     c001ddc0 <switchToThread(ThreadControlBlock*)+0x98>
c001dd43:	0f b6 d0             	movzx  edx,al
c001dd46:	b8 84 03 00 00       	mov    eax,0x384
c001dd4b:	29 d0                	sub    eax,edx
c001dd4d:	c1 e0 10             	shl    eax,0x10
c001dd50:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd53:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd56:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c001dd5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd61:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dd68:	74 4a                	je     c001ddb4 <switchToThread(ThreadControlBlock*)+0x8c>
c001dd6a:	0f 31                	rdtsc  
c001dd6c:	a3 08 27 03 c0       	mov    ds:0xc0032708,eax
c001dd71:	89 c6                	mov    esi,eax
c001dd73:	89 d7                	mov    edi,edx
c001dd75:	2b 35 f8 26 03 c0    	sub    esi,DWORD PTR ds:0xc00326f8
c001dd7b:	89 15 0c 27 03 c0    	mov    DWORD PTR ds:0xc003270c,edx
c001dd81:	1b 3d fc 26 03 c0    	sbb    edi,DWORD PTR ds:0xc00326fc
c001dd87:	89 35 00 27 03 c0    	mov    DWORD PTR ds:0xc0032700,esi
c001dd8d:	a3 f8 26 03 c0       	mov    ds:0xc00326f8,eax
c001dd92:	89 3d 04 27 03 c0    	mov    DWORD PTR ds:0xc0032704,edi
c001dd98:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dd9e:	89 15 fc 26 03 c0    	mov    DWORD PTR ds:0xc00326fc,edx
c001dda4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dda7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ddaa:	01 c6                	add    esi,eax
c001ddac:	11 d7                	adc    edi,edx
c001ddae:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001ddb1:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001ddb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ddb8:	5b                   	pop    ebx
c001ddb9:	5e                   	pop    esi
c001ddba:	5f                   	pop    edi
c001ddbb:	e9 a2 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001ddc0:	31 c0                	xor    eax,eax
c001ddc2:	eb 8f                	jmp    c001dd53 <switchToThread(ThreadControlBlock*)+0x2b>
c001ddc4:	5b                   	pop    ebx
c001ddc5:	c7 05 c0 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x1
c001ddcf:	5e                   	pop    esi
c001ddd0:	5f                   	pop    edi
c001ddd1:	c3                   	ret    

c001ddd2 <Process::addArgs(char**)>:
c001ddd2:	57                   	push   edi
c001ddd3:	56                   	push   esi
c001ddd4:	53                   	push   ebx
c001ddd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ddd9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dddd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dde7:	85 ff                	test   edi,edi
c001dde9:	74 3d                	je     c001de28 <Process::addArgs(char**)+0x56>
c001ddeb:	8b 07                	mov    eax,DWORD PTR [edi]
c001dded:	85 c0                	test   eax,eax
c001ddef:	74 37                	je     c001de28 <Process::addArgs(char**)+0x56>
c001ddf1:	31 db                	xor    ebx,ebx
c001ddf3:	83 ec 0c             	sub    esp,0xc
c001ddf6:	50                   	push   eax
c001ddf7:	e8 70 29 fe ff       	call   c000076c <strlen>
c001ddfc:	40                   	inc    eax
c001ddfd:	89 04 24             	mov    DWORD PTR [esp],eax
c001de00:	e8 87 1a ff ff       	call   c000f88c <malloc>
c001de05:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de0c:	5a                   	pop    edx
c001de0d:	59                   	pop    ecx
c001de0e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de11:	43                   	inc    ebx
c001de12:	50                   	push   eax
c001de13:	e8 f4 29 fe ff       	call   c000080c <strcpy>
c001de18:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de24:	85 c0                	test   eax,eax
c001de26:	75 cb                	jne    c001ddf3 <Process::addArgs(char**)+0x21>
c001de28:	5b                   	pop    ebx
c001de29:	5e                   	pop    esi
c001de2a:	5f                   	pop    edi
c001de2b:	c3                   	ret    

c001de2c <Process::Process(char const*, Process*, char**)>:
c001de2c:	56                   	push   esi
c001de2d:	53                   	push   ebx
c001de2e:	83 ec 14             	sub    esp,0x14
c001de31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de35:	05 0c 02 00 00       	add    eax,0x20c
c001de3a:	bb 07 00 00 00       	mov    ebx,0x7
c001de3f:	89 c6                	mov    esi,eax
c001de41:	85 db                	test   ebx,ebx
c001de43:	78 12                	js     c001de57 <Process::Process(char const*, Process*, char**)+0x2b>
c001de45:	83 ec 0c             	sub    esp,0xc
c001de48:	56                   	push   esi
c001de49:	e8 c4 b9 00 00       	call   c0029812 <ThreadControlBlock::ThreadControlBlock()>
c001de4e:	83 c4 10             	add    esp,0x10
c001de51:	83 c6 63             	add    esi,0x63
c001de54:	4b                   	dec    ebx
c001de55:	eb ea                	jmp    c001de41 <Process::Process(char const*, Process*, char**)+0x15>
c001de57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de5b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001de62:	83 ec 0c             	sub    esp,0xc
c001de65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de69:	e8 84 c6 ff ff       	call   c001a4f2 <Krnl::newProcessEnv(Process*)>
c001de6e:	83 c4 10             	add    esp,0x10
c001de71:	89 c2                	mov    edx,eax
c001de73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de77:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001de7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de81:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001de8a:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c001de8f:	8d 50 01             	lea    edx,[eax+0x1]
c001de92:	89 15 10 e7 02 c0    	mov    DWORD PTR ds:0xc002e710,edx
c001de98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001de9c:	89 02                	mov    DWORD PTR [edx],eax
c001de9e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dea6:	83 ec 0c             	sub    esp,0xc
c001dea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dead:	e8 da 19 ff ff       	call   c000f88c <malloc>
c001deb2:	83 c4 10             	add    esp,0x10
c001deb5:	89 c3                	mov    ebx,eax
c001deb7:	83 ec 08             	sub    esp,0x8
c001deba:	6a 00                	push   0x0
c001debc:	53                   	push   ebx
c001debd:	e8 46 45 ff ff       	call   c0012408 <VAS::VAS(bool)>
c001dec2:	83 c4 10             	add    esp,0x10
c001dec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001decf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ded3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dedd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dee1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dee5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001deeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001def5:	85 c0                	test   eax,eax
c001def7:	74 42                	je     c001df3b <Process::Process(char const*, Process*, char**)+0x10f>
c001def9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001defd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df03:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df0d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df17:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df1d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df27:	05 0c 01 00 00       	add    eax,0x10c
c001df2c:	83 ec 08             	sub    esp,0x8
c001df2f:	52                   	push   edx
c001df30:	50                   	push   eax
c001df31:	e8 d6 28 fe ff       	call   c000080c <strcpy>
c001df36:	83 c4 10             	add    esp,0x10
c001df39:	eb 63                	jmp    c001df9e <Process::Process(char const*, Process*, char**)+0x172>
c001df3b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df43:	83 ec 0c             	sub    esp,0xc
c001df46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df4a:	e8 3d 19 ff ff       	call   c000f88c <malloc>
c001df4f:	83 c4 10             	add    esp,0x10
c001df52:	89 c3                	mov    ebx,eax
c001df54:	83 ec 08             	sub    esp,0x8
c001df57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df5b:	53                   	push   ebx
c001df5c:	e8 e7 2d ff ff       	call   c0010d48 <VgaText::VgaText(char const*)>
c001df61:	83 c4 10             	add    esp,0x10
c001df64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df68:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001df6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df72:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	50                   	push   eax
c001df7c:	e8 fe 22 ff ff       	call   c001027f <addToTerminalCycle(VgaText*)>
c001df81:	83 c4 10             	add    esp,0x10
c001df84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df88:	05 0c 01 00 00       	add    eax,0x10c
c001df8d:	83 ec 08             	sub    esp,0x8
c001df90:	68 c3 ce 02 c0       	push   0xc002cec3
c001df95:	50                   	push   eax
c001df96:	e8 71 28 fe ff       	call   c000080c <strcpy>
c001df9b:	83 c4 10             	add    esp,0x10
c001df9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfa2:	83 c0 0c             	add    eax,0xc
c001dfa5:	83 ec 08             	sub    esp,0x8
c001dfa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfac:	50                   	push   eax
c001dfad:	e8 5a 28 fe ff       	call   c000080c <strcpy>
c001dfb2:	83 c4 10             	add    esp,0x10
c001dfb5:	83 ec 08             	sub    esp,0x8
c001dfb8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dfbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfc0:	e8 0d fe ff ff       	call   c001ddd2 <Process::addArgs(char**)>
c001dfc5:	83 c4 10             	add    esp,0x10
c001dfc8:	83 ec 08             	sub    esp,0x8
c001dfcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfd3:	e8 a6 ed ff ff       	call   c001cd7e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dfd8:	83 c4 10             	add    esp,0x10
c001dfdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dfdf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dfe3:	83 f0 01             	xor    eax,0x1
c001dfe6:	88 c2                	mov    dl,al
c001dfe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfec:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dff2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dff7:	83 ec 08             	sub    esp,0x8
c001dffa:	50                   	push   eax
c001dffb:	68 f0 cf 02 c0       	push   0xc002cff0
c001e000:	e8 28 4b ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e005:	83 c4 10             	add    esp,0x10
c001e008:	90                   	nop
c001e009:	83 c4 14             	add    esp,0x14
c001e00c:	5b                   	pop    ebx
c001e00d:	5e                   	pop    esi
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <Process::Process(bool, char const*, Process*, char**)>:
c001e010:	56                   	push   esi
c001e011:	53                   	push   ebx
c001e012:	83 ec 24             	sub    esp,0x24
c001e015:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e019:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e01d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e021:	05 0c 02 00 00       	add    eax,0x20c
c001e026:	bb 07 00 00 00       	mov    ebx,0x7
c001e02b:	89 c6                	mov    esi,eax
c001e02d:	85 db                	test   ebx,ebx
c001e02f:	78 12                	js     c001e043 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e031:	83 ec 0c             	sub    esp,0xc
c001e034:	56                   	push   esi
c001e035:	e8 d8 b7 00 00       	call   c0029812 <ThreadControlBlock::ThreadControlBlock()>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	83 c6 63             	add    esi,0x63
c001e040:	4b                   	dec    ebx
c001e041:	eb ea                	jmp    c001e02d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e043:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e047:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e04e:	83 ec 0c             	sub    esp,0xc
c001e051:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e055:	e8 98 c4 ff ff       	call   c001a4f2 <Krnl::newProcessEnv(Process*)>
c001e05a:	83 c4 10             	add    esp,0x10
c001e05d:	89 c2                	mov    edx,eax
c001e05f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e063:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e06d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e076:	a1 10 e7 02 c0       	mov    eax,ds:0xc002e710
c001e07b:	8d 50 01             	lea    edx,[eax+0x1]
c001e07e:	89 15 10 e7 02 c0    	mov    DWORD PTR ds:0xc002e710,edx
c001e084:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e088:	89 02                	mov    DWORD PTR [edx],eax
c001e08a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e099:	e8 ee 17 ff ff       	call   c000f88c <malloc>
c001e09e:	83 c4 10             	add    esp,0x10
c001e0a1:	89 c3                	mov    ebx,eax
c001e0a3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0a8:	83 ec 08             	sub    esp,0x8
c001e0ab:	50                   	push   eax
c001e0ac:	53                   	push   ebx
c001e0ad:	e8 56 43 ff ff       	call   c0012408 <VAS::VAS(bool)>
c001e0b2:	83 c4 10             	add    esp,0x10
c001e0b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e0bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e0cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0d1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0d5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e0db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0e5:	85 c0                	test   eax,eax
c001e0e7:	74 42                	je     c001e12b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e0e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0ed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0f3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e107:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e10d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e113:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e117:	05 0c 01 00 00       	add    eax,0x10c
c001e11c:	83 ec 08             	sub    esp,0x8
c001e11f:	52                   	push   edx
c001e120:	50                   	push   eax
c001e121:	e8 e6 26 fe ff       	call   c000080c <strcpy>
c001e126:	83 c4 10             	add    esp,0x10
c001e129:	eb 63                	jmp    c001e18e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e12b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e133:	83 ec 0c             	sub    esp,0xc
c001e136:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e13a:	e8 4d 17 ff ff       	call   c000f88c <malloc>
c001e13f:	83 c4 10             	add    esp,0x10
c001e142:	89 c3                	mov    ebx,eax
c001e144:	83 ec 08             	sub    esp,0x8
c001e147:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e14b:	53                   	push   ebx
c001e14c:	e8 f7 2b ff ff       	call   c0010d48 <VgaText::VgaText(char const*)>
c001e151:	83 c4 10             	add    esp,0x10
c001e154:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e158:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e15e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e162:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e168:	83 ec 0c             	sub    esp,0xc
c001e16b:	50                   	push   eax
c001e16c:	e8 0e 21 ff ff       	call   c001027f <addToTerminalCycle(VgaText*)>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e178:	05 0c 01 00 00       	add    eax,0x10c
c001e17d:	83 ec 08             	sub    esp,0x8
c001e180:	68 c3 ce 02 c0       	push   0xc002cec3
c001e185:	50                   	push   eax
c001e186:	e8 81 26 fe ff       	call   c000080c <strcpy>
c001e18b:	83 c4 10             	add    esp,0x10
c001e18e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e192:	83 c0 0c             	add    eax,0xc
c001e195:	83 ec 08             	sub    esp,0x8
c001e198:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e19c:	50                   	push   eax
c001e19d:	e8 6a 26 fe ff       	call   c000080c <strcpy>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	83 ec 08             	sub    esp,0x8
c001e1a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e1ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1b0:	e8 1d fc ff ff       	call   c001ddd2 <Process::addArgs(char**)>
c001e1b5:	83 c4 10             	add    esp,0x10
c001e1b8:	90                   	nop
c001e1b9:	83 c4 24             	add    esp,0x24
c001e1bc:	5b                   	pop    ebx
c001e1bd:	5e                   	pop    esi
c001e1be:	c3                   	ret    

c001e1bf <taskStartupFunction>:
c001e1bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1c4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e1c7:	c3                   	ret    

c001e1c8 <Semaphore::Semaphore(int)>:
c001e1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e1d0:	89 10                	mov    DWORD PTR [eax],edx
c001e1d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1d6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e1dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1f3:	90                   	nop
c001e1f4:	c3                   	ret    
c001e1f5:	90                   	nop

c001e1f6 <Mutex::Mutex()>:
c001e1f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1fa:	6a 01                	push   0x1
c001e1fc:	50                   	push   eax
c001e1fd:	e8 c6 ff ff ff       	call   c001e1c8 <Semaphore::Semaphore(int)>
c001e202:	83 c4 08             	add    esp,0x8
c001e205:	90                   	nop
c001e206:	c3                   	ret    
c001e207:	90                   	nop

c001e208 <Process::createThread(void (*)(void*), void*, int)>:
c001e208:	55                   	push   ebp
c001e209:	31 c9                	xor    ecx,ecx
c001e20b:	57                   	push   edi
c001e20c:	56                   	push   esi
c001e20d:	53                   	push   ebx
c001e20e:	83 ec 1c             	sub    esp,0x1c
c001e211:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e215:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e21c:	89 f2                	mov    edx,esi
c001e21e:	0f b7 c2             	movzx  eax,dx
c001e221:	83 e2 01             	and    edx,0x1
c001e224:	74 16                	je     c001e23c <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e226:	d1 f8                	sar    eax,1
c001e228:	41                   	inc    ecx
c001e229:	89 c2                	mov    edx,eax
c001e22b:	83 f9 10             	cmp    ecx,0x10
c001e22e:	75 ee                	jne    c001e21e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e230:	83 c4 1c             	add    esp,0x1c
c001e233:	31 db                	xor    ebx,ebx
c001e235:	89 d8                	mov    eax,ebx
c001e237:	5b                   	pop    ebx
c001e238:	5e                   	pop    esi
c001e239:	5f                   	pop    edi
c001e23a:	5d                   	pop    ebp
c001e23b:	c3                   	ret    
c001e23c:	b8 01 00 00 00       	mov    eax,0x1
c001e241:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e244:	d3 e0                	shl    eax,cl
c001e246:	09 c6                	or     esi,eax
c001e248:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e24b:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e252:	89 c6                	mov    esi,eax
c001e254:	c1 e6 05             	shl    esi,0x5
c001e257:	01 f0                	add    eax,esi
c001e259:	01 d8                	add    eax,ebx
c001e25b:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e262:	75 0a                	jne    c001e26e <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e264:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e26e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e274:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e278:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e27b:	01 ca                	add    edx,ecx
c001e27d:	83 ec 08             	sub    esp,0x8
c001e280:	89 d0                	mov    eax,edx
c001e282:	c1 e0 05             	shl    eax,0x5
c001e285:	01 d0                	add    eax,edx
c001e287:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e28b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e28f:	01 d8                	add    eax,ebx
c001e291:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e297:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e29d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2a3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2a9:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e2af:	89 cd                	mov    ebp,ecx
c001e2b1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e2b5:	f7 dd                	neg    ebp
c001e2b7:	c1 e5 15             	shl    ebp,0x15
c001e2ba:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e2c0:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e2c6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e2d0:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e2d6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e2e0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e2ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2ee:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e2f5:	53                   	push   ebx
c001e2f6:	68 e4 26 03 c0       	push   0xc00326e4
c001e2fb:	e8 cc b2 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e300:	89 d8                	mov    eax,ebx
c001e302:	83 c4 10             	add    esp,0x10
c001e305:	83 c4 1c             	add    esp,0x1c
c001e308:	5b                   	pop    ebx
c001e309:	5e                   	pop    esi
c001e30a:	5f                   	pop    edi
c001e30b:	5d                   	pop    ebp
c001e30c:	c3                   	ret    
c001e30d:	90                   	nop

c001e30e <Process::createUserThread()>:
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	68 80 00 00 00       	push   0x80
c001e316:	6a 00                	push   0x0
c001e318:	68 d2 dc 01 c0       	push   0xc001dcd2
c001e31d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e321:	e8 e2 fe ff ff       	call   c001e208 <Process::createThread(void (*)(void*), void*, int)>
c001e326:	83 c4 1c             	add    esp,0x1c
c001e329:	c3                   	ret    

c001e32a <setupMultitasking(void (*)())>:
c001e32a:	56                   	push   esi
c001e32b:	53                   	push   ebx
c001e32c:	51                   	push   ecx
c001e32d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e331:	eb 10                	jmp    c001e343 <setupMultitasking(void (*)())+0x19>
c001e333:	83 ec 0c             	sub    esp,0xc
c001e336:	68 e4 26 03 c0       	push   0xc00326e4
c001e33b:	e8 de b1 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e340:	83 c4 10             	add    esp,0x10
c001e343:	83 ec 0c             	sub    esp,0xc
c001e346:	68 e4 26 03 c0       	push   0xc00326e4
c001e34b:	e8 aa b1 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e350:	83 c4 10             	add    esp,0x10
c001e353:	84 c0                	test   al,al
c001e355:	74 dc                	je     c001e333 <setupMultitasking(void (*)())+0x9>
c001e357:	83 ec 0c             	sub    esp,0xc
c001e35a:	68 3f 07 00 00       	push   0x73f
c001e35f:	e8 28 15 ff ff       	call   c000f88c <malloc>
c001e364:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e36b:	89 c3                	mov    ebx,eax
c001e36d:	6a 00                	push   0x0
c001e36f:	68 c7 ce 02 c0       	push   0xc002cec7
c001e374:	6a 01                	push   0x1
c001e376:	50                   	push   eax
c001e377:	e8 94 fc ff ff       	call   c001e010 <Process::Process(bool, char const*, Process*, char**)>
c001e37c:	83 c4 18             	add    esp,0x18
c001e37f:	89 1d f0 26 03 c0    	mov    DWORD PTR ds:0xc00326f0,ebx
c001e385:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e38b:	68 18 d0 02 c0       	push   0xc002d018
c001e390:	e8 98 47 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e395:	58                   	pop    eax
c001e396:	5a                   	pop    edx
c001e397:	6a 63                	push   0x63
c001e399:	68 4c d0 02 c0       	push   0xc002d04c
c001e39e:	e8 8a 47 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e3a3:	59                   	pop    ecx
c001e3a4:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3aa:	e8 a1 25 ff ff       	call   c0010950 <setActiveTerminal(VgaText*)>
c001e3af:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e3b7:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e3c1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e3c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e3ca:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e3d4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e3da:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e3e0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e3ea:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e3f4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e3fe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e404:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e40e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e414:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e41e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e424:	58                   	pop    eax
c001e425:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e42b:	5a                   	pop    edx
c001e42c:	68 c3 ce 02 c0       	push   0xc002cec3
c001e431:	50                   	push   eax
c001e432:	e8 d5 23 fe ff       	call   c000080c <strcpy>
c001e437:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e43e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e442:	83 c4 14             	add    esp,0x14
c001e445:	5b                   	pop    ebx
c001e446:	5e                   	pop    esi
c001e447:	e9 08 1f fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e44c <schedule()>:
c001e44c:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001e451:	85 c0                	test   eax,eax
c001e453:	74 0b                	je     c001e460 <schedule()+0x14>
c001e455:	c7 05 c0 26 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x1
c001e45f:	c3                   	ret    
c001e460:	53                   	push   ebx
c001e461:	83 ec 14             	sub    esp,0x14
c001e464:	68 e4 26 03 c0       	push   0xc00326e4
c001e469:	e8 8c b0 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	84 c0                	test   al,al
c001e473:	75 38                	jne    c001e4ad <schedule()+0x61>
c001e475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e47a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e47d:	4a                   	dec    edx
c001e47e:	74 32                	je     c001e4b2 <schedule()+0x66>
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	68 e4 26 03 c0       	push   0xc00326e4
c001e488:	e8 89 b0 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e48d:	c7 04 24 e4 26 03 c0 	mov    DWORD PTR [esp],0xc00326e4
c001e494:	89 c3                	mov    ebx,eax
c001e496:	e8 83 b0 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e49b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4a5:	e8 7e f8 ff ff       	call   c001dd28 <switchToThread(ThreadControlBlock*)>
c001e4aa:	83 c4 10             	add    esp,0x10
c001e4ad:	83 c4 08             	add    esp,0x8
c001e4b0:	5b                   	pop    ebx
c001e4b1:	c3                   	ret    
c001e4b2:	83 ec 08             	sub    esp,0x8
c001e4b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e4bc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e4c2:	68 e4 26 03 c0       	push   0xc00326e4
c001e4c7:	e8 00 b1 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	eb af                	jmp    c001e480 <schedule()+0x34>
c001e4d1:	90                   	nop

c001e4d2 <Semaphore::tryAcquire()>:
c001e4d2:	53                   	push   ebx
c001e4d3:	83 ec 08             	sub    esp,0x8
c001e4d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4da:	fa                   	cli    
c001e4db:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e4e0:	8d 50 01             	lea    edx,[eax+0x1]
c001e4e3:	89 15 c8 26 03 c0    	mov    DWORD PTR ds:0xc00326c8,edx
c001e4e9:	8b 15 c4 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326c4
c001e4ef:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e4f2:	89 1d c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,ebx
c001e4f8:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e4fb:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e4fd:	7c 2a                	jl     c001e529 <Semaphore::tryAcquire()+0x57>
c001e4ff:	89 15 c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,edx
c001e505:	85 d2                	test   edx,edx
c001e507:	75 0a                	jne    c001e513 <Semaphore::tryAcquire()+0x41>
c001e509:	8b 15 c0 26 03 c0    	mov    edx,DWORD PTR ds:0xc00326c0
c001e50f:	85 d2                	test   edx,edx
c001e511:	75 5b                	jne    c001e56e <Semaphore::tryAcquire()+0x9c>
c001e513:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e518:	85 c0                	test   eax,eax
c001e51a:	74 07                	je     c001e523 <Semaphore::tryAcquire()+0x51>
c001e51c:	31 c0                	xor    eax,eax
c001e51e:	83 c4 08             	add    esp,0x8
c001e521:	5b                   	pop    ebx
c001e522:	c3                   	ret    
c001e523:	fb                   	sti    
c001e524:	83 c4 08             	add    esp,0x8
c001e527:	5b                   	pop    ebx
c001e528:	c3                   	ret    
c001e529:	43                   	inc    ebx
c001e52a:	89 15 c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,edx
c001e530:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e533:	85 d2                	test   edx,edx
c001e535:	75 1f                	jne    c001e556 <Semaphore::tryAcquire()+0x84>
c001e537:	8b 0d c0 26 03 c0    	mov    ecx,DWORD PTR ds:0xc00326c0
c001e53d:	85 c9                	test   ecx,ecx
c001e53f:	74 15                	je     c001e556 <Semaphore::tryAcquire()+0x84>
c001e541:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001e54b:	e8 fc fe ff ff       	call   c001e44c <schedule()>
c001e550:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e555:	48                   	dec    eax
c001e556:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e55b:	85 c0                	test   eax,eax
c001e55d:	75 08                	jne    c001e567 <Semaphore::tryAcquire()+0x95>
c001e55f:	fb                   	sti    
c001e560:	b0 01                	mov    al,0x1
c001e562:	83 c4 08             	add    esp,0x8
c001e565:	5b                   	pop    ebx
c001e566:	c3                   	ret    
c001e567:	b0 01                	mov    al,0x1
c001e569:	83 c4 08             	add    esp,0x8
c001e56c:	5b                   	pop    ebx
c001e56d:	c3                   	ret    
c001e56e:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001e578:	e8 cf fe ff ff       	call   c001e44c <schedule()>
c001e57d:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e582:	48                   	dec    eax
c001e583:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e588:	85 c0                	test   eax,eax
c001e58a:	75 90                	jne    c001e51c <Semaphore::tryAcquire()+0x4a>
c001e58c:	eb 95                	jmp    c001e523 <Semaphore::tryAcquire()+0x51>

c001e58e <Semaphore::assertLocked(char const*)>:
c001e58e:	83 ec 0c             	sub    esp,0xc
c001e591:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e595:	fa                   	cli    
c001e596:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e59c:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001e5a1:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5a4:	89 0d c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,ecx
c001e5aa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e5ac:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e5af:	7c 24                	jl     c001e5d5 <Semaphore::assertLocked(char const*)+0x47>
c001e5b1:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001e5b6:	85 c0                	test   eax,eax
c001e5b8:	75 09                	jne    c001e5c3 <Semaphore::assertLocked(char const*)+0x35>
c001e5ba:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c001e5bf:	85 c0                	test   eax,eax
c001e5c1:	75 29                	jne    c001e5ec <Semaphore::assertLocked(char const*)+0x5e>
c001e5c3:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e5c8:	48                   	dec    eax
c001e5c9:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e5ce:	75 01                	jne    c001e5d1 <Semaphore::assertLocked(char const*)+0x43>
c001e5d0:	fb                   	sti    
c001e5d1:	83 c4 0c             	add    esp,0xc
c001e5d4:	c3                   	ret    
c001e5d5:	83 ec 0c             	sub    esp,0xc
c001e5d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e5dc:	e8 b8 c0 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001e5e1:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001e5e6:	83 c4 10             	add    esp,0x10
c001e5e9:	48                   	dec    eax
c001e5ea:	eb c5                	jmp    c001e5b1 <Semaphore::assertLocked(char const*)+0x23>
c001e5ec:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001e5f6:	e8 51 fe ff ff       	call   c001e44c <schedule()>
c001e5fb:	eb c6                	jmp    c001e5c3 <Semaphore::assertLocked(char const*)+0x35>

c001e5fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e5fd:	83 ec 14             	sub    esp,0x14
c001e600:	ff 35 c8 26 03 c0    	push   DWORD PTR ds:0xc00326c8
c001e606:	68 70 d0 02 c0       	push   0xc002d070
c001e60b:	e8 1d 45 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e610:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e615:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e619:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e61c:	e8 2b fe ff ff       	call   c001e44c <schedule()>
c001e621:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e626:	83 c4 10             	add    esp,0x10
c001e629:	48                   	dec    eax
c001e62a:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e62f:	85 c0                	test   eax,eax
c001e631:	75 06                	jne    c001e639 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e633:	fb                   	sti    
c001e634:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e639:	83 ec 08             	sub    esp,0x8
c001e63c:	50                   	push   eax
c001e63d:	68 a4 d0 02 c0       	push   0xc002d0a4
c001e642:	e8 e6 44 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e647:	83 c4 1c             	add    esp,0x1c
c001e64a:	c3                   	ret    

c001e64b <blockTask(TaskState)>:
c001e64b:	83 ec 0c             	sub    esp,0xc
c001e64e:	fa                   	cli    
c001e64f:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e65e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e661:	e8 e6 fd ff ff       	call   c001e44c <schedule()>
c001e666:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e66b:	48                   	dec    eax
c001e66c:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e671:	75 01                	jne    c001e674 <blockTask(TaskState)+0x29>
c001e673:	fb                   	sti    
c001e674:	83 c4 0c             	add    esp,0xc
c001e677:	c3                   	ret    

c001e678 <waitTask(int, int*, int)>:
c001e678:	83 ec 18             	sub    esp,0x18
c001e67b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e680:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e684:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e687:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e68b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e690:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e693:	6a 07                	push   0x7
c001e695:	e8 b1 ff ff ff       	call   c001e64b <blockTask(TaskState)>
c001e69a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e69f:	83 c4 10             	add    esp,0x10
c001e6a2:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6a5:	85 d2                	test   edx,edx
c001e6a7:	74 0a                	je     c001e6b3 <waitTask(int, int*, int)+0x3b>
c001e6a9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e6ac:	89 02                	mov    DWORD PTR [edx],eax
c001e6ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b3:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e6b6:	83 c4 0c             	add    esp,0xc
c001e6b9:	c3                   	ret    

c001e6ba <nanoSleepUntil(unsigned long long)>:
c001e6ba:	83 ec 0c             	sub    esp,0xc
c001e6bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6c5:	3b 05 10 f8 02 c0    	cmp    eax,DWORD PTR ds:0xc002f810
c001e6cb:	89 d1                	mov    ecx,edx
c001e6cd:	1b 0d 14 f8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f814
c001e6d3:	73 04                	jae    c001e6d9 <nanoSleepUntil(unsigned long long)+0x1f>
c001e6d5:	83 c4 0c             	add    esp,0xc
c001e6d8:	c3                   	ret    
c001e6d9:	fa                   	cli    
c001e6da:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e6e0:	83 ec 08             	sub    esp,0x8
c001e6e3:	ff 05 c4 26 03 c0    	inc    DWORD PTR ds:0xc00326c4
c001e6e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e6ef:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e6f2:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e6f5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e6fb:	68 d8 26 03 c0       	push   0xc00326d8
c001e700:	e8 c7 ae 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e705:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e70c:	e8 3a ff ff ff       	call   c001e64b <blockTask(TaskState)>
c001e711:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001e716:	83 c4 10             	add    esp,0x10
c001e719:	48                   	dec    eax
c001e71a:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001e71f:	85 c0                	test   eax,eax
c001e721:	75 09                	jne    c001e72c <nanoSleepUntil(unsigned long long)+0x72>
c001e723:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c001e728:	85 c0                	test   eax,eax
c001e72a:	75 12                	jne    c001e73e <nanoSleepUntil(unsigned long long)+0x84>
c001e72c:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e731:	48                   	dec    eax
c001e732:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e737:	75 9c                	jne    c001e6d5 <nanoSleepUntil(unsigned long long)+0x1b>
c001e739:	fb                   	sti    
c001e73a:	83 c4 0c             	add    esp,0xc
c001e73d:	c3                   	ret    
c001e73e:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001e748:	e8 ff fc ff ff       	call   c001e44c <schedule()>
c001e74d:	eb dd                	jmp    c001e72c <nanoSleepUntil(unsigned long long)+0x72>

c001e74f <nanoSleep(unsigned long long)>:
c001e74f:	a1 10 f8 02 c0       	mov    eax,ds:0xc002f810
c001e754:	8b 15 14 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f814
c001e75a:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e75e:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e762:	e9 53 ff ff ff       	jmp    c001e6ba <nanoSleepUntil(unsigned long long)>

c001e767 <sleep(unsigned long long)>:
c001e767:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e76f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e774:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e778:	01 ca                	add    edx,ecx
c001e77a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e77e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e782:	eb cb                	jmp    c001e74f <nanoSleep(unsigned long long)>

c001e784 <Semaphore::acquire()>:
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e78b:	fa                   	cli    
c001e78c:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001e791:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e797:	8d 48 01             	lea    ecx,[eax+0x1]
c001e79a:	89 0d c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,ecx
c001e7a0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7a3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7a5:	7d 28                	jge    c001e7cf <Semaphore::acquire()+0x4b>
c001e7a7:	41                   	inc    ecx
c001e7a8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7ab:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001e7b0:	85 c0                	test   eax,eax
c001e7b2:	75 09                	jne    c001e7bd <Semaphore::acquire()+0x39>
c001e7b4:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c001e7b9:	85 c0                	test   eax,eax
c001e7bb:	75 4e                	jne    c001e80b <Semaphore::acquire()+0x87>
c001e7bd:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e7c2:	48                   	dec    eax
c001e7c3:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e7c8:	75 01                	jne    c001e7cb <Semaphore::acquire()+0x47>
c001e7ca:	fb                   	sti    
c001e7cb:	83 c4 0c             	add    esp,0xc
c001e7ce:	c3                   	ret    
c001e7cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7d4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e7db:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e7de:	85 c9                	test   ecx,ecx
c001e7e0:	74 3a                	je     c001e81c <Semaphore::acquire()+0x98>
c001e7e2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e7e5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e7eb:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e7ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7f3:	83 ec 0c             	sub    esp,0xc
c001e7f6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e7f9:	6a 05                	push   0x5
c001e7fb:	e8 4b fe ff ff       	call   c001e64b <blockTask(TaskState)>
c001e800:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001e805:	83 c4 10             	add    esp,0x10
c001e808:	48                   	dec    eax
c001e809:	eb a0                	jmp    c001e7ab <Semaphore::acquire()+0x27>
c001e80b:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001e815:	e8 32 fc ff ff       	call   c001e44c <schedule()>
c001e81a:	eb a1                	jmp    c001e7bd <Semaphore::acquire()+0x39>
c001e81c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e821:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e824:	eb c8                	jmp    c001e7ee <Semaphore::acquire()+0x6a>

c001e826 <taskReturned>:
c001e826:	83 ec 18             	sub    esp,0x18
c001e829:	68 d8 d0 02 c0       	push   0xc002d0d8
c001e82e:	e8 66 be ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001e833:	83 c4 10             	add    esp,0x10
c001e836:	83 ec 0c             	sub    esp,0xc
c001e839:	6a 02                	push   0x2
c001e83b:	e8 0b fe ff ff       	call   c001e64b <blockTask(TaskState)>
c001e840:	fa                   	cli    
c001e841:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e847:	e8 00 fc ff ff       	call   c001e44c <schedule()>
c001e84c:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e851:	83 c4 10             	add    esp,0x10
c001e854:	48                   	dec    eax
c001e855:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e85a:	85 c0                	test   eax,eax
c001e85c:	75 d8                	jne    c001e836 <taskReturned+0x10>
c001e85e:	fb                   	sti    
c001e85f:	eb d5                	jmp    c001e836 <taskReturned+0x10>

c001e861 <Thr::processFromPID(int)>:
c001e861:	57                   	push   edi
c001e862:	56                   	push   esi
c001e863:	53                   	push   ebx
c001e864:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	68 ce ce 02 c0       	push   0xc002cece
c001e870:	e8 b8 42 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e875:	fa                   	cli    
c001e876:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e87c:	c7 04 24 e4 26 03 c0 	mov    DWORD PTR [esp],0xc00326e4
c001e883:	e8 8e ac 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e888:	83 c4 10             	add    esp,0x10
c001e88b:	89 c7                	mov    edi,eax
c001e88d:	eb 14                	jmp    c001e8a3 <Thr::processFromPID(int)+0x42>
c001e88f:	83 ec 0c             	sub    esp,0xc
c001e892:	68 e4 26 03 c0       	push   0xc00326e4
c001e897:	e8 7a ac 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e89c:	83 c4 10             	add    esp,0x10
c001e89f:	39 f8                	cmp    eax,edi
c001e8a1:	74 49                	je     c001e8ec <Thr::processFromPID(int)+0x8b>
c001e8a3:	83 ec 0c             	sub    esp,0xc
c001e8a6:	68 e4 26 03 c0       	push   0xc00326e4
c001e8ab:	e8 66 ac 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8b0:	c7 04 24 e4 26 03 c0 	mov    DWORD PTR [esp],0xc00326e4
c001e8b7:	89 c3                	mov    ebx,eax
c001e8b9:	e8 60 ac 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8be:	58                   	pop    eax
c001e8bf:	5a                   	pop    edx
c001e8c0:	53                   	push   ebx
c001e8c1:	68 e4 26 03 c0       	push   0xc00326e4
c001e8c6:	e8 01 ad 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	39 30                	cmp    DWORD PTR [eax],esi
c001e8d3:	75 ba                	jne    c001e88f <Thr::processFromPID(int)+0x2e>
c001e8d5:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e8da:	48                   	dec    eax
c001e8db:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e8e0:	74 07                	je     c001e8e9 <Thr::processFromPID(int)+0x88>
c001e8e2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8e5:	5b                   	pop    ebx
c001e8e6:	5e                   	pop    esi
c001e8e7:	5f                   	pop    edi
c001e8e8:	c3                   	ret    
c001e8e9:	fb                   	sti    
c001e8ea:	eb f6                	jmp    c001e8e2 <Thr::processFromPID(int)+0x81>
c001e8ec:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e8f1:	48                   	dec    eax
c001e8f2:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e8f7:	75 01                	jne    c001e8fa <Thr::processFromPID(int)+0x99>
c001e8f9:	fb                   	sti    
c001e8fa:	83 ec 0c             	sub    esp,0xc
c001e8fd:	68 e9 ce 02 c0       	push   0xc002cee9
c001e902:	e8 26 42 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	31 c0                	xor    eax,eax
c001e90c:	5b                   	pop    ebx
c001e90d:	5e                   	pop    esi
c001e90e:	5f                   	pop    edi
c001e90f:	c3                   	ret    

c001e910 <unblockTask(ThreadControlBlock*)>:
c001e910:	53                   	push   ebx
c001e911:	83 ec 08             	sub    esp,0x8
c001e914:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e918:	fa                   	cli    
c001e919:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001e91f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e922:	85 c0                	test   eax,eax
c001e924:	74 66                	je     c001e98c <unblockTask(ThreadControlBlock*)+0x7c>
c001e926:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e929:	48                   	dec    eax
c001e92a:	74 31                	je     c001e95d <unblockTask(ThreadControlBlock*)+0x4d>
c001e92c:	83 ec 0c             	sub    esp,0xc
c001e92f:	68 e4 26 03 c0       	push   0xc00326e4
c001e934:	e8 dd ab 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e939:	83 c4 10             	add    esp,0x10
c001e93c:	85 c0                	test   eax,eax
c001e93e:	75 17                	jne    c001e957 <unblockTask(ThreadControlBlock*)+0x47>
c001e940:	eb 68                	jmp    c001e9aa <unblockTask(ThreadControlBlock*)+0x9a>
c001e942:	83 ec 08             	sub    esp,0x8
c001e945:	50                   	push   eax
c001e946:	68 e4 26 03 c0       	push   0xc00326e4
c001e94b:	e8 64 af 00 00       	call   c00298b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	85 c0                	test   eax,eax
c001e955:	74 53                	je     c001e9aa <unblockTask(ThreadControlBlock*)+0x9a>
c001e957:	39 c3                	cmp    ebx,eax
c001e959:	75 e7                	jne    c001e942 <unblockTask(ThreadControlBlock*)+0x32>
c001e95b:	eb 1c                	jmp    c001e979 <unblockTask(ThreadControlBlock*)+0x69>
c001e95d:	83 ec 0c             	sub    esp,0xc
c001e960:	68 c8 d1 02 c0       	push   0xc002d1c8
c001e965:	e8 c3 41 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e96a:	c7 04 24 54 d1 02 c0 	mov    DWORD PTR [esp],0xc002d154
c001e971:	e8 b7 41 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001e97e:	48                   	dec    eax
c001e97f:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001e984:	75 01                	jne    c001e987 <unblockTask(ThreadControlBlock*)+0x77>
c001e986:	fb                   	sti    
c001e987:	83 c4 08             	add    esp,0x8
c001e98a:	5b                   	pop    ebx
c001e98b:	c3                   	ret    
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	68 0c d1 02 c0       	push   0xc002d10c
c001e994:	e8 94 41 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e999:	c7 04 24 54 d1 02 c0 	mov    DWORD PTR [esp],0xc002d154
c001e9a0:	e8 88 41 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001e9a5:	83 c4 10             	add    esp,0x10
c001e9a8:	eb cf                	jmp    c001e979 <unblockTask(ThreadControlBlock*)+0x69>
c001e9aa:	83 ec 08             	sub    esp,0x8
c001e9ad:	53                   	push   ebx
c001e9ae:	68 e4 26 03 c0       	push   0xc00326e4
c001e9b3:	e8 14 ac 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9b8:	83 c4 10             	add    esp,0x10
c001e9bb:	eb bc                	jmp    c001e979 <unblockTask(ThreadControlBlock*)+0x69>

c001e9bd <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e9bd:	55                   	push   ebp
c001e9be:	57                   	push   edi
c001e9bf:	56                   	push   esi
c001e9c0:	53                   	push   ebx
c001e9c1:	83 ec 1c             	sub    esp,0x1c
c001e9c4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9c8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9cb:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e9d1:	85 ff                	test   edi,edi
c001e9d3:	7e 20                	jle    c001e9f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e9d5:	31 f6                	xor    esi,esi
c001e9d7:	83 ec 0c             	sub    esp,0xc
c001e9da:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e9e1:	46                   	inc    esi
c001e9e2:	e8 b5 0e ff ff       	call   c000f89c <free>
c001e9e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e9f3:	7f e2                	jg     c001e9d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e9f5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e9ff:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea04:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea07:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea0a:	d3 c0                	rol    eax,cl
c001ea0c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea13:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea16:	89 f7                	mov    edi,esi
c001ea18:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea20:	0f 85 74 01 00 00    	jne    c001eb9a <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea26:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea2c:	85 ed                	test   ebp,ebp
c001ea2e:	74 1b                	je     c001ea4b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea30:	83 ec 0c             	sub    esp,0xc
c001ea33:	55                   	push   ebp
c001ea34:	e8 d5 b9 ff ff       	call   c001a40e <EnvVarContainer::~EnvVarContainer()>
c001ea39:	59                   	pop    ecx
c001ea3a:	5e                   	pop    esi
c001ea3b:	6a 0c                	push   0xc
c001ea3d:	55                   	push   ebp
c001ea3e:	e8 0a 40 ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c001ea43:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea46:	83 c4 10             	add    esp,0x10
c001ea49:	89 f7                	mov    edi,esi
c001ea4b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea51:	85 c0                	test   eax,eax
c001ea53:	0f 84 aa 00 00 00    	je     c001eb03 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea59:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ea5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea60:	31 c9                	xor    ecx,ecx
c001ea62:	eb 10                	jmp    c001ea74 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ea64:	41                   	inc    ecx
c001ea65:	83 f9 10             	cmp    ecx,0x10
c001ea68:	0f 84 95 00 00 00    	je     c001eb03 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea6e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea74:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ea7b:	d3 fa                	sar    edx,cl
c001ea7d:	83 e2 01             	and    edx,0x1
c001ea80:	74 e2                	je     c001ea64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea82:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ea85:	01 ca                	add    edx,ecx
c001ea87:	89 d5                	mov    ebp,edx
c001ea89:	c1 e5 05             	shl    ebp,0x5
c001ea8c:	01 ea                	add    edx,ebp
c001ea8e:	01 d0                	add    eax,edx
c001ea90:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ea96:	83 fd 07             	cmp    ebp,0x7
c001ea99:	75 c9                	jne    c001ea64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ea9b:	05 40 02 00 00       	add    eax,0x240
c001eaa0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eaa3:	83 fd ff             	cmp    ebp,0xffffffff
c001eaa6:	0f 8c 08 01 00 00    	jl     c001ebb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eaac:	0f 84 b9 01 00 00    	je     c001ec6b <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eab2:	85 ed                	test   ebp,ebp
c001eab4:	0f 84 a0 01 00 00    	je     c001ec5a <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eaba:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eabc:	75 a6                	jne    c001ea64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eabe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eac4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eac8:	01 d0                	add    eax,edx
c001eaca:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ead7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eada:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eae0:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eae7:	50                   	push   eax
c001eae8:	e8 23 fe ff ff       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c001eaed:	83 c4 10             	add    esp,0x10
c001eaf0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eaf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaf7:	89 f7                	mov    edi,esi
c001eaf9:	41                   	inc    ecx
c001eafa:	83 f9 10             	cmp    ecx,0x10
c001eafd:	0f 85 6b ff ff ff    	jne    c001ea6e <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb03:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb09:	85 c0                	test   eax,eax
c001eb0b:	74 5d                	je     c001eb6a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb0d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb13:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb19:	74 4f                	je     c001eb6a <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb1b:	83 ec 0c             	sub    esp,0xc
c001eb1e:	68 e4 26 03 c0       	push   0xc00326e4
c001eb23:	e8 ee a9 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb28:	c7 04 24 e4 26 03 c0 	mov    DWORD PTR [esp],0xc00326e4
c001eb2f:	89 c7                	mov    edi,eax
c001eb31:	e8 c4 a9 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb36:	83 c4 10             	add    esp,0x10
c001eb39:	84 c0                	test   al,al
c001eb3b:	0f 84 e4 00 00 00    	je     c001ec25 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb44:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb4a:	85 d2                	test   edx,edx
c001eb4c:	74 0f                	je     c001eb5d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb4e:	83 ec 0c             	sub    esp,0xc
c001eb51:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb53:	52                   	push   edx
c001eb54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb57:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb5a:	83 c4 10             	add    esp,0x10
c001eb5d:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001eb67:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001eb6a:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001eb70:	85 db                	test   ebx,ebx
c001eb72:	74 16                	je     c001eb8a <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001eb74:	83 ec 0c             	sub    esp,0xc
c001eb77:	53                   	push   ebx
c001eb78:	e8 65 32 ff ff       	call   c0011de2 <VAS::~VAS()>
c001eb7d:	58                   	pop    eax
c001eb7e:	5a                   	pop    edx
c001eb7f:	6a 14                	push   0x14
c001eb81:	53                   	push   ebx
c001eb82:	e8 c6 3e ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c001eb87:	83 c4 10             	add    esp,0x10
c001eb8a:	83 ec 0c             	sub    esp,0xc
c001eb8d:	68 00 cf 02 c0       	push   0xc002cf00
c001eb92:	e8 96 3f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001eb97:	83 c4 10             	add    esp,0x10
c001eb9a:	83 ec 08             	sub    esp,0x8
c001eb9d:	68 3f 07 00 00       	push   0x73f
c001eba2:	68 0e cf 02 c0       	push   0xc002cf0e
c001eba7:	e8 81 3f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ebac:	83 c4 2c             	add    esp,0x2c
c001ebaf:	5b                   	pop    ebx
c001ebb0:	5e                   	pop    esi
c001ebb1:	5f                   	pop    edi
c001ebb2:	5d                   	pop    ebp
c001ebb3:	c3                   	ret    
c001ebb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	68 0c d2 02 c0       	push   0xc002d20c
c001ebc0:	e8 d4 ba ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001ebc5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ebc8:	83 c4 10             	add    esp,0x10
c001ebcb:	89 f7                	mov    edi,esi
c001ebcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ebd1:	e9 8e fe ff ff       	jmp    c001ea64 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ebd6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ebdc:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ebe2:	75 1c                	jne    c001ec00 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ebe4:	83 ec 0c             	sub    esp,0xc
c001ebe7:	68 74 d2 02 c0       	push   0xc002d274
c001ebec:	e8 3c 3f ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ebf1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ebf8:	e8 4e fa ff ff       	call   c001e64b <blockTask(TaskState)>
c001ebfd:	83 c4 10             	add    esp,0x10
c001ec00:	83 ec 08             	sub    esp,0x8
c001ec03:	56                   	push   esi
c001ec04:	68 e4 26 03 c0       	push   0xc00326e4
c001ec09:	e8 be a9 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec0e:	c7 04 24 e4 26 03 c0 	mov    DWORD PTR [esp],0xc00326e4
c001ec15:	e8 fc a8 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec1a:	83 c4 10             	add    esp,0x10
c001ec1d:	39 f8                	cmp    eax,edi
c001ec1f:	0f 84 1c ff ff ff    	je     c001eb41 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec25:	83 ec 0c             	sub    esp,0xc
c001ec28:	68 e4 26 03 c0       	push   0xc00326e4
c001ec2d:	e8 e4 a8 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec32:	c7 04 24 e4 26 03 c0 	mov    DWORD PTR [esp],0xc00326e4
c001ec39:	89 c6                	mov    esi,eax
c001ec3b:	e8 de a8 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	39 f3                	cmp    ebx,esi
c001ec45:	74 b9                	je     c001ec00 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec47:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec4a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec4d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec53:	75 ab                	jne    c001ec00 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec55:	e9 7c ff ff ff       	jmp    c001ebd6 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ec5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec5e:	83 ec 0c             	sub    esp,0xc
c001ec61:	68 40 d2 02 c0       	push   0xc002d240
c001ec66:	e9 55 ff ff ff       	jmp    c001ebc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ec6b:	8b 36                	mov    esi,DWORD PTR [esi]
c001ec6d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec71:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ec74:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec77:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ec7d:	01 d7                	add    edi,edx
c001ec7f:	89 f8                	mov    eax,edi
c001ec81:	e9 44 fe ff ff       	jmp    c001eaca <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ec86 <cleanerTaskFunction(void*)>:
c001ec86:	53                   	push   ebx
c001ec87:	83 ec 08             	sub    esp,0x8
c001ec8a:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ec8f:	48                   	dec    eax
c001ec90:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ec95:	75 01                	jne    c001ec98 <cleanerTaskFunction(void*)+0x12>
c001ec97:	fb                   	sti    
c001ec98:	fa                   	cli    
c001ec99:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ec9e:	80 3d ac 26 03 c0 00 	cmp    BYTE PTR ds:0xc00326ac,0x0
c001eca5:	8d 50 01             	lea    edx,[eax+0x1]
c001eca8:	89 15 c8 26 03 c0    	mov    DWORD PTR ds:0xc00326c8,edx
c001ecae:	0f 84 b9 00 00 00    	je     c001ed6d <cleanerTaskFunction(void*)+0xe7>
c001ecb4:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ecb9:	85 c0                	test   eax,eax
c001ecbb:	75 01                	jne    c001ecbe <cleanerTaskFunction(void*)+0x38>
c001ecbd:	fb                   	sti    
c001ecbe:	c6 05 ac 26 03 c0 00 	mov    BYTE PTR ds:0xc00326ac,0x0
c001ecc5:	fa                   	cli    
c001ecc6:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001eccc:	ff 05 c4 26 03 c0    	inc    DWORD PTR ds:0xc00326c4
c001ecd2:	fa                   	cli    
c001ecd3:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001ecd9:	eb 3e                	jmp    c001ed19 <cleanerTaskFunction(void*)+0x93>
c001ecdb:	83 ec 0c             	sub    esp,0xc
c001ecde:	68 cc 26 03 c0       	push   0xc00326cc
c001ece3:	e8 2e a8 00 00       	call   c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ece8:	c7 04 24 cc 26 03 c0 	mov    DWORD PTR [esp],0xc00326cc
c001ecef:	89 c3                	mov    ebx,eax
c001ecf1:	e8 28 a8 00 00       	call   c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ecf6:	c7 04 24 24 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf24
c001ecfd:	e8 2b 3e ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ed02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed05:	e8 b3 fc ff ff       	call   c001e9bd <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed0a:	c7 04 24 3d cf 02 c0 	mov    DWORD PTR [esp],0xc002cf3d
c001ed11:	e8 17 3e ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ed16:	83 c4 10             	add    esp,0x10
c001ed19:	83 ec 0c             	sub    esp,0xc
c001ed1c:	68 cc 26 03 c0       	push   0xc00326cc
c001ed21:	e8 d4 a7 00 00       	call   c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed26:	83 c4 10             	add    esp,0x10
c001ed29:	84 c0                	test   al,al
c001ed2b:	74 ae                	je     c001ecdb <cleanerTaskFunction(void*)+0x55>
c001ed2d:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ed32:	48                   	dec    eax
c001ed33:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ed38:	75 01                	jne    c001ed3b <cleanerTaskFunction(void*)+0xb5>
c001ed3a:	fb                   	sti    
c001ed3b:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001ed40:	48                   	dec    eax
c001ed41:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001ed46:	0f 85 3e ff ff ff    	jne    c001ec8a <cleanerTaskFunction(void*)+0x4>
c001ed4c:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c001ed51:	85 c0                	test   eax,eax
c001ed53:	0f 84 31 ff ff ff    	je     c001ec8a <cleanerTaskFunction(void*)+0x4>
c001ed59:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001ed63:	e8 e4 f6 ff ff       	call   c001e44c <schedule()>
c001ed68:	e9 1d ff ff ff       	jmp    c001ec8a <cleanerTaskFunction(void*)+0x4>
c001ed6d:	83 ec 0c             	sub    esp,0xc
c001ed70:	6a 02                	push   0x2
c001ed72:	e8 86 f8 ff ff       	call   c001e5fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	e9 3f ff ff ff       	jmp    c001ecbe <cleanerTaskFunction(void*)+0x38>

c001ed7f <terminateTask(int)>:
c001ed7f:	83 ec 14             	sub    esp,0x14
c001ed82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ed87:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ed8a:	83 c0 0c             	add    eax,0xc
c001ed8d:	50                   	push   eax
c001ed8e:	68 9c d2 02 c0       	push   0xc002d29c
c001ed93:	e8 95 3d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ed98:	fa                   	cli    
c001ed99:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001ed9f:	ff 05 c4 26 03 c0    	inc    DWORD PTR ds:0xc00326c4
c001eda5:	fa                   	cli    
c001eda6:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001edac:	c7 04 24 50 cf 02 c0 	mov    DWORD PTR [esp],0xc002cf50
c001edb3:	e8 75 3d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001edb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001edbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edc1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001edc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edc9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001edcc:	5a                   	pop    edx
c001edcd:	59                   	pop    ecx
c001edce:	50                   	push   eax
c001edcf:	68 cc 26 03 c0       	push   0xc00326cc
c001edd4:	e8 f3 a7 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001edd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edde:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ede5:	c7 04 24 6a cf 02 c0 	mov    DWORD PTR [esp],0xc002cf6a
c001edec:	e8 3c 3d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001edf1:	83 c4 10             	add    esp,0x10
c001edf4:	a1 a8 26 03 c0       	mov    eax,ds:0xc00326a8
c001edf9:	85 c0                	test   eax,eax
c001edfb:	0f 84 8d 00 00 00    	je     c001ee8e <terminateTask(int)+0x10f>
c001ee01:	83 ec 0c             	sub    esp,0xc
c001ee04:	68 84 cf 02 c0       	push   0xc002cf84
c001ee09:	e8 1f 3d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ee0e:	58                   	pop    eax
c001ee0f:	c6 05 ac 26 03 c0 01 	mov    BYTE PTR ds:0xc00326ac,0x1
c001ee16:	ff 35 a8 26 03 c0    	push   DWORD PTR ds:0xc00326a8
c001ee1c:	e8 ef fa ff ff       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c001ee21:	c7 04 24 9e cf 02 c0 	mov    DWORD PTR [esp],0xc002cf9e
c001ee28:	e8 00 3d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ee2d:	83 c4 10             	add    esp,0x10
c001ee30:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ee35:	48                   	dec    eax
c001ee36:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ee3b:	75 01                	jne    c001ee3e <terminateTask(int)+0xbf>
c001ee3d:	fb                   	sti    
c001ee3e:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001ee43:	48                   	dec    eax
c001ee44:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001ee49:	75 09                	jne    c001ee54 <terminateTask(int)+0xd5>
c001ee4b:	83 3d c0 26 03 c0 00 	cmp    DWORD PTR ds:0xc00326c0,0x0
c001ee52:	75 4c                	jne    c001eea0 <terminateTask(int)+0x121>
c001ee54:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ee59:	48                   	dec    eax
c001ee5a:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ee5f:	75 01                	jne    c001ee62 <terminateTask(int)+0xe3>
c001ee61:	fb                   	sti    
c001ee62:	83 ec 0c             	sub    esp,0xc
c001ee65:	68 d6 cf 02 c0       	push   0xc002cfd6
c001ee6a:	e8 be 3c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ee6f:	83 c4 10             	add    esp,0x10
c001ee72:	fa                   	cli    
c001ee73:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001ee79:	e8 ce f5 ff ff       	call   c001e44c <schedule()>
c001ee7e:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ee83:	48                   	dec    eax
c001ee84:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ee89:	75 e7                	jne    c001ee72 <terminateTask(int)+0xf3>
c001ee8b:	fb                   	sti    
c001ee8c:	eb e4                	jmp    c001ee72 <terminateTask(int)+0xf3>
c001ee8e:	83 ec 0c             	sub    esp,0xc
c001ee91:	68 b8 cf 02 c0       	push   0xc002cfb8
c001ee96:	e8 92 3c ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001ee9b:	83 c4 10             	add    esp,0x10
c001ee9e:	eb 90                	jmp    c001ee30 <terminateTask(int)+0xb1>
c001eea0:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001eeaa:	e8 9d f5 ff ff       	call   c001e44c <schedule()>
c001eeaf:	eb a3                	jmp    c001ee54 <terminateTask(int)+0xd5>

c001eeb1 <Thr::terminateFromIRQ(int)>:
c001eeb1:	83 ec 18             	sub    esp,0x18
c001eeb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb8:	e8 c2 fe ff ff       	call   c001ed7f <terminateTask(int)>
c001eebd:	90                   	nop

c001eebe <Semaphore::release()>:
c001eebe:	83 ec 0c             	sub    esp,0xc
c001eec1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eec5:	fa                   	cli    
c001eec6:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001eecb:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001eed1:	8d 48 01             	lea    ecx,[eax+0x1]
c001eed4:	89 0d c4 26 03 c0    	mov    DWORD PTR ds:0xc00326c4,ecx
c001eeda:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eedd:	85 c9                	test   ecx,ecx
c001eedf:	74 3c                	je     c001ef1d <Semaphore::release()+0x5f>
c001eee1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eeea:	51                   	push   ecx
c001eeeb:	e8 20 fa ff ff       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c001eef0:	a1 c4 26 03 c0       	mov    eax,ds:0xc00326c4
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	48                   	dec    eax
c001eef9:	a3 c4 26 03 c0       	mov    ds:0xc00326c4,eax
c001eefe:	85 c0                	test   eax,eax
c001ef00:	75 09                	jne    c001ef0b <Semaphore::release()+0x4d>
c001ef02:	a1 c0 26 03 c0       	mov    eax,ds:0xc00326c0
c001ef07:	85 c0                	test   eax,eax
c001ef09:	75 17                	jne    c001ef22 <Semaphore::release()+0x64>
c001ef0b:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001ef10:	48                   	dec    eax
c001ef11:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001ef16:	75 01                	jne    c001ef19 <Semaphore::release()+0x5b>
c001ef18:	fb                   	sti    
c001ef19:	83 c4 0c             	add    esp,0xc
c001ef1c:	c3                   	ret    
c001ef1d:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef20:	eb d7                	jmp    c001eef9 <Semaphore::release()+0x3b>
c001ef22:	c7 05 c0 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00326c0,0x0
c001ef2c:	e8 1b f5 ff ff       	call   c001e44c <schedule()>
c001ef31:	eb d8                	jmp    c001ef0b <Semaphore::release()+0x4d>

c001ef33 <__static_initialization_and_destruction_0(int, int)>:
c001ef33:	83 ec 0c             	sub    esp,0xc
c001ef36:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef3b:	0f 85 88 00 00 00    	jne    c001efc9 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef41:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef49:	75 7e                	jne    c001efc9 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef4b:	83 ec 0c             	sub    esp,0xc
c001ef4e:	68 e4 26 03 c0       	push   0xc00326e4
c001ef53:	e8 04 a9 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef58:	83 c4 10             	add    esp,0x10
c001ef5b:	83 ec 04             	sub    esp,0x4
c001ef5e:	68 ac e0 02 c0       	push   0xc002e0ac
c001ef63:	68 e4 26 03 c0       	push   0xc00326e4
c001ef68:	68 10 98 02 c0       	push   0xc0029810
c001ef6d:	e8 55 3a ff ff       	call   c00129c7 <__cxa_atexit>
c001ef72:	83 c4 10             	add    esp,0x10
c001ef75:	83 ec 0c             	sub    esp,0xc
c001ef78:	68 d8 26 03 c0       	push   0xc00326d8
c001ef7d:	e8 da a8 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef82:	83 c4 10             	add    esp,0x10
c001ef85:	83 ec 04             	sub    esp,0x4
c001ef88:	68 ac e0 02 c0       	push   0xc002e0ac
c001ef8d:	68 d8 26 03 c0       	push   0xc00326d8
c001ef92:	68 10 98 02 c0       	push   0xc0029810
c001ef97:	e8 2b 3a ff ff       	call   c00129c7 <__cxa_atexit>
c001ef9c:	83 c4 10             	add    esp,0x10
c001ef9f:	83 ec 0c             	sub    esp,0xc
c001efa2:	68 cc 26 03 c0       	push   0xc00326cc
c001efa7:	e8 b0 a8 00 00       	call   c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efac:	83 c4 10             	add    esp,0x10
c001efaf:	83 ec 04             	sub    esp,0x4
c001efb2:	68 ac e0 02 c0       	push   0xc002e0ac
c001efb7:	68 cc 26 03 c0       	push   0xc00326cc
c001efbc:	68 10 98 02 c0       	push   0xc0029810
c001efc1:	e8 01 3a ff ff       	call   c00129c7 <__cxa_atexit>
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	90                   	nop
c001efca:	83 c4 0c             	add    esp,0xc
c001efcd:	c3                   	ret    

c001efce <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001efce:	83 ec 0c             	sub    esp,0xc
c001efd1:	83 ec 08             	sub    esp,0x8
c001efd4:	68 ff ff 00 00       	push   0xffff
c001efd9:	6a 01                	push   0x1
c001efdb:	e8 53 ff ff ff       	call   c001ef33 <__static_initialization_and_destruction_0(int, int)>
c001efe0:	83 c4 10             	add    esp,0x10
c001efe3:	83 c4 0c             	add    esp,0xc
c001efe6:	c3                   	ret    

c001efe7 <Vm::inbv(unsigned short)>:
c001efe7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001efeb:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eff0:	75 06                	jne    c001eff8 <Vm::inbv(unsigned short)+0x11>
c001eff2:	a0 2c 27 03 c0       	mov    al,ds:0xc003272c
c001eff7:	c3                   	ret    
c001eff8:	ec                   	in     al,dx
c001eff9:	c3                   	ret    

c001effa <Vm::outbv(unsigned short, unsigned char)>:
c001effa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001effe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f002:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f007:	75 25                	jne    c001f02e <Vm::outbv(unsigned short, unsigned char)+0x34>
c001f009:	8b 0d 2c 27 03 c0    	mov    ecx,DWORD PTR ds:0xc003272c
c001f00f:	8d 51 01             	lea    edx,[ecx+0x1]
c001f012:	88 81 40 27 03 c0    	mov    BYTE PTR [ecx-0x3ffcd8c0],al
c001f018:	89 15 2c 27 03 c0    	mov    DWORD PTR ds:0xc003272c,edx
c001f01e:	83 fa 20             	cmp    edx,0x20
c001f021:	75 0c                	jne    c001f02f <Vm::outbv(unsigned short, unsigned char)+0x35>
c001f023:	c7 05 2c 27 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003272c,0x1f
c001f02d:	c3                   	ret    
c001f02e:	ee                   	out    dx,al
c001f02f:	c3                   	ret    

c001f030 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f030:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f035:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f03a:	c1 e0 04             	shl    eax,0x4
c001f03d:	01 d0                	add    eax,edx
c001f03f:	c3                   	ret    

c001f040 <Vm::getSegment(unsigned int)>:
c001f040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f044:	c1 e8 10             	shr    eax,0x10
c001f047:	c3                   	ret    

c001f048 <Vm::getOffset(unsigned int)>:
c001f048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f04c:	c3                   	ret    

c001f04d <Vm::mainloop2()>:
c001f04d:	83 ec 18             	sub    esp,0x18
c001f050:	fa                   	cli    
c001f051:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001f057:	6a 02                	push   0x2
c001f059:	c6 05 25 27 03 c0 01 	mov    BYTE PTR ds:0xc0032725,0x1
c001f060:	e8 98 f5 ff ff       	call   c001e5fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f065:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f06a:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f06e:	52                   	push   edx
c001f06f:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f073:	52                   	push   edx
c001f074:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f078:	52                   	push   edx
c001f079:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f07d:	50                   	push   eax
c001f07e:	e8 77 12 fe ff       	call   c00002fa <goToVM86>
c001f083:	83 c4 2c             	add    esp,0x2c
c001f086:	c3                   	ret    

c001f087 <Vm::mainVm8086Loop(void*)>:
c001f087:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001f08c:	48                   	dec    eax
c001f08d:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001f092:	75 01                	jne    c001f095 <Vm::mainVm8086Loop(void*)+0xe>
c001f094:	fb                   	sti    
c001f095:	eb b6                	jmp    c001f04d <Vm::mainloop2()>

c001f097 <Vm::mainloop3(unsigned long)>:
c001f097:	83 ec 18             	sub    esp,0x18
c001f09a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f09e:	fa                   	cli    
c001f09f:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001f0a5:	6a 02                	push   0x2
c001f0a7:	c6 05 24 27 03 c0 01 	mov    BYTE PTR ds:0xc0032724,0x1
c001f0ae:	a3 20 27 03 c0       	mov    ds:0xc0032720,eax
c001f0b3:	e8 45 f5 ff ff       	call   c001e5fd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0b8:	83 c4 1c             	add    esp,0x1c
c001f0bb:	eb 90                	jmp    c001f04d <Vm::mainloop2()>

c001f0bd <Vm::initialise8086()>:
c001f0bd:	83 ec 0c             	sub    esp,0xc
c001f0c0:	68 80 00 00 00       	push   0x80
c001f0c5:	6a 00                	push   0x0
c001f0c7:	68 87 f0 01 c0       	push   0xc001f087
c001f0cc:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001f0d2:	e8 31 f1 ff ff       	call   c001e208 <Process::createThread(void (*)(void*), void*, int)>
c001f0d7:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f0de:	a3 28 27 03 c0       	mov    ds:0xc0032728,eax
c001f0e3:	68 00 01 00 00       	push   0x100
c001f0e8:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c001f0ed:	6a 00                	push   0x0
c001f0ef:	6a 00                	push   0x0
c001f0f1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f0f7:	e8 58 31 ff ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f0fc:	83 c4 2c             	add    esp,0x2c
c001f0ff:	c3                   	ret    

c001f100 <Vm::finish8086()>:
c001f100:	53                   	push   ebx
c001f101:	83 ec 08             	sub    esp,0x8
c001f104:	fa                   	cli    
c001f105:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001f10b:	80 3d 24 27 03 c0 00 	cmp    BYTE PTR ds:0xc0032724,0x0
c001f112:	75 15                	jne    c001f129 <Vm::finish8086()+0x29>
c001f114:	e8 33 f3 ff ff       	call   c001e44c <schedule()>
c001f119:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001f11e:	48                   	dec    eax
c001f11f:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001f124:	75 de                	jne    c001f104 <Vm::finish8086()+0x4>
c001f126:	fb                   	sti    
c001f127:	eb db                	jmp    c001f104 <Vm::finish8086()+0x4>
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	8b 1d 20 27 03 c0    	mov    ebx,DWORD PTR ds:0xc0032720
c001f132:	ff 35 28 27 03 c0    	push   DWORD PTR ds:0xc0032728
c001f138:	c6 05 24 27 03 c0 00 	mov    BYTE PTR ds:0xc0032724,0x0
c001f13f:	e8 cc f7 ff ff       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c001f144:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001f149:	83 c4 10             	add    esp,0x10
c001f14c:	8d 50 ff             	lea    edx,[eax-0x1]
c001f14f:	89 15 c8 26 03 c0    	mov    DWORD PTR ds:0xc00326c8,edx
c001f155:	85 d2                	test   edx,edx
c001f157:	75 01                	jne    c001f15a <Vm::finish8086()+0x5a>
c001f159:	fb                   	sti    
c001f15a:	89 d8                	mov    eax,ebx
c001f15c:	83 c4 08             	add    esp,0x8
c001f15f:	5b                   	pop    ebx
c001f160:	c3                   	ret    

c001f161 <Vm::getOutput8086(unsigned char*)>:
c001f161:	57                   	push   edi
c001f162:	8b 0d 2c 27 03 c0    	mov    ecx,DWORD PTR ds:0xc003272c
c001f168:	56                   	push   esi
c001f169:	be 40 27 03 c0       	mov    esi,0xc0032740
c001f16e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f172:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f174:	a1 2c 27 03 c0       	mov    eax,ds:0xc003272c
c001f179:	5e                   	pop    esi
c001f17a:	c7 05 2c 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003272c,0x0
c001f184:	5f                   	pop    edi
c001f185:	c3                   	ret    

c001f186 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f186:	55                   	push   ebp
c001f187:	57                   	push   edi
c001f188:	56                   	push   esi
c001f189:	53                   	push   ebx
c001f18a:	83 ec 2c             	sub    esp,0x2c
c001f18d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f191:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f195:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f199:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f19d:	fa                   	cli    
c001f19e:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c001f1a4:	0f b6 35 25 27 03 c0 	movzx  esi,BYTE PTR ds:0xc0032725
c001f1ab:	89 f0                	mov    eax,esi
c001f1ad:	84 c0                	test   al,al
c001f1af:	75 1d                	jne    c001f1ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f1b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1b5:	e8 92 f2 ff ff       	call   c001e44c <schedule()>
c001f1ba:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001f1bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f1c3:	48                   	dec    eax
c001f1c4:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001f1c9:	75 d2                	jne    c001f19d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f1cb:	fb                   	sti    
c001f1cc:	eb cf                	jmp    c001f19d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f1ce:	a1 28 27 03 c0       	mov    eax,ds:0xc0032728
c001f1d3:	c7 05 2c 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003272c,0x0
c001f1dd:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f1e1:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f1e5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f1e9:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f1ed:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f1f1:	50                   	push   eax
c001f1f2:	6a 20                	push   0x20
c001f1f4:	6a 00                	push   0x0
c001f1f6:	68 40 27 03 c0       	push   0xc0032740
c001f1fb:	e8 50 15 fe ff       	call   c0000750 <memset>
c001f200:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f207:	e8 80 06 ff ff       	call   c000f88c <malloc>
c001f20c:	83 c4 0c             	add    esp,0xc
c001f20f:	89 c3                	mov    ebx,eax
c001f211:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c001f217:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f21b:	50                   	push   eax
c001f21c:	e8 6b 3e ff ff       	call   c001308c <File::File(char const*, Process*)>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	85 db                	test   ebx,ebx
c001f226:	75 0a                	jne    c001f232 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f228:	83 ec 0c             	sub    esp,0xc
c001f22b:	68 bb d2 02 c0       	push   0xc002d2bb
c001f230:	eb 3e                	jmp    c001f270 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f232:	50                   	push   eax
c001f233:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f237:	50                   	push   eax
c001f238:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f23c:	50                   	push   eax
c001f23d:	53                   	push   ebx
c001f23e:	e8 59 41 ff ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c001f243:	83 c4 10             	add    esp,0x10
c001f246:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f24b:	74 0a                	je     c001f257 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f24d:	83 ec 0c             	sub    esp,0xc
c001f250:	68 cf d2 02 c0       	push   0xc002d2cf
c001f255:	eb 19                	jmp    c001f270 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f257:	51                   	push   ecx
c001f258:	51                   	push   ecx
c001f259:	6a 01                	push   0x1
c001f25b:	53                   	push   ebx
c001f25c:	e8 8f 3e ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c001f261:	83 c4 10             	add    esp,0x10
c001f264:	85 c0                	test   eax,eax
c001f266:	74 24                	je     c001f28c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	68 e8 d2 02 c0       	push   0xc002d2e8
c001f270:	e8 24 b4 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001f275:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001f27a:	83 c4 10             	add    esp,0x10
c001f27d:	48                   	dec    eax
c001f27e:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001f283:	85 c0                	test   eax,eax
c001f285:	75 01                	jne    c001f288 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f287:	fb                   	sti    
c001f288:	31 f6                	xor    esi,esi
c001f28a:	eb 58                	jmp    c001f2e4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f28c:	0f b7 ed             	movzx  ebp,bp
c001f28f:	50                   	push   eax
c001f290:	0f b7 ff             	movzx  edi,di
c001f293:	50                   	push   eax
c001f294:	55                   	push   ebp
c001f295:	57                   	push   edi
c001f296:	e8 95 fd ff ff       	call   c001f030 <Vm::realToLinear(unsigned short, unsigned short)>
c001f29b:	5a                   	pop    edx
c001f29c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f29e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f2a2:	51                   	push   ecx
c001f2a3:	50                   	push   eax
c001f2a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f2a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f2ac:	53                   	push   ebx
c001f2ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f2b0:	83 c4 14             	add    esp,0x14
c001f2b3:	53                   	push   ebx
c001f2b4:	e8 95 3e ff ff       	call   c001314e <File::close()>
c001f2b9:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c001f2be:	83 c4 10             	add    esp,0x10
c001f2c1:	48                   	dec    eax
c001f2c2:	c6 05 25 27 03 c0 00 	mov    BYTE PTR ds:0xc0032725,0x0
c001f2c9:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c001f2ce:	85 c0                	test   eax,eax
c001f2d0:	75 01                	jne    c001f2d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f2d2:	fb                   	sti    
c001f2d3:	83 ec 0c             	sub    esp,0xc
c001f2d6:	ff 35 28 27 03 c0    	push   DWORD PTR ds:0xc0032728
c001f2dc:	e8 2f f6 ff ff       	call   c001e910 <unblockTask(ThreadControlBlock*)>
c001f2e1:	83 c4 10             	add    esp,0x10
c001f2e4:	83 c4 2c             	add    esp,0x2c
c001f2e7:	89 f0                	mov    eax,esi
c001f2e9:	5b                   	pop    ebx
c001f2ea:	5e                   	pop    esi
c001f2eb:	5f                   	pop    edi
c001f2ec:	5d                   	pop    ebp
c001f2ed:	c3                   	ret    

c001f2ee <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f2ee:	57                   	push   edi
c001f2ef:	56                   	push   esi
c001f2f0:	53                   	push   ebx
c001f2f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f2f9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2fd:	83 e8 06             	sub    eax,0x6
c001f300:	0f b7 c0             	movzx  eax,ax
c001f303:	50                   	push   eax
c001f304:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f309:	50                   	push   eax
c001f30a:	e8 21 fd ff ff       	call   c001f030 <Vm::realToLinear(unsigned short, unsigned short)>
c001f30f:	5a                   	pop    edx
c001f310:	5e                   	pop    esi
c001f311:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f314:	8d 56 fa             	lea    edx,[esi-0x6]
c001f317:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f31d:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f320:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f323:	83 c2 02             	add    edx,0x2
c001f326:	66 89 10             	mov    WORD PTR [eax],dx
c001f329:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f32c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f330:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f333:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f337:	89 d6                	mov    esi,edx
c001f339:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f33f:	66 81 e6 ff fd       	and    si,0xfdff
c001f344:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f348:	74 07                	je     c001f351 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f34a:	89 d6                	mov    esi,edx
c001f34c:	66 81 ce 00 02       	or     si,0x200
c001f351:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f35a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f35e:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f366:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f369:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f371:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f374:	5b                   	pop    ebx
c001f375:	5e                   	pop    esi
c001f376:	5f                   	pop    edi
c001f377:	c3                   	ret    

c001f378 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f378:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f37d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f382:	c1 e0 04             	shl    eax,0x4
c001f385:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f388:	c3                   	ret    

c001f389 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f389:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f38e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f393:	c1 e0 04             	shl    eax,0x4
c001f396:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f39a:	c3                   	ret    

c001f39b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f39b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3a5:	c1 e0 04             	shl    eax,0x4
c001f3a8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f3ab:	c3                   	ret    

c001f3ac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f3ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3b6:	c1 e0 04             	shl    eax,0x4
c001f3b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3bd:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f3c0:	c3                   	ret    

c001f3c1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f3c1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3c6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3cb:	c1 e0 04             	shl    eax,0x4
c001f3ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3d2:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f3d6:	c3                   	ret    

c001f3d7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f3d7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3dc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3e1:	c1 e0 04             	shl    eax,0x4
c001f3e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f3e8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f3eb:	c3                   	ret    

c001f3ec <Vm::faultHandler(regs*)>:
c001f3ec:	55                   	push   ebp
c001f3ed:	57                   	push   edi
c001f3ee:	56                   	push   esi
c001f3ef:	53                   	push   ebx
c001f3f0:	83 ec 1c             	sub    esp,0x1c
c001f3f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f3f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f3fa:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f3fe:	0f b7 f8             	movzx  edi,ax
c001f401:	52                   	push   edx
c001f402:	0f b7 c0             	movzx  eax,ax
c001f405:	50                   	push   eax
c001f406:	e8 25 fc ff ff       	call   c001f030 <Vm::realToLinear(unsigned short, unsigned short)>
c001f40b:	5a                   	pop    edx
c001f40c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f40f:	59                   	pop    ecx
c001f410:	89 c1                	mov    ecx,eax
c001f412:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f415:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f419:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f41e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f422:	0f b7 c5             	movzx  eax,bp
c001f425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f429:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f42d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f431:	e8 fa fb ff ff       	call   c001f030 <Vm::realToLinear(unsigned short, unsigned short)>
c001f436:	5e                   	pop    esi
c001f437:	be 06 00 00 00       	mov    esi,0x6
c001f43c:	5a                   	pop    edx
c001f43d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f442:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f447:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f44a:	80 fa 9d             	cmp    dl,0x9d
c001f44d:	0f 84 2c 02 00 00    	je     c001f67f <Vm::faultHandler(regs*)+0x293>
c001f453:	0f 87 91 00 00 00    	ja     c001f4ea <Vm::faultHandler(regs*)+0xfe>
c001f459:	80 fa 66             	cmp    dl,0x66
c001f45c:	0f 84 98 01 00 00    	je     c001f5fa <Vm::faultHandler(regs*)+0x20e>
c001f462:	77 47                	ja     c001f4ab <Vm::faultHandler(regs*)+0xbf>
c001f464:	80 fa 36             	cmp    dl,0x36
c001f467:	0f 84 80 01 00 00    	je     c001f5ed <Vm::faultHandler(regs*)+0x201>
c001f46d:	77 1a                	ja     c001f489 <Vm::faultHandler(regs*)+0x9d>
c001f46f:	80 fa 26             	cmp    dl,0x26
c001f472:	0f 84 4e 01 00 00    	je     c001f5c6 <Vm::faultHandler(regs*)+0x1da>
c001f478:	80 fa 2e             	cmp    dl,0x2e
c001f47b:	0f 85 e2 05 00 00    	jne    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f481:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f484:	31 f6                	xor    esi,esi
c001f486:	41                   	inc    ecx
c001f487:	eb be                	jmp    c001f447 <Vm::faultHandler(regs*)+0x5b>
c001f489:	80 fa 64             	cmp    dl,0x64
c001f48c:	0f 84 41 01 00 00    	je     c001f5d3 <Vm::faultHandler(regs*)+0x1e7>
c001f492:	0f 87 48 01 00 00    	ja     c001f5e0 <Vm::faultHandler(regs*)+0x1f4>
c001f498:	80 fa 3e             	cmp    dl,0x3e
c001f49b:	0f 85 c2 05 00 00    	jne    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f4a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f4a4:	be 01 00 00 00       	mov    esi,0x1
c001f4a9:	eb db                	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f4ab:	80 fa 6d             	cmp    dl,0x6d
c001f4ae:	0f 84 ec 02 00 00    	je     c001f7a0 <Vm::faultHandler(regs*)+0x3b4>
c001f4b4:	77 17                	ja     c001f4cd <Vm::faultHandler(regs*)+0xe1>
c001f4b6:	80 fa 67             	cmp    dl,0x67
c001f4b9:	0f 84 48 01 00 00    	je     c001f607 <Vm::faultHandler(regs*)+0x21b>
c001f4bf:	80 fa 6c             	cmp    dl,0x6c
c001f4c2:	0f 84 69 02 00 00    	je     c001f731 <Vm::faultHandler(regs*)+0x345>
c001f4c8:	e9 96 05 00 00       	jmp    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f4cd:	80 fa 6f             	cmp    dl,0x6f
c001f4d0:	0f 84 f4 03 00 00    	je     c001f8ca <Vm::faultHandler(regs*)+0x4de>
c001f4d6:	0f 82 59 03 00 00    	jb     c001f835 <Vm::faultHandler(regs*)+0x449>
c001f4dc:	80 fa 9c             	cmp    dl,0x9c
c001f4df:	0f 84 2f 01 00 00    	je     c001f614 <Vm::faultHandler(regs*)+0x228>
c001f4e5:	e9 79 05 00 00       	jmp    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f4ea:	80 fa ec             	cmp    dl,0xec
c001f4ed:	0f 84 14 05 00 00    	je     c001fa07 <Vm::faultHandler(regs*)+0x61b>
c001f4f3:	77 7b                	ja     c001f570 <Vm::faultHandler(regs*)+0x184>
c001f4f5:	80 fa e4             	cmp    dl,0xe4
c001f4f8:	0f 84 93 04 00 00    	je     c001f991 <Vm::faultHandler(regs*)+0x5a5>
c001f4fe:	77 53                	ja     c001f553 <Vm::faultHandler(regs*)+0x167>
c001f500:	80 fa cd             	cmp    dl,0xcd
c001f503:	0f 84 d9 01 00 00    	je     c001f6e2 <Vm::faultHandler(regs*)+0x2f6>
c001f509:	80 fa cf             	cmp    dl,0xcf
c001f50c:	0f 85 51 05 00 00    	jne    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f512:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f515:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f518:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f51c:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f51f:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f523:	81 ca 00 02 02 00    	or     edx,0x20200
c001f529:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f52c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f530:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f536:	66 c1 e8 09          	shr    ax,0x9
c001f53a:	83 e0 01             	and    eax,0x1
c001f53d:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f540:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f543:	83 c0 06             	add    eax,0x6
c001f546:	25 ff ff 00 00       	and    eax,0xffff
c001f54b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f54e:	e9 0c 05 00 00       	jmp    c001fa5f <Vm::faultHandler(regs*)+0x673>
c001f553:	80 fa e6             	cmp    dl,0xe6
c001f556:	0f 84 7f 04 00 00    	je     c001f9db <Vm::faultHandler(regs*)+0x5ef>
c001f55c:	0f 82 4b 04 00 00    	jb     c001f9ad <Vm::faultHandler(regs*)+0x5c1>
c001f562:	80 fa e7             	cmp    dl,0xe7
c001f565:	0f 84 87 04 00 00    	je     c001f9f2 <Vm::faultHandler(regs*)+0x606>
c001f56b:	e9 f3 04 00 00       	jmp    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f570:	80 fa ef             	cmp    dl,0xef
c001f573:	0f 84 d1 04 00 00    	je     c001fa4a <Vm::faultHandler(regs*)+0x65e>
c001f579:	77 28                	ja     c001f5a3 <Vm::faultHandler(regs*)+0x1b7>
c001f57b:	80 fa ed             	cmp    dl,0xed
c001f57e:	0f 84 9f 04 00 00    	je     c001fa23 <Vm::faultHandler(regs*)+0x637>
c001f584:	80 fa ee             	cmp    dl,0xee
c001f587:	0f 85 d6 04 00 00    	jne    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f58d:	50                   	push   eax
c001f58e:	50                   	push   eax
c001f58f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f593:	50                   	push   eax
c001f594:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f598:	50                   	push   eax
c001f599:	e8 5c fa ff ff       	call   c001effa <Vm::outbv(unsigned short, unsigned char)>
c001f59e:	e9 9f 04 00 00       	jmp    c001fa42 <Vm::faultHandler(regs*)+0x656>
c001f5a3:	80 fa fa             	cmp    dl,0xfa
c001f5a6:	0f 84 69 01 00 00    	je     c001f715 <Vm::faultHandler(regs*)+0x329>
c001f5ac:	80 fa fb             	cmp    dl,0xfb
c001f5af:	0f 84 6e 01 00 00    	je     c001f723 <Vm::faultHandler(regs*)+0x337>
c001f5b5:	80 fa f3             	cmp    dl,0xf3
c001f5b8:	0f 85 a5 04 00 00    	jne    c001fa63 <Vm::faultHandler(regs*)+0x677>
c001f5be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5c1:	e9 c0 fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f5c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5c9:	be 02 00 00 00       	mov    esi,0x2
c001f5ce:	e9 b3 fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f5d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5d6:	be 03 00 00 00       	mov    esi,0x3
c001f5db:	e9 a6 fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f5e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5e3:	be 04 00 00 00       	mov    esi,0x4
c001f5e8:	e9 99 fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f5ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5f0:	be 05 00 00 00       	mov    esi,0x5
c001f5f5:	e9 8c fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f5fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f5fd:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f602:	e9 7f fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f607:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f60a:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f60f:	e9 72 fe ff ff       	jmp    c001f486 <Vm::faultHandler(regs*)+0x9a>
c001f614:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f617:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f61b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f620:	74 30                	je     c001f652 <Vm::faultHandler(regs*)+0x266>
c001f622:	83 e9 04             	sub    ecx,0x4
c001f625:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f62b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f631:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f634:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f637:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f63d:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f641:	0f 84 15 04 00 00    	je     c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f647:	80 ce 02             	or     dh,0x2
c001f64a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f64d:	e9 0a 04 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f652:	83 e9 02             	sub    ecx,0x2
c001f655:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f65b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f65e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f662:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f668:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f66c:	74 05                	je     c001f673 <Vm::faultHandler(regs*)+0x287>
c001f66e:	80 ce 02             	or     dh,0x2
c001f671:	eb 03                	jmp    c001f676 <Vm::faultHandler(regs*)+0x28a>
c001f673:	80 e6 fd             	and    dh,0xfd
c001f676:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f67a:	e9 dd 03 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f67f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f684:	74 2a                	je     c001f6b0 <Vm::faultHandler(regs*)+0x2c4>
c001f686:	8b 10                	mov    edx,DWORD PTR [eax]
c001f688:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f68e:	81 ca 00 02 02 00    	or     edx,0x20200
c001f694:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f697:	8b 00                	mov    eax,DWORD PTR [eax]
c001f699:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f69f:	c1 e8 09             	shr    eax,0x9
c001f6a2:	83 e0 01             	and    eax,0x1
c001f6a5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f6a8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f6ab:	83 c0 04             	add    eax,0x4
c001f6ae:	eb 25                	jmp    c001f6d5 <Vm::faultHandler(regs*)+0x2e9>
c001f6b0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f6b3:	81 ca 00 02 02 00    	or     edx,0x20200
c001f6b9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f6bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f6bf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f6c5:	66 c1 e8 09          	shr    ax,0x9
c001f6c9:	83 e0 01             	and    eax,0x1
c001f6cc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f6cf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f6d2:	83 c0 02             	add    eax,0x2
c001f6d5:	25 ff ff 00 00       	and    eax,0xffff
c001f6da:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f6dd:	e9 7a 03 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f6e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6e6:	3c ee                	cmp    al,0xee
c001f6e8:	75 10                	jne    c001f6fa <Vm::faultHandler(regs*)+0x30e>
c001f6ea:	83 ec 0c             	sub    esp,0xc
c001f6ed:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f6f0:	e8 a2 f9 ff ff       	call   c001f097 <Vm::mainloop3(unsigned long)>
c001f6f5:	e9 4b 03 00 00       	jmp    c001fa45 <Vm::faultHandler(regs*)+0x659>
c001f6fa:	83 ec 0c             	sub    esp,0xc
c001f6fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f701:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f705:	51                   	push   ecx
c001f706:	50                   	push   eax
c001f707:	53                   	push   ebx
c001f708:	e8 e1 fb ff ff       	call   c001f2ee <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f70d:	83 c4 20             	add    esp,0x20
c001f710:	e9 4a 03 00 00       	jmp    c001fa5f <Vm::faultHandler(regs*)+0x673>
c001f715:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f71a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f71e:	e9 39 03 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f723:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f728:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f72c:	e9 2b 03 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f731:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f734:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f739:	74 2b                	je     c001f766 <Vm::faultHandler(regs*)+0x37a>
c001f73b:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f742:	76 22                	jbe    c001f766 <Vm::faultHandler(regs*)+0x37a>
c001f744:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f748:	50                   	push   eax
c001f749:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f74d:	50                   	push   eax
c001f74e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f752:	50                   	push   eax
c001f753:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f757:	50                   	push   eax
c001f758:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f75c:	50                   	push   eax
c001f75d:	6a 6c                	push   0x6c
c001f75f:	6a 6c                	push   0x6c
c001f761:	e9 b9 01 00 00       	jmp    c001f91f <Vm::faultHandler(regs*)+0x533>
c001f766:	83 ec 0c             	sub    esp,0xc
c001f769:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f76d:	0f b7 f6             	movzx  esi,si
c001f770:	50                   	push   eax
c001f771:	e8 71 f8 ff ff       	call   c001efe7 <Vm::inbv(unsigned short)>
c001f776:	83 c4 0c             	add    esp,0xc
c001f779:	0f b6 c0             	movzx  eax,al
c001f77c:	50                   	push   eax
c001f77d:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f781:	50                   	push   eax
c001f782:	56                   	push   esi
c001f783:	e8 24 fc ff ff       	call   c001f3ac <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f788:	83 c4 10             	add    esp,0x10
c001f78b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f78e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f792:	74 03                	je     c001f797 <Vm::faultHandler(regs*)+0x3ab>
c001f794:	48                   	dec    eax
c001f795:	eb 01                	jmp    c001f798 <Vm::faultHandler(regs*)+0x3ac>
c001f797:	40                   	inc    eax
c001f798:	0f b7 c0             	movzx  eax,ax
c001f79b:	e9 8d 00 00 00       	jmp    c001f82d <Vm::faultHandler(regs*)+0x441>
c001f7a0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f7a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f7a6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f7ab:	74 29                	je     c001f7d6 <Vm::faultHandler(regs*)+0x3ea>
c001f7ad:	3d ff ff 00 00       	cmp    eax,0xffff
c001f7b2:	76 22                	jbe    c001f7d6 <Vm::faultHandler(regs*)+0x3ea>
c001f7b4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f7b8:	50                   	push   eax
c001f7b9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f7bd:	50                   	push   eax
c001f7be:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f7c2:	50                   	push   eax
c001f7c3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f7c7:	50                   	push   eax
c001f7c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f7cc:	50                   	push   eax
c001f7cd:	6a 6d                	push   0x6d
c001f7cf:	6a 6d                	push   0x6d
c001f7d1:	e9 49 01 00 00       	jmp    c001f91f <Vm::faultHandler(regs*)+0x533>
c001f7d6:	0f b7 c8             	movzx  ecx,ax
c001f7d9:	0f b7 f6             	movzx  esi,si
c001f7dc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f7df:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f7e4:	74 20                	je     c001f806 <Vm::faultHandler(regs*)+0x41a>
c001f7e6:	ed                   	in     eax,dx
c001f7e7:	55                   	push   ebp
c001f7e8:	50                   	push   eax
c001f7e9:	51                   	push   ecx
c001f7ea:	56                   	push   esi
c001f7eb:	e8 e7 fb ff ff       	call   c001f3d7 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f7f0:	83 c4 10             	add    esp,0x10
c001f7f3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f7f6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f7fa:	74 05                	je     c001f801 <Vm::faultHandler(regs*)+0x415>
c001f7fc:	83 e8 04             	sub    eax,0x4
c001f7ff:	eb 27                	jmp    c001f828 <Vm::faultHandler(regs*)+0x43c>
c001f801:	83 c0 04             	add    eax,0x4
c001f804:	eb 22                	jmp    c001f828 <Vm::faultHandler(regs*)+0x43c>
c001f806:	66 ed                	in     ax,dx
c001f808:	0f b7 c0             	movzx  eax,ax
c001f80b:	57                   	push   edi
c001f80c:	50                   	push   eax
c001f80d:	51                   	push   ecx
c001f80e:	56                   	push   esi
c001f80f:	e8 ad fb ff ff       	call   c001f3c1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f814:	83 c4 10             	add    esp,0x10
c001f817:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f81a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f81e:	74 05                	je     c001f825 <Vm::faultHandler(regs*)+0x439>
c001f820:	83 e8 02             	sub    eax,0x2
c001f823:	eb 03                	jmp    c001f828 <Vm::faultHandler(regs*)+0x43c>
c001f825:	83 c0 02             	add    eax,0x2
c001f828:	25 ff ff 00 00       	and    eax,0xffff
c001f82d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f830:	e9 27 02 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f835:	8d 46 ff             	lea    eax,[esi-0x1]
c001f838:	3c 05                	cmp    al,0x5
c001f83a:	77 24                	ja     c001f860 <Vm::faultHandler(regs*)+0x474>
c001f83c:	0f b6 c0             	movzx  eax,al
c001f83f:	ff 24 85 5c d3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2ca4]
c001f846:	0f b7 fd             	movzx  edi,bp
c001f849:	eb 15                	jmp    c001f860 <Vm::faultHandler(regs*)+0x474>
c001f84b:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f84f:	eb 0f                	jmp    c001f860 <Vm::faultHandler(regs*)+0x474>
c001f851:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f855:	eb 09                	jmp    c001f860 <Vm::faultHandler(regs*)+0x474>
c001f857:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f85b:	eb 03                	jmp    c001f860 <Vm::faultHandler(regs*)+0x474>
c001f85d:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f860:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f863:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f868:	74 29                	je     c001f893 <Vm::faultHandler(regs*)+0x4a7>
c001f86a:	3d ff ff 00 00       	cmp    eax,0xffff
c001f86f:	76 22                	jbe    c001f893 <Vm::faultHandler(regs*)+0x4a7>
c001f871:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f875:	50                   	push   eax
c001f876:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f87a:	50                   	push   eax
c001f87b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f87f:	50                   	push   eax
c001f880:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f884:	50                   	push   eax
c001f885:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f889:	50                   	push   eax
c001f88a:	6a 6e                	push   0x6e
c001f88c:	6a 6e                	push   0x6e
c001f88e:	e9 8c 00 00 00       	jmp    c001f91f <Vm::faultHandler(regs*)+0x533>
c001f893:	0f b7 c0             	movzx  eax,ax
c001f896:	52                   	push   edx
c001f897:	52                   	push   edx
c001f898:	50                   	push   eax
c001f899:	57                   	push   edi
c001f89a:	e8 d9 fa ff ff       	call   c001f378 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f89f:	59                   	pop    ecx
c001f8a0:	0f b6 c0             	movzx  eax,al
c001f8a3:	5e                   	pop    esi
c001f8a4:	50                   	push   eax
c001f8a5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f8a9:	50                   	push   eax
c001f8aa:	e8 4b f7 ff ff       	call   c001effa <Vm::outbv(unsigned short, unsigned char)>
c001f8af:	83 c4 10             	add    esp,0x10
c001f8b2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f8b5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f8b9:	74 03                	je     c001f8be <Vm::faultHandler(regs*)+0x4d2>
c001f8bb:	48                   	dec    eax
c001f8bc:	eb 01                	jmp    c001f8bf <Vm::faultHandler(regs*)+0x4d3>
c001f8be:	40                   	inc    eax
c001f8bf:	0f b7 c0             	movzx  eax,ax
c001f8c2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f8c5:	e9 92 01 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f8ca:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8cd:	3c 05                	cmp    al,0x5
c001f8cf:	77 1f                	ja     c001f8f0 <Vm::faultHandler(regs*)+0x504>
c001f8d1:	0f b6 c0             	movzx  eax,al
c001f8d4:	ff 24 85 74 d3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2c8c]
c001f8db:	89 ef                	mov    edi,ebp
c001f8dd:	eb 11                	jmp    c001f8f0 <Vm::faultHandler(regs*)+0x504>
c001f8df:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f8e2:	eb 0c                	jmp    c001f8f0 <Vm::faultHandler(regs*)+0x504>
c001f8e4:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f8e7:	eb 07                	jmp    c001f8f0 <Vm::faultHandler(regs*)+0x504>
c001f8e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f8ec:	eb 02                	jmp    c001f8f0 <Vm::faultHandler(regs*)+0x504>
c001f8ee:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f8f0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f8f3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f8f8:	74 37                	je     c001f931 <Vm::faultHandler(regs*)+0x545>
c001f8fa:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f900:	76 2f                	jbe    c001f931 <Vm::faultHandler(regs*)+0x545>
c001f902:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f906:	50                   	push   eax
c001f907:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f90b:	50                   	push   eax
c001f90c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f910:	50                   	push   eax
c001f911:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f915:	50                   	push   eax
c001f916:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f91a:	50                   	push   eax
c001f91b:	6a 6f                	push   0x6f
c001f91d:	6a 6f                	push   0x6f
c001f91f:	68 01 d3 02 c0       	push   0xc002d301
c001f924:	e8 04 32 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001f929:	83 c4 20             	add    esp,0x20
c001f92c:	e9 86 01 00 00       	jmp    c001fab7 <Vm::faultHandler(regs*)+0x6cb>
c001f931:	0f b7 d7             	movzx  edx,di
c001f934:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f937:	0f b7 c6             	movzx  eax,si
c001f93a:	81 e1 00 04 00 00    	and    ecx,0x400
c001f940:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f943:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f948:	74 1d                	je     c001f967 <Vm::faultHandler(regs*)+0x57b>
c001f94a:	55                   	push   ebp
c001f94b:	55                   	push   ebp
c001f94c:	50                   	push   eax
c001f94d:	52                   	push   edx
c001f94e:	e8 48 fa ff ff       	call   c001f39b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f953:	83 c4 10             	add    esp,0x10
c001f956:	89 fa                	mov    edx,edi
c001f958:	ef                   	out    dx,eax
c001f959:	85 c9                	test   ecx,ecx
c001f95b:	74 05                	je     c001f962 <Vm::faultHandler(regs*)+0x576>
c001f95d:	83 ee 04             	sub    esi,0x4
c001f960:	eb 21                	jmp    c001f983 <Vm::faultHandler(regs*)+0x597>
c001f962:	83 c6 04             	add    esi,0x4
c001f965:	eb 1c                	jmp    c001f983 <Vm::faultHandler(regs*)+0x597>
c001f967:	55                   	push   ebp
c001f968:	55                   	push   ebp
c001f969:	50                   	push   eax
c001f96a:	52                   	push   edx
c001f96b:	e8 19 fa ff ff       	call   c001f389 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	89 fa                	mov    edx,edi
c001f975:	66 ef                	out    dx,ax
c001f977:	85 c9                	test   ecx,ecx
c001f979:	74 05                	je     c001f980 <Vm::faultHandler(regs*)+0x594>
c001f97b:	83 ee 02             	sub    esi,0x2
c001f97e:	eb 03                	jmp    c001f983 <Vm::faultHandler(regs*)+0x597>
c001f980:	83 c6 02             	add    esi,0x2
c001f983:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f989:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f98c:	e9 cb 00 00 00       	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001f991:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f998:	83 ec 0c             	sub    esp,0xc
c001f99b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f99f:	50                   	push   eax
c001f9a0:	e8 42 f6 ff ff       	call   c001efe7 <Vm::inbv(unsigned short)>
c001f9a5:	0f b6 c0             	movzx  eax,al
c001f9a8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f9ab:	eb 3f                	jmp    c001f9ec <Vm::faultHandler(regs*)+0x600>
c001f9ad:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f9b2:	74 07                	je     c001f9bb <Vm::faultHandler(regs*)+0x5cf>
c001f9b4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f9b8:	ed                   	in     eax,dx
c001f9b9:	eb 14                	jmp    c001f9cf <Vm::faultHandler(regs*)+0x5e3>
c001f9bb:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f9be:	66 31 f6             	xor    si,si
c001f9c1:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f9c4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f9c8:	66 ed                	in     ax,dx
c001f9ca:	0f b7 c0             	movzx  eax,ax
c001f9cd:	09 f0                	or     eax,esi
c001f9cf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f9d2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9d6:	e9 84 00 00 00       	jmp    c001fa5f <Vm::faultHandler(regs*)+0x673>
c001f9db:	52                   	push   edx
c001f9dc:	52                   	push   edx
c001f9dd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f9e1:	50                   	push   eax
c001f9e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f9e6:	50                   	push   eax
c001f9e7:	e8 0e f6 ff ff       	call   c001effa <Vm::outbv(unsigned short, unsigned char)>
c001f9ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9f0:	eb 53                	jmp    c001fa45 <Vm::faultHandler(regs*)+0x659>
c001f9f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f9f5:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f9f9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f9fe:	74 03                	je     c001fa03 <Vm::faultHandler(regs*)+0x617>
c001fa00:	ef                   	out    dx,eax
c001fa01:	eb cf                	jmp    c001f9d2 <Vm::faultHandler(regs*)+0x5e6>
c001fa03:	66 ef                	out    dx,ax
c001fa05:	eb cb                	jmp    c001f9d2 <Vm::faultHandler(regs*)+0x5e6>
c001fa07:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001fa0e:	83 ec 0c             	sub    esp,0xc
c001fa11:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001fa15:	50                   	push   eax
c001fa16:	e8 cc f5 ff ff       	call   c001efe7 <Vm::inbv(unsigned short)>
c001fa1b:	0f b6 c0             	movzx  eax,al
c001fa1e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001fa21:	eb 1f                	jmp    c001fa42 <Vm::faultHandler(regs*)+0x656>
c001fa23:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fa26:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fa2b:	74 03                	je     c001fa30 <Vm::faultHandler(regs*)+0x644>
c001fa2d:	ed                   	in     eax,dx
c001fa2e:	eb 0d                	jmp    c001fa3d <Vm::faultHandler(regs*)+0x651>
c001fa30:	66 ed                	in     ax,dx
c001fa32:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001fa35:	0f b7 c0             	movzx  eax,ax
c001fa38:	66 31 d2             	xor    dx,dx
c001fa3b:	09 d0                	or     eax,edx
c001fa3d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001fa40:	eb 1a                	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001fa42:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001fa45:	83 c4 10             	add    esp,0x10
c001fa48:	eb 15                	jmp    c001fa5f <Vm::faultHandler(regs*)+0x673>
c001fa4a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001fa4d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001fa50:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001fa55:	74 03                	je     c001fa5a <Vm::faultHandler(regs*)+0x66e>
c001fa57:	ef                   	out    dx,eax
c001fa58:	eb 02                	jmp    c001fa5c <Vm::faultHandler(regs*)+0x670>
c001fa5a:	66 ef                	out    dx,ax
c001fa5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001fa5f:	b0 01                	mov    al,0x1
c001fa61:	eb 56                	jmp    c001fab9 <Vm::faultHandler(regs*)+0x6cd>
c001fa63:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001fa67:	50                   	push   eax
c001fa68:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001fa6c:	50                   	push   eax
c001fa6d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001fa71:	50                   	push   eax
c001fa72:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001fa76:	50                   	push   eax
c001fa77:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001fa7b:	50                   	push   eax
c001fa7c:	52                   	push   edx
c001fa7d:	52                   	push   edx
c001fa7e:	68 2e d3 02 c0       	push   0xc002d32e
c001fa83:	e8 a5 30 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c001fa88:	83 c4 20             	add    esp,0x20
c001fa8b:	83 ec 0c             	sub    esp,0xc
c001fa8e:	6a 60                	push   0x60
c001fa90:	e8 52 f5 ff ff       	call   c001efe7 <Vm::inbv(unsigned short)>
c001fa95:	83 c4 10             	add    esp,0x10
c001fa98:	3c 1c                	cmp    al,0x1c
c001fa9a:	74 04                	je     c001faa0 <Vm::faultHandler(regs*)+0x6b4>
c001fa9c:	3c 5a                	cmp    al,0x5a
c001fa9e:	75 eb                	jne    c001fa8b <Vm::faultHandler(regs*)+0x69f>
c001faa0:	3c 5a                	cmp    al,0x5a
c001faa2:	74 04                	je     c001faa8 <Vm::faultHandler(regs*)+0x6bc>
c001faa4:	3c 1c                	cmp    al,0x1c
c001faa6:	75 0f                	jne    c001fab7 <Vm::faultHandler(regs*)+0x6cb>
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	6a 60                	push   0x60
c001faad:	e8 35 f5 ff ff       	call   c001efe7 <Vm::inbv(unsigned short)>
c001fab2:	83 c4 10             	add    esp,0x10
c001fab5:	eb e9                	jmp    c001faa0 <Vm::faultHandler(regs*)+0x6b4>
c001fab7:	31 c0                	xor    eax,eax
c001fab9:	83 c4 1c             	add    esp,0x1c
c001fabc:	5b                   	pop    ebx
c001fabd:	5e                   	pop    esi
c001fabe:	5f                   	pop    edi
c001fabf:	5d                   	pop    ebp
c001fac0:	c3                   	ret    

c001fac1 <Vm::fpuInternalTo32(unsigned long long)>:
c001fac1:	57                   	push   edi
c001fac2:	56                   	push   esi
c001fac3:	53                   	push   ebx
c001fac4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facc:	89 d6                	mov    esi,edx
c001face:	89 d7                	mov    edi,edx
c001fad0:	89 c1                	mov    ecx,eax
c001fad2:	c1 ef 14             	shr    edi,0x14
c001fad5:	89 d3                	mov    ebx,edx
c001fad7:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fadd:	31 d2                	xor    edx,edx
c001fadf:	89 f8                	mov    eax,edi
c001fae1:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fae7:	bf ff 00 00 00       	mov    edi,0xff
c001faec:	05 80 fc ff ff       	add    eax,0xfffffc80
c001faf1:	83 d2 ff             	adc    edx,0xffffffff
c001faf4:	39 c7                	cmp    edi,eax
c001faf6:	bf 00 00 00 00       	mov    edi,0x0
c001fafb:	19 d7                	sbb    edi,edx
c001fafd:	72 15                	jb     c001fb14 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001faff:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fb03:	c1 e0 17             	shl    eax,0x17
c001fb06:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fb0c:	09 f1                	or     ecx,esi
c001fb0e:	09 c1                	or     ecx,eax
c001fb10:	89 cf                	mov    edi,ecx
c001fb12:	eb 02                	jmp    c001fb16 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fb14:	31 ff                	xor    edi,edi
c001fb16:	89 f8                	mov    eax,edi
c001fb18:	5b                   	pop    ebx
c001fb19:	5e                   	pop    esi
c001fb1a:	5f                   	pop    edi
c001fb1b:	c3                   	ret    

c001fb1c <Vm::fpuInternalTo64(unsigned long long)>:
c001fb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fb24:	c3                   	ret    

c001fb25 <Vm::fpu32ToInternal(unsigned int)>:
c001fb25:	57                   	push   edi
c001fb26:	31 ff                	xor    edi,edi
c001fb28:	56                   	push   esi
c001fb29:	53                   	push   ebx
c001fb2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fb2e:	89 cb                	mov    ebx,ecx
c001fb30:	89 ce                	mov    esi,ecx
c001fb32:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fb38:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fb3e:	c1 e9 17             	shr    ecx,0x17
c001fb41:	89 f0                	mov    eax,esi
c001fb43:	0f b6 d1             	movzx  edx,cl
c001fb46:	81 c2 80 03 00 00    	add    edx,0x380
c001fb4c:	89 d1                	mov    ecx,edx
c001fb4e:	89 fa                	mov    edx,edi
c001fb50:	c1 e1 14             	shl    ecx,0x14
c001fb53:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fb57:	c1 e0 1d             	shl    eax,0x1d
c001fb5a:	89 d7                	mov    edi,edx
c001fb5c:	89 c6                	mov    esi,eax
c001fb5e:	89 ca                	mov    edx,ecx
c001fb60:	89 f0                	mov    eax,esi
c001fb62:	09 fa                	or     edx,edi
c001fb64:	09 da                	or     edx,ebx
c001fb66:	5b                   	pop    ebx
c001fb67:	5e                   	pop    esi
c001fb68:	5f                   	pop    edi
c001fb69:	c3                   	ret    

c001fb6a <Vm::fpu64ToInternal(unsigned long long)>:
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fb72:	c3                   	ret    

c001fb73 <Vm::fpuFloatToLong(unsigned long long)>:
c001fb73:	57                   	push   edi
c001fb74:	31 c0                	xor    eax,eax
c001fb76:	56                   	push   esi
c001fb77:	31 d2                	xor    edx,edx
c001fb79:	53                   	push   ebx
c001fb7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fb7e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb82:	89 d9                	mov    ecx,ebx
c001fb84:	c1 e9 14             	shr    ecx,0x14
c001fb87:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fb8d:	89 cf                	mov    edi,ecx
c001fb8f:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fb95:	78 33                	js     c001fbca <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fb97:	89 d9                	mov    ecx,ebx
c001fb99:	89 f0                	mov    eax,esi
c001fb9b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fba1:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fba7:	89 ca                	mov    edx,ecx
c001fba9:	b9 34 00 00 00       	mov    ecx,0x34
c001fbae:	29 f9                	sub    ecx,edi
c001fbb0:	0f ad d0             	shrd   eax,edx,cl
c001fbb3:	d3 fa                	sar    edx,cl
c001fbb5:	f6 c1 20             	test   cl,0x20
c001fbb8:	74 05                	je     c001fbbf <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fbba:	89 d0                	mov    eax,edx
c001fbbc:	c1 fa 1f             	sar    edx,0x1f
c001fbbf:	85 db                	test   ebx,ebx
c001fbc1:	79 07                	jns    c001fbca <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fbc3:	f7 d8                	neg    eax
c001fbc5:	83 d2 00             	adc    edx,0x0
c001fbc8:	f7 da                	neg    edx
c001fbca:	5b                   	pop    ebx
c001fbcb:	5e                   	pop    esi
c001fbcc:	5f                   	pop    edi
c001fbcd:	c3                   	ret    

c001fbce <Vm::fpuULongToFloat(unsigned long long)>:
c001fbce:	57                   	push   edi
c001fbcf:	31 c9                	xor    ecx,ecx
c001fbd1:	56                   	push   esi
c001fbd2:	53                   	push   ebx
c001fbd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fbd7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fbdb:	0f ba e7 14          	bt     edi,0x14
c001fbdf:	72 07                	jb     c001fbe8 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fbe1:	01 f6                	add    esi,esi
c001fbe3:	11 ff                	adc    edi,edi
c001fbe5:	41                   	inc    ecx
c001fbe6:	eb f3                	jmp    c001fbdb <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fbe8:	89 fa                	mov    edx,edi
c001fbea:	89 f0                	mov    eax,esi
c001fbec:	bb 33 04 00 00       	mov    ebx,0x433
c001fbf1:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fbf7:	29 cb                	sub    ebx,ecx
c001fbf9:	89 d9                	mov    ecx,ebx
c001fbfb:	5b                   	pop    ebx
c001fbfc:	c1 e1 14             	shl    ecx,0x14
c001fbff:	5e                   	pop    esi
c001fc00:	09 ca                	or     edx,ecx
c001fc02:	5f                   	pop    edi
c001fc03:	c3                   	ret    

c001fc04 <Vm::fpuLongToFloat(long long)>:
c001fc04:	56                   	push   esi
c001fc05:	31 c0                	xor    eax,eax
c001fc07:	53                   	push   ebx
c001fc08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fc0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fc10:	39 c8                	cmp    eax,ecx
c001fc12:	19 d8                	sbb    eax,ebx
c001fc14:	7d 04                	jge    c001fc1a <Vm::fpuLongToFloat(long long)+0x16>
c001fc16:	31 f6                	xor    esi,esi
c001fc18:	eb 0c                	jmp    c001fc26 <Vm::fpuLongToFloat(long long)+0x22>
c001fc1a:	f7 d9                	neg    ecx
c001fc1c:	be 01 00 00 00       	mov    esi,0x1
c001fc21:	83 d3 00             	adc    ebx,0x0
c001fc24:	f7 db                	neg    ebx
c001fc26:	31 c0                	xor    eax,eax
c001fc28:	0f ba e3 14          	bt     ebx,0x14
c001fc2c:	72 07                	jb     c001fc35 <Vm::fpuLongToFloat(long long)+0x31>
c001fc2e:	01 c9                	add    ecx,ecx
c001fc30:	11 db                	adc    ebx,ebx
c001fc32:	40                   	inc    eax
c001fc33:	eb f3                	jmp    c001fc28 <Vm::fpuLongToFloat(long long)+0x24>
c001fc35:	ba 33 04 00 00       	mov    edx,0x433
c001fc3a:	29 c2                	sub    edx,eax
c001fc3c:	89 c8                	mov    eax,ecx
c001fc3e:	c1 e2 14             	shl    edx,0x14
c001fc41:	89 d9                	mov    ecx,ebx
c001fc43:	89 f3                	mov    ebx,esi
c001fc45:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fc4b:	09 ca                	or     edx,ecx
c001fc4d:	84 db                	test   bl,bl
c001fc4f:	74 06                	je     c001fc57 <Vm::fpuLongToFloat(long long)+0x53>
c001fc51:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fc57:	5b                   	pop    ebx
c001fc58:	5e                   	pop    esi
c001fc59:	c3                   	ret    

c001fc5a <Vm::fpuGet0()>:
c001fc5a:	31 c0                	xor    eax,eax
c001fc5c:	31 d2                	xor    edx,edx
c001fc5e:	c3                   	ret    

c001fc5f <Vm::fpuGet1()>:
c001fc5f:	b8 01 00 00 00       	mov    eax,0x1
c001fc64:	31 d2                	xor    edx,edx
c001fc66:	c3                   	ret    

c001fc67 <Vm::fpuGetPi()>:
c001fc67:	b8 03 00 00 00       	mov    eax,0x3
c001fc6c:	31 d2                	xor    edx,edx
c001fc6e:	c3                   	ret    

c001fc6f <Vm::fpuGetLog2E()>:
c001fc6f:	83 ec 18             	sub    esp,0x18
c001fc72:	68 8c d3 02 c0       	push   0xc002d38c
c001fc77:	e8 1d aa ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001fc7c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fc81:	31 d2                	xor    edx,edx
c001fc83:	83 c4 1c             	add    esp,0x1c
c001fc86:	c3                   	ret    

c001fc87 <Vm::fpuGetLogE2()>:
c001fc87:	83 ec 18             	sub    esp,0x18
c001fc8a:	68 98 d3 02 c0       	push   0xc002d398
c001fc8f:	e8 05 aa ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001fc94:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fc99:	31 d2                	xor    edx,edx
c001fc9b:	83 c4 1c             	add    esp,0x1c
c001fc9e:	c3                   	ret    

c001fc9f <Vm::fpuGetLog210()>:
c001fc9f:	83 ec 18             	sub    esp,0x18
c001fca2:	68 a4 d3 02 c0       	push   0xc002d3a4
c001fca7:	e8 ed a9 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001fcac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fcb1:	31 d2                	xor    edx,edx
c001fcb3:	83 c4 1c             	add    esp,0x1c
c001fcb6:	c3                   	ret    

c001fcb7 <Vm::fpuGetLog102()>:
c001fcb7:	83 ec 18             	sub    esp,0x18
c001fcba:	68 b1 d3 02 c0       	push   0xc002d3b1
c001fcbf:	e8 d5 a9 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001fcc4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fcc9:	31 d2                	xor    edx,edx
c001fccb:	83 c4 1c             	add    esp,0x1c
c001fcce:	c3                   	ret    

c001fccf <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fcd3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fcd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcdb:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fcdf:	0f 92 c0             	setb   al
c001fce2:	c3                   	ret    

c001fce3 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fce3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fceb:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fcef:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fcf3:	09 c2                	or     edx,eax
c001fcf5:	0f 94 c0             	sete   al
c001fcf8:	c3                   	ret    

c001fcf9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fcf9:	57                   	push   edi
c001fcfa:	56                   	push   esi
c001fcfb:	53                   	push   ebx
c001fcfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fd00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fd08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fd0c:	57                   	push   edi
c001fd0d:	56                   	push   esi
c001fd0e:	53                   	push   ebx
c001fd0f:	51                   	push   ecx
c001fd10:	e8 ce ff ff ff       	call   c001fce3 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	88 c2                	mov    dl,al
c001fd1a:	31 c0                	xor    eax,eax
c001fd1c:	84 d2                	test   dl,dl
c001fd1e:	75 0c                	jne    c001fd2c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fd20:	57                   	push   edi
c001fd21:	56                   	push   esi
c001fd22:	53                   	push   ebx
c001fd23:	51                   	push   ecx
c001fd24:	e8 a6 ff ff ff       	call   c001fccf <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fd29:	83 c4 10             	add    esp,0x10
c001fd2c:	83 e0 01             	and    eax,0x1
c001fd2f:	5b                   	pop    ebx
c001fd30:	88 c1                	mov    cl,al
c001fd32:	83 e2 01             	and    edx,0x1
c001fd35:	a0 61 27 03 c0       	mov    al,ds:0xc0032761
c001fd3a:	c1 e2 06             	shl    edx,0x6
c001fd3d:	83 e0 ba             	and    eax,0xffffffba
c001fd40:	5e                   	pop    esi
c001fd41:	09 c8                	or     eax,ecx
c001fd43:	5f                   	pop    edi
c001fd44:	09 d0                	or     eax,edx
c001fd46:	a2 61 27 03 c0       	mov    ds:0xc0032761,al
c001fd4b:	c3                   	ret    

c001fd4c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fd4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd54:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fd58:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fd5c:	c3                   	ret    

c001fd5d <Vm::fpuAbs(unsigned long long)>:
c001fd5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd65:	c3                   	ret    

c001fd66 <Vm::fpuChs(unsigned long long)>:
c001fd66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd6e:	f7 d8                	neg    eax
c001fd70:	83 d2 00             	adc    edx,0x0
c001fd73:	f7 da                	neg    edx
c001fd75:	c3                   	ret    

c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fd76:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fd7a:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fd7f:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fd83:	eb c7                	jmp    c001fd4c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fd85 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fd85:	53                   	push   ebx
c001fd86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd92:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd96:	0f af ca             	imul   ecx,edx
c001fd99:	0f af d8             	imul   ebx,eax
c001fd9c:	f7 e2                	mul    edx
c001fd9e:	01 d9                	add    ecx,ebx
c001fda0:	5b                   	pop    ebx
c001fda1:	01 ca                	add    edx,ecx
c001fda3:	c3                   	ret    

c001fda4 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb7:	e8 b8 76 00 00       	call   c0027474 <__udivdi3>
c001fdbc:	83 c4 1c             	add    esp,0x1c
c001fdbf:	c3                   	ret    

c001fdc0 <Vm::fpuSquare(unsigned long long)>:
c001fdc0:	50                   	push   eax
c001fdc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fdc9:	52                   	push   edx
c001fdca:	50                   	push   eax
c001fdcb:	52                   	push   edx
c001fdcc:	50                   	push   eax
c001fdcd:	e8 b3 ff ff ff       	call   c001fd85 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdd2:	83 c4 14             	add    esp,0x14
c001fdd5:	c3                   	ret    

c001fdd6 <Vm::fpuGetReg(int)>:
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fdde:	76 10                	jbe    c001fdf0 <Vm::fpuGetReg(int)+0x1a>
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	68 be d3 02 c0       	push   0xc002d3be
c001fde8:	e8 ac a8 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001fded:	83 c4 10             	add    esp,0x10
c001fdf0:	a0 61 27 03 c0       	mov    al,ds:0xc0032761
c001fdf5:	b9 08 00 00 00       	mov    ecx,0x8
c001fdfa:	c0 e8 03             	shr    al,0x3
c001fdfd:	83 e0 07             	and    eax,0x7
c001fe00:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fe04:	99                   	cdq    
c001fe05:	f7 f9                	idiv   ecx
c001fe07:	8b 04 d5 64 27 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd89c]
c001fe0e:	8b 14 d5 68 27 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd898]
c001fe15:	83 c4 0c             	add    esp,0xc
c001fe18:	c3                   	ret    

c001fe19 <Vm::fpuSetReg(int, unsigned long long)>:
c001fe19:	57                   	push   edi
c001fe1a:	56                   	push   esi
c001fe1b:	52                   	push   edx
c001fe1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe20:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fe24:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fe29:	76 10                	jbe    c001fe3b <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	68 d1 d3 02 c0       	push   0xc002d3d1
c001fe33:	e8 61 a8 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c001fe38:	83 c4 10             	add    esp,0x10
c001fe3b:	a0 61 27 03 c0       	mov    al,ds:0xc0032761
c001fe40:	b9 08 00 00 00       	mov    ecx,0x8
c001fe45:	c0 e8 03             	shr    al,0x3
c001fe48:	83 e0 07             	and    eax,0x7
c001fe4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fe4f:	99                   	cdq    
c001fe50:	f7 f9                	idiv   ecx
c001fe52:	89 34 d5 64 27 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd89c],esi
c001fe59:	89 3c d5 68 27 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd898],edi
c001fe60:	58                   	pop    eax
c001fe61:	5e                   	pop    esi
c001fe62:	5f                   	pop    edi
c001fe63:	c3                   	ret    

c001fe64 <Vm::fpuPush(unsigned long long)>:
c001fe64:	a0 61 27 03 c0       	mov    al,ds:0xc0032761
c001fe69:	c0 e8 03             	shr    al,0x3
c001fe6c:	83 e0 07             	and    eax,0x7
c001fe6f:	83 c0 07             	add    eax,0x7
c001fe72:	88 c2                	mov    dl,al
c001fe74:	83 e0 07             	and    eax,0x7
c001fe77:	83 e2 07             	and    edx,0x7
c001fe7a:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fe81:	8a 15 61 27 03 c0    	mov    dl,BYTE PTR ds:0xc0032761
c001fe87:	83 e2 c7             	and    edx,0xffffffc7
c001fe8a:	09 ca                	or     edx,ecx
c001fe8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe90:	88 15 61 27 03 c0    	mov    BYTE PTR ds:0xc0032761,dl
c001fe96:	89 0c c5 68 27 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd898],ecx
c001fe9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fea1:	89 14 c5 64 27 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd89c],edx
c001fea8:	a1 a4 27 03 c0       	mov    eax,ds:0xc00327a4
c001fead:	83 f8 08             	cmp    eax,0x8
c001feb0:	75 08                	jne    c001feba <Vm::fpuPush(unsigned long long)+0x56>
c001feb2:	80 0d 60 27 03 c0 40 	or     BYTE PTR ds:0xc0032760,0x40
c001feb9:	c3                   	ret    
c001feba:	40                   	inc    eax
c001febb:	a3 a4 27 03 c0       	mov    ds:0xc00327a4,eax
c001fec0:	c3                   	ret    

c001fec1 <Vm::fpuPop()>:
c001fec1:	8a 0d 61 27 03 c0    	mov    cl,BYTE PTR ds:0xc0032761
c001fec7:	53                   	push   ebx
c001fec8:	c0 e9 03             	shr    cl,0x3
c001fecb:	8a 1d 61 27 03 c0    	mov    bl,BYTE PTR ds:0xc0032761
c001fed1:	83 e1 07             	and    ecx,0x7
c001fed4:	83 e3 c7             	and    ebx,0xffffffc7
c001fed7:	8b 04 cd 64 27 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd89c]
c001fede:	8b 14 cd 68 27 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd898]
c001fee5:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001feec:	83 e1 38             	and    ecx,0x38
c001feef:	09 d9                	or     ecx,ebx
c001fef1:	88 0d 61 27 03 c0    	mov    BYTE PTR ds:0xc0032761,cl
c001fef7:	8b 0d a4 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327a4
c001fefd:	85 c9                	test   ecx,ecx
c001feff:	74 09                	je     c001ff0a <Vm::fpuPop()+0x49>
c001ff01:	49                   	dec    ecx
c001ff02:	89 0d a4 27 03 c0    	mov    DWORD PTR ds:0xc00327a4,ecx
c001ff08:	eb 07                	jmp    c001ff11 <Vm::fpuPop()+0x50>
c001ff0a:	80 0d 60 27 03 c0 40 	or     BYTE PTR ds:0xc0032760,0x40
c001ff11:	5b                   	pop    ebx
c001ff12:	c3                   	ret    

c001ff13 <Vm::x87Handler(regs*)>:
c001ff13:	55                   	push   ebp
c001ff14:	57                   	push   edi
c001ff15:	56                   	push   esi
c001ff16:	53                   	push   ebx
c001ff17:	83 ec 1c             	sub    esp,0x1c
c001ff1a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ff1e:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ff23:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ff26:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ff2e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ff32:	50                   	push   eax
c001ff33:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ff37:	50                   	push   eax
c001ff38:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff3c:	50                   	push   eax
c001ff3d:	53                   	push   ebx
c001ff3e:	e8 23 9e ff ff       	call   c0019d66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ff43:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ff46:	83 c4 10             	add    esp,0x10
c001ff49:	89 c6                	mov    esi,eax
c001ff4b:	80 fa d9             	cmp    dl,0xd9
c001ff4e:	0f 85 52 01 00 00    	jne    c00200a6 <Vm::x87Handler(regs*)+0x193>
c001ff54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff58:	8d 50 20             	lea    edx,[eax+0x20]
c001ff5b:	80 fa 0e             	cmp    dl,0xe
c001ff5e:	0f 87 86 00 00 00    	ja     c001ffea <Vm::x87Handler(regs*)+0xd7>
c001ff64:	0f b6 d2             	movzx  edx,dl
c001ff67:	ff 24 95 e4 d3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2c1c]
c001ff6e:	e8 e7 fc ff ff       	call   c001fc5a <Vm::fpuGet0()>
c001ff73:	eb 05                	jmp    c001ff7a <Vm::x87Handler(regs*)+0x67>
c001ff75:	e8 e5 fc ff ff       	call   c001fc5f <Vm::fpuGet1()>
c001ff7a:	57                   	push   edi
c001ff7b:	57                   	push   edi
c001ff7c:	52                   	push   edx
c001ff7d:	50                   	push   eax
c001ff7e:	e8 e1 fe ff ff       	call   c001fe64 <Vm::fpuPush(unsigned long long)>
c001ff83:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff87:	83 c4 10             	add    esp,0x10
c001ff8a:	b0 01                	mov    al,0x1
c001ff8c:	e9 e3 09 00 00       	jmp    c0020974 <Vm::x87Handler(regs*)+0xa61>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	6a 00                	push   0x0
c001ff96:	e8 3b fe ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c001ff9b:	59                   	pop    ecx
c001ff9c:	5e                   	pop    esi
c001ff9d:	52                   	push   edx
c001ff9e:	50                   	push   eax
c001ff9f:	e8 c2 fd ff ff       	call   c001fd66 <Vm::fpuChs(unsigned long long)>
c001ffa4:	eb 13                	jmp    c001ffb9 <Vm::x87Handler(regs*)+0xa6>
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	6a 00                	push   0x0
c001ffab:	e8 26 fe ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c001ffb0:	5f                   	pop    edi
c001ffb1:	5d                   	pop    ebp
c001ffb2:	52                   	push   edx
c001ffb3:	50                   	push   eax
c001ffb4:	e8 a4 fd ff ff       	call   c001fd5d <Vm::fpuAbs(unsigned long long)>
c001ffb9:	83 c4 0c             	add    esp,0xc
c001ffbc:	52                   	push   edx
c001ffbd:	50                   	push   eax
c001ffbe:	6a 00                	push   0x0
c001ffc0:	e8 54 fe ff ff       	call   c001fe19 <Vm::fpuSetReg(int, unsigned long long)>
c001ffc5:	eb bc                	jmp    c001ff83 <Vm::x87Handler(regs*)+0x70>
c001ffc7:	e8 d3 fc ff ff       	call   c001fc9f <Vm::fpuGetLog210()>
c001ffcc:	eb ac                	jmp    c001ff7a <Vm::x87Handler(regs*)+0x67>
c001ffce:	e8 9c fc ff ff       	call   c001fc6f <Vm::fpuGetLog2E()>
c001ffd3:	eb a5                	jmp    c001ff7a <Vm::x87Handler(regs*)+0x67>
c001ffd5:	e8 8d fc ff ff       	call   c001fc67 <Vm::fpuGetPi()>
c001ffda:	eb 9e                	jmp    c001ff7a <Vm::x87Handler(regs*)+0x67>
c001ffdc:	e8 d6 fc ff ff       	call   c001fcb7 <Vm::fpuGetLog102()>
c001ffe1:	eb 97                	jmp    c001ff7a <Vm::x87Handler(regs*)+0x67>
c001ffe3:	e8 9f fc ff ff       	call   c001fc87 <Vm::fpuGetLogE2()>
c001ffe8:	eb 90                	jmp    c001ff7a <Vm::x87Handler(regs*)+0x67>
c001ffea:	8d 50 40             	lea    edx,[eax+0x40]
c001ffed:	80 fa 07             	cmp    dl,0x7
c001fff0:	77 15                	ja     c0020007 <Vm::x87Handler(regs*)+0xf4>
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	2d c0 00 00 00       	sub    eax,0xc0
c001fffa:	50                   	push   eax
c001fffb:	e8 d6 fd ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020000:	59                   	pop    ecx
c0020001:	5e                   	pop    esi
c0020002:	e9 75 ff ff ff       	jmp    c001ff7c <Vm::x87Handler(regs*)+0x69>
c0020007:	8d 50 38             	lea    edx,[eax+0x38]
c002000a:	80 fa 07             	cmp    dl,0x7
c002000d:	77 3c                	ja     c002004b <Vm::x87Handler(regs*)+0x138>
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	2d c8 00 00 00       	sub    eax,0xc8
c0020017:	50                   	push   eax
c0020018:	e8 b9 fd ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002001d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020024:	89 c6                	mov    esi,eax
c0020026:	89 d7                	mov    edi,edx
c0020028:	e8 a9 fd ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002002d:	83 c4 0c             	add    esp,0xc
c0020030:	52                   	push   edx
c0020031:	50                   	push   eax
c0020032:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020036:	2d c8 00 00 00       	sub    eax,0xc8
c002003b:	50                   	push   eax
c002003c:	e8 d8 fd ff ff       	call   c001fe19 <Vm::fpuSetReg(int, unsigned long long)>
c0020041:	83 c4 0c             	add    esp,0xc
c0020044:	57                   	push   edi
c0020045:	56                   	push   esi
c0020046:	e9 73 ff ff ff       	jmp    c001ffbe <Vm::x87Handler(regs*)+0xab>
c002004b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002004f:	84 d2                	test   dl,dl
c0020051:	75 0f                	jne    c0020062 <Vm::x87Handler(regs*)+0x14f>
c0020053:	83 ec 0c             	sub    esp,0xc
c0020056:	ff 36                	push   DWORD PTR [esi]
c0020058:	e8 c8 fa ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c002005d:	e9 bf 00 00 00       	jmp    c0020121 <Vm::x87Handler(regs*)+0x20e>
c0020062:	80 fa 03             	cmp    dl,0x3
c0020065:	75 13                	jne    c002007a <Vm::x87Handler(regs*)+0x167>
c0020067:	e8 55 fe ff ff       	call   c001fec1 <Vm::fpuPop()>
c002006c:	55                   	push   ebp
c002006d:	55                   	push   ebp
c002006e:	52                   	push   edx
c002006f:	50                   	push   eax
c0020070:	e8 4c fa ff ff       	call   c001fac1 <Vm::fpuInternalTo32(unsigned long long)>
c0020075:	e9 88 00 00 00       	jmp    c0020102 <Vm::x87Handler(regs*)+0x1ef>
c002007a:	80 fa 05             	cmp    dl,0x5
c002007d:	75 0e                	jne    c002008d <Vm::x87Handler(regs*)+0x17a>
c002007f:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020082:	66 a3 62 27 03 c0    	mov    ds:0xc0032762,ax
c0020088:	e9 df 00 00 00       	jmp    c002016c <Vm::x87Handler(regs*)+0x259>
c002008d:	31 c0                	xor    eax,eax
c002008f:	80 fa 07             	cmp    dl,0x7
c0020092:	0f 85 dc 08 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c0020098:	66 a1 62 27 03 c0    	mov    ax,ds:0xc0032762
c002009e:	66 89 06             	mov    WORD PTR [esi],ax
c00200a1:	e9 c6 00 00 00       	jmp    c002016c <Vm::x87Handler(regs*)+0x259>
c00200a6:	80 fa d8             	cmp    dl,0xd8
c00200a9:	0f 84 c9 00 00 00    	je     c0020178 <Vm::x87Handler(regs*)+0x265>
c00200af:	80 fa dc             	cmp    dl,0xdc
c00200b2:	0f 84 0d 02 00 00    	je     c00202c5 <Vm::x87Handler(regs*)+0x3b2>
c00200b8:	80 fa de             	cmp    dl,0xde
c00200bb:	0f 84 cd 02 00 00    	je     c002038e <Vm::x87Handler(regs*)+0x47b>
c00200c1:	80 fa dd             	cmp    dl,0xdd
c00200c4:	0f 84 5f 04 00 00    	je     c0020529 <Vm::x87Handler(regs*)+0x616>
c00200ca:	80 fa da             	cmp    dl,0xda
c00200cd:	0f 84 24 05 00 00    	je     c00205f7 <Vm::x87Handler(regs*)+0x6e4>
c00200d3:	80 fa df             	cmp    dl,0xdf
c00200d6:	0f 84 68 05 00 00    	je     c0020644 <Vm::x87Handler(regs*)+0x731>
c00200dc:	31 c0                	xor    eax,eax
c00200de:	80 fa db             	cmp    dl,0xdb
c00200e1:	0f 85 8d 08 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c00200e7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200eb:	80 fa 03             	cmp    dl,0x3
c00200ee:	0f 85 70 06 00 00    	jne    c0020764 <Vm::x87Handler(regs*)+0x851>
c00200f4:	e8 c8 fd ff ff       	call   c001fec1 <Vm::fpuPop()>
c00200f9:	55                   	push   ebp
c00200fa:	55                   	push   ebp
c00200fb:	52                   	push   edx
c00200fc:	50                   	push   eax
c00200fd:	e8 71 fa ff ff       	call   c001fb73 <Vm::fpuFloatToLong(unsigned long long)>
c0020102:	83 c4 10             	add    esp,0x10
c0020105:	89 06                	mov    DWORD PTR [esi],eax
c0020107:	eb 63                	jmp    c002016c <Vm::x87Handler(regs*)+0x259>
c0020109:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002010d:	84 d2                	test   dl,dl
c002010f:	0f 85 e6 05 00 00    	jne    c00206fb <Vm::x87Handler(regs*)+0x7e8>
c0020115:	57                   	push   edi
c0020116:	57                   	push   edi
c0020117:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002011a:	ff 36                	push   DWORD PTR [esi]
c002011c:	e8 49 fa ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c0020121:	5e                   	pop    esi
c0020122:	5f                   	pop    edi
c0020123:	52                   	push   edx
c0020124:	50                   	push   eax
c0020125:	e8 3a fd ff ff       	call   c001fe64 <Vm::fpuPush(unsigned long long)>
c002012a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002012e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020131:	e9 51 fe ff ff       	jmp    c001ff87 <Vm::x87Handler(regs*)+0x74>
c0020136:	80 fa 03             	cmp    dl,0x3
c0020139:	0f 85 d7 06 00 00    	jne    c0020816 <Vm::x87Handler(regs*)+0x903>
c002013f:	57                   	push   edi
c0020140:	57                   	push   edi
c0020141:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020144:	ff 36                	push   DWORD PTR [esi]
c0020146:	e8 1f fa ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c002014b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020152:	89 c6                	mov    esi,eax
c0020154:	89 d7                	mov    edi,edx
c0020156:	e8 7b fc ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002015b:	57                   	push   edi
c002015c:	56                   	push   esi
c002015d:	52                   	push   edx
c002015e:	50                   	push   eax
c002015f:	e8 95 fb ff ff       	call   c001fcf9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020164:	83 c4 20             	add    esp,0x20
c0020167:	e8 55 fd ff ff       	call   c001fec1 <Vm::fpuPop()>
c002016c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020170:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020173:	e9 12 fe ff ff       	jmp    c001ff8a <Vm::x87Handler(regs*)+0x77>
c0020178:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002017c:	8d 50 40             	lea    edx,[eax+0x40]
c002017f:	80 fa 07             	cmp    dl,0x7
c0020182:	77 29                	ja     c00201ad <Vm::x87Handler(regs*)+0x29a>
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	2d c0 00 00 00       	sub    eax,0xc0
c002018c:	50                   	push   eax
c002018d:	e8 44 fc ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020192:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020199:	89 c6                	mov    esi,eax
c002019b:	89 d7                	mov    edi,edx
c002019d:	e8 34 fc ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00201a2:	57                   	push   edi
c00201a3:	56                   	push   esi
c00201a4:	52                   	push   edx
c00201a5:	50                   	push   eax
c00201a6:	e8 a1 fb ff ff       	call   c001fd4c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201ab:	eb 2f                	jmp    c00201dc <Vm::x87Handler(regs*)+0x2c9>
c00201ad:	8d 50 38             	lea    edx,[eax+0x38]
c00201b0:	80 fa 07             	cmp    dl,0x7
c00201b3:	77 2f                	ja     c00201e4 <Vm::x87Handler(regs*)+0x2d1>
c00201b5:	83 ec 0c             	sub    esp,0xc
c00201b8:	2d c8 00 00 00       	sub    eax,0xc8
c00201bd:	50                   	push   eax
c00201be:	e8 13 fc ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00201c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ca:	89 c6                	mov    esi,eax
c00201cc:	89 d7                	mov    edi,edx
c00201ce:	e8 03 fc ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00201d3:	57                   	push   edi
c00201d4:	56                   	push   esi
c00201d5:	52                   	push   edx
c00201d6:	50                   	push   eax
c00201d7:	e8 a9 fb ff ff       	call   c001fd85 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201dc:	83 c4 1c             	add    esp,0x1c
c00201df:	e9 d8 fd ff ff       	jmp    c001ffbc <Vm::x87Handler(regs*)+0xa9>
c00201e4:	8d 50 30             	lea    edx,[eax+0x30]
c00201e7:	80 fa 07             	cmp    dl,0x7
c00201ea:	77 0d                	ja     c00201f9 <Vm::x87Handler(regs*)+0x2e6>
c00201ec:	83 ec 0c             	sub    esp,0xc
c00201ef:	2d d0 00 00 00       	sub    eax,0xd0
c00201f4:	e9 99 03 00 00       	jmp    c0020592 <Vm::x87Handler(regs*)+0x67f>
c00201f9:	8d 50 28             	lea    edx,[eax+0x28]
c00201fc:	80 fa 07             	cmp    dl,0x7
c00201ff:	77 0d                	ja     c002020e <Vm::x87Handler(regs*)+0x2fb>
c0020201:	83 ec 0c             	sub    esp,0xc
c0020204:	2d d8 00 00 00       	sub    eax,0xd8
c0020209:	e9 c0 03 00 00       	jmp    c00205ce <Vm::x87Handler(regs*)+0x6bb>
c002020e:	8d 50 20             	lea    edx,[eax+0x20]
c0020211:	80 fa 07             	cmp    dl,0x7
c0020214:	77 1b                	ja     c0020231 <Vm::x87Handler(regs*)+0x31e>
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	2d e0 00 00 00       	sub    eax,0xe0
c002021e:	50                   	push   eax
c002021f:	e8 b2 fb ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020224:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002022b:	89 c6                	mov    esi,eax
c002022d:	89 d7                	mov    edi,edx
c002022f:	eb 22                	jmp    c0020253 <Vm::x87Handler(regs*)+0x340>
c0020231:	8d 50 18             	lea    edx,[eax+0x18]
c0020234:	80 fa 07             	cmp    dl,0x7
c0020237:	77 2d                	ja     c0020266 <Vm::x87Handler(regs*)+0x353>
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	6a 00                	push   0x0
c002023e:	e8 93 fb ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020243:	89 c6                	mov    esi,eax
c0020245:	89 d7                	mov    edi,edx
c0020247:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002024b:	2d e8 00 00 00       	sub    eax,0xe8
c0020250:	89 04 24             	mov    DWORD PTR [esp],eax
c0020253:	e8 7e fb ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020258:	57                   	push   edi
c0020259:	56                   	push   esi
c002025a:	52                   	push   edx
c002025b:	50                   	push   eax
c002025c:	e8 15 fb ff ff       	call   c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020261:	e9 76 ff ff ff       	jmp    c00201dc <Vm::x87Handler(regs*)+0x2c9>
c0020266:	8d 50 10             	lea    edx,[eax+0x10]
c0020269:	80 fa 07             	cmp    dl,0x7
c002026c:	77 1b                	ja     c0020289 <Vm::x87Handler(regs*)+0x376>
c002026e:	83 ec 0c             	sub    esp,0xc
c0020271:	2d f0 00 00 00       	sub    eax,0xf0
c0020276:	50                   	push   eax
c0020277:	e8 5a fb ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002027c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020283:	89 c6                	mov    esi,eax
c0020285:	89 d7                	mov    edi,edx
c0020287:	eb 22                	jmp    c00202ab <Vm::x87Handler(regs*)+0x398>
c0020289:	3c f7                	cmp    al,0xf7
c002028b:	0f 86 d1 03 00 00    	jbe    c0020662 <Vm::x87Handler(regs*)+0x74f>
c0020291:	83 ec 0c             	sub    esp,0xc
c0020294:	6a 00                	push   0x0
c0020296:	e8 3b fb ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002029b:	89 c6                	mov    esi,eax
c002029d:	89 d7                	mov    edi,edx
c002029f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202a3:	2d f8 00 00 00       	sub    eax,0xf8
c00202a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00202ab:	e8 26 fb ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00202b0:	57                   	push   edi
c00202b1:	56                   	push   esi
c00202b2:	52                   	push   edx
c00202b3:	50                   	push   eax
c00202b4:	e8 eb fa ff ff       	call   c001fda4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202b9:	83 c4 1c             	add    esp,0x1c
c00202bc:	52                   	push   edx
c00202bd:	50                   	push   eax
c00202be:	6a 00                	push   0x0
c00202c0:	e9 51 02 00 00       	jmp    c0020516 <Vm::x87Handler(regs*)+0x603>
c00202c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202c9:	8d 50 40             	lea    edx,[eax+0x40]
c00202cc:	80 fa 07             	cmp    dl,0x7
c00202cf:	77 37                	ja     c0020308 <Vm::x87Handler(regs*)+0x3f5>
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	2d c0 00 00 00       	sub    eax,0xc0
c00202d9:	50                   	push   eax
c00202da:	e8 f7 fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00202df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202e6:	89 c6                	mov    esi,eax
c00202e8:	89 d7                	mov    edi,edx
c00202ea:	e8 e7 fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00202ef:	57                   	push   edi
c00202f0:	56                   	push   esi
c00202f1:	52                   	push   edx
c00202f2:	50                   	push   eax
c00202f3:	e8 54 fa ff ff       	call   c001fd4c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00202f8:	83 c4 1c             	add    esp,0x1c
c00202fb:	52                   	push   edx
c00202fc:	50                   	push   eax
c00202fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020301:	2d c0 00 00 00       	sub    eax,0xc0
c0020306:	eb 3d                	jmp    c0020345 <Vm::x87Handler(regs*)+0x432>
c0020308:	8d 50 38             	lea    edx,[eax+0x38]
c002030b:	80 fa 07             	cmp    dl,0x7
c002030e:	77 3b                	ja     c002034b <Vm::x87Handler(regs*)+0x438>
c0020310:	83 ec 0c             	sub    esp,0xc
c0020313:	2d c8 00 00 00       	sub    eax,0xc8
c0020318:	50                   	push   eax
c0020319:	e8 b8 fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002031e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020325:	89 c6                	mov    esi,eax
c0020327:	89 d7                	mov    edi,edx
c0020329:	e8 a8 fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002032e:	57                   	push   edi
c002032f:	56                   	push   esi
c0020330:	52                   	push   edx
c0020331:	50                   	push   eax
c0020332:	e8 4e fa ff ff       	call   c001fd85 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020337:	83 c4 1c             	add    esp,0x1c
c002033a:	52                   	push   edx
c002033b:	50                   	push   eax
c002033c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020340:	2d c8 00 00 00       	sub    eax,0xc8
c0020345:	50                   	push   eax
c0020346:	e9 75 fc ff ff       	jmp    c001ffc0 <Vm::x87Handler(regs*)+0xad>
c002034b:	83 c0 18             	add    eax,0x18
c002034e:	3c 07                	cmp    al,0x7
c0020350:	0f 87 3b 04 00 00    	ja     c0020791 <Vm::x87Handler(regs*)+0x87e>
c0020356:	83 ec 0c             	sub    esp,0xc
c0020359:	6a 00                	push   0x0
c002035b:	e8 76 fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020360:	89 c6                	mov    esi,eax
c0020362:	89 d7                	mov    edi,edx
c0020364:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020368:	2d e8 00 00 00       	sub    eax,0xe8
c002036d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020370:	e8 61 fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020375:	57                   	push   edi
c0020376:	56                   	push   esi
c0020377:	52                   	push   edx
c0020378:	50                   	push   eax
c0020379:	e8 f8 f9 ff ff       	call   c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002037e:	83 c4 1c             	add    esp,0x1c
c0020381:	52                   	push   edx
c0020382:	50                   	push   eax
c0020383:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020387:	2d e8 00 00 00       	sub    eax,0xe8
c002038c:	eb b7                	jmp    c0020345 <Vm::x87Handler(regs*)+0x432>
c002038e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020392:	8d 50 40             	lea    edx,[eax+0x40]
c0020395:	80 fa 07             	cmp    dl,0x7
c0020398:	77 3a                	ja     c00203d4 <Vm::x87Handler(regs*)+0x4c1>
c002039a:	83 ec 0c             	sub    esp,0xc
c002039d:	2d c0 00 00 00       	sub    eax,0xc0
c00203a2:	50                   	push   eax
c00203a3:	e8 2e fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00203a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203af:	89 c6                	mov    esi,eax
c00203b1:	89 d7                	mov    edi,edx
c00203b3:	e8 1e fa ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00203b8:	57                   	push   edi
c00203b9:	56                   	push   esi
c00203ba:	52                   	push   edx
c00203bb:	50                   	push   eax
c00203bc:	e8 8b f9 ff ff       	call   c001fd4c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203c1:	83 c4 1c             	add    esp,0x1c
c00203c4:	52                   	push   edx
c00203c5:	50                   	push   eax
c00203c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00203ca:	2d c0 00 00 00       	sub    eax,0xc0
c00203cf:	e9 9e 01 00 00       	jmp    c0020572 <Vm::x87Handler(regs*)+0x65f>
c00203d4:	8d 50 20             	lea    edx,[eax+0x20]
c00203d7:	80 fa 07             	cmp    dl,0x7
c00203da:	77 3a                	ja     c0020416 <Vm::x87Handler(regs*)+0x503>
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	2d e0 00 00 00       	sub    eax,0xe0
c00203e4:	50                   	push   eax
c00203e5:	e8 ec f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00203ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203f1:	89 c6                	mov    esi,eax
c00203f3:	89 d7                	mov    edi,edx
c00203f5:	e8 dc f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00203fa:	57                   	push   edi
c00203fb:	56                   	push   esi
c00203fc:	52                   	push   edx
c00203fd:	50                   	push   eax
c00203fe:	e8 73 f9 ff ff       	call   c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020403:	83 c4 1c             	add    esp,0x1c
c0020406:	52                   	push   edx
c0020407:	50                   	push   eax
c0020408:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002040c:	2d e0 00 00 00       	sub    eax,0xe0
c0020411:	e9 5c 01 00 00       	jmp    c0020572 <Vm::x87Handler(regs*)+0x65f>
c0020416:	8d 50 18             	lea    edx,[eax+0x18]
c0020419:	80 fa 07             	cmp    dl,0x7
c002041c:	77 3b                	ja     c0020459 <Vm::x87Handler(regs*)+0x546>
c002041e:	83 ec 0c             	sub    esp,0xc
c0020421:	6a 00                	push   0x0
c0020423:	e8 ae f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020428:	89 c6                	mov    esi,eax
c002042a:	89 d7                	mov    edi,edx
c002042c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020430:	2d e8 00 00 00       	sub    eax,0xe8
c0020435:	89 04 24             	mov    DWORD PTR [esp],eax
c0020438:	e8 99 f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002043d:	57                   	push   edi
c002043e:	56                   	push   esi
c002043f:	52                   	push   edx
c0020440:	50                   	push   eax
c0020441:	e8 30 f9 ff ff       	call   c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020446:	83 c4 1c             	add    esp,0x1c
c0020449:	52                   	push   edx
c002044a:	50                   	push   eax
c002044b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002044f:	2d e8 00 00 00       	sub    eax,0xe8
c0020454:	e9 19 01 00 00       	jmp    c0020572 <Vm::x87Handler(regs*)+0x65f>
c0020459:	8d 50 38             	lea    edx,[eax+0x38]
c002045c:	80 fa 07             	cmp    dl,0x7
c002045f:	77 37                	ja     c0020498 <Vm::x87Handler(regs*)+0x585>
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	2d c8 00 00 00       	sub    eax,0xc8
c0020469:	50                   	push   eax
c002046a:	e8 67 f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002046f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020476:	89 c6                	mov    esi,eax
c0020478:	89 d7                	mov    edi,edx
c002047a:	e8 57 f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002047f:	57                   	push   edi
c0020480:	56                   	push   esi
c0020481:	52                   	push   edx
c0020482:	50                   	push   eax
c0020483:	e8 fd f8 ff ff       	call   c001fd85 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020488:	83 c4 1c             	add    esp,0x1c
c002048b:	52                   	push   edx
c002048c:	50                   	push   eax
c002048d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020491:	2d c8 00 00 00       	sub    eax,0xc8
c0020496:	eb 7d                	jmp    c0020515 <Vm::x87Handler(regs*)+0x602>
c0020498:	3c f7                	cmp    al,0xf7
c002049a:	76 38                	jbe    c00204d4 <Vm::x87Handler(regs*)+0x5c1>
c002049c:	83 ec 0c             	sub    esp,0xc
c002049f:	6a 00                	push   0x0
c00204a1:	e8 30 f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00204a6:	89 c6                	mov    esi,eax
c00204a8:	89 d7                	mov    edi,edx
c00204aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204ae:	2d f8 00 00 00       	sub    eax,0xf8
c00204b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00204b6:	e8 1b f9 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00204bb:	57                   	push   edi
c00204bc:	56                   	push   esi
c00204bd:	52                   	push   edx
c00204be:	50                   	push   eax
c00204bf:	e8 e0 f8 ff ff       	call   c001fda4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204c4:	83 c4 1c             	add    esp,0x1c
c00204c7:	52                   	push   edx
c00204c8:	50                   	push   eax
c00204c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204cd:	2d f8 00 00 00       	sub    eax,0xf8
c00204d2:	eb 41                	jmp    c0020515 <Vm::x87Handler(regs*)+0x602>
c00204d4:	8d 50 10             	lea    edx,[eax+0x10]
c00204d7:	80 fa 07             	cmp    dl,0x7
c00204da:	0f 87 5a 01 00 00    	ja     c002063a <Vm::x87Handler(regs*)+0x727>
c00204e0:	83 ec 0c             	sub    esp,0xc
c00204e3:	2d f0 00 00 00       	sub    eax,0xf0
c00204e8:	50                   	push   eax
c00204e9:	e8 e8 f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00204ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f5:	89 c6                	mov    esi,eax
c00204f7:	89 d7                	mov    edi,edx
c00204f9:	e8 d8 f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00204fe:	57                   	push   edi
c00204ff:	56                   	push   esi
c0020500:	52                   	push   edx
c0020501:	50                   	push   eax
c0020502:	e8 9d f8 ff ff       	call   c001fda4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020507:	83 c4 1c             	add    esp,0x1c
c002050a:	52                   	push   edx
c002050b:	50                   	push   eax
c002050c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020510:	2d f0 00 00 00       	sub    eax,0xf0
c0020515:	50                   	push   eax
c0020516:	e8 fe f8 ff ff       	call   c001fe19 <Vm::fpuSetReg(int, unsigned long long)>
c002051b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002051f:	e8 9d f9 ff ff       	call   c001fec1 <Vm::fpuPop()>
c0020524:	e9 5e fa ff ff       	jmp    c001ff87 <Vm::x87Handler(regs*)+0x74>
c0020529:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002052d:	8d 50 30             	lea    edx,[eax+0x30]
c0020530:	80 fa 07             	cmp    dl,0x7
c0020533:	77 1d                	ja     c0020552 <Vm::x87Handler(regs*)+0x63f>
c0020535:	83 ec 0c             	sub    esp,0xc
c0020538:	6a 00                	push   0x0
c002053a:	e8 97 f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002053f:	83 c4 0c             	add    esp,0xc
c0020542:	52                   	push   edx
c0020543:	50                   	push   eax
c0020544:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020548:	2d d0 00 00 00       	sub    eax,0xd0
c002054d:	e9 f3 fd ff ff       	jmp    c0020345 <Vm::x87Handler(regs*)+0x432>
c0020552:	8d 50 28             	lea    edx,[eax+0x28]
c0020555:	80 fa 07             	cmp    dl,0x7
c0020558:	77 28                	ja     c0020582 <Vm::x87Handler(regs*)+0x66f>
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	6a 00                	push   0x0
c002055f:	e8 72 f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020564:	83 c4 0c             	add    esp,0xc
c0020567:	52                   	push   edx
c0020568:	50                   	push   eax
c0020569:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002056d:	2d d8 00 00 00       	sub    eax,0xd8
c0020572:	50                   	push   eax
c0020573:	e8 a1 f8 ff ff       	call   c001fe19 <Vm::fpuSetReg(int, unsigned long long)>
c0020578:	e8 44 f9 ff ff       	call   c001fec1 <Vm::fpuPop()>
c002057d:	e9 01 fa ff ff       	jmp    c001ff83 <Vm::x87Handler(regs*)+0x70>
c0020582:	8d 50 20             	lea    edx,[eax+0x20]
c0020585:	80 fa 07             	cmp    dl,0x7
c0020588:	77 30                	ja     c00205ba <Vm::x87Handler(regs*)+0x6a7>
c002058a:	83 ec 0c             	sub    esp,0xc
c002058d:	2d e0 00 00 00       	sub    eax,0xe0
c0020592:	50                   	push   eax
c0020593:	e8 3e f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020598:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002059f:	89 c6                	mov    esi,eax
c00205a1:	89 d7                	mov    edi,edx
c00205a3:	e8 2e f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00205a8:	57                   	push   edi
c00205a9:	56                   	push   esi
c00205aa:	52                   	push   edx
c00205ab:	50                   	push   eax
c00205ac:	e8 48 f7 ff ff       	call   c001fcf9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00205b1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00205b5:	e9 54 02 00 00       	jmp    c002080e <Vm::x87Handler(regs*)+0x8fb>
c00205ba:	8d 50 18             	lea    edx,[eax+0x18]
c00205bd:	80 fa 07             	cmp    dl,0x7
c00205c0:	0f 87 43 fb ff ff    	ja     c0020109 <Vm::x87Handler(regs*)+0x1f6>
c00205c6:	83 ec 0c             	sub    esp,0xc
c00205c9:	2d e8 00 00 00       	sub    eax,0xe8
c00205ce:	50                   	push   eax
c00205cf:	e8 02 f8 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00205d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205db:	89 c6                	mov    esi,eax
c00205dd:	89 d7                	mov    edi,edx
c00205df:	e8 f2 f7 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00205e4:	57                   	push   edi
c00205e5:	56                   	push   esi
c00205e6:	52                   	push   edx
c00205e7:	50                   	push   eax
c00205e8:	e8 0c f7 ff ff       	call   c001fcf9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00205ed:	83 c4 20             	add    esp,0x20
c00205f0:	e8 cc f8 ff ff       	call   c001fec1 <Vm::fpuPop()>
c00205f5:	eb 62                	jmp    c0020659 <Vm::x87Handler(regs*)+0x746>
c00205f7:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00205fb:	0f 85 0f 01 00 00    	jne    c0020710 <Vm::x87Handler(regs*)+0x7fd>
c0020601:	83 ec 0c             	sub    esp,0xc
c0020604:	6a 01                	push   0x1
c0020606:	e8 cb f7 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002060b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020612:	89 c6                	mov    esi,eax
c0020614:	89 d7                	mov    edi,edx
c0020616:	e8 bb f7 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002061b:	57                   	push   edi
c002061c:	56                   	push   esi
c002061d:	52                   	push   edx
c002061e:	50                   	push   eax
c002061f:	e8 d5 f6 ff ff       	call   c001fcf9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020624:	83 c4 20             	add    esp,0x20
c0020627:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002062b:	e8 91 f8 ff ff       	call   c001fec1 <Vm::fpuPop()>
c0020630:	e8 8c f8 ff ff       	call   c001fec1 <Vm::fpuPop()>
c0020635:	e9 50 f9 ff ff       	jmp    c001ff8a <Vm::x87Handler(regs*)+0x77>
c002063a:	3c d9                	cmp    al,0xd9
c002063c:	0f 85 b5 02 00 00    	jne    c00208f7 <Vm::x87Handler(regs*)+0x9e4>
c0020642:	eb bd                	jmp    c0020601 <Vm::x87Handler(regs*)+0x6ee>
c0020644:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020648:	0f 85 ea 02 00 00    	jne    c0020938 <Vm::x87Handler(regs*)+0xa25>
c002064e:	0f b7 05 60 27 03 c0 	movzx  eax,WORD PTR ds:0xc0032760
c0020655:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020659:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002065d:	e9 28 f9 ff ff       	jmp    c001ff8a <Vm::x87Handler(regs*)+0x77>
c0020662:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020666:	84 d2                	test   dl,dl
c0020668:	75 0f                	jne    c0020679 <Vm::x87Handler(regs*)+0x766>
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	ff 36                	push   DWORD PTR [esi]
c002066f:	e8 b1 f4 ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c0020674:	e9 2c 01 00 00       	jmp    c00207a5 <Vm::x87Handler(regs*)+0x892>
c0020679:	80 fa 01             	cmp    dl,0x1
c002067c:	75 0f                	jne    c002068d <Vm::x87Handler(regs*)+0x77a>
c002067e:	83 ec 0c             	sub    esp,0xc
c0020681:	ff 36                	push   DWORD PTR [esi]
c0020683:	e8 9d f4 ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c0020688:	e9 81 02 00 00       	jmp    c002090e <Vm::x87Handler(regs*)+0x9fb>
c002068d:	80 fa 04             	cmp    dl,0x4
c0020690:	75 0f                	jne    c00206a1 <Vm::x87Handler(regs*)+0x78e>
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	ff 36                	push   DWORD PTR [esi]
c0020697:	e8 89 f4 ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c002069c:	e9 86 01 00 00       	jmp    c0020827 <Vm::x87Handler(regs*)+0x914>
c00206a1:	80 fa 05             	cmp    dl,0x5
c00206a4:	75 1b                	jne    c00206c1 <Vm::x87Handler(regs*)+0x7ae>
c00206a6:	83 ec 0c             	sub    esp,0xc
c00206a9:	6a 00                	push   0x0
c00206ab:	e8 26 f7 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00206b0:	89 c7                	mov    edi,eax
c00206b2:	89 d5                	mov    ebp,edx
c00206b4:	58                   	pop    eax
c00206b5:	ff 36                	push   DWORD PTR [esi]
c00206b7:	e8 69 f4 ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c00206bc:	e9 a3 01 00 00       	jmp    c0020864 <Vm::x87Handler(regs*)+0x951>
c00206c1:	80 fa 06             	cmp    dl,0x6
c00206c4:	75 0f                	jne    c00206d5 <Vm::x87Handler(regs*)+0x7c2>
c00206c6:	83 ec 0c             	sub    esp,0xc
c00206c9:	ff 36                	push   DWORD PTR [esi]
c00206cb:	e8 55 f4 ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c00206d0:	e9 ae 01 00 00       	jmp    c0020883 <Vm::x87Handler(regs*)+0x970>
c00206d5:	31 c0                	xor    eax,eax
c00206d7:	80 fa 07             	cmp    dl,0x7
c00206da:	0f 85 94 02 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	6a 00                	push   0x0
c00206e5:	e8 ec f6 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00206ea:	89 c7                	mov    edi,eax
c00206ec:	89 d5                	mov    ebp,edx
c00206ee:	58                   	pop    eax
c00206ef:	ff 36                	push   DWORD PTR [esi]
c00206f1:	e8 2f f4 ff ff       	call   c001fb25 <Vm::fpu32ToInternal(unsigned int)>
c00206f6:	e9 cb 01 00 00       	jmp    c00208c6 <Vm::x87Handler(regs*)+0x9b3>
c00206fb:	80 fa 03             	cmp    dl,0x3
c00206fe:	0f 85 d3 01 00 00    	jne    c00208d7 <Vm::x87Handler(regs*)+0x9c4>
c0020704:	e8 b8 f7 ff ff       	call   c001fec1 <Vm::fpuPop()>
c0020709:	51                   	push   ecx
c002070a:	51                   	push   ecx
c002070b:	e9 de 01 00 00       	jmp    c00208ee <Vm::x87Handler(regs*)+0x9db>
c0020710:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020714:	80 fa 01             	cmp    dl,0x1
c0020717:	75 09                	jne    c0020722 <Vm::x87Handler(regs*)+0x80f>
c0020719:	57                   	push   edi
c002071a:	57                   	push   edi
c002071b:	8b 06                	mov    eax,DWORD PTR [esi]
c002071d:	e9 e3 01 00 00       	jmp    c0020905 <Vm::x87Handler(regs*)+0x9f2>
c0020722:	80 fa 04             	cmp    dl,0x4
c0020725:	75 12                	jne    c0020739 <Vm::x87Handler(regs*)+0x826>
c0020727:	31 d2                	xor    edx,edx
c0020729:	51                   	push   ecx
c002072a:	51                   	push   ecx
c002072b:	8b 06                	mov    eax,DWORD PTR [esi]
c002072d:	52                   	push   edx
c002072e:	50                   	push   eax
c002072f:	e8 d0 f4 ff ff       	call   c001fc04 <Vm::fpuLongToFloat(long long)>
c0020734:	e9 ee 00 00 00       	jmp    c0020827 <Vm::x87Handler(regs*)+0x914>
c0020739:	31 c0                	xor    eax,eax
c002073b:	80 fa 07             	cmp    dl,0x7
c002073e:	0f 85 30 02 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c0020744:	83 ec 0c             	sub    esp,0xc
c0020747:	6a 00                	push   0x0
c0020749:	e8 88 f6 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002074e:	89 c7                	mov    edi,eax
c0020750:	89 d5                	mov    ebp,edx
c0020752:	58                   	pop    eax
c0020753:	8b 06                	mov    eax,DWORD PTR [esi]
c0020755:	5a                   	pop    edx
c0020756:	31 d2                	xor    edx,edx
c0020758:	52                   	push   edx
c0020759:	50                   	push   eax
c002075a:	e8 a5 f4 ff ff       	call   c001fc04 <Vm::fpuLongToFloat(long long)>
c002075f:	e9 62 01 00 00       	jmp    c00208c6 <Vm::x87Handler(regs*)+0x9b3>
c0020764:	84 d2                	test   dl,dl
c0020766:	75 0d                	jne    c0020775 <Vm::x87Handler(regs*)+0x862>
c0020768:	31 d2                	xor    edx,edx
c002076a:	55                   	push   ebp
c002076b:	55                   	push   ebp
c002076c:	8b 06                	mov    eax,DWORD PTR [esi]
c002076e:	52                   	push   edx
c002076f:	50                   	push   eax
c0020770:	e9 d3 01 00 00       	jmp    c0020948 <Vm::x87Handler(regs*)+0xa35>
c0020775:	31 c0                	xor    eax,eax
c0020777:	80 fa 02             	cmp    dl,0x2
c002077a:	0f 85 f4 01 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c0020780:	83 ec 0c             	sub    esp,0xc
c0020783:	6a 00                	push   0x0
c0020785:	e8 4c f6 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002078a:	59                   	pop    ecx
c002078b:	5f                   	pop    edi
c002078c:	e9 6a f9 ff ff       	jmp    c00200fb <Vm::x87Handler(regs*)+0x1e8>
c0020791:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020795:	84 d2                	test   dl,dl
c0020797:	75 2a                	jne    c00207c3 <Vm::x87Handler(regs*)+0x8b0>
c0020799:	50                   	push   eax
c002079a:	50                   	push   eax
c002079b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002079e:	ff 36                	push   DWORD PTR [esi]
c00207a0:	e8 c5 f3 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c00207a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207ac:	89 c6                	mov    esi,eax
c00207ae:	89 d7                	mov    edi,edx
c00207b0:	e8 21 f6 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00207b5:	57                   	push   edi
c00207b6:	56                   	push   esi
c00207b7:	52                   	push   edx
c00207b8:	50                   	push   eax
c00207b9:	e8 8e f5 ff ff       	call   c001fd4c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00207be:	e9 64 01 00 00       	jmp    c0020927 <Vm::x87Handler(regs*)+0xa14>
c00207c3:	80 fa 01             	cmp    dl,0x1
c00207c6:	75 11                	jne    c00207d9 <Vm::x87Handler(regs*)+0x8c6>
c00207c8:	50                   	push   eax
c00207c9:	50                   	push   eax
c00207ca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00207cd:	ff 36                	push   DWORD PTR [esi]
c00207cf:	e8 96 f3 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c00207d4:	e9 35 01 00 00       	jmp    c002090e <Vm::x87Handler(regs*)+0x9fb>
c00207d9:	80 fa 02             	cmp    dl,0x2
c00207dc:	0f 85 54 f9 ff ff    	jne    c0020136 <Vm::x87Handler(regs*)+0x223>
c00207e2:	55                   	push   ebp
c00207e3:	55                   	push   ebp
c00207e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00207e7:	ff 36                	push   DWORD PTR [esi]
c00207e9:	e8 7c f3 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c00207ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207f5:	89 c6                	mov    esi,eax
c00207f7:	89 d7                	mov    edi,edx
c00207f9:	e8 d8 f5 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00207fe:	57                   	push   edi
c00207ff:	56                   	push   esi
c0020800:	52                   	push   edx
c0020801:	50                   	push   eax
c0020802:	e8 f2 f4 ff ff       	call   c001fcf9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020807:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002080b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002080e:	83 c4 20             	add    esp,0x20
c0020811:	e9 74 f7 ff ff       	jmp    c001ff8a <Vm::x87Handler(regs*)+0x77>
c0020816:	80 fa 04             	cmp    dl,0x4
c0020819:	75 2a                	jne    c0020845 <Vm::x87Handler(regs*)+0x932>
c002081b:	51                   	push   ecx
c002081c:	51                   	push   ecx
c002081d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020820:	ff 36                	push   DWORD PTR [esi]
c0020822:	e8 43 f3 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c0020827:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002082e:	89 c6                	mov    esi,eax
c0020830:	89 d7                	mov    edi,edx
c0020832:	e8 9f f5 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020837:	57                   	push   edi
c0020838:	56                   	push   esi
c0020839:	52                   	push   edx
c002083a:	50                   	push   eax
c002083b:	e8 36 f5 ff ff       	call   c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020840:	e9 e2 00 00 00       	jmp    c0020927 <Vm::x87Handler(regs*)+0xa14>
c0020845:	80 fa 05             	cmp    dl,0x5
c0020848:	75 28                	jne    c0020872 <Vm::x87Handler(regs*)+0x95f>
c002084a:	83 ec 0c             	sub    esp,0xc
c002084d:	6a 00                	push   0x0
c002084f:	e8 82 f5 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020854:	89 c7                	mov    edi,eax
c0020856:	89 d5                	mov    ebp,edx
c0020858:	58                   	pop    eax
c0020859:	5a                   	pop    edx
c002085a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002085d:	ff 36                	push   DWORD PTR [esi]
c002085f:	e8 06 f3 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c0020864:	83 c4 10             	add    esp,0x10
c0020867:	55                   	push   ebp
c0020868:	57                   	push   edi
c0020869:	52                   	push   edx
c002086a:	50                   	push   eax
c002086b:	e8 06 f5 ff ff       	call   c001fd76 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020870:	eb 60                	jmp    c00208d2 <Vm::x87Handler(regs*)+0x9bf>
c0020872:	80 fa 06             	cmp    dl,0x6
c0020875:	75 2a                	jne    c00208a1 <Vm::x87Handler(regs*)+0x98e>
c0020877:	51                   	push   ecx
c0020878:	51                   	push   ecx
c0020879:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002087c:	ff 36                	push   DWORD PTR [esi]
c002087e:	e8 e7 f2 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c0020883:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002088a:	89 c6                	mov    esi,eax
c002088c:	89 d7                	mov    edi,edx
c002088e:	e8 43 f5 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c0020893:	57                   	push   edi
c0020894:	56                   	push   esi
c0020895:	52                   	push   edx
c0020896:	50                   	push   eax
c0020897:	e8 08 f5 ff ff       	call   c001fda4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002089c:	e9 86 00 00 00       	jmp    c0020927 <Vm::x87Handler(regs*)+0xa14>
c00208a1:	31 c0                	xor    eax,eax
c00208a3:	80 fa 07             	cmp    dl,0x7
c00208a6:	0f 85 c8 00 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c00208ac:	83 ec 0c             	sub    esp,0xc
c00208af:	6a 00                	push   0x0
c00208b1:	e8 20 f5 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00208b6:	89 c7                	mov    edi,eax
c00208b8:	89 d5                	mov    ebp,edx
c00208ba:	58                   	pop    eax
c00208bb:	5a                   	pop    edx
c00208bc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00208bf:	ff 36                	push   DWORD PTR [esi]
c00208c1:	e8 a4 f2 ff ff       	call   c001fb6a <Vm::fpu64ToInternal(unsigned long long)>
c00208c6:	83 c4 10             	add    esp,0x10
c00208c9:	55                   	push   ebp
c00208ca:	57                   	push   edi
c00208cb:	52                   	push   edx
c00208cc:	50                   	push   eax
c00208cd:	e8 d2 f4 ff ff       	call   c001fda4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00208d2:	83 c4 0c             	add    esp,0xc
c00208d5:	eb 53                	jmp    c002092a <Vm::x87Handler(regs*)+0xa17>
c00208d7:	31 c0                	xor    eax,eax
c00208d9:	80 fa 02             	cmp    dl,0x2
c00208dc:	0f 85 92 00 00 00    	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	6a 00                	push   0x0
c00208e7:	e8 ea f4 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c00208ec:	59                   	pop    ecx
c00208ed:	5f                   	pop    edi
c00208ee:	52                   	push   edx
c00208ef:	50                   	push   eax
c00208f0:	e8 27 f2 ff ff       	call   c001fb1c <Vm::fpuInternalTo64(unsigned long long)>
c00208f5:	eb 70                	jmp    c0020967 <Vm::x87Handler(regs*)+0xa54>
c00208f7:	31 c0                	xor    eax,eax
c00208f9:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00208fe:	75 74                	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c0020900:	50                   	push   eax
c0020901:	50                   	push   eax
c0020902:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020905:	31 d2                	xor    edx,edx
c0020907:	52                   	push   edx
c0020908:	50                   	push   eax
c0020909:	e8 f6 f2 ff ff       	call   c001fc04 <Vm::fpuLongToFloat(long long)>
c002090e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020915:	89 c6                	mov    esi,eax
c0020917:	89 d7                	mov    edi,edx
c0020919:	e8 b8 f4 ff ff       	call   c001fdd6 <Vm::fpuGetReg(int)>
c002091e:	57                   	push   edi
c002091f:	56                   	push   esi
c0020920:	52                   	push   edx
c0020921:	50                   	push   eax
c0020922:	e8 5e f4 ff ff       	call   c001fd85 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020927:	83 c4 1c             	add    esp,0x1c
c002092a:	52                   	push   edx
c002092b:	50                   	push   eax
c002092c:	6a 00                	push   0x0
c002092e:	e8 e6 f4 ff ff       	call   c001fe19 <Vm::fpuSetReg(int, unsigned long long)>
c0020933:	e9 f2 f7 ff ff       	jmp    c002012a <Vm::x87Handler(regs*)+0x217>
c0020938:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002093c:	80 fa 05             	cmp    dl,0x5
c002093f:	75 11                	jne    c0020952 <Vm::x87Handler(regs*)+0xa3f>
c0020941:	55                   	push   ebp
c0020942:	55                   	push   ebp
c0020943:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020946:	ff 36                	push   DWORD PTR [esi]
c0020948:	e8 81 f2 ff ff       	call   c001fbce <Vm::fpuULongToFloat(unsigned long long)>
c002094d:	e9 cf f7 ff ff       	jmp    c0020121 <Vm::x87Handler(regs*)+0x20e>
c0020952:	31 c0                	xor    eax,eax
c0020954:	80 fa 07             	cmp    dl,0x7
c0020957:	75 1b                	jne    c0020974 <Vm::x87Handler(regs*)+0xa61>
c0020959:	e8 63 f5 ff ff       	call   c001fec1 <Vm::fpuPop()>
c002095e:	51                   	push   ecx
c002095f:	51                   	push   ecx
c0020960:	52                   	push   edx
c0020961:	50                   	push   eax
c0020962:	e8 0c f2 ff ff       	call   c001fb73 <Vm::fpuFloatToLong(unsigned long long)>
c0020967:	83 c4 10             	add    esp,0x10
c002096a:	89 06                	mov    DWORD PTR [esi],eax
c002096c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002096f:	e9 f8 f7 ff ff       	jmp    c002016c <Vm::x87Handler(regs*)+0x259>
c0020974:	83 c4 1c             	add    esp,0x1c
c0020977:	5b                   	pop    ebx
c0020978:	5e                   	pop    esi
c0020979:	5f                   	pop    edi
c002097a:	5d                   	pop    ebp
c002097b:	c3                   	ret    

c002097c <__static_initialization_and_destruction_0(int, int)>:
c002097c:	83 ec 0c             	sub    esp,0xc
c002097f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020984:	75 1a                	jne    c00209a0 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020986:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c002098e:	75 10                	jne    c00209a0 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020990:	83 ec 0c             	sub    esp,0xc
c0020993:	68 60 27 03 c0       	push   0xc0032760
c0020998:	e8 1f 8f 00 00       	call   c00298bc <Vm::_FPUState::_FPUState()>
c002099d:	83 c4 10             	add    esp,0x10
c00209a0:	90                   	nop
c00209a1:	83 c4 0c             	add    esp,0xc
c00209a4:	c3                   	ret    

c00209a5 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00209a5:	83 ec 0c             	sub    esp,0xc
c00209a8:	83 ec 08             	sub    esp,0x8
c00209ab:	68 ff ff 00 00       	push   0xffff
c00209b0:	6a 01                	push   0x1
c00209b2:	e8 c5 ff ff ff       	call   c002097c <__static_initialization_and_destruction_0(int, int)>
c00209b7:	83 c4 10             	add    esp,0x10
c00209ba:	83 c4 0c             	add    esp,0xc
c00209bd:	c3                   	ret    

c00209be <FAT::getName()>:
c00209be:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c00209c3:	c3                   	ret    

c00209c4 <FAT::tell(void*, unsigned long long*)>:
c00209c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00209c9:	75 06                	jne    c00209d1 <FAT::tell(void*, unsigned long long*)+0xd>
c00209cb:	b8 04 00 00 00       	mov    eax,0x4
c00209d0:	c3                   	ret    
c00209d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00209d6:	75 06                	jne    c00209de <FAT::tell(void*, unsigned long long*)+0x1a>
c00209d8:	b8 04 00 00 00       	mov    eax,0x4
c00209dd:	c3                   	ret    
c00209de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209e2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00209e5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00209e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00209ec:	89 01                	mov    DWORD PTR [ecx],eax
c00209ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00209f1:	b8 00 00 00 00       	mov    eax,0x0
c00209f6:	c3                   	ret    
c00209f7:	90                   	nop

c00209f8 <FAT::stat(void*, unsigned long long*)>:
c00209f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00209fd:	75 06                	jne    c0020a05 <FAT::stat(void*, unsigned long long*)+0xd>
c00209ff:	b8 04 00 00 00       	mov    eax,0x4
c0020a04:	c3                   	ret    
c0020a05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020a0a:	75 06                	jne    c0020a12 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020a0c:	b8 04 00 00 00       	mov    eax,0x4
c0020a11:	c3                   	ret    
c0020a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a16:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020a19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020a1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a20:	89 01                	mov    DWORD PTR [ecx],eax
c0020a22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020a25:	b8 00 00 00 00       	mov    eax,0x0
c0020a2a:	c3                   	ret    
c0020a2b:	90                   	nop

c0020a2c <FAT::~FAT()>:
c0020a2c:	83 ec 0c             	sub    esp,0xc
c0020a2f:	ba b0 d4 02 c0       	mov    edx,0xc002d4b0
c0020a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a38:	89 10                	mov    DWORD PTR [eax],edx
c0020a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3e:	83 ec 0c             	sub    esp,0xc
c0020a41:	50                   	push   eax
c0020a42:	e8 15 24 ff ff       	call   c0012e5c <Filesystem::~Filesystem()>
c0020a47:	83 c4 10             	add    esp,0x10
c0020a4a:	90                   	nop
c0020a4b:	83 c4 0c             	add    esp,0xc
c0020a4e:	c3                   	ret    
c0020a4f:	90                   	nop

c0020a50 <FAT::~FAT()>:
c0020a50:	83 ec 0c             	sub    esp,0xc
c0020a53:	83 ec 0c             	sub    esp,0xc
c0020a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a5a:	e8 cd ff ff ff       	call   c0020a2c <FAT::~FAT()>
c0020a5f:	83 c4 10             	add    esp,0x10
c0020a62:	83 ec 08             	sub    esp,0x8
c0020a65:	6a 08                	push   0x8
c0020a67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a6b:	e8 dd 1f ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0020a70:	83 c4 10             	add    esp,0x10
c0020a73:	83 c4 0c             	add    esp,0xc
c0020a76:	c3                   	ret    
c0020a77:	90                   	nop

c0020a78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020a78:	83 ec 1c             	sub    esp,0x1c
c0020a7b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020a82:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020a87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a8b:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020a92:	83 f8 ff             	cmp    eax,0xffffffff
c0020a95:	75 34                	jne    c0020acb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020a97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020a9b:	88 c2                	mov    dl,al
c0020a9d:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020aa2:	01 d0                	add    eax,edx
c0020aa4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020aa8:	8b 15 c0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c0
c0020aae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ab2:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0020ab9:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020abe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020ac2:	89 14 85 60 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7a0],edx
c0020ac9:	eb 17                	jmp    c0020ae2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020acb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020acf:	88 c2                	mov    dl,al
c0020ad1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ad5:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020adc:	01 d0                	add    eax,edx
c0020ade:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ae2:	83 ec 04             	sub    esp,0x4
c0020ae5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ae9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020aed:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020af1:	50                   	push   eax
c0020af2:	e8 07 62 fe ff       	call   c0006cfe <f_getlabel>
c0020af7:	83 c4 10             	add    esp,0x10
c0020afa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020afe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b03:	75 07                	jne    c0020b0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020b05:	b8 00 00 00 00       	mov    eax,0x0
c0020b0a:	eb 05                	jmp    c0020b11 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020b0c:	b8 01 00 00 00       	mov    eax,0x1
c0020b11:	83 c4 1c             	add    esp,0x1c
c0020b14:	c3                   	ret    
c0020b15:	90                   	nop

c0020b16 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020b16:	57                   	push   edi
c0020b17:	83 ec 58             	sub    esp,0x58
c0020b1a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020b22:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b26:	b9 0f 00 00 00       	mov    ecx,0xf
c0020b2b:	b8 00 00 00 00       	mov    eax,0x0
c0020b30:	fc                   	cld    
c0020b31:	89 d7                	mov    edi,edx
c0020b33:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020b35:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b39:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020b40:	83 f8 ff             	cmp    eax,0xffffffff
c0020b43:	75 34                	jne    c0020b79 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020b45:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b49:	88 c2                	mov    dl,al
c0020b4b:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020b50:	01 d0                	add    eax,edx
c0020b52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020b56:	8b 15 c0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c0
c0020b5c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b60:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0020b67:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020b6c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020b70:	89 14 85 60 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7a0],edx
c0020b77:	eb 17                	jmp    c0020b90 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020b79:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b7d:	88 c2                	mov    dl,al
c0020b7f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020b83:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020b8a:	01 d0                	add    eax,edx
c0020b8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020b90:	83 ec 08             	sub    esp,0x8
c0020b93:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020b97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b9b:	50                   	push   eax
c0020b9c:	e8 ab fd fd ff       	call   c000094c <strcat>
c0020ba1:	83 c4 10             	add    esp,0x10
c0020ba4:	83 ec 0c             	sub    esp,0xc
c0020ba7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bab:	50                   	push   eax
c0020bac:	e8 3b 63 fe ff       	call   c0006eec <f_setlabel>
c0020bb1:	83 c4 10             	add    esp,0x10
c0020bb4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020bb8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020bbd:	75 07                	jne    c0020bc6 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020bbf:	b8 00 00 00 00       	mov    eax,0x0
c0020bc4:	eb 05                	jmp    c0020bcb <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020bc6:	b8 01 00 00 00       	mov    eax,0x1
c0020bcb:	83 c4 58             	add    esp,0x58
c0020bce:	5f                   	pop    edi
c0020bcf:	c3                   	ret    

c0020bd0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020bd0:	83 ec 2c             	sub    esp,0x2c
c0020bd3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020bdb:	83 ec 08             	sub    esp,0x8
c0020bde:	68 44 d4 02 c0       	push   0xc002d444
c0020be3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020be7:	e8 ac fc fd ff       	call   c0000898 <strcmp>
c0020bec:	83 c4 10             	add    esp,0x10
c0020bef:	85 c0                	test   eax,eax
c0020bf1:	0f 94 c0             	sete   al
c0020bf4:	84 c0                	test   al,al
c0020bf6:	74 0d                	je     c0020c05 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020bf8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020c00:	e9 a6 00 00 00       	jmp    c0020cab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c05:	83 ec 08             	sub    esp,0x8
c0020c08:	68 36 d4 02 c0       	push   0xc002d436
c0020c0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c11:	e8 82 fc fd ff       	call   c0000898 <strcmp>
c0020c16:	83 c4 10             	add    esp,0x10
c0020c19:	85 c0                	test   eax,eax
c0020c1b:	0f 94 c0             	sete   al
c0020c1e:	84 c0                	test   al,al
c0020c20:	74 0a                	je     c0020c2c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020c22:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020c2a:	eb 7f                	jmp    c0020cab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c2c:	83 ec 08             	sub    esp,0x8
c0020c2f:	68 3c d4 02 c0       	push   0xc002d43c
c0020c34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c38:	e8 5b fc fd ff       	call   c0000898 <strcmp>
c0020c3d:	83 c4 10             	add    esp,0x10
c0020c40:	85 c0                	test   eax,eax
c0020c42:	0f 94 c0             	sete   al
c0020c45:	84 c0                	test   al,al
c0020c47:	74 0a                	je     c0020c53 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020c49:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020c51:	eb 58                	jmp    c0020cab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c53:	83 ec 08             	sub    esp,0x8
c0020c56:	68 2c a0 02 c0       	push   0xc002a02c
c0020c5b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c5f:	e8 34 fc fd ff       	call   c0000898 <strcmp>
c0020c64:	83 c4 10             	add    esp,0x10
c0020c67:	85 c0                	test   eax,eax
c0020c69:	0f 94 c0             	sete   al
c0020c6c:	84 c0                	test   al,al
c0020c6e:	74 0a                	je     c0020c7a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020c70:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020c78:	eb 31                	jmp    c0020cab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020c7a:	83 ec 08             	sub    esp,0x8
c0020c7d:	68 42 d4 02 c0       	push   0xc002d442
c0020c82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020c86:	e8 0d fc fd ff       	call   c0000898 <strcmp>
c0020c8b:	83 c4 10             	add    esp,0x10
c0020c8e:	85 c0                	test   eax,eax
c0020c90:	0f 94 c0             	sete   al
c0020c93:	84 c0                	test   al,al
c0020c95:	74 0a                	je     c0020ca1 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020c97:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020c9f:	eb 0a                	jmp    c0020cab <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020ca1:	b8 08 00 00 00       	mov    eax,0x8
c0020ca6:	e9 04 01 00 00       	jmp    c0020daf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020cab:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020cb2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020cb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cbb:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020cc2:	83 f8 ff             	cmp    eax,0xffffffff
c0020cc5:	75 34                	jne    c0020cfb <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020cc7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020ccb:	88 c2                	mov    dl,al
c0020ccd:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020cd2:	01 d0                	add    eax,edx
c0020cd4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020cd8:	8b 15 c0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c0
c0020cde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ce2:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0020ce9:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020cee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020cf2:	89 14 85 60 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7a0],edx
c0020cf9:	eb 17                	jmp    c0020d12 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020cfb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020cff:	88 c2                	mov    dl,al
c0020d01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d05:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020d0c:	01 d0                	add    eax,edx
c0020d0e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020d12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d16:	88 04 24             	mov    BYTE PTR [esp],al
c0020d19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020d1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020d29:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020d2e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020d36:	83 ec 0c             	sub    esp,0xc
c0020d39:	68 00 20 00 00       	push   0x2000
c0020d3e:	e8 49 eb fe ff       	call   c000f88c <malloc>
c0020d43:	83 c4 10             	add    esp,0x10
c0020d46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d4a:	68 00 20 00 00       	push   0x2000
c0020d4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d57:	50                   	push   eax
c0020d58:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020d5c:	50                   	push   eax
c0020d5d:	e8 d5 65 fe ff       	call   c0007337 <f_mkfs>
c0020d62:	83 c4 10             	add    esp,0x10
c0020d65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020d69:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020d6e:	75 07                	jne    c0020d77 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020d70:	b8 00 00 00 00       	mov    eax,0x0
c0020d75:	eb 38                	jmp    c0020daf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020d77:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020d7c:	75 17                	jne    c0020d95 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020d7e:	83 ec 0c             	sub    esp,0xc
c0020d81:	68 80 d4 02 c0       	push   0xc002d480
c0020d86:	e8 a2 1d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0020d8b:	83 c4 10             	add    esp,0x10
c0020d8e:	b8 09 00 00 00       	mov    eax,0x9
c0020d93:	eb 1a                	jmp    c0020daf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020d95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d99:	83 ec 08             	sub    esp,0x8
c0020d9c:	50                   	push   eax
c0020d9d:	68 48 d4 02 c0       	push   0xc002d448
c0020da2:	e8 86 1d ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0020da7:	83 c4 10             	add    esp,0x10
c0020daa:	b8 01 00 00 00       	mov    eax,0x1
c0020daf:	83 c4 2c             	add    esp,0x2c
c0020db2:	c3                   	ret    
c0020db3:	90                   	nop

c0020db4 <FAT::tryMount(LogicalDisk*, int)>:
c0020db4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020dba:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020dbf:	83 f8 14             	cmp    eax,0x14
c0020dc2:	75 17                	jne    c0020ddb <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020dc4:	83 ec 0c             	sub    esp,0xc
c0020dc7:	68 5a d4 02 c0       	push   0xc002d45a
c0020dcc:	e8 c8 98 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0020dd1:	83 c4 10             	add    esp,0x10
c0020dd4:	b0 00                	mov    al,0x0
c0020dd6:	e9 d7 01 00 00       	jmp    c0020fb2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ddb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020de2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020de8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020dee:	3d 00 02 00 00       	cmp    eax,0x200
c0020df3:	74 07                	je     c0020dfc <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020df5:	b0 00                	mov    al,0x0
c0020df7:	e9 b6 01 00 00       	jmp    c0020fb2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020dfc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020e04:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020e0b:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0020e12:	83 f8 ff             	cmp    eax,0xffffffff
c0020e15:	74 07                	je     c0020e1e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020e17:	b0 01                	mov    al,0x1
c0020e19:	e9 94 01 00 00       	jmp    c0020fb2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020e1e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020e28:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020e30:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020e37:	88 c2                	mov    dl,al
c0020e39:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020e3e:	01 d0                	add    eax,edx
c0020e40:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020e47:	8b 15 c0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327c0
c0020e4d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020e54:	89 14 85 e0 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd820],edx
c0020e5b:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020e60:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020e67:	89 14 85 60 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd7a0],edx
c0020e6e:	83 ec 0c             	sub    esp,0xc
c0020e71:	68 54 02 00 00       	push   0x254
c0020e76:	e8 11 ea fe ff       	call   c000f88c <malloc>
c0020e7b:	83 c4 10             	add    esp,0x10
c0020e7e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020e85:	83 ec 04             	sub    esp,0x4
c0020e88:	6a 00                	push   0x0
c0020e8a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020e91:	50                   	push   eax
c0020e92:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020e99:	e8 57 40 fe ff       	call   c0004ef5 <f_mount>
c0020e9e:	83 c4 10             	add    esp,0x10
c0020ea1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ea8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020eb0:	74 19                	je     c0020ecb <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020eb2:	83 ec 0c             	sub    esp,0xc
c0020eb5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ebc:	e8 eb e9 fe ff       	call   c000f8ac <rfree>
c0020ec1:	83 c4 10             	add    esp,0x10
c0020ec4:	b0 00                	mov    al,0x0
c0020ec6:	e9 e7 00 00 00       	jmp    c0020fb2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ecb:	83 ec 04             	sub    esp,0x4
c0020ece:	68 00 01 00 00       	push   0x100
c0020ed3:	6a 00                	push   0x0
c0020ed5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020edc:	50                   	push   eax
c0020edd:	e8 6e f8 fd ff       	call   c0000750 <memset>
c0020ee2:	83 c4 10             	add    esp,0x10
c0020ee5:	83 ec 08             	sub    esp,0x8
c0020ee8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020eef:	50                   	push   eax
c0020ef0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ef7:	50                   	push   eax
c0020ef8:	e8 4f fa fd ff       	call   c000094c <strcat>
c0020efd:	83 c4 10             	add    esp,0x10
c0020f00:	83 ec 08             	sub    esp,0x8
c0020f03:	68 68 d4 02 c0       	push   0xc002d468
c0020f08:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020f0f:	50                   	push   eax
c0020f10:	e8 37 fa fd ff       	call   c000094c <strcat>
c0020f15:	83 c4 10             	add    esp,0x10
c0020f18:	83 ec 04             	sub    esp,0x4
c0020f1b:	6a 01                	push   0x1
c0020f1d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020f24:	50                   	push   eax
c0020f25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f29:	50                   	push   eax
c0020f2a:	e8 28 40 fe ff       	call   c0004f57 <f_open>
c0020f2f:	83 c4 10             	add    esp,0x10
c0020f32:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020f39:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020f40:	85 c0                	test   eax,eax
c0020f42:	74 0a                	je     c0020f4e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020f44:	78 2d                	js     c0020f73 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020f46:	83 e8 04             	sub    eax,0x4
c0020f49:	83 f8 01             	cmp    eax,0x1
c0020f4c:	77 25                	ja     c0020f73 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020f4e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020f56:	83 ec 0c             	sub    esp,0xc
c0020f59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f5d:	50                   	push   eax
c0020f5e:	e8 46 4b fe ff       	call   c0005aa9 <f_close>
c0020f63:	83 c4 10             	add    esp,0x10
c0020f66:	90                   	nop
c0020f67:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020f6f:	74 3a                	je     c0020fab <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020f71:	eb 2d                	jmp    c0020fa0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020f73:	83 ec 0c             	sub    esp,0xc
c0020f76:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020f7d:	e8 2a e9 fe ff       	call   c000f8ac <rfree>
c0020f82:	83 c4 10             	add    esp,0x10
c0020f85:	83 ec 04             	sub    esp,0x4
c0020f88:	6a 00                	push   0x0
c0020f8a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020f91:	50                   	push   eax
c0020f92:	6a 00                	push   0x0
c0020f94:	e8 5c 3f fe ff       	call   c0004ef5 <f_mount>
c0020f99:	83 c4 10             	add    esp,0x10
c0020f9c:	b0 00                	mov    al,0x0
c0020f9e:	eb 12                	jmp    c0020fb2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fa0:	a1 c0 27 03 c0       	mov    eax,ds:0xc00327c0
c0020fa5:	40                   	inc    eax
c0020fa6:	a3 c0 27 03 c0       	mov    ds:0xc00327c0,eax
c0020fab:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020fb2:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020fb8:	c3                   	ret    
c0020fb9:	90                   	nop

c0020fba <FAT::getFileFirstSector(char const*)>:
c0020fba:	53                   	push   ebx
c0020fbb:	83 ec 28             	sub    esp,0x28
c0020fbe:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020fc6:	83 ec 0c             	sub    esp,0xc
c0020fc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fcd:	e8 ba e8 fe ff       	call   c000f88c <malloc>
c0020fd2:	83 c4 10             	add    esp,0x10
c0020fd5:	89 c3                	mov    ebx,eax
c0020fd7:	a1 f0 26 03 c0       	mov    eax,ds:0xc00326f0
c0020fdc:	83 ec 04             	sub    esp,0x4
c0020fdf:	50                   	push   eax
c0020fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020fe4:	53                   	push   ebx
c0020fe5:	e8 a2 20 ff ff       	call   c001308c <File::File(char const*, Process*)>
c0020fea:	83 c4 10             	add    esp,0x10
c0020fed:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020ff1:	83 ec 08             	sub    esp,0x8
c0020ff4:	6a 01                	push   0x1
c0020ff6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020ffa:	e8 f1 20 ff ff       	call   c00130f0 <File::open(FileOpenMode)>
c0020fff:	83 c4 10             	add    esp,0x10
c0021002:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021006:	8b 00                	mov    eax,DWORD PTR [eax]
c0021008:	83 c0 0c             	add    eax,0xc
c002100b:	8b 00                	mov    eax,DWORD PTR [eax]
c002100d:	83 ec 0c             	sub    esp,0xc
c0021010:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021014:	52                   	push   edx
c0021015:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021019:	52                   	push   edx
c002101a:	6a 00                	push   0x0
c002101c:	6a 04                	push   0x4
c002101e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021022:	ff d0                	call   eax
c0021024:	83 c4 20             	add    esp,0x20
c0021027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002102b:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021031:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021035:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021039:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002103c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002103f:	83 ec 04             	sub    esp,0x4
c0021042:	52                   	push   edx
c0021043:	50                   	push   eax
c0021044:	68 73 d4 02 c0       	push   0xc002d473
c0021049:	e8 df 1a ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002104e:	83 c4 10             	add    esp,0x10
c0021051:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021055:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021058:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002105b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002105f:	83 ec 0c             	sub    esp,0xc
c0021062:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021066:	e8 e3 20 ff ff       	call   c001314e <File::close()>
c002106b:	83 c4 10             	add    esp,0x10
c002106e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021072:	ba 00 00 00 00       	mov    edx,0x0
c0021077:	83 c4 28             	add    esp,0x28
c002107a:	5b                   	pop    ebx
c002107b:	c3                   	ret    

c002107c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002107c:	57                   	push   edi
c002107d:	56                   	push   esi
c002107e:	53                   	push   ebx
c002107f:	81 ec 50 02 00 00    	sub    esp,0x250
c0021085:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002108d:	74 0a                	je     c0021099 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002108f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021097:	75 0a                	jne    c00210a3 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0021099:	b8 04 00 00 00       	mov    eax,0x4
c002109e:	e9 29 01 00 00       	jmp    c00211cc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00210a3:	83 ec 08             	sub    esp,0x8
c00210a6:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00210ad:	50                   	push   eax
c00210ae:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00210b5:	e8 f9 4f fe ff       	call   c00060b3 <f_readdir>
c00210ba:	83 c4 10             	add    esp,0x10
c00210bd:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00210c4:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00210cb:	83 ec 0c             	sub    esp,0xc
c00210ce:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00210d5:	83 c0 1a             	add    eax,0x1a
c00210d8:	50                   	push   eax
c00210d9:	e8 8e f6 fd ff       	call   c000076c <strlen>
c00210de:	83 c4 10             	add    esp,0x10
c00210e1:	ba 00 00 00 00       	mov    edx,0x0
c00210e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00210ee:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00210f5:	0f b6 c0             	movzx  eax,al
c00210f8:	83 e0 10             	and    eax,0x10
c00210fb:	74 07                	je     c0021104 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00210fd:	b8 02 00 00 00       	mov    eax,0x2
c0021102:	eb 05                	jmp    c0021109 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0021104:	b8 01 00 00 00       	mov    eax,0x1
c0021109:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002110d:	83 ec 08             	sub    esp,0x8
c0021110:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021117:	83 c0 1a             	add    eax,0x1a
c002111a:	50                   	push   eax
c002111b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002111f:	83 c0 10             	add    eax,0x10
c0021122:	50                   	push   eax
c0021123:	e8 e4 f6 fd ff       	call   c000080c <strcpy>
c0021128:	83 c4 10             	add    esp,0x10
c002112b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0021132:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021139:	8d 44 24 04          	lea    eax,[esp+0x4]
c002113d:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0021144:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002114b:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0021152:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0021159:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0021160:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021167:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002116e:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0021175:	89 c6                	mov    esi,eax
c0021177:	89 d7                	mov    edi,edx
c0021179:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002117b:	89 c8                	mov    eax,ecx
c002117d:	89 fa                	mov    edx,edi
c002117f:	89 f3                	mov    ebx,esi
c0021181:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0021188:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002118f:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0021196:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c002119d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00211a3:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00211aa:	84 c0                	test   al,al
c00211ac:	75 07                	jne    c00211b5 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00211ae:	b8 07 00 00 00       	mov    eax,0x7
c00211b3:	eb 17                	jmp    c00211cc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00211b5:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00211bc:	85 c0                	test   eax,eax
c00211be:	75 07                	jne    c00211c7 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00211c0:	b8 00 00 00 00       	mov    eax,0x0
c00211c5:	eb 05                	jmp    c00211cc <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00211c7:	b8 01 00 00 00       	mov    eax,0x1
c00211cc:	81 c4 50 02 00 00    	add    esp,0x250
c00211d2:	5b                   	pop    ebx
c00211d3:	5e                   	pop    esi
c00211d4:	5f                   	pop    edi
c00211d5:	c3                   	ret    

c00211d6 <FAT::read(void*, unsigned long, void*, int*)>:
c00211d6:	83 ec 1c             	sub    esp,0x1c
c00211d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00211de:	74 07                	je     c00211e7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00211e0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00211e5:	75 07                	jne    c00211ee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00211e7:	b8 04 00 00 00       	mov    eax,0x4
c00211ec:	eb 3d                	jmp    c002122b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00211ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211f2:	50                   	push   eax
c00211f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00211f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00211fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00211ff:	e8 8f 41 fe ff       	call   c0005393 <f_read>
c0021204:	83 c4 10             	add    esp,0x10
c0021207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002120b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002120f:	89 c2                	mov    edx,eax
c0021211:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021215:	89 10                	mov    DWORD PTR [eax],edx
c0021217:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002121b:	85 c0                	test   eax,eax
c002121d:	75 07                	jne    c0021226 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002121f:	b8 00 00 00 00       	mov    eax,0x0
c0021224:	eb 05                	jmp    c002122b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021226:	b8 01 00 00 00       	mov    eax,0x1
c002122b:	83 c4 1c             	add    esp,0x1c
c002122e:	c3                   	ret    
c002122f:	90                   	nop

c0021230 <FAT::write(void*, unsigned long, void*, int*)>:
c0021230:	83 ec 1c             	sub    esp,0x1c
c0021233:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021238:	74 07                	je     c0021241 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002123a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002123f:	75 07                	jne    c0021248 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0021241:	b8 04 00 00 00       	mov    eax,0x4
c0021246:	eb 3d                	jmp    c0021285 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021248:	8d 44 24 08          	lea    eax,[esp+0x8]
c002124c:	50                   	push   eax
c002124d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021251:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0021255:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021259:	e8 b5 43 fe ff       	call   c0005613 <f_write>
c002125e:	83 c4 10             	add    esp,0x10
c0021261:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021269:	89 c2                	mov    edx,eax
c002126b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002126f:	89 10                	mov    DWORD PTR [eax],edx
c0021271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021275:	85 c0                	test   eax,eax
c0021277:	75 07                	jne    c0021280 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021279:	b8 00 00 00 00       	mov    eax,0x0
c002127e:	eb 05                	jmp    c0021285 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021280:	b8 01 00 00 00       	mov    eax,0x1
c0021285:	83 c4 1c             	add    esp,0x1c
c0021288:	c3                   	ret    
c0021289:	90                   	nop

c002128a <FAT::close(void*)>:
c002128a:	83 ec 1c             	sub    esp,0x1c
c002128d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021292:	75 07                	jne    c002129b <FAT::close(void*)+0x11>
c0021294:	b8 04 00 00 00       	mov    eax,0x4
c0021299:	eb 36                	jmp    c00212d1 <FAT::close(void*)+0x47>
c002129b:	83 ec 0c             	sub    esp,0xc
c002129e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212a2:	e8 02 48 fe ff       	call   c0005aa9 <f_close>
c00212a7:	83 c4 10             	add    esp,0x10
c00212aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212ae:	83 ec 0c             	sub    esp,0xc
c00212b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212b5:	e8 e2 e5 fe ff       	call   c000f89c <free>
c00212ba:	83 c4 10             	add    esp,0x10
c00212bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c1:	85 c0                	test   eax,eax
c00212c3:	75 07                	jne    c00212cc <FAT::close(void*)+0x42>
c00212c5:	b8 00 00 00 00       	mov    eax,0x0
c00212ca:	eb 05                	jmp    c00212d1 <FAT::close(void*)+0x47>
c00212cc:	b8 01 00 00 00       	mov    eax,0x1
c00212d1:	83 c4 1c             	add    esp,0x1c
c00212d4:	c3                   	ret    
c00212d5:	90                   	nop

c00212d6 <FAT::closeDir(void*)>:
c00212d6:	83 ec 1c             	sub    esp,0x1c
c00212d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00212de:	75 07                	jne    c00212e7 <FAT::closeDir(void*)+0x11>
c00212e0:	b8 04 00 00 00       	mov    eax,0x4
c00212e5:	eb 36                	jmp    c002131d <FAT::closeDir(void*)+0x47>
c00212e7:	83 ec 0c             	sub    esp,0xc
c00212ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00212ee:	e8 9e 4d fe ff       	call   c0006091 <f_closedir>
c00212f3:	83 c4 10             	add    esp,0x10
c00212f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212fa:	83 ec 0c             	sub    esp,0xc
c00212fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021301:	e8 96 e5 fe ff       	call   c000f89c <free>
c0021306:	83 c4 10             	add    esp,0x10
c0021309:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002130d:	85 c0                	test   eax,eax
c002130f:	75 07                	jne    c0021318 <FAT::closeDir(void*)+0x42>
c0021311:	b8 00 00 00 00       	mov    eax,0x0
c0021316:	eb 05                	jmp    c002131d <FAT::closeDir(void*)+0x47>
c0021318:	b8 01 00 00 00       	mov    eax,0x1
c002131d:	83 c4 1c             	add    esp,0x1c
c0021320:	c3                   	ret    
c0021321:	90                   	nop

c0021322 <FAT::seek(void*, unsigned long long)>:
c0021322:	83 ec 2c             	sub    esp,0x2c
c0021325:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021329:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002132d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021331:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021335:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002133a:	75 07                	jne    c0021343 <FAT::seek(void*, unsigned long long)+0x21>
c002133c:	b8 04 00 00 00       	mov    eax,0x4
c0021341:	eb 2f                	jmp    c0021372 <FAT::seek(void*, unsigned long long)+0x50>
c0021343:	83 ec 04             	sub    esp,0x4
c0021346:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002134a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002134e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0021352:	e8 81 47 fe ff       	call   c0005ad8 <f_lseek>
c0021357:	83 c4 10             	add    esp,0x10
c002135a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002135e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021362:	85 c0                	test   eax,eax
c0021364:	75 07                	jne    c002136d <FAT::seek(void*, unsigned long long)+0x4b>
c0021366:	b8 00 00 00 00       	mov    eax,0x0
c002136b:	eb 05                	jmp    c0021372 <FAT::seek(void*, unsigned long long)+0x50>
c002136d:	b8 01 00 00 00       	mov    eax,0x1
c0021372:	83 c4 2c             	add    esp,0x2c
c0021375:	c3                   	ret    

c0021376 <fatWrapperReadDisk>:
c0021376:	83 ec 1c             	sub    esp,0x1c
c0021379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002137d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021381:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021385:	89 04 24             	mov    DWORD PTR [esp],eax
c0021388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002138c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021390:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021395:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c002139c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00213a0:	83 ec 0c             	sub    esp,0xc
c00213a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213a7:	52                   	push   edx
c00213a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213b0:	50                   	push   eax
c00213b1:	e8 f4 50 ff ff       	call   c00164aa <LogicalDisk::read(unsigned long long, int, void*)>
c00213b6:	83 c4 20             	add    esp,0x20
c00213b9:	83 c4 1c             	add    esp,0x1c
c00213bc:	c3                   	ret    

c00213bd <fatWrapperWriteDisk>:
c00213bd:	83 ec 1c             	sub    esp,0x1c
c00213c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00213c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00213c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00213cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00213cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00213d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00213d7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00213dc:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c00213e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00213e7:	83 ec 0c             	sub    esp,0xc
c00213ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213ee:	52                   	push   edx
c00213ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00213f7:	50                   	push   eax
c00213f8:	e8 19 51 ff ff       	call   c0016516 <LogicalDisk::write(unsigned long long, int, void*)>
c00213fd:	83 c4 20             	add    esp,0x20
c0021400:	83 c4 1c             	add    esp,0x1c
c0021403:	c3                   	ret    

c0021404 <fatWrapperIoctl>:
c0021404:	53                   	push   ebx
c0021405:	83 ec 28             	sub    esp,0x28
c0021408:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002140c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021410:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021414:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021418:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002141d:	75 31                	jne    c0021450 <fatWrapperIoctl+0x4c>
c002141f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021423:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021427:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002142c:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c0021433:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021439:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002143f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021443:	66 89 02             	mov    WORD PTR [edx],ax
c0021446:	b8 00 00 00 00       	mov    eax,0x0
c002144b:	e9 b2 00 00 00       	jmp    c0021502 <fatWrapperIoctl+0xfe>
c0021450:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0021455:	75 6a                	jne    c00214c1 <fatWrapperIoctl+0xbd>
c0021457:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002145b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002145f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021464:	8b 04 85 a0 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0860]
c002146b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021471:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021477:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002147d:	89 c8                	mov    eax,ecx
c002147f:	89 da                	mov    edx,ebx
c0021481:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021485:	c1 e0 0a             	shl    eax,0xa
c0021488:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002148d:	8b 0c 8d a0 f7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0860]
c0021494:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002149a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00214a0:	89 cb                	mov    ebx,ecx
c00214a2:	c1 fb 1f             	sar    ebx,0x1f
c00214a5:	53                   	push   ebx
c00214a6:	51                   	push   ecx
c00214a7:	52                   	push   edx
c00214a8:	50                   	push   eax
c00214a9:	e8 c6 5f 00 00       	call   c0027474 <__udivdi3>
c00214ae:	83 c4 10             	add    esp,0x10
c00214b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00214b5:	89 01                	mov    DWORD PTR [ecx],eax
c00214b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00214ba:	b8 00 00 00 00       	mov    eax,0x0
c00214bf:	eb 41                	jmp    c0021502 <fatWrapperIoctl+0xfe>
c00214c1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00214c6:	75 07                	jne    c00214cf <fatWrapperIoctl+0xcb>
c00214c8:	b8 00 00 00 00       	mov    eax,0x0
c00214cd:	eb 33                	jmp    c0021502 <fatWrapperIoctl+0xfe>
c00214cf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00214d4:	75 19                	jne    c00214ef <fatWrapperIoctl+0xeb>
c00214d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00214da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00214de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214e2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00214e8:	b8 00 00 00 00       	mov    eax,0x0
c00214ed:	eb 13                	jmp    c0021502 <fatWrapperIoctl+0xfe>
c00214ef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00214f4:	75 07                	jne    c00214fd <fatWrapperIoctl+0xf9>
c00214f6:	b8 00 00 00 00       	mov    eax,0x0
c00214fb:	eb 05                	jmp    c0021502 <fatWrapperIoctl+0xfe>
c00214fd:	b8 04 00 00 00       	mov    eax,0x4
c0021502:	83 c4 28             	add    esp,0x28
c0021505:	5b                   	pop    ebx
c0021506:	c3                   	ret    
c0021507:	90                   	nop

c0021508 <FAT::FAT()>:
c0021508:	83 ec 1c             	sub    esp,0x1c
c002150b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002150f:	83 ec 0c             	sub    esp,0xc
c0021512:	50                   	push   eax
c0021513:	e8 20 19 ff ff       	call   c0012e38 <Filesystem::Filesystem()>
c0021518:	83 c4 10             	add    esp,0x10
c002151b:	ba b0 d4 02 c0       	mov    edx,0xc002d4b0
c0021520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021524:	89 10                	mov    DWORD PTR [eax],edx
c0021526:	c7 05 c0 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327c0,0x0
c0021530:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021538:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002153d:	7f 15                	jg     c0021554 <FAT::FAT()+0x4c>
c002153f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021543:	c7 04 85 e0 27 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd820],0xffffffff
c002154e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021552:	eb e4                	jmp    c0021538 <FAT::FAT()+0x30>
c0021554:	90                   	nop
c0021555:	83 c4 1c             	add    esp,0x1c
c0021558:	c3                   	ret    
c0021559:	90                   	nop

c002155a <FAT::fixFilepath(char*)>:
c002155a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002155e:	8a 00                	mov    al,BYTE PTR [eax]
c0021560:	3c 40                	cmp    al,0x40
c0021562:	7e 2c                	jle    c0021590 <FAT::fixFilepath(char*)+0x36>
c0021564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021568:	8a 00                	mov    al,BYTE PTR [eax]
c002156a:	83 e8 41             	sub    eax,0x41
c002156d:	88 c2                	mov    dl,al
c002156f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021573:	88 10                	mov    BYTE PTR [eax],dl
c0021575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021579:	8a 00                	mov    al,BYTE PTR [eax]
c002157b:	0f be c0             	movsx  eax,al
c002157e:	8b 04 85 e0 27 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd820]
c0021585:	83 c0 30             	add    eax,0x30
c0021588:	88 c2                	mov    dl,al
c002158a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002158e:	88 10                	mov    BYTE PTR [eax],dl
c0021590:	90                   	nop
c0021591:	c3                   	ret    

c0021592 <FAT::open(char const*, void**, FileOpenMode)>:
c0021592:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021598:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215a0:	74 0a                	je     c00215ac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00215a2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00215aa:	75 0a                	jne    c00215b6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00215ac:	b8 04 00 00 00       	mov    eax,0x4
c00215b1:	e9 fd 00 00 00       	jmp    c00216b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00215b6:	83 ec 08             	sub    esp,0x8
c00215b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215c4:	50                   	push   eax
c00215c5:	e8 42 f2 fd ff       	call   c000080c <strcpy>
c00215ca:	83 c4 10             	add    esp,0x10
c00215cd:	83 ec 08             	sub    esp,0x8
c00215d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00215d4:	50                   	push   eax
c00215d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215dc:	e8 79 ff ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00215ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00215f3:	83 e0 01             	and    eax,0x1
c00215f6:	74 08                	je     c0021600 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00215f8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021600:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021607:	83 e0 04             	and    eax,0x4
c002160a:	74 10                	je     c002161c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002160c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021614:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002161c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021623:	83 e0 02             	and    eax,0x2
c0021626:	74 08                	je     c0021630 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021628:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021630:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021637:	83 e0 08             	and    eax,0x8
c002163a:	74 08                	je     c0021644 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002163c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021644:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002164b:	83 e0 10             	and    eax,0x10
c002164e:	74 08                	je     c0021658 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021650:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021658:	83 ec 0c             	sub    esp,0xc
c002165b:	68 50 02 00 00       	push   0x250
c0021660:	e8 27 e2 fe ff       	call   c000f88c <malloc>
c0021665:	83 c4 10             	add    esp,0x10
c0021668:	89 c2                	mov    edx,eax
c002166a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021671:	89 10                	mov    DWORD PTR [eax],edx
c0021673:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002167b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021682:	8b 00                	mov    eax,DWORD PTR [eax]
c0021684:	83 ec 04             	sub    esp,0x4
c0021687:	52                   	push   edx
c0021688:	8d 54 24 10          	lea    edx,[esp+0x10]
c002168c:	52                   	push   edx
c002168d:	50                   	push   eax
c002168e:	e8 c4 38 fe ff       	call   c0004f57 <f_open>
c0021693:	83 c4 10             	add    esp,0x10
c0021696:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002169d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00216a5:	74 07                	je     c00216ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00216a7:	b8 01 00 00 00       	mov    eax,0x1
c00216ac:	eb 05                	jmp    c00216b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00216ae:	b8 00 00 00 00       	mov    eax,0x0
c00216b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00216b9:	c3                   	ret    

c00216ba <FAT::openDir(char const*, void**)>:
c00216ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00216c8:	74 0a                	je     c00216d4 <FAT::openDir(char const*, void**)+0x1a>
c00216ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00216d2:	75 07                	jne    c00216db <FAT::openDir(char const*, void**)+0x21>
c00216d4:	b8 04 00 00 00       	mov    eax,0x4
c00216d9:	eb 7d                	jmp    c0021758 <FAT::openDir(char const*, void**)+0x9e>
c00216db:	83 ec 08             	sub    esp,0x8
c00216de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00216e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216e9:	50                   	push   eax
c00216ea:	e8 1d f1 fd ff       	call   c000080c <strcpy>
c00216ef:	83 c4 10             	add    esp,0x10
c00216f2:	83 ec 08             	sub    esp,0x8
c00216f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216f9:	50                   	push   eax
c00216fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021701:	e8 54 fe ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c0021706:	83 c4 10             	add    esp,0x10
c0021709:	83 ec 0c             	sub    esp,0xc
c002170c:	6a 4c                	push   0x4c
c002170e:	e8 79 e1 fe ff       	call   c000f88c <malloc>
c0021713:	83 c4 10             	add    esp,0x10
c0021716:	89 c2                	mov    edx,eax
c0021718:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002171f:	89 10                	mov    DWORD PTR [eax],edx
c0021721:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021728:	8b 00                	mov    eax,DWORD PTR [eax]
c002172a:	83 ec 08             	sub    esp,0x8
c002172d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021731:	52                   	push   edx
c0021732:	50                   	push   eax
c0021733:	e8 57 48 fe ff       	call   c0005f8f <f_opendir>
c0021738:	83 c4 10             	add    esp,0x10
c002173b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021742:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002174a:	74 07                	je     c0021753 <FAT::openDir(char const*, void**)+0x99>
c002174c:	b8 01 00 00 00       	mov    eax,0x1
c0021751:	eb 05                	jmp    c0021758 <FAT::openDir(char const*, void**)+0x9e>
c0021753:	b8 00 00 00 00       	mov    eax,0x0
c0021758:	81 c4 1c 01 00 00    	add    esp,0x11c
c002175e:	c3                   	ret    
c002175f:	90                   	nop

c0021760 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021760:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021766:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002176e:	75 0a                	jne    c002177a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021770:	b8 04 00 00 00       	mov    eax,0x4
c0021775:	e9 c9 00 00 00       	jmp    c0021843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002177a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021782:	75 0a                	jne    c002178e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021784:	b8 04 00 00 00       	mov    eax,0x4
c0021789:	e9 b5 00 00 00       	jmp    c0021843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002178e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021796:	75 0a                	jne    c00217a2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021798:	b8 04 00 00 00       	mov    eax,0x4
c002179d:	e9 a1 00 00 00       	jmp    c0021843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00217a2:	83 ec 08             	sub    esp,0x8
c00217a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217ac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00217b3:	50                   	push   eax
c00217b4:	e8 53 f0 fd ff       	call   c000080c <strcpy>
c00217b9:	83 c4 10             	add    esp,0x10
c00217bc:	83 ec 08             	sub    esp,0x8
c00217bf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00217c6:	50                   	push   eax
c00217c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217ce:	e8 87 fd ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c00217d3:	83 c4 10             	add    esp,0x10
c00217d6:	83 ec 08             	sub    esp,0x8
c00217d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217dd:	50                   	push   eax
c00217de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00217e5:	50                   	push   eax
c00217e6:	e8 63 49 fe ff       	call   c000614e <f_stat>
c00217eb:	83 c4 10             	add    esp,0x10
c00217ee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00217f5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00217fc:	85 c0                	test   eax,eax
c00217fe:	74 07                	je     c0021807 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021800:	83 f8 04             	cmp    eax,0x4
c0021803:	74 32                	je     c0021837 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021805:	eb 37                	jmp    c002183e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021807:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002180b:	0f b6 c0             	movzx  eax,al
c002180e:	83 e0 10             	and    eax,0x10
c0021811:	0f 95 c2             	setne  dl
c0021814:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002181b:	88 10                	mov    BYTE PTR [eax],dl
c002181d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021820:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021824:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002182b:	89 01                	mov    DWORD PTR [ecx],eax
c002182d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021830:	b8 00 00 00 00       	mov    eax,0x0
c0021835:	eb 0c                	jmp    c0021843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021837:	b8 02 00 00 00       	mov    eax,0x2
c002183c:	eb 05                	jmp    c0021843 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002183e:	b8 01 00 00 00       	mov    eax,0x1
c0021843:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021849:	c3                   	ret    

c002184a <FAT::unlink(char const*)>:
c002184a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021850:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021858:	75 07                	jne    c0021861 <FAT::unlink(char const*)+0x17>
c002185a:	b8 04 00 00 00       	mov    eax,0x4
c002185f:	eb 5c                	jmp    c00218bd <FAT::unlink(char const*)+0x73>
c0021861:	83 ec 08             	sub    esp,0x8
c0021864:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002186b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002186f:	50                   	push   eax
c0021870:	e8 97 ef fd ff       	call   c000080c <strcpy>
c0021875:	83 c4 10             	add    esp,0x10
c0021878:	83 ec 08             	sub    esp,0x8
c002187b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002187f:	50                   	push   eax
c0021880:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021887:	e8 ce fc ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c002188c:	83 c4 10             	add    esp,0x10
c002188f:	83 ec 0c             	sub    esp,0xc
c0021892:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021896:	50                   	push   eax
c0021897:	e8 04 4c fe ff       	call   c00064a0 <f_unlink>
c002189c:	83 c4 10             	add    esp,0x10
c002189f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218a6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00218ad:	85 c0                	test   eax,eax
c00218af:	75 07                	jne    c00218b8 <FAT::unlink(char const*)+0x6e>
c00218b1:	b8 00 00 00 00       	mov    eax,0x0
c00218b6:	eb 05                	jmp    c00218bd <FAT::unlink(char const*)+0x73>
c00218b8:	b8 01 00 00 00       	mov    eax,0x1
c00218bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218c3:	c3                   	ret    

c00218c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00218c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00218ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00218d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00218d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00218dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00218e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00218e8:	75 0a                	jne    c00218f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00218ea:	b8 04 00 00 00       	mov    eax,0x4
c00218ef:	e9 1c 01 00 00       	jmp    c0021a10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00218f4:	83 ec 08             	sub    esp,0x8
c00218f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00218fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021902:	50                   	push   eax
c0021903:	e8 04 ef fd ff       	call   c000080c <strcpy>
c0021908:	83 c4 10             	add    esp,0x10
c002190b:	83 ec 08             	sub    esp,0x8
c002190e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021912:	50                   	push   eax
c0021913:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002191a:	e8 3b fc ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c002191f:	83 c4 10             	add    esp,0x10
c0021922:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002192a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021932:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021937:	83 e0 01             	and    eax,0x1
c002193a:	74 08                	je     c0021944 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002193c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021944:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021949:	83 e0 02             	and    eax,0x2
c002194c:	74 08                	je     c0021956 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002194e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021956:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002195b:	83 e0 04             	and    eax,0x4
c002195e:	74 08                	je     c0021968 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021960:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021968:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002196d:	83 e0 08             	and    eax,0x8
c0021970:	74 08                	je     c002197a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021972:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002197a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002197f:	83 e0 01             	and    eax,0x1
c0021982:	74 08                	je     c002198c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021984:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002198c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021991:	83 e0 02             	and    eax,0x2
c0021994:	74 08                	je     c002199e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021996:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002199e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00219a3:	83 e0 04             	and    eax,0x4
c00219a6:	74 08                	je     c00219b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00219a8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00219b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00219b5:	83 e0 08             	and    eax,0x8
c00219b8:	74 08                	je     c00219c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00219ba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00219c2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00219c9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00219d0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00219d8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00219e0:	83 ec 04             	sub    esp,0x4
c00219e3:	52                   	push   edx
c00219e4:	50                   	push   eax
c00219e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219e9:	50                   	push   eax
c00219ea:	e8 53 51 fe ff       	call   c0006b42 <f_chmod>
c00219ef:	83 c4 10             	add    esp,0x10
c00219f2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00219f9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021a00:	85 c0                	test   eax,eax
c0021a02:	75 07                	jne    c0021a0b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021a04:	b8 00 00 00 00       	mov    eax,0x0
c0021a09:	eb 05                	jmp    c0021a10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a0b:	b8 01 00 00 00       	mov    eax,0x1
c0021a10:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021a16:	c3                   	ret    
c0021a17:	90                   	nop

c0021a18 <FAT::rename(char const*, char const*)>:
c0021a18:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021a1e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021a26:	74 0a                	je     c0021a32 <FAT::rename(char const*, char const*)+0x1a>
c0021a28:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021a30:	75 0a                	jne    c0021a3c <FAT::rename(char const*, char const*)+0x24>
c0021a32:	b8 04 00 00 00       	mov    eax,0x4
c0021a37:	e9 98 00 00 00       	jmp    c0021ad4 <FAT::rename(char const*, char const*)+0xbc>
c0021a3c:	83 ec 08             	sub    esp,0x8
c0021a3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021a46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021a4d:	50                   	push   eax
c0021a4e:	e8 b9 ed fd ff       	call   c000080c <strcpy>
c0021a53:	83 c4 10             	add    esp,0x10
c0021a56:	83 ec 08             	sub    esp,0x8
c0021a59:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021a60:	50                   	push   eax
c0021a61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021a68:	e8 ed fa ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c0021a6d:	83 c4 10             	add    esp,0x10
c0021a70:	83 ec 08             	sub    esp,0x8
c0021a73:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021a7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a7e:	50                   	push   eax
c0021a7f:	e8 88 ed fd ff       	call   c000080c <strcpy>
c0021a84:	83 c4 10             	add    esp,0x10
c0021a87:	83 ec 08             	sub    esp,0x8
c0021a8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a8e:	50                   	push   eax
c0021a8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021a96:	e8 bf fa ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c0021a9b:	83 c4 10             	add    esp,0x10
c0021a9e:	83 ec 08             	sub    esp,0x8
c0021aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021aa5:	50                   	push   eax
c0021aa6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021aad:	50                   	push   eax
c0021aae:	e8 9c 4d fe ff       	call   c000684f <f_rename>
c0021ab3:	83 c4 10             	add    esp,0x10
c0021ab6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021abd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021ac4:	85 c0                	test   eax,eax
c0021ac6:	75 07                	jne    c0021acf <FAT::rename(char const*, char const*)+0xb7>
c0021ac8:	b8 00 00 00 00       	mov    eax,0x0
c0021acd:	eb 05                	jmp    c0021ad4 <FAT::rename(char const*, char const*)+0xbc>
c0021acf:	b8 01 00 00 00       	mov    eax,0x1
c0021ad4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021ada:	c3                   	ret    
c0021adb:	90                   	nop

c0021adc <FAT::mkdir(char const*)>:
c0021adc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ae2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021aea:	75 07                	jne    c0021af3 <FAT::mkdir(char const*)+0x17>
c0021aec:	b8 04 00 00 00       	mov    eax,0x4
c0021af1:	eb 5c                	jmp    c0021b4f <FAT::mkdir(char const*)+0x73>
c0021af3:	83 ec 08             	sub    esp,0x8
c0021af6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021afd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b01:	50                   	push   eax
c0021b02:	e8 05 ed fd ff       	call   c000080c <strcpy>
c0021b07:	83 c4 10             	add    esp,0x10
c0021b0a:	83 ec 08             	sub    esp,0x8
c0021b0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b11:	50                   	push   eax
c0021b12:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021b19:	e8 3c fa ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c0021b1e:	83 c4 10             	add    esp,0x10
c0021b21:	83 ec 0c             	sub    esp,0xc
c0021b24:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b28:	50                   	push   eax
c0021b29:	e8 f5 4a fe ff       	call   c0006623 <f_mkdir>
c0021b2e:	83 c4 10             	add    esp,0x10
c0021b31:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b38:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021b3f:	85 c0                	test   eax,eax
c0021b41:	75 07                	jne    c0021b4a <FAT::mkdir(char const*)+0x6e>
c0021b43:	b8 00 00 00 00       	mov    eax,0x0
c0021b48:	eb 05                	jmp    c0021b4f <FAT::mkdir(char const*)+0x73>
c0021b4a:	b8 01 00 00 00       	mov    eax,0x1
c0021b4f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b55:	c3                   	ret    

c0021b56 <FAT::exists(char const*)>:
c0021b56:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021b5c:	83 ec 08             	sub    esp,0x8
c0021b5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021b6a:	50                   	push   eax
c0021b6b:	e8 9c ec fd ff       	call   c000080c <strcpy>
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	83 ec 08             	sub    esp,0x8
c0021b76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b7a:	50                   	push   eax
c0021b7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b82:	e8 d3 f9 ff ff       	call   c002155a <FAT::fixFilepath(char*)>
c0021b87:	83 c4 10             	add    esp,0x10
c0021b8a:	83 ec 08             	sub    esp,0x8
c0021b8d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021b94:	50                   	push   eax
c0021b95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021b99:	50                   	push   eax
c0021b9a:	e8 af 45 fe ff       	call   c000614e <f_stat>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021ba9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021bb0:	85 c0                	test   eax,eax
c0021bb2:	75 04                	jne    c0021bb8 <FAT::exists(char const*)+0x62>
c0021bb4:	b0 01                	mov    al,0x1
c0021bb6:	eb 02                	jmp    c0021bba <FAT::exists(char const*)+0x64>
c0021bb8:	b0 00                	mov    al,0x0
c0021bba:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021bc0:	c3                   	ret    
c0021bc1:	90                   	nop

c0021bc2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021bc2:	b8 08 00 00 00       	mov    eax,0x8
c0021bc7:	c3                   	ret    

c0021bc8 <ISO9660::seek(void*, unsigned long long)>:
c0021bc8:	53                   	push   ebx
c0021bc9:	b8 04 00 00 00       	mov    eax,0x4
c0021bce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021bd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021bd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021bda:	85 d2                	test   edx,edx
c0021bdc:	74 17                	je     c0021bf5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021bde:	89 c8                	mov    eax,ecx
c0021be0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021be3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021be6:	b8 01 00 00 00       	mov    eax,0x1
c0021beb:	73 08                	jae    c0021bf5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021bed:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021bf0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021bf3:	31 c0                	xor    eax,eax
c0021bf5:	5b                   	pop    ebx
c0021bf6:	c3                   	ret    
c0021bf7:	90                   	nop

c0021bf8 <ISO9660::tell(void*, unsigned long long*)>:
c0021bf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021bfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c00:	85 d2                	test   edx,edx
c0021c02:	74 12                	je     c0021c16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021c04:	85 c0                	test   eax,eax
c0021c06:	74 0e                	je     c0021c16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021c08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021c0b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021c0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021c11:	89 10                	mov    DWORD PTR [eax],edx
c0021c13:	31 c0                	xor    eax,eax
c0021c15:	c3                   	ret    
c0021c16:	b8 04 00 00 00       	mov    eax,0x4
c0021c1b:	c3                   	ret    

c0021c1c <ISO9660::getName()>:
c0021c1c:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0021c21:	c3                   	ret    

c0021c22 <ISO9660::stat(void*, unsigned long long*)>:
c0021c22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021c26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c2a:	85 d2                	test   edx,edx
c0021c2c:	74 12                	je     c0021c40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021c2e:	85 c0                	test   eax,eax
c0021c30:	74 0e                	je     c0021c40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021c32:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021c35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021c38:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021c3b:	89 10                	mov    DWORD PTR [eax],edx
c0021c3d:	31 c0                	xor    eax,eax
c0021c3f:	c3                   	ret    
c0021c40:	b8 04 00 00 00       	mov    eax,0x4
c0021c45:	c3                   	ret    

c0021c46 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c46:	b8 01 00 00 00       	mov    eax,0x1
c0021c4b:	c3                   	ret    

c0021c4c <ISO9660::unlink(char const*)>:
c0021c4c:	b8 01 00 00 00       	mov    eax,0x1
c0021c51:	c3                   	ret    

c0021c52 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021c52:	b8 01 00 00 00       	mov    eax,0x1
c0021c57:	c3                   	ret    

c0021c58 <ISO9660::rename(char const*, char const*)>:
c0021c58:	b8 01 00 00 00       	mov    eax,0x1
c0021c5d:	c3                   	ret    

c0021c5e <ISO9660::mkdir(char const*)>:
c0021c5e:	b8 01 00 00 00       	mov    eax,0x1
c0021c63:	c3                   	ret    

c0021c64 <ISO9660::close(void*)>:
c0021c64:	83 ec 0c             	sub    esp,0xc
c0021c67:	b8 04 00 00 00       	mov    eax,0x4
c0021c6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c70:	85 d2                	test   edx,edx
c0021c72:	74 0e                	je     c0021c82 <ISO9660::close(void*)+0x1e>
c0021c74:	83 ec 0c             	sub    esp,0xc
c0021c77:	52                   	push   edx
c0021c78:	e8 1f dc fe ff       	call   c000f89c <free>
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	31 c0                	xor    eax,eax
c0021c82:	83 c4 0c             	add    esp,0xc
c0021c85:	c3                   	ret    

c0021c86 <ISO9660::closeDir(void*)>:
c0021c86:	83 ec 0c             	sub    esp,0xc
c0021c89:	b8 04 00 00 00       	mov    eax,0x4
c0021c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c92:	85 d2                	test   edx,edx
c0021c94:	74 0e                	je     c0021ca4 <ISO9660::closeDir(void*)+0x1e>
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	52                   	push   edx
c0021c9a:	e8 fd db fe ff       	call   c000f89c <free>
c0021c9f:	83 c4 10             	add    esp,0x10
c0021ca2:	31 c0                	xor    eax,eax
c0021ca4:	83 c4 0c             	add    esp,0xc
c0021ca7:	c3                   	ret    

c0021ca8 <ISO9660::~ISO9660()>:
c0021ca8:	83 ec 0c             	sub    esp,0xc
c0021cab:	ba 74 d5 02 c0       	mov    edx,0xc002d574
c0021cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb4:	89 10                	mov    DWORD PTR [eax],edx
c0021cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cba:	83 ec 0c             	sub    esp,0xc
c0021cbd:	50                   	push   eax
c0021cbe:	e8 99 11 ff ff       	call   c0012e5c <Filesystem::~Filesystem()>
c0021cc3:	83 c4 10             	add    esp,0x10
c0021cc6:	90                   	nop
c0021cc7:	83 c4 0c             	add    esp,0xc
c0021cca:	c3                   	ret    
c0021ccb:	90                   	nop

c0021ccc <ISO9660::~ISO9660()>:
c0021ccc:	83 ec 0c             	sub    esp,0xc
c0021ccf:	83 ec 0c             	sub    esp,0xc
c0021cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd6:	e8 cd ff ff ff       	call   c0021ca8 <ISO9660::~ISO9660()>
c0021cdb:	83 c4 10             	add    esp,0x10
c0021cde:	83 ec 08             	sub    esp,0x8
c0021ce1:	6a 08                	push   0x8
c0021ce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ce7:	e8 61 0d ff ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0021cec:	83 c4 10             	add    esp,0x10
c0021cef:	83 c4 0c             	add    esp,0xc
c0021cf2:	c3                   	ret    

c0021cf3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021cf3:	55                   	push   ebp
c0021cf4:	31 c9                	xor    ecx,ecx
c0021cf6:	57                   	push   edi
c0021cf7:	56                   	push   esi
c0021cf8:	53                   	push   ebx
c0021cf9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021cfd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021d01:	89 eb                	mov    ebx,ebp
c0021d03:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021d07:	39 ce                	cmp    esi,ecx
c0021d09:	7e 17                	jle    c0021d22 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021d0b:	31 d2                	xor    edx,edx
c0021d0d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021d11:	7d 13                	jge    c0021d26 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021d13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d17:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021d1a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021d1d:	75 0d                	jne    c0021d2c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021d1f:	42                   	inc    edx
c0021d20:	eb eb                	jmp    c0021d0d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021d22:	31 c0                	xor    eax,eax
c0021d24:	eb 0a                	jmp    c0021d30 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021d26:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021d2a:	eb 04                	jmp    c0021d30 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021d2c:	41                   	inc    ecx
c0021d2d:	43                   	inc    ebx
c0021d2e:	eb d7                	jmp    c0021d07 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021d30:	5b                   	pop    ebx
c0021d31:	5e                   	pop    esi
c0021d32:	5f                   	pop    edi
c0021d33:	5d                   	pop    ebp
c0021d34:	c3                   	ret    

c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021d35:	57                   	push   edi
c0021d36:	56                   	push   esi
c0021d37:	53                   	push   ebx
c0021d38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021d40:	39 0d c0 28 03 c0    	cmp    DWORD PTR ds:0xc00328c0,ecx
c0021d46:	75 08                	jne    c0021d50 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021d48:	38 05 14 e7 02 c0    	cmp    BYTE PTR ds:0xc002e714,al
c0021d4e:	74 2b                	je     c0021d7b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021d50:	83 ec 0c             	sub    esp,0xc
c0021d53:	a2 14 e7 02 c0       	mov    ds:0xc002e714,al
c0021d58:	68 e0 28 03 c0       	push   0xc00328e0
c0021d5d:	0f be c0             	movsx  eax,al
c0021d60:	6a 01                	push   0x1
c0021d62:	89 0d c0 28 03 c0    	mov    DWORD PTR ds:0xc00328c0,ecx
c0021d68:	31 db                	xor    ebx,ebx
c0021d6a:	53                   	push   ebx
c0021d6b:	51                   	push   ecx
c0021d6c:	ff 34 85 9c f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0964]
c0021d73:	e8 32 47 ff ff       	call   c00164aa <LogicalDisk::read(unsigned long long, int, void*)>
c0021d78:	83 c4 20             	add    esp,0x20
c0021d7b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021d7f:	be e0 28 03 c0       	mov    esi,0xc00328e0
c0021d84:	b9 00 08 00 00       	mov    ecx,0x800
c0021d89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021d8b:	5b                   	pop    ebx
c0021d8c:	5e                   	pop    esi
c0021d8d:	5f                   	pop    edi
c0021d8e:	c3                   	ret    
c0021d8f:	90                   	nop

c0021d90 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021d90:	81 ec 10 08 00 00    	sub    esp,0x810
c0021d96:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021d9d:	83 c0 41             	add    eax,0x41
c0021da0:	0f be c0             	movsx  eax,al
c0021da3:	50                   	push   eax
c0021da4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021da8:	50                   	push   eax
c0021da9:	6a 10                	push   0x10
c0021dab:	e8 85 ff ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021db0:	83 c4 10             	add    esp,0x10
c0021db3:	31 c0                	xor    eax,eax
c0021db5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021dba:	75 1d                	jne    c0021dd9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dbc:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021dc1:	75 16                	jne    c0021dd9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dc3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021dc8:	75 0f                	jne    c0021dd9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dca:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021dcf:	75 08                	jne    c0021dd9 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021dd1:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021dd6:	0f 94 c0             	sete   al
c0021dd9:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021ddf:	c3                   	ret    

c0021de0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021de0:	55                   	push   ebp
c0021de1:	57                   	push   edi
c0021de2:	56                   	push   esi
c0021de3:	53                   	push   ebx
c0021de4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021dea:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021df1:	85 ed                	test   ebp,ebp
c0021df3:	0f 84 da 01 00 00    	je     c0021fd3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021df9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021e01:	0f 84 cc 01 00 00    	je     c0021fd3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021e07:	b8 01 00 00 00       	mov    eax,0x1
c0021e0c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021e10:	0f 85 c2 01 00 00    	jne    c0021fd8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021e16:	31 d2                	xor    edx,edx
c0021e18:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021e1f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021e22:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021e25:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021e28:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021e2f:	01 c8                	add    eax,ecx
c0021e31:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021e34:	11 da                	adc    edx,ebx
c0021e36:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021e3a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e3e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021e42:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021e46:	19 d7                	sbb    edi,edx
c0021e48:	72 11                	jb     c0021e5b <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021e4a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021e4d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021e59:	eb 0c                	jmp    c0021e67 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021e5b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021e5f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021e63:	29 ce                	sub    esi,ecx
c0021e65:	19 df                	sbb    edi,ebx
c0021e67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021e6a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021e6d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021e71:	c1 e0 0b             	shl    eax,0xb
c0021e74:	01 c8                	add    eax,ecx
c0021e76:	11 da                	adc    edx,ebx
c0021e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0021e7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021e7f:	51                   	push   ecx
c0021e80:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021e84:	50                   	push   eax
c0021e85:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021e89:	53                   	push   ebx
c0021e8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021e8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e92:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021e96:	50                   	push   eax
c0021e97:	e8 99 fe ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e9c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021e9f:	b8 00 08 00 00       	mov    eax,0x800
c0021ea4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021eaa:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021eae:	29 d0                	sub    eax,edx
c0021eb0:	83 c4 10             	add    esp,0x10
c0021eb3:	89 f9                	mov    ecx,edi
c0021eb5:	39 c6                	cmp    esi,eax
c0021eb7:	83 d9 00             	sbb    ecx,0x0
c0021eba:	7d 1b                	jge    c0021ed7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021ebc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021ec1:	75 12                	jne    c0021ed5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021ec3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021eca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ed0:	e9 fa 00 00 00       	jmp    c0021fcf <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021ed5:	89 f0                	mov    eax,esi
c0021ed7:	01 d3                	add    ebx,edx
c0021ed9:	31 d2                	xor    edx,edx
c0021edb:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021edf:	39 c2                	cmp    edx,eax
c0021ee1:	7d 14                	jge    c0021ef7 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021ee3:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021eea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021eee:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021ef1:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021ef4:	42                   	inc    edx
c0021ef5:	eb e8                	jmp    c0021edf <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021ef7:	89 c2                	mov    edx,eax
c0021ef9:	85 c0                	test   eax,eax
c0021efb:	79 02                	jns    c0021eff <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021efd:	31 d2                	xor    edx,edx
c0021eff:	01 c2                	add    edx,eax
c0021f01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021f04:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021f0b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021f0f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021f13:	99                   	cdq    
c0021f14:	01 c1                	add    ecx,eax
c0021f16:	11 d3                	adc    ebx,edx
c0021f18:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021f1c:	29 c6                	sub    esi,eax
c0021f1e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021f22:	19 d7                	sbb    edi,edx
c0021f24:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f27:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021f2b:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021f30:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021f33:	b8 00 00 00 00       	mov    eax,0x0
c0021f38:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021f3c:	7d 43                	jge    c0021f81 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021f3e:	52                   	push   edx
c0021f3f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021f43:	50                   	push   eax
c0021f44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021f48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021f50:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021f54:	50                   	push   eax
c0021f55:	e8 db fd ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f5a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021f62:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021f67:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021f6f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021f77:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021f7c:	83 c4 10             	add    esp,0x10
c0021f7f:	eb aa                	jmp    c0021f2b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021f81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f85:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021f88:	74 2a                	je     c0021fb4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021f8a:	50                   	push   eax
c0021f8b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021f8f:	50                   	push   eax
c0021f90:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021f94:	56                   	push   esi
c0021f95:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021f99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021f9d:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021fa1:	51                   	push   ecx
c0021fa2:	e8 8e fd ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fa7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021faf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021fb1:	83 c4 10             	add    esp,0x10
c0021fb4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021fbb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021fbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fc3:	89 18                	mov    DWORD PTR [eax],ebx
c0021fc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fc9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021fcc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021fcf:	31 c0                	xor    eax,eax
c0021fd1:	eb 05                	jmp    c0021fd8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021fd3:	b8 04 00 00 00       	mov    eax,0x4
c0021fd8:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021fde:	5b                   	pop    ebx
c0021fdf:	5e                   	pop    esi
c0021fe0:	5f                   	pop    edi
c0021fe1:	5d                   	pop    ebp
c0021fe2:	c3                   	ret    
c0021fe3:	90                   	nop

c0021fe4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021fe4:	55                   	push   ebp
c0021fe5:	57                   	push   edi
c0021fe6:	56                   	push   esi
c0021fe7:	53                   	push   ebx
c0021fe8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021fee:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021ff5:	85 ed                	test   ebp,ebp
c0021ff7:	0f 84 51 02 00 00    	je     c002224e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021ffd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0022005:	0f 84 43 02 00 00    	je     c002224e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002200b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002200e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0022011:	75 0a                	jne    c002201d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0022013:	b8 07 00 00 00       	mov    eax,0x7
c0022018:	e9 36 02 00 00       	jmp    c0022253 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002201d:	50                   	push   eax
c002201e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022022:	50                   	push   eax
c0022023:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002202a:	53                   	push   ebx
c002202b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002202e:	c1 e0 0b             	shl    eax,0xb
c0022031:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0022034:	c1 e8 0b             	shr    eax,0xb
c0022037:	50                   	push   eax
c0022038:	e8 f8 fc ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002203d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022040:	83 c4 10             	add    esp,0x10
c0022043:	89 c1                	mov    ecx,eax
c0022045:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022048:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002204e:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0022051:	84 db                	test   bl,bl
c0022053:	0f 85 8b 00 00 00    	jne    c00220e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0022059:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002205f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022062:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022068:	29 c6                	sub    esi,eax
c002206a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002206e:	89 f3                	mov    ebx,esi
c0022070:	89 f1                	mov    ecx,esi
c0022072:	c1 fb 1f             	sar    ebx,0x1f
c0022075:	01 f0                	add    eax,esi
c0022077:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002207a:	11 da                	adc    edx,ebx
c002207c:	89 04 24             	mov    DWORD PTR [esp],eax
c002207f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022083:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022086:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022089:	89 d8                	mov    eax,ebx
c002208b:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002208f:	ba 00 00 00 00       	mov    edx,0x0
c0022094:	19 f8                	sbb    eax,edi
c0022096:	b8 00 00 00 00       	mov    eax,0x0
c002209b:	73 08                	jae    c00220a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c002209d:	89 f0                	mov    eax,esi
c002209f:	89 fa                	mov    edx,edi
c00220a1:	29 c8                	sub    eax,ecx
c00220a3:	19 da                	sbb    edx,ebx
c00220a5:	89 d7                	mov    edi,edx
c00220a7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00220aa:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00220ad:	09 c7                	or     edi,eax
c00220af:	0f 84 5e ff ff ff    	je     c0022013 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00220b5:	57                   	push   edi
c00220b6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220ba:	50                   	push   eax
c00220bb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00220c2:	53                   	push   ebx
c00220c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00220c6:	c1 e0 0b             	shl    eax,0xb
c00220c9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00220cd:	c1 e8 0b             	shr    eax,0xb
c00220d0:	50                   	push   eax
c00220d1:	e8 5f fc ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00220d9:	83 c4 10             	add    esp,0x10
c00220dc:	25 ff 07 00 00       	and    eax,0x7ff
c00220e1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00220e4:	31 ff                	xor    edi,edi
c00220e6:	56                   	push   esi
c00220e7:	6a 28                	push   0x28
c00220e9:	6a 00                	push   0x0
c00220eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00220ef:	50                   	push   eax
c00220f0:	e8 5b e6 fd ff       	call   c0000750 <memset>
c00220f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00220f8:	25 ff 07 00 00       	and    eax,0x7ff
c00220fd:	89 c6                	mov    esi,eax
c00220ff:	83 c6 21             	add    esi,0x21
c0022102:	83 d7 00             	adc    edi,0x0
c0022105:	83 c4 10             	add    esp,0x10
c0022108:	31 c9                	xor    ecx,ecx
c002210a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0022111:	83 f9 28             	cmp    ecx,0x28
c0022114:	88 04 24             	mov    BYTE PTR [esp],al
c0022117:	0f 94 c2             	sete   dl
c002211a:	88 d0                	mov    al,dl
c002211c:	ba ff 07 00 00       	mov    edx,0x7ff
c0022121:	39 f2                	cmp    edx,esi
c0022123:	ba 00 00 00 00       	mov    edx,0x0
c0022128:	19 fa                	sbb    edx,edi
c002212a:	0f 92 c2             	setb   dl
c002212d:	09 c2                	or     edx,eax
c002212f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0022133:	0f 94 c0             	sete   al
c0022136:	08 d0                	or     al,dl
c0022138:	75 16                	jne    c0022150 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002213a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002213e:	74 10                	je     c0022150 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022140:	8a 04 24             	mov    al,BYTE PTR [esp]
c0022143:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022147:	41                   	inc    ecx
c0022148:	83 c6 01             	add    esi,0x1
c002214b:	83 d7 00             	adc    edi,0x0
c002214e:	eb ba                	jmp    c002210a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0022150:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022157:	83 ec 0c             	sub    esp,0xc
c002215a:	8d 74 24 24          	lea    esi,[esp+0x24]
c002215e:	56                   	push   esi
c002215f:	e8 08 e6 fd ff       	call   c000076c <strlen>
c0022164:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002216b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002216f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022177:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002217a:	5a                   	pop    edx
c002217b:	25 ff 07 00 00       	and    eax,0x7ff
c0022180:	59                   	pop    ecx
c0022181:	01 f8                	add    eax,edi
c0022183:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022189:	83 e0 02             	and    eax,0x2
c002218c:	3c 01                	cmp    al,0x1
c002218e:	19 c0                	sbb    eax,eax
c0022190:	83 c0 02             	add    eax,0x2
c0022193:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022197:	56                   	push   esi
c0022198:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002219c:	50                   	push   eax
c002219d:	e8 6a e6 fd ff       	call   c000080c <strcpy>
c00221a2:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00221a6:	83 c4 10             	add    esp,0x10
c00221a9:	84 c0                	test   al,al
c00221ab:	75 21                	jne    c00221ce <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00221ad:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00221b5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00221bd:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00221c5:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00221cc:	eb 28                	jmp    c00221f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00221ce:	fe c8                	dec    al
c00221d0:	75 24                	jne    c00221f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00221d2:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00221da:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00221e2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00221ea:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00221f1:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00221f6:	8d 74 24 40          	lea    esi,[esp+0x40]
c00221fa:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0022201:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0022208:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002220a:	0f b6 f3             	movzx  esi,bl
c002220d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0022214:	31 db                	xor    ebx,ebx
c0022216:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002221c:	89 df                	mov    edi,ebx
c002221e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0022221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022224:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0022227:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002222a:	39 c6                	cmp    esi,eax
c002222c:	19 d7                	sbb    edi,edx
c002222e:	72 10                	jb     c0022240 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0022230:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0022237:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002223e:	eb 0a                	jmp    c002224a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0022240:	29 f0                	sub    eax,esi
c0022242:	19 da                	sbb    edx,ebx
c0022244:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022247:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002224a:	31 c0                	xor    eax,eax
c002224c:	eb 05                	jmp    c0022253 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002224e:	b8 04 00 00 00       	mov    eax,0x4
c0022253:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022259:	5b                   	pop    ebx
c002225a:	5e                   	pop    esi
c002225b:	5f                   	pop    edi
c002225c:	5d                   	pop    ebp
c002225d:	c3                   	ret    

c002225e <readRoot(unsigned int*, unsigned int*, char)>:
c002225e:	57                   	push   edi
c002225f:	56                   	push   esi
c0022260:	81 ec 38 08 00 00    	sub    esp,0x838
c0022266:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002226e:	50                   	push   eax
c002226f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022273:	50                   	push   eax
c0022274:	6a 10                	push   0x10
c0022276:	e8 ba fa ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002227b:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0022282:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022286:	b9 22 00 00 00       	mov    ecx,0x22
c002228b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002228d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022294:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022298:	89 10                	mov    DWORD PTR [eax],edx
c002229a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00222a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222a5:	89 10                	mov    DWORD PTR [eax],edx
c00222a7:	81 c4 44 08 00 00    	add    esp,0x844
c00222ad:	b0 01                	mov    al,0x1
c00222af:	5e                   	pop    esi
c00222b0:	5f                   	pop    edi
c00222b1:	c3                   	ret    

c00222b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00222b2:	55                   	push   ebp
c00222b3:	57                   	push   edi
c00222b4:	56                   	push   esi
c00222b5:	53                   	push   ebx
c00222b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00222bc:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00222c3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00222ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00222ce:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00222d2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00222d6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00222da:	75 03                	jne    c00222df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00222dc:	83 c3 02             	add    ebx,0x2
c00222df:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00222e2:	75 03                	jne    c00222e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00222e4:	43                   	inc    ebx
c00222e5:	eb f8                	jmp    c00222df <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00222e7:	51                   	push   ecx
c00222e8:	68 00 01 00 00       	push   0x100
c00222ed:	6a 00                	push   0x0
c00222ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222f3:	50                   	push   eax
c00222f4:	e8 57 e4 fd ff       	call   c0000750 <memset>
c00222f9:	83 c4 10             	add    esp,0x10
c00222fc:	31 d2                	xor    edx,edx
c00222fe:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0022301:	84 c0                	test   al,al
c0022303:	74 21                	je     c0022326 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022305:	3c 2f                	cmp    al,0x2f
c0022307:	75 0b                	jne    c0022314 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022309:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002230d:	bd 01 00 00 00       	mov    ebp,0x1
c0022312:	eb 14                	jmp    c0022328 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022314:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022317:	80 f9 19             	cmp    cl,0x19
c002231a:	77 03                	ja     c002231f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002231c:	83 e8 20             	sub    eax,0x20
c002231f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0022323:	42                   	inc    edx
c0022324:	eb d8                	jmp    c00222fe <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022326:	31 ed                	xor    ebp,ebp
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0022332:	e8 55 d5 fe ff       	call   c000f88c <malloc>
c0022337:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002233e:	89 c6                	mov    esi,eax
c0022340:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022346:	c1 ef 0b             	shr    edi,0xb
c0022349:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022350:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022354:	83 c4 10             	add    esp,0x10
c0022357:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c002235c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022360:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022367:	74 28                	je     c0022391 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022369:	52                   	push   edx
c002236a:	57                   	push   edi
c002236b:	50                   	push   eax
c002236c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022370:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022377:	e8 b9 f9 ff ff       	call   c0021d35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002237c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022380:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022387:	05 00 08 00 00       	add    eax,0x800
c002238c:	83 c4 10             	add    esp,0x10
c002238f:	eb cb                	jmp    c002235c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022391:	83 ec 0c             	sub    esp,0xc
c0022394:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022398:	57                   	push   edi
c0022399:	e8 ce e3 fd ff       	call   c000076c <strlen>
c002239e:	50                   	push   eax
c002239f:	57                   	push   edi
c00223a0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00223a7:	56                   	push   esi
c00223a8:	e8 46 f9 ff ff       	call   c0021cf3 <__memmem(unsigned char*, int, unsigned char*, int)>
c00223ad:	83 c4 20             	add    esp,0x20
c00223b0:	85 c0                	test   eax,eax
c00223b2:	75 13                	jne    c00223c7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00223b4:	83 ec 0c             	sub    esp,0xc
c00223b7:	56                   	push   esi
c00223b8:	e8 df d4 fe ff       	call   c000f89c <free>
c00223bd:	83 c4 10             	add    esp,0x10
c00223c0:	31 c0                	xor    eax,eax
c00223c2:	e9 b3 00 00 00       	jmp    c002247a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00223c7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00223cb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00223cf:	c1 e7 08             	shl    edi,0x8
c00223d2:	c1 e2 10             	shl    edx,0x10
c00223d5:	09 d7                	or     edi,edx
c00223d7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00223db:	09 d7                	or     edi,edx
c00223dd:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00223e1:	c1 e2 18             	shl    edx,0x18
c00223e4:	09 d7                	or     edi,edx
c00223e6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00223ea:	89 d1                	mov    ecx,edx
c00223ec:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00223f0:	c1 e1 08             	shl    ecx,0x8
c00223f3:	c1 e2 10             	shl    edx,0x10
c00223f6:	09 ca                	or     edx,ecx
c00223f8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00223fc:	09 ca                	or     edx,ecx
c00223fe:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022402:	c1 e1 18             	shl    ecx,0x18
c0022405:	09 ca                	or     edx,ecx
c0022407:	89 e9                	mov    ecx,ebp
c0022409:	84 c9                	test   cl,cl
c002240b:	74 3c                	je     c0022449 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002240d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022411:	83 ec 0c             	sub    esp,0xc
c0022414:	56                   	push   esi
c0022415:	e8 82 d4 fe ff       	call   c000f89c <free>
c002241a:	83 c4 0c             	add    esp,0xc
c002241d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022424:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022429:	50                   	push   eax
c002242a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022431:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022438:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002243c:	52                   	push   edx
c002243d:	57                   	push   edi
c002243e:	53                   	push   ebx
c002243f:	e8 6e fe ff ff       	call   c00222b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022444:	83 c4 20             	add    esp,0x20
c0022447:	eb 31                	jmp    c002247a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022449:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c002244c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0022453:	d0 e8                	shr    al,1
c0022455:	89 3b                	mov    DWORD PTR [ebx],edi
c0022457:	83 e0 01             	and    eax,0x1
c002245a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022461:	83 ec 0c             	sub    esp,0xc
c0022464:	89 13                	mov    DWORD PTR [ebx],edx
c0022466:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002246d:	89 03                	mov    DWORD PTR [ebx],eax
c002246f:	56                   	push   esi
c0022470:	e8 27 d4 fe ff       	call   c000f89c <free>
c0022475:	83 c4 10             	add    esp,0x10
c0022478:	b0 01                	mov    al,0x1
c002247a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022480:	5b                   	pop    ebx
c0022481:	5e                   	pop    esi
c0022482:	5f                   	pop    edi
c0022483:	5d                   	pop    ebp
c0022484:	c3                   	ret    

c0022485 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022485:	55                   	push   ebp
c0022486:	57                   	push   edi
c0022487:	56                   	push   esi
c0022488:	53                   	push   ebx
c0022489:	83 ec 20             	sub    esp,0x20
c002248c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022490:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022494:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022498:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00224a8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00224ad:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00224b3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00224b9:	57                   	push   edi
c00224ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224be:	50                   	push   eax
c00224bf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224c3:	50                   	push   eax
c00224c4:	e8 95 fd ff ff       	call   c002225e <readRoot(unsigned int*, unsigned int*, char)>
c00224c9:	5a                   	pop    edx
c00224ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00224ce:	e8 99 e2 fd ff       	call   c000076c <strlen>
c00224d3:	83 c4 10             	add    esp,0x10
c00224d6:	83 f8 03             	cmp    eax,0x3
c00224d9:	77 17                	ja     c00224f2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00224db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00224df:	89 03                	mov    DWORD PTR [ebx],eax
c00224e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224e5:	89 06                	mov    DWORD PTR [esi],eax
c00224e7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00224ee:	b0 01                	mov    al,0x1
c00224f0:	eb 19                	jmp    c002250b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00224f2:	50                   	push   eax
c00224f3:	55                   	push   ebp
c00224f4:	57                   	push   edi
c00224f5:	56                   	push   esi
c00224f6:	53                   	push   ebx
c00224f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00224ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022503:	e8 aa fd ff ff       	call   c00222b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022508:	83 c4 20             	add    esp,0x20
c002250b:	83 c4 1c             	add    esp,0x1c
c002250e:	5b                   	pop    ebx
c002250f:	5e                   	pop    esi
c0022510:	5f                   	pop    edi
c0022511:	5d                   	pop    ebp
c0022512:	c3                   	ret    
c0022513:	90                   	nop

c0022514 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022514:	57                   	push   edi
c0022515:	56                   	push   esi
c0022516:	53                   	push   ebx
c0022517:	83 ec 10             	sub    esp,0x10
c002251a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002251e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022522:	85 ff                	test   edi,edi
c0022524:	0f 84 9d 00 00 00    	je     c00225c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002252a:	85 f6                	test   esi,esi
c002252c:	0f 84 95 00 00 00    	je     c00225c7 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022532:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022537:	74 17                	je     c0022550 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022539:	83 ec 0c             	sub    esp,0xc
c002253c:	68 2b d5 02 c0       	push   0xc002d52b
c0022541:	e8 e7 05 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022546:	83 c4 10             	add    esp,0x10
c0022549:	b8 03 00 00 00       	mov    eax,0x3
c002254e:	eb 7c                	jmp    c00225cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022550:	83 ec 0c             	sub    esp,0xc
c0022553:	6a 1c                	push   0x1c
c0022555:	e8 32 d3 fe ff       	call   c000f88c <malloc>
c002255a:	89 07                	mov    DWORD PTR [edi],eax
c002255c:	89 c3                	mov    ebx,eax
c002255e:	58                   	pop    eax
c002255f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022563:	50                   	push   eax
c0022564:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022567:	50                   	push   eax
c0022568:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002256c:	50                   	push   eax
c002256d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022571:	50                   	push   eax
c0022572:	56                   	push   esi
c0022573:	e8 0d ff ff ff       	call   c0022485 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022578:	83 c4 20             	add    esp,0x20
c002257b:	84 c0                	test   al,al
c002257d:	74 07                	je     c0022586 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002257f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022584:	74 0b                	je     c0022591 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022586:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002258a:	b8 01 00 00 00       	mov    eax,0x1
c002258f:	eb 3b                	jmp    c00225cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022595:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022599:	89 03                	mov    DWORD PTR [ebx],eax
c002259b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00225a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00225a6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00225ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00225b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00225b7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00225be:	8a 06                	mov    al,BYTE PTR [esi]
c00225c0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00225c3:	31 c0                	xor    eax,eax
c00225c5:	eb 05                	jmp    c00225cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00225c7:	b8 04 00 00 00       	mov    eax,0x4
c00225cc:	83 c4 10             	add    esp,0x10
c00225cf:	5b                   	pop    ebx
c00225d0:	5e                   	pop    esi
c00225d1:	5f                   	pop    edi
c00225d2:	c3                   	ret    
c00225d3:	90                   	nop

c00225d4 <ISO9660::exists(char const*)>:
c00225d4:	83 ec 28             	sub    esp,0x28
c00225d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00225df:	52                   	push   edx
c00225e0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00225e3:	52                   	push   edx
c00225e4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00225e8:	52                   	push   edx
c00225e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00225ed:	52                   	push   edx
c00225ee:	50                   	push   eax
c00225ef:	e8 91 fe ff ff       	call   c0022485 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00225f4:	83 c4 3c             	add    esp,0x3c
c00225f7:	c3                   	ret    

c00225f8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00225f8:	56                   	push   esi
c00225f9:	53                   	push   ebx
c00225fa:	83 ec 14             	sub    esp,0x14
c00225fd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022601:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022605:	85 db                	test   ebx,ebx
c0022607:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002260b:	0f 94 c2             	sete   dl
c002260e:	85 f6                	test   esi,esi
c0022610:	0f 94 c0             	sete   al
c0022613:	08 c2                	or     dl,al
c0022615:	75 68                	jne    c002267f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022617:	85 c9                	test   ecx,ecx
c0022619:	74 64                	je     c002267f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002261b:	83 ec 0c             	sub    esp,0xc
c002261e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022621:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022625:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002262b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022632:	50                   	push   eax
c0022633:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022636:	50                   	push   eax
c0022637:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002263b:	50                   	push   eax
c002263c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022640:	50                   	push   eax
c0022641:	51                   	push   ecx
c0022642:	e8 3e fe ff ff       	call   c0022485 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022647:	83 c4 20             	add    esp,0x20
c002264a:	ba 01 00 00 00       	mov    edx,0x1
c002264f:	84 c0                	test   al,al
c0022651:	74 31                	je     c0022684 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022657:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002265e:	89 03                	mov    DWORD PTR [ebx],eax
c0022660:	ba 00 00 00 00       	mov    edx,0x0
c0022665:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022669:	85 c0                	test   eax,eax
c002266b:	0f 95 06             	setne  BYTE PTR [esi]
c002266e:	74 14                	je     c0022684 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022670:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022676:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002267d:	eb 05                	jmp    c0022684 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002267f:	ba 04 00 00 00       	mov    edx,0x4
c0022684:	83 c4 14             	add    esp,0x14
c0022687:	89 d0                	mov    eax,edx
c0022689:	5b                   	pop    ebx
c002268a:	5e                   	pop    esi
c002268b:	c3                   	ret    

c002268c <ISO9660::openDir(char const*, void**)>:
c002268c:	57                   	push   edi
c002268d:	56                   	push   esi
c002268e:	53                   	push   ebx
c002268f:	83 ec 10             	sub    esp,0x10
c0022692:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022696:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002269a:	85 ff                	test   edi,edi
c002269c:	0f 84 95 00 00 00    	je     c0022737 <ISO9660::openDir(char const*, void**)+0xab>
c00226a2:	85 f6                	test   esi,esi
c00226a4:	0f 84 8d 00 00 00    	je     c0022737 <ISO9660::openDir(char const*, void**)+0xab>
c00226aa:	83 ec 0c             	sub    esp,0xc
c00226ad:	6a 1c                	push   0x1c
c00226af:	e8 d8 d1 fe ff       	call   c000f88c <malloc>
c00226b4:	89 07                	mov    DWORD PTR [edi],eax
c00226b6:	89 c3                	mov    ebx,eax
c00226b8:	59                   	pop    ecx
c00226b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00226bd:	50                   	push   eax
c00226be:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00226c1:	50                   	push   eax
c00226c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226c6:	50                   	push   eax
c00226c7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226cb:	50                   	push   eax
c00226cc:	56                   	push   esi
c00226cd:	e8 b3 fd ff ff       	call   c0022485 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00226d2:	83 c4 20             	add    esp,0x20
c00226d5:	84 c0                	test   al,al
c00226d7:	74 07                	je     c00226e0 <ISO9660::openDir(char const*, void**)+0x54>
c00226d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00226de:	75 21                	jne    c0022701 <ISO9660::openDir(char const*, void**)+0x75>
c00226e0:	0f b6 c0             	movzx  eax,al
c00226e3:	52                   	push   edx
c00226e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00226e8:	50                   	push   eax
c00226e9:	68 51 d5 02 c0       	push   0xc002d551
c00226ee:	e8 3a 04 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00226f3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00226f7:	83 c4 10             	add    esp,0x10
c00226fa:	b8 01 00 00 00       	mov    eax,0x1
c00226ff:	eb 3b                	jmp    c002273c <ISO9660::openDir(char const*, void**)+0xb0>
c0022701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022705:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022709:	89 03                	mov    DWORD PTR [ebx],eax
c002270b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022716:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002271d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022724:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022727:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002272e:	8a 06                	mov    al,BYTE PTR [esi]
c0022730:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022733:	31 c0                	xor    eax,eax
c0022735:	eb 05                	jmp    c002273c <ISO9660::openDir(char const*, void**)+0xb0>
c0022737:	b8 04 00 00 00       	mov    eax,0x4
c002273c:	83 c4 10             	add    esp,0x10
c002273f:	5b                   	pop    ebx
c0022740:	5e                   	pop    esi
c0022741:	5f                   	pop    edi
c0022742:	c3                   	ret    
c0022743:	90                   	nop

c0022744 <ISO9660::ISO9660()>:
c0022744:	83 ec 0c             	sub    esp,0xc
c0022747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002274b:	83 ec 0c             	sub    esp,0xc
c002274e:	50                   	push   eax
c002274f:	e8 e4 06 ff ff       	call   c0012e38 <Filesystem::Filesystem()>
c0022754:	83 c4 10             	add    esp,0x10
c0022757:	ba 74 d5 02 c0       	mov    edx,0xc002d574
c002275c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022760:	89 10                	mov    DWORD PTR [eax],edx
c0022762:	90                   	nop
c0022763:	83 c4 0c             	add    esp,0xc
c0022766:	c3                   	ret    
c0022767:	90                   	nop

c0022768 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022768:	83 ec 1c             	sub    esp,0x1c
c002276b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002276f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022773:	89 10                	mov    DWORD PTR [eax],edx
c0022775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022779:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002277d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022784:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022788:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002278b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022790:	75 23                	jne    c00227b5 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022796:	8b 10                	mov    edx,DWORD PTR [eax]
c0022798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002279f:	0f af c2             	imul   eax,edx
c00227a2:	85 c0                	test   eax,eax
c00227a4:	79 03                	jns    c00227a9 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00227a6:	83 c0 03             	add    eax,0x3
c00227a9:	c1 f8 02             	sar    eax,0x2
c00227ac:	05 a0 0f 00 00       	add    eax,0xfa0
c00227b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00227b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227bd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00227c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00227cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00227d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00227dd:	c1 e0 02             	shl    eax,0x2
c00227e0:	83 ec 0c             	sub    esp,0xc
c00227e3:	50                   	push   eax
c00227e4:	e8 a3 d0 fe ff       	call   c000f88c <malloc>
c00227e9:	83 c4 10             	add    esp,0x10
c00227ec:	89 c2                	mov    edx,eax
c00227ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227f2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00227f5:	83 ec 04             	sub    esp,0x4
c00227f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00227fc:	50                   	push   eax
c00227fd:	6a 01                	push   0x1
c00227ff:	6a 04                	push   0x4
c0022801:	e8 5f 63 fe ff       	call   c0008b65 <src_new>
c0022806:	83 c4 10             	add    esp,0x10
c0022809:	89 c2                	mov    edx,eax
c002280b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002280f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022812:	83 ec 0c             	sub    esp,0xc
c0022815:	68 d4 d5 02 c0       	push   0xc002d5d4
c002281a:	e8 0e 03 ff ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002281f:	83 c4 10             	add    esp,0x10
c0022822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022826:	85 c0                	test   eax,eax
c0022828:	74 10                	je     c002283a <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c002282a:	83 ec 0c             	sub    esp,0xc
c002282d:	68 ea d5 02 c0       	push   0xc002d5ea
c0022832:	e8 62 7e ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0022837:	83 c4 10             	add    esp,0x10
c002283a:	a0 e0 34 03 c0       	mov    al,ds:0xc00334e0
c002283f:	83 f0 01             	xor    eax,0x1
c0022842:	84 c0                	test   al,al
c0022844:	74 57                	je     c002289d <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c0022846:	a1 04 d6 02 c0       	mov    eax,ds:0xc002d604
c002284b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002284f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022857:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002285f:	7f 35                	jg     c0022896 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c0022861:	83 ec 0c             	sub    esp,0xc
c0022864:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022868:	e8 32 55 00 00       	call   c0027d9f <__floatsisf>
c002286d:	83 c4 10             	add    esp,0x10
c0022870:	8b 15 04 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d604
c0022876:	83 ec 08             	sub    esp,0x8
c0022879:	52                   	push   edx
c002287a:	50                   	push   eax
c002287b:	e8 31 51 00 00       	call   c00279b1 <__mulsf3>
c0022880:	83 c4 10             	add    esp,0x10
c0022883:	89 c2                	mov    edx,eax
c0022885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022889:	89 14 85 e0 30 03 c0 	mov    DWORD PTR [eax*4-0x3ffccf20],edx
c0022890:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022894:	eb c1                	jmp    c0022857 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022896:	c6 05 e0 34 03 c0 01 	mov    BYTE PTR ds:0xc00334e0,0x1
c002289d:	90                   	nop
c002289e:	83 c4 1c             	add    esp,0x1c
c00228a1:	c3                   	ret    

c00228a2 <SoundChannel::~SoundChannel()>:
c00228a2:	83 ec 0c             	sub    esp,0xc
c00228a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00228ac:	83 ec 0c             	sub    esp,0xc
c00228af:	50                   	push   eax
c00228b0:	e8 e7 cf fe ff       	call   c000f89c <free>
c00228b5:	83 c4 10             	add    esp,0x10
c00228b8:	90                   	nop
c00228b9:	83 c4 0c             	add    esp,0xc
c00228bc:	c3                   	ret    
c00228bd:	90                   	nop

c00228be <SoundChannel::getSampleRate()>:
c00228be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00228c4:	c3                   	ret    
c00228c5:	90                   	nop

c00228c6 <SoundChannel::getBits()>:
c00228c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228cd:	c3                   	ret    

c00228ce <SoundChannel::getBufferUsed()>:
c00228ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00228d5:	c3                   	ret    

c00228d6 <SoundChannel::getBufferSize()>:
c00228d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00228dd:	c3                   	ret    

c00228de <SoundChannel::unbuffer(float*, int, int)>:
c00228de:	56                   	push   esi
c00228df:	53                   	push   ebx
c00228e0:	83 ec 40             	sub    esp,0x40
c00228e3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00228e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00228ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00228ee:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00228f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00228f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00228f9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00228fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022901:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022905:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022909:	e8 91 54 00 00       	call   c0027d9f <__floatsisf>
c002290e:	5a                   	pop    edx
c002290f:	89 c6                	mov    esi,eax
c0022911:	ff 33                	push   DWORD PTR [ebx]
c0022913:	e8 87 54 00 00       	call   c0027d9f <__floatsisf>
c0022918:	59                   	pop    ecx
c0022919:	5a                   	pop    edx
c002291a:	50                   	push   eax
c002291b:	56                   	push   esi
c002291c:	e8 53 52 00 00       	call   c0027b74 <__divsf3>
c0022921:	89 04 24             	mov    DWORD PTR [esp],eax
c0022924:	e8 46 67 00 00       	call   c002906f <__extendsfdf2>
c0022929:	59                   	pop    ecx
c002292a:	5e                   	pop    esi
c002292b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002292f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022933:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002293b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002293f:	50                   	push   eax
c0022940:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022943:	e8 12 5e fe ff       	call   c000875a <src_process>
c0022948:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002294c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002294f:	83 c4 0c             	add    esp,0xc
c0022952:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022955:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022958:	29 d0                	sub    eax,edx
c002295a:	c1 e0 02             	shl    eax,0x2
c002295d:	50                   	push   eax
c002295e:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022961:	50                   	push   eax
c0022962:	51                   	push   ecx
c0022963:	e8 20 dd fd ff       	call   c0000688 <memmove>
c0022968:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002296c:	83 c4 44             	add    esp,0x44
c002296f:	5b                   	pop    ebx
c0022970:	5e                   	pop    esi
c0022971:	c3                   	ret    

c0022972 <SoundChannel::buffer16(short*, int)>:
c0022972:	55                   	push   ebp
c0022973:	57                   	push   edi
c0022974:	56                   	push   esi
c0022975:	53                   	push   ebx
c0022976:	83 ec 1c             	sub    esp,0x1c
c0022979:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002297d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022980:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022983:	0f 84 d2 00 00 00    	je     c0022a5b <SoundChannel::buffer16(short*, int)+0xe9>
c0022989:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002298d:	85 ed                	test   ebp,ebp
c002298f:	0f 8e c6 00 00 00    	jle    c0022a5b <SoundChannel::buffer16(short*, int)+0xe9>
c0022995:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022999:	bd 00 00 00 38       	mov    ebp,0x38000000
c002299e:	83 ec 0c             	sub    esp,0xc
c00229a1:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00229a4:	50                   	push   eax
c00229a5:	e8 f5 53 00 00       	call   c0027d9f <__floatsisf>
c00229aa:	59                   	pop    ecx
c00229ab:	8d 4e 01             	lea    ecx,[esi+0x1]
c00229ae:	5f                   	pop    edi
c00229af:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00229b2:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00229b5:	55                   	push   ebp
c00229b6:	50                   	push   eax
c00229b7:	e8 f5 4f 00 00       	call   c00279b1 <__mulsf3>
c00229bc:	83 c4 10             	add    esp,0x10
c00229bf:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00229c2:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00229c5:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00229c8:	0f 84 99 00 00 00    	je     c0022a67 <SoundChannel::buffer16(short*, int)+0xf5>
c00229ce:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00229d3:	74 78                	je     c0022a4d <SoundChannel::buffer16(short*, int)+0xdb>
c00229d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00229d9:	83 ec 0c             	sub    esp,0xc
c00229dc:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00229e0:	50                   	push   eax
c00229e1:	e8 b9 53 00 00       	call   c0027d9f <__floatsisf>
c00229e6:	5f                   	pop    edi
c00229e7:	8d 4e 01             	lea    ecx,[esi+0x1]
c00229ea:	5a                   	pop    edx
c00229eb:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00229ee:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00229f1:	55                   	push   ebp
c00229f2:	50                   	push   eax
c00229f3:	e8 b9 4f 00 00       	call   c00279b1 <__mulsf3>
c00229f8:	83 c4 10             	add    esp,0x10
c00229fb:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00229fe:	be 02 00 00 00       	mov    esi,0x2
c0022a03:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022a06:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022a09:	74 46                	je     c0022a51 <SoundChannel::buffer16(short*, int)+0xdf>
c0022a0b:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022a0f:	eb 36                	jmp    c0022a47 <SoundChannel::buffer16(short*, int)+0xd5>
c0022a11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022a15:	83 ec 0c             	sub    esp,0xc
c0022a18:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022a1c:	46                   	inc    esi
c0022a1d:	50                   	push   eax
c0022a1e:	e8 7c 53 00 00       	call   c0027d9f <__floatsisf>
c0022a23:	5a                   	pop    edx
c0022a24:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022a27:	59                   	pop    ecx
c0022a28:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022a2b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022a2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a32:	50                   	push   eax
c0022a33:	e8 79 4f 00 00       	call   c00279b1 <__mulsf3>
c0022a38:	83 c4 10             	add    esp,0x10
c0022a3b:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022a3f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022a42:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022a45:	74 0a                	je     c0022a51 <SoundChannel::buffer16(short*, int)+0xdf>
c0022a47:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022a4b:	75 c4                	jne    c0022a11 <SoundChannel::buffer16(short*, int)+0x9f>
c0022a4d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022a51:	83 c4 1c             	add    esp,0x1c
c0022a54:	89 f0                	mov    eax,esi
c0022a56:	5b                   	pop    ebx
c0022a57:	5e                   	pop    esi
c0022a58:	5f                   	pop    edi
c0022a59:	5d                   	pop    ebp
c0022a5a:	c3                   	ret    
c0022a5b:	83 c4 1c             	add    esp,0x1c
c0022a5e:	31 f6                	xor    esi,esi
c0022a60:	5b                   	pop    ebx
c0022a61:	89 f0                	mov    eax,esi
c0022a63:	5e                   	pop    esi
c0022a64:	5f                   	pop    edi
c0022a65:	5d                   	pop    ebp
c0022a66:	c3                   	ret    
c0022a67:	be 01 00 00 00       	mov    esi,0x1
c0022a6c:	eb e3                	jmp    c0022a51 <SoundChannel::buffer16(short*, int)+0xdf>

c0022a6e <SoundChannel::buffer8(unsigned char*, int)>:
c0022a6e:	55                   	push   ebp
c0022a6f:	57                   	push   edi
c0022a70:	56                   	push   esi
c0022a71:	53                   	push   ebx
c0022a72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a76:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022a7a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022a7d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022a81:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022a84:	74 7a                	je     c0022b00 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022a86:	85 ff                	test   edi,edi
c0022a88:	7e 76                	jle    c0022b00 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022a8a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022a8e:	8d 70 01             	lea    esi,[eax+0x1]
c0022a91:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022a94:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022a97:	8b 1c 9d e0 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccf20]
c0022a9e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022aa1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022aa4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022aa7:	74 5e                	je     c0022b07 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022aa9:	83 ff 01             	cmp    edi,0x1
c0022aac:	74 4b                	je     c0022af9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022aae:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022ab2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022ab5:	8d 70 01             	lea    esi,[eax+0x1]
c0022ab8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022abb:	8b 1c 9d e0 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccf20]
c0022ac2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022ac5:	b8 02 00 00 00       	mov    eax,0x2
c0022aca:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022acd:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022ad0:	75 23                	jne    c0022af5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022ad2:	eb 27                	jmp    c0022afb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022ad4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022ad9:	8d 71 01             	lea    esi,[ecx+0x1]
c0022adc:	40                   	inc    eax
c0022add:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ae0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022ae3:	8b 1c 9d e0 30 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccf20]
c0022aea:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022aed:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022af0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022af3:	74 06                	je     c0022afb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022af5:	39 c7                	cmp    edi,eax
c0022af7:	75 db                	jne    c0022ad4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022af9:	89 f8                	mov    eax,edi
c0022afb:	5b                   	pop    ebx
c0022afc:	5e                   	pop    esi
c0022afd:	5f                   	pop    edi
c0022afe:	5d                   	pop    ebp
c0022aff:	c3                   	ret    
c0022b00:	5b                   	pop    ebx
c0022b01:	31 c0                	xor    eax,eax
c0022b03:	5e                   	pop    esi
c0022b04:	5f                   	pop    edi
c0022b05:	5d                   	pop    ebp
c0022b06:	c3                   	ret    
c0022b07:	b8 01 00 00 00       	mov    eax,0x1
c0022b0c:	eb ed                	jmp    c0022afb <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022b0e <SoundDevice::SoundDevice(char const*)>:
c0022b0e:	83 ec 1c             	sub    esp,0x1c
c0022b11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b15:	83 ec 08             	sub    esp,0x8
c0022b18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022b1c:	50                   	push   eax
c0022b1d:	e8 48 16 ff ff       	call   c001416a <Device::Device(char const*)>
c0022b22:	83 c4 10             	add    esp,0x10
c0022b25:	ba 04 d7 02 c0       	mov    edx,0xc002d704
c0022b2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b2e:	89 10                	mov    DWORD PTR [eax],edx
c0022b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b34:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022b3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b42:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022b4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b54:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022b59:	7f 19                	jg     c0022b74 <SoundDevice::SoundDevice(char const*)+0x66>
c0022b5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b63:	83 c2 54             	add    edx,0x54
c0022b66:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022b6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022b72:	eb e0                	jmp    c0022b54 <SoundDevice::SoundDevice(char const*)+0x46>
c0022b74:	90                   	nop
c0022b75:	83 c4 1c             	add    esp,0x1c
c0022b78:	c3                   	ret    
c0022b79:	90                   	nop

c0022b7a <SoundDevice::~SoundDevice()>:
c0022b7a:	53                   	push   ebx
c0022b7b:	83 ec 18             	sub    esp,0x18
c0022b7e:	ba 04 d7 02 c0       	mov    edx,0xc002d704
c0022b83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b87:	89 10                	mov    DWORD PTR [eax],edx
c0022b89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b91:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022b96:	7f 46                	jg     c0022bde <SoundDevice::~SoundDevice()+0x64>
c0022b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022b9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ba0:	83 c2 54             	add    edx,0x54
c0022ba3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022ba7:	85 c0                	test   eax,eax
c0022ba9:	74 2d                	je     c0022bd8 <SoundDevice::~SoundDevice()+0x5e>
c0022bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022baf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022bb3:	83 c2 54             	add    edx,0x54
c0022bb6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022bba:	85 db                	test   ebx,ebx
c0022bbc:	74 1a                	je     c0022bd8 <SoundDevice::~SoundDevice()+0x5e>
c0022bbe:	83 ec 0c             	sub    esp,0xc
c0022bc1:	53                   	push   ebx
c0022bc2:	e8 db fc ff ff       	call   c00228a2 <SoundChannel::~SoundChannel()>
c0022bc7:	83 c4 10             	add    esp,0x10
c0022bca:	83 ec 08             	sub    esp,0x8
c0022bcd:	6a 2c                	push   0x2c
c0022bcf:	53                   	push   ebx
c0022bd0:	e8 78 fe fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0022bd5:	83 c4 10             	add    esp,0x10
c0022bd8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022bdc:	eb b3                	jmp    c0022b91 <SoundDevice::~SoundDevice()+0x17>
c0022bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022be2:	83 ec 0c             	sub    esp,0xc
c0022be5:	50                   	push   eax
c0022be6:	e8 49 12 ff ff       	call   c0013e34 <Device::~Device()>
c0022beb:	83 c4 10             	add    esp,0x10
c0022bee:	90                   	nop
c0022bef:	83 c4 18             	add    esp,0x18
c0022bf2:	5b                   	pop    ebx
c0022bf3:	c3                   	ret    

c0022bf4 <SoundDevice::~SoundDevice()>:
c0022bf4:	83 ec 0c             	sub    esp,0xc
c0022bf7:	83 ec 0c             	sub    esp,0xc
c0022bfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022bfe:	e8 77 ff ff ff       	call   c0022b7a <SoundDevice::~SoundDevice()>
c0022c03:	83 c4 10             	add    esp,0x10
c0022c06:	83 ec 08             	sub    esp,0x8
c0022c09:	68 e4 01 00 00       	push   0x1e4
c0022c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c12:	e8 36 fe fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0022c17:	83 c4 10             	add    esp,0x10
c0022c1a:	83 c4 0c             	add    esp,0xc
c0022c1d:	c3                   	ret    

c0022c1e <SoundDevice::getFreeChannelNum()>:
c0022c1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c22:	31 c0                	xor    eax,eax
c0022c24:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022c2c:	74 09                	je     c0022c37 <SoundDevice::getFreeChannelNum()+0x19>
c0022c2e:	40                   	inc    eax
c0022c2f:	83 f8 20             	cmp    eax,0x20
c0022c32:	75 f0                	jne    c0022c24 <SoundDevice::getFreeChannelNum()+0x6>
c0022c34:	83 c8 ff             	or     eax,0xffffffff
c0022c37:	c3                   	ret    

c0022c38 <SoundDevice::addChannel(SoundChannel*)>:
c0022c38:	56                   	push   esi
c0022c39:	53                   	push   ebx
c0022c3a:	51                   	push   ecx
c0022c3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022c3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022c43:	53                   	push   ebx
c0022c44:	e8 d5 ff ff ff       	call   c0022c1e <SoundDevice::getFreeChannelNum()>
c0022c49:	5a                   	pop    edx
c0022c4a:	83 f8 ff             	cmp    eax,0xffffffff
c0022c4d:	74 51                	je     c0022ca0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022c4f:	85 f6                	test   esi,esi
c0022c51:	74 4d                	je     c0022ca0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022c53:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022c5a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022c61:	75 30                	jne    c0022c93 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022c63:	83 ec 0c             	sub    esp,0xc
c0022c66:	56                   	push   esi
c0022c67:	e8 52 fc ff ff       	call   c00228be <SoundChannel::getSampleRate()>
c0022c6c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022c72:	89 34 24             	mov    DWORD PTR [esp],esi
c0022c75:	e8 4c fc ff ff       	call   c00228c6 <SoundChannel::getBits()>
c0022c7a:	83 c4 0c             	add    esp,0xc
c0022c7d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022c83:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022c85:	50                   	push   eax
c0022c86:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022c8c:	53                   	push   ebx
c0022c8d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022c90:	83 c4 10             	add    esp,0x10
c0022c93:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022c99:	b8 01 00 00 00       	mov    eax,0x1
c0022c9e:	eb 03                	jmp    c0022ca3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022ca0:	83 c8 ff             	or     eax,0xffffffff
c0022ca3:	5a                   	pop    edx
c0022ca4:	5b                   	pop    ebx
c0022ca5:	5e                   	pop    esi
c0022ca6:	c3                   	ret    
c0022ca7:	90                   	nop

c0022ca8 <SoundDevice::removeChannel(int)>:
c0022ca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cb0:	83 fa 1f             	cmp    edx,0x1f
c0022cb3:	77 23                	ja     c0022cd8 <SoundDevice::removeChannel(int)+0x30>
c0022cb5:	8d 14 90             	lea    edx,[eax+edx*4]
c0022cb8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022cbf:	74 17                	je     c0022cd8 <SoundDevice::removeChannel(int)+0x30>
c0022cc1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022ccb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022cd1:	75 05                	jne    c0022cd8 <SoundDevice::removeChannel(int)+0x30>
c0022cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cd5:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022cd8:	c3                   	ret    
c0022cd9:	90                   	nop

c0022cda <SoundDevice::floatTo16(float*, short*, int)>:
c0022cda:	57                   	push   edi
c0022cdb:	56                   	push   esi
c0022cdc:	53                   	push   ebx
c0022cdd:	31 db                	xor    ebx,ebx
c0022cdf:	83 ec 10             	sub    esp,0x10
c0022ce2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022ce6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022cea:	0f 8d d0 00 00 00    	jge    c0022dc0 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cf7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022cfa:	e8 70 63 00 00       	call   c002906f <__extendsfdf2>
c0022cff:	83 c4 10             	add    esp,0x10
c0022d02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d0a:	68 00 00 f0 3f       	push   0x3ff00000
c0022d0f:	6a 00                	push   0x0
c0022d11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d19:	e8 dd 52 00 00       	call   c0027ffb <__adddf3>
c0022d1e:	83 c4 10             	add    esp,0x10
c0022d21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d29:	68 00 00 e0 3f       	push   0x3fe00000
c0022d2e:	6a 00                	push   0x0
c0022d30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d38:	e8 3b 59 00 00       	call   c0028678 <__muldf3>
c0022d3d:	83 c4 10             	add    esp,0x10
c0022d40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022d48:	68 c0 ff df 40       	push   0x40dfffc0
c0022d4d:	6a 00                	push   0x0
c0022d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d57:	e8 1c 59 00 00       	call   c0028678 <__muldf3>
c0022d5c:	59                   	pop    ecx
c0022d5d:	5f                   	pop    edi
c0022d5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022d6e:	e8 d8 61 00 00       	call   c0028f4b <__truncdfsf2>
c0022d73:	5a                   	pop    edx
c0022d74:	89 c7                	mov    edi,eax
c0022d76:	59                   	pop    ecx
c0022d77:	68 00 fe ff 46       	push   0x46fffe00
c0022d7c:	50                   	push   eax
c0022d7d:	e8 73 52 00 00       	call   c0027ff5 <__gesf2>
c0022d82:	83 c4 10             	add    esp,0x10
c0022d85:	85 c0                	test   eax,eax
c0022d87:	78 08                	js     c0022d91 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022d89:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022d8f:	eb 29                	jmp    c0022dba <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022d91:	50                   	push   eax
c0022d92:	50                   	push   eax
c0022d93:	6a 00                	push   0x0
c0022d95:	57                   	push   edi
c0022d96:	e8 5e 52 00 00       	call   c0027ff9 <__lesf2>
c0022d9b:	83 c4 10             	add    esp,0x10
c0022d9e:	85 c0                	test   eax,eax
c0022da0:	7f 08                	jg     c0022daa <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022da2:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022da8:	eb 10                	jmp    c0022dba <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022daa:	83 ec 0c             	sub    esp,0xc
c0022dad:	57                   	push   edi
c0022dae:	e8 59 63 00 00       	call   c002910c <lrintf>
c0022db3:	83 c4 10             	add    esp,0x10
c0022db6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022dba:	43                   	inc    ebx
c0022dbb:	e9 26 ff ff ff       	jmp    c0022ce6 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022dc0:	83 c4 10             	add    esp,0x10
c0022dc3:	5b                   	pop    ebx
c0022dc4:	5e                   	pop    esi
c0022dc5:	5f                   	pop    edi
c0022dc6:	c3                   	ret    
c0022dc7:	90                   	nop

c0022dc8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022dc8:	57                   	push   edi
c0022dc9:	56                   	push   esi
c0022dca:	53                   	push   ebx
c0022dcb:	31 db                	xor    ebx,ebx
c0022dcd:	83 ec 10             	sub    esp,0x10
c0022dd0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022dd4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022dd8:	0f 8d cb 00 00 00    	jge    c0022ea9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022dde:	83 ec 0c             	sub    esp,0xc
c0022de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022de5:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022de8:	e8 82 62 00 00       	call   c002906f <__extendsfdf2>
c0022ded:	83 c4 10             	add    esp,0x10
c0022df0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022df4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022df8:	68 00 00 f0 3f       	push   0x3ff00000
c0022dfd:	6a 00                	push   0x0
c0022dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e07:	e8 ef 51 00 00       	call   c0027ffb <__adddf3>
c0022e0c:	83 c4 10             	add    esp,0x10
c0022e0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e17:	68 00 00 e0 3f       	push   0x3fe00000
c0022e1c:	6a 00                	push   0x0
c0022e1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e26:	e8 4d 58 00 00       	call   c0028678 <__muldf3>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e36:	68 00 00 60 40       	push   0x40600000
c0022e3b:	6a 00                	push   0x0
c0022e3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e45:	e8 2e 58 00 00       	call   c0028678 <__muldf3>
c0022e4a:	59                   	pop    ecx
c0022e4b:	5f                   	pop    edi
c0022e4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e50:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e5c:	e8 ea 60 00 00       	call   c0028f4b <__truncdfsf2>
c0022e61:	5a                   	pop    edx
c0022e62:	89 c7                	mov    edi,eax
c0022e64:	59                   	pop    ecx
c0022e65:	68 00 00 fe 42       	push   0x42fe0000
c0022e6a:	50                   	push   eax
c0022e6b:	e8 85 51 00 00       	call   c0027ff5 <__gesf2>
c0022e70:	83 c4 10             	add    esp,0x10
c0022e73:	85 c0                	test   eax,eax
c0022e75:	78 06                	js     c0022e7d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022e77:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022e7b:	eb 26                	jmp    c0022ea3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e7d:	50                   	push   eax
c0022e7e:	50                   	push   eax
c0022e7f:	6a 00                	push   0x0
c0022e81:	57                   	push   edi
c0022e82:	e8 72 51 00 00       	call   c0027ff9 <__lesf2>
c0022e87:	83 c4 10             	add    esp,0x10
c0022e8a:	85 c0                	test   eax,eax
c0022e8c:	7f 06                	jg     c0022e94 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022e8e:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022e92:	eb 0f                	jmp    c0022ea3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e94:	83 ec 0c             	sub    esp,0xc
c0022e97:	57                   	push   edi
c0022e98:	e8 6f 62 00 00       	call   c002910c <lrintf>
c0022e9d:	83 c4 10             	add    esp,0x10
c0022ea0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ea3:	43                   	inc    ebx
c0022ea4:	e9 2b ff ff ff       	jmp    c0022dd4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ea9:	83 c4 10             	add    esp,0x10
c0022eac:	5b                   	pop    ebx
c0022ead:	5e                   	pop    esi
c0022eae:	5f                   	pop    edi
c0022eaf:	c3                   	ret    

c0022eb0 <SoundDevice::getAudio(int, float*, float*)>:
c0022eb0:	55                   	push   ebp
c0022eb1:	57                   	push   edi
c0022eb2:	56                   	push   esi
c0022eb3:	53                   	push   ebx
c0022eb4:	83 ec 28             	sub    esp,0x28
c0022eb7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022ebb:	68 08 d6 02 c0       	push   0xc002d608
c0022ec0:	e8 68 fc fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022ec5:	59                   	pop    ecx
c0022ec6:	5e                   	pop    esi
c0022ec7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022ecb:	68 1f d6 02 c0       	push   0xc002d61f
c0022ed0:	e8 58 fc fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022ed5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022ed9:	83 c4 0c             	add    esp,0xc
c0022edc:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022ee3:	56                   	push   esi
c0022ee4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022ee8:	68 41 d6 02 c0       	push   0xc002d641
c0022eed:	e8 3b fc fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022ef2:	83 c4 0c             	add    esp,0xc
c0022ef5:	56                   	push   esi
c0022ef6:	31 f6                	xor    esi,esi
c0022ef8:	6a 00                	push   0x0
c0022efa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022efe:	e8 4d d8 fd ff       	call   c0000750 <memset>
c0022f03:	83 c4 10             	add    esp,0x10
c0022f06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022f0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022f16:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022f1d:	85 c0                	test   eax,eax
c0022f1f:	0f 84 d7 00 00 00    	je     c0022ffc <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022f25:	83 ec 0c             	sub    esp,0xc
c0022f28:	50                   	push   eax
c0022f29:	e8 a8 f9 ff ff       	call   c00228d6 <SoundChannel::getBufferSize()>
c0022f2e:	5f                   	pop    edi
c0022f2f:	5d                   	pop    ebp
c0022f30:	50                   	push   eax
c0022f31:	68 65 d6 02 c0       	push   0xc002d665
c0022f36:	e8 f2 fb fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022f3b:	58                   	pop    eax
c0022f3c:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022f43:	e8 86 f9 ff ff       	call   c00228ce <SoundChannel::getBufferUsed()>
c0022f48:	5a                   	pop    edx
c0022f49:	59                   	pop    ecx
c0022f4a:	50                   	push   eax
c0022f4b:	68 78 d6 02 c0       	push   0xc002d678
c0022f50:	e8 d8 fb fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022f55:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022f59:	99                   	cdq    
c0022f5a:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022f60:	50                   	push   eax
c0022f61:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022f67:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f6b:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022f72:	e8 67 f9 ff ff       	call   c00228de <SoundChannel::unbuffer(float*, int, int)>
c0022f77:	83 c4 14             	add    esp,0x14
c0022f7a:	89 c5                	mov    ebp,eax
c0022f7c:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022f83:	e8 46 f9 ff ff       	call   c00228ce <SoundChannel::getBufferUsed()>
c0022f88:	5f                   	pop    edi
c0022f89:	5a                   	pop    edx
c0022f8a:	50                   	push   eax
c0022f8b:	68 90 d6 02 c0       	push   0xc002d690
c0022f90:	e8 98 fb fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022f95:	56                   	push   esi
c0022f96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022f9a:	99                   	cdq    
c0022f9b:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022fa1:	50                   	push   eax
c0022fa2:	55                   	push   ebp
c0022fa3:	68 a8 d6 02 c0       	push   0xc002d6a8
c0022fa8:	e8 80 fb fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022fad:	83 c4 20             	add    esp,0x20
c0022fb0:	31 c0                	xor    eax,eax
c0022fb2:	39 e8                	cmp    eax,ebp
c0022fb4:	7d 1e                	jge    c0022fd4 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022fb6:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022fbc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022fc0:	0f af d0             	imul   edx,eax
c0022fc3:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022fc6:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022fca:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022fce:	40                   	inc    eax
c0022fcf:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022fd2:	eb de                	jmp    c0022fb2 <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022fd4:	50                   	push   eax
c0022fd5:	50                   	push   eax
c0022fd6:	55                   	push   ebp
c0022fd7:	68 d5 d6 02 c0       	push   0xc002d6d5
c0022fdc:	e8 4c fb fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022fe1:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022fe5:	5a                   	pop    edx
c0022fe6:	59                   	pop    ecx
c0022fe7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022feb:	68 e6 d6 02 c0       	push   0xc002d6e6
c0022ff0:	e8 38 fb fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0022ff5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022ff9:	83 c4 10             	add    esp,0x10
c0022ffc:	46                   	inc    esi
c0022ffd:	83 fe 20             	cmp    esi,0x20
c0023000:	0f 85 10 ff ff ff    	jne    c0022f16 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0023006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002300a:	83 c4 1c             	add    esp,0x1c
c002300d:	5b                   	pop    ebx
c002300e:	5e                   	pop    esi
c002300f:	5f                   	pop    edi
c0023010:	5d                   	pop    ebp
c0023011:	c3                   	ret    

c0023012 <PCI::open(int, int, void*)>:
c0023012:	83 ec 18             	sub    esp,0x18
c0023015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023019:	8b 10                	mov    edx,DWORD PTR [eax]
c002301b:	50                   	push   eax
c002301c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002301f:	31 c0                	xor    eax,eax
c0023021:	83 c4 1c             	add    esp,0x1c
c0023024:	c3                   	ret    
c0023025:	90                   	nop

c0023026 <PCI::close(int, int, void*)>:
c0023026:	31 c0                	xor    eax,eax
c0023028:	c3                   	ret    
c0023029:	90                   	nop

c002302a <PCI::PCI()>:
c002302a:	83 ec 0c             	sub    esp,0xc
c002302d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023031:	83 ec 08             	sub    esp,0x8
c0023034:	68 34 d7 02 c0       	push   0xc002d734
c0023039:	50                   	push   eax
c002303a:	e8 8f 07 ff ff       	call   c00137ce <Bus::Bus(char const*)>
c002303f:	83 c4 10             	add    esp,0x10
c0023042:	ba e0 d7 02 c0       	mov    edx,0xc002d7e0
c0023047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304b:	89 10                	mov    DWORD PTR [eax],edx
c002304d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023051:	a3 e4 34 03 c0       	mov    ds:0xc00334e4,eax
c0023056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023060:	0f b6 d0             	movzx  edx,al
c0023063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023067:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002306e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023072:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023078:	0f b6 d0             	movzx  edx,al
c002307b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023088:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002308e:	8d 50 01             	lea    edx,[eax+0x1]
c0023091:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023095:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002309b:	0f b6 d0             	movzx  edx,al
c002309e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00230a6:	83 c9 c0             	or     ecx,0xffffffc0
c00230a9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00230ad:	90                   	nop
c00230ae:	83 c4 0c             	add    esp,0xc
c00230b1:	c3                   	ret    

c00230b2 <PCI::readBAR8(unsigned int, int)>:
c00230b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230ba:	f6 c2 01             	test   dl,0x1
c00230bd:	74 07                	je     c00230c6 <PCI::readBAR8(unsigned int, int)+0x14>
c00230bf:	83 e2 fc             	and    edx,0xfffffffc
c00230c2:	01 c2                	add    edx,eax
c00230c4:	ec                   	in     al,dx
c00230c5:	c3                   	ret    
c00230c6:	83 e2 f0             	and    edx,0xfffffff0
c00230c9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00230cc:	c3                   	ret    
c00230cd:	90                   	nop

c00230ce <PCI::readBAR16(unsigned int, int)>:
c00230ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230d6:	f6 c2 01             	test   dl,0x1
c00230d9:	74 08                	je     c00230e3 <PCI::readBAR16(unsigned int, int)+0x15>
c00230db:	83 e2 fc             	and    edx,0xfffffffc
c00230de:	01 c2                	add    edx,eax
c00230e0:	66 ed                	in     ax,dx
c00230e2:	c3                   	ret    
c00230e3:	83 e2 f0             	and    edx,0xfffffff0
c00230e6:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230ea:	c3                   	ret    
c00230eb:	90                   	nop

c00230ec <PCI::readBAR32(unsigned int, int)>:
c00230ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230f4:	f6 c2 01             	test   dl,0x1
c00230f7:	74 07                	je     c0023100 <PCI::readBAR32(unsigned int, int)+0x14>
c00230f9:	83 e2 fc             	and    edx,0xfffffffc
c00230fc:	01 c2                	add    edx,eax
c00230fe:	ed                   	in     eax,dx
c00230ff:	c3                   	ret    
c0023100:	83 e2 f0             	and    edx,0xfffffff0
c0023103:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023106:	c3                   	ret    
c0023107:	90                   	nop

c0023108 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0023108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002310c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023110:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023114:	f6 c2 01             	test   dl,0x1
c0023117:	74 07                	je     c0023120 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023119:	83 e2 fc             	and    edx,0xfffffffc
c002311c:	01 ca                	add    edx,ecx
c002311e:	ee                   	out    dx,al
c002311f:	c3                   	ret    
c0023120:	83 e2 f0             	and    edx,0xfffffff0
c0023123:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0023126:	c3                   	ret    
c0023127:	90                   	nop

c0023128 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023128:	57                   	push   edi
c0023129:	56                   	push   esi
c002312a:	53                   	push   ebx
c002312b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002312f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023133:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023137:	f6 c2 01             	test   dl,0x1
c002313a:	74 24                	je     c0023160 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c002313c:	89 d3                	mov    ebx,edx
c002313e:	83 e3 fc             	and    ebx,0xfffffffc
c0023141:	50                   	push   eax
c0023142:	0f b7 c7             	movzx  eax,di
c0023145:	50                   	push   eax
c0023146:	8d 04 33             	lea    eax,[ebx+esi*1]
c0023149:	50                   	push   eax
c002314a:	68 3c d7 02 c0       	push   0xc002d73c
c002314f:	e8 d9 f9 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0023154:	8d 14 33             	lea    edx,[ebx+esi*1]
c0023157:	89 f8                	mov    eax,edi
c0023159:	66 ef                	out    dx,ax
c002315b:	83 c4 10             	add    esp,0x10
c002315e:	eb 07                	jmp    c0023167 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0023160:	83 e2 f0             	and    edx,0xfffffff0
c0023163:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0023167:	5b                   	pop    ebx
c0023168:	5e                   	pop    esi
c0023169:	5f                   	pop    edi
c002316a:	c3                   	ret    
c002316b:	90                   	nop

c002316c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002316c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023178:	f6 c2 01             	test   dl,0x1
c002317b:	74 07                	je     c0023184 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002317d:	83 e2 fc             	and    edx,0xfffffffc
c0023180:	01 ca                	add    edx,ecx
c0023182:	ef                   	out    dx,eax
c0023183:	c3                   	ret    
c0023184:	83 e2 f0             	and    edx,0xfffffff0
c0023187:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002318a:	c3                   	ret    
c002318b:	90                   	nop

c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002318c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023190:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023195:	89 ca                	mov    edx,ecx
c0023197:	c1 e0 10             	shl    eax,0x10
c002319a:	81 e2 fc 00 00 00    	and    edx,0xfc
c00231a0:	09 d0                	or     eax,edx
c00231a2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00231a7:	c1 e2 08             	shl    edx,0x8
c00231aa:	09 d0                	or     eax,edx
c00231ac:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00231b1:	c1 e2 0b             	shl    edx,0xb
c00231b4:	09 d0                	or     eax,edx
c00231b6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00231bb:	0d 00 00 00 80       	or     eax,0x80000000
c00231c0:	ef                   	out    dx,eax
c00231c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231c6:	ed                   	in     eax,dx
c00231c7:	83 e1 02             	and    ecx,0x2
c00231ca:	0f b6 c9             	movzx  ecx,cl
c00231cd:	c1 e1 03             	shl    ecx,0x3
c00231d0:	d3 e8                	shr    eax,cl
c00231d2:	c3                   	ret    
c00231d3:	90                   	nop

c00231d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00231d4:	6a 00                	push   0x0
c00231d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231db:	50                   	push   eax
c00231dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231e1:	50                   	push   eax
c00231e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231e7:	50                   	push   eax
c00231e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231ec:	e8 9b ff ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231f1:	83 c4 14             	add    esp,0x14
c00231f4:	c3                   	ret    
c00231f5:	90                   	nop

c00231f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00231f6:	6a 0e                	push   0xe
c00231f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231fd:	50                   	push   eax
c00231fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023203:	50                   	push   eax
c0023204:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023209:	50                   	push   eax
c002320a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002320e:	e8 79 ff ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023213:	83 c4 14             	add    esp,0x14
c0023216:	0f b6 c0             	movzx  eax,al
c0023219:	c3                   	ret    

c002321a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002321a:	55                   	push   ebp
c002321b:	57                   	push   edi
c002321c:	56                   	push   esi
c002321d:	53                   	push   ebx
c002321e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023223:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023228:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002322d:	6a 0a                	push   0xa
c002322f:	56                   	push   esi
c0023230:	55                   	push   ebp
c0023231:	57                   	push   edi
c0023232:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023236:	e8 51 ff ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002323b:	6a 0a                	push   0xa
c002323d:	89 c3                	mov    ebx,eax
c002323f:	56                   	push   esi
c0023240:	0f b6 db             	movzx  ebx,bl
c0023243:	55                   	push   ebp
c0023244:	57                   	push   edi
c0023245:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023249:	e8 3e ff ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002324e:	83 c4 28             	add    esp,0x28
c0023251:	25 00 ff 00 00       	and    eax,0xff00
c0023256:	09 d8                	or     eax,ebx
c0023258:	5b                   	pop    ebx
c0023259:	5e                   	pop    esi
c002325a:	5f                   	pop    edi
c002325b:	5d                   	pop    ebp
c002325c:	c3                   	ret    
c002325d:	90                   	nop

c002325e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002325e:	6a 08                	push   0x8
c0023260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023265:	50                   	push   eax
c0023266:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002326b:	50                   	push   eax
c002326c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023271:	50                   	push   eax
c0023272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023276:	e8 11 ff ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002327b:	83 c4 14             	add    esp,0x14
c002327e:	0f b6 c4             	movzx  eax,ah
c0023281:	c3                   	ret    

c0023282 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023282:	6a 08                	push   0x8
c0023284:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023289:	50                   	push   eax
c002328a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002328f:	50                   	push   eax
c0023290:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023295:	50                   	push   eax
c0023296:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002329a:	e8 ed fe ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002329f:	83 c4 14             	add    esp,0x14
c00232a2:	c3                   	ret    
c00232a3:	90                   	nop

c00232a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00232a4:	6a 3c                	push   0x3c
c00232a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232ab:	50                   	push   eax
c00232ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232b1:	50                   	push   eax
c00232b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232b7:	50                   	push   eax
c00232b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232bc:	e8 cb fe ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232c1:	83 c4 14             	add    esp,0x14
c00232c4:	c3                   	ret    
c00232c5:	90                   	nop

c00232c6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00232c6:	6a 18                	push   0x18
c00232c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232cd:	50                   	push   eax
c00232ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232d3:	50                   	push   eax
c00232d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232d9:	50                   	push   eax
c00232da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232de:	e8 a9 fe ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232e3:	83 c4 14             	add    esp,0x14
c00232e6:	0f b6 c4             	movzx  eax,ah
c00232e9:	c3                   	ret    

c00232ea <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00232ea:	55                   	push   ebp
c00232eb:	57                   	push   edi
c00232ec:	56                   	push   esi
c00232ed:	53                   	push   ebx
c00232ee:	50                   	push   eax
c00232ef:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00232f3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232f8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232fd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023302:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023309:	8d 43 12             	lea    eax,[ebx+0x12]
c002330c:	83 c3 10             	add    ebx,0x10
c002330f:	0f b6 c0             	movzx  eax,al
c0023312:	0f b6 db             	movzx  ebx,bl
c0023315:	50                   	push   eax
c0023316:	51                   	push   ecx
c0023317:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002331b:	57                   	push   edi
c002331c:	55                   	push   ebp
c002331d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023321:	e8 66 fe ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023326:	53                   	push   ebx
c0023327:	89 c6                	mov    esi,eax
c0023329:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002332d:	c1 e6 10             	shl    esi,0x10
c0023330:	51                   	push   ecx
c0023331:	57                   	push   edi
c0023332:	55                   	push   ebp
c0023333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023337:	e8 50 fe ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002333c:	83 c4 2c             	add    esp,0x2c
c002333f:	0f b7 c0             	movzx  eax,ax
c0023342:	5b                   	pop    ebx
c0023343:	09 f0                	or     eax,esi
c0023345:	5e                   	pop    esi
c0023346:	5f                   	pop    edi
c0023347:	5d                   	pop    ebp
c0023348:	c3                   	ret    
c0023349:	90                   	nop

c002334a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002334a:	53                   	push   ebx
c002334b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023350:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0023355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023359:	c1 e1 10             	shl    ecx,0x10
c002335c:	25 fc 00 00 00       	and    eax,0xfc
c0023361:	09 c1                	or     ecx,eax
c0023363:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023368:	c1 e0 08             	shl    eax,0x8
c002336b:	09 c1                	or     ecx,eax
c002336d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023372:	c1 e0 0b             	shl    eax,0xb
c0023375:	09 c1                	or     ecx,eax
c0023377:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002337d:	89 c8                	mov    eax,ecx
c002337f:	ef                   	out    dx,eax
c0023380:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023385:	ed                   	in     eax,dx
c0023386:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002338b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023390:	74 0a                	je     c002339c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023392:	0f b7 d8             	movzx  ebx,ax
c0023395:	89 d0                	mov    eax,edx
c0023397:	c1 e0 10             	shl    eax,0x10
c002339a:	eb 05                	jmp    c00233a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002339c:	66 31 c0             	xor    ax,ax
c002339f:	89 d3                	mov    ebx,edx
c00233a1:	09 c3                	or     ebx,eax
c00233a3:	ba f8 0c 00 00       	mov    edx,0xcf8
c00233a8:	89 c8                	mov    eax,ecx
c00233aa:	ef                   	out    dx,eax
c00233ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233b0:	89 d8                	mov    eax,ebx
c00233b2:	ef                   	out    dx,eax
c00233b3:	5b                   	pop    ebx
c00233b4:	c3                   	ret    
c00233b5:	90                   	nop

c00233b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00233b6:	55                   	push   ebp
c00233b7:	57                   	push   edi
c00233b8:	56                   	push   esi
c00233b9:	53                   	push   ebx
c00233ba:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00233c0:	80 3d f0 34 03 c0 00 	cmp    BYTE PTR ds:0xc00334f0,0x0
c00233c7:	0f 85 96 00 00 00    	jne    c0023463 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00233cd:	83 ec 0c             	sub    esp,0xc
c00233d0:	68 14 01 00 00       	push   0x114
c00233d5:	e8 b2 c4 fe ff       	call   c000f88c <malloc>
c00233da:	83 c4 0c             	add    esp,0xc
c00233dd:	89 c3                	mov    ebx,eax
c00233df:	ff 35 f0 26 03 c0    	push   DWORD PTR ds:0xc00326f0
c00233e5:	68 53 d7 02 c0       	push   0xc002d753
c00233ea:	50                   	push   eax
c00233eb:	e8 9c fc fe ff       	call   c001308c <File::File(char const*, Process*)>
c00233f0:	5a                   	pop    edx
c00233f1:	59                   	pop    ecx
c00233f2:	6a 01                	push   0x1
c00233f4:	53                   	push   ebx
c00233f5:	e8 f6 fc fe ff       	call   c00130f0 <File::open(FileOpenMode)>
c00233fa:	83 c4 0c             	add    esp,0xc
c00233fd:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023401:	50                   	push   eax
c0023402:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023406:	50                   	push   eax
c0023407:	53                   	push   ebx
c0023408:	e8 8f ff fe ff       	call   c001339c <File::stat(unsigned long long*, bool*)>
c002340d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023411:	40                   	inc    eax
c0023412:	89 04 24             	mov    DWORD PTR [esp],eax
c0023415:	e8 72 c4 fe ff       	call   c000f88c <malloc>
c002341a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002341e:	a3 ec 34 03 c0       	mov    ds:0xc00334ec,eax
c0023423:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023427:	5e                   	pop    esi
c0023428:	8b 13                	mov    edx,DWORD PTR [ebx]
c002342a:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002342e:	51                   	push   ecx
c002342f:	50                   	push   eax
c0023430:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023434:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023438:	53                   	push   ebx
c0023439:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002343c:	83 c4 14             	add    esp,0x14
c002343f:	53                   	push   ebx
c0023440:	e8 09 fd fe ff       	call   c001314e <File::close()>
c0023445:	5f                   	pop    edi
c0023446:	5d                   	pop    ebp
c0023447:	ff 35 ec 34 03 c0    	push   DWORD PTR ds:0xc00334ec
c002344d:	68 6c d7 02 c0       	push   0xc002d76c
c0023452:	e8 d6 f6 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0023457:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002345b:	83 c4 10             	add    esp,0x10
c002345e:	a3 e8 34 03 c0       	mov    ds:0xc00334e8,eax
c0023463:	a1 e8 34 03 c0       	mov    eax,ds:0xc00334e8
c0023468:	8b 15 ec 34 03 c0    	mov    edx,DWORD PTR ds:0xc00334ec
c002346e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023471:	31 ff                	xor    edi,edi
c0023473:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c002347b:	31 f6                	xor    esi,esi
c002347d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023482:	31 db                	xor    ebx,ebx
c0023484:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002348c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023491:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023498:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002349c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00234a3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00234a7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00234aa:	0f 8e 6b 01 00 00    	jle    c002361b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c00234b0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00234b3:	d4 40                	aam    0x40
c00234b5:	d5 39                	aad    0x39
c00234b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00234bb:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00234bf:	d4 40                	aam    0x40
c00234c1:	d5 39                	aad    0x39
c00234c3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00234c7:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00234cb:	d4 40                	aam    0x40
c00234cd:	d5 39                	aad    0x39
c00234cf:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00234d3:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00234d7:	d4 40                	aam    0x40
c00234d9:	d5 39                	aad    0x39
c00234db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234df:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00234e3:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00234e7:	3c 56                	cmp    al,0x56
c00234e9:	74 45                	je     c0023530 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00234eb:	d4 40                	aam    0x40
c00234ed:	d5 39                	aad    0x39
c00234ef:	8d 48 d0             	lea    ecx,[eax-0x30]
c00234f2:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00234f6:	0f b6 c9             	movzx  ecx,cl
c00234f9:	c1 e1 04             	shl    ecx,0x4
c00234fc:	d4 40                	aam    0x40
c00234fe:	d5 39                	aad    0x39
c0023500:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023503:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0023507:	0f b6 db             	movzx  ebx,bl
c002350a:	09 cb                	or     ebx,ecx
c002350c:	c1 e3 04             	shl    ebx,0x4
c002350f:	d4 40                	aam    0x40
c0023511:	d5 39                	aad    0x39
c0023513:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023516:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002351a:	0f b6 c9             	movzx  ecx,cl
c002351d:	09 cb                	or     ebx,ecx
c002351f:	c1 e3 04             	shl    ebx,0x4
c0023522:	89 d9                	mov    ecx,ebx
c0023524:	d4 40                	aam    0x40
c0023526:	d5 39                	aad    0x39
c0023528:	8d 58 d0             	lea    ebx,[eax-0x30]
c002352b:	0f b6 db             	movzx  ebx,bl
c002352e:	09 cb                	or     ebx,ecx
c0023530:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023534:	80 f9 44             	cmp    cl,0x44
c0023537:	74 47                	je     c0023580 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c0023539:	88 c8                	mov    al,cl
c002353b:	d4 40                	aam    0x40
c002353d:	d5 39                	aad    0x39
c002353f:	83 e8 30             	sub    eax,0x30
c0023542:	0f b6 e8             	movzx  ebp,al
c0023545:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023549:	c1 e5 04             	shl    ebp,0x4
c002354c:	d4 40                	aam    0x40
c002354e:	d5 39                	aad    0x39
c0023550:	83 e8 30             	sub    eax,0x30
c0023553:	0f b6 f0             	movzx  esi,al
c0023556:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c002355a:	09 ee                	or     esi,ebp
c002355c:	c1 e6 04             	shl    esi,0x4
c002355f:	d4 40                	aam    0x40
c0023561:	d5 39                	aad    0x39
c0023563:	83 e8 30             	sub    eax,0x30
c0023566:	0f b6 e8             	movzx  ebp,al
c0023569:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002356d:	09 ee                	or     esi,ebp
c002356f:	c1 e6 04             	shl    esi,0x4
c0023572:	89 f5                	mov    ebp,esi
c0023574:	d4 40                	aam    0x40
c0023576:	d5 39                	aad    0x39
c0023578:	83 e8 30             	sub    eax,0x30
c002357b:	0f b6 f0             	movzx  esi,al
c002357e:	09 ee                	or     esi,ebp
c0023580:	83 c7 10             	add    edi,0x10
c0023583:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023587:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002358a:	3c 0a                	cmp    al,0xa
c002358c:	74 09                	je     c0023597 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c002358e:	45                   	inc    ebp
c002358f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023592:	75 16                	jne    c00235aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c0023594:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023597:	3c 0a                	cmp    al,0xa
c0023599:	0f 94 c0             	sete   al
c002359c:	0f b6 c0             	movzx  eax,al
c002359f:	01 c7                	add    edi,eax
c00235a1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00235a6:	75 0c                	jne    c00235b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c00235a8:	eb 15                	jmp    c00235bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c00235aa:	47                   	inc    edi
c00235ab:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00235ae:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00235b2:	eb d3                	jmp    c0023587 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c00235b4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00235b9:	0f 85 e8 fe ff ff    	jne    c00234a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235bf:	80 f9 44             	cmp    cl,0x44
c00235c2:	74 0b                	je     c00235cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00235c4:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00235c9:	0f 85 d8 fe ff ff    	jne    c00234a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235cf:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00235d3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00235d7:	c1 e1 04             	shl    ecx,0x4
c00235da:	83 e8 30             	sub    eax,0x30
c00235dd:	09 c8                	or     eax,ecx
c00235df:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00235e3:	0f 85 be fe ff ff    	jne    c00234a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00235e9:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00235ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00235f1:	c1 e1 04             	shl    ecx,0x4
c00235f4:	83 e8 30             	sub    eax,0x30
c00235f7:	09 c8                	or     eax,ecx
c00235f9:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00235fd:	0f 85 a4 fe ff ff    	jne    c00234a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023603:	50                   	push   eax
c0023604:	50                   	push   eax
c0023605:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023609:	50                   	push   eax
c002360a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023611:	e8 f6 d1 fd ff       	call   c000080c <strcpy>
c0023616:	83 c4 10             	add    esp,0x10
c0023619:	eb 15                	jmp    c0023630 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c002361b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023622:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002362d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023630:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023637:	81 c4 2c 01 00 00    	add    esp,0x12c
c002363d:	5b                   	pop    ebx
c002363e:	5e                   	pop    esi
c002363f:	5f                   	pop    edi
c0023640:	5d                   	pop    ebp
c0023641:	c3                   	ret    

c0023642 <PCI::checkBus(unsigned char)>:
c0023642:	56                   	push   esi
c0023643:	53                   	push   ebx
c0023644:	31 db                	xor    ebx,ebx
c0023646:	51                   	push   ecx
c0023647:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002364c:	52                   	push   edx
c002364d:	53                   	push   ebx
c002364e:	43                   	inc    ebx
c002364f:	56                   	push   esi
c0023650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023654:	e8 2b 03 00 00       	call   c0023984 <PCI::checkDevice(unsigned char, unsigned char)>
c0023659:	83 c4 10             	add    esp,0x10
c002365c:	83 fb 20             	cmp    ebx,0x20
c002365f:	75 eb                	jne    c002364c <PCI::checkBus(unsigned char)+0xa>
c0023661:	58                   	pop    eax
c0023662:	5b                   	pop    ebx
c0023663:	5e                   	pop    esi
c0023664:	c3                   	ret    
c0023665:	90                   	nop

c0023666 <PCI::foundDevice(PCIDeviceInfo)>:
c0023666:	55                   	push   ebp
c0023667:	57                   	push   edi
c0023668:	56                   	push   esi
c0023669:	53                   	push   ebx
c002366a:	83 ec 1c             	sub    esp,0x1c
c002366d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023671:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023677:	0f 84 52 01 00 00    	je     c00237cf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002367d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023681:	66 81 f9 06 04       	cmp    cx,0x406
c0023686:	75 2c                	jne    c00236b4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023688:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002368d:	50                   	push   eax
c002368e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023693:	50                   	push   eax
c0023694:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023699:	50                   	push   eax
c002369a:	56                   	push   esi
c002369b:	e8 26 fc ff ff       	call   c00232c6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00236a0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236a4:	0f b6 c0             	movzx  eax,al
c00236a7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00236ab:	83 c4 2c             	add    esp,0x2c
c00236ae:	5b                   	pop    ebx
c00236af:	5e                   	pop    esi
c00236b0:	5f                   	pop    edi
c00236b1:	5d                   	pop    ebp
c00236b2:	eb 8e                	jmp    c0023642 <PCI::checkBus(unsigned char)>
c00236b4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00236b8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00236be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00236c2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00236c6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00236ca:	88 d3                	mov    bl,dl
c00236cc:	85 c0                	test   eax,eax
c00236ce:	74 33                	je     c0023703 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00236d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00236d3:	85 d2                	test   edx,edx
c00236d5:	74 28                	je     c00236ff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236d7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00236dd:	31 ef                	xor    edi,ebp
c00236df:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00236e5:	75 18                	jne    c00236ff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00236eb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00236f1:	75 0c                	jne    c00236ff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00236f3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00236f9:	0f 84 d0 00 00 00    	je     c00237cf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00236ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0023701:	eb c9                	jmp    c00236cc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023703:	66 81 f9 01 06       	cmp    cx,0x601
c0023708:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002370c:	75 19                	jne    c0023727 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002370e:	83 ec 0c             	sub    esp,0xc
c0023711:	68 64 01 00 00       	push   0x164
c0023716:	e8 71 c1 fe ff       	call   c000f88c <malloc>
c002371b:	89 c5                	mov    ebp,eax
c002371d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023720:	e8 95 0f 00 00       	call   c00246ba <SATABus::SATABus()>
c0023725:	eb 1e                	jmp    c0023745 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023727:	66 81 f9 01 01       	cmp    cx,0x101
c002372c:	75 60                	jne    c002378e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002372e:	83 ec 0c             	sub    esp,0xc
c0023731:	68 70 02 00 00       	push   0x270
c0023736:	e8 51 c1 fe ff       	call   c000f88c <malloc>
c002373b:	89 c5                	mov    ebp,eax
c002373d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023740:	e8 03 03 00 00       	call   c0023a48 <IDE::IDE()>
c0023745:	58                   	pop    eax
c0023746:	5a                   	pop    edx
c0023747:	55                   	push   ebp
c0023748:	56                   	push   esi
c0023749:	e8 18 08 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c002374e:	83 ec 1c             	sub    esp,0x1c
c0023751:	b9 09 00 00 00       	mov    ecx,0x9
c0023756:	fc                   	cld    
c0023757:	89 e7                	mov    edi,esp
c0023759:	89 de                	mov    esi,ebx
c002375b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002375d:	55                   	push   ebp
c002375e:	e8 15 07 ff ff       	call   c0013e78 <Device::preOpenPCI(PCIDeviceInfo)>
c0023763:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023766:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002376a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023772:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002377a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023782:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023785:	83 c4 4c             	add    esp,0x4c
c0023788:	5b                   	pop    ebx
c0023789:	5e                   	pop    esi
c002378a:	5f                   	pop    edi
c002378b:	5d                   	pop    ebp
c002378c:	ff e0                	jmp    eax
c002378e:	83 ec 0c             	sub    esp,0xc
c0023791:	68 58 01 00 00       	push   0x158
c0023796:	e8 f1 c0 fe ff       	call   c000f88c <malloc>
c002379b:	89 c5                	mov    ebp,eax
c002379d:	58                   	pop    eax
c002379e:	5a                   	pop    edx
c002379f:	68 7e d7 02 c0       	push   0xc002d77e
c00237a4:	55                   	push   ebp
c00237a5:	e8 c6 0a ff ff       	call   c0014270 <DriverlessDevice::DriverlessDevice(char const*)>
c00237aa:	59                   	pop    ecx
c00237ab:	5f                   	pop    edi
c00237ac:	55                   	push   ebp
c00237ad:	56                   	push   esi
c00237ae:	e8 b3 07 ff ff       	call   c0013f66 <Device::addChild(Device*)>
c00237b3:	b9 09 00 00 00       	mov    ecx,0x9
c00237b8:	fc                   	cld    
c00237b9:	89 df                	mov    edi,ebx
c00237bb:	89 de                	mov    esi,ebx
c00237bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00237bf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00237c3:	83 c4 2c             	add    esp,0x2c
c00237c6:	5b                   	pop    ebx
c00237c7:	5e                   	pop    esi
c00237c8:	5f                   	pop    edi
c00237c9:	5d                   	pop    ebp
c00237ca:	e9 a9 06 ff ff       	jmp    c0013e78 <Device::preOpenPCI(PCIDeviceInfo)>
c00237cf:	83 c4 1c             	add    esp,0x1c
c00237d2:	5b                   	pop    ebx
c00237d3:	5e                   	pop    esi
c00237d4:	5f                   	pop    edi
c00237d5:	5d                   	pop    ebp
c00237d6:	c3                   	ret    
c00237d7:	90                   	nop

c00237d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00237d8:	55                   	push   ebp
c00237d9:	57                   	push   edi
c00237da:	56                   	push   esi
c00237db:	53                   	push   ebx
c00237dc:	83 ec 5c             	sub    esp,0x5c
c00237df:	8b 6c 24 70          	mov    ebp,DWORD PTR [esp+0x70]
c00237e3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00237e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237eb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00237ef:	0f b6 74 24 0c       	movzx  esi,BYTE PTR [esp+0xc]
c00237f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00237f8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00237fc:	0f b6 5c 24 10       	movzx  ebx,BYTE PTR [esp+0x10]
c0023801:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023805:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002380a:	6a 0c                	push   0xc
c002380c:	57                   	push   edi
c002380d:	53                   	push   ebx
c002380e:	56                   	push   esi
c002380f:	55                   	push   ebp
c0023810:	e8 77 f9 ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023815:	57                   	push   edi
c0023816:	53                   	push   ebx
c0023817:	56                   	push   esi
c0023818:	55                   	push   ebp
c0023819:	e8 fc f9 ff ff       	call   c002321a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002381e:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c0023823:	83 c4 24             	add    esp,0x24
c0023826:	57                   	push   edi
c0023827:	53                   	push   ebx
c0023828:	56                   	push   esi
c0023829:	55                   	push   ebp
c002382a:	e8 75 fa ff ff       	call   c00232a4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002382f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0023833:	6a 3c                	push   0x3c
c0023835:	57                   	push   edi
c0023836:	53                   	push   ebx
c0023837:	56                   	push   esi
c0023838:	55                   	push   ebp
c0023839:	e8 4e f9 ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002383e:	0f b6 c4             	movzx  eax,ah
c0023841:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023845:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023849:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002384d:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0023852:	83 c4 24             	add    esp,0x24
c0023855:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002385b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023862:	74 7c                	je     c00238e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c0023864:	31 c0                	xor    eax,eax
c0023866:	8b 15 88 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f188
c002386c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023872:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023878:	7e 66                	jle    c00238e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x108>
c002387a:	8d 14 c2             	lea    edx,[edx+eax*8]
c002387d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023884:	39 cb                	cmp    ebx,ecx
c0023886:	75 55                	jne    c00238dd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023888:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002388f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023893:	75 48                	jne    c00238dd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x105>
c0023895:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023899:	83 ec 0c             	sub    esp,0xc
c002389c:	68 98 d7 02 c0       	push   0xc002d798
c00238a1:	e8 87 f2 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00238a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238aa:	8b 15 88 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f188
c00238b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00238b4:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00238ba:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00238c2:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00238c6:	52                   	push   edx
c00238c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00238cb:	53                   	push   ebx
c00238cc:	68 bd d7 02 c0       	push   0xc002d7bd
c00238d1:	e8 57 f2 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00238d6:	83 c4 20             	add    esp,0x20
c00238d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238dd:	40                   	inc    eax
c00238de:	eb 86                	jmp    c0023866 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x8e>
c00238e0:	31 d2                	xor    edx,edx
c00238e2:	83 ec 0c             	sub    esp,0xc
c00238e5:	57                   	push   edi
c00238e6:	53                   	push   ebx
c00238e7:	56                   	push   esi
c00238e8:	52                   	push   edx
c00238e9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00238ed:	55                   	push   ebp
c00238ee:	e8 f7 f9 ff ff       	call   c00232ea <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00238f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00238f7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00238fb:	42                   	inc    edx
c00238fc:	83 c4 20             	add    esp,0x20
c00238ff:	83 fa 06             	cmp    edx,0x6
c0023902:	75 de                	jne    c00238e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10a>
c0023904:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023909:	83 ec 0c             	sub    esp,0xc
c002390c:	86 e0                	xchg   al,ah
c002390e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023913:	6a 02                	push   0x2
c0023915:	57                   	push   edi
c0023916:	53                   	push   ebx
c0023917:	56                   	push   esi
c0023918:	55                   	push   ebp
c0023919:	e8 6e f8 ff ff       	call   c002318c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002391e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023923:	83 c4 20             	add    esp,0x20
c0023926:	57                   	push   edi
c0023927:	53                   	push   ebx
c0023928:	56                   	push   esi
c0023929:	55                   	push   ebp
c002392a:	e8 2f f9 ff ff       	call   c002325e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002392f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023933:	57                   	push   edi
c0023934:	53                   	push   ebx
c0023935:	56                   	push   esi
c0023936:	55                   	push   ebp
c0023937:	e8 98 f8 ff ff       	call   c00231d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002393c:	b9 09 00 00 00       	mov    ecx,0x9
c0023941:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023946:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c002394a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002394e:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023952:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023956:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002395a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002395e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023962:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023966:	83 ec 0c             	sub    esp,0xc
c0023969:	fc                   	cld    
c002396a:	89 e7                	mov    edi,esp
c002396c:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023970:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023972:	55                   	push   ebp
c0023973:	e8 ee fc ff ff       	call   c0023666 <PCI::foundDevice(PCIDeviceInfo)>
c0023978:	81 c4 8c 00 00 00    	add    esp,0x8c
c002397e:	5b                   	pop    ebx
c002397f:	5e                   	pop    esi
c0023980:	5f                   	pop    edi
c0023981:	5d                   	pop    ebp
c0023982:	c3                   	ret    
c0023983:	90                   	nop

c0023984 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023984:	55                   	push   ebp
c0023985:	57                   	push   edi
c0023986:	56                   	push   esi
c0023987:	53                   	push   ebx
c0023988:	83 ec 0c             	sub    esp,0xc
c002398b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002398f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023994:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023999:	6a 00                	push   0x0
c002399b:	56                   	push   esi
c002399c:	57                   	push   edi
c002399d:	55                   	push   ebp
c002399e:	e8 31 f8 ff ff       	call   c00231d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239a3:	6a 00                	push   0x0
c00239a5:	56                   	push   esi
c00239a6:	57                   	push   edi
c00239a7:	55                   	push   ebp
c00239a8:	e8 2b fe ff ff       	call   c00237d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239ad:	83 c4 20             	add    esp,0x20
c00239b0:	6a 00                	push   0x0
c00239b2:	56                   	push   esi
c00239b3:	57                   	push   edi
c00239b4:	55                   	push   ebp
c00239b5:	e8 3c f8 ff ff       	call   c00231f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00239ba:	83 c4 10             	add    esp,0x10
c00239bd:	84 c0                	test   al,al
c00239bf:	79 27                	jns    c00239e8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00239c1:	bb 01 00 00 00       	mov    ebx,0x1
c00239c6:	53                   	push   ebx
c00239c7:	56                   	push   esi
c00239c8:	57                   	push   edi
c00239c9:	55                   	push   ebp
c00239ca:	e8 05 f8 ff ff       	call   c00231d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00239cf:	83 c4 10             	add    esp,0x10
c00239d2:	66 40                	inc    ax
c00239d4:	74 0c                	je     c00239e2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00239d6:	53                   	push   ebx
c00239d7:	56                   	push   esi
c00239d8:	57                   	push   edi
c00239d9:	55                   	push   ebp
c00239da:	e8 f9 fd ff ff       	call   c00237d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00239df:	83 c4 10             	add    esp,0x10
c00239e2:	43                   	inc    ebx
c00239e3:	83 fb 08             	cmp    ebx,0x8
c00239e6:	75 de                	jne    c00239c6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00239e8:	83 c4 0c             	add    esp,0xc
c00239eb:	5b                   	pop    ebx
c00239ec:	5e                   	pop    esi
c00239ed:	5f                   	pop    edi
c00239ee:	5d                   	pop    ebp
c00239ef:	c3                   	ret    

c00239f0 <PCI::detect()>:
c00239f0:	56                   	push   esi
c00239f1:	53                   	push   ebx
c00239f2:	53                   	push   ebx
c00239f3:	31 db                	xor    ebx,ebx
c00239f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00239f9:	6a 00                	push   0x0
c00239fb:	6a 00                	push   0x0
c00239fd:	6a 00                	push   0x0
c00239ff:	56                   	push   esi
c0023a00:	e8 f1 f7 ff ff       	call   c00231f6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023a05:	83 c4 10             	add    esp,0x10
c0023a08:	a8 80                	test   al,0x80
c0023a0a:	75 21                	jne    c0023a2d <PCI::detect()+0x3d>
c0023a0c:	51                   	push   ecx
c0023a0d:	51                   	push   ecx
c0023a0e:	6a 00                	push   0x0
c0023a10:	56                   	push   esi
c0023a11:	e8 2c fc ff ff       	call   c0023642 <PCI::checkBus(unsigned char)>
c0023a16:	83 c4 10             	add    esp,0x10
c0023a19:	eb 24                	jmp    c0023a3f <PCI::detect()+0x4f>
c0023a1b:	52                   	push   edx
c0023a1c:	52                   	push   edx
c0023a1d:	53                   	push   ebx
c0023a1e:	43                   	inc    ebx
c0023a1f:	56                   	push   esi
c0023a20:	e8 1d fc ff ff       	call   c0023642 <PCI::checkBus(unsigned char)>
c0023a25:	83 c4 10             	add    esp,0x10
c0023a28:	83 fb 08             	cmp    ebx,0x8
c0023a2b:	74 12                	je     c0023a3f <PCI::detect()+0x4f>
c0023a2d:	53                   	push   ebx
c0023a2e:	6a 00                	push   0x0
c0023a30:	6a 00                	push   0x0
c0023a32:	56                   	push   esi
c0023a33:	e8 9c f7 ff ff       	call   c00231d4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023a38:	83 c4 10             	add    esp,0x10
c0023a3b:	66 40                	inc    ax
c0023a3d:	74 dc                	je     c0023a1b <PCI::detect()+0x2b>
c0023a3f:	58                   	pop    eax
c0023a40:	5b                   	pop    ebx
c0023a41:	5e                   	pop    esi
c0023a42:	c3                   	ret    
c0023a43:	90                   	nop

c0023a44 <IDE::close(int, int, void*)>:
c0023a44:	83 c8 ff             	or     eax,0xffffffff
c0023a47:	c3                   	ret    

c0023a48 <IDE::IDE()>:
c0023a48:	83 ec 0c             	sub    esp,0xc
c0023a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4f:	83 ec 08             	sub    esp,0x8
c0023a52:	68 04 d8 02 c0       	push   0xc002d804
c0023a57:	50                   	push   eax
c0023a58:	e8 b7 08 ff ff       	call   c0014314 <HardDiskController::HardDiskController(char const*)>
c0023a5d:	83 c4 10             	add    esp,0x10
c0023a60:	ba 44 da 02 c0       	mov    edx,0xc002da44
c0023a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a69:	89 10                	mov    DWORD PTR [eax],edx
c0023a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a6f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023a76:	90                   	nop
c0023a77:	83 c4 0c             	add    esp,0xc
c0023a7a:	c3                   	ret    
c0023a7b:	90                   	nop

c0023a7c <IDE::prepareInterrupt(unsigned char)>:
c0023a7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023a81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023a85:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023a8d:	c3                   	ret    

c0023a8e <selectDrive(unsigned char, unsigned char)>:
c0023a8e:	c3                   	ret    
c0023a8f:	90                   	nop

c0023a90 <IDE::getBase(unsigned char)>:
c0023a90:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023a95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a99:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023aa1:	c3                   	ret    

c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023aa2:	55                   	push   ebp
c0023aa3:	57                   	push   edi
c0023aa4:	56                   	push   esi
c0023aa5:	53                   	push   ebx
c0023aa6:	83 ec 1c             	sub    esp,0x1c
c0023aa9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023aad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ab1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023ab4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023ab8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023abc:	80 f9 03             	cmp    cl,0x3
c0023abf:	77 51                	ja     c0023b12 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ac5:	0f b6 f2             	movzx  esi,dl
c0023ac8:	0f b6 db             	movzx  ebx,bl
c0023acb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023ace:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023ad2:	83 ca 80             	or     edx,0xffffff80
c0023ad5:	0f b6 d2             	movzx  edx,dl
c0023ad8:	52                   	push   edx
c0023ad9:	6a 0c                	push   0xc
c0023adb:	56                   	push   esi
c0023adc:	57                   	push   edi
c0023add:	e8 c0 ff ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ae2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023ae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023aeb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023aef:	ee                   	out    dx,al
c0023af0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023af5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023af9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023afd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023b01:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023b09:	83 c4 2c             	add    esp,0x2c
c0023b0c:	5b                   	pop    ebx
c0023b0d:	5e                   	pop    esi
c0023b0e:	5f                   	pop    edi
c0023b0f:	5d                   	pop    ebp
c0023b10:	eb 90                	jmp    c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b12:	80 fb 07             	cmp    bl,0x7
c0023b15:	77 12                	ja     c0023b29 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023b17:	0f b6 d2             	movzx  edx,dl
c0023b1a:	0f b6 db             	movzx  ebx,bl
c0023b1d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023b25:	89 da                	mov    edx,ebx
c0023b27:	eb 2f                	jmp    c0023b58 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b29:	80 fb 0d             	cmp    bl,0xd
c0023b2c:	77 13                	ja     c0023b41 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023b2e:	0f b6 d2             	movzx  edx,dl
c0023b31:	0f b6 db             	movzx  ebx,bl
c0023b34:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023b3b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023b3f:	eb 17                	jmp    c0023b58 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023b41:	80 fb 15             	cmp    bl,0x15
c0023b44:	77 13                	ja     c0023b59 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023b46:	0f b6 d2             	movzx  edx,dl
c0023b49:	0f b6 db             	movzx  ebx,bl
c0023b4c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023b54:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023b58:	ee                   	out    dx,al
c0023b59:	83 c4 1c             	add    esp,0x1c
c0023b5c:	5b                   	pop    ebx
c0023b5d:	5e                   	pop    esi
c0023b5e:	5f                   	pop    edi
c0023b5f:	5d                   	pop    ebp
c0023b60:	c3                   	ret    
c0023b61:	90                   	nop

c0023b62 <IDE::read(unsigned char, unsigned char)>:
c0023b62:	55                   	push   ebp
c0023b63:	57                   	push   edi
c0023b64:	56                   	push   esi
c0023b65:	53                   	push   ebx
c0023b66:	83 ec 1c             	sub    esp,0x1c
c0023b69:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023b6d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023b71:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023b78:	3c 03                	cmp    al,0x3
c0023b7a:	77 43                	ja     c0023bbf <IDE::read(unsigned char, unsigned char)+0x5d>
c0023b7c:	0f b6 f2             	movzx  esi,dl
c0023b7f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023b82:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023b86:	83 c8 80             	or     eax,0xffffff80
c0023b89:	0f b6 c0             	movzx  eax,al
c0023b8c:	50                   	push   eax
c0023b8d:	6a 0c                	push   0xc
c0023b8f:	56                   	push   esi
c0023b90:	57                   	push   edi
c0023b91:	e8 0c ff ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b96:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023b9b:	0f b6 c3             	movzx  eax,bl
c0023b9e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023ba2:	ec                   	in     al,dx
c0023ba3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023ba7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023bac:	52                   	push   edx
c0023bad:	6a 0c                	push   0xc
c0023baf:	56                   	push   esi
c0023bb0:	57                   	push   edi
c0023bb1:	e8 ec fe ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bb6:	83 c4 20             	add    esp,0x20
c0023bb9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023bbd:	eb 49                	jmp    c0023c08 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bbf:	80 fb 07             	cmp    bl,0x7
c0023bc2:	77 12                	ja     c0023bd6 <IDE::read(unsigned char, unsigned char)+0x74>
c0023bc4:	0f b6 d2             	movzx  edx,dl
c0023bc7:	0f b6 c3             	movzx  eax,bl
c0023bca:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023bd2:	89 c2                	mov    edx,eax
c0023bd4:	eb 31                	jmp    c0023c07 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bd6:	80 fb 0d             	cmp    bl,0xd
c0023bd9:	77 13                	ja     c0023bee <IDE::read(unsigned char, unsigned char)+0x8c>
c0023bdb:	0f b6 d2             	movzx  edx,dl
c0023bde:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023be5:	0f b6 d3             	movzx  edx,bl
c0023be8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023bec:	eb 19                	jmp    c0023c07 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023bee:	31 c0                	xor    eax,eax
c0023bf0:	80 fb 15             	cmp    bl,0x15
c0023bf3:	77 13                	ja     c0023c08 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023bf5:	0f b6 d2             	movzx  edx,dl
c0023bf8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023c00:	0f b6 d3             	movzx  edx,bl
c0023c03:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023c07:	ec                   	in     al,dx
c0023c08:	83 c4 1c             	add    esp,0x1c
c0023c0b:	5b                   	pop    ebx
c0023c0c:	5e                   	pop    esi
c0023c0d:	5f                   	pop    edi
c0023c0e:	5d                   	pop    ebp
c0023c0f:	c3                   	ret    

c0023c10 <IDE::waitInterrupt(unsigned char)>:
c0023c10:	55                   	push   ebp
c0023c11:	57                   	push   edi
c0023c12:	56                   	push   esi
c0023c13:	53                   	push   ebx
c0023c14:	31 db                	xor    ebx,ebx
c0023c16:	83 ec 0c             	sub    esp,0xc
c0023c19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023c1d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023c22:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023c2a:	89 e8                	mov    eax,ebp
c0023c2c:	84 c0                	test   al,al
c0023c2e:	75 34                	jne    c0023c64 <IDE::waitInterrupt(unsigned char)+0x54>
c0023c30:	52                   	push   edx
c0023c31:	6a 0c                	push   0xc
c0023c33:	56                   	push   esi
c0023c34:	57                   	push   edi
c0023c35:	e8 28 ff ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0023c3a:	83 c4 10             	add    esp,0x10
c0023c3d:	a8 01                	test   al,0x1
c0023c3f:	75 2b                	jne    c0023c6c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c41:	f6 c3 04             	test   bl,0x4
c0023c44:	75 16                	jne    c0023c5c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c46:	83 fb 32             	cmp    ebx,0x32
c0023c49:	7e 11                	jle    c0023c5c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023c4b:	50                   	push   eax
c0023c4c:	50                   	push   eax
c0023c4d:	6a 00                	push   0x0
c0023c4f:	68 80 96 98 00       	push   0x989680
c0023c54:	e8 f6 aa ff ff       	call   c001e74f <nanoSleep(unsigned long long)>
c0023c59:	83 c4 10             	add    esp,0x10
c0023c5c:	83 fb 3c             	cmp    ebx,0x3c
c0023c5f:	74 0b                	je     c0023c6c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023c61:	43                   	inc    ebx
c0023c62:	eb be                	jmp    c0023c22 <IDE::waitInterrupt(unsigned char)+0x12>
c0023c64:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023c6c:	83 c4 0c             	add    esp,0xc
c0023c6f:	89 e8                	mov    eax,ebp
c0023c71:	5b                   	pop    ebx
c0023c72:	5e                   	pop    esi
c0023c73:	5f                   	pop    edi
c0023c74:	5d                   	pop    ebp
c0023c75:	c3                   	ret    

c0023c76 <ideChannel0IRQHandler(regs*, void*)>:
c0023c76:	83 ec 10             	sub    esp,0x10
c0023c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c7d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023c84:	6a 07                	push   0x7
c0023c86:	6a 00                	push   0x0
c0023c88:	50                   	push   eax
c0023c89:	e8 d4 fe ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0023c8e:	83 c4 1c             	add    esp,0x1c
c0023c91:	c3                   	ret    

c0023c92 <ideChannel1IRQHandler(regs*, void*)>:
c0023c92:	83 ec 10             	sub    esp,0x10
c0023c95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c99:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023ca0:	6a 07                	push   0x7
c0023ca2:	6a 01                	push   0x1
c0023ca4:	50                   	push   eax
c0023ca5:	e8 b8 fe ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0023caa:	83 c4 1c             	add    esp,0x1c
c0023cad:	c3                   	ret    

c0023cae <IDE::enableIRQs(unsigned char, bool)>:
c0023cae:	57                   	push   edi
c0023caf:	56                   	push   esi
c0023cb0:	be 04 00 00 00       	mov    esi,0x4
c0023cb5:	53                   	push   ebx
c0023cb6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023cbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cbf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023cc4:	0f 94 c0             	sete   al
c0023cc7:	d1 e0                	shl    eax,1
c0023cc9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023cd0:	0f b6 c0             	movzx  eax,al
c0023cd3:	50                   	push   eax
c0023cd4:	6a 0c                	push   0xc
c0023cd6:	57                   	push   edi
c0023cd7:	53                   	push   ebx
c0023cd8:	e8 c5 fd ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cdd:	83 c4 10             	add    esp,0x10
c0023ce0:	50                   	push   eax
c0023ce1:	6a 0c                	push   0xc
c0023ce3:	57                   	push   edi
c0023ce4:	53                   	push   ebx
c0023ce5:	e8 78 fe ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0023cea:	83 c4 10             	add    esp,0x10
c0023ced:	4e                   	dec    esi
c0023cee:	75 f0                	jne    c0023ce0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023cf0:	5b                   	pop    ebx
c0023cf1:	5e                   	pop    esi
c0023cf2:	5f                   	pop    edi
c0023cf3:	c3                   	ret    

c0023cf4 <IDE::open(int, int, void*)>:
c0023cf4:	55                   	push   ebp
c0023cf5:	57                   	push   edi
c0023cf6:	56                   	push   esi
c0023cf7:	53                   	push   ebx
c0023cf8:	83 ec 1c             	sub    esp,0x1c
c0023cfb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023cff:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023d08:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023d11:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023d18:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023d1f:	0f 85 b0 02 00 00    	jne    c0023fd5 <IDE::open(int, int, void*)+0x2e1>
c0023d25:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023d2b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023d2f:	83 e0 7f             	and    eax,0x7f
c0023d32:	3c 05                	cmp    al,0x5
c0023d34:	74 04                	je     c0023d3a <IDE::open(int, int, void*)+0x46>
c0023d36:	3c 0f                	cmp    al,0xf
c0023d38:	75 32                	jne    c0023d6c <IDE::open(int, int, void*)+0x78>
c0023d3a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023d40:	83 e0 fc             	and    eax,0xfffffffc
c0023d43:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023d4a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023d50:	83 e0 fc             	and    eax,0xfffffffc
c0023d53:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023d5a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023d60:	83 e0 fc             	and    eax,0xfffffffc
c0023d63:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d6a:	eb 14                	jmp    c0023d80 <IDE::open(int, int, void*)+0x8c>
c0023d6c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d76:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d80:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023d87:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023d8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d92:	89 c6                	mov    esi,eax
c0023d94:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d99:	c1 e6 10             	shl    esi,0x10
c0023d9c:	89 e8                	mov    eax,ebp
c0023d9e:	89 fa                	mov    edx,edi
c0023da0:	c1 e0 0b             	shl    eax,0xb
c0023da3:	09 f0                	or     eax,esi
c0023da5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023dac:	c1 e6 08             	shl    esi,0x8
c0023daf:	09 c6                	or     esi,eax
c0023db1:	89 f0                	mov    eax,esi
c0023db3:	0d 08 00 00 80       	or     eax,0x80000008
c0023db8:	ef                   	out    dx,eax
c0023db9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023dbe:	89 ca                	mov    edx,ecx
c0023dc0:	ed                   	in     eax,dx
c0023dc1:	c1 e8 10             	shr    eax,0x10
c0023dc4:	3d ff ff 00 00       	cmp    eax,0xffff
c0023dc9:	0f 84 f5 00 00 00    	je     c0023ec4 <IDE::open(int, int, void*)+0x1d0>
c0023dcf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023dd5:	89 fa                	mov    edx,edi
c0023dd7:	89 f0                	mov    eax,esi
c0023dd9:	ef                   	out    dx,eax
c0023dda:	b0 fe                	mov    al,0xfe
c0023ddc:	89 ca                	mov    edx,ecx
c0023dde:	ee                   	out    dx,al
c0023ddf:	89 f0                	mov    eax,esi
c0023de1:	89 fa                	mov    edx,edi
c0023de3:	ef                   	out    dx,eax
c0023de4:	89 ca                	mov    edx,ecx
c0023de6:	ed                   	in     eax,dx
c0023de7:	3c fe                	cmp    al,0xfe
c0023de9:	0f 85 a9 00 00 00    	jne    c0023e98 <IDE::open(int, int, void*)+0x1a4>
c0023def:	8b 15 88 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f188
c0023df5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023dfc:	74 33                	je     c0023e31 <IDE::open(int, int, void*)+0x13d>
c0023dfe:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023e04:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023e08:	40                   	inc    eax
c0023e09:	83 ec 0c             	sub    esp,0xc
c0023e0c:	0f b6 c0             	movzx  eax,al
c0023e0f:	50                   	push   eax
c0023e10:	55                   	push   ebp
c0023e11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e15:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023e1b:	51                   	push   ecx
c0023e1c:	e8 0b 42 ff ff       	call   c001802c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023e21:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023e26:	83 c4 1c             	add    esp,0x1c
c0023e29:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e2f:	eb 0a                	jmp    c0023e3b <IDE::open(int, int, void*)+0x147>
c0023e31:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023e3b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023e42:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023e49:	c1 e1 10             	shl    ecx,0x10
c0023e4c:	c1 e0 08             	shl    eax,0x8
c0023e4f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023e54:	09 c1                	or     ecx,eax
c0023e56:	89 fa                	mov    edx,edi
c0023e58:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023e5f:	c1 e0 0b             	shl    eax,0xb
c0023e62:	09 c1                	or     ecx,eax
c0023e64:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023e6a:	89 c8                	mov    eax,ecx
c0023e6c:	ef                   	out    dx,eax
c0023e6d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023e72:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023e78:	89 f2                	mov    edx,esi
c0023e7a:	ee                   	out    dx,al
c0023e7b:	89 c8                	mov    eax,ecx
c0023e7d:	89 fa                	mov    edx,edi
c0023e7f:	ef                   	out    dx,eax
c0023e80:	89 f2                	mov    edx,esi
c0023e82:	ed                   	in     eax,dx
c0023e83:	0f b6 c0             	movzx  eax,al
c0023e86:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023e8c:	74 46                	je     c0023ed4 <IDE::open(int, int, void*)+0x1e0>
c0023e8e:	83 ec 0c             	sub    esp,0xc
c0023e91:	68 1c d8 02 c0       	push   0xc002d81c
c0023e96:	eb 34                	jmp    c0023ecc <IDE::open(int, int, void*)+0x1d8>
c0023e98:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023ea1:	75 17                	jne    c0023eba <IDE::open(int, int, void*)+0x1c6>
c0023ea3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023ea8:	74 07                	je     c0023eb1 <IDE::open(int, int, void*)+0x1bd>
c0023eaa:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023eaf:	75 09                	jne    c0023eba <IDE::open(int, int, void*)+0x1c6>
c0023eb1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023eb8:	eb 1a                	jmp    c0023ed4 <IDE::open(int, int, void*)+0x1e0>
c0023eba:	83 ec 0c             	sub    esp,0xc
c0023ebd:	68 24 d8 02 c0       	push   0xc002d824
c0023ec2:	eb 08                	jmp    c0023ecc <IDE::open(int, int, void*)+0x1d8>
c0023ec4:	83 ec 0c             	sub    esp,0xc
c0023ec7:	68 55 d8 02 c0       	push   0xc002d855
c0023ecc:	e8 c8 67 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0023ed1:	83 c4 10             	add    esp,0x10
c0023ed4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023edb:	79 1a                	jns    c0023ef7 <IDE::open(int, int, void*)+0x203>
c0023edd:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023ee3:	83 e0 fc             	and    eax,0xfffffffc
c0023ee6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023eed:	83 c0 08             	add    eax,0x8
c0023ef0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ef7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023efd:	89 c2                	mov    edx,eax
c0023eff:	83 e2 0f             	and    edx,0xf
c0023f02:	66 83 fa 08          	cmp    dx,0x8
c0023f06:	75 0a                	jne    c0023f12 <IDE::open(int, int, void*)+0x21e>
c0023f08:	83 e8 02             	sub    eax,0x2
c0023f0b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023f12:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023f18:	89 c2                	mov    edx,eax
c0023f1a:	83 e2 0f             	and    edx,0xf
c0023f1d:	66 83 fa 08          	cmp    dx,0x8
c0023f21:	75 0a                	jne    c0023f2d <IDE::open(int, int, void*)+0x239>
c0023f23:	83 e8 02             	sub    eax,0x2
c0023f26:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023f2d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023f34:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023f3b:	89 d0                	mov    eax,edx
c0023f3d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f40:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f44:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023f48:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023f4b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f50:	0f b6 c9             	movzx  ecx,cl
c0023f53:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023f5a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f5d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f61:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023f65:	8d 50 02             	lea    edx,[eax+0x2]
c0023f68:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023f6d:	0f b6 d2             	movzx  edx,dl
c0023f70:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023f76:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023f79:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023f7d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023f81:	8d 48 03             	lea    ecx,[eax+0x3]
c0023f84:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023f89:	0f b6 c9             	movzx  ecx,cl
c0023f8c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023f92:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023f95:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023f99:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023f9d:	8d 50 04             	lea    edx,[eax+0x4]
c0023fa0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023fa6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023fab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023fb2:	66 85 f6             	test   si,si
c0023fb5:	74 3e                	je     c0023ff5 <IDE::open(int, int, void*)+0x301>
c0023fb7:	0f b6 d2             	movzx  edx,dl
c0023fba:	83 c0 05             	add    eax,0x5
c0023fbd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023fc0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023fc4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023fc8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023fce:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023fd3:	eb 20                	jmp    c0023ff5 <IDE::open(int, int, void*)+0x301>
c0023fd5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023fdf:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023fe9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ff0:	e9 02 ff ff ff       	jmp    c0023ef7 <IDE::open(int, int, void*)+0x203>
c0023ff5:	52                   	push   edx
c0023ff6:	52                   	push   edx
c0023ff7:	6a 00                	push   0x0
c0023ff9:	53                   	push   ebx
c0023ffa:	e8 7d fa ff ff       	call   c0023a7c <IDE::prepareInterrupt(unsigned char)>
c0023fff:	59                   	pop    ecx
c0024000:	5e                   	pop    esi
c0024001:	6a 01                	push   0x1
c0024003:	53                   	push   ebx
c0024004:	e8 73 fa ff ff       	call   c0023a7c <IDE::prepareInterrupt(unsigned char)>
c0024009:	83 c4 0c             	add    esp,0xc
c002400c:	6a 00                	push   0x0
c002400e:	6a 00                	push   0x0
c0024010:	53                   	push   ebx
c0024011:	e8 98 fc ff ff       	call   c0023cae <IDE::enableIRQs(unsigned char, bool)>
c0024016:	83 c4 0c             	add    esp,0xc
c0024019:	6a 00                	push   0x0
c002401b:	6a 01                	push   0x1
c002401d:	53                   	push   ebx
c002401e:	e8 8b fc ff ff       	call   c0023cae <IDE::enableIRQs(unsigned char, bool)>
c0024023:	83 c4 10             	add    esp,0x10
c0024026:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002402d:	74 40                	je     c002406f <IDE::open(int, int, void*)+0x37b>
c002402f:	83 ec 0c             	sub    esp,0xc
c0024032:	68 7f d8 02 c0       	push   0xc002d87f
c0024037:	e8 f1 ea fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002403c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002403f:	6a 01                	push   0x1
c0024041:	68 76 3c 02 c0       	push   0xc0023c76
c0024046:	6a 0e                	push   0xe
c0024048:	53                   	push   ebx
c0024049:	e8 90 fe fe ff       	call   c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002404e:	83 c4 14             	add    esp,0x14
c0024051:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0024057:	53                   	push   ebx
c0024058:	6a 01                	push   0x1
c002405a:	68 92 3c 02 c0       	push   0xc0023c92
c002405f:	6a 0f                	push   0xf
c0024061:	53                   	push   ebx
c0024062:	e8 77 fe fe ff       	call   c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024067:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002406d:	eb 4a                	jmp    c00240b9 <IDE::open(int, int, void*)+0x3c5>
c002406f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0024079:	50                   	push   eax
c002407a:	6a 0f                	push   0xf
c002407c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024082:	68 9b d8 02 c0       	push   0xc002d89b
c0024087:	e8 a1 ea fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002408c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002408f:	6a 00                	push   0x0
c0024091:	68 76 3c 02 c0       	push   0xc0023c76
c0024096:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002409c:	53                   	push   ebx
c002409d:	e8 3c fe fe ff       	call   c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240a2:	83 c4 14             	add    esp,0x14
c00240a5:	53                   	push   ebx
c00240a6:	6a 00                	push   0x0
c00240a8:	68 92 3c 02 c0       	push   0xc0023c92
c00240ad:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00240b3:	53                   	push   ebx
c00240b4:	e8 25 fe fe ff       	call   c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240bb:	83 c4 20             	add    esp,0x20
c00240be:	83 ec 0c             	sub    esp,0xc
c00240c1:	53                   	push   ebx
c00240c2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00240c5:	83 c4 0c             	add    esp,0xc
c00240c8:	6a 07                	push   0x7
c00240ca:	6a 00                	push   0x0
c00240cc:	53                   	push   ebx
c00240cd:	e8 90 fa ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00240d2:	83 c4 0c             	add    esp,0xc
c00240d5:	6a 07                	push   0x7
c00240d7:	6a 01                	push   0x1
c00240d9:	53                   	push   ebx
c00240da:	e8 83 fa ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00240df:	83 c4 0c             	add    esp,0xc
c00240e2:	6a 01                	push   0x1
c00240e4:	6a 00                	push   0x0
c00240e6:	53                   	push   ebx
c00240e7:	e8 c2 fb ff ff       	call   c0023cae <IDE::enableIRQs(unsigned char, bool)>
c00240ec:	83 c4 0c             	add    esp,0xc
c00240ef:	6a 01                	push   0x1
c00240f1:	6a 01                	push   0x1
c00240f3:	53                   	push   ebx
c00240f4:	e8 b5 fb ff ff       	call   c0023cae <IDE::enableIRQs(unsigned char, bool)>
c00240f9:	83 c4 2c             	add    esp,0x2c
c00240fc:	31 c0                	xor    eax,eax
c00240fe:	5b                   	pop    ebx
c00240ff:	5e                   	pop    esi
c0024100:	5f                   	pop    edi
c0024101:	5d                   	pop    ebp
c0024102:	c3                   	ret    
c0024103:	90                   	nop

c0024104 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0024104:	55                   	push   ebp
c0024105:	57                   	push   edi
c0024106:	56                   	push   esi
c0024107:	53                   	push   ebx
c0024108:	83 ec 1c             	sub    esp,0x1c
c002410b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002410f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024113:	8d 50 f8             	lea    edx,[eax-0x8]
c0024116:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002411a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002411e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024122:	80 fa 03             	cmp    dl,0x3
c0024125:	77 5d                	ja     c0024184 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0024127:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002412b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002412f:	0f b6 db             	movzx  ebx,bl
c0024132:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0024135:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0024139:	83 ca 80             	or     edx,0xffffff80
c002413c:	0f b6 d2             	movzx  edx,dl
c002413f:	52                   	push   edx
c0024140:	6a 0c                	push   0xc
c0024142:	53                   	push   ebx
c0024143:	56                   	push   esi
c0024144:	e8 59 f9 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024149:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002414e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024152:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024156:	0f b6 c0             	movzx  eax,al
c0024159:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002415d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002415f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024164:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0024168:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002416c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024170:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0024178:	83 c4 2c             	add    esp,0x2c
c002417b:	5b                   	pop    ebx
c002417c:	5e                   	pop    esi
c002417d:	5f                   	pop    edi
c002417e:	5d                   	pop    ebp
c002417f:	e9 1e f9 ff ff       	jmp    c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024184:	3c 07                	cmp    al,0x7
c0024186:	77 10                	ja     c0024198 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0024188:	0f b6 db             	movzx  ebx,bl
c002418b:	0f b6 d0             	movzx  edx,al
c002418e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0024196:	eb 2d                	jmp    c00241c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024198:	3c 0d                	cmp    al,0xd
c002419a:	77 13                	ja     c00241af <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002419c:	0f b6 db             	movzx  ebx,bl
c002419f:	0f b6 c0             	movzx  eax,al
c00241a2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00241a9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00241ad:	eb 16                	jmp    c00241c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00241af:	3c 15                	cmp    al,0x15
c00241b1:	77 14                	ja     c00241c7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00241b3:	0f b6 db             	movzx  ebx,bl
c00241b6:	0f b6 c0             	movzx  eax,al
c00241b9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00241c1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00241c5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00241c7:	83 c4 1c             	add    esp,0x1c
c00241ca:	5b                   	pop    ebx
c00241cb:	5e                   	pop    esi
c00241cc:	5f                   	pop    edi
c00241cd:	5d                   	pop    ebp
c00241ce:	c3                   	ret    
c00241cf:	90                   	nop

c00241d0 <IDE::detect()>:
c00241d0:	55                   	push   ebp
c00241d1:	57                   	push   edi
c00241d2:	56                   	push   esi
c00241d3:	53                   	push   ebx
c00241d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00241da:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00241e1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00241e8:	0f 85 be 02 00 00    	jne    c00244ac <IDE::detect()+0x2dc>
c00241ee:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00241f5:	31 f6                	xor    esi,esi
c00241f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00241ff:	31 ed                	xor    ebp,ebp
c0024201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024205:	c1 e0 06             	shl    eax,0x6
c0024208:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024210:	89 e8                	mov    eax,ebp
c0024212:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024216:	c1 e0 04             	shl    eax,0x4
c0024219:	83 c8 a0             	or     eax,0xffffffa0
c002421c:	0f b6 c0             	movzx  eax,al
c002421f:	50                   	push   eax
c0024220:	6a 06                	push   0x6
c0024222:	56                   	push   esi
c0024223:	53                   	push   ebx
c0024224:	e8 79 f8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024229:	83 c4 0c             	add    esp,0xc
c002422c:	6a 0c                	push   0xc
c002422e:	56                   	push   esi
c002422f:	53                   	push   ebx
c0024230:	e8 2d f9 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024235:	83 c4 0c             	add    esp,0xc
c0024238:	6a 0c                	push   0xc
c002423a:	56                   	push   esi
c002423b:	53                   	push   ebx
c002423c:	e8 21 f9 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024241:	83 c4 0c             	add    esp,0xc
c0024244:	6a 0c                	push   0xc
c0024246:	56                   	push   esi
c0024247:	53                   	push   ebx
c0024248:	e8 15 f9 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c002424d:	83 c4 0c             	add    esp,0xc
c0024250:	6a 0c                	push   0xc
c0024252:	56                   	push   esi
c0024253:	53                   	push   ebx
c0024254:	e8 09 f9 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024259:	68 ec 00 00 00       	push   0xec
c002425e:	6a 07                	push   0x7
c0024260:	56                   	push   esi
c0024261:	53                   	push   ebx
c0024262:	e8 3b f8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024267:	83 c4 1c             	add    esp,0x1c
c002426a:	6a 0c                	push   0xc
c002426c:	56                   	push   esi
c002426d:	53                   	push   ebx
c002426e:	e8 ef f8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024273:	83 c4 0c             	add    esp,0xc
c0024276:	6a 0c                	push   0xc
c0024278:	56                   	push   esi
c0024279:	53                   	push   ebx
c002427a:	e8 e3 f8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c002427f:	83 c4 0c             	add    esp,0xc
c0024282:	6a 0c                	push   0xc
c0024284:	56                   	push   esi
c0024285:	53                   	push   ebx
c0024286:	e8 d7 f8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c002428b:	83 c4 0c             	add    esp,0xc
c002428e:	6a 0c                	push   0xc
c0024290:	56                   	push   esi
c0024291:	53                   	push   ebx
c0024292:	e8 cb f8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024297:	83 c4 0c             	add    esp,0xc
c002429a:	6a 0c                	push   0xc
c002429c:	56                   	push   esi
c002429d:	53                   	push   ebx
c002429e:	e8 bf f8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00242a3:	83 c4 10             	add    esp,0x10
c00242a6:	84 c0                	test   al,al
c00242a8:	0f 84 8b 01 00 00    	je     c0024439 <IDE::detect()+0x269>
c00242ae:	31 ff                	xor    edi,edi
c00242b0:	50                   	push   eax
c00242b1:	6a 0c                	push   0xc
c00242b3:	56                   	push   esi
c00242b4:	53                   	push   ebx
c00242b5:	e8 a8 f8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00242ba:	83 c4 10             	add    esp,0x10
c00242bd:	a8 01                	test   al,0x1
c00242bf:	0f 85 8e 01 00 00    	jne    c0024453 <IDE::detect()+0x283>
c00242c5:	84 c0                	test   al,al
c00242c7:	78 04                	js     c00242cd <IDE::detect()+0xfd>
c00242c9:	a8 08                	test   al,0x8
c00242cb:	75 27                	jne    c00242f4 <IDE::detect()+0x124>
c00242cd:	47                   	inc    edi
c00242ce:	81 ff 17 01 00 00    	cmp    edi,0x117
c00242d4:	7e da                	jle    c00242b0 <IDE::detect()+0xe0>
c00242d6:	50                   	push   eax
c00242d7:	50                   	push   eax
c00242d8:	6a 00                	push   0x0
c00242da:	68 40 4b 4c 00       	push   0x4c4b40
c00242df:	e8 6b a4 ff ff       	call   c001e74f <nanoSleep(unsigned long long)>
c00242e4:	83 c4 10             	add    esp,0x10
c00242e7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00242ed:	75 c1                	jne    c00242b0 <IDE::detect()+0xe0>
c00242ef:	e9 5f 01 00 00       	jmp    c0024453 <IDE::detect()+0x283>
c00242f4:	31 c9                	xor    ecx,ecx
c00242f6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00242fa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00242fe:	83 ec 0c             	sub    esp,0xc
c0024301:	68 80 00 00 00       	push   0x80
c0024306:	57                   	push   edi
c0024307:	6a 00                	push   0x0
c0024309:	56                   	push   esi
c002430a:	53                   	push   ebx
c002430b:	e8 f4 fd ff ff       	call   c0024104 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024310:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024315:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024319:	89 d1                	mov    ecx,edx
c002431b:	c1 e0 06             	shl    eax,0x6
c002431e:	01 d8                	add    eax,ebx
c0024320:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024327:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002432e:	89 f2                	mov    edx,esi
c0024330:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024336:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002433a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024340:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024344:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002434b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024353:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002435a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024362:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024368:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002436f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024375:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024379:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002437d:	83 c4 20             	add    esp,0x20
c0024380:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024383:	83 c0 02             	add    eax,0x2
c0024386:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002438c:	83 c7 02             	add    edi,0x2
c002438f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024392:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024398:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002439c:	75 e2                	jne    c0024380 <IDE::detect()+0x1b0>
c002439e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00243a2:	c1 e0 06             	shl    eax,0x6
c00243a5:	01 d8                	add    eax,ebx
c00243a7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00243ad:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00243b4:	66 c1 ea 09          	shr    dx,0x9
c00243b8:	83 e2 01             	and    edx,0x1
c00243bb:	84 c9                	test   cl,cl
c00243bd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00243c3:	75 2f                	jne    c00243f4 <IDE::detect()+0x224>
c00243c5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00243cb:	85 c0                	test   eax,eax
c00243cd:	74 66                	je     c0024435 <IDE::detect()+0x265>
c00243cf:	50                   	push   eax
c00243d0:	55                   	push   ebp
c00243d1:	56                   	push   esi
c00243d2:	68 b7 d8 02 c0       	push   0xc002d8b7
c00243d7:	e8 51 e7 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00243dc:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00243e3:	e8 a4 b4 fe ff       	call   c000f88c <malloc>
c00243e8:	89 c7                	mov    edi,eax
c00243ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00243ed:	e8 78 06 00 00       	call   c0024a6a <ATA::ATA()>
c00243f2:	eb 28                	jmp    c002441c <IDE::detect()+0x24c>
c00243f4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00243fa:	55                   	push   ebp
c00243fb:	56                   	push   esi
c00243fc:	68 e6 d8 02 c0       	push   0xc002d8e6
c0024401:	e8 27 e7 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024406:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002440d:	e8 7a b4 fe ff       	call   c000f88c <malloc>
c0024412:	89 c7                	mov    edi,eax
c0024414:	89 04 24             	mov    DWORD PTR [esp],eax
c0024417:	e8 8e 0c 00 00       	call   c00250aa <ATAPI::ATAPI()>
c002441c:	5a                   	pop    edx
c002441d:	59                   	pop    ecx
c002441e:	57                   	push   edi
c002441f:	53                   	push   ebx
c0024420:	e8 41 fb fe ff       	call   c0013f66 <Device::addChild(Device*)>
c0024425:	8b 07                	mov    eax,DWORD PTR [edi]
c0024427:	53                   	push   ebx
c0024428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002442c:	6a 00                	push   0x0
c002442e:	57                   	push   edi
c002442f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024432:	83 c4 20             	add    esp,0x20
c0024435:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024439:	4d                   	dec    ebp
c002443a:	74 0a                	je     c0024446 <IDE::detect()+0x276>
c002443c:	bd 01 00 00 00       	mov    ebp,0x1
c0024441:	e9 bb fd ff ff       	jmp    c0024201 <IDE::detect()+0x31>
c0024446:	4e                   	dec    esi
c0024447:	74 63                	je     c00244ac <IDE::detect()+0x2dc>
c0024449:	be 01 00 00 00       	mov    esi,0x1
c002444e:	e9 ac fd ff ff       	jmp    c00241ff <IDE::detect()+0x2f>
c0024453:	50                   	push   eax
c0024454:	6a 04                	push   0x4
c0024456:	56                   	push   esi
c0024457:	53                   	push   ebx
c0024458:	e8 05 f7 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c002445d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024461:	83 c4 0c             	add    esp,0xc
c0024464:	6a 05                	push   0x5
c0024466:	56                   	push   esi
c0024467:	53                   	push   ebx
c0024468:	e8 f5 f6 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c002446d:	83 c4 10             	add    esp,0x10
c0024470:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024474:	80 fa 14             	cmp    dl,0x14
c0024477:	75 04                	jne    c002447d <IDE::detect()+0x2ad>
c0024479:	3c eb                	cmp    al,0xeb
c002447b:	eb 07                	jmp    c0024484 <IDE::detect()+0x2b4>
c002447d:	3c 96                	cmp    al,0x96
c002447f:	75 b8                	jne    c0024439 <IDE::detect()+0x269>
c0024481:	80 fa 69             	cmp    dl,0x69
c0024484:	75 b3                	jne    c0024439 <IDE::detect()+0x269>
c0024486:	68 a1 00 00 00       	push   0xa1
c002448b:	6a 07                	push   0x7
c002448d:	56                   	push   esi
c002448e:	53                   	push   ebx
c002448f:	e8 0e f6 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024494:	5f                   	pop    edi
c0024495:	58                   	pop    eax
c0024496:	6a 00                	push   0x0
c0024498:	68 40 42 0f 00       	push   0xf4240
c002449d:	e8 ad a2 ff ff       	call   c001e74f <nanoSleep(unsigned long long)>
c00244a2:	83 c4 10             	add    esp,0x10
c00244a5:	b1 01                	mov    cl,0x1
c00244a7:	e9 4a fe ff ff       	jmp    c00242f6 <IDE::detect()+0x126>
c00244ac:	81 c4 1c 02 00 00    	add    esp,0x21c
c00244b2:	5b                   	pop    ebx
c00244b3:	5e                   	pop    esi
c00244b4:	5f                   	pop    edi
c00244b5:	5d                   	pop    ebp
c00244b6:	c3                   	ret    
c00244b7:	90                   	nop

c00244b8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00244b8:	55                   	push   ebp
c00244b9:	57                   	push   edi
c00244ba:	56                   	push   esi
c00244bb:	53                   	push   ebx
c00244bc:	83 ec 1c             	sub    esp,0x1c
c00244bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00244c3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00244c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00244cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00244cf:	88 c3                	mov    bl,al
c00244d1:	84 c0                	test   al,al
c00244d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244d7:	0f 84 67 01 00 00    	je     c0024644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00244dd:	83 ec 0c             	sub    esp,0xc
c00244e0:	68 17 d9 02 c0       	push   0xc002d917
c00244e5:	e8 43 e6 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00244ea:	83 c4 10             	add    esp,0x10
c00244ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244f1:	3c 01                	cmp    al,0x1
c00244f3:	75 17                	jne    c002450c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00244f5:	83 ec 0c             	sub    esp,0xc
c00244f8:	b3 13                	mov    bl,0x13
c00244fa:	68 23 d9 02 c0       	push   0xc002d923
c00244ff:	e8 29 e6 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024504:	83 c4 10             	add    esp,0x10
c0024507:	e9 25 01 00 00       	jmp    c0024631 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002450c:	3c 02                	cmp    al,0x2
c002450e:	0f 85 ef 00 00 00    	jne    c0024603 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024514:	d1 e6                	shl    esi,1
c0024516:	09 ee                	or     esi,ebp
c0024518:	52                   	push   edx
c0024519:	89 f0                	mov    eax,esi
c002451b:	6a 01                	push   0x1
c002451d:	0f b6 f0             	movzx  esi,al
c0024520:	c1 e6 06             	shl    esi,0x6
c0024523:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002452b:	50                   	push   eax
c002452c:	57                   	push   edi
c002452d:	e8 30 f6 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024532:	83 c4 10             	add    esp,0x10
c0024535:	89 c6                	mov    esi,eax
c0024537:	a8 01                	test   al,0x1
c0024539:	74 12                	je     c002454d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002453b:	83 ec 0c             	sub    esp,0xc
c002453e:	b3 07                	mov    bl,0x7
c0024540:	68 38 d9 02 c0       	push   0xc002d938
c0024545:	e8 e3 e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002454a:	83 c4 10             	add    esp,0x10
c002454d:	f7 c6 02 00 00 00    	test   esi,0x2
c0024553:	74 12                	je     c0024567 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024555:	83 ec 0c             	sub    esp,0xc
c0024558:	b3 03                	mov    bl,0x3
c002455a:	68 56 d9 02 c0       	push   0xc002d956
c002455f:	e8 c9 e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024564:	83 c4 10             	add    esp,0x10
c0024567:	f7 c6 04 00 00 00    	test   esi,0x4
c002456d:	74 12                	je     c0024581 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002456f:	83 ec 0c             	sub    esp,0xc
c0024572:	b3 14                	mov    bl,0x14
c0024574:	68 76 d9 02 c0       	push   0xc002d976
c0024579:	e8 af e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002457e:	83 c4 10             	add    esp,0x10
c0024581:	f7 c6 08 00 00 00    	test   esi,0x8
c0024587:	74 12                	je     c002459b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0024589:	83 ec 0c             	sub    esp,0xc
c002458c:	b3 03                	mov    bl,0x3
c002458e:	68 56 d9 02 c0       	push   0xc002d956
c0024593:	e8 95 e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024598:	83 c4 10             	add    esp,0x10
c002459b:	f7 c6 10 00 00 00    	test   esi,0x10
c00245a1:	74 12                	je     c00245b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00245a3:	83 ec 0c             	sub    esp,0xc
c00245a6:	b3 15                	mov    bl,0x15
c00245a8:	68 8e d9 02 c0       	push   0xc002d98e
c00245ad:	e8 7b e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00245b2:	83 c4 10             	add    esp,0x10
c00245b5:	f7 c6 20 00 00 00    	test   esi,0x20
c00245bb:	74 12                	je     c00245cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00245bd:	83 ec 0c             	sub    esp,0xc
c00245c0:	b3 03                	mov    bl,0x3
c00245c2:	68 56 d9 02 c0       	push   0xc002d956
c00245c7:	e8 61 e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00245cc:	83 c4 10             	add    esp,0x10
c00245cf:	f7 c6 40 00 00 00    	test   esi,0x40
c00245d5:	74 12                	je     c00245e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00245d7:	83 ec 0c             	sub    esp,0xc
c00245da:	b3 16                	mov    bl,0x16
c00245dc:	68 a8 d9 02 c0       	push   0xc002d9a8
c00245e1:	e8 47 e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00245e6:	83 c4 10             	add    esp,0x10
c00245e9:	89 f0                	mov    eax,esi
c00245eb:	84 c0                	test   al,al
c00245ed:	79 42                	jns    c0024631 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00245ef:	83 ec 0c             	sub    esp,0xc
c00245f2:	b3 0d                	mov    bl,0xd
c00245f4:	68 c9 d9 02 c0       	push   0xc002d9c9
c00245f9:	e8 2f e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00245fe:	83 c4 10             	add    esp,0x10
c0024601:	eb 2e                	jmp    c0024631 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024603:	3c 03                	cmp    al,0x3
c0024605:	75 14                	jne    c002461b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024607:	83 ec 0c             	sub    esp,0xc
c002460a:	b3 17                	mov    bl,0x17
c002460c:	68 dd d9 02 c0       	push   0xc002d9dd
c0024611:	e8 17 e5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024616:	83 c4 10             	add    esp,0x10
c0024619:	eb 16                	jmp    c0024631 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002461b:	3c 04                	cmp    al,0x4
c002461d:	75 12                	jne    c0024631 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002461f:	83 ec 0c             	sub    esp,0xc
c0024622:	b3 08                	mov    bl,0x8
c0024624:	68 f3 d9 02 c0       	push   0xc002d9f3
c0024629:	e8 ff e4 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002462e:	83 c4 10             	add    esp,0x10
c0024631:	50                   	push   eax
c0024632:	50                   	push   eax
c0024633:	0f b6 c3             	movzx  eax,bl
c0024636:	50                   	push   eax
c0024637:	68 0b da 02 c0       	push   0xc002da0b
c002463c:	e8 ec e4 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024641:	83 c4 10             	add    esp,0x10
c0024644:	83 c4 1c             	add    esp,0x1c
c0024647:	88 d8                	mov    al,bl
c0024649:	5b                   	pop    ebx
c002464a:	5e                   	pop    esi
c002464b:	5f                   	pop    edi
c002464c:	5d                   	pop    ebp
c002464d:	c3                   	ret    

c002464e <IDE::polling(unsigned char, unsigned int)>:
c002464e:	57                   	push   edi
c002464f:	56                   	push   esi
c0024650:	53                   	push   ebx
c0024651:	bb 04 00 00 00       	mov    ebx,0x4
c0024656:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002465a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002465f:	52                   	push   edx
c0024660:	6a 0c                	push   0xc
c0024662:	56                   	push   esi
c0024663:	57                   	push   edi
c0024664:	e8 f9 f4 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024669:	83 c4 10             	add    esp,0x10
c002466c:	4b                   	dec    ebx
c002466d:	75 f0                	jne    c002465f <IDE::polling(unsigned char, unsigned int)+0x11>
c002466f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024674:	50                   	push   eax
c0024675:	6a 0c                	push   0xc
c0024677:	56                   	push   esi
c0024678:	57                   	push   edi
c0024679:	e8 e4 f4 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c002467e:	83 c4 10             	add    esp,0x10
c0024681:	a8 01                	test   al,0x1
c0024683:	74 12                	je     c0024697 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024685:	83 ec 0c             	sub    esp,0xc
c0024688:	68 25 da 02 c0       	push   0xc002da25
c002468d:	e8 9b e4 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024692:	83 c4 10             	add    esp,0x10
c0024695:	eb 17                	jmp    c00246ae <IDE::polling(unsigned char, unsigned int)+0x60>
c0024697:	a8 20                	test   al,0x20
c0024699:	75 0f                	jne    c00246aa <IDE::polling(unsigned char, unsigned int)+0x5c>
c002469b:	4b                   	dec    ebx
c002469c:	74 10                	je     c00246ae <IDE::polling(unsigned char, unsigned int)+0x60>
c002469e:	84 c0                	test   al,al
c00246a0:	78 d2                	js     c0024674 <IDE::polling(unsigned char, unsigned int)+0x26>
c00246a2:	a8 08                	test   al,0x8
c00246a4:	74 ce                	je     c0024674 <IDE::polling(unsigned char, unsigned int)+0x26>
c00246a6:	31 c0                	xor    eax,eax
c00246a8:	eb 06                	jmp    c00246b0 <IDE::polling(unsigned char, unsigned int)+0x62>
c00246aa:	b0 01                	mov    al,0x1
c00246ac:	eb 02                	jmp    c00246b0 <IDE::polling(unsigned char, unsigned int)+0x62>
c00246ae:	b0 02                	mov    al,0x2
c00246b0:	5b                   	pop    ebx
c00246b1:	5e                   	pop    esi
c00246b2:	5f                   	pop    edi
c00246b3:	c3                   	ret    

c00246b4 <SATABus::close(int, int, void*)>:
c00246b4:	31 c0                	xor    eax,eax
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <SATABus::detect()>:
c00246b8:	c3                   	ret    
c00246b9:	90                   	nop

c00246ba <SATABus::SATABus()>:
c00246ba:	83 ec 0c             	sub    esp,0xc
c00246bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246c1:	83 ec 08             	sub    esp,0x8
c00246c4:	68 68 da 02 c0       	push   0xc002da68
c00246c9:	50                   	push   eax
c00246ca:	e8 45 fc fe ff       	call   c0014314 <HardDiskController::HardDiskController(char const*)>
c00246cf:	83 c4 10             	add    esp,0x10
c00246d2:	ba 24 db 02 c0       	mov    edx,0xc002db24
c00246d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246db:	89 10                	mov    DWORD PTR [eax],edx
c00246dd:	83 ec 0c             	sub    esp,0xc
c00246e0:	6a 50                	push   0x50
c00246e2:	e8 ec b5 fe ff       	call   c000fcd3 <Phys::allocateContiguousPages(int)>
c00246e7:	83 c4 10             	add    esp,0x10
c00246ea:	89 c2                	mov    edx,eax
c00246ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246f0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00246f6:	83 ec 0c             	sub    esp,0xc
c00246f9:	6a 50                	push   0x50
c00246fb:	e8 27 d0 fe ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0024700:	83 c4 10             	add    esp,0x10
c0024703:	89 c2                	mov    edx,eax
c0024705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024709:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002470f:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c0024714:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024718:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002471e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024722:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024728:	83 ec 0c             	sub    esp,0xc
c002472b:	6a 03                	push   0x3
c002472d:	6a 50                	push   0x50
c002472f:	51                   	push   ecx
c0024730:	52                   	push   edx
c0024731:	50                   	push   eax
c0024732:	e8 1d db fe ff       	call   c0012254 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024737:	83 c4 20             	add    esp,0x20
c002473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002473e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024748:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002474e:	83 ec 04             	sub    esp,0x4
c0024751:	52                   	push   edx
c0024752:	50                   	push   eax
c0024753:	68 8c da 02 c0       	push   0xc002da8c
c0024758:	e8 d0 e3 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002475d:	83 c4 10             	add    esp,0x10
c0024760:	90                   	nop
c0024761:	83 c4 0c             	add    esp,0xc
c0024764:	c3                   	ret    
c0024765:	90                   	nop

c0024766 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024766:	83 ec 0c             	sub    esp,0xc
c0024769:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002476d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024770:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024773:	09 c2                	or     edx,eax
c0024775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024779:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002477f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024781:	31 c0                	xor    eax,eax
c0024783:	c1 e9 08             	shr    ecx,0x8
c0024786:	83 e1 0f             	and    ecx,0xf
c0024789:	39 c8                	cmp    eax,ecx
c002478b:	74 0a                	je     c0024797 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002478d:	f6 c2 01             	test   dl,0x1
c0024790:	74 18                	je     c00247aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024792:	d1 ea                	shr    edx,1
c0024794:	40                   	inc    eax
c0024795:	eb f2                	jmp    c0024789 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024797:	83 ec 0c             	sub    esp,0xc
c002479a:	68 b0 da 02 c0       	push   0xc002dab0
c002479f:	e8 f5 5e ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00247a4:	83 c4 10             	add    esp,0x10
c00247a7:	83 c8 ff             	or     eax,0xffffffff
c00247aa:	83 c4 0c             	add    esp,0xc
c00247ad:	c3                   	ret    

c00247ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00247ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00247b5:	89 c2                	mov    edx,eax
c00247b7:	c1 ea 08             	shr    edx,0x8
c00247ba:	83 e2 0f             	and    edx,0xf
c00247bd:	fe ca                	dec    dl
c00247bf:	75 31                	jne    c00247f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00247c1:	83 e0 0f             	and    eax,0xf
c00247c4:	3c 03                	cmp    al,0x3
c00247c6:	75 2a                	jne    c00247f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00247c8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00247cb:	b8 02 00 00 00       	mov    eax,0x2
c00247d0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00247d6:	74 1c                	je     c00247f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247d8:	b8 04 00 00 00       	mov    eax,0x4
c00247dd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00247e3:	74 0f                	je     c00247f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00247e5:	31 c0                	xor    eax,eax
c00247e7:	83 fa 03             	cmp    edx,0x3
c00247ea:	0f 94 c0             	sete   al
c00247ed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00247f1:	c3                   	ret    
c00247f2:	31 c0                	xor    eax,eax
c00247f4:	c3                   	ret    
c00247f5:	90                   	nop

c00247f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00247f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00247fd:	0f ba e2 0f          	bt     edx,0xf
c0024801:	72 f7                	jb     c00247fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024803:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024806:	83 ca 10             	or     edx,0x10
c0024809:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002480c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002480f:	83 ca 01             	or     edx,0x1
c0024812:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024815:	c3                   	ret    

c0024816 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002481a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002481d:	83 e2 fe             	and    edx,0xfffffffe
c0024820:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024823:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024826:	83 e2 ef             	and    edx,0xffffffef
c0024829:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002482c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002482f:	0f ba e2 0e          	bt     edx,0xe
c0024833:	72 f7                	jb     c002482c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024835:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024838:	0f ba e2 0f          	bt     edx,0xf
c002483c:	72 ee                	jb     c002482c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002483e:	c3                   	ret    
c002483f:	90                   	nop

c0024840 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024840:	55                   	push   ebp
c0024841:	57                   	push   edi
c0024842:	56                   	push   esi
c0024843:	53                   	push   ebx
c0024844:	83 ec 1c             	sub    esp,0x1c
c0024847:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002484b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002484f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024853:	53                   	push   ebx
c0024854:	89 fd                	mov    ebp,edi
c0024856:	56                   	push   esi
c0024857:	c1 e5 0a             	shl    ebp,0xa
c002485a:	e8 b7 ff ff ff       	call   c0024816 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002485f:	83 ec 0c             	sub    esp,0xc
c0024862:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024868:	01 e8                	add    eax,ebp
c002486a:	89 03                	mov    DWORD PTR [ebx],eax
c002486c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002486e:	68 00 04 00 00       	push   0x400
c0024873:	6a 00                	push   0x0
c0024875:	50                   	push   eax
c0024876:	e8 d5 be fd ff       	call   c0000750 <memset>
c002487b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024881:	89 fa                	mov    edx,edi
c0024883:	01 e8                	add    eax,ebp
c0024885:	c1 e7 0d             	shl    edi,0xd
c0024888:	89 03                	mov    DWORD PTR [ebx],eax
c002488a:	c1 e2 08             	shl    edx,0x8
c002488d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024894:	81 c2 00 80 00 00    	add    edx,0x8000
c002489a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002489e:	89 d0                	mov    eax,edx
c00248a0:	83 c4 1c             	add    esp,0x1c
c00248a3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248a9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00248ac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00248af:	68 00 01 00 00       	push   0x100
c00248b4:	6a 00                	push   0x0
c00248b6:	50                   	push   eax
c00248b7:	e8 94 be fd ff       	call   c0000750 <memset>
c00248bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248c0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00248c6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00248cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00248d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00248d3:	83 c4 10             	add    esp,0x10
c00248d6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00248dd:	31 ff                	xor    edi,edi
c00248df:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00248e5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00248eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00248ef:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00248f5:	83 c5 20             	add    ebp,0x20
c00248f8:	01 f8                	add    eax,edi
c00248fa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00248fd:	52                   	push   edx
c00248fe:	68 00 01 00 00       	push   0x100
c0024903:	6a 00                	push   0x0
c0024905:	50                   	push   eax
c0024906:	e8 45 be fd ff       	call   c0000750 <memset>
c002490b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002490f:	83 c4 10             	add    esp,0x10
c0024912:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024918:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002491f:	01 f8                	add    eax,edi
c0024921:	81 c7 00 01 00 00    	add    edi,0x100
c0024927:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002492a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024930:	75 b3                	jne    c00248e5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024932:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024936:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002493a:	83 c4 1c             	add    esp,0x1c
c002493d:	5b                   	pop    ebx
c002493e:	5e                   	pop    esi
c002493f:	5f                   	pop    edi
c0024940:	5d                   	pop    ebp
c0024941:	e9 b0 fe ff ff       	jmp    c00247f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024946 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024946:	55                   	push   ebp
c0024947:	57                   	push   edi
c0024948:	56                   	push   esi
c0024949:	53                   	push   ebx
c002494a:	31 db                	xor    ebx,ebx
c002494c:	83 ec 0c             	sub    esp,0xc
c002494f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024953:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024957:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002495a:	f7 c7 01 00 00 00    	test   edi,0x1
c0024960:	0f 84 aa 00 00 00    	je     c0024a10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024966:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002496a:	89 d8                	mov    eax,ebx
c002496c:	c1 e0 07             	shl    eax,0x7
c002496f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024976:	55                   	push   ebp
c0024977:	56                   	push   esi
c0024978:	e8 31 fe ff ff       	call   c00247ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002497d:	5a                   	pop    edx
c002497e:	83 f8 01             	cmp    eax,0x1
c0024981:	59                   	pop    ecx
c0024982:	75 30                	jne    c00249b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024984:	50                   	push   eax
c0024985:	50                   	push   eax
c0024986:	53                   	push   ebx
c0024987:	68 d5 da 02 c0       	push   0xc002dad5
c002498c:	e8 9c e1 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024991:	83 c4 0c             	add    esp,0xc
c0024994:	53                   	push   ebx
c0024995:	55                   	push   ebp
c0024996:	56                   	push   esi
c0024997:	e8 a4 fe ff ff       	call   c0024840 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002499c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00249a3:	e8 e4 ae fe ff       	call   c000f88c <malloc>
c00249a8:	89 c5                	mov    ebp,eax
c00249aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00249ad:	e8 5c 0d 00 00       	call   c002570e <SATA::SATA()>
c00249b2:	eb 33                	jmp    c00249e7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00249b4:	83 f8 04             	cmp    eax,0x4
c00249b7:	75 47                	jne    c0024a00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00249b9:	50                   	push   eax
c00249ba:	50                   	push   eax
c00249bb:	53                   	push   ebx
c00249bc:	68 ec da 02 c0       	push   0xc002daec
c00249c1:	e8 67 e1 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00249c6:	83 c4 0c             	add    esp,0xc
c00249c9:	53                   	push   ebx
c00249ca:	55                   	push   ebp
c00249cb:	56                   	push   esi
c00249cc:	e8 6f fe ff ff       	call   c0024840 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00249d1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00249d8:	e8 af ae fe ff       	call   c000f88c <malloc>
c00249dd:	89 c5                	mov    ebp,eax
c00249df:	89 04 24             	mov    DWORD PTR [esp],eax
c00249e2:	e8 d3 10 00 00       	call   c0025aba <SATAPI::SATAPI()>
c00249e7:	5a                   	pop    edx
c00249e8:	59                   	pop    ecx
c00249e9:	55                   	push   ebp
c00249ea:	56                   	push   esi
c00249eb:	e8 76 f5 fe ff       	call   c0013f66 <Device::addChild(Device*)>
c00249f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00249f3:	56                   	push   esi
c00249f4:	6a 00                	push   0x0
c00249f6:	53                   	push   ebx
c00249f7:	55                   	push   ebp
c00249f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00249fb:	83 c4 20             	add    esp,0x20
c00249fe:	eb 10                	jmp    c0024a10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024a00:	50                   	push   eax
c0024a01:	50                   	push   eax
c0024a02:	53                   	push   ebx
c0024a03:	68 05 db 02 c0       	push   0xc002db05
c0024a08:	e8 20 e1 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024a0d:	83 c4 10             	add    esp,0x10
c0024a10:	d1 ef                	shr    edi,1
c0024a12:	43                   	inc    ebx
c0024a13:	83 fb 20             	cmp    ebx,0x20
c0024a16:	0f 85 3e ff ff ff    	jne    c002495a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024a1c:	83 c4 0c             	add    esp,0xc
c0024a1f:	5b                   	pop    ebx
c0024a20:	5e                   	pop    esi
c0024a21:	5f                   	pop    edi
c0024a22:	5d                   	pop    ebp
c0024a23:	c3                   	ret    

c0024a24 <SATABus::open(int, int, void*)>:
c0024a24:	83 ec 14             	sub    esp,0x14
c0024a27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a2b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024a31:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024a37:	52                   	push   edx
c0024a38:	50                   	push   eax
c0024a39:	e8 08 ff ff ff       	call   c0024946 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024a3e:	31 c0                	xor    eax,eax
c0024a40:	83 c4 1c             	add    esp,0x1c
c0024a43:	c3                   	ret    

c0024a44 <ATA::close(int, int, void*)>:
c0024a44:	83 ec 0c             	sub    esp,0xc
c0024a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a51:	85 c0                	test   eax,eax
c0024a53:	74 0c                	je     c0024a61 <ATA::close(int, int, void*)+0x1d>
c0024a55:	83 ec 0c             	sub    esp,0xc
c0024a58:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a5a:	50                   	push   eax
c0024a5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a5e:	83 c4 10             	add    esp,0x10
c0024a61:	31 c0                	xor    eax,eax
c0024a63:	83 c4 0c             	add    esp,0xc
c0024a66:	c3                   	ret    
c0024a67:	90                   	nop

c0024a68 <ATA::powerSaving(PowerSavingLevel)>:
c0024a68:	c3                   	ret    
c0024a69:	90                   	nop

c0024a6a <ATA::ATA()>:
c0024a6a:	83 ec 0c             	sub    esp,0xc
c0024a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a71:	83 ec 04             	sub    esp,0x4
c0024a74:	68 00 02 00 00       	push   0x200
c0024a79:	68 ed db 02 c0       	push   0xc002dbed
c0024a7e:	50                   	push   eax
c0024a7f:	e8 28 f9 fe ff       	call   c00143ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024a84:	83 c4 10             	add    esp,0x10
c0024a87:	ba 70 db 02 c0       	mov    edx,0xc002db70
c0024a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a90:	89 10                	mov    DWORD PTR [eax],edx
c0024a92:	90                   	nop
c0024a93:	83 c4 0c             	add    esp,0xc
c0024a96:	c3                   	ret    
c0024a97:	90                   	nop

c0024a98 <ATA::flush(bool)>:
c0024a98:	53                   	push   ebx
c0024a99:	83 ec 08             	sub    esp,0x8
c0024a9c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024aa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aa5:	19 c0                	sbb    eax,eax
c0024aa7:	83 e0 fd             	and    eax,0xfffffffd
c0024aaa:	05 ea 00 00 00       	add    eax,0xea
c0024aaf:	50                   	push   eax
c0024ab0:	6a 07                	push   0x7
c0024ab2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab9:	50                   	push   eax
c0024aba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ac0:	e8 dd ef ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac5:	83 c4 0c             	add    esp,0xc
c0024ac8:	6a 00                	push   0x0
c0024aca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ad1:	50                   	push   eax
c0024ad2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad8:	e8 71 fb ff ff       	call   c002464e <IDE::polling(unsigned char, unsigned int)>
c0024add:	83 c4 18             	add    esp,0x18
c0024ae0:	5b                   	pop    ebx
c0024ae1:	c3                   	ret    

c0024ae2 <ATA::readyForCommand()>:
c0024ae2:	56                   	push   esi
c0024ae3:	53                   	push   ebx
c0024ae4:	31 db                	xor    ebx,ebx
c0024ae6:	50                   	push   eax
c0024ae7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024aeb:	50                   	push   eax
c0024aec:	6a 0c                	push   0xc
c0024aee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024af5:	50                   	push   eax
c0024af6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024afc:	e8 61 f0 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c0024b01:	83 c4 10             	add    esp,0x10
c0024b04:	a8 88                	test   al,0x88
c0024b06:	74 23                	je     c0024b2b <ATA::readyForCommand()+0x49>
c0024b08:	43                   	inc    ebx
c0024b09:	83 fb 63             	cmp    ebx,0x63
c0024b0c:	7e dd                	jle    c0024aeb <ATA::readyForCommand()+0x9>
c0024b0e:	51                   	push   ecx
c0024b0f:	51                   	push   ecx
c0024b10:	6a 00                	push   0x0
c0024b12:	68 40 42 0f 00       	push   0xf4240
c0024b17:	e8 33 9c ff ff       	call   c001e74f <nanoSleep(unsigned long long)>
c0024b1c:	83 c4 10             	add    esp,0x10
c0024b1f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024b25:	75 c4                	jne    c0024aeb <ATA::readyForCommand()+0x9>
c0024b27:	31 c0                	xor    eax,eax
c0024b29:	eb 02                	jmp    c0024b2d <ATA::readyForCommand()+0x4b>
c0024b2b:	b0 01                	mov    al,0x1
c0024b2d:	5a                   	pop    edx
c0024b2e:	5b                   	pop    ebx
c0024b2f:	5e                   	pop    esi
c0024b30:	c3                   	ret    
c0024b31:	90                   	nop

c0024b32 <ATA::access(unsigned long long, int, void*, bool)>:
c0024b32:	55                   	push   ebp
c0024b33:	57                   	push   edi
c0024b34:	56                   	push   esi
c0024b35:	53                   	push   ebx
c0024b36:	83 ec 2c             	sub    esp,0x2c
c0024b39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024b3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b41:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024b45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024b49:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024b4d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024b51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024b55:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024b5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b5f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024b65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024b69:	c1 e0 06             	shl    eax,0x6
c0024b6c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024b74:	74 5d                	je     c0024bd3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024b76:	89 fa                	mov    edx,edi
c0024b78:	89 f0                	mov    eax,esi
c0024b7a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024b7e:	c1 ea 1c             	shr    edx,0x1c
c0024b81:	89 d1                	mov    ecx,edx
c0024b83:	09 c1                	or     ecx,eax
c0024b85:	74 25                	je     c0024bac <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024b87:	31 ed                	xor    ebp,ebp
c0024b89:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024b90:	89 fa                	mov    edx,edi
c0024b92:	89 f0                	mov    eax,esi
c0024b94:	0f ad d0             	shrd   eax,edx,cl
c0024b97:	d3 ea                	shr    edx,cl
c0024b99:	f6 c1 20             	test   cl,0x20
c0024b9c:	74 02                	je     c0024ba0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024b9e:	89 d0                	mov    eax,edx
c0024ba0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024ba4:	45                   	inc    ebp
c0024ba5:	83 fd 06             	cmp    ebp,0x6
c0024ba8:	75 df                	jne    c0024b89 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024baa:	eb 76                	jmp    c0024c22 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024bac:	89 f0                	mov    eax,esi
c0024bae:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024bb3:	89 fa                	mov    edx,edi
c0024bb5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024bbc:	0f ac d0 10          	shrd   eax,edx,0x10
c0024bc0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024bc5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024bc9:	c1 ee 18             	shr    esi,0x18
c0024bcc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024bd1:	eb 56                	jmp    c0024c29 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024bd3:	6a 00                	push   0x0
c0024bd5:	6a 3f                	push   0x3f
c0024bd7:	57                   	push   edi
c0024bd8:	56                   	push   esi
c0024bd9:	e8 96 29 00 00       	call   c0027574 <__umoddi3>
c0024bde:	83 c4 10             	add    esp,0x10
c0024be1:	40                   	inc    eax
c0024be2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024be6:	6a 00                	push   0x0
c0024be8:	68 f0 03 00 00       	push   0x3f0
c0024bed:	57                   	push   edi
c0024bee:	56                   	push   esi
c0024bef:	e8 80 28 00 00       	call   c0027474 <__udivdi3>
c0024bf4:	83 c4 10             	add    esp,0x10
c0024bf7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024bfc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024c03:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024c08:	6a 00                	push   0x0
c0024c0a:	6a 3f                	push   0x3f
c0024c0c:	57                   	push   edi
c0024c0d:	56                   	push   esi
c0024c0e:	e8 61 28 00 00       	call   c0027474 <__udivdi3>
c0024c13:	83 c4 10             	add    esp,0x10
c0024c16:	89 c6                	mov    esi,eax
c0024c18:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024c1d:	83 e6 0f             	and    esi,0xf
c0024c20:	eb 07                	jmp    c0024c29 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024c22:	31 f6                	xor    esi,esi
c0024c24:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024c29:	bf 01 00 00 00       	mov    edi,0x1
c0024c2e:	50                   	push   eax
c0024c2f:	6a 00                	push   0x0
c0024c31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c38:	50                   	push   eax
c0024c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c3d:	e8 6c f0 ff ff       	call   c0023cae <IDE::enableIRQs(unsigned char, bool)>
c0024c42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c45:	e8 98 fe ff ff       	call   c0024ae2 <ATA::readyForCommand()>
c0024c4a:	83 c4 10             	add    esp,0x10
c0024c4d:	84 c0                	test   al,al
c0024c4f:	0f 84 5a 02 00 00    	je     c0024eaf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c55:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024c5b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024c61:	c1 e0 04             	shl    eax,0x4
c0024c64:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024c6b:	09 c6                	or     esi,eax
c0024c6d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024c72:	75 05                	jne    c0024c79 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024c74:	83 ce a0             	or     esi,0xffffffa0
c0024c77:	eb 03                	jmp    c0024c7c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024c79:	83 ce e0             	or     esi,0xffffffe0
c0024c7c:	89 f0                	mov    eax,esi
c0024c7e:	0f b6 f0             	movzx  esi,al
c0024c81:	56                   	push   esi
c0024c82:	6a 06                	push   0x6
c0024c84:	51                   	push   ecx
c0024c85:	52                   	push   edx
c0024c86:	e8 17 ee ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c8b:	83 c4 10             	add    esp,0x10
c0024c8e:	6a 00                	push   0x0
c0024c90:	6a 01                	push   0x1
c0024c92:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c99:	50                   	push   eax
c0024c9a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ca0:	e8 fd ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ca5:	83 c4 10             	add    esp,0x10
c0024ca8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024cad:	75 6e                	jne    c0024d1d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024caf:	6a 00                	push   0x0
c0024cb1:	6a 08                	push   0x8
c0024cb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cba:	50                   	push   eax
c0024cbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cc1:	e8 dc ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cc6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024ccb:	50                   	push   eax
c0024ccc:	6a 09                	push   0x9
c0024cce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd5:	50                   	push   eax
c0024cd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cdc:	e8 c1 ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ce1:	83 c4 20             	add    esp,0x20
c0024ce4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024ce9:	50                   	push   eax
c0024cea:	6a 0a                	push   0xa
c0024cec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cf3:	50                   	push   eax
c0024cf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cfa:	e8 a3 ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cff:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024d04:	50                   	push   eax
c0024d05:	6a 0b                	push   0xb
c0024d07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d0e:	50                   	push   eax
c0024d0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d15:	e8 88 ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d1a:	83 c4 20             	add    esp,0x20
c0024d1d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024d22:	50                   	push   eax
c0024d23:	6a 02                	push   0x2
c0024d25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d2c:	50                   	push   eax
c0024d2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d33:	e8 6a ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d38:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024d3d:	50                   	push   eax
c0024d3e:	6a 03                	push   0x3
c0024d40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d47:	50                   	push   eax
c0024d48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d4e:	e8 4f ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d53:	83 c4 20             	add    esp,0x20
c0024d56:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024d5b:	50                   	push   eax
c0024d5c:	6a 04                	push   0x4
c0024d5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d65:	50                   	push   eax
c0024d66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d6c:	e8 31 ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024d76:	50                   	push   eax
c0024d77:	6a 05                	push   0x5
c0024d79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d80:	50                   	push   eax
c0024d81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d87:	e8 16 ed ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d8c:	83 c4 20             	add    esp,0x20
c0024d8f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024d94:	0f 94 c0             	sete   al
c0024d97:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d9c:	74 09                	je     c0024da7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024d9e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024da5:	eb 07                	jmp    c0024dae <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024da7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024dae:	0f b6 c0             	movzx  eax,al
c0024db1:	50                   	push   eax
c0024db2:	6a 07                	push   0x7
c0024db4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dbb:	50                   	push   eax
c0024dbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dc2:	e8 db ec ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dc7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024dcb:	83 c4 10             	add    esp,0x10
c0024dce:	85 f6                	test   esi,esi
c0024dd0:	0f 84 ba 00 00 00    	je     c0024e90 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024dd6:	50                   	push   eax
c0024dd7:	6a 01                	push   0x1
c0024dd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024de0:	50                   	push   eax
c0024de1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024de7:	e8 62 f8 ff ff       	call   c002464e <IDE::polling(unsigned char, unsigned int)>
c0024dec:	83 c4 10             	add    esp,0x10
c0024def:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024df5:	84 c0                	test   al,al
c0024df7:	74 2c                	je     c0024e25 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024df9:	0f b6 f8             	movzx  edi,al
c0024dfc:	0f b6 d2             	movzx  edx,dl
c0024dff:	57                   	push   edi
c0024e00:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024e07:	50                   	push   eax
c0024e08:	52                   	push   edx
c0024e09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e0f:	e8 a4 f6 ff ff       	call   c00244b8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024e14:	c7 04 24 48 db 02 c0 	mov    DWORD PTR [esp],0xc002db48
c0024e1b:	e8 0d dd fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0024e20:	e9 87 00 00 00       	jmp    c0024eac <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024e25:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024e2a:	74 33                	je     c0024e5f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024e2c:	31 ed                	xor    ebp,ebp
c0024e2e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024e32:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024e36:	50                   	push   eax
c0024e37:	50                   	push   eax
c0024e38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e3f:	50                   	push   eax
c0024e40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e46:	e8 45 ec ff ff       	call   c0023a90 <IDE::getBase(unsigned char)>
c0024e4b:	89 c2                	mov    edx,eax
c0024e4d:	89 f8                	mov    eax,edi
c0024e4f:	66 ef                	out    dx,ax
c0024e51:	45                   	inc    ebp
c0024e52:	83 c4 10             	add    esp,0x10
c0024e55:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024e5b:	75 d1                	jne    c0024e2e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024e5d:	eb 23                	jmp    c0024e82 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024e5f:	0f b6 d2             	movzx  edx,dl
c0024e62:	51                   	push   ecx
c0024e63:	51                   	push   ecx
c0024e64:	52                   	push   edx
c0024e65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e6b:	e8 20 ec ff ff       	call   c0023a90 <IDE::getBase(unsigned char)>
c0024e70:	b9 00 01 00 00       	mov    ecx,0x100
c0024e75:	89 c2                	mov    edx,eax
c0024e77:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024e7b:	fc                   	cld    
c0024e7c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024e7f:	83 c4 10             	add    esp,0x10
c0024e82:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024e8a:	4e                   	dec    esi
c0024e8b:	e9 3e ff ff ff       	jmp    c0024dce <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024e90:	31 ff                	xor    edi,edi
c0024e92:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024e97:	74 16                	je     c0024eaf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024e99:	50                   	push   eax
c0024e9a:	50                   	push   eax
c0024e9b:	31 c0                	xor    eax,eax
c0024e9d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024ea2:	0f 94 c0             	sete   al
c0024ea5:	50                   	push   eax
c0024ea6:	53                   	push   ebx
c0024ea7:	e8 ec fb ff ff       	call   c0024a98 <ATA::flush(bool)>
c0024eac:	83 c4 10             	add    esp,0x10
c0024eaf:	83 c4 2c             	add    esp,0x2c
c0024eb2:	89 f8                	mov    eax,edi
c0024eb4:	5b                   	pop    ebx
c0024eb5:	5e                   	pop    esi
c0024eb6:	5f                   	pop    edi
c0024eb7:	5d                   	pop    ebp
c0024eb8:	c3                   	ret    
c0024eb9:	90                   	nop

c0024eba <ATA::read(unsigned long long, int, void*)>:
c0024eba:	57                   	push   edi
c0024ebb:	b8 04 00 00 00       	mov    eax,0x4
c0024ec0:	56                   	push   esi
c0024ec1:	53                   	push   ebx
c0024ec2:	83 ec 10             	sub    esp,0x10
c0024ec5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024ec9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ecd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ed0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024ed4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ed8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ede:	77 3b                	ja     c0024f1b <ATA::read(unsigned long long, int, void*)+0x61>
c0024ee0:	b8 06 00 00 00       	mov    eax,0x6
c0024ee5:	85 d2                	test   edx,edx
c0024ee7:	74 32                	je     c0024f1b <ATA::read(unsigned long long, int, void*)+0x61>
c0024ee9:	50                   	push   eax
c0024eea:	50                   	push   eax
c0024eeb:	6a 00                	push   0x0
c0024eed:	52                   	push   edx
c0024eee:	53                   	push   ebx
c0024eef:	57                   	push   edi
c0024ef0:	56                   	push   esi
c0024ef1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ef5:	e8 38 fc ff ff       	call   c0024b32 <ATA::access(unsigned long long, int, void*, bool)>
c0024efa:	83 c4 20             	add    esp,0x20
c0024efd:	85 c0                	test   eax,eax
c0024eff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f03:	75 11                	jne    c0024f16 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024f05:	01 1d f8 34 03 c0    	add    DWORD PTR ds:0xc00334f8,ebx
c0024f0b:	e8 22 b7 fe ff       	call   c0010632 <VgaText::updateDiskUsage()>
c0024f10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f14:	eb 05                	jmp    c0024f1b <ATA::read(unsigned long long, int, void*)+0x61>
c0024f16:	b8 01 00 00 00       	mov    eax,0x1
c0024f1b:	83 c4 10             	add    esp,0x10
c0024f1e:	5b                   	pop    ebx
c0024f1f:	5e                   	pop    esi
c0024f20:	5f                   	pop    edi
c0024f21:	c3                   	ret    

c0024f22 <ATA::write(unsigned long long, int, void*)>:
c0024f22:	57                   	push   edi
c0024f23:	b8 04 00 00 00       	mov    eax,0x4
c0024f28:	56                   	push   esi
c0024f29:	53                   	push   ebx
c0024f2a:	83 ec 10             	sub    esp,0x10
c0024f2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f31:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f35:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f38:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f3c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f40:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f46:	77 3b                	ja     c0024f83 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f48:	b8 06 00 00 00       	mov    eax,0x6
c0024f4d:	85 d2                	test   edx,edx
c0024f4f:	74 32                	je     c0024f83 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f51:	50                   	push   eax
c0024f52:	50                   	push   eax
c0024f53:	6a 01                	push   0x1
c0024f55:	52                   	push   edx
c0024f56:	53                   	push   ebx
c0024f57:	57                   	push   edi
c0024f58:	56                   	push   esi
c0024f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f5d:	e8 d0 fb ff ff       	call   c0024b32 <ATA::access(unsigned long long, int, void*, bool)>
c0024f62:	83 c4 20             	add    esp,0x20
c0024f65:	85 c0                	test   eax,eax
c0024f67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024f6b:	75 11                	jne    c0024f7e <ATA::write(unsigned long long, int, void*)+0x5c>
c0024f6d:	01 1d f4 34 03 c0    	add    DWORD PTR ds:0xc00334f4,ebx
c0024f73:	e8 ba b6 fe ff       	call   c0010632 <VgaText::updateDiskUsage()>
c0024f78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f7c:	eb 05                	jmp    c0024f83 <ATA::write(unsigned long long, int, void*)+0x61>
c0024f7e:	b8 01 00 00 00       	mov    eax,0x1
c0024f83:	83 c4 10             	add    esp,0x10
c0024f86:	5b                   	pop    ebx
c0024f87:	5e                   	pop    esi
c0024f88:	5f                   	pop    edi
c0024f89:	c3                   	ret    

c0024f8a <ATA::detectCHS()>:
c0024f8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024f8e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024f94:	c1 e0 06             	shl    eax,0x6
c0024f97:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024f9d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024fa7:	c7 44 24 04 53 db 02 c0 	mov    DWORD PTR [esp+0x4],0xc002db53
c0024faf:	e9 e5 56 ff ff       	jmp    c001a699 <Krnl::panic(char const*)>

c0024fb4 <ATA::open(int, int, void*)>:
c0024fb4:	53                   	push   ebx
c0024fb5:	83 ec 08             	sub    esp,0x8
c0024fb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024fc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024fc4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024fca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024fd0:	c1 e0 06             	shl    eax,0x6
c0024fd3:	01 d0                	add    eax,edx
c0024fd5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024fdc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024fe2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024fe9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ff3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024ff9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025000:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0025007:	75 0c                	jne    c0025015 <ATA::open(int, int, void*)+0x61>
c0025009:	83 ec 0c             	sub    esp,0xc
c002500c:	53                   	push   ebx
c002500d:	e8 78 ff ff ff       	call   c0024f8a <ATA::detectCHS()>
c0025012:	83 c4 10             	add    esp,0x10
c0025015:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002501b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0025021:	c1 e0 06             	shl    eax,0x6
c0025024:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002502b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025035:	d1 e8                	shr    eax,1
c0025037:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002503d:	6a 04                	push   0x4
c002503f:	6a 0c                	push   0xc
c0025041:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025048:	50                   	push   eax
c0025049:	52                   	push   edx
c002504a:	e8 53 ea ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002504f:	90                   	nop
c0025050:	90                   	nop
c0025051:	6a 00                	push   0x0
c0025053:	6a 0c                	push   0xc
c0025055:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002505c:	50                   	push   eax
c002505d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025063:	e8 3a ea ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025068:	83 c4 14             	add    esp,0x14
c002506b:	53                   	push   ebx
c002506c:	e8 a3 f3 fe ff       	call   c0014414 <PhysicalDisk::startCache()>
c0025071:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025074:	e8 55 16 ff ff       	call   c00166ce <createPartitionsForDisk(PhysicalDisk*)>
c0025079:	31 c0                	xor    eax,eax
c002507b:	83 c4 18             	add    esp,0x18
c002507e:	5b                   	pop    ebx
c002507f:	c3                   	ret    

c0025080 <ATAPI::write(unsigned long long, int, void*)>:
c0025080:	b8 03 00 00 00       	mov    eax,0x3
c0025085:	c3                   	ret    

c0025086 <ATAPI::close(int, int, void*)>:
c0025086:	83 ec 0c             	sub    esp,0xc
c0025089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002508d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025093:	85 c0                	test   eax,eax
c0025095:	74 0c                	je     c00250a3 <ATAPI::close(int, int, void*)+0x1d>
c0025097:	83 ec 0c             	sub    esp,0xc
c002509a:	8b 10                	mov    edx,DWORD PTR [eax]
c002509c:	50                   	push   eax
c002509d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250a0:	83 c4 10             	add    esp,0x10
c00250a3:	31 c0                	xor    eax,eax
c00250a5:	83 c4 0c             	add    esp,0xc
c00250a8:	c3                   	ret    
c00250a9:	90                   	nop

c00250aa <ATAPI::ATAPI()>:
c00250aa:	83 ec 0c             	sub    esp,0xc
c00250ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b1:	83 ec 04             	sub    esp,0x4
c00250b4:	68 00 08 00 00       	push   0x800
c00250b9:	68 8d dc 02 c0       	push   0xc002dc8d
c00250be:	50                   	push   eax
c00250bf:	e8 e8 f2 fe ff       	call   c00143ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250c4:	83 c4 10             	add    esp,0x10
c00250c7:	ba a8 db 02 c0       	mov    edx,0xc002dba8
c00250cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d0:	89 10                	mov    DWORD PTR [eax],edx
c00250d2:	90                   	nop
c00250d3:	83 c4 0c             	add    esp,0xc
c00250d6:	c3                   	ret    
c00250d7:	90                   	nop

c00250d8 <ATAPI::readyForCommand()>:
c00250d8:	56                   	push   esi
c00250d9:	53                   	push   ebx
c00250da:	31 db                	xor    ebx,ebx
c00250dc:	50                   	push   eax
c00250dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00250e1:	50                   	push   eax
c00250e2:	6a 0c                	push   0xc
c00250e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00250eb:	50                   	push   eax
c00250ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00250f2:	e8 6b ea ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00250f7:	83 c4 10             	add    esp,0x10
c00250fa:	a8 88                	test   al,0x88
c00250fc:	74 23                	je     c0025121 <ATAPI::readyForCommand()+0x49>
c00250fe:	43                   	inc    ebx
c00250ff:	83 fb 63             	cmp    ebx,0x63
c0025102:	7e dd                	jle    c00250e1 <ATAPI::readyForCommand()+0x9>
c0025104:	51                   	push   ecx
c0025105:	51                   	push   ecx
c0025106:	6a 00                	push   0x0
c0025108:	68 40 42 0f 00       	push   0xf4240
c002510d:	e8 3d 96 ff ff       	call   c001e74f <nanoSleep(unsigned long long)>
c0025112:	83 c4 10             	add    esp,0x10
c0025115:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002511b:	75 c4                	jne    c00250e1 <ATAPI::readyForCommand()+0x9>
c002511d:	31 c0                	xor    eax,eax
c002511f:	eb 02                	jmp    c0025123 <ATAPI::readyForCommand()+0x4b>
c0025121:	b0 01                	mov    al,0x1
c0025123:	5a                   	pop    edx
c0025124:	5b                   	pop    ebx
c0025125:	5e                   	pop    esi
c0025126:	c3                   	ret    
c0025127:	90                   	nop

c0025128 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0025128:	55                   	push   ebp
c0025129:	57                   	push   edi
c002512a:	56                   	push   esi
c002512b:	53                   	push   ebx
c002512c:	83 ec 20             	sub    esp,0x20
c002512f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0025133:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0025137:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002513b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002513f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025143:	6a 01                	push   0x1
c0025145:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002514c:	50                   	push   eax
c002514d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025153:	e8 56 eb ff ff       	call   c0023cae <IDE::enableIRQs(unsigned char, bool)>
c0025158:	5e                   	pop    esi
c0025159:	58                   	pop    eax
c002515a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025161:	50                   	push   eax
c0025162:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025168:	e8 0f e9 ff ff       	call   c0023a7c <IDE::prepareInterrupt(unsigned char)>
c002516d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0025170:	e8 63 ff ff ff       	call   c00250d8 <ATAPI::readyForCommand()>
c0025175:	83 c4 10             	add    esp,0x10
c0025178:	84 c0                	test   al,al
c002517a:	75 0a                	jne    c0025186 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002517c:	bb 01 00 00 00       	mov    ebx,0x1
c0025181:	e9 57 02 00 00       	jmp    c00253dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025186:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002518c:	c1 e0 04             	shl    eax,0x4
c002518f:	0f b6 c0             	movzx  eax,al
c0025192:	50                   	push   eax
c0025193:	6a 06                	push   0x6
c0025195:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002519c:	50                   	push   eax
c002519d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251a3:	e8 fa e8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251a8:	6a 00                	push   0x0
c00251aa:	6a 01                	push   0x1
c00251ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251b3:	50                   	push   eax
c00251b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ba:	e8 e3 e8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251bf:	83 c4 20             	add    esp,0x20
c00251c2:	0f b6 c3             	movzx  eax,bl
c00251c5:	0f b6 df             	movzx  ebx,bh
c00251c8:	50                   	push   eax
c00251c9:	6a 04                	push   0x4
c00251cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251d2:	50                   	push   eax
c00251d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251d9:	e8 c4 e8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251de:	53                   	push   ebx
c00251df:	6a 05                	push   0x5
c00251e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251e8:	50                   	push   eax
c00251e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251ef:	e8 ae e8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251f4:	83 c4 20             	add    esp,0x20
c00251f7:	68 a0 00 00 00       	push   0xa0
c00251fc:	6a 07                	push   0x7
c00251fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025205:	50                   	push   eax
c0025206:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002520c:	e8 91 e8 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025211:	83 c4 0c             	add    esp,0xc
c0025214:	6a 01                	push   0x1
c0025216:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002521d:	50                   	push   eax
c002521e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025224:	e8 25 f4 ff ff       	call   c002464e <IDE::polling(unsigned char, unsigned int)>
c0025229:	83 c4 10             	add    esp,0x10
c002522c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025232:	84 c0                	test   al,al
c0025234:	74 23                	je     c0025259 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0025236:	0f b6 d8             	movzx  ebx,al
c0025239:	0f b6 d2             	movzx  edx,dl
c002523c:	53                   	push   ebx
c002523d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025244:	50                   	push   eax
c0025245:	52                   	push   edx
c0025246:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002524c:	e8 67 f2 ff ff       	call   c00244b8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025251:	83 c4 10             	add    esp,0x10
c0025254:	e9 84 01 00 00       	jmp    c00253dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025259:	0f b6 d2             	movzx  edx,dl
c002525c:	53                   	push   ebx
c002525d:	53                   	push   ebx
c002525e:	52                   	push   edx
c002525f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025265:	e8 26 e8 ff ff       	call   c0023a90 <IDE::getBase(unsigned char)>
c002526a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002526e:	b9 06 00 00 00       	mov    ecx,0x6
c0025273:	89 c2                	mov    edx,eax
c0025275:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025278:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002527c:	83 c4 10             	add    esp,0x10
c002527f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025285:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002528c:	85 db                	test   ebx,ebx
c002528e:	0f 84 ec 00 00 00    	je     c0025380 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025294:	51                   	push   ecx
c0025295:	51                   	push   ecx
c0025296:	52                   	push   edx
c0025297:	50                   	push   eax
c0025298:	e8 73 e9 ff ff       	call   c0023c10 <IDE::waitInterrupt(unsigned char)>
c002529d:	83 c4 10             	add    esp,0x10
c00252a0:	84 c0                	test   al,al
c00252a2:	0f 84 d4 fe ff ff    	je     c002517c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00252a8:	56                   	push   esi
c00252a9:	56                   	push   esi
c00252aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252b1:	50                   	push   eax
c00252b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252b8:	e8 bf e7 ff ff       	call   c0023a7c <IDE::prepareInterrupt(unsigned char)>
c00252bd:	83 c4 0c             	add    esp,0xc
c00252c0:	6a 04                	push   0x4
c00252c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252c9:	50                   	push   eax
c00252ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252d0:	e8 8d e8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00252d5:	83 c4 0c             	add    esp,0xc
c00252d8:	89 c6                	mov    esi,eax
c00252da:	6a 05                	push   0x5
c00252dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252e3:	50                   	push   eax
c00252e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252ea:	e8 73 e8 ff ff       	call   c0023b62 <IDE::read(unsigned char, unsigned char)>
c00252ef:	89 f1                	mov    ecx,esi
c00252f1:	0f b6 c0             	movzx  eax,al
c00252f4:	0f b6 f1             	movzx  esi,cl
c00252f7:	c1 e0 08             	shl    eax,0x8
c00252fa:	09 c6                	or     esi,eax
c00252fc:	d1 fe                	sar    esi,1
c00252fe:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025302:	83 c4 10             	add    esp,0x10
c0025305:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002530a:	74 41                	je     c002534d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002530c:	31 c9                	xor    ecx,ecx
c002530e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025314:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002531b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002531f:	75 0a                	jne    c002532b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025321:	01 c9                	add    ecx,ecx
c0025323:	01 cd                	add    ebp,ecx
c0025325:	4b                   	dec    ebx
c0025326:	e9 54 ff ff ff       	jmp    c002527f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002532b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025330:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025334:	51                   	push   ecx
c0025335:	51                   	push   ecx
c0025336:	52                   	push   edx
c0025337:	50                   	push   eax
c0025338:	e8 53 e7 ff ff       	call   c0023a90 <IDE::getBase(unsigned char)>
c002533d:	89 c2                	mov    edx,eax
c002533f:	89 f0                	mov    eax,esi
c0025341:	66 ef                	out    dx,ax
c0025343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025347:	83 c4 10             	add    esp,0x10
c002534a:	41                   	inc    ecx
c002534b:	eb c1                	jmp    c002530e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002534d:	31 f6                	xor    esi,esi
c002534f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025355:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002535c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025360:	75 06                	jne    c0025368 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025362:	01 f6                	add    esi,esi
c0025364:	01 f5                	add    ebp,esi
c0025366:	eb bd                	jmp    c0025325 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025368:	51                   	push   ecx
c0025369:	51                   	push   ecx
c002536a:	52                   	push   edx
c002536b:	50                   	push   eax
c002536c:	e8 1f e7 ff ff       	call   c0023a90 <IDE::getBase(unsigned char)>
c0025371:	89 c2                	mov    edx,eax
c0025373:	66 ed                	in     ax,dx
c0025375:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002537a:	83 c4 10             	add    esp,0x10
c002537d:	46                   	inc    esi
c002537e:	eb cf                	jmp    c002534f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025380:	51                   	push   ecx
c0025381:	51                   	push   ecx
c0025382:	52                   	push   edx
c0025383:	50                   	push   eax
c0025384:	e8 87 e8 ff ff       	call   c0023c10 <IDE::waitInterrupt(unsigned char)>
c0025389:	83 c4 10             	add    esp,0x10
c002538c:	84 c0                	test   al,al
c002538e:	0f 84 e8 fd ff ff    	je     c002517c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025394:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025399:	52                   	push   edx
c002539a:	52                   	push   edx
c002539b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253a2:	50                   	push   eax
c00253a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253a9:	e8 ce e6 ff ff       	call   c0023a7c <IDE::prepareInterrupt(unsigned char)>
c00253ae:	83 c4 10             	add    esp,0x10
c00253b1:	50                   	push   eax
c00253b2:	50                   	push   eax
c00253b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253ba:	50                   	push   eax
c00253bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253c1:	e8 ca e6 ff ff       	call   c0023a90 <IDE::getBase(unsigned char)>
c00253c6:	8d 50 07             	lea    edx,[eax+0x7]
c00253c9:	ec                   	in     al,dx
c00253ca:	83 c4 10             	add    esp,0x10
c00253cd:	a8 88                	test   al,0x88
c00253cf:	74 0a                	je     c00253db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00253d1:	4b                   	dec    ebx
c00253d2:	75 dd                	jne    c00253b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00253d4:	bb 02 00 00 00       	mov    ebx,0x2
c00253d9:	eb 02                	jmp    c00253dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00253db:	31 db                	xor    ebx,ebx
c00253dd:	83 c4 1c             	add    esp,0x1c
c00253e0:	89 d8                	mov    eax,ebx
c00253e2:	5b                   	pop    ebx
c00253e3:	5e                   	pop    esi
c00253e4:	5f                   	pop    edi
c00253e5:	5d                   	pop    ebp
c00253e6:	c3                   	ret    
c00253e7:	90                   	nop

c00253e8 <ATAPI::diskRemoved()>:
c00253e8:	83 ec 18             	sub    esp,0x18
c00253eb:	68 99 dc 02 c0       	push   0xc002dc99
c00253f0:	e8 38 d7 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00253f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00253f9:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025400:	83 c4 1c             	add    esp,0x1c
c0025403:	c3                   	ret    

c0025404 <ATAPI::eject()>:
c0025404:	57                   	push   edi
c0025405:	b9 03 00 00 00       	mov    ecx,0x3
c002540a:	53                   	push   ebx
c002540b:	83 ec 14             	sub    esp,0x14
c002540e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025412:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025416:	fc                   	cld    
c0025417:	31 c0                	xor    eax,eax
c0025419:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002541b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025420:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025425:	50                   	push   eax
c0025426:	50                   	push   eax
c0025427:	6a 00                	push   0x0
c0025429:	6a 00                	push   0x0
c002542b:	6a 00                	push   0x0
c002542d:	6a 02                	push   0x2
c002542f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025433:	50                   	push   eax
c0025434:	53                   	push   ebx
c0025435:	e8 ee fc ff ff       	call   c0025128 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002543a:	83 c4 14             	add    esp,0x14
c002543d:	53                   	push   ebx
c002543e:	e8 a5 ff ff ff       	call   c00253e8 <ATAPI::diskRemoved()>
c0025443:	83 c4 24             	add    esp,0x24
c0025446:	31 c0                	xor    eax,eax
c0025448:	5b                   	pop    ebx
c0025449:	5f                   	pop    edi
c002544a:	c3                   	ret    
c002544b:	90                   	nop

c002544c <ATAPI::diskInserted()>:
c002544c:	53                   	push   ebx
c002544d:	83 ec 14             	sub    esp,0x14
c0025450:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025454:	68 b0 dc 02 c0       	push   0xc002dcb0
c0025459:	e8 cf d6 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c002545e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025468:	e8 a7 ef fe ff       	call   c0014414 <PhysicalDisk::startCache()>
c002546d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025471:	83 c4 18             	add    esp,0x18
c0025474:	5b                   	pop    ebx
c0025475:	e9 54 12 ff ff       	jmp    c00166ce <createPartitionsForDisk(PhysicalDisk*)>

c002547a <ATAPI::detectMedia()>:
c002547a:	56                   	push   esi
c002547b:	53                   	push   ebx
c002547c:	83 ec 28             	sub    esp,0x28
c002547f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025483:	6a 0c                	push   0xc
c0025485:	6a 00                	push   0x0
c0025487:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002548b:	56                   	push   esi
c002548c:	e8 bf b2 fd ff       	call   c0000750 <memset>
c0025491:	58                   	pop    eax
c0025492:	5a                   	pop    edx
c0025493:	6a 00                	push   0x0
c0025495:	6a 00                	push   0x0
c0025497:	6a 00                	push   0x0
c0025499:	6a 00                	push   0x0
c002549b:	56                   	push   esi
c002549c:	53                   	push   ebx
c002549d:	e8 86 fc ff ff       	call   c0025128 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254a2:	83 c4 1c             	add    esp,0x1c
c00254a5:	6a 0c                	push   0xc
c00254a7:	6a 00                	push   0x0
c00254a9:	56                   	push   esi
c00254aa:	e8 a1 b2 fd ff       	call   c0000750 <memset>
c00254af:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00254b4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00254b9:	59                   	pop    ecx
c00254ba:	58                   	pop    eax
c00254bb:	6a 01                	push   0x1
c00254bd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00254c1:	50                   	push   eax
c00254c2:	6a 00                	push   0x0
c00254c4:	6a 12                	push   0x12
c00254c6:	56                   	push   esi
c00254c7:	53                   	push   ebx
c00254c8:	e8 5b fc ff ff       	call   c0025128 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254cd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00254d1:	83 c4 20             	add    esp,0x20
c00254d4:	83 e0 7f             	and    eax,0x7f
c00254d7:	3c 70                	cmp    al,0x70
c00254d9:	74 15                	je     c00254f0 <ATAPI::detectMedia()+0x76>
c00254db:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00254e2:	75 0c                	jne    c00254f0 <ATAPI::detectMedia()+0x76>
c00254e4:	83 ec 0c             	sub    esp,0xc
c00254e7:	53                   	push   ebx
c00254e8:	e8 5f ff ff ff       	call   c002544c <ATAPI::diskInserted()>
c00254ed:	83 c4 10             	add    esp,0x10
c00254f0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00254f4:	83 e0 0f             	and    eax,0xf
c00254f7:	3c 02                	cmp    al,0x2
c00254f9:	75 1b                	jne    c0025516 <ATAPI::detectMedia()+0x9c>
c00254fb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025500:	75 2d                	jne    c002552f <ATAPI::detectMedia()+0xb5>
c0025502:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025509:	74 24                	je     c002552f <ATAPI::detectMedia()+0xb5>
c002550b:	83 ec 0c             	sub    esp,0xc
c002550e:	53                   	push   ebx
c002550f:	e8 d4 fe ff ff       	call   c00253e8 <ATAPI::diskRemoved()>
c0025514:	eb 16                	jmp    c002552c <ATAPI::detectMedia()+0xb2>
c0025516:	84 c0                	test   al,al
c0025518:	75 15                	jne    c002552f <ATAPI::detectMedia()+0xb5>
c002551a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025521:	75 0c                	jne    c002552f <ATAPI::detectMedia()+0xb5>
c0025523:	83 ec 0c             	sub    esp,0xc
c0025526:	53                   	push   ebx
c0025527:	e8 20 ff ff ff       	call   c002544c <ATAPI::diskInserted()>
c002552c:	83 c4 10             	add    esp,0x10
c002552f:	83 c4 24             	add    esp,0x24
c0025532:	5b                   	pop    ebx
c0025533:	5e                   	pop    esi
c0025534:	c3                   	ret    
c0025535:	90                   	nop

c0025536 <ATAPI::open(int, int, void*)>:
c0025536:	53                   	push   ebx
c0025537:	83 ec 08             	sub    esp,0x8
c002553a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002553e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025542:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025546:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002554c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025552:	c1 e0 06             	shl    eax,0x6
c0025555:	01 d0                	add    eax,edx
c0025557:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002555e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025564:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002556b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025575:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002557b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025582:	6a 04                	push   0x4
c0025584:	6a 0c                	push   0xc
c0025586:	51                   	push   ecx
c0025587:	52                   	push   edx
c0025588:	e8 15 e5 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002558d:	90                   	nop
c002558e:	90                   	nop
c002558f:	6a 00                	push   0x0
c0025591:	6a 0c                	push   0xc
c0025593:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002559a:	50                   	push   eax
c002559b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00255a1:	e8 fc e4 ff ff       	call   c0023aa2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00255a6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00255ad:	83 c4 14             	add    esp,0x14
c00255b0:	53                   	push   ebx
c00255b1:	e8 c4 fe ff ff       	call   c002547a <ATAPI::detectMedia()>
c00255b6:	31 c0                	xor    eax,eax
c00255b8:	83 c4 18             	add    esp,0x18
c00255bb:	5b                   	pop    ebx
c00255bc:	c3                   	ret    
c00255bd:	90                   	nop

c00255be <ATAPI::read(unsigned long long, int, void*)>:
c00255be:	55                   	push   ebp
c00255bf:	57                   	push   edi
c00255c0:	56                   	push   esi
c00255c1:	53                   	push   ebx
c00255c2:	83 ec 1c             	sub    esp,0x1c
c00255c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00255c9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255cd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00255d1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00255d8:	74 41                	je     c002561b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00255da:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255de:	b9 03 00 00 00       	mov    ecx,0x3
c00255e3:	fc                   	cld    
c00255e4:	31 c0                	xor    eax,eax
c00255e6:	86 fb                	xchg   bl,bh
c00255e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255ea:	c1 c3 10             	rol    ebx,0x10
c00255ed:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00255f2:	89 e8                	mov    eax,ebp
c00255f4:	86 fb                	xchg   bl,bh
c00255f6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00255fa:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00255fe:	50                   	push   eax
c00255ff:	50                   	push   eax
c0025600:	55                   	push   ebp
c0025601:	c1 e5 0b             	shl    ebp,0xb
c0025604:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025608:	6a 00                	push   0x0
c002560a:	55                   	push   ebp
c002560b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002560f:	50                   	push   eax
c0025610:	56                   	push   esi
c0025611:	e8 12 fb ff ff       	call   c0025128 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025616:	83 c4 20             	add    esp,0x20
c0025619:	eb 1a                	jmp    c0025635 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002561b:	83 ec 0c             	sub    esp,0xc
c002561e:	56                   	push   esi
c002561f:	e8 56 fe ff ff       	call   c002547a <ATAPI::detectMedia()>
c0025624:	83 c4 10             	add    esp,0x10
c0025627:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002562e:	75 aa                	jne    c00255da <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025630:	b8 02 00 00 00       	mov    eax,0x2
c0025635:	83 c4 1c             	add    esp,0x1c
c0025638:	5b                   	pop    ebx
c0025639:	5e                   	pop    esi
c002563a:	5f                   	pop    edi
c002563b:	5d                   	pop    ebp
c002563c:	c3                   	ret    
c002563d:	90                   	nop

c002563e <SATA::close(int, int, void*)>:
c002563e:	83 ec 0c             	sub    esp,0xc
c0025641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025645:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002564b:	85 c0                	test   eax,eax
c002564d:	74 0c                	je     c002565b <SATA::close(int, int, void*)+0x1d>
c002564f:	83 ec 0c             	sub    esp,0xc
c0025652:	8b 10                	mov    edx,DWORD PTR [eax]
c0025654:	50                   	push   eax
c0025655:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025658:	83 c4 10             	add    esp,0x10
c002565b:	31 c0                	xor    eax,eax
c002565d:	83 c4 0c             	add    esp,0xc
c0025660:	c3                   	ret    
c0025661:	90                   	nop

c0025662 <SATA::powerSaving(PowerSavingLevel)>:
c0025662:	c3                   	ret    
c0025663:	90                   	nop

c0025664 <SATA::open(int, int, void*)>:
c0025664:	56                   	push   esi
c0025665:	53                   	push   ebx
c0025666:	50                   	push   eax
c0025667:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002566b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002566f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025679:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002567f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025697:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002569d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00256a4:	e8 45 a5 fe ff       	call   c000fbee <Phys::allocatePage()>
c00256a9:	89 c6                	mov    esi,eax
c00256ab:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00256b1:	81 c6 00 10 00 00    	add    esi,0x1000
c00256b7:	e8 32 a5 fe ff       	call   c000fbee <Phys::allocatePage()>
c00256bc:	39 c6                	cmp    esi,eax
c00256be:	74 10                	je     c00256d0 <SATA::open(int, int, void*)+0x6c>
c00256c0:	83 ec 0c             	sub    esp,0xc
c00256c3:	68 d8 db 02 c0       	push   0xc002dbd8
c00256c8:	e8 cc 4f ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00256cd:	83 c4 10             	add    esp,0x10
c00256d0:	83 ec 0c             	sub    esp,0xc
c00256d3:	6a 02                	push   0x2
c00256d5:	e8 4d c0 fe ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c00256da:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256e0:	6a 03                	push   0x3
c00256e2:	50                   	push   eax
c00256e3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00256e9:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c00256ef:	e8 6a c8 fe ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c00256f4:	83 c4 14             	add    esp,0x14
c00256f7:	53                   	push   ebx
c00256f8:	e8 17 ed fe ff       	call   c0014414 <PhysicalDisk::startCache()>
c00256fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025700:	e8 c9 0f ff ff       	call   c00166ce <createPartitionsForDisk(PhysicalDisk*)>
c0025705:	83 c4 14             	add    esp,0x14
c0025708:	31 c0                	xor    eax,eax
c002570a:	5b                   	pop    ebx
c002570b:	5e                   	pop    esi
c002570c:	c3                   	ret    
c002570d:	90                   	nop

c002570e <SATA::SATA()>:
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025715:	83 ec 04             	sub    esp,0x4
c0025718:	68 00 02 00 00       	push   0x200
c002571d:	68 ec db 02 c0       	push   0xc002dbec
c0025722:	50                   	push   eax
c0025723:	e8 84 ec fe ff       	call   c00143ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025728:	83 c4 10             	add    esp,0x10
c002572b:	ba 5c dc 02 c0       	mov    edx,0xc002dc5c
c0025730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025734:	89 10                	mov    DWORD PTR [eax],edx
c0025736:	90                   	nop
c0025737:	83 c4 0c             	add    esp,0xc
c002573a:	c3                   	ret    
c002573b:	90                   	nop

c002573c <SATA::access(unsigned long long, int, void*, bool)>:
c002573c:	55                   	push   ebp
c002573d:	57                   	push   edi
c002573e:	56                   	push   esi
c002573f:	53                   	push   ebx
c0025740:	83 ec 2c             	sub    esp,0x2c
c0025743:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025747:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002574b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002574f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025753:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025757:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002575c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025760:	7e 10                	jle    c0025772 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025762:	83 ec 0c             	sub    esp,0xc
c0025765:	68 fc db 02 c0       	push   0xc002dbfc
c002576a:	e8 2a 4f ff ff       	call   c001a699 <Krnl::panic(char const*)>
c002576f:	83 c4 10             	add    esp,0x10
c0025772:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025778:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002577e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025784:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025788:	89 d0                	mov    eax,edx
c002578a:	c1 e0 07             	shl    eax,0x7
c002578d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025791:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002579b:	51                   	push   ecx
c002579c:	8d 42 02             	lea    eax,[edx+0x2]
c002579f:	51                   	push   ecx
c00257a0:	c1 e0 07             	shl    eax,0x7
c00257a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00257a7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00257ab:	50                   	push   eax
c00257ac:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00257b2:	e8 af ef ff ff       	call   c0024766 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00257b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00257bb:	83 c4 10             	add    esp,0x10
c00257be:	b8 01 00 00 00       	mov    eax,0x1
c00257c3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00257c8:	0f 84 cb 01 00 00    	je     c0025999 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00257ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00257d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00257d6:	c1 e0 09             	shl    eax,0x9
c00257d9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00257de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00257e2:	74 0e                	je     c00257f2 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00257e4:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00257ea:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00257ee:	89 c1                	mov    ecx,eax
c00257f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00257f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00257f6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00257fc:	8d 42 02             	lea    eax,[edx+0x2]
c00257ff:	c1 e0 07             	shl    eax,0x7
c0025802:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025806:	8b 00                	mov    eax,DWORD PTR [eax]
c0025808:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002580e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025814:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025818:	c1 e1 05             	shl    ecx,0x5
c002581b:	01 c8                	add    eax,ecx
c002581d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025821:	83 e1 01             	and    ecx,0x1
c0025824:	89 ce                	mov    esi,ecx
c0025826:	8a 08                	mov    cl,BYTE PTR [eax]
c0025828:	c1 e6 06             	shl    esi,0x6
c002582b:	83 e1 bf             	and    ecx,0xffffffbf
c002582e:	09 f1                	or     ecx,esi
c0025830:	88 08                	mov    BYTE PTR [eax],cl
c0025832:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025834:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002583a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025840:	89 08                	mov    DWORD PTR [eax],ecx
c0025842:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025848:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002584e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025854:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025857:	50                   	push   eax
c0025858:	68 90 00 00 00       	push   0x90
c002585d:	6a 00                	push   0x0
c002585f:	56                   	push   esi
c0025860:	e8 eb ae fd ff       	call   c0000750 <memset>
c0025865:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002586b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002586f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025875:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002587d:	83 c4 10             	add    esp,0x10
c0025880:	48                   	dec    eax
c0025881:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025886:	89 c1                	mov    ecx,eax
c0025888:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002588e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025893:	09 c8                	or     eax,ecx
c0025895:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002589b:	66 8b 06             	mov    ax,WORD PTR [esi]
c002589e:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00258a5:	66 25 00 7f          	and    ax,0x7f00
c00258a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00258ad:	66 0d 27 80          	or     ax,0x8027
c00258b1:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00258b6:	66 89 06             	mov    WORD PTR [esi],ax
c00258b9:	19 c0                	sbb    eax,eax
c00258bb:	83 e0 f0             	and    eax,0xfffffff0
c00258be:	83 c0 35             	add    eax,0x35
c00258c1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00258c4:	89 e8                	mov    eax,ebp
c00258c6:	c1 e8 10             	shr    eax,0x10
c00258c9:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00258cc:	89 e8                	mov    eax,ebp
c00258ce:	c1 e8 18             	shr    eax,0x18
c00258d1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00258d4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00258d8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00258db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00258df:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00258e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00258e6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00258ea:	89 d6                	mov    esi,edx
c00258ec:	31 c0                	xor    eax,eax
c00258ee:	c1 e6 07             	shl    esi,0x7
c00258f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00258f5:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00258fb:	80 e1 88             	and    cl,0x88
c00258fe:	74 0a                	je     c002590a <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025900:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025905:	74 0a                	je     c0025911 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025907:	40                   	inc    eax
c0025908:	eb eb                	jmp    c00258f5 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c002590a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002590f:	75 0a                	jne    c002591b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025911:	83 ec 0c             	sub    esp,0xc
c0025914:	68 35 dc 02 c0       	push   0xc002dc35
c0025919:	eb 56                	jmp    c0025971 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c002591b:	b8 01 00 00 00       	mov    eax,0x1
c0025920:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025924:	c1 e2 07             	shl    edx,0x7
c0025927:	d3 e0                	shl    eax,cl
c0025929:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002592d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025933:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025939:	85 c8                	test   eax,ecx
c002593b:	74 20                	je     c002595d <SATA::access(unsigned long long, int, void*, bool)+0x221>
c002593d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025943:	0f ba e1 1e          	bt     ecx,0x1e
c0025947:	73 ea                	jae    c0025933 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025949:	83 ec 0c             	sub    esp,0xc
c002594c:	68 43 dc 02 c0       	push   0xc002dc43
c0025951:	e8 43 4d ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0025956:	83 c4 10             	add    esp,0x10
c0025959:	31 c0                	xor    eax,eax
c002595b:	eb 3c                	jmp    c0025999 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002595d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025963:	0f ba e0 1e          	bt     eax,0x1e
c0025967:	73 17                	jae    c0025980 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025969:	83 ec 0c             	sub    esp,0xc
c002596c:	68 43 dc 02 c0       	push   0xc002dc43
c0025971:	e8 23 4d ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0025976:	83 c4 10             	add    esp,0x10
c0025979:	b8 01 00 00 00       	mov    eax,0x1
c002597e:	eb 19                	jmp    c0025999 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025980:	31 c0                	xor    eax,eax
c0025982:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025987:	75 10                	jne    c0025999 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025989:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002598f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025993:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025997:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025999:	83 c4 2c             	add    esp,0x2c
c002599c:	5b                   	pop    ebx
c002599d:	5e                   	pop    esi
c002599e:	5f                   	pop    edi
c002599f:	5d                   	pop    ebp
c00259a0:	c3                   	ret    
c00259a1:	90                   	nop

c00259a2 <SATA::read(unsigned long long, int, void*)>:
c00259a2:	57                   	push   edi
c00259a3:	b8 04 00 00 00       	mov    eax,0x4
c00259a8:	56                   	push   esi
c00259a9:	53                   	push   ebx
c00259aa:	83 ec 10             	sub    esp,0x10
c00259ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00259b1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00259b5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00259b8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00259bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00259c0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00259c6:	77 3b                	ja     c0025a03 <SATA::read(unsigned long long, int, void*)+0x61>
c00259c8:	b8 06 00 00 00       	mov    eax,0x6
c00259cd:	85 d2                	test   edx,edx
c00259cf:	74 32                	je     c0025a03 <SATA::read(unsigned long long, int, void*)+0x61>
c00259d1:	50                   	push   eax
c00259d2:	50                   	push   eax
c00259d3:	6a 00                	push   0x0
c00259d5:	52                   	push   edx
c00259d6:	53                   	push   ebx
c00259d7:	57                   	push   edi
c00259d8:	56                   	push   esi
c00259d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00259dd:	e8 5a fd ff ff       	call   c002573c <SATA::access(unsigned long long, int, void*, bool)>
c00259e2:	83 c4 20             	add    esp,0x20
c00259e5:	85 c0                	test   eax,eax
c00259e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00259eb:	75 11                	jne    c00259fe <SATA::read(unsigned long long, int, void*)+0x5c>
c00259ed:	01 1d f8 34 03 c0    	add    DWORD PTR ds:0xc00334f8,ebx
c00259f3:	e8 3a ac fe ff       	call   c0010632 <VgaText::updateDiskUsage()>
c00259f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00259fc:	eb 05                	jmp    c0025a03 <SATA::read(unsigned long long, int, void*)+0x61>
c00259fe:	b8 01 00 00 00       	mov    eax,0x1
c0025a03:	83 c4 10             	add    esp,0x10
c0025a06:	5b                   	pop    ebx
c0025a07:	5e                   	pop    esi
c0025a08:	5f                   	pop    edi
c0025a09:	c3                   	ret    

c0025a0a <SATA::write(unsigned long long, int, void*)>:
c0025a0a:	55                   	push   ebp
c0025a0b:	b8 04 00 00 00       	mov    eax,0x4
c0025a10:	57                   	push   edi
c0025a11:	56                   	push   esi
c0025a12:	53                   	push   ebx
c0025a13:	83 ec 1c             	sub    esp,0x1c
c0025a16:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025a1a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025a1e:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025a21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025a25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025a29:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025a2f:	77 56                	ja     c0025a87 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025a31:	b8 06 00 00 00       	mov    eax,0x6
c0025a36:	85 ff                	test   edi,edi
c0025a38:	74 4d                	je     c0025a87 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025a3a:	89 ee                	mov    esi,ebp
c0025a3c:	c1 e6 09             	shl    esi,0x9
c0025a3f:	01 fe                	add    esi,edi
c0025a41:	89 c8                	mov    eax,ecx
c0025a43:	89 da                	mov    edx,ebx
c0025a45:	83 c0 01             	add    eax,0x1
c0025a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a4c:	83 d2 00             	adc    edx,0x0
c0025a4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025a53:	50                   	push   eax
c0025a54:	50                   	push   eax
c0025a55:	6a 01                	push   0x1
c0025a57:	57                   	push   edi
c0025a58:	81 c7 00 02 00 00    	add    edi,0x200
c0025a5e:	6a 01                	push   0x1
c0025a60:	53                   	push   ebx
c0025a61:	51                   	push   ecx
c0025a62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025a66:	e8 d1 fc ff ff       	call   c002573c <SATA::access(unsigned long long, int, void*, bool)>
c0025a6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025a6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025a73:	83 c4 20             	add    esp,0x20
c0025a76:	39 f7                	cmp    edi,esi
c0025a78:	75 c7                	jne    c0025a41 <SATA::write(unsigned long long, int, void*)+0x37>
c0025a7a:	01 2d f4 34 03 c0    	add    DWORD PTR ds:0xc00334f4,ebp
c0025a80:	e8 ad ab fe ff       	call   c0010632 <VgaText::updateDiskUsage()>
c0025a85:	31 c0                	xor    eax,eax
c0025a87:	83 c4 1c             	add    esp,0x1c
c0025a8a:	5b                   	pop    ebx
c0025a8b:	5e                   	pop    esi
c0025a8c:	5f                   	pop    edi
c0025a8d:	5d                   	pop    ebp
c0025a8e:	c3                   	ret    
c0025a8f:	90                   	nop

c0025a90 <SATAPI::write(unsigned long long, int, void*)>:
c0025a90:	b8 03 00 00 00       	mov    eax,0x3
c0025a95:	c3                   	ret    

c0025a96 <SATAPI::close(int, int, void*)>:
c0025a96:	83 ec 0c             	sub    esp,0xc
c0025a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025aa3:	85 c0                	test   eax,eax
c0025aa5:	74 0c                	je     c0025ab3 <SATAPI::close(int, int, void*)+0x1d>
c0025aa7:	83 ec 0c             	sub    esp,0xc
c0025aaa:	8b 10                	mov    edx,DWORD PTR [eax]
c0025aac:	50                   	push   eax
c0025aad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025ab0:	83 c4 10             	add    esp,0x10
c0025ab3:	31 c0                	xor    eax,eax
c0025ab5:	83 c4 0c             	add    esp,0xc
c0025ab8:	c3                   	ret    
c0025ab9:	90                   	nop

c0025aba <SATAPI::SATAPI()>:
c0025aba:	83 ec 0c             	sub    esp,0xc
c0025abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac1:	83 ec 04             	sub    esp,0x4
c0025ac4:	68 00 08 00 00       	push   0x800
c0025ac9:	68 8c dc 02 c0       	push   0xc002dc8c
c0025ace:	50                   	push   eax
c0025acf:	e8 d8 e8 fe ff       	call   c00143ac <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025ad4:	83 c4 10             	add    esp,0x10
c0025ad7:	ba 38 dd 02 c0       	mov    edx,0xc002dd38
c0025adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae0:	89 10                	mov    DWORD PTR [eax],edx
c0025ae2:	90                   	nop
c0025ae3:	83 c4 0c             	add    esp,0xc
c0025ae6:	c3                   	ret    
c0025ae7:	90                   	nop

c0025ae8 <SATAPI::diskRemoved()>:
c0025ae8:	83 ec 18             	sub    esp,0x18
c0025aeb:	68 98 dc 02 c0       	push   0xc002dc98
c0025af0:	e8 38 d0 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0025af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025af9:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025b00:	83 c4 1c             	add    esp,0x1c
c0025b03:	c3                   	ret    

c0025b04 <SATAPI::diskInserted()>:
c0025b04:	53                   	push   ebx
c0025b05:	83 ec 14             	sub    esp,0x14
c0025b08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025b0c:	68 af dc 02 c0       	push   0xc002dcaf
c0025b11:	e8 17 d0 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0025b16:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025b20:	e8 ef e8 fe ff       	call   c0014414 <PhysicalDisk::startCache()>
c0025b25:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025b29:	83 c4 18             	add    esp,0x18
c0025b2c:	5b                   	pop    ebx
c0025b2d:	e9 9c 0b ff ff       	jmp    c00166ce <createPartitionsForDisk(PhysicalDisk*)>

c0025b32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025b32:	55                   	push   ebp
c0025b33:	57                   	push   edi
c0025b34:	56                   	push   esi
c0025b35:	53                   	push   ebx
c0025b36:	83 ec 34             	sub    esp,0x34
c0025b39:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025b3d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025b41:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025b45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025b4d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025b53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b5d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025b63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025b67:	c1 e0 07             	shl    eax,0x7
c0025b6a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025b6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b72:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025b7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b80:	8d 58 02             	lea    ebx,[eax+0x2]
c0025b83:	c1 e3 07             	shl    ebx,0x7
c0025b86:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025b8a:	53                   	push   ebx
c0025b8b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025b91:	e8 d0 eb ff ff       	call   c0024766 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025b96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025b9a:	83 c4 10             	add    esp,0x10
c0025b9d:	b8 01 00 00 00       	mov    eax,0x1
c0025ba2:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025ba7:	0f 84 85 01 00 00    	je     c0025d32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025bad:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025bb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025bb5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025bbb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025bc5:	c1 e1 05             	shl    ecx,0x5
c0025bc8:	01 c8                	add    eax,ecx
c0025bca:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025bcc:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025bd2:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025bd8:	89 08                	mov    DWORD PTR [eax],ecx
c0025bda:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025be0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025be6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025bec:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025bef:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025bf2:	50                   	push   eax
c0025bf3:	68 90 00 00 00       	push   0x90
c0025bf8:	6a 00                	push   0x0
c0025bfa:	53                   	push   ebx
c0025bfb:	e8 50 ab fd ff       	call   c0000750 <memset>
c0025c00:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025c04:	b9 0c 00 00 00       	mov    ecx,0xc
c0025c09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c0b:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025c11:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025c15:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025c1b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025c1f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025c23:	48                   	dec    eax
c0025c24:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025c29:	89 c1                	mov    ecx,eax
c0025c2b:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025c31:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025c36:	09 c8                	or     eax,ecx
c0025c38:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025c3e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025c41:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025c48:	66 25 00 7f          	and    ax,0x7f00
c0025c4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025c50:	66 0d 27 80          	or     ax,0x8027
c0025c54:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025c58:	66 89 03             	mov    WORD PTR [ebx],ax
c0025c5b:	89 d0                	mov    eax,edx
c0025c5d:	c1 ea 18             	shr    edx,0x18
c0025c60:	c1 e8 10             	shr    eax,0x10
c0025c63:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025c66:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025c69:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025c6d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025c70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025c74:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025c77:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025c7b:	83 c4 10             	add    esp,0x10
c0025c7e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025c82:	31 c0                	xor    eax,eax
c0025c84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025c88:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025c8e:	80 e2 88             	and    dl,0x88
c0025c91:	74 0a                	je     c0025c9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025c93:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025c98:	74 0a                	je     c0025ca4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025c9a:	40                   	inc    eax
c0025c9b:	eb eb                	jmp    c0025c88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025c9d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ca2:	75 0f                	jne    c0025cb3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025ca4:	83 ec 0c             	sub    esp,0xc
c0025ca7:	68 35 dc 02 c0       	push   0xc002dc35
c0025cac:	e8 e8 49 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0025cb1:	eb 3f                	jmp    c0025cf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025cb3:	ba 01 00 00 00       	mov    edx,0x1
c0025cb8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025cbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025cc0:	d3 e2                	shl    edx,cl
c0025cc2:	c1 e0 07             	shl    eax,0x7
c0025cc5:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025ccb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025ccf:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025cd5:	85 ca                	test   edx,ecx
c0025cd7:	74 23                	je     c0025cfc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025cd9:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025cdf:	0f ba e1 1e          	bt     ecx,0x1e
c0025ce3:	73 ea                	jae    c0025ccf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025ce5:	83 ec 0c             	sub    esp,0xc
c0025ce8:	68 c7 dc 02 c0       	push   0xc002dcc7
c0025ced:	e8 3b ce fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0025cf2:	83 c4 10             	add    esp,0x10
c0025cf5:	b8 01 00 00 00       	mov    eax,0x1
c0025cfa:	eb 36                	jmp    c0025d32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025cfc:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025d02:	0f ba e0 1e          	bt     eax,0x1e
c0025d06:	73 0a                	jae    c0025d12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025d08:	83 ec 0c             	sub    esp,0xc
c0025d0b:	68 da dc 02 c0       	push   0xc002dcda
c0025d10:	eb db                	jmp    c0025ced <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025d12:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025d17:	74 17                	je     c0025d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025d19:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025d1e:	74 10                	je     c0025d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025d20:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025d26:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025d2a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025d2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d30:	31 c0                	xor    eax,eax
c0025d32:	83 c4 2c             	add    esp,0x2c
c0025d35:	5b                   	pop    ebx
c0025d36:	5e                   	pop    esi
c0025d37:	5f                   	pop    edi
c0025d38:	5d                   	pop    ebp
c0025d39:	c3                   	ret    

c0025d3a <SATAPI::eject()>:
c0025d3a:	57                   	push   edi
c0025d3b:	b9 03 00 00 00       	mov    ecx,0x3
c0025d40:	53                   	push   ebx
c0025d41:	83 ec 14             	sub    esp,0x14
c0025d44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025d48:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025d4c:	fc                   	cld    
c0025d4d:	31 c0                	xor    eax,eax
c0025d4f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025d51:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025d56:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025d5b:	50                   	push   eax
c0025d5c:	6a 00                	push   0x0
c0025d5e:	6a 00                	push   0x0
c0025d60:	6a 00                	push   0x0
c0025d62:	6a 00                	push   0x0
c0025d64:	6a 02                	push   0x2
c0025d66:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d6a:	50                   	push   eax
c0025d6b:	53                   	push   ebx
c0025d6c:	e8 c1 fd ff ff       	call   c0025b32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d71:	83 c4 14             	add    esp,0x14
c0025d74:	53                   	push   ebx
c0025d75:	e8 6e fd ff ff       	call   c0025ae8 <SATAPI::diskRemoved()>
c0025d7a:	83 c4 24             	add    esp,0x24
c0025d7d:	31 c0                	xor    eax,eax
c0025d7f:	5b                   	pop    ebx
c0025d80:	5f                   	pop    edi
c0025d81:	c3                   	ret    

c0025d82 <SATAPI::detectMedia()>:
c0025d82:	56                   	push   esi
c0025d83:	53                   	push   ebx
c0025d84:	83 ec 28             	sub    esp,0x28
c0025d87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d8b:	6a 0c                	push   0xc
c0025d8d:	6a 00                	push   0x0
c0025d8f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025d93:	56                   	push   esi
c0025d94:	e8 b7 a9 fd ff       	call   c0000750 <memset>
c0025d99:	83 c4 0c             	add    esp,0xc
c0025d9c:	6a 00                	push   0x0
c0025d9e:	6a 00                	push   0x0
c0025da0:	6a 00                	push   0x0
c0025da2:	6a 00                	push   0x0
c0025da4:	6a 00                	push   0x0
c0025da6:	56                   	push   esi
c0025da7:	53                   	push   ebx
c0025da8:	e8 85 fd ff ff       	call   c0025b32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025dad:	83 c4 1c             	add    esp,0x1c
c0025db0:	6a 0c                	push   0xc
c0025db2:	6a 00                	push   0x0
c0025db4:	56                   	push   esi
c0025db5:	e8 96 a9 fd ff       	call   c0000750 <memset>
c0025dba:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025dbf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025dc4:	83 c4 0c             	add    esp,0xc
c0025dc7:	6a 01                	push   0x1
c0025dc9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025dcd:	50                   	push   eax
c0025dce:	6a 00                	push   0x0
c0025dd0:	6a 00                	push   0x0
c0025dd2:	6a 12                	push   0x12
c0025dd4:	56                   	push   esi
c0025dd5:	53                   	push   ebx
c0025dd6:	e8 57 fd ff ff       	call   c0025b32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ddb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025ddf:	83 c4 20             	add    esp,0x20
c0025de2:	83 e0 7f             	and    eax,0x7f
c0025de5:	3c 70                	cmp    al,0x70
c0025de7:	74 15                	je     c0025dfe <SATAPI::detectMedia()+0x7c>
c0025de9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025df0:	75 0c                	jne    c0025dfe <SATAPI::detectMedia()+0x7c>
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	53                   	push   ebx
c0025df6:	e8 09 fd ff ff       	call   c0025b04 <SATAPI::diskInserted()>
c0025dfb:	83 c4 10             	add    esp,0x10
c0025dfe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025e02:	83 e0 0f             	and    eax,0xf
c0025e05:	3c 02                	cmp    al,0x2
c0025e07:	75 1b                	jne    c0025e24 <SATAPI::detectMedia()+0xa2>
c0025e09:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025e0e:	75 2d                	jne    c0025e3d <SATAPI::detectMedia()+0xbb>
c0025e10:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e17:	74 24                	je     c0025e3d <SATAPI::detectMedia()+0xbb>
c0025e19:	83 ec 0c             	sub    esp,0xc
c0025e1c:	53                   	push   ebx
c0025e1d:	e8 c6 fc ff ff       	call   c0025ae8 <SATAPI::diskRemoved()>
c0025e22:	eb 16                	jmp    c0025e3a <SATAPI::detectMedia()+0xb8>
c0025e24:	84 c0                	test   al,al
c0025e26:	75 15                	jne    c0025e3d <SATAPI::detectMedia()+0xbb>
c0025e28:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025e2f:	75 0c                	jne    c0025e3d <SATAPI::detectMedia()+0xbb>
c0025e31:	83 ec 0c             	sub    esp,0xc
c0025e34:	53                   	push   ebx
c0025e35:	e8 ca fc ff ff       	call   c0025b04 <SATAPI::diskInserted()>
c0025e3a:	83 c4 10             	add    esp,0x10
c0025e3d:	83 c4 24             	add    esp,0x24
c0025e40:	5b                   	pop    ebx
c0025e41:	5e                   	pop    esi
c0025e42:	c3                   	ret    
c0025e43:	90                   	nop

c0025e44 <SATAPI::open(int, int, void*)>:
c0025e44:	56                   	push   esi
c0025e45:	53                   	push   ebx
c0025e46:	50                   	push   eax
c0025e47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025e4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e4f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025e59:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025e5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025e69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e6d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025e77:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025e7d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025e84:	e8 65 9d fe ff       	call   c000fbee <Phys::allocatePage()>
c0025e89:	89 c6                	mov    esi,eax
c0025e8b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025e91:	81 c6 00 10 00 00    	add    esi,0x1000
c0025e97:	e8 52 9d fe ff       	call   c000fbee <Phys::allocatePage()>
c0025e9c:	39 c6                	cmp    esi,eax
c0025e9e:	74 10                	je     c0025eb0 <SATAPI::open(int, int, void*)+0x6c>
c0025ea0:	83 ec 0c             	sub    esp,0xc
c0025ea3:	68 ef dc 02 c0       	push   0xc002dcef
c0025ea8:	e8 ec 47 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0025ead:	83 c4 10             	add    esp,0x10
c0025eb0:	83 ec 0c             	sub    esp,0xc
c0025eb3:	6a 02                	push   0x2
c0025eb5:	e8 6d b8 fe ff       	call   c0011727 <Virt::allocateKernelVirtualPages(int)>
c0025eba:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025ec0:	6a 03                	push   0x3
c0025ec2:	50                   	push   eax
c0025ec3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025ec9:	ff 35 10 f3 02 c0    	push   DWORD PTR ds:0xc002f310
c0025ecf:	e8 8a c0 fe ff       	call   c0011f5e <VAS::mapPage(unsigned long, unsigned long, int)>
c0025ed4:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025edb:	83 c4 14             	add    esp,0x14
c0025ede:	53                   	push   ebx
c0025edf:	e8 9e fe ff ff       	call   c0025d82 <SATAPI::detectMedia()>
c0025ee4:	83 c4 14             	add    esp,0x14
c0025ee7:	31 c0                	xor    eax,eax
c0025ee9:	5b                   	pop    ebx
c0025eea:	5e                   	pop    esi
c0025eeb:	c3                   	ret    

c0025eec <SATAPI::read(unsigned long long, int, void*)>:
c0025eec:	55                   	push   ebp
c0025eed:	57                   	push   edi
c0025eee:	56                   	push   esi
c0025eef:	53                   	push   ebx
c0025ef0:	83 ec 1c             	sub    esp,0x1c
c0025ef3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025ef7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025efb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025eff:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025f06:	74 19                	je     c0025f21 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025f08:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025f0d:	7e 2e                	jle    c0025f3d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025f0f:	83 ec 0c             	sub    esp,0xc
c0025f12:	68 05 dd 02 c0       	push   0xc002dd05
c0025f17:	e8 7d 47 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0025f1c:	83 c4 10             	add    esp,0x10
c0025f1f:	eb 1c                	jmp    c0025f3d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025f21:	83 ec 0c             	sub    esp,0xc
c0025f24:	55                   	push   ebp
c0025f25:	e8 58 fe ff ff       	call   c0025d82 <SATAPI::detectMedia()>
c0025f2a:	83 c4 10             	add    esp,0x10
c0025f2d:	b8 02 00 00 00       	mov    eax,0x2
c0025f32:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025f39:	75 cd                	jne    c0025f08 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025f3b:	eb 49                	jmp    c0025f86 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025f3d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025f41:	b9 03 00 00 00       	mov    ecx,0x3
c0025f46:	fc                   	cld    
c0025f47:	31 c0                	xor    eax,eax
c0025f49:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025f4b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025f50:	89 d8                	mov    eax,ebx
c0025f52:	86 e0                	xchg   al,ah
c0025f54:	c1 c0 10             	rol    eax,0x10
c0025f57:	86 e0                	xchg   al,ah
c0025f59:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025f5d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025f61:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025f65:	50                   	push   eax
c0025f66:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025f6a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025f6e:	56                   	push   esi
c0025f6f:	53                   	push   ebx
c0025f70:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025f74:	c1 e0 0b             	shl    eax,0xb
c0025f77:	50                   	push   eax
c0025f78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025f7c:	50                   	push   eax
c0025f7d:	55                   	push   ebp
c0025f7e:	e8 af fb ff ff       	call   c0025b32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f83:	83 c4 20             	add    esp,0x20
c0025f86:	83 c4 1c             	add    esp,0x1c
c0025f89:	5b                   	pop    ebx
c0025f8a:	5e                   	pop    esi
c0025f8b:	5f                   	pop    edi
c0025f8c:	5d                   	pop    ebp
c0025f8d:	c3                   	ret    

c0025f8e <AVX::open(int, int, void*)>:
c0025f8e:	83 ec 0c             	sub    esp,0xc
c0025f91:	e8 42 11 00 00       	call   c00270d8 <avxInit>
c0025f96:	b8 00 00 00 00       	mov    eax,0x0
c0025f9b:	83 c4 0c             	add    esp,0xc
c0025f9e:	c3                   	ret    
c0025f9f:	90                   	nop

c0025fa0 <AVX::close(int, int, void*)>:
c0025fa0:	83 ec 0c             	sub    esp,0xc
c0025fa3:	e8 31 11 00 00       	call   c00270d9 <avxClose>
c0025fa8:	b8 00 00 00 00       	mov    eax,0x0
c0025fad:	83 c4 0c             	add    esp,0xc
c0025fb0:	c3                   	ret    
c0025fb1:	90                   	nop

c0025fb2 <AVX::available()>:
c0025fb2:	83 ec 0c             	sub    esp,0xc
c0025fb5:	e8 16 11 00 00       	call   c00270d0 <avxDetect>
c0025fba:	85 c0                	test   eax,eax
c0025fbc:	0f 95 c0             	setne  al
c0025fbf:	83 c4 0c             	add    esp,0xc
c0025fc2:	c3                   	ret    
c0025fc3:	90                   	nop

c0025fc4 <AVX::save(void*)>:
c0025fc4:	83 ec 0c             	sub    esp,0xc
c0025fc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fcb:	83 ec 0c             	sub    esp,0xc
c0025fce:	50                   	push   eax
c0025fcf:	e8 02 11 00 00       	call   c00270d6 <avxSave>
c0025fd4:	83 c4 10             	add    esp,0x10
c0025fd7:	90                   	nop
c0025fd8:	83 c4 0c             	add    esp,0xc
c0025fdb:	c3                   	ret    

c0025fdc <AVX::load(void*)>:
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025fe3:	83 ec 0c             	sub    esp,0xc
c0025fe6:	50                   	push   eax
c0025fe7:	e8 eb 10 00 00       	call   c00270d7 <avxLoad>
c0025fec:	83 c4 10             	add    esp,0x10
c0025fef:	90                   	nop
c0025ff0:	83 c4 0c             	add    esp,0xc
c0025ff3:	c3                   	ret    

c0025ff4 <AVX::AVX()>:
c0025ff4:	83 ec 0c             	sub    esp,0xc
c0025ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffb:	83 ec 08             	sub    esp,0x8
c0025ffe:	68 68 dd 02 c0       	push   0xc002dd68
c0026003:	50                   	push   eax
c0026004:	e8 81 e4 fe ff       	call   c001448a <FPU::FPU(char const*)>
c0026009:	83 c4 10             	add    esp,0x10
c002600c:	ba 78 dd 02 c0       	mov    edx,0xc002dd78
c0026011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026015:	89 10                	mov    DWORD PTR [eax],edx
c0026017:	90                   	nop
c0026018:	83 c4 0c             	add    esp,0xc
c002601b:	c3                   	ret    

c002601c <MMX::available()>:
c002601c:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0026021:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026027:	83 e0 20             	and    eax,0x20
c002602a:	84 c0                	test   al,al
c002602c:	0f 95 c0             	setne  al
c002602f:	c3                   	ret    

c0026030 <MMX::open(int, int, void*)>:
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	e8 2a 11 00 00       	call   c0027162 <x87Init>
c0026038:	b8 00 00 00 00       	mov    eax,0x0
c002603d:	83 c4 0c             	add    esp,0xc
c0026040:	c3                   	ret    
c0026041:	90                   	nop

c0026042 <MMX::close(int, int, void*)>:
c0026042:	83 ec 0c             	sub    esp,0xc
c0026045:	e8 32 11 00 00       	call   c002717c <x87Close>
c002604a:	b8 00 00 00 00       	mov    eax,0x0
c002604f:	83 c4 0c             	add    esp,0xc
c0026052:	c3                   	ret    
c0026053:	90                   	nop

c0026054 <MMX::save(void*)>:
c0026054:	83 ec 0c             	sub    esp,0xc
c0026057:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002605b:	83 ec 0c             	sub    esp,0xc
c002605e:	50                   	push   eax
c002605f:	e8 ed 10 00 00       	call   c0027151 <x87Save>
c0026064:	83 c4 10             	add    esp,0x10
c0026067:	90                   	nop
c0026068:	83 c4 0c             	add    esp,0xc
c002606b:	c3                   	ret    

c002606c <MMX::load(void*)>:
c002606c:	83 ec 0c             	sub    esp,0xc
c002606f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026073:	83 ec 0c             	sub    esp,0xc
c0026076:	50                   	push   eax
c0026077:	e8 de 10 00 00       	call   c002715a <x87Load>
c002607c:	83 c4 10             	add    esp,0x10
c002607f:	90                   	nop
c0026080:	83 c4 0c             	add    esp,0xc
c0026083:	c3                   	ret    

c0026084 <MMX::MMX()>:
c0026084:	83 ec 0c             	sub    esp,0xc
c0026087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608b:	83 ec 08             	sub    esp,0x8
c002608e:	68 a8 dd 02 c0       	push   0xc002dda8
c0026093:	50                   	push   eax
c0026094:	e8 f1 e3 fe ff       	call   c001448a <FPU::FPU(char const*)>
c0026099:	83 c4 10             	add    esp,0x10
c002609c:	ba b8 dd 02 c0       	mov    edx,0xc002ddb8
c00260a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a5:	89 10                	mov    DWORD PTR [eax],edx
c00260a7:	90                   	nop
c00260a8:	83 c4 0c             	add    esp,0xc
c00260ab:	c3                   	ret    

c00260ac <SSE::open(int, int, void*)>:
c00260ac:	83 ec 0c             	sub    esp,0xc
c00260af:	e8 60 10 00 00       	call   c0027114 <sseInit>
c00260b4:	b8 00 00 00 00       	mov    eax,0x0
c00260b9:	83 c4 0c             	add    esp,0xc
c00260bc:	c3                   	ret    
c00260bd:	90                   	nop

c00260be <SSE::close(int, int, void*)>:
c00260be:	83 ec 0c             	sub    esp,0xc
c00260c1:	e8 5e 10 00 00       	call   c0027124 <sseClose>
c00260c6:	b8 00 00 00 00       	mov    eax,0x0
c00260cb:	83 c4 0c             	add    esp,0xc
c00260ce:	c3                   	ret    
c00260cf:	90                   	nop

c00260d0 <SSE::available()>:
c00260d0:	83 ec 1c             	sub    esp,0x1c
c00260d3:	e8 18 10 00 00       	call   c00270f0 <absolutelyNoChanceInHell>
c00260d8:	85 c0                	test   eax,eax
c00260da:	0f 95 c0             	setne  al
c00260dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00260e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00260e5:	83 c4 1c             	add    esp,0x1c
c00260e8:	c3                   	ret    
c00260e9:	90                   	nop

c00260ea <SSE::save(void*)>:
c00260ea:	83 ec 0c             	sub    esp,0xc
c00260ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260f1:	83 ec 0c             	sub    esp,0xc
c00260f4:	50                   	push   eax
c00260f5:	e8 0e 10 00 00       	call   c0027108 <sseSave>
c00260fa:	83 c4 10             	add    esp,0x10
c00260fd:	90                   	nop
c00260fe:	83 c4 0c             	add    esp,0xc
c0026101:	c3                   	ret    

c0026102 <SSE::load(void*)>:
c0026102:	83 ec 0c             	sub    esp,0xc
c0026105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026109:	83 ec 0c             	sub    esp,0xc
c002610c:	50                   	push   eax
c002610d:	e8 fc 0f 00 00       	call   c002710e <sseLoad>
c0026112:	83 c4 10             	add    esp,0x10
c0026115:	90                   	nop
c0026116:	83 c4 0c             	add    esp,0xc
c0026119:	c3                   	ret    

c002611a <SSE::SSE()>:
c002611a:	83 ec 0c             	sub    esp,0xc
c002611d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026121:	83 ec 08             	sub    esp,0x8
c0026124:	68 e8 dd 02 c0       	push   0xc002dde8
c0026129:	50                   	push   eax
c002612a:	e8 5b e3 fe ff       	call   c001448a <FPU::FPU(char const*)>
c002612f:	83 c4 10             	add    esp,0x10
c0026132:	ba f8 dd 02 c0       	mov    edx,0xc002ddf8
c0026137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002613b:	89 10                	mov    DWORD PTR [eax],edx
c002613d:	90                   	nop
c002613e:	83 c4 0c             	add    esp,0xc
c0026141:	c3                   	ret    

c0026142 <x87::open(int, int, void*)>:
c0026142:	83 ec 0c             	sub    esp,0xc
c0026145:	e8 18 10 00 00       	call   c0027162 <x87Init>
c002614a:	b8 00 00 00 00       	mov    eax,0x0
c002614f:	83 c4 0c             	add    esp,0xc
c0026152:	c3                   	ret    
c0026153:	90                   	nop

c0026154 <x87::close(int, int, void*)>:
c0026154:	83 ec 0c             	sub    esp,0xc
c0026157:	e8 20 10 00 00       	call   c002717c <x87Close>
c002615c:	b8 00 00 00 00       	mov    eax,0x0
c0026161:	83 c4 0c             	add    esp,0xc
c0026164:	c3                   	ret    
c0026165:	90                   	nop

c0026166 <x87::available()>:
c0026166:	83 ec 0c             	sub    esp,0xc
c0026169:	e8 c8 0f 00 00       	call   c0027136 <x87Detect>
c002616e:	85 c0                	test   eax,eax
c0026170:	0f 95 c0             	setne  al
c0026173:	83 c4 0c             	add    esp,0xc
c0026176:	c3                   	ret    
c0026177:	90                   	nop

c0026178 <x87::save(void*)>:
c0026178:	83 ec 0c             	sub    esp,0xc
c002617b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002617f:	83 ec 0c             	sub    esp,0xc
c0026182:	50                   	push   eax
c0026183:	e8 c9 0f 00 00       	call   c0027151 <x87Save>
c0026188:	83 c4 10             	add    esp,0x10
c002618b:	90                   	nop
c002618c:	83 c4 0c             	add    esp,0xc
c002618f:	c3                   	ret    

c0026190 <x87::load(void*)>:
c0026190:	83 ec 0c             	sub    esp,0xc
c0026193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026197:	83 ec 0c             	sub    esp,0xc
c002619a:	50                   	push   eax
c002619b:	e8 ba 0f 00 00       	call   c002715a <x87Load>
c00261a0:	83 c4 10             	add    esp,0x10
c00261a3:	90                   	nop
c00261a4:	83 c4 0c             	add    esp,0xc
c00261a7:	c3                   	ret    

c00261a8 <x87::x87()>:
c00261a8:	83 ec 0c             	sub    esp,0xc
c00261ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261af:	83 ec 08             	sub    esp,0x8
c00261b2:	68 28 de 02 c0       	push   0xc002de28
c00261b7:	50                   	push   eax
c00261b8:	e8 cd e2 fe ff       	call   c001448a <FPU::FPU(char const*)>
c00261bd:	83 c4 10             	add    esp,0x10
c00261c0:	ba 38 de 02 c0       	mov    edx,0xc002de38
c00261c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c9:	89 10                	mov    DWORD PTR [eax],edx
c00261cb:	90                   	nop
c00261cc:	83 c4 0c             	add    esp,0xc
c00261cf:	c3                   	ret    

c00261d0 <APIC::disable()>:
c00261d0:	90                   	nop
c00261d1:	c3                   	ret    

c00261d2 <APIC::close(int, int, void*)>:
c00261d2:	55                   	push   ebp
c00261d3:	89 e5                	mov    ebp,esp
c00261d5:	83 ec 08             	sub    esp,0x8
c00261d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261db:	8b 00                	mov    eax,DWORD PTR [eax]
c00261dd:	83 c0 3c             	add    eax,0x3c
c00261e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00261e2:	83 ec 0c             	sub    esp,0xc
c00261e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e8:	ff d0                	call   eax
c00261ea:	83 c4 10             	add    esp,0x10
c00261ed:	b8 00 00 00 00       	mov    eax,0x0
c00261f2:	c9                   	leave  
c00261f3:	c3                   	ret    

c00261f4 <IOAPIC::close(int, int, void*)>:
c00261f4:	b8 00 00 00 00       	mov    eax,0x0
c00261f9:	c3                   	ret    

c00261fa <APIC::io_wait()>:
c00261fa:	eb 00                	jmp    c00261fc <APIC::io_wait()+0x2>
c00261fc:	eb 00                	jmp    c00261fe <APIC::io_wait()+0x4>
c00261fe:	90                   	nop
c00261ff:	c3                   	ret    

c0026200 <APIC::getBase()>:
c0026200:	55                   	push   ebp
c0026201:	89 e5                	mov    ebp,esp
c0026203:	83 ec 18             	sub    esp,0x18
c0026206:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c002620b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026211:	83 e0 08             	and    eax,0x8
c0026214:	84 c0                	test   al,al
c0026216:	75 07                	jne    c002621f <APIC::getBase()+0x1f>
c0026218:	b8 00 00 00 00       	mov    eax,0x0
c002621d:	eb 21                	jmp    c0026240 <APIC::getBase()+0x40>
c002621f:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0026224:	83 ec 08             	sub    esp,0x8
c0026227:	6a 1b                	push   0x1b
c0026229:	50                   	push   eax
c002622a:	e8 03 8c fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c002622f:	83 c4 10             	add    esp,0x10
c0026232:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026235:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026238:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002623b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0026240:	c9                   	leave  
c0026241:	c3                   	ret    

c0026242 <APIC::eoi(unsigned char)>:
c0026242:	55                   	push   ebp
c0026243:	89 e5                	mov    ebp,esp
c0026245:	83 ec 28             	sub    esp,0x28
c0026248:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002624b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002624e:	83 ec 0c             	sub    esp,0xc
c0026251:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026254:	e8 a7 ff ff ff       	call   c0026200 <APIC::getBase()>
c0026259:	83 c4 10             	add    esp,0x10
c002625c:	05 b0 00 00 00       	add    eax,0xb0
c0026261:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026264:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026267:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002626d:	90                   	nop
c002626e:	c9                   	leave  
c002626f:	c3                   	ret    

c0026270 <APIC::open(int, int, void*)>:
c0026270:	55                   	push   ebp
c0026271:	89 e5                	mov    ebp,esp
c0026273:	57                   	push   edi
c0026274:	56                   	push   esi
c0026275:	53                   	push   ebx
c0026276:	83 ec 2c             	sub    esp,0x2c
c0026279:	83 ec 0c             	sub    esp,0xc
c002627c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002627f:	e8 7c ff ff ff       	call   c0026200 <APIC::getBase()>
c0026284:	83 c4 10             	add    esp,0x10
c0026287:	89 c2                	mov    edx,eax
c0026289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002628c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026292:	0f b6 f8             	movzx  edi,al
c0026295:	89 d0                	mov    eax,edx
c0026297:	ba 00 00 00 00       	mov    edx,0x0
c002629c:	89 c1                	mov    ecx,eax
c002629e:	80 e5 ff             	and    ch,0xff
c00262a1:	89 cb                	mov    ebx,ecx
c00262a3:	0f b6 f2             	movzx  esi,dl
c00262a6:	89 d8                	mov    eax,ebx
c00262a8:	89 f2                	mov    edx,esi
c00262aa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262ad:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262b0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262b4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262b8:	83 e0 00             	and    eax,0x0
c00262bb:	09 d0                	or     eax,edx
c00262bd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262ca:	8d 50 01             	lea    edx,[eax+0x1]
c00262cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262d6:	0f b6 d0             	movzx  edx,al
c00262d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262dc:	83 c2 08             	add    edx,0x8
c00262df:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262e3:	0f b6 c9             	movzx  ecx,cl
c00262e6:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262ec:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262f0:	83 ec 0c             	sub    esp,0xc
c00262f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f6:	e8 05 ff ff ff       	call   c0026200 <APIC::getBase()>
c00262fb:	83 c4 10             	add    esp,0x10
c00262fe:	05 f0 00 00 00       	add    eax,0xf0
c0026303:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026306:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026309:	8b 00                	mov    eax,DWORD PTR [eax]
c002630b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002630e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026315:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002631c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002631f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026322:	89 10                	mov    DWORD PTR [eax],edx
c0026324:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002632b:	a1 70 1a 03 c0       	mov    eax,ds:0xc0031a70
c0026330:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026333:	7d 7c                	jge    c00263b1 <APIC::open(int, int, void*)+0x141>
c0026335:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026338:	8b 04 85 80 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce580]
c002633f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026342:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026345:	8b 04 85 80 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce580]
c002634c:	c1 e8 08             	shr    eax,0x8
c002634f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026353:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026356:	8b 04 85 80 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce580]
c002635d:	c1 e8 18             	shr    eax,0x18
c0026360:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026363:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026367:	75 40                	jne    c00263a9 <APIC::open(int, int, void*)+0x139>
c0026369:	83 ec 0c             	sub    esp,0xc
c002636c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002636f:	e8 8c fe ff ff       	call   c0026200 <APIC::getBase()>
c0026374:	83 c4 10             	add    esp,0x10
c0026377:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002637b:	75 07                	jne    c0026384 <APIC::open(int, int, void*)+0x114>
c002637d:	ba 60 03 00 00       	mov    edx,0x360
c0026382:	eb 05                	jmp    c0026389 <APIC::open(int, int, void*)+0x119>
c0026384:	ba 50 03 00 00       	mov    edx,0x350
c0026389:	01 d0                	add    eax,edx
c002638b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002638e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026391:	8b 00                	mov    eax,DWORD PTR [eax]
c0026393:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026396:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002639d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00263a1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00263a4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00263a7:	89 10                	mov    DWORD PTR [eax],edx
c00263a9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00263ac:	e9 7a ff ff ff       	jmp    c002632b <APIC::open(int, int, void*)+0xbb>
c00263b1:	b8 00 00 00 00       	mov    eax,0x0
c00263b6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263b9:	5b                   	pop    ebx
c00263ba:	5e                   	pop    esi
c00263bb:	5f                   	pop    edi
c00263bc:	5d                   	pop    ebp
c00263bd:	c3                   	ret    

c00263be <IOAPIC::IOAPIC()>:
c00263be:	83 ec 0c             	sub    esp,0xc
c00263c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263c5:	83 ec 08             	sub    esp,0x8
c00263c8:	68 68 de 02 c0       	push   0xc002de68
c00263cd:	50                   	push   eax
c00263ce:	e8 97 dd fe ff       	call   c001416a <Device::Device(char const*)>
c00263d3:	83 c4 10             	add    esp,0x10
c00263d6:	ba 90 df 02 c0       	mov    edx,0xc002df90
c00263db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263df:	89 10                	mov    DWORD PTR [eax],edx
c00263e1:	90                   	nop
c00263e2:	83 c4 0c             	add    esp,0xc
c00263e5:	c3                   	ret    

c00263e6 <APIC::APIC()>:
c00263e6:	53                   	push   ebx
c00263e7:	83 ec 18             	sub    esp,0x18
c00263ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00263ee:	83 ec 08             	sub    esp,0x8
c00263f1:	68 70 de 02 c0       	push   0xc002de70
c00263f6:	50                   	push   eax
c00263f7:	e8 e8 e4 fe ff       	call   c00148e4 <InterruptController::InterruptController(char const*)>
c00263fc:	83 c4 10             	add    esp,0x10
c00263ff:	ba 48 df 02 c0       	mov    edx,0xc002df48
c0026404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026408:	89 10                	mov    DWORD PTR [eax],edx
c002640a:	a0 40 35 03 c0       	mov    al,ds:0xc0033540
c002640f:	83 f0 01             	xor    eax,0x1
c0026412:	84 c0                	test   al,al
c0026414:	0f 84 a1 00 00 00    	je     c00264bb <APIC::APIC()+0xd5>
c002641a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002641f:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c0026424:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026428:	0f 83 86 00 00 00    	jae    c00264b4 <APIC::APIC()+0xce>
c002642e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026436:	83 ec 0c             	sub    esp,0xc
c0026439:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002643d:	e8 4a 94 fe ff       	call   c000f88c <malloc>
c0026442:	83 c4 10             	add    esp,0x10
c0026445:	89 c3                	mov    ebx,eax
c0026447:	83 ec 0c             	sub    esp,0xc
c002644a:	53                   	push   ebx
c002644b:	e8 6e ff ff ff       	call   c00263be <IOAPIC::IOAPIC()>
c0026450:	83 c4 10             	add    esp,0x10
c0026453:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026457:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002645c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026460:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c0026467:	a1 00 35 03 c0       	mov    eax,ds:0xc0033500
c002646c:	40                   	inc    eax
c002646d:	a3 00 35 03 c0       	mov    ds:0xc0033500,eax
c0026472:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0026477:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002647d:	83 ec 08             	sub    esp,0x8
c0026480:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026484:	50                   	push   eax
c0026485:	e8 dc da fe ff       	call   c0013f66 <Device::addChild(Device*)>
c002648a:	83 c4 10             	add    esp,0x10
c002648d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026491:	8b 00                	mov    eax,DWORD PTR [eax]
c0026493:	83 c0 08             	add    eax,0x8
c0026496:	8b 00                	mov    eax,DWORD PTR [eax]
c0026498:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002649d:	6a 00                	push   0x0
c002649f:	6a 00                	push   0x0
c00264a1:	52                   	push   edx
c00264a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00264a6:	ff d0                	call   eax
c00264a8:	83 c4 10             	add    esp,0x10
c00264ab:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00264af:	e9 6b ff ff ff       	jmp    c002641f <APIC::APIC()+0x39>
c00264b4:	c6 05 40 35 03 c0 01 	mov    BYTE PTR ds:0xc0033540,0x1
c00264bb:	90                   	nop
c00264bc:	83 c4 18             	add    esp,0x18
c00264bf:	5b                   	pop    ebx
c00264c0:	c3                   	ret    
c00264c1:	90                   	nop

c00264c2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00264c2:	55                   	push   ebp
c00264c3:	89 e5                	mov    ebp,esp
c00264c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00264ce:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264d1:	72 1d                	jb     c00264f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264d6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00264dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264df:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00264e5:	01 d0                	add    eax,edx
c00264e7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00264ea:	73 04                	jae    c00264f0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00264ec:	b0 01                	mov    al,0x1
c00264ee:	eb 02                	jmp    c00264f2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00264f0:	b0 00                	mov    al,0x0
c00264f2:	5d                   	pop    ebp
c00264f3:	c3                   	ret    

c00264f4 <IOAPIC::read(int)>:
c00264f4:	55                   	push   ebp
c00264f5:	89 e5                	mov    ebp,esp
c00264f7:	83 ec 10             	sub    esp,0x10
c00264fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026503:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026506:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026509:	0f b6 d0             	movzx  edx,al
c002650c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002650f:	89 10                	mov    DWORD PTR [eax],edx
c0026511:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026514:	83 c0 10             	add    eax,0x10
c0026517:	8b 00                	mov    eax,DWORD PTR [eax]
c0026519:	c9                   	leave  
c002651a:	c3                   	ret    
c002651b:	90                   	nop

c002651c <IOAPIC::open(int, int, void*)>:
c002651c:	55                   	push   ebp
c002651d:	89 e5                	mov    ebp,esp
c002651f:	57                   	push   edi
c0026520:	56                   	push   esi
c0026521:	53                   	push   ebx
c0026522:	83 ec 0c             	sub    esp,0xc
c0026525:	83 ec 0c             	sub    esp,0xc
c0026528:	68 9b de 02 c0       	push   0xc002de9b
c002652d:	e8 fb c5 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c0026532:	83 c4 10             	add    esp,0x10
c0026535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026538:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002653b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026544:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002654a:	8b 14 85 60 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce4a0]
c0026551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026554:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002655a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002655d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026563:	8b 14 85 e0 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce420]
c002656a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002656d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026576:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002657c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002657f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026585:	0f b6 f8             	movzx  edi,al
c0026588:	89 d0                	mov    eax,edx
c002658a:	ba 00 00 00 00       	mov    edx,0x0
c002658f:	89 c1                	mov    ecx,eax
c0026591:	80 e5 ff             	and    ch,0xff
c0026594:	89 cb                	mov    ebx,ecx
c0026596:	0f b6 f2             	movzx  esi,dl
c0026599:	89 d8                	mov    eax,ebx
c002659b:	89 f2                	mov    edx,esi
c002659d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00265a0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00265a3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00265a7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00265ab:	83 e0 00             	and    eax,0x0
c00265ae:	09 d0                	or     eax,edx
c00265b0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00265b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00265bd:	8d 50 01             	lea    edx,[eax+0x1]
c00265c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00265c3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00265c9:	0f b6 d0             	movzx  edx,al
c00265cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265cf:	83 c2 08             	add    edx,0x8
c00265d2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00265d6:	0f b6 c9             	movzx  ecx,cl
c00265d9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00265df:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00265e3:	83 ec 08             	sub    esp,0x8
c00265e6:	6a 01                	push   0x1
c00265e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265eb:	e8 04 ff ff ff       	call   c00264f4 <IOAPIC::read(int)>
c00265f0:	83 c4 10             	add    esp,0x10
c00265f3:	c1 f8 10             	sar    eax,0x10
c00265f6:	0f b6 c0             	movzx  eax,al
c00265f9:	8d 50 01             	lea    edx,[eax+0x1]
c00265fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265ff:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026605:	b8 00 00 00 00       	mov    eax,0x0
c002660a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002660d:	5b                   	pop    ebx
c002660e:	5e                   	pop    esi
c002660f:	5f                   	pop    edi
c0026610:	5d                   	pop    ebp
c0026611:	c3                   	ret    

c0026612 <IOAPIC::write(int, int)>:
c0026612:	55                   	push   ebp
c0026613:	89 e5                	mov    ebp,esp
c0026615:	83 ec 10             	sub    esp,0x10
c0026618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002661b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026621:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026624:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026627:	0f b6 d0             	movzx  edx,al
c002662a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002662d:	89 10                	mov    DWORD PTR [eax],edx
c002662f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026632:	8d 50 10             	lea    edx,[eax+0x10]
c0026635:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026638:	89 02                	mov    DWORD PTR [edx],eax
c002663a:	90                   	nop
c002663b:	c9                   	leave  
c002663c:	c3                   	ret    
c002663d:	90                   	nop

c002663e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002663e:	55                   	push   ebp
c002663f:	89 e5                	mov    ebp,esp
c0026641:	53                   	push   ebx
c0026642:	83 ec 2c             	sub    esp,0x2c
c0026645:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026648:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002664b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002664e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026651:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026654:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026657:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002665a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002665d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026660:	88 d8                	mov    al,bl
c0026662:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026665:	88 c8                	mov    al,cl
c0026667:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002666a:	88 d0                	mov    al,dl
c002666c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002666f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026673:	83 c0 08             	add    eax,0x8
c0026676:	01 c0                	add    eax,eax
c0026678:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002667b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002667f:	83 c0 08             	add    eax,0x8
c0026682:	01 c0                	add    eax,eax
c0026684:	40                   	inc    eax
c0026685:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026688:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002668b:	50                   	push   eax
c002668c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002668f:	e8 60 fe ff ff       	call   c00264f4 <IOAPIC::read(int)>
c0026694:	83 c4 08             	add    esp,0x8
c0026697:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002669a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00266a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00266a4:	c1 e0 18             	shl    eax,0x18
c00266a7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00266aa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00266ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266b0:	52                   	push   edx
c00266b1:	50                   	push   eax
c00266b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266b5:	e8 58 ff ff ff       	call   c0026612 <IOAPIC::write(int, int)>
c00266ba:	83 c4 0c             	add    esp,0xc
c00266bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00266c0:	50                   	push   eax
c00266c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266c4:	e8 2b fe ff ff       	call   c00264f4 <IOAPIC::read(int)>
c00266c9:	83 c4 08             	add    esp,0x8
c00266cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00266cf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00266d6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00266dd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00266e4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00266e8:	74 09                	je     c00266f3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00266ea:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00266f1:	eb 07                	jmp    c00266fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00266f3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00266fa:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00266fe:	74 09                	je     c0026709 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026700:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026707:	eb 07                	jmp    c0026710 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026709:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026710:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026717:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002671b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002671e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026721:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026724:	52                   	push   edx
c0026725:	50                   	push   eax
c0026726:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026729:	e8 e4 fe ff ff       	call   c0026612 <IOAPIC::write(int, int)>
c002672e:	83 c4 0c             	add    esp,0xc
c0026731:	90                   	nop
c0026732:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026735:	c9                   	leave  
c0026736:	c3                   	ret    
c0026737:	90                   	nop

c0026738 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026738:	55                   	push   ebp
c0026739:	89 e5                	mov    ebp,esp
c002673b:	57                   	push   edi
c002673c:	56                   	push   esi
c002673d:	53                   	push   ebx
c002673e:	83 ec 2c             	sub    esp,0x2c
c0026741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026744:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026747:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002674b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002674f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026753:	74 5a                	je     c00267af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026755:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026759:	7f 44                	jg     c002679f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002675b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002675e:	05 e0 e3 02 c0       	add    eax,0xc002e3e0
c0026763:	8a 00                	mov    al,BYTE PTR [eax]
c0026765:	0f b6 c0             	movzx  eax,al
c0026768:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002676b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002676e:	66 8b 84 00 00 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce500]
c0026776:	0f b7 c0             	movzx  eax,ax
c0026779:	83 e0 02             	and    eax,0x2
c002677c:	85 c0                	test   eax,eax
c002677e:	74 04                	je     c0026784 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026780:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026784:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026787:	66 8b 84 00 00 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce500]
c002678f:	0f b7 c0             	movzx  eax,ax
c0026792:	83 e0 08             	and    eax,0x8
c0026795:	85 c0                	test   eax,eax
c0026797:	74 16                	je     c00267af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026799:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002679d:	eb 10                	jmp    c00267af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002679f:	83 ec 0c             	sub    esp,0xc
c00267a2:	68 ac de 02 c0       	push   0xc002deac
c00267a7:	e8 ed 3e ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00267ac:	83 c4 10             	add    esp,0x10
c00267af:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00267b3:	a1 00 35 03 c0       	mov    eax,ds:0xc0033500
c00267b8:	83 ec 08             	sub    esp,0x8
c00267bb:	50                   	push   eax
c00267bc:	68 e4 de 02 c0       	push   0xc002dee4
c00267c1:	e8 67 c3 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00267c6:	83 c4 10             	add    esp,0x10
c00267c9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00267d0:	a1 00 35 03 c0       	mov    eax,ds:0xc0033500
c00267d5:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00267d8:	7d 67                	jge    c0026841 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00267da:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267dd:	8b 04 85 20 35 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccae0]
c00267e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00267e7:	83 ec 08             	sub    esp,0x8
c00267ea:	52                   	push   edx
c00267eb:	50                   	push   eax
c00267ec:	e8 d1 fc ff ff       	call   c00264c2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00267f1:	83 c4 10             	add    esp,0x10
c00267f4:	84 c0                	test   al,al
c00267f6:	74 44                	je     c002683c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00267f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00267fb:	8b 1c 85 20 35 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccae0]
c0026802:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026806:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026809:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002680d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026810:	83 c0 20             	add    eax,0x20
c0026813:	0f b6 f0             	movzx  esi,al
c0026816:	b8 00 00 00 00       	mov    eax,0x0
c002681b:	99                   	cdq    
c002681c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002681f:	0f b6 c9             	movzx  ecx,cl
c0026822:	83 ec 04             	sub    esp,0x4
c0026825:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026828:	57                   	push   edi
c0026829:	56                   	push   esi
c002682a:	52                   	push   edx
c002682b:	50                   	push   eax
c002682c:	51                   	push   ecx
c002682d:	53                   	push   ebx
c002682e:	e8 0b fe ff ff       	call   c002663e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026833:	83 c4 20             	add    esp,0x20
c0026836:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002683a:	eb 05                	jmp    c0026841 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002683c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002683f:	eb 8f                	jmp    c00267d0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026841:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026844:	83 f0 01             	xor    eax,0x1
c0026847:	84 c0                	test   al,al
c0026849:	74 10                	je     c002685b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002684b:	83 ec 0c             	sub    esp,0xc
c002684e:	68 fb de 02 c0       	push   0xc002defb
c0026853:	e8 41 3e ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0026858:	83 c4 10             	add    esp,0x10
c002685b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002685f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026866:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002686a:	7f 65                	jg     c00268d1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002686c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002686f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026872:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026879:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002687c:	01 ca                	add    edx,ecx
c002687e:	83 c2 54             	add    edx,0x54
c0026881:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026885:	85 c0                	test   eax,eax
c0026887:	75 43                	jne    c00268cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002688c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002688f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026896:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026899:	01 ca                	add    edx,ecx
c002689b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002689e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00268a1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00268a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00268a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00268ab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00268b2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00268b5:	01 ca                	add    edx,ecx
c00268b7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00268bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00268c0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00268c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268c7:	83 e8 20             	sub    eax,0x20
c00268ca:	eb 1a                	jmp    c00268e6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00268cc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00268cf:	eb 95                	jmp    c0026866 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00268d1:	83 ec 0c             	sub    esp,0xc
c00268d4:	68 08 df 02 c0       	push   0xc002df08
c00268d9:	e8 bb 3d ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00268de:	83 c4 10             	add    esp,0x10
c00268e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00268e6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00268e9:	5b                   	pop    ebx
c00268ea:	5e                   	pop    esi
c00268eb:	5f                   	pop    edi
c00268ec:	5d                   	pop    ebp
c00268ed:	c3                   	ret    

c00268ee <PIC::disable()>:
c00268ee:	55                   	push   ebp
c00268ef:	89 e5                	mov    ebp,esp
c00268f1:	83 ec 10             	sub    esp,0x10
c00268f4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00268fa:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00268fe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026901:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026905:	ee                   	out    dx,al
c0026906:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002690c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026910:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026913:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026917:	ee                   	out    dx,al
c0026918:	90                   	nop
c0026919:	c9                   	leave  
c002691a:	c3                   	ret    
c002691b:	90                   	nop

c002691c <PIC::close(int, int, void*)>:
c002691c:	55                   	push   ebp
c002691d:	89 e5                	mov    ebp,esp
c002691f:	83 ec 08             	sub    esp,0x8
c0026922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026925:	8b 00                	mov    eax,DWORD PTR [eax]
c0026927:	83 c0 3c             	add    eax,0x3c
c002692a:	8b 00                	mov    eax,DWORD PTR [eax]
c002692c:	83 ec 0c             	sub    esp,0xc
c002692f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026932:	ff d0                	call   eax
c0026934:	83 c4 10             	add    esp,0x10
c0026937:	b8 00 00 00 00       	mov    eax,0x0
c002693c:	c9                   	leave  
c002693d:	c3                   	ret    

c002693e <PIC::PIC()>:
c002693e:	83 ec 0c             	sub    esp,0xc
c0026941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026945:	83 ec 08             	sub    esp,0x8
c0026948:	68 b4 df 02 c0       	push   0xc002dfb4
c002694d:	50                   	push   eax
c002694e:	e8 91 df fe ff       	call   c00148e4 <InterruptController::InterruptController(char const*)>
c0026953:	83 c4 10             	add    esp,0x10
c0026956:	ba e0 df 02 c0       	mov    edx,0xc002dfe0
c002695b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002695f:	89 10                	mov    DWORD PTR [eax],edx
c0026961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026965:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002696b:	0f b6 d0             	movzx  edx,al
c002696e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026972:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002697d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026983:	0f b6 d0             	movzx  edx,al
c0026986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002698a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002698f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026993:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026999:	8d 50 01             	lea    edx,[eax+0x1]
c002699c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269a6:	0f b6 d0             	movzx  edx,al
c00269a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00269b1:	83 e1 3f             	and    ecx,0x3f
c00269b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00269b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269c2:	0f b6 d0             	movzx  edx,al
c00269c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00269d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269da:	0f b6 d0             	movzx  edx,al
c00269dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269e1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00269e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00269f0:	8d 50 01             	lea    edx,[eax+0x1]
c00269f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00269f7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00269fd:	0f b6 d0             	movzx  edx,al
c0026a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026a08:	83 e1 3f             	and    ecx,0x3f
c0026a0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026a0f:	90                   	nop
c0026a10:	83 c4 0c             	add    esp,0xc
c0026a13:	c3                   	ret    

c0026a14 <PIC::ioWait()>:
c0026a14:	eb 00                	jmp    c0026a16 <PIC::ioWait()+0x2>
c0026a16:	eb 00                	jmp    c0026a18 <PIC::ioWait()+0x4>
c0026a18:	90                   	nop
c0026a19:	c3                   	ret    

c0026a1a <PIC::getIRQReg(int)>:
c0026a1a:	55                   	push   ebp
c0026a1b:	89 e5                	mov    ebp,esp
c0026a1d:	83 ec 10             	sub    esp,0x10
c0026a20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a23:	0f b6 c0             	movzx  eax,al
c0026a26:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026a2c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026a2f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a32:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a36:	ee                   	out    dx,al
c0026a37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a3a:	0f b6 c0             	movzx  eax,al
c0026a3d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026a43:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026a46:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a49:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a4d:	ee                   	out    dx,al
c0026a4e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026a54:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026a58:	89 c2                	mov    edx,eax
c0026a5a:	ec                   	in     al,dx
c0026a5b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026a5e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026a61:	0f b6 c0             	movzx  eax,al
c0026a64:	c1 e0 08             	shl    eax,0x8
c0026a67:	89 c1                	mov    ecx,eax
c0026a69:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026a6f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026a73:	89 c2                	mov    edx,eax
c0026a75:	ec                   	in     al,dx
c0026a76:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026a79:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026a7c:	0f b6 c0             	movzx  eax,al
c0026a7f:	09 c8                	or     eax,ecx
c0026a81:	c9                   	leave  
c0026a82:	c3                   	ret    
c0026a83:	90                   	nop

c0026a84 <PIC::eoi(unsigned char)>:
c0026a84:	55                   	push   ebp
c0026a85:	89 e5                	mov    ebp,esp
c0026a87:	83 ec 14             	sub    esp,0x14
c0026a8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a8d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026a90:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026a94:	75 1e                	jne    c0026ab4 <PIC::eoi(unsigned char)+0x30>
c0026a96:	6a 0b                	push   0xb
c0026a98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a9b:	e8 7a ff ff ff       	call   c0026a1a <PIC::getIRQReg(int)>
c0026aa0:	83 c4 08             	add    esp,0x8
c0026aa3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026aa7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026aab:	25 80 00 00 00       	and    eax,0x80
c0026ab0:	85 c0                	test   eax,eax
c0026ab2:	74 5f                	je     c0026b13 <PIC::eoi(unsigned char)+0x8f>
c0026ab4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026ab8:	75 2d                	jne    c0026ae7 <PIC::eoi(unsigned char)+0x63>
c0026aba:	6a 0b                	push   0xb
c0026abc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026abf:	e8 56 ff ff ff       	call   c0026a1a <PIC::getIRQReg(int)>
c0026ac4:	83 c4 08             	add    esp,0x8
c0026ac7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026acb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026ace:	66 85 c0             	test   ax,ax
c0026ad1:	78 14                	js     c0026ae7 <PIC::eoi(unsigned char)+0x63>
c0026ad3:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026ad9:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026add:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026ae0:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026ae4:	ee                   	out    dx,al
c0026ae5:	eb 2d                	jmp    c0026b14 <PIC::eoi(unsigned char)+0x90>
c0026ae7:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026aeb:	76 12                	jbe    c0026aff <PIC::eoi(unsigned char)+0x7b>
c0026aed:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026af3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026af7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026afa:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026afe:	ee                   	out    dx,al
c0026aff:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026b05:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026b09:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026b0c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026b10:	ee                   	out    dx,al
c0026b11:	eb 01                	jmp    c0026b14 <PIC::eoi(unsigned char)+0x90>
c0026b13:	90                   	nop
c0026b14:	c9                   	leave  
c0026b15:	c3                   	ret    

c0026b16 <PIC::remap()>:
c0026b16:	55                   	push   ebp
c0026b17:	89 e5                	mov    ebp,esp
c0026b19:	83 ec 48             	sub    esp,0x48
c0026b1c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026b23:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026b2a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026b30:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026b33:	89 c2                	mov    edx,eax
c0026b35:	ec                   	in     al,dx
c0026b36:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026b39:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026b3c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026b3f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026b45:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026b48:	89 c2                	mov    edx,eax
c0026b4a:	ec                   	in     al,dx
c0026b4b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026b4e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026b51:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026b54:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026b5a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026b5e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026b61:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026b64:	ee                   	out    dx,al
c0026b65:	83 ec 0c             	sub    esp,0xc
c0026b68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b6b:	e8 a4 fe ff ff       	call   c0026a14 <PIC::ioWait()>
c0026b70:	83 c4 10             	add    esp,0x10
c0026b73:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026b79:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026b7d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026b80:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026b83:	ee                   	out    dx,al
c0026b84:	83 ec 0c             	sub    esp,0xc
c0026b87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b8a:	e8 85 fe ff ff       	call   c0026a14 <PIC::ioWait()>
c0026b8f:	83 c4 10             	add    esp,0x10
c0026b92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026b95:	0f b6 c0             	movzx  eax,al
c0026b98:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026b9e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026ba1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026ba4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026ba7:	ee                   	out    dx,al
c0026ba8:	83 ec 0c             	sub    esp,0xc
c0026bab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bae:	e8 61 fe ff ff       	call   c0026a14 <PIC::ioWait()>
c0026bb3:	83 c4 10             	add    esp,0x10
c0026bb6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026bb9:	0f b6 c0             	movzx  eax,al
c0026bbc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026bc2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026bc5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026bc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026bcb:	ee                   	out    dx,al
c0026bcc:	83 ec 0c             	sub    esp,0xc
c0026bcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bd2:	e8 3d fe ff ff       	call   c0026a14 <PIC::ioWait()>
c0026bd7:	83 c4 10             	add    esp,0x10
c0026bda:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026be0:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026be4:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026be7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026bea:	ee                   	out    dx,al
c0026beb:	83 ec 0c             	sub    esp,0xc
c0026bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026bf1:	e8 1e fe ff ff       	call   c0026a14 <PIC::ioWait()>
c0026bf6:	83 c4 10             	add    esp,0x10
c0026bf9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026bff:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026c03:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026c06:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026c09:	ee                   	out    dx,al
c0026c0a:	83 ec 0c             	sub    esp,0xc
c0026c0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c10:	e8 ff fd ff ff       	call   c0026a14 <PIC::ioWait()>
c0026c15:	83 c4 10             	add    esp,0x10
c0026c18:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026c1e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026c22:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026c25:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026c28:	ee                   	out    dx,al
c0026c29:	83 ec 0c             	sub    esp,0xc
c0026c2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c2f:	e8 e0 fd ff ff       	call   c0026a14 <PIC::ioWait()>
c0026c34:	83 c4 10             	add    esp,0x10
c0026c37:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026c3d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026c41:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026c44:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c47:	ee                   	out    dx,al
c0026c48:	83 ec 0c             	sub    esp,0xc
c0026c4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c4e:	e8 c1 fd ff ff       	call   c0026a14 <PIC::ioWait()>
c0026c53:	83 c4 10             	add    esp,0x10
c0026c56:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026c5a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026c60:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026c63:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026c66:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026c69:	ee                   	out    dx,al
c0026c6a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026c6e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026c74:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026c77:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026c7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026c7d:	ee                   	out    dx,al
c0026c7e:	90                   	nop
c0026c7f:	c9                   	leave  
c0026c80:	c3                   	ret    
c0026c81:	90                   	nop

c0026c82 <PIC::open(int, int, void*)>:
c0026c82:	55                   	push   ebp
c0026c83:	89 e5                	mov    ebp,esp
c0026c85:	83 ec 18             	sub    esp,0x18
c0026c88:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026c8e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026c92:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026c95:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026c99:	ee                   	out    dx,al
c0026c9a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026ca0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026ca4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026ca7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026cab:	ee                   	out    dx,al
c0026cac:	83 ec 0c             	sub    esp,0xc
c0026caf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cb2:	e8 5f fe ff ff       	call   c0026b16 <PIC::remap()>
c0026cb7:	83 c4 10             	add    esp,0x10
c0026cba:	b8 00 00 00 00       	mov    eax,0x0
c0026cbf:	c9                   	leave  
c0026cc0:	c3                   	ret    
c0026cc1:	90                   	nop

c0026cc2 <APICTimer::close(int, int, void*)>:
c0026cc2:	b8 00 00 00 00       	mov    eax,0x0
c0026cc7:	c3                   	ret    

c0026cc8 <apicTimerHandler(regs*, void*)>:
c0026cc8:	83 ec 0c             	sub    esp,0xc
c0026ccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0026cd1:	99                   	cdq    
c0026cd2:	52                   	push   edx
c0026cd3:	50                   	push   eax
c0026cd4:	6a 00                	push   0x0
c0026cd6:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026cdb:	e8 94 07 00 00       	call   c0027474 <__udivdi3>
c0026ce0:	83 c4 10             	add    esp,0x10
c0026ce3:	83 ec 08             	sub    esp,0x8
c0026ce6:	52                   	push   edx
c0026ce7:	50                   	push   eax
c0026ce8:	e8 86 fd fe ff       	call   c0016a73 <timerHandler(unsigned long long)>
c0026ced:	83 c4 10             	add    esp,0x10
c0026cf0:	90                   	nop
c0026cf1:	83 c4 0c             	add    esp,0xc
c0026cf4:	c3                   	ret    
c0026cf5:	90                   	nop

c0026cf6 <APICTimer::write(int)>:
c0026cf6:	53                   	push   ebx
c0026cf7:	83 ec 28             	sub    esp,0x28
c0026cfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026cfe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026d02:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026d08:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0026d0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d13:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026d19:	83 ec 0c             	sub    esp,0xc
c0026d1c:	50                   	push   eax
c0026d1d:	e8 de f4 ff ff       	call   c0026200 <APIC::getBase()>
c0026d22:	83 c4 10             	add    esp,0x10
c0026d25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026d29:	a1 10 f8 02 c0       	mov    eax,ds:0xc002f810
c0026d2e:	8b 15 14 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f814
c0026d34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026d38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d40:	05 e0 03 00 00       	add    eax,0x3e0
c0026d45:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d4f:	05 80 03 00 00       	add    eax,0x380
c0026d54:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026d5a:	fb                   	sti    
c0026d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026d63:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026d68:	83 d2 00             	adc    edx,0x0
c0026d6b:	89 c1                	mov    ecx,eax
c0026d6d:	89 d3                	mov    ebx,edx
c0026d6f:	a1 10 f8 02 c0       	mov    eax,ds:0xc002f810
c0026d74:	8b 15 14 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f814
c0026d7a:	39 c8                	cmp    eax,ecx
c0026d7c:	89 d0                	mov    eax,edx
c0026d7e:	19 d8                	sbb    eax,ebx
c0026d80:	73 02                	jae    c0026d84 <APICTimer::write(int)+0x8e>
c0026d82:	eb d7                	jmp    c0026d5b <APICTimer::write(int)+0x65>
c0026d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d88:	05 20 03 00 00       	add    eax,0x320
c0026d8d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026d97:	05 90 03 00 00       	add    eax,0x390
c0026d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d9e:	f7 d0                	not    eax
c0026da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026da4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026dac:	ba 00 00 00 00       	mov    edx,0x0
c0026db1:	f7 f3                	div    ebx
c0026db3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026db7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026dbb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026dc1:	0d 00 00 02 00       	or     eax,0x20000
c0026dc6:	89 c2                	mov    edx,eax
c0026dc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026dcc:	05 20 03 00 00       	add    eax,0x320
c0026dd1:	89 10                	mov    DWORD PTR [eax],edx
c0026dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026dd7:	05 e0 03 00 00       	add    eax,0x3e0
c0026ddc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026de6:	05 80 03 00 00       	add    eax,0x380
c0026deb:	89 c2                	mov    edx,eax
c0026ded:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026df1:	89 02                	mov    DWORD PTR [edx],eax
c0026df3:	90                   	nop
c0026df4:	83 c4 28             	add    esp,0x28
c0026df7:	5b                   	pop    ebx
c0026df8:	c3                   	ret    
c0026df9:	90                   	nop

c0026dfa <APICTimer::open(int, int, void*)>:
c0026dfa:	57                   	push   edi
c0026dfb:	56                   	push   esi
c0026dfc:	53                   	push   ebx
c0026dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e01:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e03:	83 c0 24             	add    eax,0x24
c0026e06:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e08:	83 ec 08             	sub    esp,0x8
c0026e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e13:	ff d0                	call   eax
c0026e15:	83 c4 10             	add    esp,0x10
c0026e18:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c0026e1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026e23:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026e29:	83 ec 0c             	sub    esp,0xc
c0026e2c:	50                   	push   eax
c0026e2d:	e8 ce f3 ff ff       	call   c0026200 <APIC::getBase()>
c0026e32:	83 c4 10             	add    esp,0x10
c0026e35:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e45:	0f b6 f8             	movzx  edi,al
c0026e48:	89 d0                	mov    eax,edx
c0026e4a:	ba 00 00 00 00       	mov    edx,0x0
c0026e4f:	89 c1                	mov    ecx,eax
c0026e51:	80 e5 ff             	and    ch,0xff
c0026e54:	89 cb                	mov    ebx,ecx
c0026e56:	0f b6 f2             	movzx  esi,dl
c0026e59:	89 d8                	mov    eax,ebx
c0026e5b:	89 f2                	mov    edx,esi
c0026e5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e61:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026e64:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026e68:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026e6c:	83 e0 00             	and    eax,0x0
c0026e6f:	09 d0                	or     eax,edx
c0026e71:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e79:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026e7f:	8d 50 01             	lea    edx,[eax+0x1]
c0026e82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e86:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026e8c:	0f b6 d0             	movzx  edx,al
c0026e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e93:	83 c2 08             	add    edx,0x8
c0026e96:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026e9a:	0f b6 c9             	movzx  ecx,cl
c0026e9d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026ea3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026eaf:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ebd:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026ec3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026ec7:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026ecd:	83 ec 0c             	sub    esp,0xc
c0026ed0:	51                   	push   ecx
c0026ed1:	6a 01                	push   0x1
c0026ed3:	68 c8 6c 02 c0       	push   0xc0026cc8
c0026ed8:	52                   	push   edx
c0026ed9:	50                   	push   eax
c0026eda:	e8 ff cf fe ff       	call   c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026edf:	83 c4 20             	add    esp,0x20
c0026ee2:	89 c2                	mov    edx,eax
c0026ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ee8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026eee:	b8 00 00 00 00       	mov    eax,0x0
c0026ef3:	5b                   	pop    ebx
c0026ef4:	5e                   	pop    esi
c0026ef5:	5f                   	pop    edi
c0026ef6:	c3                   	ret    
c0026ef7:	90                   	nop

c0026ef8 <APICTimer::APICTimer()>:
c0026ef8:	83 ec 0c             	sub    esp,0xc
c0026efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eff:	83 ec 08             	sub    esp,0x8
c0026f02:	68 20 e0 02 c0       	push   0xc002e020
c0026f07:	50                   	push   eax
c0026f08:	e8 d7 fa fe ff       	call   c00169e4 <Timer::Timer(char const*)>
c0026f0d:	83 c4 10             	add    esp,0x10
c0026f10:	ba 34 e0 02 c0       	mov    edx,0xc002e034
c0026f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f19:	89 10                	mov    DWORD PTR [eax],edx
c0026f1b:	90                   	nop
c0026f1c:	83 c4 0c             	add    esp,0xc
c0026f1f:	c3                   	ret    

c0026f20 <PIT::write(int)>:
c0026f20:	83 ec 10             	sub    esp,0x10
c0026f23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026f27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026f2b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026f31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026f35:	a3 44 35 03 c0       	mov    ds:0xc0033544,eax
c0026f3a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026f3f:	99                   	cdq    
c0026f40:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026f44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f48:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026f4f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026f54:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026f58:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026f5d:	ee                   	out    dx,al
c0026f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f62:	0f b6 c0             	movzx  eax,al
c0026f65:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026f6c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026f70:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026f74:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026f79:	ee                   	out    dx,al
c0026f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f7e:	c1 f8 08             	sar    eax,0x8
c0026f81:	0f b6 c0             	movzx  eax,al
c0026f84:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026f8b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026f8f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026f93:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026f98:	ee                   	out    dx,al
c0026f99:	90                   	nop
c0026f9a:	83 c4 10             	add    esp,0x10
c0026f9d:	c3                   	ret    

c0026f9e <pitHandler(regs*, void*)>:
c0026f9e:	83 ec 0c             	sub    esp,0xc
c0026fa1:	a1 44 35 03 c0       	mov    eax,ds:0xc0033544
c0026fa6:	99                   	cdq    
c0026fa7:	52                   	push   edx
c0026fa8:	50                   	push   eax
c0026fa9:	6a 00                	push   0x0
c0026fab:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026fb0:	e8 bf 04 00 00       	call   c0027474 <__udivdi3>
c0026fb5:	83 c4 10             	add    esp,0x10
c0026fb8:	83 ec 08             	sub    esp,0x8
c0026fbb:	52                   	push   edx
c0026fbc:	50                   	push   eax
c0026fbd:	e8 b1 fa fe ff       	call   c0016a73 <timerHandler(unsigned long long)>
c0026fc2:	83 c4 10             	add    esp,0x10
c0026fc5:	90                   	nop
c0026fc6:	83 c4 0c             	add    esp,0xc
c0026fc9:	c3                   	ret    

c0026fca <PIT::open(int, int, void*)>:
c0026fca:	83 ec 0c             	sub    esp,0xc
c0026fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fd3:	83 c0 24             	add    eax,0x24
c0026fd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fd8:	83 ec 08             	sub    esp,0x8
c0026fdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fe3:	ff d0                	call   eax
c0026fe5:	83 c4 10             	add    esp,0x10
c0026fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fec:	83 ec 0c             	sub    esp,0xc
c0026fef:	6a 00                	push   0x0
c0026ff1:	6a 01                	push   0x1
c0026ff3:	68 9e 6f 02 c0       	push   0xc0026f9e
c0026ff8:	6a 00                	push   0x0
c0026ffa:	50                   	push   eax
c0026ffb:	e8 de ce fe ff       	call   c0013ede <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027000:	83 c4 20             	add    esp,0x20
c0027003:	89 c2                	mov    edx,eax
c0027005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027009:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002700f:	b8 00 00 00 00       	mov    eax,0x0
c0027014:	83 c4 0c             	add    esp,0xc
c0027017:	c3                   	ret    

c0027018 <PIT::close(int, int, void*)>:
c0027018:	83 ec 0c             	sub    esp,0xc
c002701b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002701f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0027029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002702d:	6a 01                	push   0x1
c002702f:	68 9e 6f 02 c0       	push   0xc0026f9e
c0027034:	6a 00                	push   0x0
c0027036:	50                   	push   eax
c0027037:	e8 ec ce fe ff       	call   c0013f28 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002703c:	83 c4 10             	add    esp,0x10
c002703f:	b8 00 00 00 00       	mov    eax,0x0
c0027044:	83 c4 0c             	add    esp,0xc
c0027047:	c3                   	ret    

c0027048 <PIT::PIT()>:
c0027048:	83 ec 0c             	sub    esp,0xc
c002704b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704f:	83 ec 08             	sub    esp,0x8
c0027052:	68 5c e0 02 c0       	push   0xc002e05c
c0027057:	50                   	push   eax
c0027058:	e8 87 f9 fe ff       	call   c00169e4 <Timer::Timer(char const*)>
c002705d:	83 c4 10             	add    esp,0x10
c0027060:	ba 84 e0 02 c0       	mov    edx,0xc002e084
c0027065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027069:	89 10                	mov    DWORD PTR [eax],edx
c002706b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002706f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027075:	0f b6 d0             	movzx  edx,al
c0027078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002707c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027087:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002708d:	0f b6 d0             	movzx  edx,al
c0027090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027094:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0027099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002709d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00270a3:	8d 50 01             	lea    edx,[eax+0x1]
c00270a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270aa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00270b0:	0f b6 d0             	movzx  edx,al
c00270b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00270bb:	83 e1 3f             	and    ecx,0x3f
c00270be:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00270c2:	90                   	nop
c00270c3:	83 c4 0c             	add    esp,0xc
c00270c6:	c3                   	ret    
c00270c7:	66 90                	xchg   ax,ax
c00270c9:	66 90                	xchg   ax,ax
c00270cb:	66 90                	xchg   ax,ax
c00270cd:	66 90                	xchg   ax,ax
c00270cf:	90                   	nop

c00270d0 <avxDetect>:
c00270d0:	b8 00 00 00 00       	mov    eax,0x0
c00270d5:	c3                   	ret    

c00270d6 <avxSave>:
c00270d6:	c3                   	ret    

c00270d7 <avxLoad>:
c00270d7:	c3                   	ret    

c00270d8 <avxInit>:
c00270d8:	c3                   	ret    

c00270d9 <avxClose>:
c00270d9:	c3                   	ret    

c00270da <wouldSheSayYes>:
c00270da:	c3                   	ret    
c00270db:	49                   	dec    ecx
c00270dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00270e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00270e4:	75 20                	jne    c0027106 <sseDetect.noSSE+0x1>
c00270e6:	4e                   	dec    esi
c00270e7:	79 61                	jns    c002714a <x87Detect+0x14>
c00270e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00270ee:	66 90                	xchg   ax,ax

c00270f0 <absolutelyNoChanceInHell>:
c00270f0:	b8 01 00 00 00       	mov    eax,0x1
c00270f5:	0f a2                	cpuid  
c00270f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00270fd:	74 06                	je     c0027105 <sseDetect.noSSE>
c00270ff:	b8 01 00 00 00       	mov    eax,0x1
c0027104:	c3                   	ret    

c0027105 <sseDetect.noSSE>:
c0027105:	31 c0                	xor    eax,eax
c0027107:	c3                   	ret    

c0027108 <sseSave>:
c0027108:	0f ae 44 24 04       	fxsave [esp+0x4]
c002710d:	c3                   	ret    

c002710e <sseLoad>:
c002710e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0027113:	c3                   	ret    

c0027114 <sseInit>:
c0027114:	e8 49 00 00 00       	call   c0027162 <x87Init>
c0027119:	0f 20 e0             	mov    eax,cr4
c002711c:	66 0d 00 06          	or     ax,0x600
c0027120:	0f 22 e0             	mov    cr4,eax
c0027123:	c3                   	ret    

c0027124 <sseClose>:
c0027124:	c3                   	ret    
c0027125:	66 90                	xchg   ax,ax
c0027127:	66 90                	xchg   ax,ax
c0027129:	66 90                	xchg   ax,ax
c002712b:	66 90                	xchg   ax,ax
c002712d:	66 90                	xchg   ax,ax
c002712f:	90                   	nop

c0027130 <value_37F>:
c0027130:	7f 03                	jg     c0027135 <value_37A+0x1>

c0027132 <value_37E>:
c0027132:	7e 03                	jle    c0027137 <x87Detect+0x1>

c0027134 <value_37A>:
c0027134:	7a 03                	jp     c0027139 <x87Detect+0x3>

c0027136 <x87Detect>:
c0027136:	b8 01 00 00 00       	mov    eax,0x1
c002713b:	0f a2                	cpuid  
c002713d:	f7 c2 01 00 00 00    	test   edx,0x1
c0027143:	74 06                	je     c002714b <x87Detect.nox87>
c0027145:	b8 01 00 00 00       	mov    eax,0x1
c002714a:	c3                   	ret    

c002714b <x87Detect.nox87>:
c002714b:	b8 00 00 00 00       	mov    eax,0x0
c0027150:	c3                   	ret    

c0027151 <x87Save>:
c0027151:	55                   	push   ebp
c0027152:	89 e5                	mov    ebp,esp
c0027154:	9b dd 75 08          	fsave  [ebp+0x8]
c0027158:	c9                   	leave  
c0027159:	c3                   	ret    

c002715a <x87Load>:
c002715a:	55                   	push   ebp
c002715b:	89 e5                	mov    ebp,esp
c002715d:	dd 65 08             	frstor [ebp+0x8]
c0027160:	c9                   	leave  
c0027161:	c3                   	ret    

c0027162 <x87Init>:
c0027162:	9b db e3             	finit  
c0027165:	0f 20 c0             	mov    eax,cr0
c0027168:	66 25 fb ff          	and    ax,0xfffb
c002716c:	66 0d 22 00          	or     ax,0x22
c0027170:	0f 22 c0             	mov    cr0,eax
c0027173:	0f 06                	clts   
c0027175:	d9 2d 34 71 02 c0    	fldcw  WORD PTR ds:0xc0027134
c002717b:	c3                   	ret    

c002717c <x87Close>:
c002717c:	c3                   	ret    
c002717d:	66 90                	xchg   ax,ax
c002717f:	90                   	nop

c0027180 <__do_global_ctors_aux>:
c0027180:	a1 b8 9d 02 c0       	mov    eax,ds:0xc0029db8
c0027185:	83 f8 ff             	cmp    eax,0xffffffff
c0027188:	74 1a                	je     c00271a4 <__do_global_ctors_aux+0x24>
c002718a:	55                   	push   ebp
c002718b:	89 e5                	mov    ebp,esp
c002718d:	53                   	push   ebx
c002718e:	52                   	push   edx
c002718f:	bb b8 9d 02 c0       	mov    ebx,0xc0029db8
c0027194:	ff d0                	call   eax
c0027196:	83 eb 04             	sub    ebx,0x4
c0027199:	8b 03                	mov    eax,DWORD PTR [ebx]
c002719b:	83 f8 ff             	cmp    eax,0xffffffff
c002719e:	75 f4                	jne    c0027194 <__do_global_ctors_aux+0x14>
c00271a0:	58                   	pop    eax
c00271a1:	5b                   	pop    ebx
c00271a2:	5d                   	pop    ebp
c00271a3:	c3                   	ret    
c00271a4:	c3                   	ret    
c00271a5:	66 90                	xchg   ax,ax
c00271a7:	90                   	nop

c00271a8 <__divdi3>:
c00271a8:	55                   	push   ebp
c00271a9:	57                   	push   edi
c00271aa:	56                   	push   esi
c00271ab:	53                   	push   ebx
c00271ac:	83 ec 1c             	sub    esp,0x1c
c00271af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00271b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00271b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00271ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00271be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00271c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271c6:	85 db                	test   ebx,ebx
c00271c8:	0f 88 8e 00 00 00    	js     c002725c <__divdi3+0xb4>
c00271ce:	89 dd                	mov    ebp,ebx
c00271d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00271d8:	89 d3                	mov    ebx,edx
c00271da:	85 d2                	test   edx,edx
c00271dc:	79 0d                	jns    c00271eb <__divdi3+0x43>
c00271de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00271e2:	f7 d8                	neg    eax
c00271e4:	83 d2 00             	adc    edx,0x0
c00271e7:	f7 da                	neg    edx
c00271e9:	89 d3                	mov    ebx,edx
c00271eb:	89 c7                	mov    edi,eax
c00271ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00271f0:	85 db                	test   ebx,ebx
c00271f2:	75 48                	jne    c002723c <__divdi3+0x94>
c00271f4:	39 ef                	cmp    edi,ebp
c00271f6:	76 24                	jbe    c002721c <__divdi3+0x74>
c00271f8:	89 ea                	mov    edx,ebp
c00271fa:	f7 f7                	div    edi
c00271fc:	89 c1                	mov    ecx,eax
c00271fe:	31 f6                	xor    esi,esi
c0027200:	89 c8                	mov    eax,ecx
c0027202:	89 f2                	mov    edx,esi
c0027204:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027208:	85 c9                	test   ecx,ecx
c002720a:	74 07                	je     c0027213 <__divdi3+0x6b>
c002720c:	f7 d8                	neg    eax
c002720e:	83 d2 00             	adc    edx,0x0
c0027211:	f7 da                	neg    edx
c0027213:	83 c4 1c             	add    esp,0x1c
c0027216:	5b                   	pop    ebx
c0027217:	5e                   	pop    esi
c0027218:	5f                   	pop    edi
c0027219:	5d                   	pop    ebp
c002721a:	c3                   	ret    
c002721b:	90                   	nop
c002721c:	85 ff                	test   edi,edi
c002721e:	75 0b                	jne    c002722b <__divdi3+0x83>
c0027220:	b8 01 00 00 00       	mov    eax,0x1
c0027225:	31 d2                	xor    edx,edx
c0027227:	f7 f3                	div    ebx
c0027229:	89 c7                	mov    edi,eax
c002722b:	31 d2                	xor    edx,edx
c002722d:	89 e8                	mov    eax,ebp
c002722f:	f7 f7                	div    edi
c0027231:	89 c6                	mov    esi,eax
c0027233:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027236:	f7 f7                	div    edi
c0027238:	89 c1                	mov    ecx,eax
c002723a:	eb c4                	jmp    c0027200 <__divdi3+0x58>
c002723c:	39 eb                	cmp    ebx,ebp
c002723e:	77 3c                	ja     c002727c <__divdi3+0xd4>
c0027240:	0f bd f3             	bsr    esi,ebx
c0027243:	83 f6 1f             	xor    esi,0x1f
c0027246:	75 40                	jne    c0027288 <__divdi3+0xe0>
c0027248:	39 eb                	cmp    ebx,ebp
c002724a:	72 09                	jb     c0027255 <__divdi3+0xad>
c002724c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002724f:	0f 87 97 00 00 00    	ja     c00272ec <__divdi3+0x144>
c0027255:	b9 01 00 00 00       	mov    ecx,0x1
c002725a:	eb a4                	jmp    c0027200 <__divdi3+0x58>
c002725c:	f7 d9                	neg    ecx
c002725e:	83 d3 00             	adc    ebx,0x0
c0027261:	f7 db                	neg    ebx
c0027263:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027266:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002726a:	89 dd                	mov    ebp,ebx
c002726c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027274:	e9 5f ff ff ff       	jmp    c00271d8 <__divdi3+0x30>
c0027279:	8d 76 00             	lea    esi,[esi+0x0]
c002727c:	31 f6                	xor    esi,esi
c002727e:	31 c9                	xor    ecx,ecx
c0027280:	e9 7b ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c0027285:	8d 76 00             	lea    esi,[esi+0x0]
c0027288:	b8 20 00 00 00       	mov    eax,0x20
c002728d:	29 f0                	sub    eax,esi
c002728f:	89 f1                	mov    ecx,esi
c0027291:	d3 e3                	shl    ebx,cl
c0027293:	89 fa                	mov    edx,edi
c0027295:	88 c1                	mov    cl,al
c0027297:	d3 ea                	shr    edx,cl
c0027299:	09 da                	or     edx,ebx
c002729b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002729f:	89 f1                	mov    ecx,esi
c00272a1:	d3 e7                	shl    edi,cl
c00272a3:	89 eb                	mov    ebx,ebp
c00272a5:	88 c1                	mov    cl,al
c00272a7:	d3 eb                	shr    ebx,cl
c00272a9:	89 f1                	mov    ecx,esi
c00272ab:	d3 e5                	shl    ebp,cl
c00272ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00272b0:	88 c1                	mov    cl,al
c00272b2:	d3 ea                	shr    edx,cl
c00272b4:	09 d5                	or     ebp,edx
c00272b6:	89 e8                	mov    eax,ebp
c00272b8:	89 da                	mov    edx,ebx
c00272ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00272be:	89 d3                	mov    ebx,edx
c00272c0:	89 c5                	mov    ebp,eax
c00272c2:	f7 e7                	mul    edi
c00272c4:	39 d3                	cmp    ebx,edx
c00272c6:	72 18                	jb     c00272e0 <__divdi3+0x138>
c00272c8:	74 0a                	je     c00272d4 <__divdi3+0x12c>
c00272ca:	89 e9                	mov    ecx,ebp
c00272cc:	31 f6                	xor    esi,esi
c00272ce:	e9 2d ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c00272d3:	90                   	nop
c00272d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00272d7:	89 f1                	mov    ecx,esi
c00272d9:	d3 e7                	shl    edi,cl
c00272db:	39 c7                	cmp    edi,eax
c00272dd:	73 eb                	jae    c00272ca <__divdi3+0x122>
c00272df:	90                   	nop
c00272e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00272e3:	31 f6                	xor    esi,esi
c00272e5:	e9 16 ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c00272ea:	66 90                	xchg   ax,ax
c00272ec:	31 c9                	xor    ecx,ecx
c00272ee:	e9 0d ff ff ff       	jmp    c0027200 <__divdi3+0x58>
c00272f3:	90                   	nop

c00272f4 <__moddi3>:
c00272f4:	55                   	push   ebp
c00272f5:	57                   	push   edi
c00272f6:	56                   	push   esi
c00272f7:	53                   	push   ebx
c00272f8:	83 ec 2c             	sub    esp,0x2c
c00272fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00272ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027303:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027307:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002730b:	85 db                	test   ebx,ebx
c002730d:	0f 88 85 00 00 00    	js     c0027398 <__moddi3+0xa4>
c0027313:	89 de                	mov    esi,ebx
c0027315:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002731d:	89 d7                	mov    edi,edx
c002731f:	85 d2                	test   edx,edx
c0027321:	79 09                	jns    c002732c <__moddi3+0x38>
c0027323:	f7 d8                	neg    eax
c0027325:	83 d2 00             	adc    edx,0x0
c0027328:	f7 da                	neg    edx
c002732a:	89 d7                	mov    edi,edx
c002732c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027330:	89 cd                	mov    ebp,ecx
c0027332:	85 ff                	test   edi,edi
c0027334:	75 52                	jne    c0027388 <__moddi3+0x94>
c0027336:	89 c3                	mov    ebx,eax
c0027338:	39 f0                	cmp    eax,esi
c002733a:	76 24                	jbe    c0027360 <__moddi3+0x6c>
c002733c:	89 c8                	mov    eax,ecx
c002733e:	89 f2                	mov    edx,esi
c0027340:	f7 f3                	div    ebx
c0027342:	89 d6                	mov    esi,edx
c0027344:	89 f0                	mov    eax,esi
c0027346:	31 d2                	xor    edx,edx
c0027348:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002734c:	85 c9                	test   ecx,ecx
c002734e:	74 07                	je     c0027357 <__moddi3+0x63>
c0027350:	f7 d8                	neg    eax
c0027352:	83 d2 00             	adc    edx,0x0
c0027355:	f7 da                	neg    edx
c0027357:	83 c4 2c             	add    esp,0x2c
c002735a:	5b                   	pop    ebx
c002735b:	5e                   	pop    esi
c002735c:	5f                   	pop    edi
c002735d:	5d                   	pop    ebp
c002735e:	c3                   	ret    
c002735f:	90                   	nop
c0027360:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027364:	85 db                	test   ebx,ebx
c0027366:	75 0d                	jne    c0027375 <__moddi3+0x81>
c0027368:	b8 01 00 00 00       	mov    eax,0x1
c002736d:	31 d2                	xor    edx,edx
c002736f:	f7 f7                	div    edi
c0027371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027375:	89 f0                	mov    eax,esi
c0027377:	31 d2                	xor    edx,edx
c0027379:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002737d:	f7 f7                	div    edi
c002737f:	89 e8                	mov    eax,ebp
c0027381:	f7 f7                	div    edi
c0027383:	89 d6                	mov    esi,edx
c0027385:	eb bd                	jmp    c0027344 <__moddi3+0x50>
c0027387:	90                   	nop
c0027388:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002738c:	39 f7                	cmp    edi,esi
c002738e:	76 20                	jbe    c00273b0 <__moddi3+0xbc>
c0027390:	89 c8                	mov    eax,ecx
c0027392:	89 f2                	mov    edx,esi
c0027394:	eb b2                	jmp    c0027348 <__moddi3+0x54>
c0027396:	66 90                	xchg   ax,ax
c0027398:	f7 d9                	neg    ecx
c002739a:	83 d3 00             	adc    ebx,0x0
c002739d:	f7 db                	neg    ebx
c002739f:	89 de                	mov    esi,ebx
c00273a1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00273a9:	e9 6f ff ff ff       	jmp    c002731d <__moddi3+0x29>
c00273ae:	66 90                	xchg   ax,ax
c00273b0:	0f bd c7             	bsr    eax,edi
c00273b3:	83 f0 1f             	xor    eax,0x1f
c00273b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00273ba:	75 24                	jne    c00273e0 <__moddi3+0xec>
c00273bc:	39 f7                	cmp    edi,esi
c00273be:	72 06                	jb     c00273c6 <__moddi3+0xd2>
c00273c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00273c4:	77 0c                	ja     c00273d2 <__moddi3+0xde>
c00273c6:	89 e9                	mov    ecx,ebp
c00273c8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00273cc:	19 fe                	sbb    esi,edi
c00273ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00273d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00273d6:	89 f2                	mov    edx,esi
c00273d8:	e9 6b ff ff ff       	jmp    c0027348 <__moddi3+0x54>
c00273dd:	8d 76 00             	lea    esi,[esi+0x0]
c00273e0:	b8 20 00 00 00       	mov    eax,0x20
c00273e5:	89 c2                	mov    edx,eax
c00273e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00273eb:	29 da                	sub    edx,ebx
c00273ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00273f1:	88 d9                	mov    cl,bl
c00273f3:	d3 e7                	shl    edi,cl
c00273f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00273f9:	88 d1                	mov    cl,dl
c00273fb:	d3 e8                	shr    eax,cl
c00273fd:	09 c7                	or     edi,eax
c00273ff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027403:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027407:	89 d8                	mov    eax,ebx
c0027409:	88 d9                	mov    cl,bl
c002740b:	d3 e7                	shl    edi,cl
c002740d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027411:	89 f3                	mov    ebx,esi
c0027413:	88 d1                	mov    cl,dl
c0027415:	d3 eb                	shr    ebx,cl
c0027417:	89 c7                	mov    edi,eax
c0027419:	88 c1                	mov    cl,al
c002741b:	d3 e6                	shl    esi,cl
c002741d:	89 e8                	mov    eax,ebp
c002741f:	88 d1                	mov    cl,dl
c0027421:	d3 e8                	shr    eax,cl
c0027423:	09 f0                	or     eax,esi
c0027425:	89 f9                	mov    ecx,edi
c0027427:	d3 e5                	shl    ebp,cl
c0027429:	89 da                	mov    edx,ebx
c002742b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002742f:	89 d3                	mov    ebx,edx
c0027431:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027435:	89 c6                	mov    esi,eax
c0027437:	89 d1                	mov    ecx,edx
c0027439:	39 d3                	cmp    ebx,edx
c002743b:	72 27                	jb     c0027464 <__moddi3+0x170>
c002743d:	74 21                	je     c0027460 <__moddi3+0x16c>
c002743f:	29 f5                	sub    ebp,esi
c0027441:	19 cb                	sbb    ebx,ecx
c0027443:	89 de                	mov    esi,ebx
c0027445:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027449:	d3 e6                	shl    esi,cl
c002744b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002744f:	89 f9                	mov    ecx,edi
c0027451:	d3 ed                	shr    ebp,cl
c0027453:	09 ee                	or     esi,ebp
c0027455:	89 f0                	mov    eax,esi
c0027457:	d3 eb                	shr    ebx,cl
c0027459:	89 da                	mov    edx,ebx
c002745b:	e9 e8 fe ff ff       	jmp    c0027348 <__moddi3+0x54>
c0027460:	39 c5                	cmp    ebp,eax
c0027462:	73 db                	jae    c002743f <__moddi3+0x14b>
c0027464:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027468:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002746c:	89 d1                	mov    ecx,edx
c002746e:	89 c6                	mov    esi,eax
c0027470:	eb cd                	jmp    c002743f <__moddi3+0x14b>
c0027472:	66 90                	xchg   ax,ax

c0027474 <__udivdi3>:
c0027474:	55                   	push   ebp
c0027475:	57                   	push   edi
c0027476:	56                   	push   esi
c0027477:	53                   	push   ebx
c0027478:	83 ec 1c             	sub    esp,0x1c
c002747b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002747f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027483:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027487:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002748b:	85 d2                	test   edx,edx
c002748d:	75 41                	jne    c00274d0 <__udivdi3+0x5c>
c002748f:	39 f7                	cmp    edi,esi
c0027491:	76 15                	jbe    c00274a8 <__udivdi3+0x34>
c0027493:	89 e8                	mov    eax,ebp
c0027495:	89 f2                	mov    edx,esi
c0027497:	f7 f7                	div    edi
c0027499:	31 db                	xor    ebx,ebx
c002749b:	89 da                	mov    edx,ebx
c002749d:	83 c4 1c             	add    esp,0x1c
c00274a0:	5b                   	pop    ebx
c00274a1:	5e                   	pop    esi
c00274a2:	5f                   	pop    edi
c00274a3:	5d                   	pop    ebp
c00274a4:	c3                   	ret    
c00274a5:	8d 76 00             	lea    esi,[esi+0x0]
c00274a8:	89 f9                	mov    ecx,edi
c00274aa:	85 ff                	test   edi,edi
c00274ac:	75 0b                	jne    c00274b9 <__udivdi3+0x45>
c00274ae:	b8 01 00 00 00       	mov    eax,0x1
c00274b3:	31 d2                	xor    edx,edx
c00274b5:	f7 f7                	div    edi
c00274b7:	89 c1                	mov    ecx,eax
c00274b9:	31 d2                	xor    edx,edx
c00274bb:	89 f0                	mov    eax,esi
c00274bd:	f7 f1                	div    ecx
c00274bf:	89 c3                	mov    ebx,eax
c00274c1:	89 e8                	mov    eax,ebp
c00274c3:	f7 f1                	div    ecx
c00274c5:	89 da                	mov    edx,ebx
c00274c7:	83 c4 1c             	add    esp,0x1c
c00274ca:	5b                   	pop    ebx
c00274cb:	5e                   	pop    esi
c00274cc:	5f                   	pop    edi
c00274cd:	5d                   	pop    ebp
c00274ce:	c3                   	ret    
c00274cf:	90                   	nop
c00274d0:	39 f2                	cmp    edx,esi
c00274d2:	77 1c                	ja     c00274f0 <__udivdi3+0x7c>
c00274d4:	0f bd da             	bsr    ebx,edx
c00274d7:	83 f3 1f             	xor    ebx,0x1f
c00274da:	75 24                	jne    c0027500 <__udivdi3+0x8c>
c00274dc:	39 f2                	cmp    edx,esi
c00274de:	72 08                	jb     c00274e8 <__udivdi3+0x74>
c00274e0:	39 ef                	cmp    edi,ebp
c00274e2:	0f 87 84 00 00 00    	ja     c002756c <__udivdi3+0xf8>
c00274e8:	b8 01 00 00 00       	mov    eax,0x1
c00274ed:	eb ac                	jmp    c002749b <__udivdi3+0x27>
c00274ef:	90                   	nop
c00274f0:	31 db                	xor    ebx,ebx
c00274f2:	31 c0                	xor    eax,eax
c00274f4:	89 da                	mov    edx,ebx
c00274f6:	83 c4 1c             	add    esp,0x1c
c00274f9:	5b                   	pop    ebx
c00274fa:	5e                   	pop    esi
c00274fb:	5f                   	pop    edi
c00274fc:	5d                   	pop    ebp
c00274fd:	c3                   	ret    
c00274fe:	66 90                	xchg   ax,ax
c0027500:	b8 20 00 00 00       	mov    eax,0x20
c0027505:	29 d8                	sub    eax,ebx
c0027507:	88 d9                	mov    cl,bl
c0027509:	d3 e2                	shl    edx,cl
c002750b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002750f:	89 fa                	mov    edx,edi
c0027511:	88 c1                	mov    cl,al
c0027513:	d3 ea                	shr    edx,cl
c0027515:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027519:	09 d1                	or     ecx,edx
c002751b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002751f:	88 d9                	mov    cl,bl
c0027521:	d3 e7                	shl    edi,cl
c0027523:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027527:	89 f7                	mov    edi,esi
c0027529:	88 c1                	mov    cl,al
c002752b:	d3 ef                	shr    edi,cl
c002752d:	88 d9                	mov    cl,bl
c002752f:	d3 e6                	shl    esi,cl
c0027531:	89 ea                	mov    edx,ebp
c0027533:	88 c1                	mov    cl,al
c0027535:	d3 ea                	shr    edx,cl
c0027537:	09 d6                	or     esi,edx
c0027539:	89 f0                	mov    eax,esi
c002753b:	89 fa                	mov    edx,edi
c002753d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027541:	89 d7                	mov    edi,edx
c0027543:	89 c6                	mov    esi,eax
c0027545:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027549:	39 d7                	cmp    edi,edx
c002754b:	72 13                	jb     c0027560 <__udivdi3+0xec>
c002754d:	74 09                	je     c0027558 <__udivdi3+0xe4>
c002754f:	89 f0                	mov    eax,esi
c0027551:	31 db                	xor    ebx,ebx
c0027553:	e9 43 ff ff ff       	jmp    c002749b <__udivdi3+0x27>
c0027558:	88 d9                	mov    cl,bl
c002755a:	d3 e5                	shl    ebp,cl
c002755c:	39 c5                	cmp    ebp,eax
c002755e:	73 ef                	jae    c002754f <__udivdi3+0xdb>
c0027560:	8d 46 ff             	lea    eax,[esi-0x1]
c0027563:	31 db                	xor    ebx,ebx
c0027565:	e9 31 ff ff ff       	jmp    c002749b <__udivdi3+0x27>
c002756a:	66 90                	xchg   ax,ax
c002756c:	31 c0                	xor    eax,eax
c002756e:	e9 28 ff ff ff       	jmp    c002749b <__udivdi3+0x27>
c0027573:	90                   	nop

c0027574 <__umoddi3>:
c0027574:	55                   	push   ebp
c0027575:	57                   	push   edi
c0027576:	56                   	push   esi
c0027577:	53                   	push   ebx
c0027578:	83 ec 1c             	sub    esp,0x1c
c002757b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002757f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027583:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027587:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002758b:	89 da                	mov    edx,ebx
c002758d:	85 c0                	test   eax,eax
c002758f:	75 37                	jne    c00275c8 <__umoddi3+0x54>
c0027591:	39 df                	cmp    edi,ebx
c0027593:	76 13                	jbe    c00275a8 <__umoddi3+0x34>
c0027595:	89 f0                	mov    eax,esi
c0027597:	f7 f7                	div    edi
c0027599:	89 d0                	mov    eax,edx
c002759b:	31 d2                	xor    edx,edx
c002759d:	83 c4 1c             	add    esp,0x1c
c00275a0:	5b                   	pop    ebx
c00275a1:	5e                   	pop    esi
c00275a2:	5f                   	pop    edi
c00275a3:	5d                   	pop    ebp
c00275a4:	c3                   	ret    
c00275a5:	8d 76 00             	lea    esi,[esi+0x0]
c00275a8:	89 fd                	mov    ebp,edi
c00275aa:	85 ff                	test   edi,edi
c00275ac:	75 0b                	jne    c00275b9 <__umoddi3+0x45>
c00275ae:	b8 01 00 00 00       	mov    eax,0x1
c00275b3:	31 d2                	xor    edx,edx
c00275b5:	f7 f7                	div    edi
c00275b7:	89 c5                	mov    ebp,eax
c00275b9:	89 d8                	mov    eax,ebx
c00275bb:	31 d2                	xor    edx,edx
c00275bd:	f7 f5                	div    ebp
c00275bf:	89 f0                	mov    eax,esi
c00275c1:	f7 f5                	div    ebp
c00275c3:	89 d0                	mov    eax,edx
c00275c5:	eb d4                	jmp    c002759b <__umoddi3+0x27>
c00275c7:	90                   	nop
c00275c8:	89 f1                	mov    ecx,esi
c00275ca:	39 d8                	cmp    eax,ebx
c00275cc:	76 0a                	jbe    c00275d8 <__umoddi3+0x64>
c00275ce:	89 f0                	mov    eax,esi
c00275d0:	83 c4 1c             	add    esp,0x1c
c00275d3:	5b                   	pop    ebx
c00275d4:	5e                   	pop    esi
c00275d5:	5f                   	pop    edi
c00275d6:	5d                   	pop    ebp
c00275d7:	c3                   	ret    
c00275d8:	0f bd e8             	bsr    ebp,eax
c00275db:	83 f5 1f             	xor    ebp,0x1f
c00275de:	75 1c                	jne    c00275fc <__umoddi3+0x88>
c00275e0:	39 d8                	cmp    eax,ebx
c00275e2:	72 04                	jb     c00275e8 <__umoddi3+0x74>
c00275e4:	39 f7                	cmp    edi,esi
c00275e6:	77 08                	ja     c00275f0 <__umoddi3+0x7c>
c00275e8:	89 da                	mov    edx,ebx
c00275ea:	29 fe                	sub    esi,edi
c00275ec:	19 c2                	sbb    edx,eax
c00275ee:	89 f1                	mov    ecx,esi
c00275f0:	89 c8                	mov    eax,ecx
c00275f2:	83 c4 1c             	add    esp,0x1c
c00275f5:	5b                   	pop    ebx
c00275f6:	5e                   	pop    esi
c00275f7:	5f                   	pop    edi
c00275f8:	5d                   	pop    ebp
c00275f9:	c3                   	ret    
c00275fa:	66 90                	xchg   ax,ax
c00275fc:	ba 20 00 00 00       	mov    edx,0x20
c0027601:	29 ea                	sub    edx,ebp
c0027603:	89 e9                	mov    ecx,ebp
c0027605:	d3 e0                	shl    eax,cl
c0027607:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002760b:	89 f8                	mov    eax,edi
c002760d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027611:	88 d1                	mov    cl,dl
c0027613:	d3 e8                	shr    eax,cl
c0027615:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027619:	09 c1                	or     ecx,eax
c002761b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002761f:	89 e9                	mov    ecx,ebp
c0027621:	d3 e7                	shl    edi,cl
c0027623:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027627:	89 d8                	mov    eax,ebx
c0027629:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002762d:	88 d1                	mov    cl,dl
c002762f:	d3 e8                	shr    eax,cl
c0027631:	89 c7                	mov    edi,eax
c0027633:	89 e9                	mov    ecx,ebp
c0027635:	d3 e3                	shl    ebx,cl
c0027637:	89 f0                	mov    eax,esi
c0027639:	88 d1                	mov    cl,dl
c002763b:	d3 e8                	shr    eax,cl
c002763d:	09 d8                	or     eax,ebx
c002763f:	89 e9                	mov    ecx,ebp
c0027641:	d3 e6                	shl    esi,cl
c0027643:	89 f3                	mov    ebx,esi
c0027645:	89 fa                	mov    edx,edi
c0027647:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002764b:	89 d1                	mov    ecx,edx
c002764d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027651:	89 c6                	mov    esi,eax
c0027653:	89 d7                	mov    edi,edx
c0027655:	39 d1                	cmp    ecx,edx
c0027657:	72 27                	jb     c0027680 <__umoddi3+0x10c>
c0027659:	74 21                	je     c002767c <__umoddi3+0x108>
c002765b:	89 ca                	mov    edx,ecx
c002765d:	29 f3                	sub    ebx,esi
c002765f:	19 fa                	sbb    edx,edi
c0027661:	89 d0                	mov    eax,edx
c0027663:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027667:	d3 e0                	shl    eax,cl
c0027669:	89 e9                	mov    ecx,ebp
c002766b:	d3 eb                	shr    ebx,cl
c002766d:	09 d8                	or     eax,ebx
c002766f:	d3 ea                	shr    edx,cl
c0027671:	83 c4 1c             	add    esp,0x1c
c0027674:	5b                   	pop    ebx
c0027675:	5e                   	pop    esi
c0027676:	5f                   	pop    edi
c0027677:	5d                   	pop    ebp
c0027678:	c3                   	ret    
c0027679:	8d 76 00             	lea    esi,[esi+0x0]
c002767c:	39 c3                	cmp    ebx,eax
c002767e:	73 db                	jae    c002765b <__umoddi3+0xe7>
c0027680:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027684:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027688:	89 d7                	mov    edi,edx
c002768a:	89 c6                	mov    esi,eax
c002768c:	eb cd                	jmp    c002765b <__umoddi3+0xe7>

c002768e <__addsf3>:
c002768e:	55                   	push   ebp
c002768f:	89 e5                	mov    ebp,esp
c0027691:	57                   	push   edi
c0027692:	56                   	push   esi
c0027693:	53                   	push   ebx
c0027694:	83 ec 08             	sub    esp,0x8
c0027697:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002769a:	89 fa                	mov    edx,edi
c002769c:	89 f8                	mov    eax,edi
c002769e:	c1 f8 17             	sar    eax,0x17
c00276a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00276a4:	c1 e2 08             	shl    edx,0x8
c00276a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00276ad:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00276b0:	89 de                	mov    esi,ebx
c00276b2:	c1 fe 17             	sar    esi,0x17
c00276b5:	c1 e3 08             	shl    ebx,0x8
c00276b8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00276be:	31 f0                	xor    eax,esi
c00276c0:	0f 88 3b 01 00 00    	js     c0027801 <__addsf3+0x173>
c00276c6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00276c9:	29 f1                	sub    ecx,esi
c00276cb:	85 c9                	test   ecx,ecx
c00276cd:	7e 54                	jle    c0027723 <__addsf3+0x95>
c00276cf:	89 f0                	mov    eax,esi
c00276d1:	84 c0                	test   al,al
c00276d3:	75 10                	jne    c00276e5 <__addsf3+0x57>
c00276d5:	85 db                	test   ebx,ebx
c00276d7:	0f 84 aa 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c00276dd:	49                   	dec    ecx
c00276de:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00276e1:	74 38                	je     c002771b <__addsf3+0x8d>
c00276e3:	eb 13                	jmp    c00276f8 <__addsf3+0x6a>
c00276e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276e8:	f7 d0                	not    eax
c00276ea:	84 c0                	test   al,al
c00276ec:	0f 84 95 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c00276f2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00276f8:	83 f9 1f             	cmp    ecx,0x1f
c00276fb:	0f 8f 86 02 00 00    	jg     c0027987 <__addsf3+0x2f9>
c0027701:	89 de                	mov    esi,ebx
c0027703:	d3 ee                	shr    esi,cl
c0027705:	b8 20 00 00 00       	mov    eax,0x20
c002770a:	29 c8                	sub    eax,ecx
c002770c:	89 c1                	mov    ecx,eax
c002770e:	d3 e3                	shl    ebx,cl
c0027710:	31 c0                	xor    eax,eax
c0027712:	85 db                	test   ebx,ebx
c0027714:	0f 95 c0             	setne  al
c0027717:	09 f0                	or     eax,esi
c0027719:	01 d0                	add    eax,edx
c002771b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002771e:	e9 b6 00 00 00       	jmp    c00277d9 <__addsf3+0x14b>
c0027723:	74 5c                	je     c0027781 <__addsf3+0xf3>
c0027725:	89 f1                	mov    ecx,esi
c0027727:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002772a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002772d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027731:	75 14                	jne    c0027747 <__addsf3+0xb9>
c0027733:	85 d2                	test   edx,edx
c0027735:	0f 84 4c 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c002773b:	49                   	dec    ecx
c002773c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002773f:	0f 84 94 00 00 00    	je     c00277d9 <__addsf3+0x14b>
c0027745:	eb 12                	jmp    c0027759 <__addsf3+0xcb>
c0027747:	89 f0                	mov    eax,esi
c0027749:	f7 d0                	not    eax
c002774b:	84 c0                	test   al,al
c002774d:	0f 84 34 02 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027753:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027759:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002775c:	83 f9 1f             	cmp    ecx,0x1f
c002775f:	0f 8f 22 02 00 00    	jg     c0027987 <__addsf3+0x2f9>
c0027765:	89 d7                	mov    edi,edx
c0027767:	d3 ef                	shr    edi,cl
c0027769:	b8 20 00 00 00       	mov    eax,0x20
c002776e:	29 c8                	sub    eax,ecx
c0027770:	89 c1                	mov    ecx,eax
c0027772:	d3 e2                	shl    edx,cl
c0027774:	31 c0                	xor    eax,eax
c0027776:	85 d2                	test   edx,edx
c0027778:	0f 95 c0             	setne  al
c002777b:	09 f8                	or     eax,edi
c002777d:	01 d8                	add    eax,ebx
c002777f:	eb 58                	jmp    c00277d9 <__addsf3+0x14b>
c0027781:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027784:	8d 70 01             	lea    esi,[eax+0x1]
c0027787:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002778d:	75 32                	jne    c00277c1 <__addsf3+0x133>
c002778f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027793:	75 1f                	jne    c00277b4 <__addsf3+0x126>
c0027795:	85 d2                	test   edx,edx
c0027797:	0f 84 e0 01 00 00    	je     c002797d <__addsf3+0x2ef>
c002779d:	85 db                	test   ebx,ebx
c002779f:	0f 84 e2 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c00277a5:	89 d0                	mov    eax,edx
c00277a7:	01 d8                	add    eax,ebx
c00277a9:	0f 89 a9 01 00 00    	jns    c0027958 <__addsf3+0x2ca>
c00277af:	e9 9d 01 00 00       	jmp    c0027951 <__addsf3+0x2c3>
c00277b4:	85 d2                	test   edx,edx
c00277b6:	0f 85 cb 01 00 00    	jne    c0027987 <__addsf3+0x2f9>
c00277bc:	e9 bc 01 00 00       	jmp    c002797d <__addsf3+0x2ef>
c00277c1:	31 c0                	xor    eax,eax
c00277c3:	89 f1                	mov    ecx,esi
c00277c5:	f7 d1                	not    ecx
c00277c7:	84 c9                	test   cl,cl
c00277c9:	0f 84 90 01 00 00    	je     c002795f <__addsf3+0x2d1>
c00277cf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00277d2:	d1 e8                	shr    eax,1
c00277d4:	e9 86 01 00 00       	jmp    c002795f <__addsf3+0x2d1>
c00277d9:	85 c0                	test   eax,eax
c00277db:	0f 89 7e 01 00 00    	jns    c002795f <__addsf3+0x2d1>
c00277e1:	46                   	inc    esi
c00277e2:	89 f2                	mov    edx,esi
c00277e4:	f7 d2                	not    edx
c00277e6:	84 d2                	test   dl,dl
c00277e8:	0f 84 6f 01 00 00    	je     c002795d <__addsf3+0x2cf>
c00277ee:	89 c2                	mov    edx,eax
c00277f0:	83 e2 01             	and    edx,0x1
c00277f3:	d1 e8                	shr    eax,1
c00277f5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00277fa:	09 d0                	or     eax,edx
c00277fc:	e9 5e 01 00 00       	jmp    c002795f <__addsf3+0x2d1>
c0027801:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027805:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027808:	89 f0                	mov    eax,esi
c002780a:	0f b6 c0             	movzx  eax,al
c002780d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027810:	29 c1                	sub    ecx,eax
c0027812:	85 c9                	test   ecx,ecx
c0027814:	7e 55                	jle    c002786b <__addsf3+0x1dd>
c0027816:	85 c0                	test   eax,eax
c0027818:	75 11                	jne    c002782b <__addsf3+0x19d>
c002781a:	85 db                	test   ebx,ebx
c002781c:	0f 84 65 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027822:	49                   	dec    ecx
c0027823:	75 19                	jne    c002783e <__addsf3+0x1b0>
c0027825:	89 d0                	mov    eax,edx
c0027827:	29 d8                	sub    eax,ebx
c0027829:	eb 38                	jmp    c0027863 <__addsf3+0x1d5>
c002782b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002782e:	f7 d0                	not    eax
c0027830:	84 c0                	test   al,al
c0027832:	0f 84 4f 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027838:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002783e:	83 f9 1f             	cmp    ecx,0x1f
c0027841:	0f 8f 40 01 00 00    	jg     c0027987 <__addsf3+0x2f9>
c0027847:	89 de                	mov    esi,ebx
c0027849:	d3 ee                	shr    esi,cl
c002784b:	b8 20 00 00 00       	mov    eax,0x20
c0027850:	29 c8                	sub    eax,ecx
c0027852:	89 c1                	mov    ecx,eax
c0027854:	d3 e3                	shl    ebx,cl
c0027856:	31 c0                	xor    eax,eax
c0027858:	85 db                	test   ebx,ebx
c002785a:	0f 95 c0             	setne  al
c002785d:	09 f0                	or     eax,esi
c002785f:	29 c2                	sub    edx,eax
c0027861:	89 d0                	mov    eax,edx
c0027863:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027866:	e9 af 00 00 00       	jmp    c002791a <__addsf3+0x28c>
c002786b:	74 5c                	je     c00278c9 <__addsf3+0x23b>
c002786d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027870:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027873:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027877:	75 14                	jne    c002788d <__addsf3+0x1ff>
c0027879:	85 d2                	test   edx,edx
c002787b:	0f 84 06 01 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027881:	48                   	dec    eax
c0027882:	75 1b                	jne    c002789f <__addsf3+0x211>
c0027884:	89 d8                	mov    eax,ebx
c0027886:	29 d0                	sub    eax,edx
c0027888:	e9 8d 00 00 00       	jmp    c002791a <__addsf3+0x28c>
c002788d:	89 f1                	mov    ecx,esi
c002788f:	f7 d1                	not    ecx
c0027891:	84 c9                	test   cl,cl
c0027893:	0f 84 ee 00 00 00    	je     c0027987 <__addsf3+0x2f9>
c0027899:	81 ca 00 00 00 80    	or     edx,0x80000000
c002789f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278a2:	83 f8 1f             	cmp    eax,0x1f
c00278a5:	0f 8f dc 00 00 00    	jg     c0027987 <__addsf3+0x2f9>
c00278ab:	89 d7                	mov    edi,edx
c00278ad:	88 c1                	mov    cl,al
c00278af:	d3 ef                	shr    edi,cl
c00278b1:	b9 20 00 00 00       	mov    ecx,0x20
c00278b6:	29 c1                	sub    ecx,eax
c00278b8:	d3 e2                	shl    edx,cl
c00278ba:	31 c0                	xor    eax,eax
c00278bc:	85 d2                	test   edx,edx
c00278be:	0f 95 c0             	setne  al
c00278c1:	09 f8                	or     eax,edi
c00278c3:	29 c3                	sub    ebx,eax
c00278c5:	89 d8                	mov    eax,ebx
c00278c7:	eb 51                	jmp    c002791a <__addsf3+0x28c>
c00278c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00278cc:	40                   	inc    eax
c00278cd:	a8 fe                	test   al,0xfe
c00278cf:	75 3d                	jne    c002790e <__addsf3+0x280>
c00278d1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00278d5:	0f 85 a7 00 00 00    	jne    c0027982 <__addsf3+0x2f4>
c00278db:	85 d2                	test   edx,edx
c00278dd:	75 12                	jne    c00278f1 <__addsf3+0x263>
c00278df:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278e2:	85 db                	test   ebx,ebx
c00278e4:	0f 85 9d 00 00 00    	jne    c0027987 <__addsf3+0x2f9>
c00278ea:	31 ff                	xor    edi,edi
c00278ec:	e9 96 00 00 00       	jmp    c0027987 <__addsf3+0x2f9>
c00278f1:	85 db                	test   ebx,ebx
c00278f3:	0f 84 8e 00 00 00    	je     c0027987 <__addsf3+0x2f9>
c00278f9:	89 d0                	mov    eax,edx
c00278fb:	29 d8                	sub    eax,ebx
c00278fd:	79 06                	jns    c0027905 <__addsf3+0x277>
c00278ff:	89 d8                	mov    eax,ebx
c0027901:	29 d0                	sub    eax,edx
c0027903:	eb 5a                	jmp    c002795f <__addsf3+0x2d1>
c0027905:	bf 00 00 00 00       	mov    edi,0x0
c002790a:	74 7b                	je     c0027987 <__addsf3+0x2f9>
c002790c:	eb 4a                	jmp    c0027958 <__addsf3+0x2ca>
c002790e:	89 d0                	mov    eax,edx
c0027910:	29 d8                	sub    eax,ebx
c0027912:	79 12                	jns    c0027926 <__addsf3+0x298>
c0027914:	89 d8                	mov    eax,ebx
c0027916:	29 d0                	sub    eax,edx
c0027918:	eb 09                	jmp    c0027923 <__addsf3+0x295>
c002791a:	85 c0                	test   eax,eax
c002791c:	79 41                	jns    c002795f <__addsf3+0x2d1>
c002791e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027923:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027926:	31 f6                	xor    esi,esi
c0027928:	85 c0                	test   eax,eax
c002792a:	74 33                	je     c002795f <__addsf3+0x2d1>
c002792c:	0f bd c8             	bsr    ecx,eax
c002792f:	83 f1 1f             	xor    ecx,0x1f
c0027932:	d3 e0                	shl    eax,cl
c0027934:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027938:	39 ca                	cmp    edx,ecx
c002793a:	7f 10                	jg     c002794c <__addsf3+0x2be>
c002793c:	29 d1                	sub    ecx,edx
c002793e:	41                   	inc    ecx
c002793f:	d3 e8                	shr    eax,cl
c0027941:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027944:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002794a:	eb 13                	jmp    c002795f <__addsf3+0x2d1>
c002794c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002794f:	29 ce                	sub    esi,ecx
c0027951:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027956:	eb 07                	jmp    c002795f <__addsf3+0x2d1>
c0027958:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002795b:	eb 02                	jmp    c002795f <__addsf3+0x2d1>
c002795d:	31 c0                	xor    eax,eax
c002795f:	89 c2                	mov    edx,eax
c0027961:	c1 ea 08             	shr    edx,0x8
c0027964:	a8 7f                	test   al,0x7f
c0027966:	0f 95 c1             	setne  cl
c0027969:	09 d1                	or     ecx,edx
c002796b:	83 e1 01             	and    ecx,0x1
c002796e:	c1 e8 07             	shr    eax,0x7
c0027971:	21 c8                	and    eax,ecx
c0027973:	c1 e6 17             	shl    esi,0x17
c0027976:	09 d6                	or     esi,edx
c0027978:	8d 3c 30             	lea    edi,[eax+esi*1]
c002797b:	eb 0a                	jmp    c0027987 <__addsf3+0x2f9>
c002797d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027980:	eb 05                	jmp    c0027987 <__addsf3+0x2f9>
c0027982:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027987:	89 f8                	mov    eax,edi
c0027989:	5a                   	pop    edx
c002798a:	59                   	pop    ecx
c002798b:	5b                   	pop    ebx
c002798c:	5e                   	pop    esi
c002798d:	5f                   	pop    edi
c002798e:	5d                   	pop    ebp
c002798f:	c3                   	ret    

c0027990 <__subsf3>:
c0027990:	55                   	push   ebp
c0027991:	89 e5                	mov    ebp,esp
c0027993:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027996:	05 00 00 00 80       	add    eax,0x80000000
c002799b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002799e:	5d                   	pop    ebp
c002799f:	e9 ea fc ff ff       	jmp    c002768e <__addsf3>

c00279a4 <__negsf2>:
c00279a4:	55                   	push   ebp
c00279a5:	89 e5                	mov    ebp,esp
c00279a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00279aa:	05 00 00 00 80       	add    eax,0x80000000
c00279af:	5d                   	pop    ebp
c00279b0:	c3                   	ret    

c00279b1 <__mulsf3>:
c00279b1:	55                   	push   ebp
c00279b2:	89 e5                	mov    ebp,esp
c00279b4:	57                   	push   edi
c00279b5:	56                   	push   esi
c00279b6:	53                   	push   ebx
c00279b7:	83 ec 1c             	sub    esp,0x1c
c00279ba:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00279bd:	89 f0                	mov    eax,esi
c00279bf:	89 f1                	mov    ecx,esi
c00279c1:	c1 f9 17             	sar    ecx,0x17
c00279c4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00279c7:	c1 e0 08             	shl    eax,0x8
c00279ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00279cf:	89 c1                	mov    ecx,eax
c00279d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279d4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279d7:	89 c7                	mov    edi,eax
c00279d9:	c1 ff 17             	sar    edi,0x17
c00279dc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00279e0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00279e3:	89 f8                	mov    eax,edi
c00279e5:	0f b6 c0             	movzx  eax,al
c00279e8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00279eb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00279ef:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00279f2:	42                   	inc    edx
c00279f3:	80 e2 fe             	and    dl,0xfe
c00279f6:	75 7b                	jne    c0027a73 <__mulsf3+0xc2>
c00279f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00279fc:	74 54                	je     c0027a52 <__mulsf3+0xa1>
c00279fe:	85 c9                	test   ecx,ecx
c0027a00:	0f 85 64 01 00 00    	jne    c0027b6a <__mulsf3+0x1b9>
c0027a06:	8d 57 01             	lea    edx,[edi+0x1]
c0027a09:	80 e2 fe             	and    dl,0xfe
c0027a0c:	75 1f                	jne    c0027a2d <__mulsf3+0x7c>
c0027a0e:	85 c0                	test   eax,eax
c0027a10:	b8 00 00 00 00       	mov    eax,0x0
c0027a15:	74 29                	je     c0027a40 <__mulsf3+0x8f>
c0027a17:	53                   	push   ebx
c0027a18:	53                   	push   ebx
c0027a19:	50                   	push   eax
c0027a1a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a1d:	e8 96 05 00 00       	call   c0027fb8 <__nesf2>
c0027a22:	83 c4 10             	add    esp,0x10
c0027a25:	85 c0                	test   eax,eax
c0027a27:	0f 85 3a 01 00 00    	jne    c0027b67 <__mulsf3+0x1b6>
c0027a2d:	85 ff                	test   edi,edi
c0027a2f:	0f 89 35 01 00 00    	jns    c0027b6a <__mulsf3+0x1b9>
c0027a35:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027a3b:	e9 2a 01 00 00       	jmp    c0027b6a <__mulsf3+0x1b9>
c0027a40:	51                   	push   ecx
c0027a41:	51                   	push   ecx
c0027a42:	50                   	push   eax
c0027a43:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a46:	e8 6d 05 00 00       	call   c0027fb8 <__nesf2>
c0027a4b:	83 c4 10             	add    esp,0x10
c0027a4e:	85 c0                	test   eax,eax
c0027a50:	eb 15                	jmp    c0027a67 <__mulsf3+0xb6>
c0027a52:	85 c9                	test   ecx,ecx
c0027a54:	74 0b                	je     c0027a61 <__mulsf3+0xb0>
c0027a56:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027a59:	01 c9                	add    ecx,ecx
c0027a5b:	78 16                	js     c0027a73 <__mulsf3+0xc2>
c0027a5d:	89 d3                	mov    ebx,edx
c0027a5f:	eb f5                	jmp    c0027a56 <__mulsf3+0xa5>
c0027a61:	89 f8                	mov    eax,edi
c0027a63:	f7 d0                	not    eax
c0027a65:	84 c0                	test   al,al
c0027a67:	75 c4                	jne    c0027a2d <__mulsf3+0x7c>
c0027a69:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027a6e:	e9 f7 00 00 00       	jmp    c0027b6a <__mulsf3+0x1b9>
c0027a73:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027a76:	c1 e6 08             	shl    esi,0x8
c0027a79:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027a7f:	8d 57 01             	lea    edx,[edi+0x1]
c0027a82:	80 e2 fe             	and    dl,0xfe
c0027a85:	75 63                	jne    c0027aea <__mulsf3+0x139>
c0027a87:	85 c0                	test   eax,eax
c0027a89:	74 2f                	je     c0027aba <__mulsf3+0x109>
c0027a8b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027a8f:	0f 89 d2 00 00 00    	jns    c0027b67 <__mulsf3+0x1b6>
c0027a95:	52                   	push   edx
c0027a96:	52                   	push   edx
c0027a97:	6a 00                	push   0x0
c0027a99:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a9c:	e8 dc 04 00 00       	call   c0027f7d <__eqsf2>
c0027aa1:	83 c4 10             	add    esp,0x10
c0027aa4:	85 c0                	test   eax,eax
c0027aa6:	0f 85 bb 00 00 00    	jne    c0027b67 <__mulsf3+0x1b6>
c0027aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027aaf:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027ab5:	e9 b0 00 00 00       	jmp    c0027b6a <__mulsf3+0x1b9>
c0027aba:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027abd:	50                   	push   eax
c0027abe:	50                   	push   eax
c0027abf:	6a 00                	push   0x0
c0027ac1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ac4:	e8 b4 04 00 00       	call   c0027f7d <__eqsf2>
c0027ac9:	83 c4 10             	add    esp,0x10
c0027acc:	85 c0                	test   eax,eax
c0027ace:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ad1:	75 0c                	jne    c0027adf <__mulsf3+0x12e>
c0027ad3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ad7:	0f 89 8a 00 00 00    	jns    c0027b67 <__mulsf3+0x1b6>
c0027add:	eb cd                	jmp    c0027aac <__mulsf3+0xfb>
c0027adf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ae2:	01 f6                	add    esi,esi
c0027ae4:	78 04                	js     c0027aea <__mulsf3+0x139>
c0027ae6:	89 c3                	mov    ebx,eax
c0027ae8:	eb f5                	jmp    c0027adf <__mulsf3+0x12e>
c0027aea:	89 c8                	mov    eax,ecx
c0027aec:	0d 00 00 00 80       	or     eax,0x80000000
c0027af1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027af7:	f7 e6                	mul    esi
c0027af9:	85 c0                	test   eax,eax
c0027afb:	0f 95 c0             	setne  al
c0027afe:	0f b6 c0             	movzx  eax,al
c0027b01:	09 c2                	or     edx,eax
c0027b03:	78 03                	js     c0027b08 <__mulsf3+0x157>
c0027b05:	01 d2                	add    edx,edx
c0027b07:	4b                   	dec    ebx
c0027b08:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027b0e:	7f 22                	jg     c0027b32 <__mulsf3+0x181>
c0027b10:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027b16:	85 db                	test   ebx,ebx
c0027b18:	7f 23                	jg     c0027b3d <__mulsf3+0x18c>
c0027b1a:	83 fb e9             	cmp    ebx,0xffffffe9
c0027b1d:	7c 1a                	jl     c0027b39 <__mulsf3+0x188>
c0027b1f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027b25:	b9 01 00 00 00       	mov    ecx,0x1
c0027b2a:	29 d9                	sub    ecx,ebx
c0027b2c:	d3 ea                	shr    edx,cl
c0027b2e:	31 db                	xor    ebx,ebx
c0027b30:	eb 0b                	jmp    c0027b3d <__mulsf3+0x18c>
c0027b32:	bb ff 00 00 00       	mov    ebx,0xff
c0027b37:	eb 02                	jmp    c0027b3b <__mulsf3+0x18a>
c0027b39:	31 db                	xor    ebx,ebx
c0027b3b:	31 d2                	xor    edx,edx
c0027b3d:	89 d0                	mov    eax,edx
c0027b3f:	c1 e8 08             	shr    eax,0x8
c0027b42:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b45:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b4b:	09 fb                	or     ebx,edi
c0027b4d:	c1 e3 17             	shl    ebx,0x17
c0027b50:	09 c3                	or     ebx,eax
c0027b52:	f6 c2 7f             	test   dl,0x7f
c0027b55:	0f 95 c1             	setne  cl
c0027b58:	09 c8                	or     eax,ecx
c0027b5a:	83 e0 01             	and    eax,0x1
c0027b5d:	c1 ea 07             	shr    edx,0x7
c0027b60:	21 c2                	and    edx,eax
c0027b62:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027b65:	eb 03                	jmp    c0027b6a <__mulsf3+0x1b9>
c0027b67:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027b6a:	89 f0                	mov    eax,esi
c0027b6c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b6f:	5b                   	pop    ebx
c0027b70:	5e                   	pop    esi
c0027b71:	5f                   	pop    edi
c0027b72:	5d                   	pop    ebp
c0027b73:	c3                   	ret    

c0027b74 <__divsf3>:
c0027b74:	55                   	push   ebp
c0027b75:	89 e5                	mov    ebp,esp
c0027b77:	57                   	push   edi
c0027b78:	56                   	push   esi
c0027b79:	53                   	push   ebx
c0027b7a:	83 ec 1c             	sub    esp,0x1c
c0027b7d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b80:	89 d8                	mov    eax,ebx
c0027b82:	89 d9                	mov    ecx,ebx
c0027b84:	c1 f9 17             	sar    ecx,0x17
c0027b87:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b8a:	c1 e0 08             	shl    eax,0x8
c0027b8d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b92:	89 c1                	mov    ecx,eax
c0027b94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b97:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b9a:	89 c7                	mov    edi,eax
c0027b9c:	c1 ff 17             	sar    edi,0x17
c0027b9f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027ba3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027ba6:	89 f8                	mov    eax,edi
c0027ba8:	0f b6 c0             	movzx  eax,al
c0027bab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bae:	29 c6                	sub    esi,eax
c0027bb0:	83 c6 7f             	add    esi,0x7f
c0027bb3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027bb6:	42                   	inc    edx
c0027bb7:	80 e2 fe             	and    dl,0xfe
c0027bba:	0f 85 9c 00 00 00    	jne    c0027c5c <__divsf3+0xe8>
c0027bc0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027bc4:	74 33                	je     c0027bf9 <__divsf3+0x85>
c0027bc6:	85 c9                	test   ecx,ecx
c0027bc8:	0f 85 c7 01 00 00    	jne    c0027d95 <__divsf3+0x221>
c0027bce:	8d 57 01             	lea    edx,[edi+0x1]
c0027bd1:	80 e2 fe             	and    dl,0xfe
c0027bd4:	75 2f                	jne    c0027c05 <__divsf3+0x91>
c0027bd6:	85 c0                	test   eax,eax
c0027bd8:	74 2b                	je     c0027c05 <__divsf3+0x91>
c0027bda:	51                   	push   ecx
c0027bdb:	51                   	push   ecx
c0027bdc:	6a 00                	push   0x0
c0027bde:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027be1:	e8 d2 03 00 00       	call   c0027fb8 <__nesf2>
c0027be6:	83 c4 10             	add    esp,0x10
c0027be9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027bec:	85 c0                	test   eax,eax
c0027bee:	0f 85 a1 01 00 00    	jne    c0027d95 <__divsf3+0x221>
c0027bf4:	e9 92 01 00 00       	jmp    c0027d8b <__divsf3+0x217>
c0027bf9:	85 c9                	test   ecx,ecx
c0027bfb:	75 1b                	jne    c0027c18 <__divsf3+0xa4>
c0027bfd:	8d 57 01             	lea    edx,[edi+0x1]
c0027c00:	80 e2 fe             	and    dl,0xfe
c0027c03:	74 1e                	je     c0027c23 <__divsf3+0xaf>
c0027c05:	85 ff                	test   edi,edi
c0027c07:	0f 89 88 01 00 00    	jns    c0027d95 <__divsf3+0x221>
c0027c0d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027c13:	e9 7d 01 00 00       	jmp    c0027d95 <__divsf3+0x221>
c0027c18:	8d 56 ff             	lea    edx,[esi-0x1]
c0027c1b:	01 c9                	add    ecx,ecx
c0027c1d:	78 3d                	js     c0027c5c <__divsf3+0xe8>
c0027c1f:	89 d6                	mov    esi,edx
c0027c21:	eb f5                	jmp    c0027c18 <__divsf3+0xa4>
c0027c23:	85 c0                	test   eax,eax
c0027c25:	b8 00 00 00 00       	mov    eax,0x0
c0027c2a:	74 18                	je     c0027c44 <__divsf3+0xd0>
c0027c2c:	52                   	push   edx
c0027c2d:	52                   	push   edx
c0027c2e:	50                   	push   eax
c0027c2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c32:	e8 81 03 00 00       	call   c0027fb8 <__nesf2>
c0027c37:	83 c4 10             	add    esp,0x10
c0027c3a:	85 c0                	test   eax,eax
c0027c3c:	0f 85 50 01 00 00    	jne    c0027d92 <__divsf3+0x21e>
c0027c42:	eb c1                	jmp    c0027c05 <__divsf3+0x91>
c0027c44:	56                   	push   esi
c0027c45:	56                   	push   esi
c0027c46:	50                   	push   eax
c0027c47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c4a:	e8 69 03 00 00       	call   c0027fb8 <__nesf2>
c0027c4f:	83 c4 10             	add    esp,0x10
c0027c52:	85 c0                	test   eax,eax
c0027c54:	0f 84 31 01 00 00    	je     c0027d8b <__divsf3+0x217>
c0027c5a:	eb a9                	jmp    c0027c05 <__divsf3+0x91>
c0027c5c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027c5f:	c1 e3 08             	shl    ebx,0x8
c0027c62:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c68:	8d 57 01             	lea    edx,[edi+0x1]
c0027c6b:	80 e2 fe             	and    dl,0xfe
c0027c6e:	75 71                	jne    c0027ce1 <__divsf3+0x16d>
c0027c70:	85 c0                	test   eax,eax
c0027c72:	ba 00 00 00 00       	mov    edx,0x0
c0027c77:	74 2f                	je     c0027ca8 <__divsf3+0x134>
c0027c79:	51                   	push   ecx
c0027c7a:	51                   	push   ecx
c0027c7b:	52                   	push   edx
c0027c7c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c7f:	e8 f9 02 00 00       	call   c0027f7d <__eqsf2>
c0027c84:	83 c4 10             	add    esp,0x10
c0027c87:	85 c0                	test   eax,eax
c0027c89:	0f 85 03 01 00 00    	jne    c0027d92 <__divsf3+0x21e>
c0027c8f:	31 d2                	xor    edx,edx
c0027c91:	89 d3                	mov    ebx,edx
c0027c93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c96:	31 f8                	xor    eax,edi
c0027c98:	0f 89 f7 00 00 00    	jns    c0027d95 <__divsf3+0x221>
c0027c9e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027ca3:	e9 ed 00 00 00       	jmp    c0027d95 <__divsf3+0x221>
c0027ca8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027cab:	50                   	push   eax
c0027cac:	50                   	push   eax
c0027cad:	52                   	push   edx
c0027cae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cb1:	e8 c7 02 00 00       	call   c0027f7d <__eqsf2>
c0027cb6:	83 c4 10             	add    esp,0x10
c0027cb9:	85 c0                	test   eax,eax
c0027cbb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027cbe:	75 16                	jne    c0027cd6 <__divsf3+0x162>
c0027cc0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027cc3:	31 fb                	xor    ebx,edi
c0027cc5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027ccb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027cd1:	e9 bf 00 00 00       	jmp    c0027d95 <__divsf3+0x221>
c0027cd6:	8d 46 01             	lea    eax,[esi+0x1]
c0027cd9:	01 db                	add    ebx,ebx
c0027cdb:	78 04                	js     c0027ce1 <__divsf3+0x16d>
c0027cdd:	89 c6                	mov    esi,eax
c0027cdf:	eb f5                	jmp    c0027cd6 <__divsf3+0x162>
c0027ce1:	89 c8                	mov    eax,ecx
c0027ce3:	0d 00 00 00 80       	or     eax,0x80000000
c0027ce8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027cee:	31 d2                	xor    edx,edx
c0027cf0:	39 d8                	cmp    eax,ebx
c0027cf2:	72 07                	jb     c0027cfb <__divsf3+0x187>
c0027cf4:	29 d8                	sub    eax,ebx
c0027cf6:	ba 01 00 00 00       	mov    edx,0x1
c0027cfb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027d02:	01 d2                	add    edx,edx
c0027d04:	89 c1                	mov    ecx,eax
c0027d06:	01 c0                	add    eax,eax
c0027d08:	85 c9                	test   ecx,ecx
c0027d0a:	78 04                	js     c0027d10 <__divsf3+0x19c>
c0027d0c:	39 c3                	cmp    ebx,eax
c0027d0e:	77 05                	ja     c0027d15 <__divsf3+0x1a1>
c0027d10:	29 d8                	sub    eax,ebx
c0027d12:	83 ca 01             	or     edx,0x1
c0027d15:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027d18:	75 e8                	jne    c0027d02 <__divsf3+0x18e>
c0027d1a:	85 c0                	test   eax,eax
c0027d1c:	0f 95 c0             	setne  al
c0027d1f:	0f b6 c0             	movzx  eax,al
c0027d22:	c1 e2 06             	shl    edx,0x6
c0027d25:	09 c2                	or     edx,eax
c0027d27:	78 03                	js     c0027d2c <__divsf3+0x1b8>
c0027d29:	01 d2                	add    edx,edx
c0027d2b:	4e                   	dec    esi
c0027d2c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027d32:	7f 22                	jg     c0027d56 <__divsf3+0x1e2>
c0027d34:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d3a:	85 f6                	test   esi,esi
c0027d3c:	7f 23                	jg     c0027d61 <__divsf3+0x1ed>
c0027d3e:	83 fe e9             	cmp    esi,0xffffffe9
c0027d41:	7c 1a                	jl     c0027d5d <__divsf3+0x1e9>
c0027d43:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d49:	b9 01 00 00 00       	mov    ecx,0x1
c0027d4e:	29 f1                	sub    ecx,esi
c0027d50:	d3 ea                	shr    edx,cl
c0027d52:	31 f6                	xor    esi,esi
c0027d54:	eb 0b                	jmp    c0027d61 <__divsf3+0x1ed>
c0027d56:	be ff 00 00 00       	mov    esi,0xff
c0027d5b:	eb 02                	jmp    c0027d5f <__divsf3+0x1eb>
c0027d5d:	31 f6                	xor    esi,esi
c0027d5f:	31 d2                	xor    edx,edx
c0027d61:	89 d0                	mov    eax,edx
c0027d63:	c1 e8 08             	shr    eax,0x8
c0027d66:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027d69:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027d6f:	09 fe                	or     esi,edi
c0027d71:	c1 e6 17             	shl    esi,0x17
c0027d74:	09 c6                	or     esi,eax
c0027d76:	f6 c2 7f             	test   dl,0x7f
c0027d79:	0f 95 c1             	setne  cl
c0027d7c:	09 c8                	or     eax,ecx
c0027d7e:	83 e0 01             	and    eax,0x1
c0027d81:	c1 ea 07             	shr    edx,0x7
c0027d84:	21 c2                	and    edx,eax
c0027d86:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027d89:	eb 0a                	jmp    c0027d95 <__divsf3+0x221>
c0027d8b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027d90:	eb 03                	jmp    c0027d95 <__divsf3+0x221>
c0027d92:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027d95:	89 d8                	mov    eax,ebx
c0027d97:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d9a:	5b                   	pop    ebx
c0027d9b:	5e                   	pop    esi
c0027d9c:	5f                   	pop    edi
c0027d9d:	5d                   	pop    ebp
c0027d9e:	c3                   	ret    

c0027d9f <__floatsisf>:
c0027d9f:	55                   	push   ebp
c0027da0:	89 e5                	mov    ebp,esp
c0027da2:	53                   	push   ebx
c0027da3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027da6:	85 d2                	test   edx,edx
c0027da8:	7e 2b                	jle    c0027dd5 <__floatsisf+0x36>
c0027daa:	0f bd ca             	bsr    ecx,edx
c0027dad:	83 f1 1f             	xor    ecx,0x1f
c0027db0:	d3 e2                	shl    edx,cl
c0027db2:	89 d0                	mov    eax,edx
c0027db4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027db9:	89 c3                	mov    ebx,eax
c0027dbb:	c1 eb 08             	shr    ebx,0x8
c0027dbe:	80 e2 7f             	and    dl,0x7f
c0027dc1:	0f 95 c2             	setne  dl
c0027dc4:	09 da                	or     edx,ebx
c0027dc6:	83 e2 01             	and    edx,0x1
c0027dc9:	c1 e8 07             	shr    eax,0x7
c0027dcc:	21 c2                	and    edx,eax
c0027dce:	b8 9e 00 00 00       	mov    eax,0x9e
c0027dd3:	eb 32                	jmp    c0027e07 <__floatsisf+0x68>
c0027dd5:	b8 00 00 00 00       	mov    eax,0x0
c0027dda:	74 34                	je     c0027e10 <__floatsisf+0x71>
c0027ddc:	f7 da                	neg    edx
c0027dde:	0f bd ca             	bsr    ecx,edx
c0027de1:	83 f1 1f             	xor    ecx,0x1f
c0027de4:	d3 e2                	shl    edx,cl
c0027de6:	89 d0                	mov    eax,edx
c0027de8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ded:	89 c3                	mov    ebx,eax
c0027def:	c1 eb 08             	shr    ebx,0x8
c0027df2:	80 e2 7f             	and    dl,0x7f
c0027df5:	0f 95 c2             	setne  dl
c0027df8:	09 da                	or     edx,ebx
c0027dfa:	83 e2 01             	and    edx,0x1
c0027dfd:	c1 e8 07             	shr    eax,0x7
c0027e00:	21 c2                	and    edx,eax
c0027e02:	b8 9e 01 00 00       	mov    eax,0x19e
c0027e07:	29 c8                	sub    eax,ecx
c0027e09:	c1 e0 17             	shl    eax,0x17
c0027e0c:	09 d8                	or     eax,ebx
c0027e0e:	01 d0                	add    eax,edx
c0027e10:	5b                   	pop    ebx
c0027e11:	5d                   	pop    ebp
c0027e12:	c3                   	ret    

c0027e13 <__floatunsisf>:
c0027e13:	55                   	push   ebp
c0027e14:	89 e5                	mov    ebp,esp
c0027e16:	53                   	push   ebx
c0027e17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e1a:	31 c0                	xor    eax,eax
c0027e1c:	85 d2                	test   edx,edx
c0027e1e:	74 32                	je     c0027e52 <__floatunsisf+0x3f>
c0027e20:	0f bd ca             	bsr    ecx,edx
c0027e23:	83 f1 1f             	xor    ecx,0x1f
c0027e26:	d3 e2                	shl    edx,cl
c0027e28:	89 d0                	mov    eax,edx
c0027e2a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027e2f:	89 c3                	mov    ebx,eax
c0027e31:	c1 eb 08             	shr    ebx,0x8
c0027e34:	80 e2 7f             	and    dl,0x7f
c0027e37:	0f 95 c2             	setne  dl
c0027e3a:	09 da                	or     edx,ebx
c0027e3c:	83 e2 01             	and    edx,0x1
c0027e3f:	c1 e8 07             	shr    eax,0x7
c0027e42:	21 c2                	and    edx,eax
c0027e44:	b8 9e 00 00 00       	mov    eax,0x9e
c0027e49:	29 c8                	sub    eax,ecx
c0027e4b:	c1 e0 17             	shl    eax,0x17
c0027e4e:	09 d8                	or     eax,ebx
c0027e50:	01 d0                	add    eax,edx
c0027e52:	5b                   	pop    ebx
c0027e53:	5d                   	pop    ebp
c0027e54:	c3                   	ret    

c0027e55 <__fixsfsi>:
c0027e55:	55                   	push   ebp
c0027e56:	89 e5                	mov    ebp,esp
c0027e58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027e5b:	89 d1                	mov    ecx,edx
c0027e5d:	c1 e1 08             	shl    ecx,0x8
c0027e60:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027e66:	c1 fa 17             	sar    edx,0x17
c0027e69:	78 1c                	js     c0027e87 <__fixsfsi+0x32>
c0027e6b:	83 ea 7f             	sub    edx,0x7f
c0027e6e:	31 c0                	xor    eax,eax
c0027e70:	83 fa 1e             	cmp    edx,0x1e
c0027e73:	77 40                	ja     c0027eb5 <__fixsfsi+0x60>
c0027e75:	89 c8                	mov    eax,ecx
c0027e77:	0d 00 00 00 80       	or     eax,0x80000000
c0027e7c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e81:	29 d1                	sub    ecx,edx
c0027e83:	d3 e8                	shr    eax,cl
c0027e85:	eb 2e                	jmp    c0027eb5 <__fixsfsi+0x60>
c0027e87:	31 c0                	xor    eax,eax
c0027e89:	81 c2 81 00 00 00    	add    edx,0x81
c0027e8f:	78 24                	js     c0027eb5 <__fixsfsi+0x60>
c0027e91:	83 fa 1e             	cmp    edx,0x1e
c0027e94:	7e 09                	jle    c0027e9f <__fixsfsi+0x4a>
c0027e96:	83 fa 1f             	cmp    edx,0x1f
c0027e99:	75 18                	jne    c0027eb3 <__fixsfsi+0x5e>
c0027e9b:	85 c9                	test   ecx,ecx
c0027e9d:	75 14                	jne    c0027eb3 <__fixsfsi+0x5e>
c0027e9f:	89 c8                	mov    eax,ecx
c0027ea1:	0d 00 00 00 80       	or     eax,0x80000000
c0027ea6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027eab:	29 d1                	sub    ecx,edx
c0027ead:	d3 e8                	shr    eax,cl
c0027eaf:	f7 d8                	neg    eax
c0027eb1:	eb 02                	jmp    c0027eb5 <__fixsfsi+0x60>
c0027eb3:	31 c0                	xor    eax,eax
c0027eb5:	5d                   	pop    ebp
c0027eb6:	c3                   	ret    

c0027eb7 <__fixunssfsi>:
c0027eb7:	55                   	push   ebp
c0027eb8:	89 e5                	mov    ebp,esp
c0027eba:	53                   	push   ebx
c0027ebb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ebe:	89 d3                	mov    ebx,edx
c0027ec0:	c1 fb 17             	sar    ebx,0x17
c0027ec3:	83 eb 7f             	sub    ebx,0x7f
c0027ec6:	31 c0                	xor    eax,eax
c0027ec8:	83 fb 1f             	cmp    ebx,0x1f
c0027ecb:	77 18                	ja     c0027ee5 <__fixunssfsi+0x2e>
c0027ecd:	89 d0                	mov    eax,edx
c0027ecf:	c1 e0 08             	shl    eax,0x8
c0027ed2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027ed7:	0d 00 00 00 80       	or     eax,0x80000000
c0027edc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ee1:	29 d9                	sub    ecx,ebx
c0027ee3:	d3 e8                	shr    eax,cl
c0027ee5:	5b                   	pop    ebx
c0027ee6:	5d                   	pop    ebp
c0027ee7:	c3                   	ret    

c0027ee8 <__cmpsf2>:
c0027ee8:	55                   	push   ebp
c0027ee9:	89 e5                	mov    ebp,esp
c0027eeb:	57                   	push   edi
c0027eec:	56                   	push   esi
c0027eed:	53                   	push   ebx
c0027eee:	83 ec 24             	sub    esp,0x24
c0027ef1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ef4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ef7:	e8 4f 10 00 00       	call   c0028f4b <__truncdfsf2>
c0027efc:	5a                   	pop    edx
c0027efd:	59                   	pop    ecx
c0027efe:	89 c3                	mov    ebx,eax
c0027f00:	c1 e8 17             	shr    eax,0x17
c0027f03:	0f b6 f0             	movzx  esi,al
c0027f06:	89 d8                	mov    eax,ebx
c0027f08:	c1 e8 1f             	shr    eax,0x1f
c0027f0b:	31 c6                	xor    esi,eax
c0027f0d:	c1 e3 08             	shl    ebx,0x8
c0027f10:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027f13:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027f16:	e8 30 10 00 00       	call   c0028f4b <__truncdfsf2>
c0027f1b:	83 c4 10             	add    esp,0x10
c0027f1e:	89 c1                	mov    ecx,eax
c0027f20:	c1 e9 17             	shr    ecx,0x17
c0027f23:	0f b6 c9             	movzx  ecx,cl
c0027f26:	89 c7                	mov    edi,eax
c0027f28:	c1 ef 1f             	shr    edi,0x1f
c0027f2b:	89 ca                	mov    edx,ecx
c0027f2d:	31 fa                	xor    edx,edi
c0027f2f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f32:	c1 e0 08             	shl    eax,0x8
c0027f35:	89 c2                	mov    edx,eax
c0027f37:	89 d8                	mov    eax,ebx
c0027f39:	09 d0                	or     eax,edx
c0027f3b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027f40:	09 f0                	or     eax,esi
c0027f42:	75 08                	jne    c0027f4c <__cmpsf2+0x64>
c0027f44:	31 c0                	xor    eax,eax
c0027f46:	39 f9                	cmp    ecx,edi
c0027f48:	75 0c                	jne    c0027f56 <__cmpsf2+0x6e>
c0027f4a:	eb 29                	jmp    c0027f75 <__cmpsf2+0x8d>
c0027f4c:	b8 01 00 00 00       	mov    eax,0x1
c0027f51:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f54:	7f 1f                	jg     c0027f75 <__cmpsf2+0x8d>
c0027f56:	83 c8 ff             	or     eax,0xffffffff
c0027f59:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027f5c:	7c 17                	jl     c0027f75 <__cmpsf2+0x8d>
c0027f5e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027f64:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027f6a:	b8 01 00 00 00       	mov    eax,0x1
c0027f6f:	39 d3                	cmp    ebx,edx
c0027f71:	77 02                	ja     c0027f75 <__cmpsf2+0x8d>
c0027f73:	19 c0                	sbb    eax,eax
c0027f75:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f78:	5b                   	pop    ebx
c0027f79:	5e                   	pop    esi
c0027f7a:	5f                   	pop    edi
c0027f7b:	5d                   	pop    ebp
c0027f7c:	c3                   	ret    

c0027f7d <__eqsf2>:
c0027f7d:	55                   	push   ebp
c0027f7e:	89 e5                	mov    ebp,esp
c0027f80:	83 ec 24             	sub    esp,0x24
c0027f83:	6a 01                	push   0x1
c0027f85:	83 ec 0c             	sub    esp,0xc
c0027f88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027f8b:	e8 df 10 00 00       	call   c002906f <__extendsfdf2>
c0027f90:	83 c4 10             	add    esp,0x10
c0027f93:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027f96:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027f99:	52                   	push   edx
c0027f9a:	50                   	push   eax
c0027f9b:	50                   	push   eax
c0027f9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027f9f:	e8 cb 10 00 00       	call   c002906f <__extendsfdf2>
c0027fa4:	59                   	pop    ecx
c0027fa5:	59                   	pop    ecx
c0027fa6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fa9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fac:	52                   	push   edx
c0027fad:	50                   	push   eax
c0027fae:	e8 35 ff ff ff       	call   c0027ee8 <__cmpsf2>
c0027fb3:	83 c4 20             	add    esp,0x20
c0027fb6:	c9                   	leave  
c0027fb7:	c3                   	ret    

c0027fb8 <__nesf2>:
c0027fb8:	eb c3                	jmp    c0027f7d <__eqsf2>

c0027fba <__gtsf2>:
c0027fba:	55                   	push   ebp
c0027fbb:	89 e5                	mov    ebp,esp
c0027fbd:	83 ec 24             	sub    esp,0x24
c0027fc0:	6a ff                	push   0xffffffff
c0027fc2:	83 ec 0c             	sub    esp,0xc
c0027fc5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027fc8:	e8 a2 10 00 00       	call   c002906f <__extendsfdf2>
c0027fcd:	83 c4 10             	add    esp,0x10
c0027fd0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fd3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fd6:	52                   	push   edx
c0027fd7:	50                   	push   eax
c0027fd8:	50                   	push   eax
c0027fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027fdc:	e8 8e 10 00 00       	call   c002906f <__extendsfdf2>
c0027fe1:	59                   	pop    ecx
c0027fe2:	59                   	pop    ecx
c0027fe3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027fe6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027fe9:	52                   	push   edx
c0027fea:	50                   	push   eax
c0027feb:	e8 f8 fe ff ff       	call   c0027ee8 <__cmpsf2>
c0027ff0:	83 c4 20             	add    esp,0x20
c0027ff3:	c9                   	leave  
c0027ff4:	c3                   	ret    

c0027ff5 <__gesf2>:
c0027ff5:	eb c3                	jmp    c0027fba <__gtsf2>

c0027ff7 <__ltsf2>:
c0027ff7:	eb 84                	jmp    c0027f7d <__eqsf2>

c0027ff9 <__lesf2>:
c0027ff9:	eb 82                	jmp    c0027f7d <__eqsf2>

c0027ffb <__adddf3>:
c0027ffb:	55                   	push   ebp
c0027ffc:	89 e5                	mov    ebp,esp
c0027ffe:	57                   	push   edi
c0027fff:	56                   	push   esi
c0028000:	53                   	push   ebx
c0028001:	83 ec 24             	sub    esp,0x24
c0028004:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028007:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002800a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002800d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028010:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028013:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028016:	89 c8                	mov    eax,ecx
c0028018:	89 ce                	mov    esi,ecx
c002801a:	c1 fe 14             	sar    esi,0x14
c002801d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0028020:	89 fb                	mov    ebx,edi
c0028022:	89 fa                	mov    edx,edi
c0028024:	c1 e2 0b             	shl    edx,0xb
c0028027:	c1 e0 0b             	shl    eax,0xb
c002802a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002802f:	c1 eb 15             	shr    ebx,0x15
c0028032:	09 d8                	or     eax,ebx
c0028034:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028037:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002803a:	c1 fe 14             	sar    esi,0x14
c002803d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028040:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028043:	89 f3                	mov    ebx,esi
c0028045:	c1 e3 0b             	shl    ebx,0xb
c0028048:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002804b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002804e:	c1 e3 0b             	shl    ebx,0xb
c0028051:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0028057:	c1 ee 15             	shr    esi,0x15
c002805a:	09 f3                	or     ebx,esi
c002805c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002805f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0028062:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0028065:	0f 88 5f 02 00 00    	js     c00282ca <__adddf3+0x2cf>
c002806b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002806e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028071:	85 db                	test   ebx,ebx
c0028073:	0f 8e c7 00 00 00    	jle    c0028140 <__adddf3+0x145>
c0028079:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028080:	75 1a                	jne    c002809c <__adddf3+0xa1>
c0028082:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028085:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028088:	0f 84 b2 05 00 00    	je     c0028640 <__adddf3+0x645>
c002808e:	4b                   	dec    ebx
c002808f:	75 23                	jne    c00280b4 <__adddf3+0xb9>
c0028091:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028094:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028097:	e9 99 00 00 00       	jmp    c0028135 <__adddf3+0x13a>
c002809c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002809f:	f7 d6                	not    esi
c00280a1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280a7:	0f 84 93 05 00 00    	je     c0028640 <__adddf3+0x645>
c00280ad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280b4:	83 fb 1f             	cmp    ebx,0x1f
c00280b7:	7e 42                	jle    c00280fb <__adddf3+0x100>
c00280b9:	83 fb 3f             	cmp    ebx,0x3f
c00280bc:	0f 8f 7e 05 00 00    	jg     c0028640 <__adddf3+0x645>
c00280c2:	83 e3 1f             	and    ebx,0x1f
c00280c5:	89 d9                	mov    ecx,ebx
c00280c7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280ca:	d3 ef                	shr    edi,cl
c00280cc:	31 db                	xor    ebx,ebx
c00280ce:	85 c9                	test   ecx,ecx
c00280d0:	74 15                	je     c00280e7 <__adddf3+0xec>
c00280d2:	be 20 00 00 00       	mov    esi,0x20
c00280d7:	29 ce                	sub    esi,ecx
c00280d9:	89 f1                	mov    ecx,esi
c00280db:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280de:	d3 e6                	shl    esi,cl
c00280e0:	31 db                	xor    ebx,ebx
c00280e2:	85 f6                	test   esi,esi
c00280e4:	0f 95 c3             	setne  bl
c00280e7:	31 c9                	xor    ecx,ecx
c00280e9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280ed:	0f 95 c1             	setne  cl
c00280f0:	09 cf                	or     edi,ecx
c00280f2:	09 fb                	or     ebx,edi
c00280f4:	01 da                	add    edx,ebx
c00280f6:	83 d0 00             	adc    eax,0x0
c00280f9:	eb 3a                	jmp    c0028135 <__adddf3+0x13a>
c00280fb:	bf 20 00 00 00       	mov    edi,0x20
c0028100:	29 df                	sub    edi,ebx
c0028102:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028105:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028108:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002810b:	d3 e6                	shl    esi,cl
c002810d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028110:	88 d9                	mov    cl,bl
c0028112:	d3 ef                	shr    edi,cl
c0028114:	09 fe                	or     esi,edi
c0028116:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028119:	88 d9                	mov    cl,bl
c002811b:	d3 ef                	shr    edi,cl
c002811d:	89 fb                	mov    ebx,edi
c002811f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028122:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028125:	d3 e7                	shl    edi,cl
c0028127:	85 ff                	test   edi,edi
c0028129:	0f 95 c1             	setne  cl
c002812c:	0f b6 c9             	movzx  ecx,cl
c002812f:	09 ce                	or     esi,ecx
c0028131:	01 f2                	add    edx,esi
c0028133:	11 d8                	adc    eax,ebx
c0028135:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028138:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002813b:	e9 52 01 00 00       	jmp    c0028292 <__adddf3+0x297>
c0028140:	0f 84 d5 00 00 00    	je     c002821b <__adddf3+0x220>
c0028146:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028149:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002814c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002814f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028152:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028159:	75 20                	jne    c002817b <__adddf3+0x180>
c002815b:	89 d6                	mov    esi,edx
c002815d:	09 c6                	or     esi,eax
c002815f:	0f 84 db 04 00 00    	je     c0028640 <__adddf3+0x645>
c0028165:	4b                   	dec    ebx
c0028166:	75 29                	jne    c0028191 <__adddf3+0x196>
c0028168:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002816b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002816e:	01 d1                	add    ecx,edx
c0028170:	11 c6                	adc    esi,eax
c0028172:	89 f0                	mov    eax,esi
c0028174:	89 ca                	mov    edx,ecx
c0028176:	e9 17 01 00 00       	jmp    c0028292 <__adddf3+0x297>
c002817b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002817e:	f7 d6                	not    esi
c0028180:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028186:	0f 84 b4 04 00 00    	je     c0028640 <__adddf3+0x645>
c002818c:	0d 00 00 00 80       	or     eax,0x80000000
c0028191:	83 fb 1f             	cmp    ebx,0x1f
c0028194:	7e 48                	jle    c00281de <__adddf3+0x1e3>
c0028196:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028199:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002819c:	83 fb 3f             	cmp    ebx,0x3f
c002819f:	0f 8f 9b 04 00 00    	jg     c0028640 <__adddf3+0x645>
c00281a5:	83 e3 1f             	and    ebx,0x1f
c00281a8:	89 d9                	mov    ecx,ebx
c00281aa:	89 c7                	mov    edi,eax
c00281ac:	d3 ef                	shr    edi,cl
c00281ae:	31 db                	xor    ebx,ebx
c00281b0:	85 c9                	test   ecx,ecx
c00281b2:	74 12                	je     c00281c6 <__adddf3+0x1cb>
c00281b4:	be 20 00 00 00       	mov    esi,0x20
c00281b9:	29 ce                	sub    esi,ecx
c00281bb:	89 f1                	mov    ecx,esi
c00281bd:	d3 e0                	shl    eax,cl
c00281bf:	31 db                	xor    ebx,ebx
c00281c1:	85 c0                	test   eax,eax
c00281c3:	0f 95 c3             	setne  bl
c00281c6:	31 c0                	xor    eax,eax
c00281c8:	85 d2                	test   edx,edx
c00281ca:	0f 95 c0             	setne  al
c00281cd:	09 c7                	or     edi,eax
c00281cf:	09 fb                	or     ebx,edi
c00281d1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281d4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281d7:	01 da                	add    edx,ebx
c00281d9:	83 d6 00             	adc    esi,0x0
c00281dc:	eb 39                	jmp    c0028217 <__adddf3+0x21c>
c00281de:	be 20 00 00 00       	mov    esi,0x20
c00281e3:	29 de                	sub    esi,ebx
c00281e5:	89 c7                	mov    edi,eax
c00281e7:	89 f1                	mov    ecx,esi
c00281e9:	d3 e7                	shl    edi,cl
c00281eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ee:	89 d7                	mov    edi,edx
c00281f0:	88 d9                	mov    cl,bl
c00281f2:	d3 ef                	shr    edi,cl
c00281f4:	89 f9                	mov    ecx,edi
c00281f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281f9:	09 cf                	or     edi,ecx
c00281fb:	88 d9                	mov    cl,bl
c00281fd:	d3 e8                	shr    eax,cl
c00281ff:	89 f1                	mov    ecx,esi
c0028201:	d3 e2                	shl    edx,cl
c0028203:	85 d2                	test   edx,edx
c0028205:	0f 95 c2             	setne  dl
c0028208:	0f b6 d2             	movzx  edx,dl
c002820b:	09 d7                	or     edi,edx
c002820d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028210:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028213:	01 fa                	add    edx,edi
c0028215:	11 c6                	adc    esi,eax
c0028217:	89 f0                	mov    eax,esi
c0028219:	eb 77                	jmp    c0028292 <__adddf3+0x297>
c002821b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002821e:	46                   	inc    esi
c002821f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0028222:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028228:	75 41                	jne    c002826b <__adddf3+0x270>
c002822a:	89 d3                	mov    ebx,edx
c002822c:	09 c3                	or     ebx,eax
c002822e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0028235:	75 27                	jne    c002825e <__adddf3+0x263>
c0028237:	85 db                	test   ebx,ebx
c0028239:	0f 84 fb 03 00 00    	je     c002863a <__adddf3+0x63f>
c002823f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028242:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028245:	0f 84 f5 03 00 00    	je     c0028640 <__adddf3+0x645>
c002824b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002824e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028251:	85 c0                	test   eax,eax
c0028253:	0f 89 91 03 00 00    	jns    c00285ea <__adddf3+0x5ef>
c0028259:	e9 85 03 00 00       	jmp    c00285e3 <__adddf3+0x5e8>
c002825e:	85 db                	test   ebx,ebx
c0028260:	0f 85 da 03 00 00    	jne    c0028640 <__adddf3+0x645>
c0028266:	e9 cf 03 00 00       	jmp    c002863a <__adddf3+0x63f>
c002826b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002826e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028271:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028274:	f7 d1                	not    ecx
c0028276:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002827c:	0f 84 70 03 00 00    	je     c00285f2 <__adddf3+0x5f7>
c0028282:	d1 ea                	shr    edx,1
c0028284:	89 c1                	mov    ecx,eax
c0028286:	c1 e1 1f             	shl    ecx,0x1f
c0028289:	09 ca                	or     edx,ecx
c002828b:	d1 e8                	shr    eax,1
c002828d:	e9 6f 03 00 00       	jmp    c0028601 <__adddf3+0x606>
c0028292:	85 c0                	test   eax,eax
c0028294:	0f 89 67 03 00 00    	jns    c0028601 <__adddf3+0x606>
c002829a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002829d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00282a0:	f7 d1                	not    ecx
c00282a2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00282a8:	0f 84 44 03 00 00    	je     c00285f2 <__adddf3+0x5f7>
c00282ae:	89 d1                	mov    ecx,edx
c00282b0:	d1 e9                	shr    ecx,1
c00282b2:	83 e2 01             	and    edx,0x1
c00282b5:	09 ca                	or     edx,ecx
c00282b7:	89 c1                	mov    ecx,eax
c00282b9:	c1 e1 1f             	shl    ecx,0x1f
c00282bc:	09 ca                	or     edx,ecx
c00282be:	d1 e8                	shr    eax,1
c00282c0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00282c5:	e9 37 03 00 00       	jmp    c0028601 <__adddf3+0x606>
c00282ca:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282cd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00282d3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00282d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282df:	29 de                	sub    esi,ebx
c00282e1:	85 f6                	test   esi,esi
c00282e3:	0f 8e bd 00 00 00    	jle    c00283a6 <__adddf3+0x3ab>
c00282e9:	85 db                	test   ebx,ebx
c00282eb:	75 17                	jne    c0028304 <__adddf3+0x309>
c00282ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00282f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282f3:	0f 84 47 03 00 00    	je     c0028640 <__adddf3+0x645>
c00282f9:	4e                   	dec    esi
c00282fa:	75 20                	jne    c002831c <__adddf3+0x321>
c00282fc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00282ff:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028302:	eb 5b                	jmp    c002835f <__adddf3+0x364>
c0028304:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028307:	f7 d3                	not    ebx
c0028309:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002830f:	0f 84 2b 03 00 00    	je     c0028640 <__adddf3+0x645>
c0028315:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002831c:	83 fe 1f             	cmp    esi,0x1f
c002831f:	7e 49                	jle    c002836a <__adddf3+0x36f>
c0028321:	83 fe 3f             	cmp    esi,0x3f
c0028324:	0f 8f 16 03 00 00    	jg     c0028640 <__adddf3+0x645>
c002832a:	83 e6 1f             	and    esi,0x1f
c002832d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028330:	89 f1                	mov    ecx,esi
c0028332:	d3 ef                	shr    edi,cl
c0028334:	31 db                	xor    ebx,ebx
c0028336:	85 f6                	test   esi,esi
c0028338:	74 13                	je     c002834d <__adddf3+0x352>
c002833a:	b9 20 00 00 00       	mov    ecx,0x20
c002833f:	29 f1                	sub    ecx,esi
c0028341:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028344:	d3 e6                	shl    esi,cl
c0028346:	31 db                	xor    ebx,ebx
c0028348:	85 f6                	test   esi,esi
c002834a:	0f 95 c3             	setne  bl
c002834d:	31 c9                	xor    ecx,ecx
c002834f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028353:	0f 95 c1             	setne  cl
c0028356:	09 cf                	or     edi,ecx
c0028358:	09 fb                	or     ebx,edi
c002835a:	29 da                	sub    edx,ebx
c002835c:	83 d8 00             	sbb    eax,0x0
c002835f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028362:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028365:	e9 aa 01 00 00       	jmp    c0028514 <__adddf3+0x519>
c002836a:	bf 20 00 00 00       	mov    edi,0x20
c002836f:	29 f7                	sub    edi,esi
c0028371:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028374:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028377:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002837a:	d3 e3                	shl    ebx,cl
c002837c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002837f:	89 f1                	mov    ecx,esi
c0028381:	d3 ef                	shr    edi,cl
c0028383:	09 fb                	or     ebx,edi
c0028385:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028388:	89 f1                	mov    ecx,esi
c002838a:	d3 ef                	shr    edi,cl
c002838c:	89 fe                	mov    esi,edi
c002838e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028391:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028394:	d3 e7                	shl    edi,cl
c0028396:	85 ff                	test   edi,edi
c0028398:	0f 95 c1             	setne  cl
c002839b:	0f b6 c9             	movzx  ecx,cl
c002839e:	09 cb                	or     ebx,ecx
c00283a0:	29 da                	sub    edx,ebx
c00283a2:	19 f0                	sbb    eax,esi
c00283a4:	eb b9                	jmp    c002835f <__adddf3+0x364>
c00283a6:	0f 84 cd 00 00 00    	je     c0028479 <__adddf3+0x47e>
c00283ac:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00283af:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283b2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283b5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00283b9:	75 1b                	jne    c00283d6 <__adddf3+0x3db>
c00283bb:	89 d6                	mov    esi,edx
c00283bd:	09 c6                	or     esi,eax
c00283bf:	0f 84 7b 02 00 00    	je     c0028640 <__adddf3+0x645>
c00283c5:	4b                   	dec    ebx
c00283c6:	75 24                	jne    c00283ec <__adddf3+0x3f1>
c00283c8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00283ce:	29 d1                	sub    ecx,edx
c00283d0:	19 c6                	sbb    esi,eax
c00283d2:	89 ca                	mov    edx,ecx
c00283d4:	eb 61                	jmp    c0028437 <__adddf3+0x43c>
c00283d6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00283d9:	f7 d6                	not    esi
c00283db:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00283e1:	0f 84 59 02 00 00    	je     c0028640 <__adddf3+0x645>
c00283e7:	0d 00 00 00 80       	or     eax,0x80000000
c00283ec:	83 fb 1f             	cmp    ebx,0x1f
c00283ef:	7e 4d                	jle    c002843e <__adddf3+0x443>
c00283f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283f7:	83 fb 3f             	cmp    ebx,0x3f
c00283fa:	0f 8f 40 02 00 00    	jg     c0028640 <__adddf3+0x645>
c0028400:	83 e3 1f             	and    ebx,0x1f
c0028403:	89 d9                	mov    ecx,ebx
c0028405:	89 c7                	mov    edi,eax
c0028407:	d3 ef                	shr    edi,cl
c0028409:	31 db                	xor    ebx,ebx
c002840b:	85 c9                	test   ecx,ecx
c002840d:	74 12                	je     c0028421 <__adddf3+0x426>
c002840f:	be 20 00 00 00       	mov    esi,0x20
c0028414:	29 ce                	sub    esi,ecx
c0028416:	89 f1                	mov    ecx,esi
c0028418:	d3 e0                	shl    eax,cl
c002841a:	31 db                	xor    ebx,ebx
c002841c:	85 c0                	test   eax,eax
c002841e:	0f 95 c3             	setne  bl
c0028421:	31 c0                	xor    eax,eax
c0028423:	85 d2                	test   edx,edx
c0028425:	0f 95 c0             	setne  al
c0028428:	09 c7                	or     edi,eax
c002842a:	09 fb                	or     ebx,edi
c002842c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002842f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028432:	29 da                	sub    edx,ebx
c0028434:	83 de 00             	sbb    esi,0x0
c0028437:	89 f0                	mov    eax,esi
c0028439:	e9 d6 00 00 00       	jmp    c0028514 <__adddf3+0x519>
c002843e:	be 20 00 00 00       	mov    esi,0x20
c0028443:	29 de                	sub    esi,ebx
c0028445:	89 c7                	mov    edi,eax
c0028447:	89 f1                	mov    ecx,esi
c0028449:	d3 e7                	shl    edi,cl
c002844b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002844e:	89 d7                	mov    edi,edx
c0028450:	88 d9                	mov    cl,bl
c0028452:	d3 ef                	shr    edi,cl
c0028454:	89 f9                	mov    ecx,edi
c0028456:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028459:	09 cf                	or     edi,ecx
c002845b:	88 d9                	mov    cl,bl
c002845d:	d3 e8                	shr    eax,cl
c002845f:	89 f1                	mov    ecx,esi
c0028461:	d3 e2                	shl    edx,cl
c0028463:	85 d2                	test   edx,edx
c0028465:	0f 95 c2             	setne  dl
c0028468:	0f b6 d2             	movzx  edx,dl
c002846b:	09 d7                	or     edi,edx
c002846d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028470:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028473:	29 fa                	sub    edx,edi
c0028475:	19 c6                	sbb    esi,eax
c0028477:	eb be                	jmp    c0028437 <__adddf3+0x43c>
c0028479:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002847c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002847f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028485:	75 6a                	jne    c00284f1 <__adddf3+0x4f6>
c0028487:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002848b:	75 58                	jne    c00284e5 <__adddf3+0x4ea>
c002848d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028490:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028493:	89 d6                	mov    esi,edx
c0028495:	09 c6                	or     esi,eax
c0028497:	75 17                	jne    c00284b0 <__adddf3+0x4b5>
c0028499:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002849c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002849f:	85 db                	test   ebx,ebx
c00284a1:	0f 85 99 01 00 00    	jne    c0028640 <__adddf3+0x645>
c00284a7:	31 ff                	xor    edi,edi
c00284a9:	31 c9                	xor    ecx,ecx
c00284ab:	e9 90 01 00 00       	jmp    c0028640 <__adddf3+0x645>
c00284b0:	85 db                	test   ebx,ebx
c00284b2:	0f 84 88 01 00 00    	je     c0028640 <__adddf3+0x645>
c00284b8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00284bb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00284be:	85 c0                	test   eax,eax
c00284c0:	79 10                	jns    c00284d2 <__adddf3+0x4d7>
c00284c2:	31 c9                	xor    ecx,ecx
c00284c4:	f7 da                	neg    edx
c00284c6:	0f 95 c1             	setne  cl
c00284c9:	01 c8                	add    eax,ecx
c00284cb:	f7 d8                	neg    eax
c00284cd:	e9 2f 01 00 00       	jmp    c0028601 <__adddf3+0x606>
c00284d2:	31 ff                	xor    edi,edi
c00284d4:	31 c9                	xor    ecx,ecx
c00284d6:	89 c3                	mov    ebx,eax
c00284d8:	09 d3                	or     ebx,edx
c00284da:	0f 84 60 01 00 00    	je     c0028640 <__adddf3+0x645>
c00284e0:	e9 05 01 00 00       	jmp    c00285ea <__adddf3+0x5ef>
c00284e5:	31 ff                	xor    edi,edi
c00284e7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00284ec:	e9 4f 01 00 00       	jmp    c0028640 <__adddf3+0x645>
c00284f1:	89 c1                	mov    ecx,eax
c00284f3:	89 d0                	mov    eax,edx
c00284f5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00284f8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00284fb:	89 ca                	mov    edx,ecx
c00284fd:	85 c9                	test   ecx,ecx
c00284ff:	79 2c                	jns    c002852d <__adddf3+0x532>
c0028501:	31 c9                	xor    ecx,ecx
c0028503:	f7 d8                	neg    eax
c0028505:	0f 95 c1             	setne  cl
c0028508:	01 ca                	add    edx,ecx
c002850a:	f7 da                	neg    edx
c002850c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002850f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028512:	eb 19                	jmp    c002852d <__adddf3+0x532>
c0028514:	85 c0                	test   eax,eax
c0028516:	0f 89 e5 00 00 00    	jns    c0028601 <__adddf3+0x606>
c002851c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028521:	89 c1                	mov    ecx,eax
c0028523:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028526:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028529:	89 d0                	mov    eax,edx
c002852b:	89 ca                	mov    edx,ecx
c002852d:	85 d2                	test   edx,edx
c002852f:	74 59                	je     c002858a <__adddf3+0x58f>
c0028531:	0f bd da             	bsr    ebx,edx
c0028534:	83 f3 1f             	xor    ebx,0x1f
c0028537:	88 d9                	mov    cl,bl
c0028539:	d3 e2                	shl    edx,cl
c002853b:	bf 20 00 00 00       	mov    edi,0x20
c0028540:	89 f9                	mov    ecx,edi
c0028542:	29 d9                	sub    ecx,ebx
c0028544:	89 c6                	mov    esi,eax
c0028546:	d3 ee                	shr    esi,cl
c0028548:	09 d6                	or     esi,edx
c002854a:	88 d9                	mov    cl,bl
c002854c:	d3 e0                	shl    eax,cl
c002854e:	89 c2                	mov    edx,eax
c0028550:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028553:	25 ff 07 00 00       	and    eax,0x7ff
c0028558:	39 d8                	cmp    eax,ebx
c002855a:	7f 22                	jg     c002857e <__adddf3+0x583>
c002855c:	29 c3                	sub    ebx,eax
c002855e:	43                   	inc    ebx
c002855f:	88 d9                	mov    cl,bl
c0028561:	d3 ea                	shr    edx,cl
c0028563:	29 df                	sub    edi,ebx
c0028565:	89 f9                	mov    ecx,edi
c0028567:	89 f0                	mov    eax,esi
c0028569:	d3 e0                	shl    eax,cl
c002856b:	09 c2                	or     edx,eax
c002856d:	89 f0                	mov    eax,esi
c002856f:	88 d9                	mov    cl,bl
c0028571:	d3 e8                	shr    eax,cl
c0028573:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028576:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002857c:	eb 6f                	jmp    c00285ed <__adddf3+0x5f2>
c002857e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028581:	29 d8                	sub    eax,ebx
c0028583:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028586:	89 f0                	mov    eax,esi
c0028588:	eb 59                	jmp    c00285e3 <__adddf3+0x5e8>
c002858a:	85 c0                	test   eax,eax
c002858c:	74 6a                	je     c00285f8 <__adddf3+0x5fd>
c002858e:	0f bd c8             	bsr    ecx,eax
c0028591:	83 f1 1f             	xor    ecx,0x1f
c0028594:	d3 e0                	shl    eax,cl
c0028596:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028599:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002859f:	83 c1 20             	add    ecx,0x20
c00285a2:	39 cb                	cmp    ebx,ecx
c00285a4:	7f 35                	jg     c00285db <__adddf3+0x5e0>
c00285a6:	29 d9                	sub    ecx,ebx
c00285a8:	8d 71 01             	lea    esi,[ecx+0x1]
c00285ab:	83 fe 1f             	cmp    esi,0x1f
c00285ae:	7e 09                	jle    c00285b9 <__adddf3+0x5be>
c00285b0:	83 e9 1f             	sub    ecx,0x1f
c00285b3:	d3 e8                	shr    eax,cl
c00285b5:	89 c3                	mov    ebx,eax
c00285b7:	eb 11                	jmp    c00285ca <__adddf3+0x5cf>
c00285b9:	b9 20 00 00 00       	mov    ecx,0x20
c00285be:	29 f1                	sub    ecx,esi
c00285c0:	89 c3                	mov    ebx,eax
c00285c2:	d3 e3                	shl    ebx,cl
c00285c4:	89 f1                	mov    ecx,esi
c00285c6:	d3 e8                	shr    eax,cl
c00285c8:	89 c2                	mov    edx,eax
c00285ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285cd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00285d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285d5:	89 d0                	mov    eax,edx
c00285d7:	89 da                	mov    edx,ebx
c00285d9:	eb 26                	jmp    c0028601 <__adddf3+0x606>
c00285db:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285de:	29 cf                	sub    edi,ecx
c00285e0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285e3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00285e8:	eb 17                	jmp    c0028601 <__adddf3+0x606>
c00285ea:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285ed:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00285f0:	eb 0f                	jmp    c0028601 <__adddf3+0x606>
c00285f2:	31 d2                	xor    edx,edx
c00285f4:	31 c0                	xor    eax,eax
c00285f6:	eb 09                	jmp    c0028601 <__adddf3+0x606>
c00285f8:	89 c2                	mov    edx,eax
c00285fa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028601:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028604:	c1 e1 14             	shl    ecx,0x14
c0028607:	89 c3                	mov    ebx,eax
c0028609:	c1 eb 0b             	shr    ebx,0xb
c002860c:	09 d9                	or     ecx,ebx
c002860e:	89 d3                	mov    ebx,edx
c0028610:	c1 eb 0b             	shr    ebx,0xb
c0028613:	c1 e0 15             	shl    eax,0x15
c0028616:	09 d8                	or     eax,ebx
c0028618:	89 c7                	mov    edi,eax
c002861a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028620:	0f 95 c0             	setne  al
c0028623:	89 c6                	mov    esi,eax
c0028625:	09 f3                	or     ebx,esi
c0028627:	83 e3 01             	and    ebx,0x1
c002862a:	c1 ea 0a             	shr    edx,0xa
c002862d:	21 da                	and    edx,ebx
c002862f:	89 f8                	mov    eax,edi
c0028631:	01 d0                	add    eax,edx
c0028633:	83 d1 00             	adc    ecx,0x0
c0028636:	89 c7                	mov    edi,eax
c0028638:	eb 06                	jmp    c0028640 <__adddf3+0x645>
c002863a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002863d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028640:	89 f8                	mov    eax,edi
c0028642:	89 ca                	mov    edx,ecx
c0028644:	83 c4 24             	add    esp,0x24
c0028647:	5b                   	pop    ebx
c0028648:	5e                   	pop    esi
c0028649:	5f                   	pop    edi
c002864a:	5d                   	pop    ebp
c002864b:	c3                   	ret    

c002864c <__subdf3>:
c002864c:	55                   	push   ebp
c002864d:	89 e5                	mov    ebp,esp
c002864f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028652:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028655:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002865b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002865e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028661:	5d                   	pop    ebp
c0028662:	e9 94 f9 ff ff       	jmp    c0027ffb <__adddf3>

c0028667 <__negdf2>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002866d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028670:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028676:	5d                   	pop    ebp
c0028677:	c3                   	ret    

c0028678 <__muldf3>:
c0028678:	55                   	push   ebp
c0028679:	89 e5                	mov    ebp,esp
c002867b:	57                   	push   edi
c002867c:	56                   	push   esi
c002867d:	53                   	push   ebx
c002867e:	83 ec 24             	sub    esp,0x24
c0028681:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028684:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028687:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002868a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002868d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028690:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028693:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028696:	89 c8                	mov    eax,ecx
c0028698:	c1 f8 14             	sar    eax,0x14
c002869b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002869e:	89 f8                	mov    eax,edi
c00286a0:	89 fb                	mov    ebx,edi
c00286a2:	c1 e3 0b             	shl    ebx,0xb
c00286a5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00286a8:	c1 e1 0b             	shl    ecx,0xb
c00286ab:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00286b1:	c1 e8 15             	shr    eax,0x15
c00286b4:	09 c1                	or     ecx,eax
c00286b6:	89 d6                	mov    esi,edx
c00286b8:	89 d0                	mov    eax,edx
c00286ba:	c1 f8 14             	sar    eax,0x14
c00286bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00286c0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00286c3:	89 c3                	mov    ebx,eax
c00286c5:	c1 e3 0b             	shl    ebx,0xb
c00286c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00286cb:	c1 e6 0b             	shl    esi,0xb
c00286ce:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286d4:	c1 e8 15             	shr    eax,0x15
c00286d7:	09 c6                	or     esi,eax
c00286d9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286dc:	25 ff 07 00 00       	and    eax,0x7ff
c00286e1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00286e7:	25 ff 07 00 00       	and    eax,0x7ff
c00286ec:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286ef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286f2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286f5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00286fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286ff:	40                   	inc    eax
c0028700:	a9 fe 07 00 00       	test   eax,0x7fe
c0028705:	0f 85 8d 00 00 00    	jne    c0028798 <__muldf3+0x120>
c002870b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002870e:	09 c8                	or     eax,ecx
c0028710:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028714:	74 44                	je     c002875a <__muldf3+0xe2>
c0028716:	85 c0                	test   eax,eax
c0028718:	0f 85 31 02 00 00    	jne    c002894f <__muldf3+0x2d7>
c002871e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028721:	40                   	inc    eax
c0028722:	a9 fe 07 00 00       	test   eax,0x7fe
c0028727:	75 13                	jne    c002873c <__muldf3+0xc4>
c0028729:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002872c:	09 f1                	or     ecx,esi
c002872e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028732:	74 22                	je     c0028756 <__muldf3+0xde>
c0028734:	85 c9                	test   ecx,ecx
c0028736:	0f 85 0d 02 00 00    	jne    c0028949 <__muldf3+0x2d1>
c002873c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028740:	0f 89 09 02 00 00    	jns    c002894f <__muldf3+0x2d7>
c0028746:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028749:	05 00 00 00 80       	add    eax,0x80000000
c002874e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028751:	e9 f9 01 00 00       	jmp    c002894f <__muldf3+0x2d7>
c0028756:	85 c9                	test   ecx,ecx
c0028758:	eb 2e                	jmp    c0028788 <__muldf3+0x110>
c002875a:	85 c0                	test   eax,eax
c002875c:	74 20                	je     c002877e <__muldf3+0x106>
c002875e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028761:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028764:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028767:	c1 ef 1f             	shr    edi,0x1f
c002876a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002876d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028770:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028773:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028776:	09 f9                	or     ecx,edi
c0028778:	78 1e                	js     c0028798 <__muldf3+0x120>
c002877a:	89 c3                	mov    ebx,eax
c002877c:	eb e0                	jmp    c002875e <__muldf3+0xe6>
c002877e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028781:	f7 d0                	not    eax
c0028783:	a9 ff 07 00 00       	test   eax,0x7ff
c0028788:	75 b2                	jne    c002873c <__muldf3+0xc4>
c002878a:	31 ff                	xor    edi,edi
c002878c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028793:	e9 b7 01 00 00       	jmp    c002894f <__muldf3+0x2d7>
c0028798:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879b:	40                   	inc    eax
c002879c:	a9 fe 07 00 00       	test   eax,0x7fe
c00287a1:	75 57                	jne    c00287fa <__muldf3+0x182>
c00287a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00287a6:	09 f0                	or     eax,esi
c00287a8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00287ac:	74 23                	je     c00287d1 <__muldf3+0x159>
c00287ae:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00287b2:	0f 89 91 01 00 00    	jns    c0028949 <__muldf3+0x2d1>
c00287b8:	85 c0                	test   eax,eax
c00287ba:	0f 85 89 01 00 00    	jne    c0028949 <__muldf3+0x2d1>
c00287c0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00287c3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00287c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00287cc:	e9 7e 01 00 00       	jmp    c002894f <__muldf3+0x2d7>
c00287d1:	85 c0                	test   eax,eax
c00287d3:	75 0c                	jne    c00287e1 <__muldf3+0x169>
c00287d5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00287d9:	0f 89 6a 01 00 00    	jns    c0028949 <__muldf3+0x2d1>
c00287df:	eb df                	jmp    c00287c0 <__muldf3+0x148>
c00287e1:	01 f6                	add    esi,esi
c00287e3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00287e6:	c1 ea 1f             	shr    edx,0x1f
c00287e9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00287ec:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00287ef:	8d 43 ff             	lea    eax,[ebx-0x1]
c00287f2:	09 d6                	or     esi,edx
c00287f4:	78 04                	js     c00287fa <__muldf3+0x182>
c00287f6:	89 c3                	mov    ebx,eax
c00287f8:	eb e7                	jmp    c00287e1 <__muldf3+0x169>
c00287fa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028800:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028806:	89 c8                	mov    eax,ecx
c0028808:	f7 e6                	mul    esi
c002880a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002880d:	89 c7                	mov    edi,eax
c002880f:	89 c8                	mov    eax,ecx
c0028811:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028814:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028817:	89 c1                	mov    ecx,eax
c0028819:	89 f0                	mov    eax,esi
c002881b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002881e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028821:	89 c6                	mov    esi,eax
c0028823:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028826:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028829:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002882c:	31 c0                	xor    eax,eax
c002882e:	01 f1                	add    ecx,esi
c0028830:	0f 92 c0             	setb   al
c0028833:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028836:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028839:	83 d6 00             	adc    esi,0x0
c002883c:	01 c7                	add    edi,eax
c002883e:	83 d6 00             	adc    esi,0x0
c0028841:	01 ca                	add    edx,ecx
c0028843:	0f 92 c1             	setb   cl
c0028846:	0f b6 c9             	movzx  ecx,cl
c0028849:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002884c:	83 d6 00             	adc    esi,0x0
c002884f:	01 cf                	add    edi,ecx
c0028851:	83 d6 00             	adc    esi,0x0
c0028854:	31 c9                	xor    ecx,ecx
c0028856:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028859:	0f 95 c1             	setne  cl
c002885c:	09 cf                	or     edi,ecx
c002885e:	85 f6                	test   esi,esi
c0028860:	78 0c                	js     c002886e <__muldf3+0x1f6>
c0028862:	01 f6                	add    esi,esi
c0028864:	89 f8                	mov    eax,edi
c0028866:	c1 e8 1f             	shr    eax,0x1f
c0028869:	09 c6                	or     esi,eax
c002886b:	01 ff                	add    edi,edi
c002886d:	4b                   	dec    ebx
c002886e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028874:	0f 8f 85 00 00 00    	jg     c00288ff <__muldf3+0x287>
c002887a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028880:	85 db                	test   ebx,ebx
c0028882:	0f 8f 84 00 00 00    	jg     c002890c <__muldf3+0x294>
c0028888:	83 fb cc             	cmp    ebx,0xffffffcc
c002888b:	7c 79                	jl     c0028906 <__muldf3+0x28e>
c002888d:	ba 01 00 00 00       	mov    edx,0x1
c0028892:	29 da                	sub    edx,ebx
c0028894:	81 ce 00 00 00 80    	or     esi,0x80000000
c002889a:	83 fa 1f             	cmp    edx,0x1f
c002889d:	7e 30                	jle    c00288cf <__muldf3+0x257>
c002889f:	83 fa 20             	cmp    edx,0x20
c00288a2:	75 0b                	jne    c00288af <__muldf3+0x237>
c00288a4:	31 c0                	xor    eax,eax
c00288a6:	85 ff                	test   edi,edi
c00288a8:	0f 95 c0             	setne  al
c00288ab:	89 c7                	mov    edi,eax
c00288ad:	eb 1a                	jmp    c00288c9 <__muldf3+0x251>
c00288af:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00288b2:	89 f0                	mov    eax,esi
c00288b4:	d3 e0                	shl    eax,cl
c00288b6:	09 f8                	or     eax,edi
c00288b8:	0f 95 c0             	setne  al
c00288bb:	0f b6 c0             	movzx  eax,al
c00288be:	89 c7                	mov    edi,eax
c00288c0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00288c5:	29 d9                	sub    ecx,ebx
c00288c7:	d3 ee                	shr    esi,cl
c00288c9:	09 f7                	or     edi,esi
c00288cb:	31 db                	xor    ebx,ebx
c00288cd:	eb 3b                	jmp    c002890a <__muldf3+0x292>
c00288cf:	83 c3 1f             	add    ebx,0x1f
c00288d2:	89 f0                	mov    eax,esi
c00288d4:	88 d9                	mov    cl,bl
c00288d6:	d3 e0                	shl    eax,cl
c00288d8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288db:	89 f8                	mov    eax,edi
c00288dd:	88 d1                	mov    cl,dl
c00288df:	d3 e8                	shr    eax,cl
c00288e1:	89 c1                	mov    ecx,eax
c00288e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288e6:	09 c8                	or     eax,ecx
c00288e8:	88 d9                	mov    cl,bl
c00288ea:	d3 e7                	shl    edi,cl
c00288ec:	31 db                	xor    ebx,ebx
c00288ee:	85 ff                	test   edi,edi
c00288f0:	0f 95 c3             	setne  bl
c00288f3:	89 df                	mov    edi,ebx
c00288f5:	09 c7                	or     edi,eax
c00288f7:	88 d1                	mov    cl,dl
c00288f9:	d3 ee                	shr    esi,cl
c00288fb:	31 db                	xor    ebx,ebx
c00288fd:	eb 0d                	jmp    c002890c <__muldf3+0x294>
c00288ff:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028904:	eb 02                	jmp    c0028908 <__muldf3+0x290>
c0028906:	31 db                	xor    ebx,ebx
c0028908:	31 ff                	xor    edi,edi
c002890a:	31 f6                	xor    esi,esi
c002890c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002890f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028912:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028917:	09 c3                	or     ebx,eax
c0028919:	c1 e3 14             	shl    ebx,0x14
c002891c:	89 f0                	mov    eax,esi
c002891e:	c1 e8 0b             	shr    eax,0xb
c0028921:	09 c3                	or     ebx,eax
c0028923:	89 f8                	mov    eax,edi
c0028925:	c1 e8 0b             	shr    eax,0xb
c0028928:	c1 e6 15             	shl    esi,0x15
c002892b:	09 c6                	or     esi,eax
c002892d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028933:	0f 95 c1             	setne  cl
c0028936:	09 c8                	or     eax,ecx
c0028938:	83 e0 01             	and    eax,0x1
c002893b:	c1 ef 0a             	shr    edi,0xa
c002893e:	21 c7                	and    edi,eax
c0028940:	01 f7                	add    edi,esi
c0028942:	83 d3 00             	adc    ebx,0x0
c0028945:	89 da                	mov    edx,ebx
c0028947:	eb 03                	jmp    c002894c <__muldf3+0x2d4>
c0028949:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002894c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002894f:	89 f8                	mov    eax,edi
c0028951:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028954:	83 c4 24             	add    esp,0x24
c0028957:	5b                   	pop    ebx
c0028958:	5e                   	pop    esi
c0028959:	5f                   	pop    edi
c002895a:	5d                   	pop    ebp
c002895b:	c3                   	ret    

c002895c <__divdf3>:
c002895c:	55                   	push   ebp
c002895d:	89 e5                	mov    ebp,esp
c002895f:	57                   	push   edi
c0028960:	56                   	push   esi
c0028961:	53                   	push   ebx
c0028962:	83 ec 2c             	sub    esp,0x2c
c0028965:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028968:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002896b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002896e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028971:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028974:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028977:	89 ce                	mov    esi,ecx
c0028979:	89 c8                	mov    eax,ecx
c002897b:	c1 f8 14             	sar    eax,0x14
c002897e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028981:	89 f8                	mov    eax,edi
c0028983:	89 fb                	mov    ebx,edi
c0028985:	c1 e3 0b             	shl    ebx,0xb
c0028988:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002898b:	c1 e6 0b             	shl    esi,0xb
c002898e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028994:	c1 e8 15             	shr    eax,0x15
c0028997:	09 c6                	or     esi,eax
c0028999:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002899c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002899f:	89 c2                	mov    edx,eax
c00289a1:	c1 fa 14             	sar    edx,0x14
c00289a4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00289a7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00289aa:	89 de                	mov    esi,ebx
c00289ac:	c1 e6 0b             	shl    esi,0xb
c00289af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00289b2:	c1 e0 0b             	shl    eax,0xb
c00289b5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00289ba:	c1 eb 15             	shr    ebx,0x15
c00289bd:	09 d8                	or     eax,ebx
c00289bf:	89 c2                	mov    edx,eax
c00289c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00289c4:	25 ff 07 00 00       	and    eax,0x7ff
c00289c9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00289cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00289cf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00289d5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00289d8:	29 d8                	sub    eax,ebx
c00289da:	05 ff 03 00 00       	add    eax,0x3ff
c00289df:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00289e2:	46                   	inc    esi
c00289e3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00289e9:	0f 85 a5 00 00 00    	jne    c0028a94 <__divdf3+0x138>
c00289ef:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00289f2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00289f5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00289f9:	74 2a                	je     c0028a25 <__divdf3+0xc9>
c00289fb:	85 f6                	test   esi,esi
c00289fd:	0f 85 cc 02 00 00    	jne    c0028ccf <__divdf3+0x373>
c0028a03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028a06:	40                   	inc    eax
c0028a07:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a0c:	75 26                	jne    c0028a34 <__divdf3+0xd8>
c0028a0e:	85 db                	test   ebx,ebx
c0028a10:	74 22                	je     c0028a34 <__divdf3+0xd8>
c0028a12:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a15:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a18:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a1b:	09 d0                	or     eax,edx
c0028a1d:	0f 85 ac 02 00 00    	jne    c0028ccf <__divdf3+0x373>
c0028a23:	eb 63                	jmp    c0028a88 <__divdf3+0x12c>
c0028a25:	85 f6                	test   esi,esi
c0028a27:	75 22                	jne    c0028a4b <__divdf3+0xef>
c0028a29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028a2c:	40                   	inc    eax
c0028a2d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028a32:	74 36                	je     c0028a6a <__divdf3+0x10e>
c0028a34:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028a38:	0f 89 91 02 00 00    	jns    c0028ccf <__divdf3+0x373>
c0028a3e:	89 f8                	mov    eax,edi
c0028a40:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028a46:	e9 80 02 00 00       	jmp    c0028ccb <__divdf3+0x36f>
c0028a4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028a4e:	01 f6                	add    esi,esi
c0028a50:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a53:	c1 ef 1f             	shr    edi,0x1f
c0028a56:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a59:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028a5c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028a5f:	09 f7                	or     edi,esi
c0028a61:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028a64:	78 2e                	js     c0028a94 <__divdf3+0x138>
c0028a66:	89 c8                	mov    eax,ecx
c0028a68:	eb e1                	jmp    c0028a4b <__divdf3+0xef>
c0028a6a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028a6d:	09 d0                	or     eax,edx
c0028a6f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028a73:	74 0f                	je     c0028a84 <__divdf3+0x128>
c0028a75:	85 c0                	test   eax,eax
c0028a77:	74 bb                	je     c0028a34 <__divdf3+0xd8>
c0028a79:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028a7c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028a7f:	e9 4b 02 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028a84:	85 c0                	test   eax,eax
c0028a86:	75 ac                	jne    c0028a34 <__divdf3+0xd8>
c0028a88:	31 ff                	xor    edi,edi
c0028a8a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028a8f:	e9 3b 02 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028a94:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028a97:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028a9a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028aa0:	75 6b                	jne    c0028b0d <__divdf3+0x1b1>
c0028aa2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028aa5:	09 d6                	or     esi,edx
c0028aa7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028aab:	74 28                	je     c0028ad5 <__divdf3+0x179>
c0028aad:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028ab0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028ab3:	85 f6                	test   esi,esi
c0028ab5:	0f 85 14 02 00 00    	jne    c0028ccf <__divdf3+0x373>
c0028abb:	31 ff                	xor    edi,edi
c0028abd:	31 c9                	xor    ecx,ecx
c0028abf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028ac2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028ac5:	0f 89 04 02 00 00    	jns    c0028ccf <__divdf3+0x373>
c0028acb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028ad0:	e9 fa 01 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028ad5:	85 f6                	test   esi,esi
c0028ad7:	75 1b                	jne    c0028af4 <__divdf3+0x198>
c0028ad9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028adc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028adf:	25 00 00 00 80       	and    eax,0x80000000
c0028ae4:	31 c9                	xor    ecx,ecx
c0028ae6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028aeb:	89 cf                	mov    edi,ecx
c0028aed:	89 c1                	mov    ecx,eax
c0028aef:	e9 db 01 00 00       	jmp    c0028ccf <__divdf3+0x373>
c0028af4:	01 d2                	add    edx,edx
c0028af6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028af9:	c1 eb 1f             	shr    ebx,0x1f
c0028afc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028aff:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028b02:	8d 48 01             	lea    ecx,[eax+0x1]
c0028b05:	09 da                	or     edx,ebx
c0028b07:	78 04                	js     c0028b0d <__divdf3+0x1b1>
c0028b09:	89 c8                	mov    eax,ecx
c0028b0b:	eb e7                	jmp    c0028af4 <__divdf3+0x198>
c0028b0d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028b10:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028b16:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028b1c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028b1f:	39 d6                	cmp    esi,edx
c0028b21:	77 0d                	ja     c0028b30 <__divdf3+0x1d4>
c0028b23:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028b26:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028b29:	72 1b                	jb     c0028b46 <__divdf3+0x1ea>
c0028b2b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028b2e:	75 16                	jne    c0028b46 <__divdf3+0x1ea>
c0028b30:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028b36:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028b39:	83 de 00             	sbb    esi,0x0
c0028b3c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028b3f:	ba 01 00 00 00       	mov    edx,0x1
c0028b44:	eb 02                	jmp    c0028b48 <__divdf3+0x1ec>
c0028b46:	31 d2                	xor    edx,edx
c0028b48:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028b4f:	31 ff                	xor    edi,edi
c0028b51:	01 ff                	add    edi,edi
c0028b53:	89 d1                	mov    ecx,edx
c0028b55:	c1 e9 1f             	shr    ecx,0x1f
c0028b58:	09 cf                	or     edi,ecx
c0028b5a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028b5d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028b60:	89 da                	mov    edx,ebx
c0028b62:	89 f3                	mov    ebx,esi
c0028b64:	8d 34 36             	lea    esi,[esi+esi*1]
c0028b67:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b6a:	c1 e9 1f             	shr    ecx,0x1f
c0028b6d:	09 ce                	or     esi,ecx
c0028b6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028b72:	01 c9                	add    ecx,ecx
c0028b74:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028b77:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028b7a:	85 db                	test   ebx,ebx
c0028b7c:	78 29                	js     c0028ba7 <__divdf3+0x24b>
c0028b7e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028b81:	72 07                	jb     c0028b8a <__divdf3+0x22e>
c0028b83:	75 3c                	jne    c0028bc1 <__divdf3+0x265>
c0028b85:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028b88:	77 37                	ja     c0028bc1 <__divdf3+0x265>
c0028b8a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028b8d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028b90:	31 d2                	xor    edx,edx
c0028b92:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028b95:	0f 97 c2             	seta   dl
c0028b98:	29 d6                	sub    esi,edx
c0028b9a:	89 d9                	mov    ecx,ebx
c0028b9c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028b9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028ba2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028ba5:	eb 17                	jmp    c0028bbe <__divdf3+0x262>
c0028ba7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028baa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028bad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028bb0:	0f 97 c1             	seta   cl
c0028bb3:	0f b6 c9             	movzx  ecx,cl
c0028bb6:	29 ce                	sub    esi,ecx
c0028bb8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028bbb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028bbe:	83 ca 01             	or     edx,0x1
c0028bc1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028bc4:	75 8b                	jne    c0028b51 <__divdf3+0x1f5>
c0028bc6:	c1 e7 09             	shl    edi,0x9
c0028bc9:	89 d1                	mov    ecx,edx
c0028bcb:	c1 e9 17             	shr    ecx,0x17
c0028bce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bd1:	09 f3                	or     ebx,esi
c0028bd3:	0f 95 c3             	setne  bl
c0028bd6:	0f b6 db             	movzx  ebx,bl
c0028bd9:	c1 e2 09             	shl    edx,0x9
c0028bdc:	09 d3                	or     ebx,edx
c0028bde:	89 ca                	mov    edx,ecx
c0028be0:	09 fa                	or     edx,edi
c0028be2:	78 0c                	js     c0028bf0 <__divdf3+0x294>
c0028be4:	01 d2                	add    edx,edx
c0028be6:	89 d9                	mov    ecx,ebx
c0028be8:	c1 e9 1f             	shr    ecx,0x1f
c0028beb:	09 ca                	or     edx,ecx
c0028bed:	01 db                	add    ebx,ebx
c0028bef:	48                   	dec    eax
c0028bf0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028bf5:	0f 8f 83 00 00 00    	jg     c0028c7e <__divdf3+0x322>
c0028bfb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028c01:	85 c0                	test   eax,eax
c0028c03:	0f 8f 82 00 00 00    	jg     c0028c8b <__divdf3+0x32f>
c0028c09:	83 f8 cc             	cmp    eax,0xffffffcc
c0028c0c:	7c 77                	jl     c0028c85 <__divdf3+0x329>
c0028c0e:	be 01 00 00 00       	mov    esi,0x1
c0028c13:	29 c6                	sub    esi,eax
c0028c15:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028c1b:	83 fe 1f             	cmp    esi,0x1f
c0028c1e:	7e 2f                	jle    c0028c4f <__divdf3+0x2f3>
c0028c20:	83 fe 20             	cmp    esi,0x20
c0028c23:	75 0a                	jne    c0028c2f <__divdf3+0x2d3>
c0028c25:	85 db                	test   ebx,ebx
c0028c27:	0f 95 c3             	setne  bl
c0028c2a:	0f b6 db             	movzx  ebx,bl
c0028c2d:	eb 1a                	jmp    c0028c49 <__divdf3+0x2ed>
c0028c2f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028c32:	89 d7                	mov    edi,edx
c0028c34:	d3 e7                	shl    edi,cl
c0028c36:	89 f9                	mov    ecx,edi
c0028c38:	09 d9                	or     ecx,ebx
c0028c3a:	0f 95 c3             	setne  bl
c0028c3d:	0f b6 db             	movzx  ebx,bl
c0028c40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028c45:	29 c1                	sub    ecx,eax
c0028c47:	d3 ea                	shr    edx,cl
c0028c49:	09 d3                	or     ebx,edx
c0028c4b:	31 c0                	xor    eax,eax
c0028c4d:	eb 3a                	jmp    c0028c89 <__divdf3+0x32d>
c0028c4f:	83 c0 1f             	add    eax,0x1f
c0028c52:	89 d7                	mov    edi,edx
c0028c54:	88 c1                	mov    cl,al
c0028c56:	d3 e7                	shl    edi,cl
c0028c58:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028c5b:	89 df                	mov    edi,ebx
c0028c5d:	89 f1                	mov    ecx,esi
c0028c5f:	d3 ef                	shr    edi,cl
c0028c61:	89 f9                	mov    ecx,edi
c0028c63:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028c66:	09 cf                	or     edi,ecx
c0028c68:	88 c1                	mov    cl,al
c0028c6a:	d3 e3                	shl    ebx,cl
c0028c6c:	85 db                	test   ebx,ebx
c0028c6e:	0f 95 c3             	setne  bl
c0028c71:	0f b6 db             	movzx  ebx,bl
c0028c74:	09 fb                	or     ebx,edi
c0028c76:	89 f1                	mov    ecx,esi
c0028c78:	d3 ea                	shr    edx,cl
c0028c7a:	31 c0                	xor    eax,eax
c0028c7c:	eb 0d                	jmp    c0028c8b <__divdf3+0x32f>
c0028c7e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028c83:	eb 02                	jmp    c0028c87 <__divdf3+0x32b>
c0028c85:	31 c0                	xor    eax,eax
c0028c87:	31 db                	xor    ebx,ebx
c0028c89:	31 d2                	xor    edx,edx
c0028c8b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028c8e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028c91:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028c97:	09 c8                	or     eax,ecx
c0028c99:	c1 e0 14             	shl    eax,0x14
c0028c9c:	89 d1                	mov    ecx,edx
c0028c9e:	c1 e9 0b             	shr    ecx,0xb
c0028ca1:	09 c8                	or     eax,ecx
c0028ca3:	89 c6                	mov    esi,eax
c0028ca5:	89 d9                	mov    ecx,ebx
c0028ca7:	c1 e9 0b             	shr    ecx,0xb
c0028caa:	c1 e2 15             	shl    edx,0x15
c0028cad:	09 ca                	or     edx,ecx
c0028caf:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028cb5:	0f 95 c0             	setne  al
c0028cb8:	09 c1                	or     ecx,eax
c0028cba:	83 e1 01             	and    ecx,0x1
c0028cbd:	c1 eb 0a             	shr    ebx,0xa
c0028cc0:	21 cb                	and    ebx,ecx
c0028cc2:	01 d3                	add    ebx,edx
c0028cc4:	89 d8                	mov    eax,ebx
c0028cc6:	83 d6 00             	adc    esi,0x0
c0028cc9:	89 f2                	mov    edx,esi
c0028ccb:	89 c7                	mov    edi,eax
c0028ccd:	89 d1                	mov    ecx,edx
c0028ccf:	89 f8                	mov    eax,edi
c0028cd1:	89 ca                	mov    edx,ecx
c0028cd3:	83 c4 2c             	add    esp,0x2c
c0028cd6:	5b                   	pop    ebx
c0028cd7:	5e                   	pop    esi
c0028cd8:	5f                   	pop    edi
c0028cd9:	5d                   	pop    ebp
c0028cda:	c3                   	ret    

c0028cdb <__floatsidf>:
c0028cdb:	55                   	push   ebp
c0028cdc:	89 e5                	mov    ebp,esp
c0028cde:	56                   	push   esi
c0028cdf:	53                   	push   ebx
c0028ce0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ce3:	85 db                	test   ebx,ebx
c0028ce5:	7e 15                	jle    c0028cfc <__floatsidf+0x21>
c0028ce7:	0f bd cb             	bsr    ecx,ebx
c0028cea:	83 f1 1f             	xor    ecx,0x1f
c0028ced:	d3 e3                	shl    ebx,cl
c0028cef:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028cf5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028cfa:	eb 21                	jmp    c0028d1d <__floatsidf+0x42>
c0028cfc:	b8 00 00 00 00       	mov    eax,0x0
c0028d01:	ba 00 00 00 00       	mov    edx,0x0
c0028d06:	74 2a                	je     c0028d32 <__floatsidf+0x57>
c0028d08:	f7 db                	neg    ebx
c0028d0a:	0f bd cb             	bsr    ecx,ebx
c0028d0d:	83 f1 1f             	xor    ecx,0x1f
c0028d10:	d3 e3                	shl    ebx,cl
c0028d12:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d18:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028d1d:	29 c8                	sub    eax,ecx
c0028d1f:	c1 e0 14             	shl    eax,0x14
c0028d22:	89 c1                	mov    ecx,eax
c0028d24:	89 de                	mov    esi,ebx
c0028d26:	c1 ee 0b             	shr    esi,0xb
c0028d29:	09 f1                	or     ecx,esi
c0028d2b:	89 ca                	mov    edx,ecx
c0028d2d:	c1 e3 15             	shl    ebx,0x15
c0028d30:	89 d8                	mov    eax,ebx
c0028d32:	5b                   	pop    ebx
c0028d33:	5e                   	pop    esi
c0028d34:	5d                   	pop    ebp
c0028d35:	c3                   	ret    

c0028d36 <__floatunsidf>:
c0028d36:	55                   	push   ebp
c0028d37:	89 e5                	mov    ebp,esp
c0028d39:	56                   	push   esi
c0028d3a:	53                   	push   ebx
c0028d3b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d3e:	85 db                	test   ebx,ebx
c0028d40:	74 2a                	je     c0028d6c <__floatunsidf+0x36>
c0028d42:	0f bd cb             	bsr    ecx,ebx
c0028d45:	83 f1 1f             	xor    ecx,0x1f
c0028d48:	d3 e3                	shl    ebx,cl
c0028d4a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028d50:	b8 1e 04 00 00       	mov    eax,0x41e
c0028d55:	29 c8                	sub    eax,ecx
c0028d57:	c1 e0 14             	shl    eax,0x14
c0028d5a:	89 c1                	mov    ecx,eax
c0028d5c:	89 de                	mov    esi,ebx
c0028d5e:	c1 ee 0b             	shr    esi,0xb
c0028d61:	09 f1                	or     ecx,esi
c0028d63:	89 ca                	mov    edx,ecx
c0028d65:	c1 e3 15             	shl    ebx,0x15
c0028d68:	89 d8                	mov    eax,ebx
c0028d6a:	eb 04                	jmp    c0028d70 <__floatunsidf+0x3a>
c0028d6c:	31 c0                	xor    eax,eax
c0028d6e:	31 d2                	xor    edx,edx
c0028d70:	5b                   	pop    ebx
c0028d71:	5e                   	pop    esi
c0028d72:	5d                   	pop    ebp
c0028d73:	c3                   	ret    

c0028d74 <__fixdfsi>:
c0028d74:	55                   	push   ebp
c0028d75:	89 e5                	mov    ebp,esp
c0028d77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d7a:	89 d1                	mov    ecx,edx
c0028d7c:	c1 e1 0b             	shl    ecx,0xb
c0028d7f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028d88:	c1 e8 15             	shr    eax,0x15
c0028d8b:	09 c1                	or     ecx,eax
c0028d8d:	c1 fa 14             	sar    edx,0x14
c0028d90:	78 1f                	js     c0028db1 <__fixdfsi+0x3d>
c0028d92:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028d98:	31 c0                	xor    eax,eax
c0028d9a:	83 fa 1e             	cmp    edx,0x1e
c0028d9d:	77 40                	ja     c0028ddf <__fixdfsi+0x6b>
c0028d9f:	89 c8                	mov    eax,ecx
c0028da1:	0d 00 00 00 80       	or     eax,0x80000000
c0028da6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028dab:	29 d1                	sub    ecx,edx
c0028dad:	d3 e8                	shr    eax,cl
c0028daf:	eb 2e                	jmp    c0028ddf <__fixdfsi+0x6b>
c0028db1:	31 c0                	xor    eax,eax
c0028db3:	81 c2 01 04 00 00    	add    edx,0x401
c0028db9:	78 24                	js     c0028ddf <__fixdfsi+0x6b>
c0028dbb:	83 fa 1e             	cmp    edx,0x1e
c0028dbe:	7e 09                	jle    c0028dc9 <__fixdfsi+0x55>
c0028dc0:	83 fa 1f             	cmp    edx,0x1f
c0028dc3:	75 18                	jne    c0028ddd <__fixdfsi+0x69>
c0028dc5:	85 c9                	test   ecx,ecx
c0028dc7:	75 14                	jne    c0028ddd <__fixdfsi+0x69>
c0028dc9:	89 c8                	mov    eax,ecx
c0028dcb:	0d 00 00 00 80       	or     eax,0x80000000
c0028dd0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028dd5:	29 d1                	sub    ecx,edx
c0028dd7:	d3 e8                	shr    eax,cl
c0028dd9:	f7 d8                	neg    eax
c0028ddb:	eb 02                	jmp    c0028ddf <__fixdfsi+0x6b>
c0028ddd:	31 c0                	xor    eax,eax
c0028ddf:	5d                   	pop    ebp
c0028de0:	c3                   	ret    

c0028de1 <__fixunsdfsi>:
c0028de1:	55                   	push   ebp
c0028de2:	89 e5                	mov    ebp,esp
c0028de4:	53                   	push   ebx
c0028de5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028de8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028deb:	89 d3                	mov    ebx,edx
c0028ded:	c1 fb 14             	sar    ebx,0x14
c0028df0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028df6:	31 c0                	xor    eax,eax
c0028df8:	83 fb 1f             	cmp    ebx,0x1f
c0028dfb:	77 1d                	ja     c0028e1a <__fixunsdfsi+0x39>
c0028dfd:	89 d0                	mov    eax,edx
c0028dff:	c1 e0 0b             	shl    eax,0xb
c0028e02:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028e07:	c1 e9 15             	shr    ecx,0x15
c0028e0a:	09 c8                	or     eax,ecx
c0028e0c:	0d 00 00 00 80       	or     eax,0x80000000
c0028e11:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028e16:	29 d9                	sub    ecx,ebx
c0028e18:	d3 e8                	shr    eax,cl
c0028e1a:	5b                   	pop    ebx
c0028e1b:	5d                   	pop    ebp
c0028e1c:	c3                   	ret    

c0028e1d <__cmpdf2>:
c0028e1d:	55                   	push   ebp
c0028e1e:	89 e5                	mov    ebp,esp
c0028e20:	57                   	push   edi
c0028e21:	56                   	push   esi
c0028e22:	53                   	push   ebx
c0028e23:	83 ec 0c             	sub    esp,0xc
c0028e26:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028e29:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028e2c:	89 ca                	mov    edx,ecx
c0028e2e:	c1 ea 14             	shr    edx,0x14
c0028e31:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028e37:	89 cb                	mov    ebx,ecx
c0028e39:	c1 fb 1f             	sar    ebx,0x1f
c0028e3c:	31 da                	xor    edx,ebx
c0028e3e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e41:	89 df                	mov    edi,ebx
c0028e43:	c1 e7 0b             	shl    edi,0xb
c0028e46:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028e49:	c1 e1 0b             	shl    ecx,0xb
c0028e4c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e52:	c1 eb 15             	shr    ebx,0x15
c0028e55:	09 d9                	or     ecx,ebx
c0028e57:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028e5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028e5d:	89 ce                	mov    esi,ecx
c0028e5f:	c1 ee 14             	shr    esi,0x14
c0028e62:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028e68:	89 cb                	mov    ebx,ecx
c0028e6a:	c1 fb 1f             	sar    ebx,0x1f
c0028e6d:	31 de                	xor    esi,ebx
c0028e6f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028e72:	89 df                	mov    edi,ebx
c0028e74:	c1 e7 0b             	shl    edi,0xb
c0028e77:	c1 e1 0b             	shl    ecx,0xb
c0028e7a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028e80:	c1 eb 15             	shr    ebx,0x15
c0028e83:	09 d9                	or     ecx,ebx
c0028e85:	89 d3                	mov    ebx,edx
c0028e87:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028e8d:	43                   	inc    ebx
c0028e8e:	83 fb 01             	cmp    ebx,0x1
c0028e91:	77 08                	ja     c0028e9b <__cmpdf2+0x7e>
c0028e93:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028e96:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028e99:	75 68                	jne    c0028f03 <__cmpdf2+0xe6>
c0028e9b:	89 f3                	mov    ebx,esi
c0028e9d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028ea3:	43                   	inc    ebx
c0028ea4:	83 fb 01             	cmp    ebx,0x1
c0028ea7:	77 06                	ja     c0028eaf <__cmpdf2+0x92>
c0028ea9:	89 fb                	mov    ebx,edi
c0028eab:	09 cb                	or     ebx,ecx
c0028ead:	75 54                	jne    c0028f03 <__cmpdf2+0xe6>
c0028eaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028eb2:	09 f8                	or     eax,edi
c0028eb4:	09 c8                	or     eax,ecx
c0028eb6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028eb9:	75 12                	jne    c0028ecd <__cmpdf2+0xb0>
c0028ebb:	8d 42 01             	lea    eax,[edx+0x1]
c0028ebe:	83 f8 01             	cmp    eax,0x1
c0028ec1:	77 0a                	ja     c0028ecd <__cmpdf2+0xb0>
c0028ec3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028ec6:	31 c0                	xor    eax,eax
c0028ec8:	83 fb 01             	cmp    ebx,0x1
c0028ecb:	76 36                	jbe    c0028f03 <__cmpdf2+0xe6>
c0028ecd:	b8 01 00 00 00       	mov    eax,0x1
c0028ed2:	39 f2                	cmp    edx,esi
c0028ed4:	7f 2d                	jg     c0028f03 <__cmpdf2+0xe6>
c0028ed6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028edb:	7c 26                	jl     c0028f03 <__cmpdf2+0xe6>
c0028edd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028ee0:	77 07                	ja     c0028ee9 <__cmpdf2+0xcc>
c0028ee2:	72 16                	jb     c0028efa <__cmpdf2+0xdd>
c0028ee4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028ee7:	76 0a                	jbe    c0028ef3 <__cmpdf2+0xd6>
c0028ee9:	89 d0                	mov    eax,edx
c0028eeb:	c1 f8 1f             	sar    eax,0x1f
c0028eee:	83 c8 01             	or     eax,0x1
c0028ef1:	eb 10                	jmp    c0028f03 <__cmpdf2+0xe6>
c0028ef3:	b8 00 00 00 00       	mov    eax,0x0
c0028ef8:	73 09                	jae    c0028f03 <__cmpdf2+0xe6>
c0028efa:	89 d0                	mov    eax,edx
c0028efc:	c1 f8 1f             	sar    eax,0x1f
c0028eff:	83 e0 02             	and    eax,0x2
c0028f02:	48                   	dec    eax
c0028f03:	83 c4 0c             	add    esp,0xc
c0028f06:	5b                   	pop    ebx
c0028f07:	5e                   	pop    esi
c0028f08:	5f                   	pop    edi
c0028f09:	5d                   	pop    ebp
c0028f0a:	c3                   	ret    

c0028f0b <__eqdf2>:
c0028f0b:	55                   	push   ebp
c0028f0c:	89 e5                	mov    ebp,esp
c0028f0e:	50                   	push   eax
c0028f0f:	6a 01                	push   0x1
c0028f11:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028f14:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028f17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028f1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028f1d:	e8 fb fe ff ff       	call   c0028e1d <__cmpdf2>
c0028f22:	83 c4 18             	add    esp,0x18
c0028f25:	c9                   	leave  
c0028f26:	c3                   	ret    

c0028f27 <__nedf2>:
c0028f27:	eb e2                	jmp    c0028f0b <__eqdf2>

c0028f29 <__gtdf2>:
c0028f29:	55                   	push   ebp
c0028f2a:	89 e5                	mov    ebp,esp
c0028f2c:	50                   	push   eax
c0028f2d:	6a ff                	push   0xffffffff
c0028f2f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028f32:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028f35:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028f38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028f3b:	e8 dd fe ff ff       	call   c0028e1d <__cmpdf2>
c0028f40:	83 c4 18             	add    esp,0x18
c0028f43:	c9                   	leave  
c0028f44:	c3                   	ret    

c0028f45 <__gedf2>:
c0028f45:	eb e2                	jmp    c0028f29 <__gtdf2>

c0028f47 <__ltdf2>:
c0028f47:	eb c2                	jmp    c0028f0b <__eqdf2>

c0028f49 <__ledf2>:
c0028f49:	eb c0                	jmp    c0028f0b <__eqdf2>

c0028f4b <__truncdfsf2>:
c0028f4b:	55                   	push   ebp
c0028f4c:	89 e5                	mov    ebp,esp
c0028f4e:	57                   	push   edi
c0028f4f:	56                   	push   esi
c0028f50:	53                   	push   ebx
c0028f51:	83 ec 0c             	sub    esp,0xc
c0028f54:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f57:	89 d1                	mov    ecx,edx
c0028f59:	c1 f9 14             	sar    ecx,0x14
c0028f5c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028f5f:	89 df                	mov    edi,ebx
c0028f61:	c1 e7 0b             	shl    edi,0xb
c0028f64:	89 d0                	mov    eax,edx
c0028f66:	c1 e0 0b             	shl    eax,0xb
c0028f69:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028f6e:	c1 eb 15             	shr    ebx,0x15
c0028f71:	09 d8                	or     eax,ebx
c0028f73:	89 cb                	mov    ebx,ecx
c0028f75:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028f7b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028f81:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028f87:	0f 86 9e 00 00 00    	jbe    c002902b <__truncdfsf2+0xe0>
c0028f8d:	85 db                	test   ebx,ebx
c0028f8f:	75 0a                	jne    c0028f9b <__truncdfsf2+0x50>
c0028f91:	c1 fa 17             	sar    edx,0x17
c0028f94:	30 d2                	xor    dl,dl
c0028f96:	e9 84 00 00 00       	jmp    c002901f <__truncdfsf2+0xd4>
c0028f9b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028fa1:	83 fe 83             	cmp    esi,0xffffff83
c0028fa4:	7d 4b                	jge    c0028ff1 <__truncdfsf2+0xa6>
c0028fa6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028fab:	29 f1                	sub    ecx,esi
c0028fad:	83 f9 1f             	cmp    ecx,0x1f
c0028fb0:	7f 6b                	jg     c002901d <__truncdfsf2+0xd2>
c0028fb2:	0d 00 00 00 80       	or     eax,0x80000000
c0028fb7:	89 c3                	mov    ebx,eax
c0028fb9:	d3 eb                	shr    ebx,cl
c0028fbb:	be 01 00 00 00       	mov    esi,0x1
c0028fc0:	d3 e6                	shl    esi,cl
c0028fc2:	4e                   	dec    esi
c0028fc3:	21 f0                	and    eax,esi
c0028fc5:	09 f8                	or     eax,edi
c0028fc7:	0f 95 c0             	setne  al
c0028fca:	0f b6 c0             	movzx  eax,al
c0028fcd:	09 c3                	or     ebx,eax
c0028fcf:	89 d9                	mov    ecx,ebx
c0028fd1:	c1 e9 08             	shr    ecx,0x8
c0028fd4:	f6 c3 7f             	test   bl,0x7f
c0028fd7:	0f 95 c0             	setne  al
c0028fda:	09 c8                	or     eax,ecx
c0028fdc:	83 e0 01             	and    eax,0x1
c0028fdf:	c1 eb 07             	shr    ebx,0x7
c0028fe2:	21 c3                	and    ebx,eax
c0028fe4:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028fea:	09 d1                	or     ecx,edx
c0028fec:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028fef:	eb 76                	jmp    c0029067 <__truncdfsf2+0x11c>
c0028ff1:	83 c6 80             	add    esi,0xffffff80
c0028ff4:	7e 1d                	jle    c0029013 <__truncdfsf2+0xc8>
c0028ff6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028ffc:	75 0b                	jne    c0029009 <__truncdfsf2+0xbe>
c0028ffe:	09 f8                	or     eax,edi
c0029000:	74 09                	je     c002900b <__truncdfsf2+0xc0>
c0029002:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0029007:	eb 02                	jmp    c002900b <__truncdfsf2+0xc0>
c0029009:	31 c0                	xor    eax,eax
c002900b:	c1 fa 17             	sar    edx,0x17
c002900e:	80 ca ff             	or     dl,0xff
c0029011:	eb 0e                	jmp    c0029021 <__truncdfsf2+0xd6>
c0029013:	c1 fa 1f             	sar    edx,0x1f
c0029016:	c1 e2 08             	shl    edx,0x8
c0029019:	09 ca                	or     edx,ecx
c002901b:	eb 04                	jmp    c0029021 <__truncdfsf2+0xd6>
c002901d:	31 d2                	xor    edx,edx
c002901f:	31 c0                	xor    eax,eax
c0029021:	c1 e2 17             	shl    edx,0x17
c0029024:	c1 e8 08             	shr    eax,0x8
c0029027:	09 d0                	or     eax,edx
c0029029:	eb 3c                	jmp    c0029067 <__truncdfsf2+0x11c>
c002902b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0029031:	89 ca                	mov    edx,ecx
c0029033:	c1 fa 0b             	sar    edx,0xb
c0029036:	c1 e2 08             	shl    edx,0x8
c0029039:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002903c:	31 db                	xor    ebx,ebx
c002903e:	85 ff                	test   edi,edi
c0029040:	0f 95 c3             	setne  bl
c0029043:	09 d8                	or     eax,ebx
c0029045:	89 c3                	mov    ebx,eax
c0029047:	c1 eb 08             	shr    ebx,0x8
c002904a:	a8 7f                	test   al,0x7f
c002904c:	0f 95 c2             	setne  dl
c002904f:	89 d6                	mov    esi,edx
c0029051:	09 de                	or     esi,ebx
c0029053:	83 e6 01             	and    esi,0x1
c0029056:	c1 e8 07             	shr    eax,0x7
c0029059:	21 f0                	and    eax,esi
c002905b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002905e:	09 ca                	or     edx,ecx
c0029060:	c1 e2 17             	shl    edx,0x17
c0029063:	09 da                	or     edx,ebx
c0029065:	01 d0                	add    eax,edx
c0029067:	83 c4 0c             	add    esp,0xc
c002906a:	5b                   	pop    ebx
c002906b:	5e                   	pop    esi
c002906c:	5f                   	pop    edi
c002906d:	5d                   	pop    ebp
c002906e:	c3                   	ret    

c002906f <__extendsfdf2>:
c002906f:	55                   	push   ebp
c0029070:	89 e5                	mov    ebp,esp
c0029072:	57                   	push   edi
c0029073:	56                   	push   esi
c0029074:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029077:	89 d1                	mov    ecx,edx
c0029079:	c1 f9 17             	sar    ecx,0x17
c002907c:	c1 e2 08             	shl    edx,0x8
c002907f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029085:	89 c8                	mov    eax,ecx
c0029087:	80 e4 f8             	and    ah,0xf8
c002908a:	8d 71 01             	lea    esi,[ecx+0x1]
c002908d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029093:	75 27                	jne    c00290bc <__extendsfdf2+0x4d>
c0029095:	81 e1 ff 00 00 00    	and    ecx,0xff
c002909b:	75 18                	jne    c00290b5 <__extendsfdf2+0x46>
c002909d:	85 d2                	test   edx,edx
c002909f:	74 20                	je     c00290c1 <__extendsfdf2+0x52>
c00290a1:	41                   	inc    ecx
c00290a2:	01 d2                	add    edx,edx
c00290a4:	79 fb                	jns    c00290a1 <__extendsfdf2+0x32>
c00290a6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00290ac:	29 c8                	sub    eax,ecx
c00290ae:	05 81 03 00 00       	add    eax,0x381
c00290b3:	eb 0c                	jmp    c00290c1 <__extendsfdf2+0x52>
c00290b5:	05 00 07 00 00       	add    eax,0x700
c00290ba:	eb 05                	jmp    c00290c1 <__extendsfdf2+0x52>
c00290bc:	05 80 03 00 00       	add    eax,0x380
c00290c1:	c1 e0 14             	shl    eax,0x14
c00290c4:	89 c1                	mov    ecx,eax
c00290c6:	89 d0                	mov    eax,edx
c00290c8:	c1 e8 0b             	shr    eax,0xb
c00290cb:	09 c1                	or     ecx,eax
c00290cd:	c1 e2 15             	shl    edx,0x15
c00290d0:	89 d0                	mov    eax,edx
c00290d2:	89 ca                	mov    edx,ecx
c00290d4:	5e                   	pop    esi
c00290d5:	5f                   	pop    edi
c00290d6:	5d                   	pop    ebp
c00290d7:	c3                   	ret    
c00290d8:	66 90                	xchg   ax,ax
c00290da:	66 90                	xchg   ax,ax
c00290dc:	66 90                	xchg   ax,ax
c00290de:	66 90                	xchg   ax,ax

c00290e0 <fabs>:
c00290e0:	83 ec 0c             	sub    esp,0xc
c00290e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00290ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00290ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00290f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00290f7:	dd 04 24             	fld    QWORD PTR [esp]
c00290fa:	83 c4 0c             	add    esp,0xc
c00290fd:	c3                   	ret    
c00290fe:	66 90                	xchg   ax,ax

c0029100 <lrint>:
c0029100:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0029104:	83 ec 04             	sub    esp,0x4
c0029107:	db 1c 24             	fistp  DWORD PTR [esp]
c002910a:	58                   	pop    eax
c002910b:	c3                   	ret    

c002910c <lrintf>:
c002910c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0029110:	83 ec 04             	sub    esp,0x4
c0029113:	db 1c 24             	fistp  DWORD PTR [esp]
c0029116:	58                   	pop    eax
c0029117:	c3                   	ret    

Disassembly of section .init:

c0029118 <_init>:
c0029118:	55                   	push   ebp
c0029119:	89 e5                	mov    ebp,esp
c002911b:	e8 f8 6f fd ff       	call   c0000118 <frame_dummy>
c0029120:	e8 5b e0 ff ff       	call   c0027180 <__do_global_ctors_aux>
c0029125:	5d                   	pop    ebp
c0029126:	c3                   	ret    

Disassembly of section .fini:

c0029127 <_fini>:
c0029127:	55                   	push   ebp
c0029128:	89 e5                	mov    ebp,esp
c002912a:	e8 79 6f fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002912f:	5d                   	pop    ebp
c0029130:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0029132 <Computer::~Computer()>:
c0029132:	83 ec 0c             	sub    esp,0xc
c0029135:	ba 68 ad 02 c0       	mov    edx,0xc002ad68
c002913a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913e:	89 10                	mov    DWORD PTR [eax],edx
c0029140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029144:	83 ec 0c             	sub    esp,0xc
c0029147:	50                   	push   eax
c0029148:	e8 e7 ac fe ff       	call   c0013e34 <Device::~Device()>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	90                   	nop
c0029151:	83 c4 0c             	add    esp,0xc
c0029154:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0029156 <Computer::~Computer()>:
c0029156:	83 ec 0c             	sub    esp,0xc
c0029159:	83 ec 0c             	sub    esp,0xc
c002915c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029160:	e8 cd ff ff ff       	call   c0029132 <Computer::~Computer()>
c0029165:	83 c4 10             	add    esp,0x10
c0029168:	83 ec 08             	sub    esp,0x8
c002916b:	68 ec 01 00 00       	push   0x1ec
c0029170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029174:	e8 d4 98 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029179:	83 c4 10             	add    esp,0x10
c002917c:	83 c4 0c             	add    esp,0xc
c002917f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029180 <idleCommon()>:
c0029180:	83 ec 0c             	sub    esp,0xc
c0029183:	fa                   	cli    
c0029184:	ff 05 c8 26 03 c0    	inc    DWORD PTR ds:0xc00326c8
c002918a:	e8 bd 52 ff ff       	call   c001e44c <schedule()>
c002918f:	a1 c8 26 03 c0       	mov    eax,ds:0xc00326c8
c0029194:	48                   	dec    eax
c0029195:	a3 c8 26 03 c0       	mov    ds:0xc00326c8,eax
c002919a:	75 01                	jne    c002919d <idleCommon()+0x1d>
c002919c:	fb                   	sti    
c002919d:	83 c4 0c             	add    esp,0xc
c00291a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00291a2 <LinkedList<UnixFile>::~LinkedList()>:
c00291a2:	90                   	nop
c00291a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00291a4 <LinkedList<UnixFile>::LinkedList()>:
c00291a4:	83 ec 0c             	sub    esp,0xc
c00291a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291e7:	83 ec 0c             	sub    esp,0xc
c00291ea:	68 26 b0 02 c0       	push   0xc002b026
c00291ef:	e8 39 99 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00291f4:	83 c4 10             	add    esp,0x10
c00291f7:	90                   	nop
c00291f8:	83 c4 0c             	add    esp,0xc
c00291fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00291fc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029204:	75 10                	jne    c0029216 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029206:	83 ec 0c             	sub    esp,0xc
c0029209:	68 40 b0 02 c0       	push   0xc002b040
c002920e:	e8 86 14 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029213:	83 c4 10             	add    esp,0x10
c0029216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921a:	8b 00                	mov    eax,DWORD PTR [eax]
c002921c:	85 c0                	test   eax,eax
c002921e:	74 34                	je     c0029254 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0029220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029224:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029227:	85 c0                	test   eax,eax
c0029229:	74 29                	je     c0029254 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002922b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029232:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029236:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029241:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002924b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029252:	eb 65                	jmp    c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029258:	8b 00                	mov    eax,DWORD PTR [eax]
c002925a:	85 c0                	test   eax,eax
c002925c:	75 4b                	jne    c00292a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002925e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029262:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029265:	85 c0                	test   eax,eax
c0029267:	75 40                	jne    c00292a9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029271:	89 10                	mov    DWORD PTR [eax],edx
c0029273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029277:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002927b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002927e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029282:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029285:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002928c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029290:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029293:	85 c0                	test   eax,eax
c0029295:	74 22                	je     c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029297:	83 ec 0c             	sub    esp,0xc
c002929a:	68 62 b0 02 c0       	push   0xc002b062
c002929f:	e8 f5 13 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00292a4:	83 c4 10             	add    esp,0x10
c00292a7:	eb 10                	jmp    c00292b9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00292a9:	83 ec 0c             	sub    esp,0xc
c00292ac:	68 6c b0 02 c0       	push   0xc002b06c
c00292b1:	e8 e3 13 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00292b6:	83 c4 10             	add    esp,0x10
c00292b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c0:	8d 50 01             	lea    edx,[eax+0x1]
c00292c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292ca:	90                   	nop
c00292cb:	83 c4 0c             	add    esp,0xc
c00292ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00292d0 <LinkedList<UnixFile>::getFirstElement()>:
c00292d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00292d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00292d8 <LinkedList<UnixFile>::removeFirst()>:
c00292d8:	83 ec 0c             	sub    esp,0xc
c00292db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292df:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e1:	85 c0                	test   eax,eax
c00292e3:	75 12                	jne    c00292f7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00292e5:	83 ec 0c             	sub    esp,0xc
c00292e8:	68 78 b0 02 c0       	push   0xc002b078
c00292ed:	e8 a7 13 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00292f2:	83 c4 10             	add    esp,0x10
c00292f5:	eb 7e                	jmp    c0029375 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00292f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029301:	85 c0                	test   eax,eax
c0029303:	74 10                	je     c0029315 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029305:	83 ec 0c             	sub    esp,0xc
c0029308:	68 c3 b0 02 c0       	push   0xc002b0c3
c002930d:	e8 87 13 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029312:	83 c4 10             	add    esp,0x10
c0029315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029319:	8b 00                	mov    eax,DWORD PTR [eax]
c002931b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002931e:	85 c0                	test   eax,eax
c0029320:	75 33                	jne    c0029355 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029326:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002932c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029330:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002933e:	83 f8 01             	cmp    eax,0x1
c0029341:	74 21                	je     c0029364 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029343:	83 ec 0c             	sub    esp,0xc
c0029346:	68 9c b0 02 c0       	push   0xc002b09c
c002934b:	e8 49 13 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029350:	83 c4 10             	add    esp,0x10
c0029353:	eb 0f                	jmp    c0029364 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029359:	8b 00                	mov    eax,DWORD PTR [eax]
c002935b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002935e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029362:	89 10                	mov    DWORD PTR [eax],edx
c0029364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029368:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002936b:	8d 50 ff             	lea    edx,[eax-0x1]
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029375:	83 c4 0c             	add    esp,0xc
c0029378:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002937a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002937a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002937e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029381:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029382 <DriverlessDevice::~DriverlessDevice()>:
c0029382:	ba 7c b8 02 c0       	mov    edx,0xc002b87c
c0029387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002938b:	89 10                	mov    DWORD PTR [eax],edx
c002938d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029391:	50                   	push   eax
c0029392:	e8 9d aa fe ff       	call   c0013e34 <Device::~Device()>
c0029397:	83 c4 04             	add    esp,0x4
c002939a:	90                   	nop
c002939b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002939c <DriverlessDevice::~DriverlessDevice()>:
c002939c:	83 ec 0c             	sub    esp,0xc
c002939f:	83 ec 0c             	sub    esp,0xc
c00293a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293a6:	e8 d7 ff ff ff       	call   c0029382 <DriverlessDevice::~DriverlessDevice()>
c00293ab:	83 c4 10             	add    esp,0x10
c00293ae:	83 ec 08             	sub    esp,0x8
c00293b1:	68 58 01 00 00       	push   0x158
c00293b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293ba:	e8 8e 96 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00293bf:	83 c4 10             	add    esp,0x10
c00293c2:	83 c4 0c             	add    esp,0xc
c00293c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00293c6 <LinkedList<Device>::addElement(Device*)>:
c00293c6:	83 ec 0c             	sub    esp,0xc
c00293c9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00293ce:	75 10                	jne    c00293e0 <LinkedList<Device>::addElement(Device*)+0x1a>
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	68 40 b0 02 c0       	push   0xc002b040
c00293d8:	e8 bc 12 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00293dd:	83 c4 10             	add    esp,0x10
c00293e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00293e6:	85 c0                	test   eax,eax
c00293e8:	74 3a                	je     c0029424 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293f1:	85 c0                	test   eax,eax
c00293f3:	74 2f                	je     c0029424 <LinkedList<Device>::addElement(Device*)+0x5e>
c00293f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029400:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002940e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029415:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029418:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029422:	eb 68                	jmp    c002948c <LinkedList<Device>::addElement(Device*)+0xc6>
c0029424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029428:	8b 00                	mov    eax,DWORD PTR [eax]
c002942a:	85 c0                	test   eax,eax
c002942c:	75 4e                	jne    c002947c <LinkedList<Device>::addElement(Device*)+0xb6>
c002942e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029432:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029435:	85 c0                	test   eax,eax
c0029437:	75 43                	jne    c002947c <LinkedList<Device>::addElement(Device*)+0xb6>
c0029439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029441:	89 10                	mov    DWORD PTR [eax],edx
c0029443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029447:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002944b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002944e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029455:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002945f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029463:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029466:	85 c0                	test   eax,eax
c0029468:	74 22                	je     c002948c <LinkedList<Device>::addElement(Device*)+0xc6>
c002946a:	83 ec 0c             	sub    esp,0xc
c002946d:	68 62 b0 02 c0       	push   0xc002b062
c0029472:	e8 22 12 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029477:	83 c4 10             	add    esp,0x10
c002947a:	eb 10                	jmp    c002948c <LinkedList<Device>::addElement(Device*)+0xc6>
c002947c:	83 ec 0c             	sub    esp,0xc
c002947f:	68 6c b0 02 c0       	push   0xc002b06c
c0029484:	e8 10 12 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029489:	83 c4 10             	add    esp,0x10
c002948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029490:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029493:	8d 50 01             	lea    edx,[eax+0x1]
c0029496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002949d:	90                   	nop
c002949e:	83 c4 0c             	add    esp,0xc
c00294a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00294a2 <LinkedList<Device>::LinkedList()>:
c00294a2:	83 ec 0c             	sub    esp,0xc
c00294a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00294e5:	83 ec 0c             	sub    esp,0xc
c00294e8:	68 26 b0 02 c0       	push   0xc002b026
c00294ed:	e8 3b 96 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00294f2:	83 c4 10             	add    esp,0x10
c00294f5:	90                   	nop
c00294f6:	83 c4 0c             	add    esp,0xc
c00294f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00294fa <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00294fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0029500:	85 c0                	test   eax,eax
c0029502:	75 0e                	jne    c0029512 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002950b:	85 c0                	test   eax,eax
c002950d:	75 03                	jne    c0029512 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002950f:	b0 01                	mov    al,0x1
c0029511:	c3                   	ret    
c0029512:	b0 00                	mov    al,0x0
c0029514:	90                   	nop
c0029515:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029516 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002951a:	8b 00                	mov    eax,DWORD PTR [eax]
c002951c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002951e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002951e:	83 ec 0c             	sub    esp,0xc
c0029521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029525:	8b 00                	mov    eax,DWORD PTR [eax]
c0029527:	85 c0                	test   eax,eax
c0029529:	75 15                	jne    c0029540 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002952b:	83 ec 0c             	sub    esp,0xc
c002952e:	68 78 b0 02 c0       	push   0xc002b078
c0029533:	e8 61 11 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029538:	83 c4 10             	add    esp,0x10
c002953b:	e9 88 00 00 00       	jmp    c00295c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029547:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002954a:	85 c0                	test   eax,eax
c002954c:	0f 95 c0             	setne  al
c002954f:	84 c0                	test   al,al
c0029551:	74 10                	je     c0029563 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029553:	83 ec 0c             	sub    esp,0xc
c0029556:	68 c3 b0 02 c0       	push   0xc002b0c3
c002955b:	e8 39 11 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029560:	83 c4 10             	add    esp,0x10
c0029563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029567:	8b 00                	mov    eax,DWORD PTR [eax]
c0029569:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002956c:	85 c0                	test   eax,eax
c002956e:	0f 94 c0             	sete   al
c0029571:	84 c0                	test   al,al
c0029573:	74 33                	je     c00295a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029579:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002957f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029583:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002958a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029591:	83 f8 01             	cmp    eax,0x1
c0029594:	74 21                	je     c00295b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029596:	83 ec 0c             	sub    esp,0xc
c0029599:	68 9c b0 02 c0       	push   0xc002b09c
c002959e:	e8 f6 10 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00295a3:	83 c4 10             	add    esp,0x10
c00295a6:	eb 0f                	jmp    c00295b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00295a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00295b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b5:	89 10                	mov    DWORD PTR [eax],edx
c00295b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00295be:	8d 50 ff             	lea    edx,[eax-0x1]
c00295c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00295c8:	83 c4 0c             	add    esp,0xc
c00295cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00295cc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00295cc:	83 ec 0c             	sub    esp,0xc
c00295cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00295d4:	75 10                	jne    c00295e6 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00295d6:	83 ec 0c             	sub    esp,0xc
c00295d9:	68 40 b0 02 c0       	push   0xc002b040
c00295de:	e8 b6 10 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c00295e3:	83 c4 10             	add    esp,0x10
c00295e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ec:	85 c0                	test   eax,eax
c00295ee:	74 34                	je     c0029624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00295f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295f7:	85 c0                	test   eax,eax
c00295f9:	74 29                	je     c0029624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00295fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029602:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029606:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029611:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002961b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029622:	eb 65                	jmp    c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	8b 00                	mov    eax,DWORD PTR [eax]
c002962a:	85 c0                	test   eax,eax
c002962c:	75 4b                	jne    c0029679 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002962e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029632:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029635:	85 c0                	test   eax,eax
c0029637:	75 40                	jne    c0029679 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029641:	89 10                	mov    DWORD PTR [eax],edx
c0029643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002964b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002964e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029655:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002965c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029660:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029663:	85 c0                	test   eax,eax
c0029665:	74 22                	je     c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029667:	83 ec 0c             	sub    esp,0xc
c002966a:	68 62 b0 02 c0       	push   0xc002b062
c002966f:	e8 25 10 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029674:	83 c4 10             	add    esp,0x10
c0029677:	eb 10                	jmp    c0029689 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029679:	83 ec 0c             	sub    esp,0xc
c002967c:	68 6c b0 02 c0       	push   0xc002b06c
c0029681:	e8 13 10 ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029686:	83 c4 10             	add    esp,0x10
c0029689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029690:	8d 50 01             	lea    edx,[eax+0x1]
c0029693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029697:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002969a:	90                   	nop
c002969b:	83 c4 0c             	add    esp,0xc
c002969e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00296a0 <ACPI::~ACPI()>:
c00296a0:	83 ec 0c             	sub    esp,0xc
c00296a3:	ba c4 c2 02 c0       	mov    edx,0xc002c2c4
c00296a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ac:	89 10                	mov    DWORD PTR [eax],edx
c00296ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b2:	83 ec 0c             	sub    esp,0xc
c00296b5:	50                   	push   eax
c00296b6:	e8 79 a7 fe ff       	call   c0013e34 <Device::~Device()>
c00296bb:	83 c4 10             	add    esp,0x10
c00296be:	90                   	nop
c00296bf:	83 c4 0c             	add    esp,0xc
c00296c2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00296c4 <ACPI::~ACPI()>:
c00296c4:	83 ec 0c             	sub    esp,0xc
c00296c7:	83 ec 0c             	sub    esp,0xc
c00296ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ce:	e8 cd ff ff ff       	call   c00296a0 <ACPI::~ACPI()>
c00296d3:	83 c4 10             	add    esp,0x10
c00296d6:	83 ec 08             	sub    esp,0x8
c00296d9:	68 68 12 00 00       	push   0x1268
c00296de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e2:	e8 66 93 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00296e7:	83 c4 10             	add    esp,0x10
c00296ea:	83 c4 0c             	add    esp,0xc
c00296ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00296ee <LinkedList<Device>::~LinkedList()>:
c00296ee:	90                   	nop
c00296ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00296f0 <LinkedList<Device>::isEmpty()>:
c00296f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00296f6:	85 c0                	test   eax,eax
c00296f8:	75 0e                	jne    c0029708 <LinkedList<Device>::isEmpty()+0x18>
c00296fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029701:	85 c0                	test   eax,eax
c0029703:	75 03                	jne    c0029708 <LinkedList<Device>::isEmpty()+0x18>
c0029705:	b0 01                	mov    al,0x1
c0029707:	c3                   	ret    
c0029708:	b0 00                	mov    al,0x0
c002970a:	90                   	nop
c002970b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002970c <LinkedList<Device>::getFirstElement()>:
c002970c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029710:	8b 00                	mov    eax,DWORD PTR [eax]
c0029712:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029714 <LinkedList<Device>::removeFirst()>:
c0029714:	83 ec 0c             	sub    esp,0xc
c0029717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002971b:	8b 00                	mov    eax,DWORD PTR [eax]
c002971d:	85 c0                	test   eax,eax
c002971f:	75 15                	jne    c0029736 <LinkedList<Device>::removeFirst()+0x22>
c0029721:	83 ec 0c             	sub    esp,0xc
c0029724:	68 78 b0 02 c0       	push   0xc002b078
c0029729:	e8 6b 0f ff ff       	call   c001a699 <Krnl::panic(char const*)>
c002972e:	83 c4 10             	add    esp,0x10
c0029731:	e9 87 00 00 00       	jmp    c00297bd <LinkedList<Device>::removeFirst()+0xa9>
c0029736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002973d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029743:	85 c0                	test   eax,eax
c0029745:	74 10                	je     c0029757 <LinkedList<Device>::removeFirst()+0x43>
c0029747:	83 ec 0c             	sub    esp,0xc
c002974a:	68 c3 b0 02 c0       	push   0xc002b0c3
c002974f:	e8 45 0f ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029754:	83 c4 10             	add    esp,0x10
c0029757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975b:	8b 00                	mov    eax,DWORD PTR [eax]
c002975d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029763:	85 c0                	test   eax,eax
c0029765:	75 33                	jne    c002979a <LinkedList<Device>::removeFirst()+0x86>
c0029767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002976b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029775:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002977c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029780:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029783:	83 f8 01             	cmp    eax,0x1
c0029786:	74 24                	je     c00297ac <LinkedList<Device>::removeFirst()+0x98>
c0029788:	83 ec 0c             	sub    esp,0xc
c002978b:	68 9c b0 02 c0       	push   0xc002b09c
c0029790:	e8 04 0f ff ff       	call   c001a699 <Krnl::panic(char const*)>
c0029795:	83 c4 10             	add    esp,0x10
c0029798:	eb 12                	jmp    c00297ac <LinkedList<Device>::removeFirst()+0x98>
c002979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979e:	8b 00                	mov    eax,DWORD PTR [eax]
c00297a0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00297a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297aa:	89 10                	mov    DWORD PTR [eax],edx
c00297ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00297b3:	8d 50 ff             	lea    edx,[eax-0x1]
c00297b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00297bd:	83 c4 0c             	add    esp,0xc
c00297c0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00297c2 <CPU::~CPU()>:
c00297c2:	83 ec 0c             	sub    esp,0xc
c00297c5:	ba b4 c6 02 c0       	mov    edx,0xc002c6b4
c00297ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ce:	89 10                	mov    DWORD PTR [eax],edx
c00297d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d4:	83 ec 0c             	sub    esp,0xc
c00297d7:	50                   	push   eax
c00297d8:	e8 57 a6 fe ff       	call   c0013e34 <Device::~Device()>
c00297dd:	83 c4 10             	add    esp,0x10
c00297e0:	90                   	nop
c00297e1:	83 c4 0c             	add    esp,0xc
c00297e4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00297e6 <CPU::~CPU()>:
c00297e6:	83 ec 0c             	sub    esp,0xc
c00297e9:	83 ec 0c             	sub    esp,0xc
c00297ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f0:	e8 cd ff ff ff       	call   c00297c2 <CPU::~CPU()>
c00297f5:	83 c4 10             	add    esp,0x10
c00297f8:	83 ec 08             	sub    esp,0x8
c00297fb:	68 98 11 00 00       	push   0x1198
c0029800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029804:	e8 44 92 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029809:	83 c4 10             	add    esp,0x10
c002980c:	83 c4 0c             	add    esp,0xc
c002980f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029810 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029810:	90                   	nop
c0029811:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029812 <ThreadControlBlock::ThreadControlBlock()>:
c0029812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029816:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002981d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029821:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002982c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029837:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002983e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029842:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002984d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029855:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029859:	90                   	nop
c002985a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002985c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029863:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029878:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002987f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029883:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029898:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002989f:	83 ec 0c             	sub    esp,0xc
c00298a2:	68 26 b0 02 c0       	push   0xc002b026
c00298a7:	e8 81 92 fe ff       	call   c0012b2d <Dbg::kprintf(char const*, ...)>
c00298ac:	83 c4 10             	add    esp,0x10
c00298af:	90                   	nop
c00298b0:	83 c4 0c             	add    esp,0xc
c00298b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00298b4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00298b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00298b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00298bb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00298bc <Vm::_FPUState::_FPUState()>:
c00298bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298c0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00298c7:	90                   	nop
c00298c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00298ca <PCI::~PCI()>:
c00298ca:	83 ec 0c             	sub    esp,0xc
c00298cd:	ba e0 d7 02 c0       	mov    edx,0xc002d7e0
c00298d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d6:	89 10                	mov    DWORD PTR [eax],edx
c00298d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	50                   	push   eax
c00298e0:	e8 1f 9f fe ff       	call   c0013804 <Bus::~Bus()>
c00298e5:	83 c4 10             	add    esp,0x10
c00298e8:	90                   	nop
c00298e9:	83 c4 0c             	add    esp,0xc
c00298ec:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00298ee <PCI::~PCI()>:
c00298ee:	83 ec 0c             	sub    esp,0xc
c00298f1:	83 ec 0c             	sub    esp,0xc
c00298f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298f8:	e8 cd ff ff ff       	call   c00298ca <PCI::~PCI()>
c00298fd:	83 c4 10             	add    esp,0x10
c0029900:	83 ec 08             	sub    esp,0x8
c0029903:	68 58 01 00 00       	push   0x158
c0029908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002990c:	e8 3c 91 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029911:	83 c4 10             	add    esp,0x10
c0029914:	83 c4 0c             	add    esp,0xc
c0029917:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029918 <IDE::~IDE()>:
c0029918:	83 ec 0c             	sub    esp,0xc
c002991b:	ba 44 da 02 c0       	mov    edx,0xc002da44
c0029920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029924:	89 10                	mov    DWORD PTR [eax],edx
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	50                   	push   eax
c002992e:	e8 17 aa fe ff       	call   c001434a <HardDiskController::~HardDiskController()>
c0029933:	83 c4 10             	add    esp,0x10
c0029936:	90                   	nop
c0029937:	83 c4 0c             	add    esp,0xc
c002993a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002993c <IDE::~IDE()>:
c002993c:	83 ec 0c             	sub    esp,0xc
c002993f:	83 ec 0c             	sub    esp,0xc
c0029942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029946:	e8 cd ff ff ff       	call   c0029918 <IDE::~IDE()>
c002994b:	83 c4 10             	add    esp,0x10
c002994e:	83 ec 08             	sub    esp,0x8
c0029951:	68 70 02 00 00       	push   0x270
c0029956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002995a:	e8 ee 90 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c002995f:	83 c4 10             	add    esp,0x10
c0029962:	83 c4 0c             	add    esp,0xc
c0029965:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029966 <SATABus::~SATABus()>:
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	ba 24 db 02 c0       	mov    edx,0xc002db24
c002996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029972:	89 10                	mov    DWORD PTR [eax],edx
c0029974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	50                   	push   eax
c002997c:	e8 c9 a9 fe ff       	call   c001434a <HardDiskController::~HardDiskController()>
c0029981:	83 c4 10             	add    esp,0x10
c0029984:	90                   	nop
c0029985:	83 c4 0c             	add    esp,0xc
c0029988:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002998a <SATABus::~SATABus()>:
c002998a:	83 ec 0c             	sub    esp,0xc
c002998d:	83 ec 0c             	sub    esp,0xc
c0029990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029994:	e8 cd ff ff ff       	call   c0029966 <SATABus::~SATABus()>
c0029999:	83 c4 10             	add    esp,0x10
c002999c:	83 ec 08             	sub    esp,0x8
c002999f:	68 64 01 00 00       	push   0x164
c00299a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a8:	e8 a0 90 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00299ad:	83 c4 10             	add    esp,0x10
c00299b0:	83 c4 0c             	add    esp,0xc
c00299b3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00299b4 <ATA::~ATA()>:
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	ba 70 db 02 c0       	mov    edx,0xc002db70
c00299bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c0:	89 10                	mov    DWORD PTR [eax],edx
c00299c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	50                   	push   eax
c00299ca:	e8 6d aa fe ff       	call   c001443c <PhysicalDisk::~PhysicalDisk()>
c00299cf:	83 c4 10             	add    esp,0x10
c00299d2:	90                   	nop
c00299d3:	83 c4 0c             	add    esp,0xc
c00299d6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00299d8 <ATA::~ATA()>:
c00299d8:	83 ec 0c             	sub    esp,0xc
c00299db:	83 ec 0c             	sub    esp,0xc
c00299de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e2:	e8 cd ff ff ff       	call   c00299b4 <ATA::~ATA()>
c00299e7:	83 c4 10             	add    esp,0x10
c00299ea:	83 ec 08             	sub    esp,0x8
c00299ed:	68 7c 01 00 00       	push   0x17c
c00299f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f6:	e8 52 90 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c00299fb:	83 c4 10             	add    esp,0x10
c00299fe:	83 c4 0c             	add    esp,0xc
c0029a01:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029a02 <ATAPI::~ATAPI()>:
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	ba a8 db 02 c0       	mov    edx,0xc002dba8
c0029a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0e:	89 10                	mov    DWORD PTR [eax],edx
c0029a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	50                   	push   eax
c0029a18:	e8 1f aa fe ff       	call   c001443c <PhysicalDisk::~PhysicalDisk()>
c0029a1d:	83 c4 10             	add    esp,0x10
c0029a20:	90                   	nop
c0029a21:	83 c4 0c             	add    esp,0xc
c0029a24:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029a26 <ATAPI::~ATAPI()>:
c0029a26:	83 ec 0c             	sub    esp,0xc
c0029a29:	83 ec 0c             	sub    esp,0xc
c0029a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a30:	e8 cd ff ff ff       	call   c0029a02 <ATAPI::~ATAPI()>
c0029a35:	83 c4 10             	add    esp,0x10
c0029a38:	83 ec 08             	sub    esp,0x8
c0029a3b:	68 80 01 00 00       	push   0x180
c0029a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a44:	e8 04 90 fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029a49:	83 c4 10             	add    esp,0x10
c0029a4c:	83 c4 0c             	add    esp,0xc
c0029a4f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029a50 <SATA::~SATA()>:
c0029a50:	83 ec 0c             	sub    esp,0xc
c0029a53:	ba 5c dc 02 c0       	mov    edx,0xc002dc5c
c0029a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5c:	89 10                	mov    DWORD PTR [eax],edx
c0029a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	50                   	push   eax
c0029a66:	e8 d1 a9 fe ff       	call   c001443c <PhysicalDisk::~PhysicalDisk()>
c0029a6b:	83 c4 10             	add    esp,0x10
c0029a6e:	90                   	nop
c0029a6f:	83 c4 0c             	add    esp,0xc
c0029a72:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029a74 <SATA::~SATA()>:
c0029a74:	83 ec 0c             	sub    esp,0xc
c0029a77:	83 ec 0c             	sub    esp,0xc
c0029a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a7e:	e8 cd ff ff ff       	call   c0029a50 <SATA::~SATA()>
c0029a83:	83 c4 10             	add    esp,0x10
c0029a86:	83 ec 08             	sub    esp,0x8
c0029a89:	68 7c 01 00 00       	push   0x17c
c0029a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a92:	e8 b6 8f fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029a97:	83 c4 10             	add    esp,0x10
c0029a9a:	83 c4 0c             	add    esp,0xc
c0029a9d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029a9e <SATAPI::~SATAPI()>:
c0029a9e:	83 ec 0c             	sub    esp,0xc
c0029aa1:	ba 38 dd 02 c0       	mov    edx,0xc002dd38
c0029aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aaa:	89 10                	mov    DWORD PTR [eax],edx
c0029aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	50                   	push   eax
c0029ab4:	e8 83 a9 fe ff       	call   c001443c <PhysicalDisk::~PhysicalDisk()>
c0029ab9:	83 c4 10             	add    esp,0x10
c0029abc:	90                   	nop
c0029abd:	83 c4 0c             	add    esp,0xc
c0029ac0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029ac2 <SATAPI::~SATAPI()>:
c0029ac2:	83 ec 0c             	sub    esp,0xc
c0029ac5:	83 ec 0c             	sub    esp,0xc
c0029ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029acc:	e8 cd ff ff ff       	call   c0029a9e <SATAPI::~SATAPI()>
c0029ad1:	83 c4 10             	add    esp,0x10
c0029ad4:	83 ec 08             	sub    esp,0x8
c0029ad7:	68 80 01 00 00       	push   0x180
c0029adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ae0:	e8 68 8f fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029ae5:	83 c4 10             	add    esp,0x10
c0029ae8:	83 c4 0c             	add    esp,0xc
c0029aeb:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029aec <AVX::~AVX()>:
c0029aec:	83 ec 0c             	sub    esp,0xc
c0029aef:	ba 78 dd 02 c0       	mov    edx,0xc002dd78
c0029af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af8:	89 10                	mov    DWORD PTR [eax],edx
c0029afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afe:	83 ec 0c             	sub    esp,0xc
c0029b01:	50                   	push   eax
c0029b02:	e8 b9 a9 fe ff       	call   c00144c0 <FPU::~FPU()>
c0029b07:	83 c4 10             	add    esp,0x10
c0029b0a:	90                   	nop
c0029b0b:	83 c4 0c             	add    esp,0xc
c0029b0e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029b10 <AVX::~AVX()>:
c0029b10:	83 ec 0c             	sub    esp,0xc
c0029b13:	83 ec 0c             	sub    esp,0xc
c0029b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b1a:	e8 cd ff ff ff       	call   c0029aec <AVX::~AVX()>
c0029b1f:	83 c4 10             	add    esp,0x10
c0029b22:	83 ec 08             	sub    esp,0x8
c0029b25:	68 58 01 00 00       	push   0x158
c0029b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b2e:	e8 1a 8f fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029b33:	83 c4 10             	add    esp,0x10
c0029b36:	83 c4 0c             	add    esp,0xc
c0029b39:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029b3a <MMX::~MMX()>:
c0029b3a:	83 ec 0c             	sub    esp,0xc
c0029b3d:	ba b8 dd 02 c0       	mov    edx,0xc002ddb8
c0029b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b46:	89 10                	mov    DWORD PTR [eax],edx
c0029b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b4c:	83 ec 0c             	sub    esp,0xc
c0029b4f:	50                   	push   eax
c0029b50:	e8 6b a9 fe ff       	call   c00144c0 <FPU::~FPU()>
c0029b55:	83 c4 10             	add    esp,0x10
c0029b58:	90                   	nop
c0029b59:	83 c4 0c             	add    esp,0xc
c0029b5c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029b5e <MMX::~MMX()>:
c0029b5e:	83 ec 0c             	sub    esp,0xc
c0029b61:	83 ec 0c             	sub    esp,0xc
c0029b64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b68:	e8 cd ff ff ff       	call   c0029b3a <MMX::~MMX()>
c0029b6d:	83 c4 10             	add    esp,0x10
c0029b70:	83 ec 08             	sub    esp,0x8
c0029b73:	68 58 01 00 00       	push   0x158
c0029b78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b7c:	e8 cc 8e fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029b81:	83 c4 10             	add    esp,0x10
c0029b84:	83 c4 0c             	add    esp,0xc
c0029b87:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029b88 <SSE::~SSE()>:
c0029b88:	83 ec 0c             	sub    esp,0xc
c0029b8b:	ba f8 dd 02 c0       	mov    edx,0xc002ddf8
c0029b90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b94:	89 10                	mov    DWORD PTR [eax],edx
c0029b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9a:	83 ec 0c             	sub    esp,0xc
c0029b9d:	50                   	push   eax
c0029b9e:	e8 1d a9 fe ff       	call   c00144c0 <FPU::~FPU()>
c0029ba3:	83 c4 10             	add    esp,0x10
c0029ba6:	90                   	nop
c0029ba7:	83 c4 0c             	add    esp,0xc
c0029baa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029bac <SSE::~SSE()>:
c0029bac:	83 ec 0c             	sub    esp,0xc
c0029baf:	83 ec 0c             	sub    esp,0xc
c0029bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bb6:	e8 cd ff ff ff       	call   c0029b88 <SSE::~SSE()>
c0029bbb:	83 c4 10             	add    esp,0x10
c0029bbe:	83 ec 08             	sub    esp,0x8
c0029bc1:	68 58 01 00 00       	push   0x158
c0029bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bca:	e8 7e 8e fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029bcf:	83 c4 10             	add    esp,0x10
c0029bd2:	83 c4 0c             	add    esp,0xc
c0029bd5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029bd6 <x87::~x87()>:
c0029bd6:	83 ec 0c             	sub    esp,0xc
c0029bd9:	ba 38 de 02 c0       	mov    edx,0xc002de38
c0029bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be2:	89 10                	mov    DWORD PTR [eax],edx
c0029be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be8:	83 ec 0c             	sub    esp,0xc
c0029beb:	50                   	push   eax
c0029bec:	e8 cf a8 fe ff       	call   c00144c0 <FPU::~FPU()>
c0029bf1:	83 c4 10             	add    esp,0x10
c0029bf4:	90                   	nop
c0029bf5:	83 c4 0c             	add    esp,0xc
c0029bf8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029bfa <x87::~x87()>:
c0029bfa:	83 ec 0c             	sub    esp,0xc
c0029bfd:	83 ec 0c             	sub    esp,0xc
c0029c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c04:	e8 cd ff ff ff       	call   c0029bd6 <x87::~x87()>
c0029c09:	83 c4 10             	add    esp,0x10
c0029c0c:	83 ec 08             	sub    esp,0x8
c0029c0f:	68 58 01 00 00       	push   0x158
c0029c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c18:	e8 30 8e fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029c1d:	83 c4 10             	add    esp,0x10
c0029c20:	83 c4 0c             	add    esp,0xc
c0029c23:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029c24 <IOAPIC::~IOAPIC()>:
c0029c24:	83 ec 0c             	sub    esp,0xc
c0029c27:	ba 90 df 02 c0       	mov    edx,0xc002df90
c0029c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c30:	89 10                	mov    DWORD PTR [eax],edx
c0029c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c36:	83 ec 0c             	sub    esp,0xc
c0029c39:	50                   	push   eax
c0029c3a:	e8 f5 a1 fe ff       	call   c0013e34 <Device::~Device()>
c0029c3f:	83 c4 10             	add    esp,0x10
c0029c42:	90                   	nop
c0029c43:	83 c4 0c             	add    esp,0xc
c0029c46:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029c48 <IOAPIC::~IOAPIC()>:
c0029c48:	83 ec 0c             	sub    esp,0xc
c0029c4b:	83 ec 0c             	sub    esp,0xc
c0029c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c52:	e8 cd ff ff ff       	call   c0029c24 <IOAPIC::~IOAPIC()>
c0029c57:	83 c4 10             	add    esp,0x10
c0029c5a:	83 ec 08             	sub    esp,0x8
c0029c5d:	68 68 01 00 00       	push   0x168
c0029c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c66:	e8 e2 8d fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029c6b:	83 c4 10             	add    esp,0x10
c0029c6e:	83 c4 0c             	add    esp,0xc
c0029c71:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029c72 <APIC::~APIC()>:
c0029c72:	83 ec 0c             	sub    esp,0xc
c0029c75:	ba 48 df 02 c0       	mov    edx,0xc002df48
c0029c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c7e:	89 10                	mov    DWORD PTR [eax],edx
c0029c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c84:	83 ec 0c             	sub    esp,0xc
c0029c87:	50                   	push   eax
c0029c88:	e8 fd ac fe ff       	call   c001498a <InterruptController::~InterruptController()>
c0029c8d:	83 c4 10             	add    esp,0x10
c0029c90:	90                   	nop
c0029c91:	83 c4 0c             	add    esp,0xc
c0029c94:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029c96 <APIC::~APIC()>:
c0029c96:	83 ec 0c             	sub    esp,0xc
c0029c99:	83 ec 0c             	sub    esp,0xc
c0029c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ca0:	e8 cd ff ff ff       	call   c0029c72 <APIC::~APIC()>
c0029ca5:	83 c4 10             	add    esp,0x10
c0029ca8:	83 ec 08             	sub    esp,0x8
c0029cab:	68 58 21 00 00       	push   0x2158
c0029cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cb4:	e8 94 8d fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029cb9:	83 c4 10             	add    esp,0x10
c0029cbc:	83 c4 0c             	add    esp,0xc
c0029cbf:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029cc0 <PIC::~PIC()>:
c0029cc0:	83 ec 0c             	sub    esp,0xc
c0029cc3:	ba e0 df 02 c0       	mov    edx,0xc002dfe0
c0029cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ccc:	89 10                	mov    DWORD PTR [eax],edx
c0029cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cd2:	83 ec 0c             	sub    esp,0xc
c0029cd5:	50                   	push   eax
c0029cd6:	e8 af ac fe ff       	call   c001498a <InterruptController::~InterruptController()>
c0029cdb:	83 c4 10             	add    esp,0x10
c0029cde:	90                   	nop
c0029cdf:	83 c4 0c             	add    esp,0xc
c0029ce2:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029ce4 <PIC::~PIC()>:
c0029ce4:	83 ec 0c             	sub    esp,0xc
c0029ce7:	83 ec 0c             	sub    esp,0xc
c0029cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cee:	e8 cd ff ff ff       	call   c0029cc0 <PIC::~PIC()>
c0029cf3:	83 c4 10             	add    esp,0x10
c0029cf6:	83 ec 08             	sub    esp,0x8
c0029cf9:	68 58 21 00 00       	push   0x2158
c0029cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d02:	e8 46 8d fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029d07:	83 c4 10             	add    esp,0x10
c0029d0a:	83 c4 0c             	add    esp,0xc
c0029d0d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029d0e <APICTimer::~APICTimer()>:
c0029d0e:	83 ec 0c             	sub    esp,0xc
c0029d11:	ba 34 e0 02 c0       	mov    edx,0xc002e034
c0029d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d1a:	89 10                	mov    DWORD PTR [eax],edx
c0029d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d20:	83 ec 0c             	sub    esp,0xc
c0029d23:	50                   	push   eax
c0029d24:	e8 f1 cc fe ff       	call   c0016a1a <Timer::~Timer()>
c0029d29:	83 c4 10             	add    esp,0x10
c0029d2c:	90                   	nop
c0029d2d:	83 c4 0c             	add    esp,0xc
c0029d30:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029d32 <APICTimer::~APICTimer()>:
c0029d32:	83 ec 0c             	sub    esp,0xc
c0029d35:	83 ec 0c             	sub    esp,0xc
c0029d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d3c:	e8 cd ff ff ff       	call   c0029d0e <APICTimer::~APICTimer()>
c0029d41:	83 c4 10             	add    esp,0x10
c0029d44:	83 ec 08             	sub    esp,0x8
c0029d47:	68 60 01 00 00       	push   0x160
c0029d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d50:	e8 f8 8c fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029d55:	83 c4 10             	add    esp,0x10
c0029d58:	83 c4 0c             	add    esp,0xc
c0029d5b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029d5c <PIT::~PIT()>:
c0029d5c:	83 ec 0c             	sub    esp,0xc
c0029d5f:	ba 84 e0 02 c0       	mov    edx,0xc002e084
c0029d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d68:	89 10                	mov    DWORD PTR [eax],edx
c0029d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d6e:	83 ec 0c             	sub    esp,0xc
c0029d71:	50                   	push   eax
c0029d72:	e8 a3 cc fe ff       	call   c0016a1a <Timer::~Timer()>
c0029d77:	83 c4 10             	add    esp,0x10
c0029d7a:	90                   	nop
c0029d7b:	83 c4 0c             	add    esp,0xc
c0029d7e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029d80 <PIT::~PIT()>:
c0029d80:	83 ec 0c             	sub    esp,0xc
c0029d83:	83 ec 0c             	sub    esp,0xc
c0029d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d8a:	e8 cd ff ff ff       	call   c0029d5c <PIT::~PIT()>
c0029d8f:	83 c4 10             	add    esp,0x10
c0029d92:	83 ec 08             	sub    esp,0x8
c0029d95:	68 5c 01 00 00       	push   0x15c
c0029d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d9e:	e8 aa 8c fe ff       	call   c0012a4d <operator delete(void*, unsigned long)>
c0029da3:	83 c4 10             	add    esp,0x10
c0029da6:	83 c4 0c             	add    esp,0xc
c0029da9:	c3                   	ret    
