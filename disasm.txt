
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 82 02 00       	call   c00282b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 0c 8f 02 c0       	mov    ebx,0xc0028f0c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 18 8f 02 c0    	cmp    ebx,0xc0028f18
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 cc 02 c0       	mov    eax,0xc002ccd8
c0000049:	3d d8 cc 02 c0       	cmp    eax,0xc002ccd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 cc 02 c0       	push   0xc002ccd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 cc 02 c0       	mov    eax,0xc002ccd8
c0000075:	2d d8 cc 02 c0       	sub    eax,0xc002ccd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 cc 02 c0       	push   0xc002ccd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d308,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 20 8f 02 c0       	mov    ebx,0xc0028f20
c00000bb:	81 eb 1c 8f 02 c0    	sub    ebx,0xc0028f1c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 1c 8f 02 c0       	mov    esi,0xc0028f1c
c00000ca:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c d3 02 c0       	mov    ds:0xc002d30c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c d3 02 c0       	mov    eax,ds:0xc002d30c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 cc 02 c0       	push   0xc002ccd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d308,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 d3 02 c0       	push   0xc002d310
c000012c:	68 d8 cc 02 c0       	push   0xc002ccd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 f7 cd 01 00       	call   c001d19a <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 04 20 01 00       	call   c00123bf <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 d5 cd 01 00       	call   c001d19a <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 7d d2 01 00       	call   c001d661 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 93 d8 01 00       	call   c001dc80 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 d7 02 c0 	lgdtd  ds:0xc002d750
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 fd 3c 01 00       	call   c00142df <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 28 d3 02 c0       	mov    ds:0xc002d328,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 28 d3 02 c0    	mov    DWORD PTR ds:0xc002d328,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 28 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d328
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 40 8f 02 c0 02 	test   BYTE PTR [edx-0x3ffd70c0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 40 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70c0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 40 8f 02 c0 08 	test   BYTE PTR [edx-0x3ffd70c0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 40 8f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd70c0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 40 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70c0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 40 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d340
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 44 d3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2cbc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 44 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cbc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 40 d3 02 c0    	mov    DWORD PTR ds:0xc002d340,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 6c d3 02 c0    	cmp    DWORD PTR ds:0xc002d36c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 7c d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d37c
c0000e38:	c7 42 0c 74 d3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d374
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 7c d3 02 c0    	mov    DWORD PTR ds:0xc002d37c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 40 d3 02 c0 02 	test   BYTE PTR ds:0xc002d340,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 40 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d340
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 44 d3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2cbc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 44 d3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2cbc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 74 d3 02 c0 	lea    edx,[eax*8-0x3ffd2c8c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 80 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d380
c00011ba:	81 fb 74 d3 02 c0    	cmp    ebx,0xc002d374
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 74 d3 02 c0       	cmp    eax,0xc002d374
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 70 d3 02 c0    	cmp    DWORD PTR ds:0xc002d370,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 7c d3 02 c0       	mov    ds:0xc002d37c,eax
c00011f6:	a3 80 d3 02 c0       	mov    ds:0xc002d380,eax
c00011fb:	a3 70 d3 02 c0       	mov    ds:0xc002d370,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 74 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d374
c0001209:	c7 40 0c 74 d3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d374
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 80 d3 02 c0       	mov    ds:0xc002d380,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 74 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d374
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 38 d3 02 c0 	lea    ebp,[edx*4-0x3ffd2cc8]
c000125a:	8b 14 95 40 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cc0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 40 d3 02 c0 	lea    ecx,[edx*4-0x3ffd2cc0]
c0001275:	8b 14 95 40 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cc0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 74 d6 02 c0 	or     DWORD PTR [edi*4-0x3ffd298c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 74 d3 02 c0 	lea    eax,[eax*8-0x3ffd2c8c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 7c d3 02 c0    	mov    DWORD PTR ds:0xc002d37c,ecx
c000132f:	89 0d 80 d3 02 c0    	mov    DWORD PTR ds:0xc002d380,ecx
c0001335:	c7 41 08 74 d3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d374
c000133c:	c7 41 0c 74 d3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d374
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 6c d3 02 c0 	lea    edx,[ecx*8-0x3ffd2c94]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 74 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd298c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 74 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd298c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 6c d3 02 c0 	lea    edx,[eax*4-0x3ffd2c94]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 74 d6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd298c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 7c d3 02 c0    	mov    DWORD PTR ds:0xc002d37c,edi
c0001402:	89 3d 80 d3 02 c0    	mov    DWORD PTR ds:0xc002d380,edi
c0001408:	c7 47 08 74 d3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d374
c000140f:	c7 47 0c 74 d3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d374
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 70 d3 02 c0    	mov    DWORD PTR ds:0xc002d370,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 40 d3 02 c0       	mov    edx,0xc002d340
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 40 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d340,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 94 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d694
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 94 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d694,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 94 d6 02 c0    	mov    DWORD PTR ds:0xc002d694,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 6c d3 02 c0    	cmp    DWORD PTR ds:0xc002d36c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 6c d3 02 c0    	mov    DWORD PTR ds:0xc002d36c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 40 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d340,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 9c d6 02 c0    	push   DWORD PTR ds:0xc002d69c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 40 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d340,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 9c d6 02 c0       	mov    eax,ds:0xc002d69c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 6c d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d36c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 6c d3 02 c0       	mov    eax,ds:0xc002d36c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 44 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2cbc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 74 d3 02 c0       	mov    eax,0xc002d374
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 6c d6 02 c0       	cmp    eax,0xc002d66c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 90 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d690
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 a4 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6a4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 b4 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6b4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 44 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6fbc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 40 d3 02 c0       	mov    eax,ds:0xc002d340
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 40 d3 02 c0       	mov    ds:0xc002d340,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 84 d6 02 c0    	mov    DWORD PTR ds:0xc002d684,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 88 d6 02 c0    	mov    DWORD PTR ds:0xc002d688,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 8c d6 02 c0    	mov    DWORD PTR ds:0xc002d68c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 94 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d694,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 0e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf200]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 be ea 01 00       	jmp    c00206b0 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 0e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf200]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 ef ea 01 00       	jmp    c00206f7 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 0e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf200]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 17 eb 01 00       	jmp    c002073e <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 0a 47 02 00       	call   c0026614 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 60 91 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ea0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 60 91 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ea0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 60 90 02 c0       	mov    edx,0xc0029060
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 80 91 02 c0       	mov    edx,0xc0029180
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 14 bc 02 c0       	mov    edx,0xc002bc14
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 8c 91 02 c0       	mov    edx,0xc002918c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 70 91 02 c0       	mov    edx,0xc0029170
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 e0 d6 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2920]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 c0 d6 02 c0    	mov    ax,ds:0xc002d6c0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 c0 d6 02 c0    	mov    ds:0xc002d6c0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 07 35 02 00       	call   c0026614 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 92 91 02 c0       	mov    eax,0xc0029192
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad e0 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6f20]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 9b 91 02 c0       	mov    eax,0xc002919b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 60 91 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ea0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 d2 1e 02 00       	call   c0026614 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 70 91 02 c0       	mov    edx,0xc0029170
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 60 90 02 c0       	mov    edx,0xc0029060
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 70 90 02 c0       	mov    edx,0xc0029070
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 e0 d6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2920]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 e0 d6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2920],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 99 08 02 00       	call   c0026614 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 7f 08 02 00       	call   c0026614 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 b7 90 02 c0       	mov    eax,0xc00290b7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 b0 90 02 c0       	mov    eax,0xc00290b0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 e0 d6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2920]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be a0 90 02 c0       	mov    esi,0xc00290a0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 c2 ef 01 00       	call   c0026614 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 80 91 02 c0       	mov    edx,0xc0029180
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 80 90 02 c0       	mov    edx,0xc0029080
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 90 90 02 c0       	mov    edx,0xc0029090
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba a2 91 02 c0       	mov    edx,0xc00291a2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ae 91 02 c0       	mov    edx,0xc00291ae
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba c2 91 02 c0       	mov    edx,0xc00291c2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c e0 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc00294e0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 e0 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc00294e0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 e0 92 02 c0       	mov    eax,0xc00292e0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 20 92 02 c0       	mov    eax,0xc0029220
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 e0 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e20]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 16 f9 01 00       	call   c00280e7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 d9 f8 01 00       	call   c00280c9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 ad f8 01 00       	call   c00280e7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 60 ef 01 00       	call   c00277ec <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 e2 f9 01 00       	call   c0028280 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 27 f8 01 00       	call   c00280e7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 69 f7 01 00       	call   c00280e7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 36 f7 01 00       	call   c00280c9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 23 f6 01 00       	call   c00280e7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 eb f5 01 00       	call   c00280c9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 f7 f3 01 00       	call   c00280e7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 bc f3 01 00       	call   c00280c9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 40 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65c0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 cc f0 01 00       	call   c0027e7b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 4a ea 01 00       	call   c0027818 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 06 f3 01 00       	call   c00280eb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 f4 f3 01 00       	call   c002820f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 de e9 01 00       	call   c0027818 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 89 f2 01 00       	call   c00280e5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 6a f2 01 00       	call   c00280e9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 00 f4 01 00       	call   c00282a0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 aa ef 01 00       	call   c0027e7b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 28 e9 01 00       	call   c0027818 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 e4 f1 01 00       	call   c00280eb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 d2 f2 01 00       	call   c002820f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 bc e8 01 00       	call   c0027818 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 67 f1 01 00       	call   c00280e5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 47 f1 01 00       	call   c00280e9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 dc f2 01 00       	call   c00282a0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 82 f0 01 00       	call   c00280e7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 40 f0 01 00       	call   c00280c9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 28 f0 01 00       	call   c00280e7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 9a ed 01 00       	call   c0027e7b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 9c e0 01 00       	call   c002719b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 ff e6 01 00       	call   c0027818 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 51 ed 01 00       	call   c0027e7b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 57 e0 01 00       	call   c002719b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 26 ed 01 00       	call   c0027e7b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 76 ef 01 00       	call   c00280e5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 53 e6 01 00       	call   c00277ec <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 d5 f0 01 00       	call   c0028280 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 fc ee 01 00       	call   c00280c9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 f7 e5 01 00       	call   c00277ec <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 75 ec 01 00       	call   c0027e7b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 f8 e5 01 00       	call   c0027818 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 4a ec 01 00       	call   c0027e7b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 b1 e8 01 00       	call   c0027afc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 30 df 01 00       	call   c002719b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 90 d8 01 00       	call   c0026b30 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 67 ef 01 00       	call   c002820f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 50 e5 01 00       	call   c0027818 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 37 ef 01 00       	call   c002820f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 a9 de 01 00       	call   c002719b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 e2 ed 01 00       	call   c00280eb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 ca e7 01 00       	call   c0027afc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 50 de 01 00       	call   c002719b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 3e ef 01 00       	call   c00282a0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 10 eb 01 00       	call   c0027e7b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 67 e4 01 00       	call   c00277ec <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 46 ed 01 00       	call   c00280e7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 df dd 01 00       	call   c002719b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 0b e4 01 00       	call   c00277ec <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 ad ee 01 00       	call   c00282a0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 5e ea 01 00       	call   c0027e7b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 db e3 01 00       	call   c0027818 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 2e ea 01 00       	call   c0027e7b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 34 dd 01 00       	call   c002719b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 04 ea 01 00       	call   c0027e7b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 56 ec 01 00       	call   c00280e7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 2d e3 01 00       	call   c00277ec <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 af ed 01 00       	call   c0028280 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 d6 eb 01 00       	call   c00280c9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 d0 e2 01 00       	call   c00277ec <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 4e e9 01 00       	call   c0027e7b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 d1 e2 01 00       	call   c0027818 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 23 e9 01 00       	call   c0027e7b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 8a e5 01 00       	call   c0027afc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 09 dc 01 00       	call   c002719b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 59 d5 01 00       	call   c0026b30 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 30 ec 01 00       	call   c002820f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 19 e2 01 00       	call   c0027818 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 00 ec 01 00       	call   c002820f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 72 db 01 00       	call   c002719b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 ab ea 01 00       	call   c00280eb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 92 e4 01 00       	call   c0027afc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 11 db 01 00       	call   c002719b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 ff eb 01 00       	call   c00282a0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 d1 e7 01 00       	call   c0027e7b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 28 e1 01 00       	call   c00277ec <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 07 ea 01 00       	call   c00280e7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 a0 da 01 00       	call   c002719b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 cc e0 01 00       	call   c00277ec <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 41 e7 01 00       	call   c0027e7b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 47 da 01 00       	call   c002719b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 b4 9a 02 c0       	mov    eax,0xc0029ab4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 bc e5 01 00       	call   c0027e7b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 3a df 01 00       	call   c0027818 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 cc d1 01 00       	call   c0026b30 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 a3 e8 01 00       	call   c002820f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 8c de 01 00       	call   c0027818 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 6f e8 01 00       	call   c002820f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 e1 d7 01 00       	call   c002719b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 41 e8 01 00       	call   c002820f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 30 de 01 00       	call   c0027818 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 99 d7 01 00       	call   c002719b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ba d0 01 00       	call   c0026b30 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 91 e7 01 00       	call   c002820f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 7a dd 01 00       	call   c0027818 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 5d e7 01 00       	call   c002820f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 cf d6 01 00       	call   c002719b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 2f e7 01 00       	call   c002820f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 1e dd 01 00       	call   c0027818 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 87 d6 01 00       	call   c002719b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 65 d6 01 00       	call   c002719b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 41 cf 01 00       	call   c0026b30 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 18 e6 01 00       	call   c002820f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 01 dc 01 00       	call   c0027818 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 e4 e5 01 00       	call   c002820f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 56 d5 01 00       	call   c002719b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 b6 e5 01 00       	call   c002820f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 9f db 01 00       	call   c0027818 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 08 d5 01 00       	call   c002719b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 68 e5 01 00       	call   c002820f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 51 db 01 00       	call   c0027818 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ba d4 01 00       	call   c002719b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 cf cd 01 00       	call   c0026b30 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 a6 e4 01 00       	call   c002820f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 8f da 01 00       	call   c0027818 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 76 e4 01 00       	call   c002820f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 e8 d3 01 00       	call   c002719b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 48 e4 01 00       	call   c002820f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 31 da 01 00       	call   c0027818 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 9a d3 01 00       	call   c002719b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 fa e3 01 00       	call   c002820f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 e3 d9 01 00       	call   c0027818 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 4c d3 01 00       	call   c002719b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 20 d3 01 00       	call   c002719b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 7d d9 01 00       	call   c0027818 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 39 e2 01 00       	call   c00280eb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 c8 d2 01 00       	call   c002719b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 25 d9 01 00       	call   c0027818 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 e1 e1 01 00       	call   c00280eb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 5b cb 01 00       	call   c0026b30 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 32 e2 01 00       	call   c002820f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 1b d8 01 00       	call   c0027818 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 fe e1 01 00       	call   c002820f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 70 d1 01 00       	call   c002719b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 d0 e1 01 00       	call   c002820f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 b9 d7 01 00       	call   c0027818 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 22 d1 01 00       	call   c002719b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 82 e1 01 00       	call   c002820f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 6b d7 01 00       	call   c0027818 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 d4 d0 01 00       	call   c002719b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 34 e1 01 00       	call   c002820f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 1d d7 01 00       	call   c0027818 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 86 d0 01 00       	call   c002719b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 e6 e0 01 00       	call   c002820f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 cf d6 01 00       	call   c0027818 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 38 d0 01 00       	call   c002719b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 3a c9 01 00       	call   c0026b30 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 11 e0 01 00       	call   c002820f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 fa d5 01 00       	call   c0027818 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 e1 df 01 00       	call   c002820f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 53 cf 01 00       	call   c002719b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 b3 df 01 00       	call   c002820f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 9c d5 01 00       	call   c0027818 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 05 cf 01 00       	call   c002719b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 65 df 01 00       	call   c002820f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 4e d5 01 00       	call   c0027818 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 b7 ce 01 00       	call   c002719b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 17 df 01 00       	call   c002820f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 00 d5 01 00       	call   c0027818 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 69 ce 01 00       	call   c002719b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 c9 de 01 00       	call   c002820f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 b2 d4 01 00       	call   c0027818 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 1b ce 01 00       	call   c002719b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ef cd 01 00       	call   c002719b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 4c d4 01 00       	call   c0027818 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 08 dd 01 00       	call   c00280eb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 97 cd 01 00       	call   c002719b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 f4 d3 01 00       	call   c0027818 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 b0 dc 01 00       	call   c00280eb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 3e cd 01 00       	call   c002719b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 9b d3 01 00       	call   c0027818 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 57 dc 01 00       	call   c00280eb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 e5 cc 01 00       	call   c002719b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 42 d3 01 00       	call   c0027818 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 fe db 01 00       	call   c00280eb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 5c c5 01 00       	call   c0026b30 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 33 dc 01 00       	call   c002820f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 1c d2 01 00       	call   c0027818 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 ff db 01 00       	call   c002820f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 71 cb 01 00       	call   c002719b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 d1 db 01 00       	call   c002820f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ba d1 01 00       	call   c0027818 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 23 cb 01 00       	call   c002719b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 83 db 01 00       	call   c002820f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 6c d1 01 00       	call   c0027818 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 d5 ca 01 00       	call   c002719b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 35 db 01 00       	call   c002820f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 1e d1 01 00       	call   c0027818 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 87 ca 01 00       	call   c002719b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 e7 da 01 00       	call   c002820f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 d0 d0 01 00       	call   c0027818 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 39 ca 01 00       	call   c002719b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 99 da 01 00       	call   c002820f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 82 d0 01 00       	call   c0027818 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 e8 c9 01 00       	call   c002719b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 48 da 01 00       	call   c002820f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 31 d0 01 00       	call   c0027818 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 9a c9 01 00       	call   c002719b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 94 c2 01 00       	call   c0026b30 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 6b d9 01 00       	call   c002820f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 54 cf 01 00       	call   c0027818 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 34 d9 01 00       	call   c002820f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 a6 c8 01 00       	call   c002719b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 06 d9 01 00       	call   c002820f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ef ce 01 00       	call   c0027818 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 58 c8 01 00       	call   c002719b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 b8 d8 01 00       	call   c002820f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 a1 ce 01 00       	call   c0027818 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 0a c8 01 00       	call   c002719b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 6a d8 01 00       	call   c002820f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 53 ce 01 00       	call   c0027818 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 bc c7 01 00       	call   c002719b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 1c d8 01 00       	call   c002820f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 05 ce 01 00       	call   c0027818 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 6e c7 01 00       	call   c002719b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ce d7 01 00       	call   c002820f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 b7 cd 01 00       	call   c0027818 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 1d c7 01 00       	call   c002719b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 7d d7 01 00       	call   c002820f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 66 cd 01 00       	call   c0027818 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 d5 c6 01 00       	call   c002719b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 ae c6 01 00       	call   c002719b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 0c cd 01 00       	call   c0027818 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 c8 d5 01 00       	call   c00280eb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 57 c6 01 00       	call   c002719b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 b5 cc 01 00       	call   c0027818 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 71 d5 01 00       	call   c00280eb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 ff c5 01 00       	call   c002719b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 5d cc 01 00       	call   c0027818 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 19 d5 01 00       	call   c00280eb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 a7 c5 01 00       	call   c002719b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 05 cc 01 00       	call   c0027818 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 c1 d4 01 00       	call   c00280eb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 4f c5 01 00       	call   c002719b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 ad cb 01 00       	call   c0027818 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 69 d4 01 00       	call   c00280eb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 fd c4 01 00       	call   c002719b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 5b cb 01 00       	call   c0027818 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 17 d4 01 00       	call   c00280eb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 2b bd 01 00       	call   c0026b30 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 02 d4 01 00       	call   c002820f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 eb c9 01 00       	call   c0027818 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 d2 d3 01 00       	call   c002820f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 44 c3 01 00       	call   c002719b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 e4 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd651c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 78 d3 01 00       	call   c002820f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 61 c9 01 00       	call   c0027818 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 cc c2 01 00       	call   c002719b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 19 d3 01 00       	call   c002820f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 02 c9 01 00       	call   c0027818 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 6d c2 01 00       	call   c002719b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ba d2 01 00       	call   c002820f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 a3 c8 01 00       	call   c0027818 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 0e c2 01 00       	call   c002719b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 5b d2 01 00       	call   c002820f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 44 c8 01 00       	call   c0027818 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 af c1 01 00       	call   c002719b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 fc d1 01 00       	call   c002820f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 e5 c7 01 00       	call   c0027818 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 50 c1 01 00       	call   c002719b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 9d d1 01 00       	call   c002820f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 86 c7 01 00       	call   c0027818 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 f1 c0 01 00       	call   c002719b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 3e d1 01 00       	call   c002820f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 27 c7 01 00       	call   c0027818 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 92 c0 01 00       	call   c002719b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 df d0 01 00       	call   c002820f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 c8 c6 01 00       	call   c0027818 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 33 c0 01 00       	call   c002719b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 3d b9 01 00       	call   c0026b30 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 14 d0 01 00       	call   c002820f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 fd c5 01 00       	call   c0027818 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 e4 cf 01 00       	call   c002820f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 56 bf 01 00       	call   c002719b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 00 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6500]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 89 cf 01 00       	call   c002820f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 72 c5 01 00       	call   c0027818 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 dd be 01 00       	call   c002719b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 29 cf 01 00       	call   c002820f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 12 c5 01 00       	call   c0027818 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 7d be 01 00       	call   c002719b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 c9 ce 01 00       	call   c002820f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 b2 c4 01 00       	call   c0027818 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 1d be 01 00       	call   c002719b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 69 ce 01 00       	call   c002820f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 52 c4 01 00       	call   c0027818 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 bd bd 01 00       	call   c002719b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 09 ce 01 00       	call   c002820f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 f2 c3 01 00       	call   c0027818 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 5d bd 01 00       	call   c002719b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 a9 cd 01 00       	call   c002820f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 92 c3 01 00       	call   c0027818 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 fd bc 01 00       	call   c002719b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 49 cd 01 00       	call   c002820f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 32 c3 01 00       	call   c0027818 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 9d bc 01 00       	call   c002719b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 e9 cc 01 00       	call   c002820f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 d2 c2 01 00       	call   c0027818 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 3d bc 01 00       	call   c002719b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 1c 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd64e4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 e2 bb 01 00       	call   c002719b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 3f c2 01 00       	call   c0027818 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 fb ca 01 00       	call   c00280eb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 85 bb 01 00       	call   c002719b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 e2 c1 01 00       	call   c0027818 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 9e ca 01 00       	call   c00280eb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 28 bb 01 00       	call   c002719b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 85 c1 01 00       	call   c0027818 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 41 ca 01 00       	call   c00280eb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 cb ba 01 00       	call   c002719b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 28 c1 01 00       	call   c0027818 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 e4 c9 01 00       	call   c00280eb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 6e ba 01 00       	call   c002719b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 cb c0 01 00       	call   c0027818 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 87 c9 01 00       	call   c00280eb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 11 ba 01 00       	call   c002719b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 6e c0 01 00       	call   c0027818 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 2a c9 01 00       	call   c00280eb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 b4 b9 01 00       	call   c002719b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 11 c0 01 00       	call   c0027818 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 cd c8 01 00       	call   c00280eb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 57 b9 01 00       	call   c002719b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 b4 bf 01 00       	call   c0027818 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 70 c8 01 00       	call   c00280eb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 6c bf 01 00       	call   c0027818 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 e4 c9 01 00       	jmp    c00282a0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 4e c6 01 00       	call   c00280e7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 0c c6 01 00       	call   c00280c9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 a3 c3 01 00       	call   c0027e7b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 a4 b6 01 00       	call   c002719b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 73 c3 01 00       	call   c0027e7b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 da bf 01 00       	call   c0027afc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 79 c5 01 00       	call   c00280c9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 7c c5 01 00       	call   c00280e7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 4f c5 01 00       	call   c00280e7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 48 bf 01 00       	call   c0027afc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 d2 c6 01 00       	call   c00282a0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 ad c6 01 00       	call   c00282a0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 7f c2 01 00       	call   c0027e7b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 d6 bb 01 00       	call   c00277ec <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 b5 c4 01 00       	call   c00280e7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4e b5 01 00       	call   c002719b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 72 bb 01 00       	call   c00277ec <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 14 c6 01 00       	call   c00282a0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 4c be 01 00       	call   c0027afc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 c9 b4 01 00       	call   c002719b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 f5 c0 01 00       	call   c0027e7b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 f5 b3 01 00       	call   c002719b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 d5 b3 01 00       	call   c002719b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 a5 c0 01 00       	call   c0027e7b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 f5 c2 01 00       	call   c00280e5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 d4 b9 01 00       	call   c00277ec <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 56 c4 01 00       	call   c0028280 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 7d c2 01 00       	call   c00280c9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 7b b9 01 00       	call   c00277ec <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 f9 bf 01 00       	call   c0027e7b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 7c b9 01 00       	call   c0027818 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ce bf 01 00       	call   c0027e7b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 35 bc 01 00       	call   c0027afc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 b4 b2 01 00       	call   c002719b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 7e bf 01 00       	call   c0027e7b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 ca c1 01 00       	call   c00280e7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 bf b8 01 00       	call   c0027818 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 91 b8 01 00       	call   c0027818 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 ca be 01 00       	call   c0027e7b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 2e bb 01 00       	call   c0027afc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 f6 ba 01 00       	call   c0027afc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 75 b1 01 00       	call   c002719b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 62 c2 01 00       	call   c00282a0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 34 be 01 00       	call   c0027e7b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 8b b7 01 00       	call   c00277ec <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 6a c0 01 00       	call   c00280e7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 02 b1 01 00       	call   c002719b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 26 b7 01 00       	call   c00277ec <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 c8 c1 01 00       	call   c00282a0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 89 bf 01 00       	call   c00280e7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 47 bf 01 00       	call   c00280c9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 de bc 01 00       	call   c0027e7b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 df af 01 00       	call   c002719b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 ae bc 01 00       	call   c0027e7b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 15 b9 01 00       	call   c0027afc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 b4 be 01 00       	call   c00280c9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 b7 be 01 00       	call   c00280e7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 8a be 01 00       	call   c00280e7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 83 b8 01 00       	call   c0027afc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 0d c0 01 00       	call   c00282a0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 e8 bf 01 00       	call   c00282a0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ba bb 01 00       	call   c0027e7b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 11 b5 01 00       	call   c00277ec <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 f0 bd 01 00       	call   c00280e7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 89 ae 01 00       	call   c002719b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 ad b4 01 00       	call   c00277ec <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 4f bf 01 00       	call   c00282a0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 87 b7 01 00       	call   c0027afc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 04 ae 01 00       	call   c002719b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 2f ba 01 00       	call   c0027e7b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 2f ad 01 00       	call   c002719b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 0f ad 01 00       	call   c002719b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 df b9 01 00       	call   c0027e7b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 2f bc 01 00       	call   c00280e5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 0d b3 01 00       	call   c00277ec <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 8f bd 01 00       	call   c0028280 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 b6 bb 01 00       	call   c00280c9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 b3 b2 01 00       	call   c00277ec <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 31 b9 01 00       	call   c0027e7b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 b4 b2 01 00       	call   c0027818 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 06 b9 01 00       	call   c0027e7b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 6d b5 01 00       	call   c0027afc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ec ab 01 00       	call   c002719b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 b6 b8 01 00       	call   c0027e7b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 02 bb 01 00       	call   c00280e7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 f7 b1 01 00       	call   c0027818 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 c9 b1 01 00       	call   c0027818 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 00 b8 01 00       	call   c0027e7b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 64 b4 01 00       	call   c0027afc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 31 b4 01 00       	call   c0027afc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 b0 aa 01 00       	call   c002719b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 9d bb 01 00       	call   c00282a0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 6f b7 01 00       	call   c0027e7b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 c6 b0 01 00       	call   c00277ec <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 a5 b9 01 00       	call   c00280e7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 3d aa 01 00       	call   c002719b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 61 b0 01 00       	call   c00277ec <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 03 bb 01 00       	call   c00282a0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 c4 b8 01 00       	call   c00280e7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 82 b8 01 00       	call   c00280c9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 19 b6 01 00       	call   c0027e7b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 1a a9 01 00       	call   c002719b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 e9 b5 01 00       	call   c0027e7b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 50 b2 01 00       	call   c0027afc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ef b7 01 00       	call   c00280c9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 f2 b7 01 00       	call   c00280e7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 c5 b7 01 00       	call   c00280e7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 be b1 01 00       	call   c0027afc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 48 b9 01 00       	call   c00282a0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 23 b9 01 00       	call   c00282a0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 f5 b4 01 00       	call   c0027e7b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 4c ae 01 00       	call   c00277ec <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 2b b7 01 00       	call   c00280e7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c4 a7 01 00       	call   c002719b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 e8 ad 01 00       	call   c00277ec <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 8a b8 01 00       	call   c00282a0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 c2 b0 01 00       	call   c0027afc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 3f a7 01 00       	call   c002719b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 6a b3 01 00       	call   c0027e7b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 6a a6 01 00       	call   c002719b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 4a a6 01 00       	call   c002719b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 1a b3 01 00       	call   c0027e7b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 6a b5 01 00       	call   c00280e5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 48 ac 01 00       	call   c00277ec <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 ca b6 01 00       	call   c0028280 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 f1 b4 01 00       	call   c00280c9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ee ab 01 00       	call   c00277ec <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 6c b2 01 00       	call   c0027e7b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ef ab 01 00       	call   c0027818 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 41 b2 01 00       	call   c0027e7b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 a8 ae 01 00       	call   c0027afc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 27 a5 01 00       	call   c002719b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 f1 b1 01 00       	call   c0027e7b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 3d b4 01 00       	call   c00280e7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 32 ab 01 00       	call   c0027818 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 04 ab 01 00       	call   c0027818 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 3b b1 01 00       	call   c0027e7b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 9f ad 01 00       	call   c0027afc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 6c ad 01 00       	call   c0027afc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 eb a3 01 00       	call   c002719b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 d8 b4 01 00       	call   c00282a0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 aa b0 01 00       	call   c0027e7b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 01 aa 01 00       	call   c00277ec <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 e0 b2 01 00       	call   c00280e7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 78 a3 01 00       	call   c002719b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 9c a9 01 00       	call   c00277ec <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 3e b4 01 00       	call   c00282a0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 ff b1 01 00       	call   c00280e7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 bd b1 01 00       	call   c00280c9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 54 af 01 00       	call   c0027e7b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 55 a2 01 00       	call   c002719b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 24 af 01 00       	call   c0027e7b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 8b ab 01 00       	call   c0027afc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 2a b1 01 00       	call   c00280c9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 2d b1 01 00       	call   c00280e7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 00 b1 01 00       	call   c00280e7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 f9 aa 01 00       	call   c0027afc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 83 b2 01 00       	call   c00282a0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 5e b2 01 00       	call   c00282a0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 30 ae 01 00       	call   c0027e7b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 87 a7 01 00       	call   c00277ec <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 66 b0 01 00       	call   c00280e7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 ff a0 01 00       	call   c002719b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 23 a7 01 00       	call   c00277ec <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 c5 b1 01 00       	call   c00282a0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 fd a9 01 00       	call   c0027afc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 7a a0 01 00       	call   c002719b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 a5 ac 01 00       	call   c0027e7b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 a5 9f 01 00       	call   c002719b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 85 9f 01 00       	call   c002719b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 55 ac 01 00       	call   c0027e7b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 a5 ae 01 00       	call   c00280e5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 83 a5 01 00       	call   c00277ec <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 05 b0 01 00       	call   c0028280 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 2c ae 01 00       	call   c00280c9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 29 a5 01 00       	call   c00277ec <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 a7 ab 01 00       	call   c0027e7b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 2a a5 01 00       	call   c0027818 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 7c ab 01 00       	call   c0027e7b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 e3 a7 01 00       	call   c0027afc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 62 9e 01 00       	call   c002719b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 2c ab 01 00       	call   c0027e7b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 78 ad 01 00       	call   c00280e7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 6d a4 01 00       	call   c0027818 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 3f a4 01 00       	call   c0027818 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 76 aa 01 00       	call   c0027e7b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 da a6 01 00       	call   c0027afc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 a7 a6 01 00       	call   c0027afc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 26 9d 01 00       	call   c002719b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 13 ae 01 00       	call   c00282a0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 e5 a9 01 00       	call   c0027e7b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 3c a3 01 00       	call   c00277ec <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 1b ac 01 00       	call   c00280e7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 b3 9c 01 00       	call   c002719b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 d7 a2 01 00       	call   c00277ec <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 79 ad 01 00       	call   c00282a0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 37 ab 01 00       	call   c00280e7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 f5 aa 01 00       	call   c00280c9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 8c a8 01 00       	call   c0027e7b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 8d 9b 01 00       	call   c002719b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 5c a8 01 00       	call   c0027e7b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 c3 a4 01 00       	call   c0027afc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 62 aa 01 00       	call   c00280c9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 65 aa 01 00       	call   c00280e7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 38 aa 01 00       	call   c00280e7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 31 a4 01 00       	call   c0027afc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 bb ab 01 00       	call   c00282a0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 92 ab 01 00       	call   c00282a0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 64 a7 01 00       	call   c0027e7b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 bb a0 01 00       	call   c00277ec <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 9a a9 01 00       	call   c00280e7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 33 9a 01 00       	call   c002719b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 5b a0 01 00       	call   c00277ec <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 fd aa 01 00       	call   c00282a0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 36 a3 01 00       	call   c0027afc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 b3 99 01 00       	call   c002719b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 df a5 01 00       	call   c0027e7b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 df 98 01 00       	call   c002719b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 bf 98 01 00       	call   c002719b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 8f a5 01 00       	call   c0027e7b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 c3 a7 01 00       	call   c00280c9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ba 9e 01 00       	call   c00277ec <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 3c a9 01 00       	call   c0028280 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 63 a7 01 00       	call   c00280c9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 5d 9e 01 00       	call   c00277ec <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 db a4 01 00       	call   c0027e7b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 5e 9e 01 00       	call   c0027818 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 b0 a4 01 00       	call   c0027e7b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 17 a1 01 00       	call   c0027afc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 96 97 01 00       	call   c002719b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 60 a4 01 00       	call   c0027e7b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 ac a6 01 00       	call   c00280e7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 a1 9d 01 00       	call   c0027818 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 73 9d 01 00       	call   c0027818 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 b7 a3 01 00       	call   c0027e7b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 1e a0 01 00       	call   c0027afc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 07 9d 01 00       	call   c0027818 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 c3 a5 01 00       	call   c00280eb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 b6 9f 01 00       	call   c0027afc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 35 96 01 00       	call   c002719b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 22 a7 01 00       	call   c00282a0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 f4 a2 01 00       	call   c0027e7b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 4b 9c 01 00       	call   c00277ec <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 2a a5 01 00       	call   c00280e7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 c2 95 01 00       	call   c002719b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ea 9b 01 00       	call   c00277ec <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 8c a6 01 00       	call   c00282a0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 44 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64bc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 38 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64c8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 3f a3 01 00       	call   c00280e7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 fd a2 01 00       	call   c00280c9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 e9 a2 01 00       	call   c00280e7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 5b a0 01 00       	call   c0027e7b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 d9 99 01 00       	call   c0027818 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 2b a0 01 00       	call   c0027e7b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 31 93 01 00       	call   c002719b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 00 a0 01 00       	call   c0027e7b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 50 a2 01 00       	call   c00280e5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 31 99 01 00       	call   c00277ec <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 b3 a3 01 00       	call   c0028280 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 da a1 01 00       	call   c00280c9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 d9 98 01 00       	call   c00277ec <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 57 9f 01 00       	call   c0027e7b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 da 98 01 00       	call   c0027818 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 2c 9f 01 00       	call   c0027e7b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 93 9b 01 00       	call   c0027afc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 12 92 01 00       	call   c002719b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 3a 9b 01 00       	call   c0027afc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 c0 91 01 00       	call   c002719b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 ae a2 01 00       	call   c00282a0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 80 9e 01 00       	call   c0027e7b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 d7 97 01 00       	call   c00277ec <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 b6 a0 01 00       	call   c00280e7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4f 91 01 00       	call   c002719b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 7b 97 01 00       	call   c00277ec <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 1d a2 01 00       	call   c00282a0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 ca 9d 01 00       	call   c0027e7b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 47 97 01 00       	call   c0027818 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 98 9d 01 00       	call   c0027e7b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 9e 90 01 00       	call   c002719b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 6e 9d 01 00       	call   c0027e7b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 c2 9f 01 00       	call   c00280e9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 9b 96 01 00       	call   c00277ec <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 1d a1 01 00       	call   c0028280 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 44 9f 01 00       	call   c00280c9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 42 96 01 00       	call   c00277ec <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 c0 9c 01 00       	call   c0027e7b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 43 96 01 00       	call   c0027818 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 95 9c 01 00       	call   c0027e7b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 fc 98 01 00       	call   c0027afc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 7b 8f 01 00       	call   c002719b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 97 98 01 00       	call   c0027afc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 16 8f 01 00       	call   c002719b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 04 a0 01 00       	call   c00282a0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 d6 9b 01 00       	call   c0027e7b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 2d 95 01 00       	call   c00277ec <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 0c 9e 01 00       	call   c00280e7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a5 8e 01 00       	call   c002719b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 d1 94 01 00       	call   c00277ec <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 42 9b 01 00       	call   c0027e7b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 48 8e 01 00       	call   c002719b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 5e 9c 02 c0       	mov    eax,0xc0029c5e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 6f 9c 02 c0       	mov    eax,0xc0029c6f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c000e4e3:	ff 05 64 0c 03 c0    	inc    DWORD PTR ds:0xc0030c64
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 60 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c60,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c000e50d:	e8 bd f3 00 00       	call   c001d8cf <schedule()>
c000e512:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000e517:	48                   	dec    eax
c000e518:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 b0 d8 02 c0       	mov    eax,ds:0xc002d8b0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 a6 9c 02 c0       	push   0xc0029ca6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 48 d7 02 c0       	mov    eax,0xc002d748
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 af 9c 02 c0       	push   0xc0029caf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 14 66 02 c0       	mov    eax,0xc0026614
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 b9 9c 02 c0       	push   0xc0029cb9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 48 63 02 c0       	mov    eax,0xc0026348
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 c2 9c 02 c0       	push   0xc0029cc2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 14 67 02 c0       	mov    eax,0xc0026714
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 cc 9c 02 c0       	push   0xc0029ccc
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 94 64 02 c0       	mov    eax,0xc0026494
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 d5 9c 02 c0       	push   0xc0029cd5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 4c d7 02 c0       	mov    eax,0xc002d74c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 e2 9c 02 c0       	push   0xc0029ce2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 4d d7 02 c0       	mov    eax,0xc002d74d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 2f 55 00 00       	call   c0013b9c <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 ef 9c 02 c0       	push   0xc0029cef
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c000e6be:	68 08 9d 02 c0       	push   0xc0029d08
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 e7 ed 00 00       	call   c001d4b2 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 ca ef 00 00       	call   c001d6aa <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 8e e0 01 c0       	push   0xc001e08e
c000e6e9:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c000e6ef:	e8 b6 ef 00 00       	call   c001d6aa <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 48 0c 03 c0       	mov    ds:0xc0030c48,eax
c000e6fc:	68 ec 9d 02 c0       	push   0xc0029dec
c000e701:	c6 05 4d d7 02 c0 01 	mov    BYTE PTR ds:0xc002d74d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 27 fd 00 00       	call   c001e439 <Vm::initialise8086()>
c000e712:	e8 4d 42 00 00       	call   c0012964 <Fs::initVFS()>
c000e717:	c7 04 24 15 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d15
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ec 9d 02 c0       	push   0xc0029dec
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 f3 d5 00 00       	call   c001bd3f <Sys::loadSyscalls()>
c000e74c:	e8 eb b4 00 00       	call   c0019c3c <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 2f 9d 02 c0       	push   0xc0029d2f
c000e75b:	68 38 9d 02 c0       	push   0xc0029d38
c000e760:	e8 9c c3 00 00       	call   c001ab01 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 e7 4c 00 00       	call   c0013454 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 10 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e10
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 d2 53 00 00       	call   c0013b5c <Device::loadDriversForAll()>
c000e78a:	c7 04 24 40 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d40
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 09 b0 00 00       	call   c00197a4 <Krnl::startCPUs()>
c000e79b:	c7 04 24 5a 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d5a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 6b 9d 02 c0       	push   0xc0029d6b
c000e7b6:	e8 54 e7 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 76 e9 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 d4 f2 00 00       	call   c001daa5 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 87 9d 02 c0       	push   0xc0029d87
c000e7e5:	50                   	push   eax
c000e7e6:	e8 2b 54 00 00       	call   c0013c16 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 5c 9e 02 c0       	mov    edx,0xc0029e5c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 61 d7 02 c0 04 	test   BYTE PTR ds:0xc002d761,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 57 79 01 00       	call   c00262d6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 7c 9d 00 00       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 55 9d 00 00       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 33 9d 00 00       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 11 9d 00 00       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 60 d7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d760,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 1f 9c 00 00       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 fa 9b 00 00       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 c1 77 01 00       	call   c0026290 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 7e 77 01 00       	call   c0026270 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 16 9c 00 00       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 90 9d 02 c0       	push   0xc0029d90
c000eb62:	e8 de b1 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 96 9d 02 c0       	push   0xc0029d96
c000eb9a:	e8 a6 b1 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 30 9e 02 c0       	push   0xc0029e30
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 60 d7 02 c0 04 	test   BYTE PTR ds:0xc002d760,0x4
c000ec03:	0f 94 05 80 c6 02 c0 	sete   BYTE PTR ds:0xc002c680
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 91 8d 00 00       	call   c00179aa <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 ea 4d 00 00       	call   c0013a12 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 40 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d40
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 92 9b 00 00       	call   c00187ee <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 a7 4d 00 00       	call   c0013a12 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 23 53 00 00       	call   c0013faa <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 77 4d 00 00       	call   c0013a12 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 9c 9d 02 c0       	push   0xc0029d9c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 03 eb 00 00       	call   c001d7cc <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 b7 9d 02 c0       	push   0xc0029db7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 c2 38 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 c8 9d 02 c0       	push   0xc0029dc8
c000ed34:	e8 0c b0 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 d5 9d 02 c0       	push   0xc0029dd5
c000ed49:	e8 f7 af 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 df 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ddf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 e0 af 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 52 d7 02 c0       	mov    ds:0xc002d752,eax
c000ee21:	66 89 15 50 d7 02 c0 	mov    WORD PTR ds:0xc002d750,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000ef38:	48                   	dec    eax
c000ef39:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 91 93 01 00       	call   c0028320 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 88 93 01 00       	call   c0028320 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 58 d7 02 c0 ff 07 	mov    WORD PTR ds:0xc002d758,0x7ff
c000f085:	a3 5a d7 02 c0       	mov    ds:0xc002d75a,eax
c000f08a:	0f 01 1d 58 d7 02 c0 	lidtd  ds:0xc002d758
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c000f37c:	e8 01 27 00 00       	call   c0011a82 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 6b 17 00 00       	call   c0010b0a <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 9c 17 00 00       	call   c0010b4a <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 48 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d748
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 1c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c51c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 1c c5 02 c0       	mov    eax,ds:0xc002c51c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 80 9e 02 c0       	push   0xc0029e80
c000f455:	e8 7f 31 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 1c c5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c51c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c000f481:	8b 2d 1c c5 02 c0    	mov    ebp,DWORD PTR ds:0xc002c51c
c000f487:	e8 b1 04 00 00       	call   c000f93d <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 e7 24 00 00       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 1c c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c51c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 b0 9e 02 c0       	push   0xc0029eb0
c000f50d:	e8 33 a8 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 b5 9e 02 c0       	push   0xc0029eb5
c000f523:	e8 1d a8 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000f543:	48                   	dec    eax
c000f544:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c000f561:	e8 1c 25 00 00       	call   c0011a82 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c000f577:	e8 b0 21 00 00       	call   c001172c <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 bc 9e 02 c0       	push   0xc0029ebc
c000f6a4:	e8 30 2f 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 5e 09 00 00       	call   c001000c <installVgaTextImplementation()>
c000f6ae:	0f b6 05 20 c5 02 c0 	movzx  eax,BYTE PTR ds:0xc002c520
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 20 c5 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3ae0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 56 c5 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3aaa],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 55 c5 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3aab]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 20 c5 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3ae0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 d4 9e 02 c0       	push   0xc0029ed4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 49 03 00 00       	call   c000fa9f <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 27 1c 00 00       	call   c0011382 <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 ee 1d 00 00       	call   c0011554 <VAS::VAS()>
c000f766:	89 1d b0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8b0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 48 d7 02 c0    	mov    DWORD PTR ds:0xc002d748,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 62 20 00 00       	call   c0011804 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7bd:	31 c0                	xor    eax,eax
c000f7bf:	c1 ee 0c             	shr    esi,0xc
c000f7c2:	eb 17                	jmp    c000f7db <Phys::allocateDMA(unsigned long)+0x32>
c000f7c4:	85 c9                	test   ecx,ecx
c000f7c6:	75 04                	jne    c000f7cc <Phys::allocateDMA(unsigned long)+0x23>
c000f7c8:	89 d5                	mov    ebp,edx
c000f7ca:	89 d0                	mov    eax,edx
c000f7cc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7cf:	39 de                	cmp    esi,ebx
c000f7d1:	74 20                	je     c000f7f3 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d3:	42                   	inc    edx
c000f7d4:	89 d9                	mov    ecx,ebx
c000f7d6:	83 fa 2f             	cmp    edx,0x2f
c000f7d9:	7f 11                	jg     c000f7ec <Phys::allocateDMA(unsigned long)+0x43>
c000f7db:	80 ba a0 d7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2860],0x0
c000f7e2:	74 e0                	je     c000f7c4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e4:	31 c9                	xor    ecx,ecx
c000f7e6:	42                   	inc    edx
c000f7e7:	83 fa 2f             	cmp    edx,0x2f
c000f7ea:	7e ef                	jle    c000f7db <Phys::allocateDMA(unsigned long)+0x32>
c000f7ec:	5b                   	pop    ebx
c000f7ed:	31 c0                	xor    eax,eax
c000f7ef:	5e                   	pop    esi
c000f7f0:	5f                   	pop    edi
c000f7f1:	5d                   	pop    ebp
c000f7f2:	c3                   	ret    
c000f7f3:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f6:	89 d7                	mov    edi,edx
c000f7f8:	4f                   	dec    edi
c000f7f9:	79 03                	jns    c000f7fe <Phys::allocateDMA(unsigned long)+0x55>
c000f7fb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f7fe:	c1 ff 04             	sar    edi,0x4
c000f801:	89 c2                	mov    edx,eax
c000f803:	c1 fa 04             	sar    edx,0x4
c000f806:	39 fa                	cmp    edx,edi
c000f808:	75 2f                	jne    c000f839 <Phys::allocateDMA(unsigned long)+0x90>
c000f80a:	85 db                	test   ebx,ebx
c000f80c:	74 1a                	je     c000f828 <Phys::allocateDMA(unsigned long)+0x7f>
c000f80e:	be a0 d7 02 c0       	mov    esi,0xc002d7a0
c000f813:	8d 90 a0 d7 02 c0    	lea    edx,[eax-0x3ffd2860]
c000f819:	f7 d6                	not    esi
c000f81b:	29 c6                	sub    esi,eax
c000f81d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f820:	42                   	inc    edx
c000f821:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f824:	39 d9                	cmp    ecx,ebx
c000f826:	7f f5                	jg     c000f81d <Phys::allocateDMA(unsigned long)+0x74>
c000f828:	85 ff                	test   edi,edi
c000f82a:	74 13                	je     c000f83f <Phys::allocateDMA(unsigned long)+0x96>
c000f82c:	5b                   	pop    ebx
c000f82d:	05 50 20 0c 00       	add    eax,0xc2050
c000f832:	5e                   	pop    esi
c000f833:	c1 e0 0c             	shl    eax,0xc
c000f836:	5f                   	pop    edi
c000f837:	5d                   	pop    ebp
c000f838:	c3                   	ret    
c000f839:	89 ea                	mov    edx,ebp
c000f83b:	31 c9                	xor    ecx,ecx
c000f83d:	eb a7                	jmp    c000f7e6 <Phys::allocateDMA(unsigned long)+0x3d>
c000f83f:	5b                   	pop    ebx
c000f840:	c1 e0 0c             	shl    eax,0xc
c000f843:	5e                   	pop    esi
c000f844:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f849:	5f                   	pop    edi
c000f84a:	5d                   	pop    ebp
c000f84b:	c3                   	ret    

c000f84c <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f854:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85a:	c1 e9 0c             	shr    ecx,0xc
c000f85d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f862:	76 25                	jbe    c000f889 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f864:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f869:	c1 e8 0c             	shr    eax,0xc
c000f86c:	8d 50 10             	lea    edx,[eax+0x10]
c000f86f:	85 c9                	test   ecx,ecx
c000f871:	74 15                	je     c000f888 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f873:	8d 82 a0 d7 02 c0    	lea    eax,[edx-0x3ffd2860]
c000f879:	8d 94 11 a0 d7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2860]
c000f880:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f883:	40                   	inc    eax
c000f884:	39 d0                	cmp    eax,edx
c000f886:	75 f8                	jne    c000f880 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f888:	c3                   	ret    
c000f889:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f88f:	c1 ea 0c             	shr    edx,0xc
c000f892:	eb db                	jmp    c000f86f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f894 <Phys::setPageState(unsigned long, bool)>:
c000f894:	56                   	push   esi
c000f895:	ba 01 00 00 00       	mov    edx,0x1
c000f89a:	53                   	push   ebx
c000f89b:	8b 35 64 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c664
c000f8a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8a9:	89 c8                	mov    eax,ecx
c000f8ab:	83 e1 07             	and    ecx,0x7
c000f8ae:	c1 e8 03             	shr    eax,0x3
c000f8b1:	d3 e3                	shl    ebx,cl
c000f8b3:	01 c6                	add    esi,eax
c000f8b5:	d3 e2                	shl    edx,cl
c000f8b7:	f7 d2                	not    edx
c000f8b9:	20 16                	and    BYTE PTR [esi],dl
c000f8bb:	03 05 64 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c664
c000f8c1:	08 18                	or     BYTE PTR [eax],bl
c000f8c3:	5b                   	pop    ebx
c000f8c4:	5e                   	pop    esi
c000f8c5:	c3                   	ret    

c000f8c6 <Phys::getPageState(unsigned long)>:
c000f8c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ca:	8b 15 64 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c664
c000f8d0:	89 c8                	mov    eax,ecx
c000f8d2:	83 e1 07             	and    ecx,0x7
c000f8d5:	c1 e8 03             	shr    eax,0x3
c000f8d8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8dc:	d3 f8                	sar    eax,cl
c000f8de:	83 e0 01             	and    eax,0x1
c000f8e1:	c3                   	ret    

c000f8e2 <Phys::freePage(unsigned long)>:
c000f8e2:	53                   	push   ebx
c000f8e3:	83 ec 08             	sub    esp,0x8
c000f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ea:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8ef:	76 3a                	jbe    c000f92b <Phys::freePage(unsigned long)+0x49>
c000f8f1:	c1 e8 0c             	shr    eax,0xc
c000f8f4:	50                   	push   eax
c000f8f5:	89 c3                	mov    ebx,eax
c000f8f7:	e8 ca ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f8fc:	5a                   	pop    edx
c000f8fd:	84 c0                	test   al,al
c000f8ff:	74 19                	je     c000f91a <Phys::freePage(unsigned long)+0x38>
c000f901:	83 ec 08             	sub    esp,0x8
c000f904:	ff 0d 90 d7 02 c0    	dec    DWORD PTR ds:0xc002d790
c000f90a:	6a 00                	push   0x0
c000f90c:	53                   	push   ebx
c000f90d:	e8 82 ff ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000f912:	83 c4 10             	add    esp,0x10
c000f915:	83 c4 08             	add    esp,0x8
c000f918:	5b                   	pop    ebx
c000f919:	c3                   	ret    
c000f91a:	c7 44 24 10 f3 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ef3
c000f922:	83 c4 08             	add    esp,0x8
c000f925:	5b                   	pop    ebx
c000f926:	e9 1a a4 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c000f92b:	68 00 10 00 00       	push   0x1000
c000f930:	50                   	push   eax
c000f931:	e8 16 ff ff ff       	call   c000f84c <Phys::freeDMA(unsigned long, unsigned long)>
c000f936:	59                   	pop    ecx
c000f937:	5b                   	pop    ebx
c000f938:	83 c4 08             	add    esp,0x8
c000f93b:	5b                   	pop    ebx
c000f93c:	c3                   	ret    

c000f93d <Phys::allocatePage()>:
c000f93d:	56                   	push   esi
c000f93e:	53                   	push   ebx
c000f93f:	51                   	push   ecx
c000f940:	8b 35 84 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d784
c000f946:	89 f3                	mov    ebx,esi
c000f948:	eb 0a                	jmp    c000f954 <Phys::allocatePage()+0x17>
c000f94a:	89 1d 84 d7 02 c0    	mov    DWORD PTR ds:0xc002d784,ebx
c000f950:	39 de                	cmp    esi,ebx
c000f952:	74 24                	je     c000f978 <Phys::allocatePage()+0x3b>
c000f954:	53                   	push   ebx
c000f955:	e8 6c ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f95a:	5a                   	pop    edx
c000f95b:	84 c0                	test   al,al
c000f95d:	74 76                	je     c000f9d5 <Phys::allocatePage()+0x98>
c000f95f:	43                   	inc    ebx
c000f960:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f966:	75 e2                	jne    c000f94a <Phys::allocatePage()+0xd>
c000f968:	31 db                	xor    ebx,ebx
c000f96a:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c000f974:	39 de                	cmp    esi,ebx
c000f976:	75 dc                	jne    c000f954 <Phys::allocatePage()+0x17>
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	68 22 9f 02 c0       	push   0xc0029f22
c000f980:	e8 54 2c 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000f985:	59                   	pop    ecx
c000f986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f98b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f98e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f994:	e8 3b 29 00 00       	call   c00122d4 <VAS::scanForEviction()>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	85 c0                	test   eax,eax
c000f99e:	75 67                	jne    c000fa07 <Phys::allocatePage()+0xca>
c000f9a0:	83 ec 0c             	sub    esp,0xc
c000f9a3:	68 00 10 00 00       	push   0x1000
c000f9a8:	e8 fc fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9ad:	83 c4 10             	add    esp,0x10
c000f9b0:	85 c0                	test   eax,eax
c000f9b2:	75 53                	jne    c000fa07 <Phys::allocatePage()+0xca>
c000f9b4:	83 ec 0c             	sub    esp,0xc
c000f9b7:	68 3a 9f 02 c0       	push   0xc0029f3a
c000f9bc:	e8 84 a3 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	8b 1d 84 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d784
c000f9ca:	53                   	push   ebx
c000f9cb:	e8 f6 fe ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f9d0:	5a                   	pop    edx
c000f9d1:	84 c0                	test   al,al
c000f9d3:	75 8a                	jne    c000f95f <Phys::allocatePage()+0x22>
c000f9d5:	6a 01                	push   0x1
c000f9d7:	53                   	push   ebx
c000f9d8:	e8 b7 fe ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000f9dd:	83 ec 0c             	sub    esp,0xc
c000f9e0:	a1 90 d7 02 c0       	mov    eax,ds:0xc002d790
c000f9e5:	ff 35 94 d7 02 c0    	push   DWORD PTR ds:0xc002d794
c000f9eb:	40                   	inc    eax
c000f9ec:	50                   	push   eax
c000f9ed:	a3 90 d7 02 c0       	mov    ds:0xc002d790,eax
c000f9f2:	68 09 9f 02 c0       	push   0xc0029f09
c000f9f7:	e8 dd 2b 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000f9fc:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c000fa01:	83 c4 20             	add    esp,0x20
c000fa04:	c1 e0 0c             	shl    eax,0xc
c000fa07:	5a                   	pop    edx
c000fa08:	5b                   	pop    ebx
c000fa09:	5e                   	pop    esi
c000fa0a:	c3                   	ret    

c000fa0b <Phys::allocateContiguousPages(int)>:
c000fa0b:	57                   	push   edi
c000fa0c:	56                   	push   esi
c000fa0d:	53                   	push   ebx
c000fa0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa12:	fa                   	cli    
c000fa13:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c000fa19:	31 db                	xor    ebx,ebx
c000fa1b:	85 db                	test   ebx,ebx
c000fa1d:	75 11                	jne    c000fa30 <Phys::allocateContiguousPages(int)+0x25>
c000fa1f:	e8 19 ff ff ff       	call   c000f93d <Phys::allocatePage()>
c000fa24:	83 fe 01             	cmp    esi,0x1
c000fa27:	89 c7                	mov    edi,eax
c000fa29:	74 21                	je     c000fa4c <Phys::allocateContiguousPages(int)+0x41>
c000fa2b:	bb 01 00 00 00       	mov    ebx,0x1
c000fa30:	e8 08 ff ff ff       	call   c000f93d <Phys::allocatePage()>
c000fa35:	89 da                	mov    edx,ebx
c000fa37:	c1 e2 0c             	shl    edx,0xc
c000fa3a:	01 fa                	add    edx,edi
c000fa3c:	39 c2                	cmp    edx,eax
c000fa3e:	74 20                	je     c000fa60 <Phys::allocateContiguousPages(int)+0x55>
c000fa40:	bb 01 00 00 00       	mov    ebx,0x1
c000fa45:	89 c7                	mov    edi,eax
c000fa47:	83 fe 01             	cmp    esi,0x1
c000fa4a:	75 e4                	jne    c000fa30 <Phys::allocateContiguousPages(int)+0x25>
c000fa4c:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000fa51:	48                   	dec    eax
c000fa52:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000fa57:	75 01                	jne    c000fa5a <Phys::allocateContiguousPages(int)+0x4f>
c000fa59:	fb                   	sti    
c000fa5a:	89 f8                	mov    eax,edi
c000fa5c:	5b                   	pop    ebx
c000fa5d:	5e                   	pop    esi
c000fa5e:	5f                   	pop    edi
c000fa5f:	c3                   	ret    
c000fa60:	43                   	inc    ebx
c000fa61:	39 f3                	cmp    ebx,esi
c000fa63:	75 b6                	jne    c000fa1b <Phys::allocateContiguousPages(int)+0x10>
c000fa65:	eb e5                	jmp    c000fa4c <Phys::allocateContiguousPages(int)+0x41>

c000fa67 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa67:	56                   	push   esi
c000fa68:	53                   	push   ebx
c000fa69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa6d:	39 1d 88 d7 02 c0    	cmp    DWORD PTR ds:0xc002d788,ebx
c000fa73:	73 06                	jae    c000fa7b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa75:	89 1d 88 d7 02 c0    	mov    DWORD PTR ds:0xc002d788,ebx
c000fa7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa7f:	c1 eb 0c             	shr    ebx,0xc
c000fa82:	c1 e8 0c             	shr    eax,0xc
c000fa85:	39 d8                	cmp    eax,ebx
c000fa87:	73 13                	jae    c000fa9c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa89:	6a 00                	push   0x0
c000fa8b:	8d 70 01             	lea    esi,[eax+0x1]
c000fa8e:	50                   	push   eax
c000fa8f:	e8 00 fe ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fa94:	5a                   	pop    edx
c000fa95:	89 f0                	mov    eax,esi
c000fa97:	59                   	pop    ecx
c000fa98:	39 f3                	cmp    ebx,esi
c000fa9a:	75 ed                	jne    c000fa89 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa9c:	5b                   	pop    ebx
c000fa9d:	5e                   	pop    esi
c000fa9e:	c3                   	ret    

c000fa9f <Phys::physicalMemorySetup(unsigned int)>:
c000fa9f:	55                   	push   ebp
c000faa0:	57                   	push   edi
c000faa1:	56                   	push   esi
c000faa2:	53                   	push   ebx
c000faa3:	31 db                	xor    ebx,ebx
c000faa5:	83 ec 40             	sub    esp,0x40
c000faa8:	6a 30                	push   0x30
c000faaa:	6a 00                	push   0x0
c000faac:	68 a0 d7 02 c0       	push   0xc002d7a0
c000fab1:	e8 9a 0c ff ff       	call   c0000750 <memset>
c000fab6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000faba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fabf:	05 00 10 00 00       	add    eax,0x1000
c000fac4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fac8:	5a                   	pop    edx
c000fac9:	59                   	pop    ecx
c000faca:	50                   	push   eax
c000facb:	68 48 9f 02 c0       	push   0xc0029f48
c000fad0:	e8 04 2b 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000fad5:	83 c4 10             	add    esp,0x10
c000fad8:	83 ec 08             	sub    esp,0x8
c000fadb:	6a 01                	push   0x1
c000fadd:	53                   	push   ebx
c000fade:	43                   	inc    ebx
c000fadf:	e8 b0 fd ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fae4:	83 c4 10             	add    esp,0x10
c000fae7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faed:	75 e9                	jne    c000fad8 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000faef:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000faf6:	66 85 c0             	test   ax,ax
c000faf9:	0f 84 b5 01 00 00    	je     c000fcb4 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000faff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb03:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb09:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb0e:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb14:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb1a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb1e:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb22:	01 c1                	add    ecx,eax
c000fb24:	11 d3                	adc    ebx,edx
c000fb26:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb2a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb2e:	31 ff                	xor    edi,edi
c000fb30:	89 d3                	mov    ebx,edx
c000fb32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb36:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb3c:	09 cb                	or     ebx,ecx
c000fb3e:	0f 85 80 01 00 00    	jne    c000fcc4 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb44:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb50:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb55:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb59:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb61:	eb 49                	jmp    c000fbac <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb67:	83 c3 18             	add    ebx,0x18
c000fb6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb72:	39 d0                	cmp    eax,edx
c000fb74:	0f 84 4a 01 00 00    	je     c000fcc4 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb7a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb7d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb80:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb83:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb85:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb89:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb8d:	01 c6                	add    esi,eax
c000fb8f:	89 d5                	mov    ebp,edx
c000fb91:	11 d7                	adc    edi,edx
c000fb93:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb97:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb9b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fb9e:	31 ff                	xor    edi,edi
c000fba0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fba4:	09 cd                	or     ebp,ecx
c000fba6:	0f 85 18 01 00 00    	jne    c000fcc4 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbac:	89 f1                	mov    ecx,esi
c000fbae:	83 f1 01             	xor    ecx,0x1
c000fbb1:	09 f9                	or     ecx,edi
c000fbb3:	75 ae                	jne    c000fb63 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbb5:	be 00 00 08 00       	mov    esi,0x80000
c000fbba:	89 cf                	mov    edi,ecx
c000fbbc:	39 c6                	cmp    esi,eax
c000fbbe:	19 d7                	sbb    edi,edx
c000fbc0:	0f 82 98 00 00 00    	jb     c000fc5e <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbc6:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fbca:	89 cd                	mov    ebp,ecx
c000fbcc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd4:	19 fd                	sbb    ebp,edi
c000fbd6:	0f 83 82 00 00 00    	jae    c000fc5e <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbdc:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbe1:	39 f0                	cmp    eax,esi
c000fbe3:	19 f9                	sbb    ecx,edi
c000fbe5:	0f 82 03 01 00 00    	jb     c000fcee <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbeb:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbf4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbf8:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fbfe:	83 d7 ff             	adc    edi,0xffffffff
c000fc01:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc05:	31 c0                	xor    eax,eax
c000fc07:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc0b:	39 f2                	cmp    edx,esi
c000fc0d:	89 c2                	mov    edx,eax
c000fc0f:	19 fa                	sbb    edx,edi
c000fc11:	0f 83 4c ff ff ff    	jae    c000fb63 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc17:	b8 00 00 08 00       	mov    eax,0x80000
c000fc1c:	83 ec 08             	sub    esp,0x8
c000fc1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc23:	50                   	push   eax
c000fc24:	e8 3e fe ff ff       	call   c000fa67 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc29:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc31:	83 c4 0c             	add    esp,0xc
c000fc34:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc38:	03 05 94 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d794
c000fc3e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc45:	a3 94 d7 02 c0       	mov    ds:0xc002d794,eax
c000fc4a:	52                   	push   edx
c000fc4b:	50                   	push   eax
c000fc4c:	68 6e 9f 02 c0       	push   0xc0029f6e
c000fc51:	e8 83 29 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c000fc56:	83 c4 10             	add    esp,0x10
c000fc59:	e9 05 ff ff ff       	jmp    c000fb63 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc5e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc6a:	39 ee                	cmp    esi,ebp
c000fc6c:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc70:	0f 82 ed fe ff ff    	jb     c000fb63 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc76:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc7b:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc7f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc83:	0f 83 da fe ff ff    	jae    c000fb63 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc89:	39 e8                	cmp    eax,ebp
c000fc8b:	89 d1                	mov    ecx,edx
c000fc8d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc91:	73 89                	jae    c000fc1c <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc9b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc9f:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fca3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fca7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcaf:	e9 68 ff ff ff       	jmp    c000fc1c <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	68 60 9f 02 c0       	push   0xc0029f60
c000fcbc:	e8 84 a0 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	bb 40 01 00 00       	mov    ebx,0x140
c000fcc9:	83 ec 08             	sub    esp,0x8
c000fccc:	6a 00                	push   0x0
c000fcce:	53                   	push   ebx
c000fccf:	43                   	inc    ebx
c000fcd0:	e8 bf fb ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fcd5:	ff 05 94 d7 02 c0    	inc    DWORD PTR ds:0xc002d794
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fce4:	75 e3                	jne    c000fcc9 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fce6:	83 c4 3c             	add    esp,0x3c
c000fce9:	5b                   	pop    ebx
c000fcea:	5e                   	pop    esi
c000fceb:	5f                   	pop    edi
c000fcec:	5d                   	pop    ebp
c000fced:	c3                   	ret    
c000fcee:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcf6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcfe:	e9 e8 fe ff ff       	jmp    c000fbeb <Phys::physicalMemorySetup(unsigned int)+0x14c>
c000fd03:	90                   	nop

c000fd04 <Pipe::isAtty()>:
c000fd04:	31 c0                	xor    eax,eax
c000fd06:	c3                   	ret    
c000fd07:	90                   	nop

c000fd08 <Pipe::~Pipe()>:
c000fd08:	83 ec 0c             	sub    esp,0xc
c000fd0b:	ba cc 9f 02 c0       	mov    edx,0xc0029fcc
c000fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd14:	89 10                	mov    DWORD PTR [eax],edx
c000fd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd1a:	83 ec 0c             	sub    esp,0xc
c000fd1d:	50                   	push   eax
c000fd1e:	e8 3f 12 00 00       	call   c0010f62 <UnixFile::~UnixFile()>
c000fd23:	83 c4 10             	add    esp,0x10
c000fd26:	90                   	nop
c000fd27:	83 c4 0c             	add    esp,0xc
c000fd2a:	c3                   	ret    
c000fd2b:	90                   	nop

c000fd2c <Pipe::~Pipe()>:
c000fd2c:	83 ec 0c             	sub    esp,0xc
c000fd2f:	83 ec 0c             	sub    esp,0xc
c000fd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd36:	e8 cd ff ff ff       	call   c000fd08 <Pipe::~Pipe()>
c000fd3b:	83 c4 10             	add    esp,0x10
c000fd3e:	83 ec 08             	sub    esp,0x8
c000fd41:	6a 20                	push   0x20
c000fd43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd47:	e8 b5 27 00 00       	call   c0012501 <operator delete(void*, unsigned long)>
c000fd4c:	83 c4 10             	add    esp,0x10
c000fd4f:	83 c4 0c             	add    esp,0xc
c000fd52:	c3                   	ret    
c000fd53:	90                   	nop

c000fd54 <Pipe::read(unsigned long long, void*, int*)>:
c000fd54:	55                   	push   ebp
c000fd55:	57                   	push   edi
c000fd56:	56                   	push   esi
c000fd57:	53                   	push   ebx
c000fd58:	83 ec 1c             	sub    esp,0x1c
c000fd5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd5f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd67:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd6a:	89 c8                	mov    eax,ecx
c000fd6c:	99                   	cdq    
c000fd6d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd71:	74 24                	je     c000fd97 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd73:	39 f9                	cmp    ecx,edi
c000fd75:	89 d1                	mov    ecx,edx
c000fd77:	19 f1                	sbb    ecx,esi
c000fd79:	73 1c                	jae    c000fd97 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd7b:	fa                   	cli    
c000fd7c:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c000fd82:	e8 48 db 00 00       	call   c001d8cf <schedule()>
c000fd87:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c000fd8c:	48                   	dec    eax
c000fd8d:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c000fd92:	75 d3                	jne    c000fd67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd94:	fb                   	sti    
c000fd95:	eb d0                	jmp    c000fd67 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd97:	39 f8                	cmp    eax,edi
c000fd99:	89 d1                	mov    ecx,edx
c000fd9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd9e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fda2:	19 f1                	sbb    ecx,esi
c000fda4:	73 07                	jae    c000fdad <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fda6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fda9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fdad:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdb0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdb3:	29 f7                	sub    edi,esi
c000fdb5:	89 f8                	mov    eax,edi
c000fdb7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdbb:	99                   	cdq    
c000fdbc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc3:	19 d0                	sbb    eax,edx
c000fdc5:	73 07                	jae    c000fdce <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fdc7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fdca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdce:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdd1:	89 ea                	mov    edx,ebp
c000fdd3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdd7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fddc:	74 0d                	je     c000fdeb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdde:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fde1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fde5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fde9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdeb:	85 d2                	test   edx,edx
c000fded:	74 11                	je     c000fe00 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdf3:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdf6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdfa:	89 d1                	mov    ecx,edx
c000fdfc:	89 c7                	mov    edi,eax
c000fdfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe00:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe03:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe06:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe09:	99                   	cdq    
c000fe0a:	89 f7                	mov    edi,esi
c000fe0c:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe0f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe13:	c1 ff 1f             	sar    edi,0x1f
c000fe16:	57                   	push   edi
c000fe17:	56                   	push   esi
c000fe18:	52                   	push   edx
c000fe19:	50                   	push   eax
c000fe1a:	e8 f5 68 01 00       	call   c0026714 <__umoddi3>
c000fe1f:	83 c4 10             	add    esp,0x10
c000fe22:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe25:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe2a:	75 10                	jne    c000fe3c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	68 8a 9f 02 c0       	push   0xc0029f8a
c000fe34:	e8 0c 9f 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe43:	89 10                	mov    DWORD PTR [eax],edx
c000fe45:	83 c4 1c             	add    esp,0x1c
c000fe48:	31 c0                	xor    eax,eax
c000fe4a:	5b                   	pop    ebx
c000fe4b:	5e                   	pop    esi
c000fe4c:	5f                   	pop    edi
c000fe4d:	5d                   	pop    ebp
c000fe4e:	c3                   	ret    
c000fe4f:	90                   	nop

c000fe50 <Pipe::write(unsigned long long, void*, int*)>:
c000fe50:	55                   	push   ebp
c000fe51:	57                   	push   edi
c000fe52:	56                   	push   esi
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 1c             	sub    esp,0x1c
c000fe57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe5f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe62:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe66:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe6d:	89 d8                	mov    eax,ebx
c000fe6f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe76:	89 d6                	mov    esi,edx
c000fe78:	89 d7                	mov    edi,edx
c000fe7a:	c1 ff 1f             	sar    edi,0x1f
c000fe7d:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe80:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe84:	c1 f8 1f             	sar    eax,0x1f
c000fe87:	39 f3                	cmp    ebx,esi
c000fe89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe91:	19 f8                	sbb    eax,edi
c000fe93:	b8 01 00 00 00       	mov    eax,0x1
c000fe98:	72 6e                	jb     c000ff08 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe9d:	01 d0                	add    eax,edx
c000fe9f:	99                   	cdq    
c000fea0:	f7 fb                	idiv   ebx
c000fea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea6:	29 d3                	sub    ebx,edx
c000fea8:	89 d7                	mov    edi,edx
c000feaa:	89 de                	mov    esi,ebx
c000feac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000feaf:	c1 fb 1f             	sar    ebx,0x1f
c000feb2:	39 f2                	cmp    edx,esi
c000feb4:	19 d8                	sbb    eax,ebx
c000feb6:	b8 00 00 00 00       	mov    eax,0x0
c000febb:	72 04                	jb     c000fec1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000febd:	89 d0                	mov    eax,edx
c000febf:	29 f0                	sub    eax,esi
c000fec1:	89 d3                	mov    ebx,edx
c000fec3:	29 c3                	sub    ebx,eax
c000fec5:	74 0b                	je     c000fed2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fec7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000feca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fece:	89 d9                	mov    ecx,ebx
c000fed0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fed2:	85 c0                	test   eax,eax
c000fed4:	74 0d                	je     c000fee3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000fed6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feda:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fedd:	89 de                	mov    esi,ebx
c000fedf:	89 c1                	mov    ecx,eax
c000fee1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fee6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000feeb:	75 10                	jne    c000fefd <Pipe::write(unsigned long long, void*, int*)+0xad>
c000feed:	83 ec 0c             	sub    esp,0xc
c000fef0:	68 a6 9f 02 c0       	push   0xc0029fa6
c000fef5:	e8 4b 9e 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c000fefa:	83 c4 10             	add    esp,0x10
c000fefd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff04:	89 08                	mov    DWORD PTR [eax],ecx
c000ff06:	31 c0                	xor    eax,eax
c000ff08:	83 c4 1c             	add    esp,0x1c
c000ff0b:	5b                   	pop    ebx
c000ff0c:	5e                   	pop    esi
c000ff0d:	5f                   	pop    edi
c000ff0e:	5d                   	pop    ebp
c000ff0f:	c3                   	ret    

c000ff10 <Pipe::Pipe(int)>:
c000ff10:	83 ec 0c             	sub    esp,0xc
c000ff13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff17:	83 ec 08             	sub    esp,0x8
c000ff1a:	6a 00                	push   0x0
c000ff1c:	50                   	push   eax
c000ff1d:	e8 5e 0e 00 00       	call   c0010d80 <UnixFile::UnixFile(int)>
c000ff22:	83 c4 10             	add    esp,0x10
c000ff25:	ba cc 9f 02 c0       	mov    edx,0xc0029fcc
c000ff2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2e:	89 10                	mov    DWORD PTR [eax],edx
c000ff30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff38:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff55:	83 ec 0c             	sub    esp,0xc
c000ff58:	50                   	push   eax
c000ff59:	e8 3b f6 ff ff       	call   c000f599 <malloc>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	89 c2                	mov    edx,eax
c000ff63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff72:	90                   	nop
c000ff73:	83 c4 0c             	add    esp,0xc
c000ff76:	c3                   	ret    
c000ff77:	90                   	nop

c000ff78 <VgaText::isAtty()>:
c000ff78:	b0 01                	mov    al,0x1
c000ff7a:	c3                   	ret    
c000ff7b:	90                   	nop

c000ff7c <VgaText::~VgaText()>:
c000ff7c:	83 ec 0c             	sub    esp,0xc
c000ff7f:	ba 54 a0 02 c0       	mov    edx,0xc002a054
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	83 ec 0c             	sub    esp,0xc
c000ff91:	50                   	push   eax
c000ff92:	e8 cb 0f 00 00       	call   c0010f62 <UnixFile::~UnixFile()>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	90                   	nop
c000ff9b:	83 c4 0c             	add    esp,0xc
c000ff9e:	c3                   	ret    
c000ff9f:	90                   	nop

c000ffa0 <VgaText::~VgaText()>:
c000ffa0:	83 ec 0c             	sub    esp,0xc
c000ffa3:	83 ec 0c             	sub    esp,0xc
c000ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffaa:	e8 cd ff ff ff       	call   c000ff7c <VgaText::~VgaText()>
c000ffaf:	83 c4 10             	add    esp,0x10
c000ffb2:	83 ec 08             	sub    esp,0x8
c000ffb5:	68 c4 02 00 00       	push   0x2c4
c000ffba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffbe:	e8 3e 25 00 00       	call   c0012501 <operator delete(void*, unsigned long)>
c000ffc3:	83 c4 10             	add    esp,0x10
c000ffc6:	83 c4 0c             	add    esp,0xc
c000ffc9:	c3                   	ret    

c000ffca <VgaText::read(unsigned long long, void*, int*)>:
c000ffca:	83 ec 10             	sub    esp,0x10
c000ffcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffd9:	e8 c2 5a 00 00       	call   c0015aa0 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffe2:	89 02                	mov    DWORD PTR [edx],eax
c000ffe4:	31 c0                	xor    eax,eax
c000ffe6:	83 c4 1c             	add    esp,0x1c
c000ffe9:	c3                   	ret    

c000ffea <setTerminalScrollLock(bool)>:
c000ffea:	c3                   	ret    

c000ffeb <addToTerminalCycle(VgaText*)>:
c000ffeb:	8b 15 00 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d800
c000fff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff5:	85 d2                	test   edx,edx
c000fff7:	75 09                	jne    c0010002 <addToTerminalCycle(VgaText*)+0x17>
c000fff9:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000fffc:	a3 00 d8 02 c0       	mov    ds:0xc002d800,eax
c0010001:	c3                   	ret    
c0010002:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010005:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010008:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001000b:	c3                   	ret    

c001000c <installVgaTextImplementation()>:
c001000c:	83 ec 10             	sub    esp,0x10
c001000f:	6a 20                	push   0x20
c0010011:	6a 00                	push   0x0
c0010013:	68 e0 d7 02 c0       	push   0xc002d7e0
c0010018:	e8 33 07 ff ff       	call   c0000750 <memset>
c001001d:	83 c4 1c             	add    esp,0x1c
c0010020:	c3                   	ret    

c0010021 <scrollTerminalScrollLock(int)>:
c0010021:	c3                   	ret    

c0010022 <VgaText::updateTitle()>:
c0010022:	53                   	push   ebx
c0010023:	31 c0                	xor    eax,eax
c0010025:	83 ec 58             	sub    esp,0x58
c0010028:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001002c:	89 e1                	mov    ecx,esp
c001002e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010032:	40                   	inc    eax
c0010033:	83 f8 50             	cmp    eax,0x50
c0010036:	75 f6                	jne    c001002e <VgaText::updateTitle()+0xc>
c0010038:	31 c0                	xor    eax,eax
c001003a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010041:	84 db                	test   bl,bl
c0010043:	74 06                	je     c001004b <VgaText::updateTitle()+0x29>
c0010045:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010048:	40                   	inc    eax
c0010049:	eb ef                	jmp    c001003a <VgaText::updateTitle()+0x18>
c001004b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001004e:	85 c0                	test   eax,eax
c0010050:	74 09                	je     c001005b <VgaText::updateTitle()+0x39>
c0010052:	53                   	push   ebx
c0010053:	53                   	push   ebx
c0010054:	51                   	push   ecx
c0010055:	52                   	push   edx
c0010056:	ff d0                	call   eax
c0010058:	83 c4 10             	add    esp,0x10
c001005b:	83 c4 58             	add    esp,0x58
c001005e:	5b                   	pop    ebx
c001005f:	c3                   	ret    

c0010060 <VgaText::load()>:
c0010060:	53                   	push   ebx
c0010061:	31 c0                	xor    eax,eax
c0010063:	83 ec 58             	sub    esp,0x58
c0010066:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001006a:	89 e2                	mov    edx,esp
c001006c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010070:	40                   	inc    eax
c0010071:	83 f8 50             	cmp    eax,0x50
c0010074:	75 f6                	jne    c001006c <VgaText::load()+0xc>
c0010076:	31 c0                	xor    eax,eax
c0010078:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001007f:	84 c9                	test   cl,cl
c0010081:	74 06                	je     c0010089 <VgaText::load()+0x29>
c0010083:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010086:	40                   	inc    eax
c0010087:	eb ef                	jmp    c0010078 <VgaText::load()+0x18>
c0010089:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001008c:	85 c0                	test   eax,eax
c001008e:	74 09                	je     c0010099 <VgaText::load()+0x39>
c0010090:	51                   	push   ecx
c0010091:	51                   	push   ecx
c0010092:	52                   	push   edx
c0010093:	53                   	push   ebx
c0010094:	ff d0                	call   eax
c0010096:	83 c4 10             	add    esp,0x10
c0010099:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001009c:	85 c0                	test   eax,eax
c001009e:	74 09                	je     c00100a9 <VgaText::load()+0x49>
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	53                   	push   ebx
c00100a4:	ff d0                	call   eax
c00100a6:	83 c4 10             	add    esp,0x10
c00100a9:	83 c4 58             	add    esp,0x58
c00100ac:	5b                   	pop    ebx
c00100ad:	c3                   	ret    

c00100ae <VgaText::updateCursor()>:
c00100ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b2:	39 05 04 d8 02 c0    	cmp    DWORD PTR ds:0xc002d804,eax
c00100b8:	75 09                	jne    c00100c3 <VgaText::updateCursor()+0x15>
c00100ba:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100bd:	85 c0                	test   eax,eax
c00100bf:	74 02                	je     c00100c3 <VgaText::updateCursor()+0x15>
c00100c1:	ff e0                	jmp    eax
c00100c3:	c3                   	ret    

c00100c4 <VgaText::doANSI_SGR(int)>:
c00100c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100cc:	85 d2                	test   edx,edx
c00100ce:	75 0b                	jne    c00100db <VgaText::doANSI_SGR(int)+0x17>
c00100d0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100d3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100d6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100d9:	eb 59                	jmp    c0010134 <VgaText::doANSI_SGR(int)+0x70>
c00100db:	83 fa 07             	cmp    edx,0x7
c00100de:	75 0b                	jne    c00100eb <VgaText::doANSI_SGR(int)+0x27>
c00100e0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100e3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100e6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100e9:	eb 49                	jmp    c0010134 <VgaText::doANSI_SGR(int)+0x70>
c00100eb:	83 fa 1b             	cmp    edx,0x1b
c00100ee:	74 e0                	je     c00100d0 <VgaText::doANSI_SGR(int)+0xc>
c00100f0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100f3:	83 f9 07             	cmp    ecx,0x7
c00100f6:	77 09                	ja     c0010101 <VgaText::doANSI_SGR(int)+0x3d>
c00100f8:	8b 14 8d a0 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3960]
c00100ff:	eb 20                	jmp    c0010121 <VgaText::doANSI_SGR(int)+0x5d>
c0010101:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010104:	83 f9 07             	cmp    ecx,0x7
c0010107:	77 09                	ja     c0010112 <VgaText::doANSI_SGR(int)+0x4e>
c0010109:	8b 14 8d a0 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3960]
c0010110:	eb 22                	jmp    c0010134 <VgaText::doANSI_SGR(int)+0x70>
c0010112:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010115:	83 f9 07             	cmp    ecx,0x7
c0010118:	77 0b                	ja     c0010125 <VgaText::doANSI_SGR(int)+0x61>
c001011a:	8b 14 95 58 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3aa8]
c0010121:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010124:	c3                   	ret    
c0010125:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010128:	83 f9 07             	cmp    ecx,0x7
c001012b:	77 0a                	ja     c0010137 <VgaText::doANSI_SGR(int)+0x73>
c001012d:	8b 14 95 30 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ad0]
c0010134:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010137:	c3                   	ret    

c0010138 <VgaText::setDefaultBgColour(VgaColour)>:
c0010138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001013c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010140:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010143:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010146:	c3                   	ret    
c0010147:	90                   	nop

c0010148 <VgaText::setDefaultFgColour(VgaColour)>:
c0010148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001014c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010150:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010153:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010156:	c3                   	ret    
c0010157:	90                   	nop

c0010158 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010158:	53                   	push   ebx
c0010159:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001015d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010161:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010165:	51                   	push   ecx
c0010166:	e8 cd ff ff ff       	call   c0010138 <VgaText::setDefaultBgColour(VgaColour)>
c001016b:	58                   	pop    eax
c001016c:	5a                   	pop    edx
c001016d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010171:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010175:	5b                   	pop    ebx
c0010176:	eb d0                	jmp    c0010148 <VgaText::setDefaultFgColour(VgaColour)>

c0010178 <VgaText::setTitleTextColour(VgaColour)>:
c0010178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010180:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010183:	e9 9a fe ff ff       	jmp    c0010022 <VgaText::updateTitle()>

c0010188 <VgaText::setTitleColour(VgaColour)>:
c0010188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010190:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010193:	e9 8a fe ff ff       	jmp    c0010022 <VgaText::updateTitle()>

c0010198 <VgaText::setTitle(char*)>:
c0010198:	53                   	push   ebx
c0010199:	83 ec 10             	sub    esp,0x10
c001019c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101aa:	50                   	push   eax
c00101ab:	e8 5c 06 ff ff       	call   c000080c <strcpy>
c00101b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101b4:	83 c4 18             	add    esp,0x18
c00101b7:	5b                   	pop    ebx
c00101b8:	e9 65 fe ff ff       	jmp    c0010022 <VgaText::updateTitle()>
c00101bd:	90                   	nop

c00101be <VgaText::combineColours(unsigned char, unsigned char)>:
c00101be:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101c7:	83 e0 0f             	and    eax,0xf
c00101ca:	c1 e2 04             	shl    edx,0x4
c00101cd:	09 d0                	or     eax,edx
c00101cf:	c3                   	ret    

c00101d0 <VgaText::scrollScreen()>:
c00101d0:	55                   	push   ebp
c00101d1:	b9 01 00 00 00       	mov    ecx,0x1
c00101d6:	57                   	push   edi
c00101d7:	56                   	push   esi
c00101d8:	53                   	push   ebx
c00101d9:	83 ec 0c             	sub    esp,0xc
c00101dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101e0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101e6:	31 ff                	xor    edi,edi
c00101e8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101eb:	83 f9 17             	cmp    ecx,0x17
c00101ee:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101f1:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101f8:	75 27                	jne    c0010221 <VgaText::scrollScreen()+0x51>
c00101fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101fd:	01 f5                	add    ebp,esi
c00101ff:	f7 c7 01 00 00 00    	test   edi,0x1
c0010205:	74 16                	je     c001021d <VgaText::scrollScreen()+0x4d>
c0010207:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001020b:	50                   	push   eax
c001020c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010210:	50                   	push   eax
c0010211:	e8 a8 ff ff ff       	call   c00101be <VgaText::combineColours(unsigned char, unsigned char)>
c0010216:	5a                   	pop    edx
c0010217:	5a                   	pop    edx
c0010218:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001021b:	eb 04                	jmp    c0010221 <VgaText::scrollScreen()+0x51>
c001021d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010221:	47                   	inc    edi
c0010222:	46                   	inc    esi
c0010223:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010229:	75 bd                	jne    c00101e8 <VgaText::scrollScreen()+0x18>
c001022b:	41                   	inc    ecx
c001022c:	83 f9 18             	cmp    ecx,0x18
c001022f:	75 af                	jne    c00101e0 <VgaText::scrollScreen()+0x10>
c0010231:	39 1d 04 d8 02 c0    	cmp    DWORD PTR ds:0xc002d804,ebx
c0010237:	75 1b                	jne    c0010254 <VgaText::scrollScreen()+0x84>
c0010239:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001023d:	74 05                	je     c0010244 <VgaText::scrollScreen()+0x74>
c001023f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010242:	eb 10                	jmp    c0010254 <VgaText::scrollScreen()+0x84>
c0010244:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010247:	85 c0                	test   eax,eax
c0010249:	74 09                	je     c0010254 <VgaText::scrollScreen()+0x84>
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	53                   	push   ebx
c001024f:	ff d0                	call   eax
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010258:	83 c4 0c             	add    esp,0xc
c001025b:	5b                   	pop    ebx
c001025c:	5e                   	pop    esi
c001025d:	5f                   	pop    edi
c001025e:	5d                   	pop    ebp
c001025f:	e9 4a fe ff ff       	jmp    c00100ae <VgaText::updateCursor()>

c0010264 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010264:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010269:	c1 e0 08             	shl    eax,0x8
c001026c:	89 c2                	mov    edx,eax
c001026e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010273:	09 d0                	or     eax,edx
c0010275:	c3                   	ret    

c0010276 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010276:	56                   	push   esi
c0010277:	53                   	push   ebx
c0010278:	51                   	push   ecx
c0010279:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001027d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010282:	50                   	push   eax
c0010283:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010288:	50                   	push   eax
c0010289:	e8 30 ff ff ff       	call   c00101be <VgaText::combineColours(unsigned char, unsigned char)>
c001028e:	5b                   	pop    ebx
c001028f:	0f b6 c0             	movzx  eax,al
c0010292:	5e                   	pop    esi
c0010293:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010298:	50                   	push   eax
c0010299:	53                   	push   ebx
c001029a:	e8 c5 ff ff ff       	call   c0010264 <VgaText::combineCharAndColour(char, unsigned char)>
c001029f:	5a                   	pop    edx
c00102a0:	5e                   	pop    esi
c00102a1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102a4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102aa:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102ae:	0f b7 d2             	movzx  edx,dx
c00102b1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102b5:	39 0d 04 d8 02 c0    	cmp    DWORD PTR ds:0xc002d804,ecx
c00102bb:	75 10                	jne    c00102cd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102bd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102c0:	85 c0                	test   eax,eax
c00102c2:	74 09                	je     c00102cd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102c4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102c8:	5a                   	pop    edx
c00102c9:	5b                   	pop    ebx
c00102ca:	5e                   	pop    esi
c00102cb:	ff e0                	jmp    eax
c00102cd:	58                   	pop    eax
c00102ce:	5b                   	pop    ebx
c00102cf:	5e                   	pop    esi
c00102d0:	c3                   	ret    
c00102d1:	90                   	nop

c00102d2 <VgaText::getCursorX()>:
c00102d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102d9:	c3                   	ret    

c00102da <VgaText::getCursorY()>:
c00102da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102de:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102e1:	c3                   	ret    

c00102e2 <VgaText::setCursor(int, int)>:
c00102e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102f4:	e9 b5 fd ff ff       	jmp    c00100ae <VgaText::updateCursor()>

c00102f9 <setActiveTerminal(VgaText*)>:
c00102f9:	53                   	push   ebx
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010301:	85 db                	test   ebx,ebx
c0010303:	75 11                	jne    c0010316 <setActiveTerminal(VgaText*)+0x1d>
c0010305:	c7 44 24 10 e0 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029fe0
c001030d:	83 c4 08             	add    esp,0x8
c0010310:	5b                   	pop    ebx
c0010311:	e9 2f 9a 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c0010316:	a1 04 d8 02 c0       	mov    eax,ds:0xc002d804
c001031b:	85 c0                	test   eax,eax
c001031d:	74 0c                	je     c001032b <setActiveTerminal(VgaText*)+0x32>
c001031f:	83 ec 0c             	sub    esp,0xc
c0010322:	50                   	push   eax
c0010323:	e8 86 fd ff ff       	call   c00100ae <VgaText::updateCursor()>
c0010328:	83 c4 10             	add    esp,0x10
c001032b:	89 1d 04 d8 02 c0    	mov    DWORD PTR ds:0xc002d804,ebx
c0010331:	51                   	push   ecx
c0010332:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010335:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010338:	53                   	push   ebx
c0010339:	e8 a4 ff ff ff       	call   c00102e2 <VgaText::setCursor(int, int)>
c001033e:	83 c4 10             	add    esp,0x10
c0010341:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010345:	75 07                	jne    c001034e <setActiveTerminal(VgaText*)+0x55>
c0010347:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001034e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010352:	83 c4 08             	add    esp,0x8
c0010355:	5b                   	pop    ebx
c0010356:	e9 05 fd ff ff       	jmp    c0010060 <VgaText::load()>

c001035b <doTerminalCycle()>:
c001035b:	83 ec 18             	sub    esp,0x18
c001035e:	a1 00 d8 02 c0       	mov    eax,ds:0xc002d800
c0010363:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010366:	50                   	push   eax
c0010367:	a3 00 d8 02 c0       	mov    ds:0xc002d800,eax
c001036c:	e8 88 ff ff ff       	call   c00102f9 <setActiveTerminal(VgaText*)>
c0010371:	83 c4 1c             	add    esp,0x1c
c0010374:	c3                   	ret    
c0010375:	90                   	nop

c0010376 <VgaText::setCursorX(int)>:
c0010376:	83 ec 10             	sub    esp,0x10
c0010379:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001037d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010384:	50                   	push   eax
c0010385:	e8 58 ff ff ff       	call   c00102e2 <VgaText::setCursor(int, int)>
c001038a:	83 c4 1c             	add    esp,0x1c
c001038d:	c3                   	ret    

c001038e <VgaText::setCursorY(int)>:
c001038e:	83 ec 10             	sub    esp,0x10
c0010391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010395:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010399:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001039c:	50                   	push   eax
c001039d:	e8 40 ff ff ff       	call   c00102e2 <VgaText::setCursor(int, int)>
c00103a2:	83 c4 1c             	add    esp,0x1c
c00103a5:	c3                   	ret    

c00103a6 <VgaText::incrementCursor(bool)>:
c00103a6:	56                   	push   esi
c00103a7:	53                   	push   ebx
c00103a8:	51                   	push   ecx
c00103a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103b4:	40                   	inc    eax
c00103b5:	83 f8 50             	cmp    eax,0x50
c00103b8:	74 05                	je     c00103bf <VgaText::incrementCursor(bool)+0x19>
c00103ba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103bd:	eb 24                	jmp    c00103e3 <VgaText::incrementCursor(bool)+0x3d>
c00103bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103c9:	8d 50 01             	lea    edx,[eax+0x1]
c00103cc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103cf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103d2:	75 0f                	jne    c00103e3 <VgaText::incrementCursor(bool)+0x3d>
c00103d4:	83 ec 0c             	sub    esp,0xc
c00103d7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103da:	53                   	push   ebx
c00103db:	e8 f0 fd ff ff       	call   c00101d0 <VgaText::scrollScreen()>
c00103e0:	83 c4 10             	add    esp,0x10
c00103e3:	89 f0                	mov    eax,esi
c00103e5:	84 c0                	test   al,al
c00103e7:	74 0c                	je     c00103f5 <VgaText::incrementCursor(bool)+0x4f>
c00103e9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ed:	5a                   	pop    edx
c00103ee:	5b                   	pop    ebx
c00103ef:	5e                   	pop    esi
c00103f0:	e9 b9 fc ff ff       	jmp    c00100ae <VgaText::updateCursor()>
c00103f5:	58                   	pop    eax
c00103f6:	5b                   	pop    ebx
c00103f7:	5e                   	pop    esi
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <VgaText::decrementCursor(bool)>:
c00103fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010402:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010405:	85 c0                	test   eax,eax
c0010407:	74 04                	je     c001040d <VgaText::decrementCursor(bool)+0x13>
c0010409:	48                   	dec    eax
c001040a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001040d:	84 c9                	test   cl,cl
c001040f:	74 09                	je     c001041a <VgaText::decrementCursor(bool)+0x20>
c0010411:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010415:	e9 94 fc ff ff       	jmp    c00100ae <VgaText::updateCursor()>
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001041c:	53                   	push   ebx
c001041d:	83 ec 08             	sub    esp,0x8
c0010420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010424:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010428:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001042c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010430:	3c 07                	cmp    al,0x7
c0010432:	75 2a                	jne    c001045e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010434:	a1 b8 d8 02 c0       	mov    eax,ds:0xc002d8b8
c0010439:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010441:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010449:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010451:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010455:	83 c4 08             	add    esp,0x8
c0010458:	5b                   	pop    ebx
c0010459:	e9 88 2f 00 00       	jmp    c00133e6 <Buzzer::beep(int, int, bool)>
c001045e:	3c 0d                	cmp    al,0xd
c0010460:	75 09                	jne    c001046b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010462:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010469:	eb 2c                	jmp    c0010497 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001046b:	3c 0a                	cmp    al,0xa
c001046d:	75 31                	jne    c00104a0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001046f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010472:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010479:	8d 50 01             	lea    edx,[eax+0x1]
c001047c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001047f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010482:	75 0f                	jne    c0010493 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001048a:	53                   	push   ebx
c001048b:	e8 40 fd ff ff       	call   c00101d0 <VgaText::scrollScreen()>
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010497:	83 c4 08             	add    esp,0x8
c001049a:	5b                   	pop    ebx
c001049b:	e9 0e fc ff ff       	jmp    c00100ae <VgaText::updateCursor()>
c00104a0:	3c 08                	cmp    al,0x8
c00104a2:	75 25                	jne    c00104c9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104a4:	50                   	push   eax
c00104a5:	50                   	push   eax
c00104a6:	6a 01                	push   0x1
c00104a8:	53                   	push   ebx
c00104a9:	e8 4c ff ff ff       	call   c00103fa <VgaText::decrementCursor(bool)>
c00104ae:	5a                   	pop    edx
c00104af:	59                   	pop    ecx
c00104b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104b6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104b9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104bc:	6a 20                	push   0x20
c00104be:	53                   	push   ebx
c00104bf:	e8 b2 fd ff ff       	call   c0010276 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104c4:	83 c4 28             	add    esp,0x28
c00104c7:	5b                   	pop    ebx
c00104c8:	c3                   	ret    
c00104c9:	83 ec 08             	sub    esp,0x8
c00104cc:	0f be c0             	movsx  eax,al
c00104cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104d5:	51                   	push   ecx
c00104d6:	52                   	push   edx
c00104d7:	50                   	push   eax
c00104d8:	53                   	push   ebx
c00104d9:	e8 98 fd ff ff       	call   c0010276 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104de:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104e2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104ea:	83 c4 28             	add    esp,0x28
c00104ed:	5b                   	pop    ebx
c00104ee:	e9 b3 fe ff ff       	jmp    c00103a6 <VgaText::incrementCursor(bool)>
c00104f3:	90                   	nop

c00104f4 <VgaText::doUpdate()>:
c00104f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104f8:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104fb:	85 c0                	test   eax,eax
c00104fd:	74 02                	je     c0010501 <VgaText::doUpdate()+0xd>
c00104ff:	ff e0                	jmp    eax
c0010501:	c3                   	ret    

c0010502 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010502:	55                   	push   ebp
c0010503:	31 ed                	xor    ebp,ebp
c0010505:	57                   	push   edi
c0010506:	56                   	push   esi
c0010507:	53                   	push   ebx
c0010508:	83 ec 1c             	sub    esp,0x1c
c001050b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001050f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010514:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001051b:	50                   	push   eax
c001051c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010521:	50                   	push   eax
c0010522:	e8 97 fc ff ff       	call   c00101be <VgaText::combineColours(unsigned char, unsigned char)>
c0010527:	59                   	pop    ecx
c0010528:	0f b6 c0             	movzx  eax,al
c001052b:	5e                   	pop    esi
c001052c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010531:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010535:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010538:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001053c:	0f b7 f6             	movzx  esi,si
c001053f:	01 f6                	add    esi,esi
c0010541:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010544:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010547:	84 c0                	test   al,al
c0010549:	0f 84 fd 00 00 00    	je     c001064c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001054f:	3c 0d                	cmp    al,0xd
c0010551:	75 0c                	jne    c001055f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010553:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001055a:	e9 e7 00 00 00       	jmp    c0010646 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001055f:	3c 0a                	cmp    al,0xa
c0010561:	75 47                	jne    c00105aa <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010566:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001056d:	8d 48 01             	lea    ecx,[eax+0x1]
c0010570:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010573:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010576:	75 0f                	jne    c0010587 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001057e:	53                   	push   ebx
c001057f:	e8 4c fc ff ff       	call   c00101d0 <VgaText::scrollScreen()>
c0010584:	83 c4 10             	add    esp,0x10
c0010587:	83 ec 0c             	sub    esp,0xc
c001058a:	31 ed                	xor    ebp,ebp
c001058c:	53                   	push   ebx
c001058d:	e8 1c fb ff ff       	call   c00100ae <VgaText::updateCursor()>
c0010592:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001059d:	0f b7 f6             	movzx  esi,si
c00105a0:	01 f6                	add    esi,esi
c00105a2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105a5:	e9 9c 00 00 00       	jmp    c0010646 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105aa:	3c 08                	cmp    al,0x8
c00105ac:	75 35                	jne    c00105e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105ae:	56                   	push   esi
c00105af:	56                   	push   esi
c00105b0:	6a 01                	push   0x1
c00105b2:	53                   	push   ebx
c00105b3:	e8 42 fe ff ff       	call   c00103fa <VgaText::decrementCursor(bool)>
c00105b8:	58                   	pop    eax
c00105b9:	5a                   	pop    edx
c00105ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105c6:	6a 20                	push   0x20
c00105c8:	53                   	push   ebx
c00105c9:	e8 a8 fc ff ff       	call   c0010276 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105ce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105d3:	83 c4 20             	add    esp,0x20
c00105d6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105d9:	0f b7 f6             	movzx  esi,si
c00105dc:	01 f6                	add    esi,esi
c00105de:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105e1:	eb 63                	jmp    c0010646 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105e3:	51                   	push   ecx
c00105e4:	51                   	push   ecx
c00105e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105e9:	50                   	push   eax
c00105ea:	e8 75 fc ff ff       	call   c0010264 <VgaText::combineCharAndColour(char, unsigned char)>
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	66 89 06             	mov    WORD PTR [esi],ax
c00105f5:	39 1d 04 d8 02 c0    	cmp    DWORD PTR ds:0xc002d804,ebx
c00105fb:	75 21                	jne    c001061e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105fd:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010600:	85 c0                	test   eax,eax
c0010602:	74 1a                	je     c001061e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010604:	52                   	push   edx
c0010605:	52                   	push   edx
c0010606:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010609:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001060c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010610:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010614:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010617:	51                   	push   ecx
c0010618:	53                   	push   ebx
c0010619:	ff d0                	call   eax
c001061b:	83 c4 20             	add    esp,0x20
c001061e:	83 c6 02             	add    esi,0x2
c0010621:	50                   	push   eax
c0010622:	50                   	push   eax
c0010623:	6a 00                	push   0x0
c0010625:	53                   	push   ebx
c0010626:	e8 7b fd ff ff       	call   c00103a6 <VgaText::incrementCursor(bool)>
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010632:	75 0d                	jne    c0010641 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010634:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010639:	0f b7 f6             	movzx  esi,si
c001063c:	01 f6                	add    esi,esi
c001063e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010641:	bd 01 00 00 00       	mov    ebp,0x1
c0010646:	47                   	inc    edi
c0010647:	e9 f8 fe ff ff       	jmp    c0010544 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001064c:	83 ec 0c             	sub    esp,0xc
c001064f:	53                   	push   ebx
c0010650:	e8 59 fa ff ff       	call   c00100ae <VgaText::updateCursor()>
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	89 e8                	mov    eax,ebp
c001065a:	84 c0                	test   al,al
c001065c:	74 0c                	je     c001066a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	53                   	push   ebx
c0010662:	e8 8d fe ff ff       	call   c00104f4 <VgaText::doUpdate()>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010671:	83 c4 1c             	add    esp,0x1c
c0010674:	5b                   	pop    ebx
c0010675:	5e                   	pop    esi
c0010676:	5f                   	pop    edi
c0010677:	5d                   	pop    ebp
c0010678:	c3                   	ret    
c0010679:	90                   	nop

c001067a <VgaText::clearScreen()>:
c001067a:	57                   	push   edi
c001067b:	56                   	push   esi
c001067c:	31 f6                	xor    esi,esi
c001067e:	53                   	push   ebx
c001067f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010683:	52                   	push   edx
c0010684:	6a 00                	push   0x0
c0010686:	6a 00                	push   0x0
c0010688:	53                   	push   ebx
c0010689:	e8 54 fc ff ff       	call   c00102e2 <VgaText::setCursor(int, int)>
c001068e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010695:	83 c4 10             	add    esp,0x10
c0010698:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001069b:	7e 20                	jle    c00106bd <VgaText::clearScreen()+0x43>
c001069d:	31 ff                	xor    edi,edi
c001069f:	50                   	push   eax
c00106a0:	50                   	push   eax
c00106a1:	56                   	push   esi
c00106a2:	57                   	push   edi
c00106a3:	47                   	inc    edi
c00106a4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106aa:	6a 20                	push   0x20
c00106ac:	53                   	push   ebx
c00106ad:	e8 c4 fb ff ff       	call   c0010276 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106b2:	83 c4 20             	add    esp,0x20
c00106b5:	83 ff 50             	cmp    edi,0x50
c00106b8:	75 e5                	jne    c001069f <VgaText::clearScreen()+0x25>
c00106ba:	46                   	inc    esi
c00106bb:	eb db                	jmp    c0010698 <VgaText::clearScreen()+0x1e>
c00106bd:	83 ec 0c             	sub    esp,0xc
c00106c0:	53                   	push   ebx
c00106c1:	e8 2e fe ff ff       	call   c00104f4 <VgaText::doUpdate()>
c00106c6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	5b                   	pop    ebx
c00106d1:	5e                   	pop    esi
c00106d2:	5f                   	pop    edi
c00106d3:	c3                   	ret    

c00106d4 <VgaText::putchar(char)>:
c00106d4:	56                   	push   esi
c00106d5:	53                   	push   ebx
c00106d6:	83 ec 14             	sub    esp,0x14
c00106d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106e1:	3c 5b                	cmp    al,0x5b
c00106e3:	75 18                	jne    c00106fd <VgaText::putchar(char)+0x29>
c00106e5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106e9:	74 1f                	je     c001070a <VgaText::putchar(char)+0x36>
c00106eb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106f1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106f8:	e9 bd 00 00 00       	jmp    c00107ba <VgaText::putchar(char)+0xe6>
c00106fd:	3c 1b                	cmp    al,0x1b
c00106ff:	75 09                	jne    c001070a <VgaText::putchar(char)+0x36>
c0010701:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010705:	e9 b0 00 00 00       	jmp    c00107ba <VgaText::putchar(char)+0xe6>
c001070a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001070d:	84 c9                	test   cl,cl
c001070f:	0f 84 92 00 00 00    	je     c00107a7 <VgaText::putchar(char)+0xd3>
c0010715:	8d 50 c0             	lea    edx,[eax-0x40]
c0010718:	80 fa 3e             	cmp    dl,0x3e
c001071b:	77 76                	ja     c0010793 <VgaText::putchar(char)+0xbf>
c001071d:	3c 6d                	cmp    al,0x6d
c001071f:	75 47                	jne    c0010768 <VgaText::putchar(char)+0x94>
c0010721:	31 f6                	xor    esi,esi
c0010723:	31 d2                	xor    edx,edx
c0010725:	31 c0                	xor    eax,eax
c0010727:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001072a:	7e 2d                	jle    c0010759 <VgaText::putchar(char)+0x85>
c001072c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010731:	80 fa 3b             	cmp    dl,0x3b
c0010734:	75 17                	jne    c001074d <VgaText::putchar(char)+0x79>
c0010736:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001073a:	50                   	push   eax
c001073b:	53                   	push   ebx
c001073c:	e8 83 f9 ff ff       	call   c00100c4 <VgaText::doANSI_SGR(int)>
c0010741:	59                   	pop    ecx
c0010742:	31 d2                	xor    edx,edx
c0010744:	58                   	pop    eax
c0010745:	31 c0                	xor    eax,eax
c0010747:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001074b:	eb 09                	jmp    c0010756 <VgaText::putchar(char)+0x82>
c001074d:	6b c0 0a             	imul   eax,eax,0xa
c0010750:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010754:	88 ca                	mov    dl,cl
c0010756:	46                   	inc    esi
c0010757:	eb ce                	jmp    c0010727 <VgaText::putchar(char)+0x53>
c0010759:	84 d2                	test   dl,dl
c001075b:	74 2e                	je     c001078b <VgaText::putchar(char)+0xb7>
c001075d:	50                   	push   eax
c001075e:	53                   	push   ebx
c001075f:	e8 60 f9 ff ff       	call   c00100c4 <VgaText::doANSI_SGR(int)>
c0010764:	58                   	pop    eax
c0010765:	5a                   	pop    edx
c0010766:	eb 23                	jmp    c001078b <VgaText::putchar(char)+0xb7>
c0010768:	3c 4a                	cmp    al,0x4a
c001076a:	75 1f                	jne    c001078b <VgaText::putchar(char)+0xb7>
c001076c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010770:	75 19                	jne    c001078b <VgaText::putchar(char)+0xb7>
c0010772:	83 ec 0c             	sub    esp,0xc
c0010775:	53                   	push   ebx
c0010776:	e8 ff fe ff ff       	call   c001067a <VgaText::clearScreen()>
c001077b:	83 c4 0c             	add    esp,0xc
c001077e:	6a 00                	push   0x0
c0010780:	6a 00                	push   0x0
c0010782:	53                   	push   ebx
c0010783:	e8 5a fb ff ff       	call   c00102e2 <VgaText::setCursor(int, int)>
c0010788:	83 c4 10             	add    esp,0x10
c001078b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010791:	eb 27                	jmp    c00107ba <VgaText::putchar(char)+0xe6>
c0010793:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010796:	83 fa 0e             	cmp    edx,0xe
c0010799:	7f 1f                	jg     c00107ba <VgaText::putchar(char)+0xe6>
c001079b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001079e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107a1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107a5:	eb 13                	jmp    c00107ba <VgaText::putchar(char)+0xe6>
c00107a7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107aa:	0f be c0             	movsx  eax,al
c00107ad:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107b0:	50                   	push   eax
c00107b1:	53                   	push   ebx
c00107b2:	e8 65 fc ff ff       	call   c001041c <VgaText::putchar(char, VgaColour, VgaColour)>
c00107b7:	83 c4 10             	add    esp,0x10
c00107ba:	83 c4 14             	add    esp,0x14
c00107bd:	5b                   	pop    ebx
c00107be:	5e                   	pop    esi
c00107bf:	c3                   	ret    

c00107c0 <VgaText::putx(unsigned int)>:
c00107c0:	57                   	push   edi
c00107c1:	b9 11 00 00 00       	mov    ecx,0x11
c00107c6:	56                   	push   esi
c00107c7:	be ee 9f 02 c0       	mov    esi,0xc0029fee
c00107cc:	53                   	push   ebx
c00107cd:	83 ec 20             	sub    esp,0x20
c00107d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107d4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107d8:	fc                   	cld    
c00107d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107db:	be 08 00 00 00       	mov    esi,0x8
c00107e0:	50                   	push   eax
c00107e1:	50                   	push   eax
c00107e2:	89 d8                	mov    eax,ebx
c00107e4:	c1 e3 04             	shl    ebx,0x4
c00107e7:	c1 e8 1c             	shr    eax,0x1c
c00107ea:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107ef:	50                   	push   eax
c00107f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107f4:	e8 db fe ff ff       	call   c00106d4 <VgaText::putchar(char)>
c00107f9:	83 c4 10             	add    esp,0x10
c00107fc:	4e                   	dec    esi
c00107fd:	75 e1                	jne    c00107e0 <VgaText::putx(unsigned int)+0x20>
c00107ff:	83 c4 20             	add    esp,0x20
c0010802:	5b                   	pop    ebx
c0010803:	5e                   	pop    esi
c0010804:	5f                   	pop    edi
c0010805:	c3                   	ret    

c0010806 <VgaText::puts(char const*)>:
c0010806:	53                   	push   ebx
c0010807:	83 ec 08             	sub    esp,0x8
c001080a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001080e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010811:	84 c0                	test   al,al
c0010813:	74 12                	je     c0010827 <VgaText::puts(char const*)+0x21>
c0010815:	43                   	inc    ebx
c0010816:	51                   	push   ecx
c0010817:	51                   	push   ecx
c0010818:	50                   	push   eax
c0010819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081d:	e8 b2 fe ff ff       	call   c00106d4 <VgaText::putchar(char)>
c0010822:	83 c4 10             	add    esp,0x10
c0010825:	eb e7                	jmp    c001080e <VgaText::puts(char const*)+0x8>
c0010827:	83 c4 08             	add    esp,0x8
c001082a:	5b                   	pop    ebx
c001082b:	c3                   	ret    

c001082c <VgaText::VgaText(char const*)>:
c001082c:	57                   	push   edi
c001082d:	56                   	push   esi
c001082e:	53                   	push   ebx
c001082f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010833:	83 ec 08             	sub    esp,0x8
c0010836:	6a 00                	push   0x0
c0010838:	50                   	push   eax
c0010839:	e8 42 05 00 00       	call   c0010d80 <UnixFile::UnixFile(int)>
c001083e:	83 c4 10             	add    esp,0x10
c0010841:	ba 54 a0 02 c0       	mov    edx,0xc002a054
c0010846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084a:	89 10                	mov    DWORD PTR [eax],edx
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010866:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001086a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010876:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001087d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010881:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010897:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	8d 50 60             	lea    edx,[eax+0x60]
c00108a5:	bb e0 d7 02 c0       	mov    ebx,0xc002d7e0
c00108aa:	b8 08 00 00 00       	mov    eax,0x8
c00108af:	fc                   	cld    
c00108b0:	89 d7                	mov    edi,edx
c00108b2:	89 de                	mov    esi,ebx
c00108b4:	89 c1                	mov    ecx,eax
c00108b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bc:	05 82 00 00 00       	add    eax,0x82
c00108c1:	83 ec 08             	sub    esp,0x8
c00108c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108c8:	50                   	push   eax
c00108c9:	e8 3e ff fe ff       	call   c000080c <strcpy>
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	6a 01                	push   0x1
c00108e1:	e8 dd 08 00 00       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c00108e6:	83 c4 10             	add    esp,0x10
c00108e9:	89 c2                	mov    edx,eax
c00108eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108f2:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108ff:	89 c6                	mov    esi,eax
c0010901:	e8 37 f0 ff ff       	call   c000f93d <Phys::allocatePage()>
c0010906:	6a 05                	push   0x5
c0010908:	56                   	push   esi
c0010909:	50                   	push   eax
c001090a:	53                   	push   ebx
c001090b:	e8 70 10 00 00       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010910:	83 c4 10             	add    esp,0x10
c0010913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010917:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001091a:	83 ec 04             	sub    esp,0x4
c001091d:	68 00 0f 00 00       	push   0xf00
c0010922:	6a 00                	push   0x0
c0010924:	50                   	push   eax
c0010925:	e8 26 fe fe ff       	call   c0000750 <memset>
c001092a:	83 c4 10             	add    esp,0x10
c001092d:	83 ec 04             	sub    esp,0x4
c0010930:	6a 00                	push   0x0
c0010932:	6a 07                	push   0x7
c0010934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010938:	e8 1b f8 ff ff       	call   c0010158 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	83 ec 04             	sub    esp,0x4
c0010943:	6a 00                	push   0x0
c0010945:	6a 00                	push   0x0
c0010947:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094b:	e8 92 f9 ff ff       	call   c00102e2 <VgaText::setCursor(int, int)>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	83 ec 0c             	sub    esp,0xc
c0010956:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001095a:	e8 1b fd ff ff       	call   c001067a <VgaText::clearScreen()>
c001095f:	83 c4 10             	add    esp,0x10
c0010962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010966:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001096a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096e:	05 02 01 00 00       	add    eax,0x102
c0010973:	83 ec 04             	sub    esp,0x4
c0010976:	68 96 00 00 00       	push   0x96
c001097b:	6a 00                	push   0x0
c001097d:	50                   	push   eax
c001097e:	e8 cd fd fe ff       	call   c0000750 <memset>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098a:	05 98 01 00 00       	add    eax,0x198
c001098f:	83 ec 04             	sub    esp,0x4
c0010992:	68 2c 01 00 00       	push   0x12c
c0010997:	6a 00                	push   0x0
c0010999:	50                   	push   eax
c001099a:	e8 b1 fd fe ff       	call   c0000750 <memset>
c001099f:	83 c4 10             	add    esp,0x10
c00109a2:	90                   	nop
c00109a3:	5b                   	pop    ebx
c00109a4:	5e                   	pop    esi
c00109a5:	5f                   	pop    edi
c00109a6:	c3                   	ret    
c00109a7:	90                   	nop

c00109a8 <VgaText::receiveKey(unsigned char)>:
c00109a8:	55                   	push   ebp
c00109a9:	57                   	push   edi
c00109aa:	56                   	push   esi
c00109ab:	53                   	push   ebx
c00109ac:	83 ec 1c             	sub    esp,0x1c
c00109af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109b7:	84 db                	test   bl,bl
c00109b9:	0f 84 c9 00 00 00    	je     c0010a88 <VgaText::receiveKey(unsigned char)+0xe0>
c00109bf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109c5:	80 fb 08             	cmp    bl,0x8
c00109c8:	75 2c                	jne    c00109f6 <VgaText::receiveKey(unsigned char)+0x4e>
c00109ca:	83 ec 0c             	sub    esp,0xc
c00109cd:	57                   	push   edi
c00109ce:	e8 99 fd fe ff       	call   c000076c <strlen>
c00109d3:	83 c4 10             	add    esp,0x10
c00109d6:	85 c0                	test   eax,eax
c00109d8:	74 41                	je     c0010a1b <VgaText::receiveKey(unsigned char)+0x73>
c00109da:	50                   	push   eax
c00109db:	50                   	push   eax
c00109dc:	6a 08                	push   0x8
c00109de:	56                   	push   esi
c00109df:	e8 f0 fc ff ff       	call   c00106d4 <VgaText::putchar(char)>
c00109e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109e7:	e8 80 fd fe ff       	call   c000076c <strlen>
c00109ec:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109f4:	eb 22                	jmp    c0010a18 <VgaText::receiveKey(unsigned char)+0x70>
c00109f6:	0f be c3             	movsx  eax,bl
c00109f9:	52                   	push   edx
c00109fa:	52                   	push   edx
c00109fb:	50                   	push   eax
c00109fc:	56                   	push   esi
c00109fd:	e8 d2 fc ff ff       	call   c00106d4 <VgaText::putchar(char)>
c0010a02:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a06:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a0b:	59                   	pop    ecx
c0010a0c:	5d                   	pop    ebp
c0010a0d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a11:	50                   	push   eax
c0010a12:	57                   	push   edi
c0010a13:	e8 34 ff fe ff       	call   c000094c <strcat>
c0010a18:	83 c4 10             	add    esp,0x10
c0010a1b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a22:	75 05                	jne    c0010a29 <VgaText::receiveKey(unsigned char)+0x81>
c0010a24:	80 fb 0a             	cmp    bl,0xa
c0010a27:	75 53                	jne    c0010a7c <VgaText::receiveKey(unsigned char)+0xd4>
c0010a29:	83 ec 0c             	sub    esp,0xc
c0010a2c:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a32:	53                   	push   ebx
c0010a33:	e8 34 fd fe ff       	call   c000076c <strlen>
c0010a38:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a3b:	89 c5                	mov    ebp,eax
c0010a3d:	e8 2a fd fe ff       	call   c000076c <strlen>
c0010a42:	83 c4 10             	add    esp,0x10
c0010a45:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a49:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a4e:	76 10                	jbe    c0010a60 <VgaText::receiveKey(unsigned char)+0xb8>
c0010a50:	83 ec 0c             	sub    esp,0xc
c0010a53:	68 ff 9f 02 c0       	push   0xc0029fff
c0010a58:	e8 e8 92 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0010a5d:	83 c4 10             	add    esp,0x10
c0010a60:	50                   	push   eax
c0010a61:	50                   	push   eax
c0010a62:	57                   	push   edi
c0010a63:	53                   	push   ebx
c0010a64:	e8 e3 fe fe ff       	call   c000094c <strcat>
c0010a69:	83 c4 0c             	add    esp,0xc
c0010a6c:	68 96 00 00 00       	push   0x96
c0010a71:	6a 00                	push   0x0
c0010a73:	57                   	push   edi
c0010a74:	e8 d7 fc fe ff       	call   c0000750 <memset>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	83 ec 0c             	sub    esp,0xc
c0010a7f:	56                   	push   esi
c0010a80:	e8 6f fa ff ff       	call   c00104f4 <VgaText::doUpdate()>
c0010a85:	83 c4 10             	add    esp,0x10
c0010a88:	83 c4 1c             	add    esp,0x1c
c0010a8b:	5b                   	pop    ebx
c0010a8c:	5e                   	pop    esi
c0010a8d:	5f                   	pop    edi
c0010a8e:	5d                   	pop    ebp
c0010a8f:	c3                   	ret    

c0010a90 <VgaText::write(unsigned long long, void*, int*)>:
c0010a90:	55                   	push   ebp
c0010a91:	57                   	push   edi
c0010a92:	56                   	push   esi
c0010a93:	53                   	push   ebx
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a9b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a9f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aa3:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010aaa:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010aad:	39 eb                	cmp    ebx,ebp
c0010aaf:	74 13                	je     c0010ac4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ab1:	43                   	inc    ebx
c0010ab2:	50                   	push   eax
c0010ab3:	50                   	push   eax
c0010ab4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ab8:	50                   	push   eax
c0010ab9:	56                   	push   esi
c0010aba:	e8 15 fc ff ff       	call   c00106d4 <VgaText::putchar(char)>
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	eb e9                	jmp    c0010aad <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ac4:	83 ec 0c             	sub    esp,0xc
c0010ac7:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010ace:	56                   	push   esi
c0010acf:	e8 20 fa ff ff       	call   c00104f4 <VgaText::doUpdate()>
c0010ad4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ad8:	89 38                	mov    DWORD PTR [eax],edi
c0010ada:	83 c4 1c             	add    esp,0x1c
c0010add:	31 c0                	xor    eax,eax
c0010adf:	5b                   	pop    ebx
c0010ae0:	5e                   	pop    esi
c0010ae1:	5f                   	pop    edi
c0010ae2:	5d                   	pop    ebp
c0010ae3:	c3                   	ret    

c0010ae4 <newTerminal(char*)>:
c0010ae4:	83 ec 28             	sub    esp,0x28
c0010ae7:	68 c4 02 00 00       	push   0x2c4
c0010aec:	e8 a8 ea ff ff       	call   c000f599 <malloc>
c0010af1:	5a                   	pop    edx
c0010af2:	59                   	pop    ecx
c0010af3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010af7:	50                   	push   eax
c0010af8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010afc:	e8 2b fd ff ff       	call   c001082c <VgaText::VgaText(char const*)>
c0010b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b05:	83 c4 2c             	add    esp,0x2c
c0010b08:	c3                   	ret    
c0010b09:	90                   	nop

c0010b0a <TSS::TSS()>:
c0010b0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b15:	90                   	nop
c0010b16:	c3                   	ret    
c0010b17:	90                   	nop

c0010b18 <TSS::setESP(unsigned long)>:
c0010b18:	55                   	push   ebp
c0010b19:	89 e5                	mov    ebp,esp
c0010b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b27:	90                   	nop
c0010b28:	5d                   	pop    ebp
c0010b29:	c3                   	ret    

c0010b2a <TSS::flush()>:
c0010b2a:	55                   	push   ebp
c0010b2b:	89 e5                	mov    ebp,esp
c0010b2d:	83 ec 10             	sub    esp,0x10
c0010b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b33:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b35:	83 c8 03             	or     eax,0x3
c0010b38:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b3c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b40:	66 89 d0             	mov    ax,dx
c0010b43:	0f 00 d8             	ltr    ax
c0010b46:	90                   	nop
c0010b47:	c9                   	leave  
c0010b48:	c3                   	ret    
c0010b49:	90                   	nop

c0010b4a <TSS::setup(unsigned long, unsigned long)>:
c0010b4a:	55                   	push   ebp
c0010b4b:	89 e5                	mov    ebp,esp
c0010b4d:	83 ec 18             	sub    esp,0x18
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	6a 68                	push   0x68
c0010b55:	e8 3f ea ff ff       	call   c000f599 <malloc>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	89 c2                	mov    edx,eax
c0010b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b62:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b6b:	83 ec 04             	sub    esp,0x4
c0010b6e:	6a 68                	push   0x68
c0010b70:	6a 00                	push   0x0
c0010b72:	50                   	push   eax
c0010b73:	e8 d8 fb fe ff       	call   c0000750 <memset>
c0010b78:	83 c4 10             	add    esp,0x10
c0010b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b81:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b99:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba5:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb1:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbd:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc9:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd5:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be1:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bed:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bf0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bfc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c05:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c12:	0f 20 da             	mov    edx,cr3
c0010c15:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c18:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c1b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c24:	83 ec 08             	sub    esp,0x8
c0010c27:	50                   	push   eax
c0010c28:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c2b:	50                   	push   eax
c0010c2c:	e8 61 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	83 ec 08             	sub    esp,0x8
c0010c37:	6a 68                	push   0x68
c0010c39:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c3c:	50                   	push   eax
c0010c3d:	e8 6c e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c49:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c4c:	83 e0 0f             	and    eax,0xf
c0010c4f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c52:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c55:	83 c8 40             	or     eax,0x40
c0010c58:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c5b:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0010c60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c66:	05 78 01 00 00       	add    eax,0x178
c0010c6b:	83 ec 04             	sub    esp,0x4
c0010c6e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c71:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c74:	50                   	push   eax
c0010c75:	e8 68 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c7a:	83 c4 10             	add    esp,0x10
c0010c7d:	89 c2                	mov    edx,eax
c0010c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c82:	89 10                	mov    DWORD PTR [eax],edx
c0010c84:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0010c89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c8f:	05 78 01 00 00       	add    eax,0x178
c0010c94:	83 ec 0c             	sub    esp,0xc
c0010c97:	50                   	push   eax
c0010c98:	e8 6f e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ca5:	c9                   	leave  
c0010ca6:	c3                   	ret    
c0010ca7:	90                   	nop

c0010ca8 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cb8:	75 08                	jne    c0010cc2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010cc0:	eb 38                	jmp    c0010cfa <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cc2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010cc7:	75 17                	jne    c0010ce0 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010cc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cd1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cdd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ce0:	89 c1                	mov    ecx,eax
c0010ce2:	83 e1 fd             	and    ecx,0xfffffffd
c0010ce5:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ceb:	74 cd                	je     c0010cba <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ced:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cf2:	83 e0 ef             	and    eax,0xffffffef
c0010cf5:	83 f8 08             	cmp    eax,0x8
c0010cf8:	76 c0                	jbe    c0010cba <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cfa:	31 c0                	xor    eax,eax
c0010cfc:	c3                   	ret    
c0010cfd:	90                   	nop

c0010cfe <ReservedFilename::isAtty()>:
c0010cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d02:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d05:	31 c0                	xor    eax,eax
c0010d07:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d0d:	74 09                	je     c0010d18 <ReservedFilename::isAtty()+0x1a>
c0010d0f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d15:	0f 94 c0             	sete   al
c0010d18:	c3                   	ret    
c0010d19:	90                   	nop

c0010d1a <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d29:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d2e:	75 08                	jne    c0010d38 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d30:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d36:	eb 3d                	jmp    c0010d75 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d38:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d3d:	75 17                	jne    c0010d56 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d47:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d53:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d56:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d5b:	75 04                	jne    c0010d61 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d5d:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d5f:	eb 14                	jmp    c0010d75 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d61:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d66:	74 c8                	je     c0010d30 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d68:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d6d:	83 e0 ef             	and    eax,0xffffffef
c0010d70:	83 f8 08             	cmp    eax,0x8
c0010d73:	76 bb                	jbe    c0010d30 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d75:	31 c0                	xor    eax,eax
c0010d77:	c3                   	ret    

c0010d78 <UnixFile::getFileDescriptor()>:
c0010d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7f:	c3                   	ret    

c0010d80 <UnixFile::UnixFile(int)>:
c0010d80:	53                   	push   ebx
c0010d81:	83 ec 28             	sub    esp,0x28
c0010d84:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c0010d89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d8d:	89 10                	mov    DWORD PTR [eax],edx
c0010d8f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d97:	0f 8f 8c 01 00 00    	jg     c0010f29 <UnixFile::UnixFile(int)+0x1a9>
c0010d9d:	a1 e0 c6 02 c0       	mov    eax,ds:0xc002c6e0
c0010da2:	8d 50 01             	lea    edx,[eax+0x1]
c0010da5:	89 15 e0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e0,edx
c0010dab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010daf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010db2:	83 ec 08             	sub    esp,0x8
c0010db5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010db9:	68 98 d8 02 c0       	push   0xc002d898
c0010dbe:	e8 c3 75 01 00       	call   c0028386 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dc3:	83 c4 10             	add    esp,0x10
c0010dc6:	a0 94 d8 02 c0       	mov    al,ds:0xc002d894
c0010dcb:	83 f0 01             	xor    eax,0x1
c0010dce:	84 c0                	test   al,al
c0010dd0:	0f 84 54 01 00 00    	je     c0010f2a <UnixFile::UnixFile(int)+0x1aa>
c0010dd6:	c6 05 94 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d894,0x1
c0010ddd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010de5:	83 ec 0c             	sub    esp,0xc
c0010de8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dec:	e8 a8 e7 ff ff       	call   c000f599 <malloc>
c0010df1:	83 c4 10             	add    esp,0x10
c0010df4:	89 c3                	mov    ebx,eax
c0010df6:	83 ec 08             	sub    esp,0x8
c0010df9:	68 03 ff ff 0f       	push   0xfffff03
c0010dfe:	53                   	push   ebx
c0010dff:	e8 2c 01 00 00       	call   c0010f30 <ReservedFilename::ReservedFilename(int)>
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	89 1d 8c d8 02 c0    	mov    DWORD PTR ds:0xc002d88c,ebx
c0010e0d:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1c:	e8 78 e7 ff ff       	call   c000f599 <malloc>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	89 c3                	mov    ebx,eax
c0010e26:	83 ec 08             	sub    esp,0x8
c0010e29:	68 01 ff ff 0f       	push   0xfffff01
c0010e2e:	53                   	push   ebx
c0010e2f:	e8 fc 00 00 00       	call   c0010f30 <ReservedFilename::ReservedFilename(int)>
c0010e34:	83 c4 10             	add    esp,0x10
c0010e37:	89 1d 90 d8 02 c0    	mov    DWORD PTR ds:0xc002d890,ebx
c0010e3d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e45:	83 ec 0c             	sub    esp,0xc
c0010e48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e4c:	e8 48 e7 ff ff       	call   c000f599 <malloc>
c0010e51:	83 c4 10             	add    esp,0x10
c0010e54:	89 c3                	mov    ebx,eax
c0010e56:	83 ec 08             	sub    esp,0x8
c0010e59:	68 00 ff ff 0f       	push   0xfffff00
c0010e5e:	53                   	push   ebx
c0010e5f:	e8 cc 00 00 00       	call   c0010f30 <ReservedFilename::ReservedFilename(int)>
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	89 1d 84 d8 02 c0    	mov    DWORD PTR ds:0xc002d884,ebx
c0010e6d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e75:	83 ec 0c             	sub    esp,0xc
c0010e78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e7c:	e8 18 e7 ff ff       	call   c000f599 <malloc>
c0010e81:	83 c4 10             	add    esp,0x10
c0010e84:	89 c3                	mov    ebx,eax
c0010e86:	83 ec 08             	sub    esp,0x8
c0010e89:	68 02 ff ff 0f       	push   0xfffff02
c0010e8e:	53                   	push   ebx
c0010e8f:	e8 9c 00 00 00       	call   c0010f30 <ReservedFilename::ReservedFilename(int)>
c0010e94:	83 c4 10             	add    esp,0x10
c0010e97:	89 1d 88 d8 02 c0    	mov    DWORD PTR ds:0xc002d888,ebx
c0010e9d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ea5:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010eaa:	7f 7e                	jg     c0010f2a <UnixFile::UnixFile(int)+0x1aa>
c0010eac:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010eb4:	83 ec 0c             	sub    esp,0xc
c0010eb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ebb:	e8 d9 e6 ff ff       	call   c000f599 <malloc>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 c3                	mov    ebx,eax
c0010ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ec9:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010ece:	83 ec 08             	sub    esp,0x8
c0010ed1:	50                   	push   eax
c0010ed2:	53                   	push   ebx
c0010ed3:	e8 58 00 00 00       	call   c0010f30 <ReservedFilename::ReservedFilename(int)>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010edf:	89 1c 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],ebx
c0010ee6:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010eee:	83 ec 0c             	sub    esp,0xc
c0010ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ef5:	e8 9f e6 ff ff       	call   c000f599 <malloc>
c0010efa:	83 c4 10             	add    esp,0x10
c0010efd:	89 c3                	mov    ebx,eax
c0010eff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f03:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f08:	83 ec 08             	sub    esp,0x8
c0010f0b:	50                   	push   eax
c0010f0c:	53                   	push   ebx
c0010f0d:	e8 1e 00 00 00       	call   c0010f30 <ReservedFilename::ReservedFilename(int)>
c0010f12:	83 c4 10             	add    esp,0x10
c0010f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f19:	89 1c 85 20 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27e0],ebx
c0010f20:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f24:	e9 7c ff ff ff       	jmp    c0010ea5 <UnixFile::UnixFile(int)+0x125>
c0010f29:	90                   	nop
c0010f2a:	83 c4 28             	add    esp,0x28
c0010f2d:	5b                   	pop    ebx
c0010f2e:	c3                   	ret    
c0010f2f:	90                   	nop

c0010f30 <ReservedFilename::ReservedFilename(int)>:
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f37:	83 ec 08             	sub    esp,0x8
c0010f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f3e:	50                   	push   eax
c0010f3f:	e8 3c fe ff ff       	call   c0010d80 <UnixFile::UnixFile(int)>
c0010f44:	83 c4 10             	add    esp,0x10
c0010f47:	ba 38 a1 02 c0       	mov    edx,0xc002a138
c0010f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f50:	89 10                	mov    DWORD PTR [eax],edx
c0010f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f5d:	90                   	nop
c0010f5e:	83 c4 0c             	add    esp,0xc
c0010f61:	c3                   	ret    

c0010f62 <UnixFile::~UnixFile()>:
c0010f62:	83 ec 1c             	sub    esp,0x1c
c0010f65:	ba 1c a1 02 c0       	mov    edx,0xc002a11c
c0010f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6e:	89 10                	mov    DWORD PTR [eax],edx
c0010f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f77:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f7c:	7f 73                	jg     c0010ff1 <UnixFile::~UnixFile()+0x8f>
c0010f7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f86:	83 ec 0c             	sub    esp,0xc
c0010f89:	68 98 d8 02 c0       	push   0xc002d898
c0010f8e:	e8 c7 74 01 00       	call   c002845a <LinkedList<UnixFile>::getFirstElement()>
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f9a:	83 ec 0c             	sub    esp,0xc
c0010f9d:	68 98 d8 02 c0       	push   0xc002d898
c0010fa2:	e8 bb 74 01 00       	call   c0028462 <LinkedList<UnixFile>::removeFirst()>
c0010fa7:	83 c4 10             	add    esp,0x10
c0010faa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fae:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fb2:	74 40                	je     c0010ff4 <UnixFile::~UnixFile()+0x92>
c0010fb4:	83 ec 08             	sub    esp,0x8
c0010fb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fbb:	68 98 d8 02 c0       	push   0xc002d898
c0010fc0:	e8 c1 73 01 00       	call   c0028386 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fc5:	83 c4 10             	add    esp,0x10
c0010fc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fcc:	8d 50 01             	lea    edx,[eax+0x1]
c0010fcf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fd3:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fd8:	0f 94 c0             	sete   al
c0010fdb:	84 c0                	test   al,al
c0010fdd:	74 a7                	je     c0010f86 <UnixFile::~UnixFile()+0x24>
c0010fdf:	83 ec 0c             	sub    esp,0xc
c0010fe2:	68 f4 a0 02 c0       	push   0xc002a0f4
c0010fe7:	e8 59 8d 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0010fec:	83 c4 10             	add    esp,0x10
c0010fef:	eb 95                	jmp    c0010f86 <UnixFile::~UnixFile()+0x24>
c0010ff1:	90                   	nop
c0010ff2:	eb 01                	jmp    c0010ff5 <UnixFile::~UnixFile()+0x93>
c0010ff4:	90                   	nop
c0010ff5:	90                   	nop
c0010ff6:	83 c4 1c             	add    esp,0x1c
c0010ff9:	c3                   	ret    

c0010ffa <UnixFile::~UnixFile()>:
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	83 ec 0c             	sub    esp,0xc
c0011000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011004:	e8 59 ff ff ff       	call   c0010f62 <UnixFile::~UnixFile()>
c0011009:	83 c4 10             	add    esp,0x10
c001100c:	83 ec 08             	sub    esp,0x8
c001100f:	6a 0c                	push   0xc
c0011011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011015:	e8 e7 14 00 00       	call   c0012501 <operator delete(void*, unsigned long)>
c001101a:	83 c4 10             	add    esp,0x10
c001101d:	83 c4 0c             	add    esp,0xc
c0011020:	c3                   	ret    
c0011021:	90                   	nop

c0011022 <ReservedFilename::~ReservedFilename()>:
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	ba 38 a1 02 c0       	mov    edx,0xc002a138
c001102a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102e:	89 10                	mov    DWORD PTR [eax],edx
c0011030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	50                   	push   eax
c0011038:	e8 25 ff ff ff       	call   c0010f62 <UnixFile::~UnixFile()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	90                   	nop
c0011041:	83 c4 0c             	add    esp,0xc
c0011044:	c3                   	ret    
c0011045:	90                   	nop

c0011046 <ReservedFilename::~ReservedFilename()>:
c0011046:	83 ec 0c             	sub    esp,0xc
c0011049:	83 ec 0c             	sub    esp,0xc
c001104c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011050:	e8 cd ff ff ff       	call   c0011022 <ReservedFilename::~ReservedFilename()>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	83 ec 08             	sub    esp,0x8
c001105b:	6a 0c                	push   0xc
c001105d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011061:	e8 9b 14 00 00       	call   c0012501 <operator delete(void*, unsigned long)>
c0011066:	83 c4 10             	add    esp,0x10
c0011069:	83 c4 0c             	add    esp,0xc
c001106c:	c3                   	ret    

c001106d <getFromFileDescriptor(int)>:
c001106d:	53                   	push   ebx
c001106e:	83 ec 08             	sub    esp,0x8
c0011071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011075:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001107b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011081:	7f 2c                	jg     c00110af <getFromFileDescriptor(int)+0x42>
c0011083:	83 ec 0c             	sub    esp,0xc
c0011086:	68 98 d8 02 c0       	push   0xc002d898
c001108b:	e8 ca 73 01 00       	call   c002845a <LinkedList<UnixFile>::getFirstElement()>
c0011090:	83 c4 10             	add    esp,0x10
c0011093:	85 c0                	test   eax,eax
c0011095:	75 04                	jne    c001109b <getFromFileDescriptor(int)+0x2e>
c0011097:	31 c0                	xor    eax,eax
c0011099:	eb 6e                	jmp    c0011109 <getFromFileDescriptor(int)+0x9c>
c001109b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001109e:	74 69                	je     c0011109 <getFromFileDescriptor(int)+0x9c>
c00110a0:	52                   	push   edx
c00110a1:	52                   	push   edx
c00110a2:	50                   	push   eax
c00110a3:	68 98 d8 02 c0       	push   0xc002d898
c00110a8:	e8 57 74 01 00       	call   c0028504 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110ad:	eb e1                	jmp    c0011090 <getFromFileDescriptor(int)+0x23>
c00110af:	a1 8c d8 02 c0       	mov    eax,ds:0xc002d88c
c00110b4:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110ba:	74 4d                	je     c0011109 <getFromFileDescriptor(int)+0x9c>
c00110bc:	a1 90 d8 02 c0       	mov    eax,ds:0xc002d890
c00110c1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110c7:	74 40                	je     c0011109 <getFromFileDescriptor(int)+0x9c>
c00110c9:	a1 88 d8 02 c0       	mov    eax,ds:0xc002d888
c00110ce:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110d4:	74 33                	je     c0011109 <getFromFileDescriptor(int)+0x9c>
c00110d6:	a1 84 d8 02 c0       	mov    eax,ds:0xc002d884
c00110db:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110e1:	74 26                	je     c0011109 <getFromFileDescriptor(int)+0x9c>
c00110e3:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110e9:	83 f8 08             	cmp    eax,0x8
c00110ec:	77 09                	ja     c00110f7 <getFromFileDescriptor(int)+0x8a>
c00110ee:	8b 04 85 60 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd27a0]
c00110f5:	eb 12                	jmp    c0011109 <getFromFileDescriptor(int)+0x9c>
c00110f7:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110fd:	83 fb 08             	cmp    ebx,0x8
c0011100:	77 95                	ja     c0011097 <getFromFileDescriptor(int)+0x2a>
c0011102:	8b 04 9d 20 d8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd27e0]
c0011109:	83 c4 08             	add    esp,0x8
c001110c:	5b                   	pop    ebx
c001110d:	c3                   	ret    

c001110e <__static_initialization_and_destruction_0(int, int)>:
c001110e:	83 ec 0c             	sub    esp,0xc
c0011111:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011116:	75 34                	jne    c001114c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011118:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011120:	75 2a                	jne    c001114c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011122:	83 ec 0c             	sub    esp,0xc
c0011125:	68 98 d8 02 c0       	push   0xc002d898
c001112a:	e8 15 72 01 00       	call   c0028344 <LinkedList<UnixFile>::LinkedList()>
c001112f:	83 c4 10             	add    esp,0x10
c0011132:	83 ec 04             	sub    esp,0x4
c0011135:	68 18 c5 02 c0       	push   0xc002c518
c001113a:	68 98 d8 02 c0       	push   0xc002d898
c001113f:	68 42 83 02 c0       	push   0xc0028342
c0011144:	e8 32 13 00 00       	call   c001247b <__cxa_atexit>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	90                   	nop
c001114d:	83 c4 0c             	add    esp,0xc
c0011150:	c3                   	ret    

c0011151 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011151:	83 ec 0c             	sub    esp,0xc
c0011154:	83 ec 08             	sub    esp,0x8
c0011157:	68 ff ff 00 00       	push   0xffff
c001115c:	6a 01                	push   0x1
c001115e:	e8 ab ff ff ff       	call   c001110e <__static_initialization_and_destruction_0(int, int)>
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	83 c4 0c             	add    esp,0xc
c0011169:	c3                   	ret    

c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001116a:	53                   	push   ebx
c001116b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001116f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011173:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011179:	89 c8                	mov    eax,ecx
c001117b:	d1 e8                	shr    eax,1
c001117d:	03 05 e8 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6e8
c0011183:	83 e1 01             	and    ecx,0x1
c0011186:	8a 10                	mov    dl,BYTE PTR [eax]
c0011188:	75 09                	jne    c0011193 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001118a:	83 e2 f0             	and    edx,0xfffffff0
c001118d:	09 da                	or     edx,ebx
c001118f:	88 10                	mov    BYTE PTR [eax],dl
c0011191:	5b                   	pop    ebx
c0011192:	c3                   	ret    
c0011193:	c1 e3 04             	shl    ebx,0x4
c0011196:	83 e2 0f             	and    edx,0xf
c0011199:	09 da                	or     edx,ebx
c001119b:	88 10                	mov    BYTE PTR [eax],dl
c001119d:	5b                   	pop    ebx
c001119e:	c3                   	ret    

c001119f <Virt::getPageState(unsigned long)>:
c001119f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a3:	8b 0d e8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6e8
c00111a9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111af:	89 d0                	mov    eax,edx
c00111b1:	d1 e8                	shr    eax,1
c00111b3:	83 e2 01             	and    edx,0x1
c00111b6:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111b9:	75 04                	jne    c00111bf <Virt::getPageState(unsigned long)+0x20>
c00111bb:	83 e0 0f             	and    eax,0xf
c00111be:	c3                   	ret    
c00111bf:	c0 e8 04             	shr    al,0x4
c00111c2:	c3                   	ret    

c00111c3 <Virt::allocateKernelVirtualPages(int)>:
c00111c3:	55                   	push   ebp
c00111c4:	31 ed                	xor    ebp,ebp
c00111c6:	57                   	push   edi
c00111c7:	56                   	push   esi
c00111c8:	53                   	push   ebx
c00111c9:	31 db                	xor    ebx,ebx
c00111cb:	83 ec 1c             	sub    esp,0x1c
c00111ce:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111d2:	8b 3d e4 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c6e4
c00111d8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111dd:	57                   	push   edi
c00111de:	e8 bc ff ff ff       	call   c001119f <Virt::getPageState(unsigned long)>
c00111e3:	5a                   	pop    edx
c00111e4:	84 c0                	test   al,al
c00111e6:	75 3a                	jne    c0011222 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111e8:	85 db                	test   ebx,ebx
c00111ea:	75 02                	jne    c00111ee <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111ec:	89 fd                	mov    ebp,edi
c00111ee:	43                   	inc    ebx
c00111ef:	39 f3                	cmp    ebx,esi
c00111f1:	74 5a                	je     c001124d <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111f3:	47                   	inc    edi
c00111f4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111fa:	76 31                	jbe    c001122d <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111fc:	c7 05 e4 c6 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c6e4,0xc8000
c0011206:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001120b:	75 28                	jne    c0011235 <Virt::allocateKernelVirtualPages(int)+0x72>
c001120d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011212:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011217:	57                   	push   edi
c0011218:	e8 82 ff ff ff       	call   c001119f <Virt::getPageState(unsigned long)>
c001121d:	5a                   	pop    edx
c001121e:	84 c0                	test   al,al
c0011220:	74 c6                	je     c00111e8 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011222:	31 db                	xor    ebx,ebx
c0011224:	47                   	inc    edi
c0011225:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001122b:	77 cf                	ja     c00111fc <Virt::allocateKernelVirtualPages(int)+0x39>
c001122d:	89 3d e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edi
c0011233:	eb a8                	jmp    c00111dd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011235:	83 ec 0c             	sub    esp,0xc
c0011238:	68 4c a1 02 c0       	push   0xc002a14c
c001123d:	e8 03 8b 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0011242:	8b 3d e4 c6 02 c0    	mov    edi,DWORD PTR ds:0xc002c6e4
c0011248:	83 c4 10             	add    esp,0x10
c001124b:	eb 90                	jmp    c00111dd <Virt::allocateKernelVirtualPages(int)+0x1a>
c001124d:	89 2d e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,ebp
c0011253:	4b                   	dec    ebx
c0011254:	74 5f                	je     c00112b5 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011256:	85 f6                	test   esi,esi
c0011258:	74 3d                	je     c0011297 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001125a:	89 e8                	mov    eax,ebp
c001125c:	31 db                	xor    ebx,ebx
c001125e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011261:	eb 14                	jmp    c0011277 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011263:	6a 01                	push   0x1
c0011265:	43                   	inc    ebx
c0011266:	50                   	push   eax
c0011267:	e8 fe fe ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126c:	58                   	pop    eax
c001126d:	39 f3                	cmp    ebx,esi
c001126f:	5a                   	pop    edx
c0011270:	74 25                	je     c0011297 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011272:	a1 e4 c6 02 c0       	mov    eax,ds:0xc002c6e4
c0011277:	8d 50 01             	lea    edx,[eax+0x1]
c001127a:	85 db                	test   ebx,ebx
c001127c:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0011282:	74 20                	je     c00112a4 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011284:	39 df                	cmp    edi,ebx
c0011286:	75 db                	jne    c0011263 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011288:	6a 03                	push   0x3
c001128a:	43                   	inc    ebx
c001128b:	50                   	push   eax
c001128c:	e8 d9 fe ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011291:	59                   	pop    ecx
c0011292:	39 f3                	cmp    ebx,esi
c0011294:	58                   	pop    eax
c0011295:	75 db                	jne    c0011272 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011297:	83 c4 1c             	add    esp,0x1c
c001129a:	89 e8                	mov    eax,ebp
c001129c:	5b                   	pop    ebx
c001129d:	c1 e0 0c             	shl    eax,0xc
c00112a0:	5e                   	pop    esi
c00112a1:	5f                   	pop    edi
c00112a2:	5d                   	pop    ebp
c00112a3:	c3                   	ret    
c00112a4:	6a 02                	push   0x2
c00112a6:	bb 01 00 00 00       	mov    ebx,0x1
c00112ab:	50                   	push   eax
c00112ac:	e8 b9 fe ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112b1:	58                   	pop    eax
c00112b2:	5a                   	pop    edx
c00112b3:	eb bd                	jmp    c0011272 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112b5:	6a 04                	push   0x4
c00112b7:	8d 45 01             	lea    eax,[ebp+0x1]
c00112ba:	55                   	push   ebp
c00112bb:	a3 e4 c6 02 c0       	mov    ds:0xc002c6e4,eax
c00112c0:	e8 a5 fe ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c5:	59                   	pop    ecx
c00112c6:	89 e8                	mov    eax,ebp
c00112c8:	5b                   	pop    ebx
c00112c9:	c1 e0 0c             	shl    eax,0xc
c00112cc:	83 c4 1c             	add    esp,0x1c
c00112cf:	5b                   	pop    ebx
c00112d0:	5e                   	pop    esi
c00112d1:	5f                   	pop    edi
c00112d2:	5d                   	pop    ebp
c00112d3:	c3                   	ret    

c00112d4 <Virt::freeSwapfilePage(unsigned long)>:
c00112d4:	53                   	push   ebx
c00112d5:	8b 15 ac d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8ac
c00112db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112df:	b8 01 00 00 00       	mov    eax,0x1
c00112e4:	89 cb                	mov    ebx,ecx
c00112e6:	d3 e0                	shl    eax,cl
c00112e8:	c1 eb 05             	shr    ebx,0x5
c00112eb:	f7 d0                	not    eax
c00112ed:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112f0:	5b                   	pop    ebx
c00112f1:	c3                   	ret    

c00112f2 <Virt::swapIDToSector(unsigned long)>:
c00112f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112f6:	0f af 05 ec c6 02 c0 	imul   eax,DWORD PTR ds:0xc002c6ec
c00112fd:	03 05 f4 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6f4
c0011303:	c3                   	ret    

c0011304 <Virt::allocateSwapfilePage()>:
c0011304:	55                   	push   ebp
c0011305:	31 d2                	xor    edx,edx
c0011307:	57                   	push   edi
c0011308:	56                   	push   esi
c0011309:	53                   	push   ebx
c001130a:	83 ec 0c             	sub    esp,0xc
c001130d:	8b 0d ec c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ec
c0011313:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0011318:	f7 f1                	div    ecx
c001131a:	39 0d f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,ecx
c0011320:	72 2d                	jb     c001134f <Virt::allocateSwapfilePage()+0x4b>
c0011322:	8b 35 ac d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8ac
c0011328:	8b 16                	mov    edx,DWORD PTR [esi]
c001132a:	f6 c2 01             	test   dl,0x1
c001132d:	74 3c                	je     c001136b <Virt::allocateSwapfilePage()+0x67>
c001132f:	31 c9                	xor    ecx,ecx
c0011331:	bf 01 00 00 00       	mov    edi,0x1
c0011336:	eb 12                	jmp    c001134a <Virt::allocateSwapfilePage()+0x46>
c0011338:	89 fd                	mov    ebp,edi
c001133a:	89 ca                	mov    edx,ecx
c001133c:	d3 e5                	shl    ebp,cl
c001133e:	c1 ea 05             	shr    edx,0x5
c0011341:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011344:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011346:	85 ea                	test   edx,ebp
c0011348:	74 2a                	je     c0011374 <Virt::allocateSwapfilePage()+0x70>
c001134a:	41                   	inc    ecx
c001134b:	39 c8                	cmp    eax,ecx
c001134d:	77 e9                	ja     c0011338 <Virt::allocateSwapfilePage()+0x34>
c001134f:	83 ec 0c             	sub    esp,0xc
c0011352:	68 d3 a2 02 c0       	push   0xc002a2d3
c0011357:	e8 e9 89 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c001135c:	83 c4 10             	add    esp,0x10
c001135f:	31 c9                	xor    ecx,ecx
c0011361:	83 c4 0c             	add    esp,0xc
c0011364:	89 c8                	mov    eax,ecx
c0011366:	5b                   	pop    ebx
c0011367:	5e                   	pop    esi
c0011368:	5f                   	pop    edi
c0011369:	5d                   	pop    ebp
c001136a:	c3                   	ret    
c001136b:	89 f3                	mov    ebx,esi
c001136d:	bd 01 00 00 00       	mov    ebp,0x1
c0011372:	31 c9                	xor    ecx,ecx
c0011374:	09 ea                	or     edx,ebp
c0011376:	89 c8                	mov    eax,ecx
c0011378:	89 13                	mov    DWORD PTR [ebx],edx
c001137a:	83 c4 0c             	add    esp,0xc
c001137d:	5b                   	pop    ebx
c001137e:	5e                   	pop    esi
c001137f:	5f                   	pop    edi
c0011380:	5d                   	pop    ebp
c0011381:	c3                   	ret    

c0011382 <Virt::virtualMemorySetup()>:
c0011382:	53                   	push   ebx
c0011383:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011388:	6a 0f                	push   0xf
c001138a:	53                   	push   ebx
c001138b:	43                   	inc    ebx
c001138c:	e8 d9 fd ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011391:	58                   	pop    eax
c0011392:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011398:	5a                   	pop    edx
c0011399:	75 ed                	jne    c0011388 <Virt::virtualMemorySetup()+0x6>
c001139b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113a0:	6a 00                	push   0x0
c00113a2:	53                   	push   ebx
c00113a3:	43                   	inc    ebx
c00113a4:	e8 c1 fd ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a9:	59                   	pop    ecx
c00113aa:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113b0:	58                   	pop    eax
c00113b1:	75 ed                	jne    c00113a0 <Virt::virtualMemorySetup()+0x1e>
c00113b3:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113b8:	6a 0f                	push   0xf
c00113ba:	53                   	push   ebx
c00113bb:	43                   	inc    ebx
c00113bc:	e8 a9 fd ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c1:	58                   	pop    eax
c00113c2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113c8:	5a                   	pop    edx
c00113c9:	75 ed                	jne    c00113b8 <Virt::virtualMemorySetup()+0x36>
c00113cb:	5b                   	pop    ebx
c00113cc:	c3                   	ret    

c00113cd <Virt::setupPageSwapping(int)>:
c00113cd:	57                   	push   edi
c00113ce:	56                   	push   esi
c00113cf:	53                   	push   ebx
c00113d0:	83 ec 1c             	sub    esp,0x1c
c00113d3:	68 14 01 00 00       	push   0x114
c00113d8:	e8 bc e1 ff ff       	call   c000f599 <malloc>
c00113dd:	83 c4 0c             	add    esp,0xc
c00113e0:	89 c6                	mov    esi,eax
c00113e2:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c00113e8:	68 ea a2 02 c0       	push   0xc002a2ea
c00113ed:	50                   	push   eax
c00113ee:	e8 45 17 00 00       	call   c0012b38 <File::File(char const*, Process*)>
c00113f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f6:	e8 19 19 00 00       	call   c0012d14 <File::unlink()>
c00113fb:	58                   	pop    eax
c00113fc:	5a                   	pop    edx
c00113fd:	6a 12                	push   0x12
c00113ff:	56                   	push   esi
c0011400:	e8 97 17 00 00       	call   c0012b9c <File::open(FileOpenMode)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	85 c0                	test   eax,eax
c001140a:	0f 85 2f 01 00 00    	jne    c001153f <Virt::setupPageSwapping(int)+0x172>
c0011410:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011414:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001141c:	c1 e3 08             	shl    ebx,0x8
c001141f:	83 ec 0c             	sub    esp,0xc
c0011422:	68 00 00 01 00       	push   0x10000
c0011427:	e8 6d e1 ff ff       	call   c000f599 <malloc>
c001142c:	83 c4 0c             	add    esp,0xc
c001142f:	89 c7                	mov    edi,eax
c0011431:	68 00 00 01 00       	push   0x10000
c0011436:	68 ee 00 00 00       	push   0xee
c001143b:	50                   	push   eax
c001143c:	e8 0f f3 fe ff       	call   c0000750 <memset>
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	85 db                	test   ebx,ebx
c0011446:	79 03                	jns    c001144b <Virt::setupPageSwapping(int)+0x7e>
c0011448:	83 c3 0f             	add    ebx,0xf
c001144b:	c1 fb 04             	sar    ebx,0x4
c001144e:	4b                   	dec    ebx
c001144f:	83 fb ff             	cmp    ebx,0xffffffff
c0011452:	74 41                	je     c0011495 <Virt::setupPageSwapping(int)+0xc8>
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	8b 06                	mov    eax,DWORD PTR [esi]
c0011459:	8d 54 24 18          	lea    edx,[esp+0x18]
c001145d:	52                   	push   edx
c001145e:	57                   	push   edi
c001145f:	6a 00                	push   0x0
c0011461:	68 00 00 01 00       	push   0x10000
c0011466:	56                   	push   esi
c0011467:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001146a:	83 c4 20             	add    esp,0x20
c001146d:	85 c0                	test   eax,eax
c001146f:	0f 85 b5 00 00 00    	jne    c001152a <Virt::setupPageSwapping(int)+0x15d>
c0011475:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c001147d:	74 cf                	je     c001144e <Virt::setupPageSwapping(int)+0x81>
c001147f:	83 ec 0c             	sub    esp,0xc
c0011482:	4b                   	dec    ebx
c0011483:	68 1c a3 02 c0       	push   0xc002a31c
c0011488:	e8 b8 88 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c001148d:	83 c4 10             	add    esp,0x10
c0011490:	83 fb ff             	cmp    ebx,0xffffffff
c0011493:	75 bf                	jne    c0011454 <Virt::setupPageSwapping(int)+0x87>
c0011495:	83 ec 0c             	sub    esp,0xc
c0011498:	56                   	push   esi
c0011499:	e8 5c 17 00 00       	call   c0012bfa <File::close()>
c001149e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114a1:	e8 13 e1 ff ff       	call   c000f5b9 <rfree>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	85 f6                	test   esi,esi
c00114ab:	74 0c                	je     c00114b9 <Virt::setupPageSwapping(int)+0xec>
c00114ad:	83 ec 0c             	sub    esp,0xc
c00114b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b2:	56                   	push   esi
c00114b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114b6:	83 c4 10             	add    esp,0x10
c00114b9:	83 ec 08             	sub    esp,0x8
c00114bc:	a1 48 dd 02 c0       	mov    eax,ds:0xc002dd48
c00114c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00114c9:	68 ea a2 02 c0       	push   0xc002a2ea
c00114ce:	50                   	push   eax
c00114cf:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d6:	c6 05 f8 c6 02 c0 43 	mov    BYTE PTR ds:0xc002c6f8,0x43
c00114dd:	c1 e2 0b             	shl    edx,0xb
c00114e0:	a3 f4 c6 02 c0       	mov    ds:0xc002c6f4,eax
c00114e5:	89 15 f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,edx
c00114eb:	c7 05 ec c6 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c6ec,0x8
c00114f5:	c1 ea 08             	shr    edx,0x8
c00114f8:	89 14 24             	mov    DWORD PTR [esp],edx
c00114fb:	e8 99 e0 ff ff       	call   c000f599 <malloc>
c0011500:	83 c4 0c             	add    esp,0xc
c0011503:	89 c1                	mov    ecx,eax
c0011505:	a3 ac d8 02 c0       	mov    ds:0xc002d8ac,eax
c001150a:	31 d2                	xor    edx,edx
c001150c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0011511:	f7 35 ec c6 02 c0    	div    DWORD PTR ds:0xc002c6ec
c0011517:	c1 e8 05             	shr    eax,0x5
c001151a:	50                   	push   eax
c001151b:	6a 00                	push   0x0
c001151d:	51                   	push   ecx
c001151e:	e8 2d f2 fe ff       	call   c0000750 <memset>
c0011523:	83 c4 20             	add    esp,0x20
c0011526:	5b                   	pop    ebx
c0011527:	5e                   	pop    esi
c0011528:	5f                   	pop    edi
c0011529:	c3                   	ret    
c001152a:	83 ec 0c             	sub    esp,0xc
c001152d:	68 1c a3 02 c0       	push   0xc002a31c
c0011532:	e8 0e 88 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0011537:	83 c4 10             	add    esp,0x10
c001153a:	e9 36 ff ff ff       	jmp    c0011475 <Virt::setupPageSwapping(int)+0xa8>
c001153f:	83 ec 0c             	sub    esp,0xc
c0011542:	68 01 a3 02 c0       	push   0xc002a301
c0011547:	e8 f9 87 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c001154c:	83 c4 10             	add    esp,0x10
c001154f:	e9 bc fe ff ff       	jmp    c0011410 <Virt::setupPageSwapping(int)+0x43>

c0011554 <VAS::VAS()>:
c0011554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011558:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001155f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011563:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001156a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001156e:	a3 b0 d8 02 c0       	mov    ds:0xc002d8b0,eax
c0011573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011577:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001157b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011586:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001158d:	90                   	nop
c001158e:	c3                   	ret    
c001158f:	90                   	nop

c0011590 <VAS::VAS(VAS*)>:
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011597:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001159e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115a9:	83 ec 0c             	sub    esp,0xc
c00115ac:	68 6c a1 02 c0       	push   0xc002a16c
c00115b1:	e8 8f 87 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	90                   	nop
c00115ba:	83 c4 0c             	add    esp,0xc
c00115bd:	c3                   	ret    

c00115be <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115c2:	89 c2                	mov    edx,eax
c00115c4:	c1 e8 0a             	shr    eax,0xa
c00115c7:	c1 ea 16             	shr    edx,0x16
c00115ca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115cf:	19 c9                	sbb    ecx,ecx
c00115d1:	c1 e2 0c             	shl    edx,0xc
c00115d4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115da:	25 fc 0f 00 00       	and    eax,0xffc
c00115df:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115e6:	01 d0                	add    eax,edx
c00115e8:	c3                   	ret    
c00115e9:	90                   	nop

c00115ea <VAS::getPageTableEntry(unsigned long)>:
c00115ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115ee:	89 ca                	mov    edx,ecx
c00115f0:	c1 e9 0a             	shr    ecx,0xa
c00115f3:	c1 ea 16             	shr    edx,0x16
c00115f6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115fc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011602:	c1 e0 0c             	shl    eax,0xc
c0011605:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011608:	c3                   	ret    

c0011609 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011609:	57                   	push   edi
c001160a:	56                   	push   esi
c001160b:	be 01 00 00 00       	mov    esi,0x1
c0011610:	53                   	push   ebx
c0011611:	83 ec 10             	sub    esp,0x10
c0011614:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011618:	c1 eb 0c             	shr    ebx,0xc
c001161b:	eb 3f                	jmp    c001165c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001161d:	83 ec 08             	sub    esp,0x8
c0011620:	57                   	push   edi
c0011621:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c0011627:	e8 be ff ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011631:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011635:	f6 c4 04             	test   ah,0x4
c0011638:	75 5f                	jne    c0011699 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001163a:	80 fa 04             	cmp    dl,0x4
c001163d:	74 78                	je     c00116b7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001163f:	80 fa 02             	cmp    dl,0x2
c0011642:	0f 84 88 00 00 00    	je     c00116d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011648:	80 fa 03             	cmp    dl,0x3
c001164b:	0f 84 ad 00 00 00    	je     c00116fe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011651:	fe ca                	dec    dl
c0011653:	0f 84 92 00 00 00    	je     c00116eb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011659:	43                   	inc    ebx
c001165a:	31 f6                	xor    esi,esi
c001165c:	53                   	push   ebx
c001165d:	89 df                	mov    edi,ebx
c001165f:	e8 3b fb ff ff       	call   c001119f <Virt::getPageState(unsigned long)>
c0011664:	c1 e7 0c             	shl    edi,0xc
c0011667:	59                   	pop    ecx
c0011668:	84 c0                	test   al,al
c001166a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001166e:	75 ad                	jne    c001161d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	68 22 a3 02 c0       	push   0xc002a322
c0011678:	e8 c8 86 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c001167d:	58                   	pop    eax
c001167e:	5a                   	pop    edx
c001167f:	57                   	push   edi
c0011680:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c0011686:	e8 5f ff ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011690:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011694:	f6 c4 04             	test   ah,0x4
c0011697:	74 c0                	je     c0011659 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011699:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001169d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116a2:	83 ec 0c             	sub    esp,0xc
c00116a5:	50                   	push   eax
c00116a6:	e8 37 e2 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c00116ab:	83 c4 10             	add    esp,0x10
c00116ae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116b2:	80 fa 04             	cmp    dl,0x4
c00116b5:	75 88                	jne    c001163f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116b7:	89 f0                	mov    eax,esi
c00116b9:	84 c0                	test   al,al
c00116bb:	75 47                	jne    c0011704 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116bd:	c7 44 24 20 90 a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a190
c00116c5:	83 c4 10             	add    esp,0x10
c00116c8:	5b                   	pop    ebx
c00116c9:	5e                   	pop    esi
c00116ca:	5f                   	pop    edi
c00116cb:	e9 75 86 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c00116d0:	89 f0                	mov    eax,esi
c00116d2:	84 c0                	test   al,al
c00116d4:	75 15                	jne    c00116eb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116d6:	83 ec 0c             	sub    esp,0xc
c00116d9:	68 3e a3 02 c0       	push   0xc002a33e
c00116de:	e8 62 86 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00116e3:	83 c4 10             	add    esp,0x10
c00116e6:	e9 6e ff ff ff       	jmp    c0011659 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116eb:	83 ec 08             	sub    esp,0x8
c00116ee:	6a 00                	push   0x0
c00116f0:	53                   	push   ebx
c00116f1:	e8 74 fa ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f6:	83 c4 10             	add    esp,0x10
c00116f9:	e9 5b ff ff ff       	jmp    c0011659 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116fe:	89 f0                	mov    eax,esi
c0011700:	84 c0                	test   al,al
c0011702:	75 15                	jne    c0011719 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011704:	83 ec 08             	sub    esp,0x8
c0011707:	6a 00                	push   0x0
c0011709:	53                   	push   ebx
c001170a:	e8 5b fa ff ff       	call   c001116a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001170f:	83 c4 10             	add    esp,0x10
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	5b                   	pop    ebx
c0011716:	5e                   	pop    esi
c0011717:	5f                   	pop    edi
c0011718:	c3                   	ret    
c0011719:	c7 44 24 20 5a a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a35a
c0011721:	83 c4 10             	add    esp,0x10
c0011724:	5b                   	pop    ebx
c0011725:	5e                   	pop    esi
c0011726:	5f                   	pop    edi
c0011727:	e9 19 86 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>

c001172c <VAS::freeAllocatedPages(unsigned long)>:
c001172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011734:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011738:	74 09                	je     c0011743 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001173a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001173e:	e9 c6 fe ff ff       	jmp    c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c0011743:	c7 44 24 04 b4 a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a1b4
c001174b:	e9 89 0e 00 00       	jmp    c00125d9 <Dbg::kprintf(char const*, ...)>

c0011750 <VAS::virtualToPhysical(unsigned long)>:
c0011750:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011754:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011758:	e8 8d fe ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c001175d:	5a                   	pop    edx
c001175e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011760:	59                   	pop    ecx
c0011761:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011766:	c3                   	ret    
c0011767:	90                   	nop

c0011768 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011768:	55                   	push   ebp
c0011769:	57                   	push   edi
c001176a:	56                   	push   esi
c001176b:	53                   	push   ebx
c001176c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011770:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011774:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011778:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001177c:	85 db                	test   ebx,ebx
c001177e:	7e 22                	jle    c00117a2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011780:	c1 e3 0c             	shl    ebx,0xc
c0011783:	01 f3                	add    ebx,esi
c0011785:	56                   	push   esi
c0011786:	81 c6 00 10 00 00    	add    esi,0x1000
c001178c:	55                   	push   ebp
c001178d:	e8 58 fe ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c0011792:	5a                   	pop    edx
c0011793:	59                   	pop    ecx
c0011794:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011796:	21 f9                	and    ecx,edi
c0011798:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001179c:	39 f3                	cmp    ebx,esi
c001179e:	89 08                	mov    DWORD PTR [eax],ecx
c00117a0:	75 e3                	jne    c0011785 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117a2:	5b                   	pop    ebx
c00117a3:	5e                   	pop    esi
c00117a4:	5f                   	pop    edi
c00117a5:	5d                   	pop    ebp
c00117a6:	c3                   	ret    
c00117a7:	90                   	nop

c00117a8 <VAS::setToWriteCombining(unsigned long, int)>:
c00117a8:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00117ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117b3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117ba:	75 01                	jne    c00117bd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117bc:	c3                   	ret    
c00117bd:	68 80 00 00 00       	push   0x80
c00117c2:	6a ff                	push   0xffffffff
c00117c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117d0:	e8 93 ff ff ff       	call   c0011768 <VAS::reflagRange(unsigned long, int, int, int)>
c00117d5:	83 c4 14             	add    esp,0x14
c00117d8:	c3                   	ret    
c00117d9:	90                   	nop

c00117da <VAS::mapOtherVASIn(bool, VAS*)>:
c00117da:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ea:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117ed:	19 c0                	sbb    eax,eax
c00117ef:	83 ca 03             	or     edx,0x3
c00117f2:	83 e0 fc             	and    eax,0xfffffffc
c00117f5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117fc:	0f 20 d8             	mov    eax,cr3
c00117ff:	0f 22 d8             	mov    cr3,eax
c0011802:	c3                   	ret    
c0011803:	90                   	nop

c0011804 <VAS::~VAS()>:
c0011804:	83 ec 2c             	sub    esp,0x2c
c0011807:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001180f:	fa                   	cli    
c0011810:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0011815:	40                   	inc    eax
c0011816:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001181b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011820:	8b 00                	mov    eax,DWORD PTR [eax]
c0011822:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011825:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001182b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001182f:	6a 01                	push   0x1
c0011831:	50                   	push   eax
c0011832:	e8 a3 ff ff ff       	call   c00117da <VAS::mapOtherVASIn(bool, VAS*)>
c0011837:	83 c4 0c             	add    esp,0xc
c001183a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011842:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001184a:	0f 8f d4 00 00 00    	jg     c0011924 <VAS::~VAS()+0x120>
c0011850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011854:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011857:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001185b:	c1 e2 02             	shl    edx,0x2
c001185e:	01 d0                	add    eax,edx
c0011860:	8b 00                	mov    eax,DWORD PTR [eax]
c0011862:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186a:	83 e0 01             	and    eax,0x1
c001186d:	0f 84 a8 00 00 00    	je     c001191b <VAS::~VAS()+0x117>
c0011873:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001187b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011883:	7f 72                	jg     c00118f7 <VAS::~VAS()+0xf3>
c0011885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011889:	c1 e0 0a             	shl    eax,0xa
c001188c:	89 c2                	mov    edx,eax
c001188e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011892:	01 d0                	add    eax,edx
c0011894:	c1 e0 0c             	shl    eax,0xc
c0011897:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001189b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118af:	6a 01                	push   0x1
c00118b1:	50                   	push   eax
c00118b2:	e8 07 fd ff ff       	call   c00115be <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118b7:	83 c4 0c             	add    esp,0xc
c00118ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118cc:	25 01 04 00 00       	and    eax,0x401
c00118d1:	3d 01 04 00 00       	cmp    eax,0x401
c00118d6:	75 19                	jne    c00118f1 <VAS::~VAS()+0xed>
c00118d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e1:	83 ec 0c             	sub    esp,0xc
c00118e4:	50                   	push   eax
c00118e5:	e8 f8 df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c00118ea:	83 c4 10             	add    esp,0x10
c00118ed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118f5:	eb 84                	jmp    c001187b <VAS::~VAS()+0x77>
c00118f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fb:	25 00 04 00 00       	and    eax,0x400
c0011900:	74 19                	je     c001191b <VAS::~VAS()+0x117>
c0011902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011906:	25 00 f0 ff ff       	and    eax,0xfffff000
c001190b:	83 ec 0c             	sub    esp,0xc
c001190e:	50                   	push   eax
c001190f:	e8 ce df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c0011914:	83 c4 10             	add    esp,0x10
c0011917:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001191b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001191f:	e9 1e ff ff ff       	jmp    c0011842 <VAS::~VAS()+0x3e>
c0011924:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011928:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001192b:	83 ec 0c             	sub    esp,0xc
c001192e:	50                   	push   eax
c001192f:	e8 d5 fc ff ff       	call   c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001193b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001193e:	83 ec 0c             	sub    esp,0xc
c0011941:	50                   	push   eax
c0011942:	e8 9b df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001194e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011952:	c1 e0 02             	shl    eax,0x2
c0011955:	83 ec 08             	sub    esp,0x8
c0011958:	50                   	push   eax
c0011959:	68 d8 a1 02 c0       	push   0xc002a1d8
c001195e:	e8 76 0c 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0011963:	83 c4 10             	add    esp,0x10
c0011966:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001196b:	48                   	dec    eax
c001196c:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0011971:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0011976:	85 c0                	test   eax,eax
c0011978:	75 01                	jne    c001197b <VAS::~VAS()+0x177>
c001197a:	fb                   	sti    
c001197b:	90                   	nop
c001197c:	83 c4 2c             	add    esp,0x2c
c001197f:	c3                   	ret    

c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011980:	55                   	push   ebp
c0011981:	57                   	push   edi
c0011982:	56                   	push   esi
c0011983:	53                   	push   ebx
c0011984:	83 ec 1c             	sub    esp,0x1c
c0011987:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001198b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001198f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011995:	77 08                	ja     c001199f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011997:	0f 20 d8             	mov    eax,cr3
c001199a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001199d:	75 47                	jne    c00119e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001199f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119a3:	09 d8                	or     eax,ebx
c00119a5:	a9 ff 0f 00 00       	test   eax,0xfff
c00119aa:	75 57                	jne    c0011a03 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119ac:	89 de                	mov    esi,ebx
c00119ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119b1:	c1 ee 16             	shr    esi,0x16
c00119b4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119bb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119bf:	74 54                	je     c0011a15 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119c5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119cf:	c1 e6 0c             	shl    esi,0xc
c00119d2:	c1 eb 0a             	shr    ebx,0xa
c00119d5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119db:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119de:	83 c4 1c             	add    esp,0x1c
c00119e1:	5b                   	pop    ebx
c00119e2:	5e                   	pop    esi
c00119e3:	5f                   	pop    edi
c00119e4:	5d                   	pop    ebp
c00119e5:	c3                   	ret    
c00119e6:	83 ec 0c             	sub    esp,0xc
c00119e9:	68 f8 a1 02 c0       	push   0xc002a1f8
c00119ee:	e8 e6 0b 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00119f3:	83 c4 10             	add    esp,0x10
c00119f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119fa:	09 d8                	or     eax,ebx
c00119fc:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a01:	74 a9                	je     c00119ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	68 60 a2 02 c0       	push   0xc002a260
c0011a0b:	e8 35 83 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	eb 97                	jmp    c00119ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a19:	e8 1f df ff ff       	call   c000f93d <Phys::allocatePage()>
c0011a1e:	83 ec 0c             	sub    esp,0xc
c0011a21:	89 c5                	mov    ebp,eax
c0011a23:	8b 0d b0 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8b0
c0011a29:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a2d:	6a 01                	push   0x1
c0011a2f:	e8 8f f7 ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0011a34:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a3b:	6a 01                	push   0x1
c0011a3d:	50                   	push   eax
c0011a3e:	55                   	push   ebp
c0011a3f:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a49:	51                   	push   ecx
c0011a4a:	e8 27 02 00 00       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a4f:	83 c4 1c             	add    esp,0x1c
c0011a52:	68 00 10 00 00       	push   0x1000
c0011a57:	6a 00                	push   0x0
c0011a59:	50                   	push   eax
c0011a5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a5e:	e8 ed ec fe ff       	call   c0000750 <memset>
c0011a63:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a6a:	e8 9a fb ff ff       	call   c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a73:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a7c:	e9 40 ff ff ff       	jmp    c00119c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a81:	90                   	nop

c0011a82 <VAS::allocatePages(int, int)>:
c0011a82:	55                   	push   ebp
c0011a83:	57                   	push   edi
c0011a84:	56                   	push   esi
c0011a85:	53                   	push   ebx
c0011a86:	83 ec 1c             	sub    esp,0x1c
c0011a89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a8d:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011a92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a98:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a9e:	83 e0 01             	and    eax,0x1
c0011aa1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011aa5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011aa9:	0f 85 cc 00 00 00    	jne    c0011b7b <VAS::allocatePages(int, int)+0xf9>
c0011aaf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ab6:	85 c0                	test   eax,eax
c0011ab8:	0f 84 a1 00 00 00    	je     c0011b5f <VAS::allocatePages(int, int)+0xdd>
c0011abe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ac2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ac6:	c1 e6 0c             	shl    esi,0xc
c0011ac9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011acd:	85 c0                	test   eax,eax
c0011acf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ad2:	7e 33                	jle    c0011b07 <VAS::allocatePages(int, int)+0x85>
c0011ad4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ad8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011adc:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ae2:	e8 56 de ff ff       	call   c000f93d <Phys::allocatePage()>
c0011ae7:	55                   	push   ebp
c0011ae8:	53                   	push   ebx
c0011ae9:	50                   	push   eax
c0011aea:	57                   	push   edi
c0011aeb:	e8 90 fe ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011af8:	74 03                	je     c0011afd <VAS::allocatePages(int, int)+0x7b>
c0011afa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011afd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b03:	39 de                	cmp    esi,ebx
c0011b05:	75 db                	jne    c0011ae2 <VAS::allocatePages(int, int)+0x60>
c0011b07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b0c:	75 12                	jne    c0011b20 <VAS::allocatePages(int, int)+0x9e>
c0011b0e:	0f 20 d8             	mov    eax,cr3
c0011b11:	0f 22 d8             	mov    cr3,eax
c0011b14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b18:	83 c4 1c             	add    esp,0x1c
c0011b1b:	5b                   	pop    ebx
c0011b1c:	5e                   	pop    esi
c0011b1d:	5f                   	pop    edi
c0011b1e:	5d                   	pop    ebp
c0011b1f:	c3                   	ret    
c0011b20:	c1 ee 0a             	shr    esi,0xa
c0011b23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b27:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b2d:	c1 eb 0a             	shr    ebx,0xa
c0011b30:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b36:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b3c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b42:	39 c3                	cmp    ebx,eax
c0011b44:	77 ce                	ja     c0011b14 <VAS::allocatePages(int, int)+0x92>
c0011b46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b4f:	39 d8                	cmp    eax,ebx
c0011b51:	73 f3                	jae    c0011b46 <VAS::allocatePages(int, int)+0xc4>
c0011b53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b57:	83 c4 1c             	add    esp,0x1c
c0011b5a:	5b                   	pop    ebx
c0011b5b:	5e                   	pop    esi
c0011b5c:	5f                   	pop    edi
c0011b5d:	5d                   	pop    ebp
c0011b5e:	c3                   	ret    
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	68 84 a2 02 c0       	push   0xc002a284
c0011b67:	e8 d9 81 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0011b6c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	e9 43 ff ff ff       	jmp    c0011abe <VAS::allocatePages(int, int)+0x3c>
c0011b7b:	83 ec 0c             	sub    esp,0xc
c0011b7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b82:	e8 3c f6 ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0011b87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b8b:	83 c4 10             	add    esp,0x10
c0011b8e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b93:	0f 87 9b 00 00 00    	ja     c0011c34 <VAS::allocatePages(int, int)+0x1b2>
c0011b99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b9d:	85 d2                	test   edx,edx
c0011b9f:	7e 3c                	jle    c0011bdd <VAS::allocatePages(int, int)+0x15b>
c0011ba1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ba5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ba9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bad:	c1 e5 0c             	shl    ebp,0xc
c0011bb0:	81 ce 00 04 00 00    	or     esi,0x400
c0011bb6:	01 dd                	add    ebp,ebx
c0011bb8:	e8 80 dd ff ff       	call   c000f93d <Phys::allocatePage()>
c0011bbd:	56                   	push   esi
c0011bbe:	53                   	push   ebx
c0011bbf:	50                   	push   eax
c0011bc0:	57                   	push   edi
c0011bc1:	e8 ba fd ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bc6:	83 c4 10             	add    esp,0x10
c0011bc9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bce:	74 03                	je     c0011bd3 <VAS::allocatePages(int, int)+0x151>
c0011bd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bd9:	39 dd                	cmp    ebp,ebx
c0011bdb:	75 db                	jne    c0011bb8 <VAS::allocatePages(int, int)+0x136>
c0011bdd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011be2:	0f 84 26 ff ff ff    	je     c0011b0e <VAS::allocatePages(int, int)+0x8c>
c0011be8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bf0:	89 d3                	mov    ebx,edx
c0011bf2:	c1 e0 0c             	shl    eax,0xc
c0011bf5:	c1 eb 0a             	shr    ebx,0xa
c0011bf8:	01 d0                	add    eax,edx
c0011bfa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c00:	c1 e8 0a             	shr    eax,0xa
c0011c03:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c09:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c0e:	2d 00 00 40 00       	sub    eax,0x400000
c0011c13:	39 c3                	cmp    ebx,eax
c0011c15:	0f 87 f9 fe ff ff    	ja     c0011b14 <VAS::allocatePages(int, int)+0x92>
c0011c1b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c1e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c24:	39 d8                	cmp    eax,ebx
c0011c26:	73 f3                	jae    c0011c1b <VAS::allocatePages(int, int)+0x199>
c0011c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2c:	83 c4 1c             	add    esp,0x1c
c0011c2f:	5b                   	pop    ebx
c0011c30:	5e                   	pop    esi
c0011c31:	5f                   	pop    edi
c0011c32:	5d                   	pop    ebp
c0011c33:	c3                   	ret    
c0011c34:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011c39:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c3f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c46:	0f 84 4d ff ff ff    	je     c0011b99 <VAS::allocatePages(int, int)+0x117>
c0011c4c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c54:	e9 40 ff ff ff       	jmp    c0011b99 <VAS::allocatePages(int, int)+0x117>
c0011c59:	90                   	nop

c0011c5a <VAS::setCPUSpecific(unsigned long)>:
c0011c5a:	83 ec 0c             	sub    esp,0xc
c0011c5d:	6a 05                	push   0x5
c0011c5f:	68 00 00 40 c2       	push   0xc2400000
c0011c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c6c:	e8 0f fd ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c71:	83 c4 1c             	add    esp,0x1c
c0011c74:	c3                   	ret    
c0011c75:	90                   	nop

c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c76:	55                   	push   ebp
c0011c77:	57                   	push   edi
c0011c78:	56                   	push   esi
c0011c79:	53                   	push   ebx
c0011c7a:	83 ec 1c             	sub    esp,0x1c
c0011c7d:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011c82:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c8c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c90:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c96:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c9a:	83 e0 01             	and    eax,0x1
c0011c9d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ca1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ca5:	85 c0                	test   eax,eax
c0011ca7:	7e 39                	jle    c0011ce2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011ca9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cad:	89 f3                	mov    ebx,esi
c0011caf:	c1 e0 0c             	shl    eax,0xc
c0011cb2:	01 f0                	add    eax,esi
c0011cb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cb8:	55                   	push   ebp
c0011cb9:	53                   	push   ebx
c0011cba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cbe:	29 f0                	sub    eax,esi
c0011cc0:	01 d8                	add    eax,ebx
c0011cc2:	50                   	push   eax
c0011cc3:	57                   	push   edi
c0011cc4:	e8 b7 fc ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cc9:	83 c4 10             	add    esp,0x10
c0011ccc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd1:	74 03                	je     c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cd3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cdc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ce0:	75 d6                	jne    c0011cb8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011ce2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ce7:	75 10                	jne    c0011cf9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ce9:	0f 20 d8             	mov    eax,cr3
c0011cec:	0f 22 d8             	mov    cr3,eax
c0011cef:	83 c4 1c             	add    esp,0x1c
c0011cf2:	89 f0                	mov    eax,esi
c0011cf4:	5b                   	pop    ebx
c0011cf5:	5e                   	pop    esi
c0011cf6:	5f                   	pop    edi
c0011cf7:	5d                   	pop    ebp
c0011cf8:	c3                   	ret    
c0011cf9:	89 f3                	mov    ebx,esi
c0011cfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cff:	c1 eb 0a             	shr    ebx,0xa
c0011d02:	c1 e0 0c             	shl    eax,0xc
c0011d05:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d0b:	01 f0                	add    eax,esi
c0011d0d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d13:	c1 e8 0a             	shr    eax,0xa
c0011d16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d1b:	2d 00 00 40 00       	sub    eax,0x400000
c0011d20:	39 c3                	cmp    ebx,eax
c0011d22:	77 cb                	ja     c0011cef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d2d:	39 d8                	cmp    eax,ebx
c0011d2f:	73 f3                	jae    c0011d24 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d31:	83 c4 1c             	add    esp,0x1c
c0011d34:	89 f0                	mov    eax,esi
c0011d36:	5b                   	pop    ebx
c0011d37:	5e                   	pop    esi
c0011d38:	5f                   	pop    edi
c0011d39:	5d                   	pop    ebp
c0011d3a:	c3                   	ret    
c0011d3b:	90                   	nop

c0011d3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d3c:	55                   	push   ebp
c0011d3d:	57                   	push   edi
c0011d3e:	56                   	push   esi
c0011d3f:	53                   	push   ebx
c0011d40:	83 ec 1c             	sub    esp,0x1c
c0011d43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d47:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d4b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d53:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d58:	75 4a                	jne    c0011da4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d5a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d5e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d61:	c1 eb 16             	shr    ebx,0x16
c0011d64:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d6b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d6f:	74 4d                	je     c0011dbe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d75:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d79:	c1 e8 0a             	shr    eax,0xa
c0011d7c:	80 fa 01             	cmp    dl,0x1
c0011d7f:	19 d2                	sbb    edx,edx
c0011d81:	c1 e3 0c             	shl    ebx,0xc
c0011d84:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d88:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d8e:	25 fc 0f 00 00       	and    eax,0xffc
c0011d93:	01 d8                	add    eax,ebx
c0011d95:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d9c:	83 c4 1c             	add    esp,0x1c
c0011d9f:	5b                   	pop    ebx
c0011da0:	5e                   	pop    esi
c0011da1:	5f                   	pop    edi
c0011da2:	5d                   	pop    ebp
c0011da3:	c3                   	ret    
c0011da4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011da8:	83 ec 0c             	sub    esp,0xc
c0011dab:	68 b0 a2 02 c0       	push   0xc002a2b0
c0011db0:	e8 90 7f 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dbc:	eb 9c                	jmp    c0011d5a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011dbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dc2:	e8 76 db ff ff       	call   c000f93d <Phys::allocatePage()>
c0011dc7:	83 ec 0c             	sub    esp,0xc
c0011dca:	89 c5                	mov    ebp,eax
c0011dcc:	8b 0d b0 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8b0
c0011dd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dd6:	6a 01                	push   0x1
c0011dd8:	e8 e6 f3 ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0011ddd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011de4:	6a 01                	push   0x1
c0011de6:	50                   	push   eax
c0011de7:	55                   	push   ebp
c0011de8:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011df2:	51                   	push   ecx
c0011df3:	e8 7e fe ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011df8:	83 c4 1c             	add    esp,0x1c
c0011dfb:	68 00 10 00 00       	push   0x1000
c0011e00:	6a 00                	push   0x0
c0011e02:	50                   	push   eax
c0011e03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e07:	e8 44 e9 fe ff       	call   c0000750 <memset>
c0011e0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e10:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e13:	e8 f1 f7 ff ff       	call   c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e18:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e1b:	83 c4 10             	add    esp,0x10
c0011e1e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e25:	e9 47 ff ff ff       	jmp    c0011d71 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e2a <VAS::VAS(bool)>:
c0011e2a:	53                   	push   ebx
c0011e2b:	83 ec 28             	sub    esp,0x28
c0011e2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e32:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e50:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e54:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e57:	e8 e1 da ff ff       	call   c000f93d <Phys::allocatePage()>
c0011e5c:	89 c2                	mov    edx,eax
c0011e5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e62:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e65:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c0011e6b:	83 ec 0c             	sub    esp,0xc
c0011e6e:	6a 01                	push   0x1
c0011e70:	e8 4e f3 ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	89 c2                	mov    edx,eax
c0011e7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e81:	83 ec 0c             	sub    esp,0xc
c0011e84:	6a 03                	push   0x3
c0011e86:	6a 01                	push   0x1
c0011e88:	52                   	push   edx
c0011e89:	50                   	push   eax
c0011e8a:	53                   	push   ebx
c0011e8b:	e8 e6 fd ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e90:	83 c4 20             	add    esp,0x20
c0011e93:	89 c2                	mov    edx,eax
c0011e95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e9c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ea4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011eac:	7f 1c                	jg     c0011eca <VAS::VAS(bool)+0xa0>
c0011eae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011eb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011eb9:	c1 e2 02             	shl    edx,0x2
c0011ebc:	01 d0                	add    eax,edx
c0011ebe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ec4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ec8:	eb da                	jmp    c0011ea4 <VAS::VAS(bool)+0x7a>
c0011eca:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011ed2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eda:	7f 7a                	jg     c0011f56 <VAS::VAS(bool)+0x12c>
c0011edc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee0:	2d 00 02 00 00       	sub    eax,0x200
c0011ee5:	c1 e0 0c             	shl    eax,0xc
c0011ee8:	83 c8 03             	or     eax,0x3
c0011eeb:	89 c2                	mov    edx,eax
c0011eed:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011ef2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ef8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011efe:	83 e0 10             	and    eax,0x10
c0011f01:	84 c0                	test   al,al
c0011f03:	74 07                	je     c0011f0c <VAS::VAS(bool)+0xe2>
c0011f05:	b8 00 01 00 00       	mov    eax,0x100
c0011f0a:	eb 05                	jmp    c0011f11 <VAS::VAS(bool)+0xe7>
c0011f0c:	b8 00 00 00 00       	mov    eax,0x0
c0011f11:	09 d0                	or     eax,edx
c0011f13:	89 c1                	mov    ecx,eax
c0011f15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f20:	c1 e2 02             	shl    edx,0x2
c0011f23:	01 d0                	add    eax,edx
c0011f25:	89 ca                	mov    edx,ecx
c0011f27:	89 10                	mov    DWORD PTR [eax],edx
c0011f29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f2d:	2d 40 03 00 00       	sub    eax,0x340
c0011f32:	83 f8 7f             	cmp    eax,0x7f
c0011f35:	77 16                	ja     c0011f4d <VAS::VAS(bool)+0x123>
c0011f37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f42:	c1 e2 02             	shl    edx,0x2
c0011f45:	01 d0                	add    eax,edx
c0011f47:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f4d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f51:	e9 7c ff ff ff       	jmp    c0011ed2 <VAS::VAS(bool)+0xa8>
c0011f56:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011f5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f61:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f67:	83 e0 10             	and    eax,0x10
c0011f6a:	84 c0                	test   al,al
c0011f6c:	74 07                	je     c0011f75 <VAS::VAS(bool)+0x14b>
c0011f6e:	b8 03 41 00 00       	mov    eax,0x4103
c0011f73:	eb 05                	jmp    c0011f7a <VAS::VAS(bool)+0x150>
c0011f75:	b8 03 40 00 00       	mov    eax,0x4003
c0011f7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f7e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f81:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f87:	89 02                	mov    DWORD PTR [edx],eax
c0011f89:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011f8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f94:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f9a:	83 ec 08             	sub    esp,0x8
c0011f9d:	50                   	push   eax
c0011f9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fa2:	e8 b3 fc ff ff       	call   c0011c5a <VAS::setCPUSpecific(unsigned long)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fb1:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011fb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fc2:	83 e0 10             	and    eax,0x10
c0011fc5:	84 c0                	test   al,al
c0011fc7:	74 07                	je     c0011fd0 <VAS::VAS(bool)+0x1a6>
c0011fc9:	b8 00 01 00 00       	mov    eax,0x100
c0011fce:	eb 05                	jmp    c0011fd5 <VAS::VAS(bool)+0x1ab>
c0011fd0:	b8 00 00 00 00       	mov    eax,0x0
c0011fd5:	09 c2                	or     edx,eax
c0011fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fdb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fde:	05 fc 0f 00 00       	add    eax,0xffc
c0011fe3:	83 ca 03             	or     edx,0x3
c0011fe6:	89 10                	mov    DWORD PTR [eax],edx
c0011fe8:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0011fed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ff3:	83 ec 0c             	sub    esp,0xc
c0011ff6:	50                   	push   eax
c0011ff7:	e8 16 1d 00 00       	call   c0013d12 <Device::getName()>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	83 ec 08             	sub    esp,0x8
c0012002:	68 74 a3 02 c0       	push   0xc002a374
c0012007:	50                   	push   eax
c0012008:	e8 8b e8 fe ff       	call   c0000898 <strcmp>
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	85 c0                	test   eax,eax
c0012012:	0f 94 c0             	sete   al
c0012015:	84 c0                	test   al,al
c0012017:	0f 84 87 00 00 00    	je     c00120a4 <VAS::VAS(bool)+0x27a>
c001201d:	fa                   	cli    
c001201e:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0012023:	40                   	inc    eax
c0012024:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0012029:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001202e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012034:	05 7c 09 00 00       	add    eax,0x97c
c0012039:	83 ec 0c             	sub    esp,0xc
c001203c:	50                   	push   eax
c001203d:	e8 dc cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012042:	83 c4 10             	add    esp,0x10
c0012045:	25 00 f0 ff ff       	and    eax,0xfffff000
c001204a:	89 c3                	mov    ebx,eax
c001204c:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0012051:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012057:	05 7c 09 00 00       	add    eax,0x97c
c001205c:	83 ec 0c             	sub    esp,0xc
c001205f:	50                   	push   eax
c0012060:	e8 b9 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	83 ec 08             	sub    esp,0x8
c001206b:	50                   	push   eax
c001206c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012070:	e8 75 f5 ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	8b 00                	mov    eax,DWORD PTR [eax]
c001207a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001207f:	6a 11                	push   0x11
c0012081:	53                   	push   ebx
c0012082:	50                   	push   eax
c0012083:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012087:	e8 f4 f8 ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c001208c:	83 c4 10             	add    esp,0x10
c001208f:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0012094:	48                   	dec    eax
c0012095:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001209a:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001209f:	85 c0                	test   eax,eax
c00120a1:	75 01                	jne    c00120a4 <VAS::VAS(bool)+0x27a>
c00120a3:	fb                   	sti    
c00120a4:	90                   	nop
c00120a5:	83 c4 28             	add    esp,0x28
c00120a8:	5b                   	pop    ebx
c00120a9:	c3                   	ret    

c00120aa <VAS::evict(unsigned long)>:
c00120aa:	55                   	push   ebp
c00120ab:	57                   	push   edi
c00120ac:	56                   	push   esi
c00120ad:	53                   	push   ebx
c00120ae:	83 ec 1c             	sub    esp,0x1c
c00120b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120bd:	e8 42 f2 ff ff       	call   c0011304 <Virt::allocateSwapfilePage()>
c00120c2:	89 c7                	mov    edi,eax
c00120c4:	a1 ec c6 02 c0       	mov    eax,ds:0xc002c6ec
c00120c9:	85 c0                	test   eax,eax
c00120cb:	7e 3d                	jle    c001210a <VAS::evict(unsigned long)+0x60>
c00120cd:	89 ee                	mov    esi,ebp
c00120cf:	31 db                	xor    ebx,ebx
c00120d1:	83 ec 0c             	sub    esp,0xc
c00120d4:	57                   	push   edi
c00120d5:	e8 18 f2 ff ff       	call   c00112f2 <Virt::swapIDToSector(unsigned long)>
c00120da:	89 34 24             	mov    DWORD PTR [esp],esi
c00120dd:	01 d8                	add    eax,ebx
c00120df:	6a 01                	push   0x1
c00120e1:	31 d2                	xor    edx,edx
c00120e3:	43                   	inc    ebx
c00120e4:	52                   	push   edx
c00120e5:	81 c6 00 02 00 00    	add    esi,0x200
c00120eb:	50                   	push   eax
c00120ec:	0f be 05 f8 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c6f8
c00120f3:	ff 34 85 3c dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd23c4]
c00120fa:	e8 9b 3e 00 00       	call   c0015f9a <LogicalDisk::write(unsigned long long, int, void*)>
c00120ff:	83 c4 20             	add    esp,0x20
c0012102:	39 1d ec c6 02 c0    	cmp    DWORD PTR ds:0xc002c6ec,ebx
c0012108:	7f c7                	jg     c00120d1 <VAS::evict(unsigned long)+0x27>
c001210a:	83 ec 08             	sub    esp,0x8
c001210d:	c1 e7 0b             	shl    edi,0xb
c0012110:	55                   	push   ebp
c0012111:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012115:	e8 d0 f4 ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c001211a:	83 c4 0c             	add    esp,0xc
c001211d:	8b 10                	mov    edx,DWORD PTR [eax]
c001211f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012125:	09 d7                	or     edi,edx
c0012127:	89 38                	mov    DWORD PTR [eax],edi
c0012129:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c001212e:	40                   	inc    eax
c001212f:	a3 a8 d8 02 c0       	mov    ds:0xc002d8a8,eax
c0012134:	0f 20 da             	mov    edx,cr3
c0012137:	0f 22 da             	mov    cr3,edx
c001213a:	50                   	push   eax
c001213b:	55                   	push   ebp
c001213c:	68 82 a3 02 c0       	push   0xc002a382
c0012141:	e8 93 04 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0012146:	a1 a4 d8 02 c0       	mov    eax,ds:0xc002d8a4
c001214b:	c7 44 24 40 97 a3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a397
c0012153:	8d 50 01             	lea    edx,[eax+0x1]
c0012156:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001215a:	89 15 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,edx
c0012160:	83 c4 2c             	add    esp,0x2c
c0012163:	5b                   	pop    ebx
c0012164:	5e                   	pop    esi
c0012165:	5f                   	pop    edi
c0012166:	5d                   	pop    ebp
c0012167:	e9 6d 04 00 00       	jmp    c00125d9 <Dbg::kprintf(char const*, ...)>

c001216c <VAS::tryLoadBackOffDisk(unsigned long)>:
c001216c:	55                   	push   ebp
c001216d:	57                   	push   edi
c001216e:	56                   	push   esi
c001216f:	53                   	push   ebx
c0012170:	83 ec 14             	sub    esp,0x14
c0012173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012177:	68 a8 a3 02 c0       	push   0xc002a3a8
c001217c:	e8 58 04 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0012181:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012185:	5e                   	pop    esi
c0012186:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001218c:	5f                   	pop    edi
c001218d:	53                   	push   ebx
c001218e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012192:	e8 53 f4 ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c0012197:	5d                   	pop    ebp
c0012198:	89 c6                	mov    esi,eax
c001219a:	5a                   	pop    edx
c001219b:	ff 30                	push   DWORD PTR [eax]
c001219d:	68 bb a3 02 c0       	push   0xc002a3bb
c00121a2:	e8 32 04 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	85 db                	test   ebx,ebx
c00121ac:	74 1c                	je     c00121ca <VAS::tryLoadBackOffDisk(unsigned long)+0x5e>
c00121ae:	8b 3e                	mov    edi,DWORD PTR [esi]
c00121b0:	31 c0                	xor    eax,eax
c00121b2:	89 fa                	mov    edx,edi
c00121b4:	81 e2 01 04 00 00    	and    edx,0x401
c00121ba:	81 fa 00 04 00 00    	cmp    edx,0x400
c00121c0:	74 12                	je     c00121d4 <VAS::tryLoadBackOffDisk(unsigned long)+0x68>
c00121c2:	83 c4 0c             	add    esp,0xc
c00121c5:	5b                   	pop    ebx
c00121c6:	5e                   	pop    esi
c00121c7:	5f                   	pop    edi
c00121c8:	5d                   	pop    ebp
c00121c9:	c3                   	ret    
c00121ca:	83 c4 0c             	add    esp,0xc
c00121cd:	31 c0                	xor    eax,eax
c00121cf:	5b                   	pop    ebx
c00121d0:	5e                   	pop    esi
c00121d1:	5f                   	pop    edi
c00121d2:	5d                   	pop    ebp
c00121d3:	c3                   	ret    
c00121d4:	e8 64 d7 ff ff       	call   c000f93d <Phys::allocatePage()>
c00121d9:	c1 ef 0b             	shr    edi,0xb
c00121dc:	83 ec 08             	sub    esp,0x8
c00121df:	89 c5                	mov    ebp,eax
c00121e1:	50                   	push   eax
c00121e2:	68 c9 a3 02 c0       	push   0xc002a3c9
c00121e7:	e8 ed 03 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00121ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00121ee:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00121f4:	09 ea                	or     edx,ebp
c00121f6:	81 ca 01 08 00 00    	or     edx,0x801
c00121fc:	89 16                	mov    DWORD PTR [esi],edx
c00121fe:	c7 04 24 d6 a3 02 c0 	mov    DWORD PTR [esp],0xc002a3d6
c0012205:	e8 cf 03 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	8b 0d ec c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ec
c0012213:	85 c9                	test   ecx,ecx
c0012215:	7e 3d                	jle    c0012254 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c0012217:	89 dd                	mov    ebp,ebx
c0012219:	31 f6                	xor    esi,esi
c001221b:	83 ec 0c             	sub    esp,0xc
c001221e:	57                   	push   edi
c001221f:	e8 ce f0 ff ff       	call   c00112f2 <Virt::swapIDToSector(unsigned long)>
c0012224:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012227:	01 f0                	add    eax,esi
c0012229:	6a 01                	push   0x1
c001222b:	31 d2                	xor    edx,edx
c001222d:	46                   	inc    esi
c001222e:	52                   	push   edx
c001222f:	81 c5 00 02 00 00    	add    ebp,0x200
c0012235:	50                   	push   eax
c0012236:	0f be 05 f8 c6 02 c0 	movsx  eax,BYTE PTR ds:0xc002c6f8
c001223d:	ff 34 85 3c dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd23c4]
c0012244:	e8 e5 3c 00 00       	call   c0015f2e <LogicalDisk::read(unsigned long long, int, void*)>
c0012249:	83 c4 20             	add    esp,0x20
c001224c:	39 35 ec c6 02 c0    	cmp    DWORD PTR ds:0xc002c6ec,esi
c0012252:	7f c7                	jg     c001221b <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c0012254:	a1 a8 d8 02 c0       	mov    eax,ds:0xc002d8a8
c0012259:	48                   	dec    eax
c001225a:	52                   	push   edx
c001225b:	a3 a8 d8 02 c0       	mov    ds:0xc002d8a8,eax
c0012260:	50                   	push   eax
c0012261:	53                   	push   ebx
c0012262:	68 e6 a3 02 c0       	push   0xc002a3e6
c0012267:	e8 6d 03 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001226c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001226f:	e8 60 f0 ff ff       	call   c00112d4 <Virt::freeSwapfilePage(unsigned long)>
c0012274:	c7 04 24 fb a3 02 c0 	mov    DWORD PTR [esp],0xc002a3fb
c001227b:	e8 59 03 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0012280:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0012285:	83 c4 10             	add    esp,0x10
c0012288:	48                   	dec    eax
c0012289:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001228e:	85 c0                	test   eax,eax
c0012290:	74 2d                	je     c00122bf <VAS::tryLoadBackOffDisk(unsigned long)+0x153>
c0012292:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012296:	25 ff 0f 00 00       	and    eax,0xfff
c001229b:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00122a0:	77 20                	ja     c00122c2 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>
c00122a2:	0f 20 d8             	mov    eax,cr3
c00122a5:	0f 22 d8             	mov    cr3,eax
c00122a8:	83 ec 0c             	sub    esp,0xc
c00122ab:	68 21 a4 02 c0       	push   0xc002a421
c00122b0:	e8 24 03 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00122b5:	83 c4 10             	add    esp,0x10
c00122b8:	b0 01                	mov    al,0x1
c00122ba:	e9 03 ff ff ff       	jmp    c00121c2 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c00122bf:	fb                   	sti    
c00122c0:	eb d0                	jmp    c0012292 <VAS::tryLoadBackOffDisk(unsigned long)+0x126>
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	68 11 a4 02 c0       	push   0xc002a411
c00122ca:	e8 0a 03 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	eb ce                	jmp    c00122a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x136>

c00122d4 <VAS::scanForEviction()>:
c00122d4:	56                   	push   esi
c00122d5:	53                   	push   ebx
c00122d6:	83 ec 14             	sub    esp,0x14
c00122d9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00122dd:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122e0:	83 ec 08             	sub    esp,0x8
c00122e3:	53                   	push   ebx
c00122e4:	68 2f a4 02 c0       	push   0xc002a42f
c00122e9:	e8 eb 02 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00122ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122f1:	83 c4 10             	add    esp,0x10
c00122f4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122fa:	75 0e                	jne    c001230a <VAS::scanForEviction()+0x36>
c00122fc:	89 da                	mov    edx,ebx
c00122fe:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012301:	c1 ea 16             	shr    edx,0x16
c0012304:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012308:	74 5d                	je     c0012367 <VAS::scanForEviction()+0x93>
c001230a:	83 ec 08             	sub    esp,0x8
c001230d:	53                   	push   ebx
c001230e:	56                   	push   esi
c001230f:	e8 d6 f2 ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	8b 10                	mov    edx,DWORD PTR [eax]
c0012319:	89 d1                	mov    ecx,edx
c001231b:	81 e1 01 08 00 00    	and    ecx,0x801
c0012321:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012327:	74 2f                	je     c0012358 <VAS::scanForEviction()+0x84>
c0012329:	81 c3 00 10 00 00    	add    ebx,0x1000
c001232f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012335:	77 05                	ja     c001233c <VAS::scanForEviction()+0x68>
c0012337:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001233a:	eb a4                	jmp    c00122e0 <VAS::scanForEviction()+0xc>
c001233c:	83 ec 0c             	sub    esp,0xc
c001233f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012346:	68 68 a4 02 c0       	push   0xc002a468
c001234b:	e8 89 02 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0012350:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	eb 88                	jmp    c00122e0 <VAS::scanForEviction()+0xc>
c0012358:	f6 c2 20             	test   dl,0x20
c001235b:	74 2b                	je     c0012388 <VAS::scanForEviction()+0xb4>
c001235d:	83 e2 df             	and    edx,0xffffffdf
c0012360:	89 10                	mov    DWORD PTR [eax],edx
c0012362:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012365:	eb c2                	jmp    c0012329 <VAS::scanForEviction()+0x55>
c0012367:	83 ec 0c             	sub    esp,0xc
c001236a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012370:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012373:	68 46 a4 02 c0       	push   0xc002a446
c0012378:	e8 5c 02 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001237d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012380:	83 c4 10             	add    esp,0x10
c0012383:	e9 58 ff ff ff       	jmp    c00122e0 <VAS::scanForEviction()+0xc>
c0012388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001238c:	83 ec 0c             	sub    esp,0xc
c001238f:	68 5b a4 02 c0       	push   0xc002a45b
c0012394:	e8 40 02 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0012399:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001239d:	8b 18                	mov    ebx,DWORD PTR [eax]
c001239f:	58                   	pop    eax
c00123a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123a6:	5a                   	pop    edx
c00123a7:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00123aa:	56                   	push   esi
c00123ab:	e8 fa fc ff ff       	call   c00120aa <VAS::evict(unsigned long)>
c00123b0:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00123b7:	89 d8                	mov    eax,ebx
c00123b9:	83 c4 24             	add    esp,0x24
c00123bc:	5b                   	pop    ebx
c00123bd:	5e                   	pop    esi
c00123be:	c3                   	ret    

c00123bf <mapVASFirstTime>:
c00123bf:	55                   	push   ebp
c00123c0:	57                   	push   edi
c00123c1:	56                   	push   esi
c00123c2:	53                   	push   ebx
c00123c3:	83 ec 0c             	sub    esp,0xc
c00123c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123cb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00123ce:	4a                   	dec    edx
c00123cf:	0f 84 8e 00 00 00    	je     c0012463 <mapVASFirstTime+0xa4>
c00123d5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00123d8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00123db:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00123e0:	c1 e5 15             	shl    ebp,0x15
c00123e3:	be 00 90 e7 01       	mov    esi,0x1e79000
c00123e8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00123ee:	29 eb                	sub    ebx,ebp
c00123f0:	29 ee                	sub    esi,ebp
c00123f2:	e8 46 d5 ff ff       	call   c000f93d <Phys::allocatePage()>
c00123f7:	83 ec 0c             	sub    esp,0xc
c00123fa:	68 03 04 00 00       	push   0x403
c00123ff:	6a 01                	push   0x1
c0012401:	53                   	push   ebx
c0012402:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012408:	50                   	push   eax
c0012409:	57                   	push   edi
c001240a:	e8 67 f8 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001240f:	83 c4 20             	add    esp,0x20
c0012412:	39 f3                	cmp    ebx,esi
c0012414:	75 dc                	jne    c00123f2 <mapVASFirstTime+0x33>
c0012416:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001241b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012420:	29 ee                	sub    esi,ebp
c0012422:	29 e8                	sub    eax,ebp
c0012424:	89 c5                	mov    ebp,eax
c0012426:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001242a:	19 db                	sbb    ebx,ebx
c001242c:	e8 0c d5 ff ff       	call   c000f93d <Phys::allocatePage()>
c0012431:	83 e3 04             	and    ebx,0x4
c0012434:	83 ec 0c             	sub    esp,0xc
c0012437:	81 c3 03 04 00 00    	add    ebx,0x403
c001243d:	53                   	push   ebx
c001243e:	6a 01                	push   0x1
c0012440:	56                   	push   esi
c0012441:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012447:	50                   	push   eax
c0012448:	57                   	push   edi
c0012449:	e8 28 f8 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001244e:	83 c4 20             	add    esp,0x20
c0012451:	39 f5                	cmp    ebp,esi
c0012453:	75 d1                	jne    c0012426 <mapVASFirstTime+0x67>
c0012455:	0f 20 d8             	mov    eax,cr3
c0012458:	0f 22 d8             	mov    cr3,eax
c001245b:	83 c4 0c             	add    esp,0xc
c001245e:	5b                   	pop    ebx
c001245f:	5e                   	pop    esi
c0012460:	5f                   	pop    edi
c0012461:	5d                   	pop    ebp
c0012462:	c3                   	ret    
c0012463:	83 ec 0c             	sub    esp,0xc
c0012466:	68 79 a4 02 c0       	push   0xc002a479
c001246b:	e8 69 01 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0012470:	83 c4 10             	add    esp,0x10
c0012473:	83 c4 0c             	add    esp,0xc
c0012476:	5b                   	pop    ebx
c0012477:	5e                   	pop    esi
c0012478:	5f                   	pop    edi
c0012479:	5d                   	pop    ebp
c001247a:	c3                   	ret    

c001247b <__cxa_atexit>:
c001247b:	31 c0                	xor    eax,eax
c001247d:	c3                   	ret    

c001247e <__cxa_finalize>:
c001247e:	c3                   	ret    

c001247f <__stack_chk_fail>:
c001247f:	55                   	push   ebp
c0012480:	89 e5                	mov    ebp,esp
c0012482:	83 ec 14             	sub    esp,0x14
c0012485:	68 92 a4 02 c0       	push   0xc002a492
c001248a:	e8 4a 01 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001248f:	58                   	pop    eax
c0012490:	5a                   	pop    edx
c0012491:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012494:	68 e2 a4 02 c0       	push   0xc002a4e2
c0012499:	e8 3b 01 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001249e:	59                   	pop    ecx
c001249f:	58                   	pop    eax
c00124a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124a3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124a6:	68 e2 a4 02 c0       	push   0xc002a4e2
c00124ab:	e8 29 01 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00124b0:	5a                   	pop    edx
c00124b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124b4:	59                   	pop    ecx
c00124b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00124b7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124ba:	68 e2 a4 02 c0       	push   0xc002a4e2
c00124bf:	e8 15 01 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00124c4:	5a                   	pop    edx
c00124c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124c8:	59                   	pop    ecx
c00124c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00124cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00124cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124d0:	68 e2 a4 02 c0       	push   0xc002a4e2
c00124d5:	e8 ff 00 00 00       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00124da:	c7 04 24 ea a4 02 c0 	mov    DWORD PTR [esp],0xc002a4ea
c00124e1:	e8 5f 78 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	c9                   	leave  
c00124ea:	c3                   	ret    

c00124eb <__cxa_pure_virtual>:
c00124eb:	83 ec 18             	sub    esp,0x18
c00124ee:	68 02 a5 02 c0       	push   0xc002a502
c00124f3:	e8 4d 78 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	c3                   	ret    

c00124fc <operator new[](unsigned long)>:
c00124fc:	e9 98 d0 ff ff       	jmp    c000f599 <malloc>

c0012501 <operator delete(void*, unsigned long)>:
c0012501:	e9 b3 d0 ff ff       	jmp    c000f5b9 <rfree>

c0012506 <operator delete[](void*)>:
c0012506:	e9 ae d0 ff ff       	jmp    c000f5b9 <rfree>

c001250b <operator delete[](void*, unsigned long)>:
c001250b:	e9 a9 d0 ff ff       	jmp    c000f5b9 <rfree>

c0012510 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012510:	55                   	push   ebp
c0012511:	b9 11 00 00 00       	mov    ecx,0x11
c0012516:	57                   	push   edi
c0012517:	56                   	push   esi
c0012518:	be ee 9f 02 c0       	mov    esi,0xc0029fee
c001251d:	53                   	push   ebx
c001251e:	83 ec 20             	sub    esp,0x20
c0012521:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012525:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012529:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001252d:	fc                   	cld    
c001252e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012530:	89 ee                	mov    esi,ebp
c0012532:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012536:	eb 02                	jmp    c001253a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012538:	89 c6                	mov    esi,eax
c001253a:	31 d2                	xor    edx,edx
c001253c:	41                   	inc    ecx
c001253d:	89 f0                	mov    eax,esi
c001253f:	f7 f3                	div    ebx
c0012541:	39 de                	cmp    esi,ebx
c0012543:	73 f3                	jae    c0012538 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012545:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012548:	eb 02                	jmp    c001254c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001254a:	89 c5                	mov    ebp,eax
c001254c:	31 d2                	xor    edx,edx
c001254e:	49                   	dec    ecx
c001254f:	89 e8                	mov    eax,ebp
c0012551:	f7 f3                	div    ebx
c0012553:	39 dd                	cmp    ebp,ebx
c0012555:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012559:	88 11                	mov    BYTE PTR [ecx],dl
c001255b:	73 ed                	jae    c001254a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c001255d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012561:	83 c4 20             	add    esp,0x20
c0012564:	5b                   	pop    ebx
c0012565:	5e                   	pop    esi
c0012566:	5f                   	pop    edi
c0012567:	5d                   	pop    ebp
c0012568:	c3                   	ret    

c0012569 <Dbg::logc(char)>:
c0012569:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001256d:	ba fd 03 00 00       	mov    edx,0x3fd
c0012572:	ec                   	in     al,dx
c0012573:	a8 20                	test   al,0x20
c0012575:	74 fb                	je     c0012572 <Dbg::logc(char)+0x9>
c0012577:	ba f8 03 00 00       	mov    edx,0x3f8
c001257c:	88 c8                	mov    al,cl
c001257e:	ee                   	out    dx,al
c001257f:	c3                   	ret    

c0012580 <Dbg::logs(char*)>:
c0012580:	53                   	push   ebx
c0012581:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012585:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012588:	84 c0                	test   al,al
c001258a:	74 0f                	je     c001259b <Dbg::logs(char*)+0x1b>
c001258c:	50                   	push   eax
c001258d:	43                   	inc    ebx
c001258e:	e8 d6 ff ff ff       	call   c0012569 <Dbg::logc(char)>
c0012593:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012596:	5a                   	pop    edx
c0012597:	84 c0                	test   al,al
c0012599:	75 f1                	jne    c001258c <Dbg::logs(char*)+0xc>
c001259b:	5b                   	pop    ebx
c001259c:	c3                   	ret    

c001259d <Dbg::logWriteInt(unsigned int)>:
c001259d:	83 ec 10             	sub    esp,0x10
c00125a0:	6a 0a                	push   0xa
c00125a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125a6:	50                   	push   eax
c00125a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ab:	e8 60 ff ff ff       	call   c0012510 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125b0:	50                   	push   eax
c00125b1:	e8 ca ff ff ff       	call   c0012580 <Dbg::logs(char*)>
c00125b6:	83 c4 20             	add    esp,0x20
c00125b9:	c3                   	ret    

c00125ba <Dbg::logWriteIntBase(unsigned int, int)>:
c00125ba:	83 ec 10             	sub    esp,0x10
c00125bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125c5:	50                   	push   eax
c00125c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ca:	e8 41 ff ff ff       	call   c0012510 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125cf:	50                   	push   eax
c00125d0:	e8 ab ff ff ff       	call   c0012580 <Dbg::logs(char*)>
c00125d5:	83 c4 20             	add    esp,0x20
c00125d8:	c3                   	ret    

c00125d9 <Dbg::kprintf(char const*, ...)>:
c00125d9:	55                   	push   ebp
c00125da:	57                   	push   edi
c00125db:	56                   	push   esi
c00125dc:	53                   	push   ebx
c00125dd:	83 ec 0c             	sub    esp,0xc
c00125e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125e4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00125e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125ec:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00125ef:	84 c0                	test   al,al
c00125f1:	74 4a                	je     c001263d <Dbg::kprintf(char const*, ...)+0x64>
c00125f3:	31 db                	xor    ebx,ebx
c00125f5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00125f8:	3c 25                	cmp    al,0x25
c00125fa:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00125fd:	0f 85 e4 00 00 00    	jne    c00126e7 <Dbg::kprintf(char const*, ...)+0x10e>
c0012603:	83 c3 02             	add    ebx,0x2
c0012606:	8a 07                	mov    al,BYTE PTR [edi]
c0012608:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001260b:	83 e8 25             	sub    eax,0x25
c001260e:	3c 53                	cmp    al,0x53
c0012610:	0f 87 ba 00 00 00    	ja     c00126d0 <Dbg::kprintf(char const*, ...)+0xf7>
c0012616:	0f b6 c0             	movzx  eax,al
c0012619:	ff 24 85 18 a5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5ae8]
c0012620:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012624:	89 c8                	mov    eax,ecx
c0012626:	83 c1 04             	add    ecx,0x4
c0012629:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001262d:	ff 30                	push   DWORD PTR [eax]
c001262f:	e8 69 ff ff ff       	call   c001259d <Dbg::logWriteInt(unsigned int)>
c0012634:	5f                   	pop    edi
c0012635:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012639:	84 c0                	test   al,al
c001263b:	75 b8                	jne    c00125f5 <Dbg::kprintf(char const*, ...)+0x1c>
c001263d:	83 c4 0c             	add    esp,0xc
c0012640:	5b                   	pop    ebx
c0012641:	5e                   	pop    esi
c0012642:	5f                   	pop    edi
c0012643:	5d                   	pop    ebp
c0012644:	c3                   	ret    
c0012645:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012649:	89 c8                	mov    eax,ecx
c001264b:	83 c1 04             	add    ecx,0x4
c001264e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012652:	ff 30                	push   DWORD PTR [eax]
c0012654:	e8 27 ff ff ff       	call   c0012580 <Dbg::logs(char*)>
c0012659:	58                   	pop    eax
c001265a:	eb d9                	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c001265c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012660:	89 d0                	mov    eax,edx
c0012662:	83 c2 04             	add    edx,0x4
c0012665:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012669:	ff 30                	push   DWORD PTR [eax]
c001266b:	e8 2d ff ff ff       	call   c001259d <Dbg::logWriteInt(unsigned int)>
c0012670:	58                   	pop    eax
c0012671:	eb c2                	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c0012673:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012677:	89 d0                	mov    eax,edx
c0012679:	83 c2 04             	add    edx,0x4
c001267c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001267f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012683:	50                   	push   eax
c0012684:	e8 e0 fe ff ff       	call   c0012569 <Dbg::logc(char)>
c0012689:	58                   	pop    eax
c001268a:	eb a9                	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c001268c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012690:	89 c8                	mov    eax,ecx
c0012692:	83 c1 04             	add    ecx,0x4
c0012695:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012699:	6a 10                	push   0x10
c001269b:	ff 30                	push   DWORD PTR [eax]
c001269d:	e8 18 ff ff ff       	call   c00125ba <Dbg::logWriteIntBase(unsigned int, int)>
c00126a2:	59                   	pop    ecx
c00126a3:	5f                   	pop    edi
c00126a4:	eb 8f                	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c00126a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126aa:	89 d0                	mov    eax,edx
c00126ac:	83 c2 08             	add    edx,0x8
c00126af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126b3:	6a 10                	push   0x10
c00126b5:	ff 30                	push   DWORD PTR [eax]
c00126b7:	e8 fe fe ff ff       	call   c00125ba <Dbg::logWriteIntBase(unsigned int, int)>
c00126bc:	58                   	pop    eax
c00126bd:	5a                   	pop    edx
c00126be:	e9 72 ff ff ff       	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c00126c3:	6a 25                	push   0x25
c00126c5:	e8 9f fe ff ff       	call   c0012569 <Dbg::logc(char)>
c00126ca:	58                   	pop    eax
c00126cb:	e9 65 ff ff ff       	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c00126d0:	6a 25                	push   0x25
c00126d2:	e8 92 fe ff ff       	call   c0012569 <Dbg::logc(char)>
c00126d7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00126da:	50                   	push   eax
c00126db:	e8 89 fe ff ff       	call   c0012569 <Dbg::logc(char)>
c00126e0:	5a                   	pop    edx
c00126e1:	59                   	pop    ecx
c00126e2:	e9 4e ff ff ff       	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c00126e7:	50                   	push   eax
c00126e8:	89 eb                	mov    ebx,ebp
c00126ea:	e8 7a fe ff ff       	call   c0012569 <Dbg::logc(char)>
c00126ef:	89 fd                	mov    ebp,edi
c00126f1:	58                   	pop    eax
c00126f2:	e9 3e ff ff ff       	jmp    c0012635 <Dbg::kprintf(char const*, ...)+0x5c>
c00126f7:	90                   	nop

c00126f8 <File::read(unsigned long long, void*, int*)>:
c00126f8:	53                   	push   ebx
c00126f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012701:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012708:	3c 19                	cmp    al,0x19
c001270a:	77 35                	ja     c0012741 <File::read(unsigned long long, void*, int*)+0x49>
c001270c:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c0012713:	85 c0                	test   eax,eax
c0012715:	74 2a                	je     c0012741 <File::read(unsigned long long, void*, int*)+0x49>
c0012717:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001271d:	85 c0                	test   eax,eax
c001271f:	74 20                	je     c0012741 <File::read(unsigned long long, void*, int*)+0x49>
c0012721:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012725:	74 21                	je     c0012748 <File::read(unsigned long long, void*, int*)+0x50>
c0012727:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012729:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001272d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001273b:	5b                   	pop    ebx
c001273c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001273f:	ff e0                	jmp    eax
c0012741:	b8 0b 00 00 00       	mov    eax,0xb
c0012746:	eb 05                	jmp    c001274d <File::read(unsigned long long, void*, int*)+0x55>
c0012748:	b8 05 00 00 00       	mov    eax,0x5
c001274d:	5b                   	pop    ebx
c001274e:	c3                   	ret    
c001274f:	90                   	nop

c0012750 <File::write(unsigned long long, void*, int*)>:
c0012750:	53                   	push   ebx
c0012751:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012755:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012759:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012760:	3c 19                	cmp    al,0x19
c0012762:	77 35                	ja     c0012799 <File::write(unsigned long long, void*, int*)+0x49>
c0012764:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c001276b:	85 c0                	test   eax,eax
c001276d:	74 2a                	je     c0012799 <File::write(unsigned long long, void*, int*)+0x49>
c001276f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012775:	85 c0                	test   eax,eax
c0012777:	74 20                	je     c0012799 <File::write(unsigned long long, void*, int*)+0x49>
c0012779:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001277d:	74 21                	je     c00127a0 <File::write(unsigned long long, void*, int*)+0x50>
c001277f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012781:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012785:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001278b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001278f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012793:	5b                   	pop    ebx
c0012794:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012797:	ff e0                	jmp    eax
c0012799:	b8 0b 00 00 00       	mov    eax,0xb
c001279e:	eb 05                	jmp    c00127a5 <File::write(unsigned long long, void*, int*)+0x55>
c00127a0:	b8 05 00 00 00       	mov    eax,0x5
c00127a5:	5b                   	pop    ebx
c00127a6:	c3                   	ret    
c00127a7:	90                   	nop

c00127a8 <Directory::read(unsigned long long, void*, int*)>:
c00127a8:	53                   	push   ebx
c00127a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127b1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127b8:	3c 19                	cmp    al,0x19
c00127ba:	77 35                	ja     c00127f1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127bc:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c00127c3:	85 c0                	test   eax,eax
c00127c5:	74 2a                	je     c00127f1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127c7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127cd:	85 c0                	test   eax,eax
c00127cf:	74 20                	je     c00127f1 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127d1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d5:	74 21                	je     c00127f8 <Directory::read(unsigned long long, void*, int*)+0x50>
c00127d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127d9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127dd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127eb:	5b                   	pop    ebx
c00127ec:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00127ef:	ff e0                	jmp    eax
c00127f1:	b8 0b 00 00 00       	mov    eax,0xb
c00127f6:	eb 05                	jmp    c00127fd <Directory::read(unsigned long long, void*, int*)+0x55>
c00127f8:	b8 05 00 00 00       	mov    eax,0x5
c00127fd:	5b                   	pop    ebx
c00127fe:	c3                   	ret    
c00127ff:	90                   	nop

c0012800 <Directory::write(unsigned long long, void*, int*)>:
c0012800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012804:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001280b:	b8 0b 00 00 00       	mov    eax,0xb
c0012810:	80 fa 19             	cmp    dl,0x19
c0012813:	77 18                	ja     c001282d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012815:	8b 14 95 40 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22c0]
c001281c:	85 d2                	test   edx,edx
c001281e:	74 0d                	je     c001282d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012820:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012827:	19 c0                	sbb    eax,eax
c0012829:	83 e0 0a             	and    eax,0xa
c001282c:	40                   	inc    eax
c001282d:	c3                   	ret    

c001282e <File::isAtty()>:
c001282e:	31 c0                	xor    eax,eax
c0012830:	c3                   	ret    
c0012831:	90                   	nop

c0012832 <Directory::isAtty()>:
c0012832:	31 c0                	xor    eax,eax
c0012834:	c3                   	ret    
c0012835:	90                   	nop

c0012836 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012836:	b8 0a 00 00 00       	mov    eax,0xa
c001283b:	c3                   	ret    

c001283c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001283c:	b8 0a 00 00 00       	mov    eax,0xa
c0012841:	c3                   	ret    

c0012842 <Filesystem::getFileFirstSector(char const*)>:
c0012842:	31 c0                	xor    eax,eax
c0012844:	31 d2                	xor    edx,edx
c0012846:	c3                   	ret    
c0012847:	90                   	nop

c0012848 <File::~File()>:
c0012848:	83 ec 0c             	sub    esp,0xc
c001284b:	ba d8 a6 02 c0       	mov    edx,0xc002a6d8
c0012850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012854:	89 10                	mov    DWORD PTR [eax],edx
c0012856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285a:	83 ec 0c             	sub    esp,0xc
c001285d:	50                   	push   eax
c001285e:	e8 ff e6 ff ff       	call   c0010f62 <UnixFile::~UnixFile()>
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	90                   	nop
c0012867:	83 c4 0c             	add    esp,0xc
c001286a:	c3                   	ret    
c001286b:	90                   	nop

c001286c <File::~File()>:
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	83 ec 0c             	sub    esp,0xc
c0012872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012876:	e8 cd ff ff ff       	call   c0012848 <File::~File()>
c001287b:	83 c4 10             	add    esp,0x10
c001287e:	83 ec 08             	sub    esp,0x8
c0012881:	68 14 01 00 00       	push   0x114
c0012886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001288a:	e8 72 fc ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	83 c4 0c             	add    esp,0xc
c0012895:	c3                   	ret    

c0012896 <Directory::~Directory()>:
c0012896:	83 ec 0c             	sub    esp,0xc
c0012899:	ba f4 a6 02 c0       	mov    edx,0xc002a6f4
c001289e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a2:	89 10                	mov    DWORD PTR [eax],edx
c00128a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128a8:	83 ec 0c             	sub    esp,0xc
c00128ab:	50                   	push   eax
c00128ac:	e8 b1 e6 ff ff       	call   c0010f62 <UnixFile::~UnixFile()>
c00128b1:	83 c4 10             	add    esp,0x10
c00128b4:	90                   	nop
c00128b5:	83 c4 0c             	add    esp,0xc
c00128b8:	c3                   	ret    
c00128b9:	90                   	nop

c00128ba <Directory::~Directory()>:
c00128ba:	83 ec 0c             	sub    esp,0xc
c00128bd:	83 ec 0c             	sub    esp,0xc
c00128c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c4:	e8 cd ff ff ff       	call   c0012896 <Directory::~Directory()>
c00128c9:	83 c4 10             	add    esp,0x10
c00128cc:	83 ec 08             	sub    esp,0x8
c00128cf:	68 14 01 00 00       	push   0x114
c00128d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d8:	e8 24 fc ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	83 c4 0c             	add    esp,0xc
c00128e3:	c3                   	ret    

c00128e4 <Filesystem::Filesystem()>:
c00128e4:	ba 70 a6 02 c0       	mov    edx,0xc002a670
c00128e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128ed:	89 10                	mov    DWORD PTR [eax],edx
c00128ef:	8b 15 b4 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8b4
c00128f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00128fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012900:	a3 b4 d8 02 c0       	mov    ds:0xc002d8b4,eax
c0012905:	90                   	nop
c0012906:	c3                   	ret    
c0012907:	90                   	nop

c0012908 <Filesystem::~Filesystem()>:
c0012908:	ba 70 a6 02 c0       	mov    edx,0xc002a670
c001290d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	90                   	nop
c0012914:	c3                   	ret    
c0012915:	90                   	nop

c0012916 <Filesystem::~Filesystem()>:
c0012916:	83 ec 0c             	sub    esp,0xc
c0012919:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001291d:	e8 e6 ff ff ff       	call   c0012908 <Filesystem::~Filesystem()>
c0012922:	83 c4 04             	add    esp,0x4
c0012925:	83 ec 08             	sub    esp,0x8
c0012928:	6a 08                	push   0x8
c001292a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001292e:	e8 ce fb ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0012933:	83 c4 10             	add    esp,0x10
c0012936:	83 c4 0c             	add    esp,0xc
c0012939:	c3                   	ret    

c001293a <Fs::getcwd(Process*, char*, int)>:
c001293a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001293e:	31 c0                	xor    eax,eax
c0012940:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012943:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012947:	7d 15                	jge    c001295e <Fs::getcwd(Process*, char*, int)+0x24>
c0012949:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001294d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012954:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012957:	84 c9                	test   cl,cl
c0012959:	74 06                	je     c0012961 <Fs::getcwd(Process*, char*, int)+0x27>
c001295b:	40                   	inc    eax
c001295c:	eb e2                	jmp    c0012940 <Fs::getcwd(Process*, char*, int)+0x6>
c001295e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012961:	31 c0                	xor    eax,eax
c0012963:	c3                   	ret    

c0012964 <Fs::initVFS()>:
c0012964:	83 ec 18             	sub    esp,0x18
c0012967:	6a 08                	push   0x8
c0012969:	e8 2b cc ff ff       	call   c000f599 <malloc>
c001296e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012971:	e8 cc de 00 00       	call   c0020842 <FAT::FAT()>
c0012976:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001297d:	e8 17 cc ff ff       	call   c000f599 <malloc>
c0012982:	89 04 24             	mov    DWORD PTR [esp],eax
c0012985:	e8 c4 f0 00 00       	call   c0021a4e <ISO9660::ISO9660()>
c001298a:	83 c4 1c             	add    esp,0x1c
c001298d:	c3                   	ret    

c001298e <Fs::standardiseFiles(char*, char const*, char const*)>:
c001298e:	55                   	push   ebp
c001298f:	57                   	push   edi
c0012990:	56                   	push   esi
c0012991:	53                   	push   ebx
c0012992:	81 ec 10 04 00 00    	sub    esp,0x410
c0012998:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001299f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00129a6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00129ad:	68 00 04 00 00       	push   0x400
c00129b2:	6a 00                	push   0x0
c00129b4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129b8:	56                   	push   esi
c00129b9:	e8 92 dd fe ff       	call   c0000750 <memset>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129c5:	75 0b                	jne    c00129d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00129c7:	50                   	push   eax
c00129c8:	50                   	push   eax
c00129c9:	57                   	push   edi
c00129ca:	56                   	push   esi
c00129cb:	e8 3c de fe ff       	call   c000080c <strcpy>
c00129d0:	eb 41                	jmp    c0012a13 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00129d2:	8a 07                	mov    al,BYTE PTR [edi]
c00129d4:	3c 5c                	cmp    al,0x5c
c00129d6:	74 04                	je     c00129dc <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00129d8:	3c 2f                	cmp    al,0x2f
c00129da:	75 18                	jne    c00129f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00129dc:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00129df:	3c 60                	cmp    al,0x60
c00129e1:	7e 03                	jle    c00129e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00129e3:	83 e8 20             	sub    eax,0x20
c00129e6:	88 04 24             	mov    BYTE PTR [esp],al
c00129e9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00129f0:	50                   	push   eax
c00129f1:	50                   	push   eax
c00129f2:	eb 18                	jmp    c0012a0c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00129f4:	50                   	push   eax
c00129f5:	50                   	push   eax
c00129f6:	55                   	push   ebp
c00129f7:	56                   	push   esi
c00129f8:	e8 0f de fe ff       	call   c000080c <strcpy>
c00129fd:	5a                   	pop    edx
c00129fe:	59                   	pop    ecx
c00129ff:	68 4a b9 02 c0       	push   0xc002b94a
c0012a04:	56                   	push   esi
c0012a05:	e8 42 df fe ff       	call   c000094c <strcat>
c0012a0a:	5d                   	pop    ebp
c0012a0b:	58                   	pop    eax
c0012a0c:	57                   	push   edi
c0012a0d:	56                   	push   esi
c0012a0e:	e8 39 df fe ff       	call   c000094c <strcat>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a19:	3c 60                	cmp    al,0x60
c0012a1b:	7e 03                	jle    c0012a20 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012a1d:	83 e8 20             	sub    eax,0x20
c0012a20:	88 04 24             	mov    BYTE PTR [esp],al
c0012a23:	88 03                	mov    BYTE PTR [ebx],al
c0012a25:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a2c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a32:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a36:	bf 03 00 00 00       	mov    edi,0x3
c0012a3b:	b8 03 00 00 00       	mov    eax,0x3
c0012a40:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a43:	84 d2                	test   dl,dl
c0012a45:	0f 84 91 00 00 00    	je     c0012adc <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a4b:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a4e:	80 fa 5c             	cmp    dl,0x5c
c0012a51:	74 05                	je     c0012a58 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012a53:	80 fa 2f             	cmp    dl,0x2f
c0012a56:	75 12                	jne    c0012a6a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a58:	89 c5                	mov    ebp,eax
c0012a5a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a5f:	74 09                	je     c0012a6a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a61:	40                   	inc    eax
c0012a62:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a66:	89 cf                	mov    edi,ecx
c0012a68:	eb d6                	jmp    c0012a40 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a6a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a6f:	75 5b                	jne    c0012acc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a71:	80 fa 2e             	cmp    dl,0x2e
c0012a74:	75 56                	jne    c0012acc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a76:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012a7a:	74 19                	je     c0012a95 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012a7c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a81:	74 53                	je     c0012ad6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a83:	89 f9                	mov    ecx,edi
c0012a85:	41                   	inc    ecx
c0012a86:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a89:	80 fa 2f             	cmp    dl,0x2f
c0012a8c:	74 f7                	je     c0012a85 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a8e:	80 fa 5c             	cmp    dl,0x5c
c0012a91:	74 f2                	je     c0012a85 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012a93:	eb d1                	jmp    c0012a66 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a95:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012a9a:	74 3a                	je     c0012ad6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012a9c:	83 f8 03             	cmp    eax,0x3
c0012a9f:	74 c5                	je     c0012a66 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012aa1:	41                   	inc    ecx
c0012aa2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012aa5:	80 fa 2f             	cmp    dl,0x2f
c0012aa8:	74 f7                	je     c0012aa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012aaa:	80 fa 5c             	cmp    dl,0x5c
c0012aad:	74 f2                	je     c0012aa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012aaf:	48                   	dec    eax
c0012ab0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ab4:	75 06                	jne    c0012abc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ab6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012aba:	eb f3                	jmp    c0012aaf <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012abc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ac0:	74 07                	je     c0012ac9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ac2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ac6:	48                   	dec    eax
c0012ac7:	eb f3                	jmp    c0012abc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ac9:	40                   	inc    eax
c0012aca:	eb 9a                	jmp    c0012a66 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012acc:	80 fa 2f             	cmp    dl,0x2f
c0012acf:	74 95                	je     c0012a66 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ad1:	80 fa 5c             	cmp    dl,0x5c
c0012ad4:	74 90                	je     c0012a66 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ad6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ad9:	40                   	inc    eax
c0012ada:	eb 8a                	jmp    c0012a66 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012adc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ae0:	83 ec 0c             	sub    esp,0xc
c0012ae3:	53                   	push   ebx
c0012ae4:	e8 83 dc fe ff       	call   c000076c <strlen>
c0012ae9:	83 c4 10             	add    esp,0x10
c0012aec:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012af1:	75 26                	jne    c0012b19 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012af3:	83 ec 0c             	sub    esp,0xc
c0012af6:	53                   	push   ebx
c0012af7:	e8 70 dc fe ff       	call   c000076c <strlen>
c0012afc:	83 c4 10             	add    esp,0x10
c0012aff:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b04:	74 26                	je     c0012b2c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b06:	83 ec 0c             	sub    esp,0xc
c0012b09:	53                   	push   ebx
c0012b0a:	e8 5d dc fe ff       	call   c000076c <strlen>
c0012b0f:	83 c4 10             	add    esp,0x10
c0012b12:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b17:	eb c7                	jmp    c0012ae0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	53                   	push   ebx
c0012b1d:	e8 4a dc fe ff       	call   c000076c <strlen>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b2a:	74 c7                	je     c0012af3 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012b2c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b32:	5b                   	pop    ebx
c0012b33:	5e                   	pop    esi
c0012b34:	5f                   	pop    edi
c0012b35:	5d                   	pop    ebp
c0012b36:	c3                   	ret    
c0012b37:	90                   	nop

c0012b38 <File::File(char const*, Process*)>:
c0012b38:	83 ec 0c             	sub    esp,0xc
c0012b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3f:	83 ec 08             	sub    esp,0x8
c0012b42:	6a 00                	push   0x0
c0012b44:	50                   	push   eax
c0012b45:	e8 36 e2 ff ff       	call   c0010d80 <UnixFile::UnixFile(int)>
c0012b4a:	83 c4 10             	add    esp,0x10
c0012b4d:	ba d8 a6 02 c0       	mov    edx,0xc002a6d8
c0012b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b56:	89 10                	mov    DWORD PTR [eax],edx
c0012b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b5c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b66:	83 c0 0d             	add    eax,0xd
c0012b69:	83 ec 04             	sub    esp,0x4
c0012b6c:	52                   	push   edx
c0012b6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b71:	50                   	push   eax
c0012b72:	e8 17 fe ff ff       	call   c001298e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012b81:	8d 50 bf             	lea    edx,[eax-0x41]
c0012b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b88:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b92:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012b96:	90                   	nop
c0012b97:	83 c4 0c             	add    esp,0xc
c0012b9a:	c3                   	ret    
c0012b9b:	90                   	nop

c0012b9c <File::open(FileOpenMode)>:
c0012b9c:	53                   	push   ebx
c0012b9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ba2:	83 ec 08             	sub    esp,0x8
c0012ba5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ba9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012bb0:	80 fa 19             	cmp    dl,0x19
c0012bb3:	77 40                	ja     c0012bf5 <File::open(FileOpenMode)+0x59>
c0012bb5:	8b 14 95 40 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22c0]
c0012bbc:	85 d2                	test   edx,edx
c0012bbe:	74 35                	je     c0012bf5 <File::open(FileOpenMode)+0x59>
c0012bc0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bc6:	85 d2                	test   edx,edx
c0012bc8:	74 2b                	je     c0012bf5 <File::open(FileOpenMode)+0x59>
c0012bca:	b8 06 00 00 00       	mov    eax,0x6
c0012bcf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012bd3:	75 20                	jne    c0012bf5 <File::open(FileOpenMode)+0x59>
c0012bd5:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bd7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012bdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012be1:	51                   	push   ecx
c0012be2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012be5:	51                   	push   ecx
c0012be6:	52                   	push   edx
c0012be7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	85 c0                	test   eax,eax
c0012bef:	75 04                	jne    c0012bf5 <File::open(FileOpenMode)+0x59>
c0012bf1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012bf5:	83 c4 08             	add    esp,0x8
c0012bf8:	5b                   	pop    ebx
c0012bf9:	c3                   	ret    

c0012bfa <File::close()>:
c0012bfa:	53                   	push   ebx
c0012bfb:	b8 0b 00 00 00       	mov    eax,0xb
c0012c00:	83 ec 08             	sub    esp,0x8
c0012c03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c07:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c0e:	80 fa 19             	cmp    dl,0x19
c0012c11:	77 41                	ja     c0012c54 <File::close()+0x5a>
c0012c13:	8b 1c 95 40 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd22c0]
c0012c1a:	85 db                	test   ebx,ebx
c0012c1c:	74 36                	je     c0012c54 <File::close()+0x5a>
c0012c1e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c25:	74 2d                	je     c0012c54 <File::close()+0x5a>
c0012c27:	b8 05 00 00 00       	mov    eax,0x5
c0012c2c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c30:	74 22                	je     c0012c54 <File::close()+0x5a>
c0012c32:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c36:	8b 04 95 40 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd22c0]
c0012c3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c43:	53                   	push   ebx
c0012c44:	53                   	push   ebx
c0012c45:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c47:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c4d:	50                   	push   eax
c0012c4e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	83 c4 08             	add    esp,0x8
c0012c57:	5b                   	pop    ebx
c0012c58:	c3                   	ret    
c0012c59:	90                   	nop

c0012c5a <File::seek(unsigned long long)>:
c0012c5a:	56                   	push   esi
c0012c5b:	53                   	push   ebx
c0012c5c:	b8 0b 00 00 00       	mov    eax,0xb
c0012c61:	51                   	push   ecx
c0012c62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c6a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c75:	80 fa 19             	cmp    dl,0x19
c0012c78:	77 31                	ja     c0012cab <File::seek(unsigned long long)+0x51>
c0012c7a:	8b 14 95 40 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22c0]
c0012c81:	85 d2                	test   edx,edx
c0012c83:	74 26                	je     c0012cab <File::seek(unsigned long long)+0x51>
c0012c85:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c8b:	85 d2                	test   edx,edx
c0012c8d:	74 1c                	je     c0012cab <File::seek(unsigned long long)+0x51>
c0012c8f:	b8 05 00 00 00       	mov    eax,0x5
c0012c94:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012c98:	74 11                	je     c0012cab <File::seek(unsigned long long)+0x51>
c0012c9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c9c:	53                   	push   ebx
c0012c9d:	51                   	push   ecx
c0012c9e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012ca4:	52                   	push   edx
c0012ca5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ca8:	83 c4 10             	add    esp,0x10
c0012cab:	5a                   	pop    edx
c0012cac:	5b                   	pop    ebx
c0012cad:	5e                   	pop    esi
c0012cae:	c3                   	ret    
c0012caf:	90                   	nop

c0012cb0 <File::tell(unsigned long long*)>:
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	b8 0b 00 00 00       	mov    eax,0xb
c0012cb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012cbc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cc3:	80 fa 19             	cmp    dl,0x19
c0012cc6:	77 34                	ja     c0012cfc <File::tell(unsigned long long*)+0x4c>
c0012cc8:	8b 14 95 40 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22c0]
c0012ccf:	85 d2                	test   edx,edx
c0012cd1:	74 29                	je     c0012cfc <File::tell(unsigned long long*)+0x4c>
c0012cd3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd9:	85 d2                	test   edx,edx
c0012cdb:	74 1f                	je     c0012cfc <File::tell(unsigned long long*)+0x4c>
c0012cdd:	b8 05 00 00 00       	mov    eax,0x5
c0012ce2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ce6:	74 14                	je     c0012cfc <File::tell(unsigned long long*)+0x4c>
c0012ce8:	50                   	push   eax
c0012ce9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ceb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012cf5:	52                   	push   edx
c0012cf6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012cf9:	83 c4 10             	add    esp,0x10
c0012cfc:	83 c4 0c             	add    esp,0xc
c0012cff:	c3                   	ret    

c0012d00 <File::rewind()>:
c0012d00:	83 ec 10             	sub    esp,0x10
c0012d03:	6a 00                	push   0x0
c0012d05:	6a 00                	push   0x0
c0012d07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d0b:	e8 4a ff ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c0012d10:	83 c4 1c             	add    esp,0x1c
c0012d13:	c3                   	ret    

c0012d14 <File::unlink()>:
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	b8 0b 00 00 00       	mov    eax,0xb
c0012d1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d27:	80 f9 19             	cmp    cl,0x19
c0012d2a:	77 2f                	ja     c0012d5b <File::unlink()+0x47>
c0012d2c:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0012d33:	85 c9                	test   ecx,ecx
c0012d35:	74 24                	je     c0012d5b <File::unlink()+0x47>
c0012d37:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d3d:	85 c9                	test   ecx,ecx
c0012d3f:	74 1a                	je     c0012d5b <File::unlink()+0x47>
c0012d41:	b8 06 00 00 00       	mov    eax,0x6
c0012d46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d4a:	75 0f                	jne    c0012d5b <File::unlink()+0x47>
c0012d4c:	83 c2 0d             	add    edx,0xd
c0012d4f:	50                   	push   eax
c0012d50:	50                   	push   eax
c0012d51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d53:	52                   	push   edx
c0012d54:	51                   	push   ecx
c0012d55:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d58:	83 c4 10             	add    esp,0x10
c0012d5b:	83 c4 0c             	add    esp,0xc
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <File::rename(char const*)>:
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	b8 0b 00 00 00       	mov    eax,0xb
c0012d68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d73:	80 f9 19             	cmp    cl,0x19
c0012d76:	77 32                	ja     c0012daa <File::rename(char const*)+0x4a>
c0012d78:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0012d7f:	85 c9                	test   ecx,ecx
c0012d81:	74 27                	je     c0012daa <File::rename(char const*)+0x4a>
c0012d83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d89:	85 c9                	test   ecx,ecx
c0012d8b:	74 1d                	je     c0012daa <File::rename(char const*)+0x4a>
c0012d8d:	b8 06 00 00 00       	mov    eax,0x6
c0012d92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d96:	75 12                	jne    c0012daa <File::rename(char const*)+0x4a>
c0012d98:	83 c2 0d             	add    edx,0xd
c0012d9b:	50                   	push   eax
c0012d9c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012da2:	52                   	push   edx
c0012da3:	51                   	push   ecx
c0012da4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012da7:	83 c4 10             	add    esp,0x10
c0012daa:	83 c4 0c             	add    esp,0xc
c0012dad:	c3                   	ret    

c0012dae <File::chfatattr(unsigned char, unsigned char)>:
c0012dae:	57                   	push   edi
c0012daf:	b8 0b 00 00 00       	mov    eax,0xb
c0012db4:	56                   	push   esi
c0012db5:	53                   	push   ebx
c0012db6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012dbe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012dc9:	80 f9 19             	cmp    cl,0x19
c0012dcc:	77 37                	ja     c0012e05 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dce:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0012dd5:	85 c9                	test   ecx,ecx
c0012dd7:	74 2c                	je     c0012e05 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dd9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ddf:	85 c9                	test   ecx,ecx
c0012de1:	74 22                	je     c0012e05 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012de3:	b8 06 00 00 00       	mov    eax,0x6
c0012de8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dec:	75 17                	jne    c0012e05 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dee:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012df0:	89 f0                	mov    eax,esi
c0012df2:	83 c2 0d             	add    edx,0xd
c0012df5:	0f b6 f0             	movzx  esi,al
c0012df8:	0f b6 db             	movzx  ebx,bl
c0012dfb:	56                   	push   esi
c0012dfc:	53                   	push   ebx
c0012dfd:	52                   	push   edx
c0012dfe:	51                   	push   ecx
c0012dff:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e02:	83 c4 10             	add    esp,0x10
c0012e05:	5b                   	pop    ebx
c0012e06:	5e                   	pop    esi
c0012e07:	5f                   	pop    edi
c0012e08:	c3                   	ret    
c0012e09:	90                   	nop

c0012e0a <File::exists()>:
c0012e0a:	83 ec 0c             	sub    esp,0xc
c0012e0d:	31 c0                	xor    eax,eax
c0012e0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e13:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e1a:	80 f9 19             	cmp    cl,0x19
c0012e1d:	77 24                	ja     c0012e43 <File::exists()+0x39>
c0012e1f:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0012e26:	85 c9                	test   ecx,ecx
c0012e28:	74 19                	je     c0012e43 <File::exists()+0x39>
c0012e2a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e30:	85 c9                	test   ecx,ecx
c0012e32:	74 0f                	je     c0012e43 <File::exists()+0x39>
c0012e34:	83 c2 0d             	add    edx,0xd
c0012e37:	50                   	push   eax
c0012e38:	50                   	push   eax
c0012e39:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e3b:	52                   	push   edx
c0012e3c:	51                   	push   ecx
c0012e3d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	83 c4 0c             	add    esp,0xc
c0012e46:	c3                   	ret    
c0012e47:	90                   	nop

c0012e48 <File::stat(unsigned long long*, bool*)>:
c0012e48:	56                   	push   esi
c0012e49:	53                   	push   ebx
c0012e4a:	50                   	push   eax
c0012e4b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e54:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e63:	80 f9 19             	cmp    cl,0x19
c0012e66:	77 3d                	ja     c0012ea5 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e68:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0012e6f:	85 c9                	test   ecx,ecx
c0012e71:	74 32                	je     c0012ea5 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e79:	85 c9                	test   ecx,ecx
c0012e7b:	74 28                	je     c0012ea5 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e83:	74 13                	je     c0012e98 <File::stat(unsigned long long*, bool*)+0x50>
c0012e85:	83 ec 04             	sub    esp,0x4
c0012e88:	56                   	push   esi
c0012e89:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012e8f:	51                   	push   ecx
c0012e90:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012e93:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012e96:	eb 0a                	jmp    c0012ea2 <File::stat(unsigned long long*, bool*)+0x5a>
c0012e98:	53                   	push   ebx
c0012e99:	83 c2 0d             	add    edx,0xd
c0012e9c:	56                   	push   esi
c0012e9d:	52                   	push   edx
c0012e9e:	51                   	push   ecx
c0012e9f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ea2:	83 c4 10             	add    esp,0x10
c0012ea5:	5a                   	pop    edx
c0012ea6:	5b                   	pop    ebx
c0012ea7:	5e                   	pop    esi
c0012ea8:	c3                   	ret    

c0012ea9 <Fs::setcwd(Process*, char*)>:
c0012ea9:	55                   	push   ebp
c0012eaa:	57                   	push   edi
c0012eab:	56                   	push   esi
c0012eac:	53                   	push   ebx
c0012ead:	81 ec 20 02 00 00    	sub    esp,0x220
c0012eb3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012eba:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012ec0:	57                   	push   edi
c0012ec1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012ec8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012ecc:	56                   	push   esi
c0012ecd:	e8 bc fa ff ff       	call   c001298e <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ed2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ed5:	e8 92 d8 fe ff       	call   c000076c <strlen>
c0012eda:	83 c4 10             	add    esp,0x10
c0012edd:	83 f8 02             	cmp    eax,0x2
c0012ee0:	77 17                	ja     c0012ef9 <Fs::setcwd(Process*, char*)+0x50>
c0012ee2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012ee7:	83 e8 41             	sub    eax,0x41
c0012eea:	83 f8 19             	cmp    eax,0x19
c0012eed:	76 24                	jbe    c0012f13 <Fs::setcwd(Process*, char*)+0x6a>
c0012eef:	b8 03 00 00 00       	mov    eax,0x3
c0012ef4:	e9 e0 00 00 00       	jmp    c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012ef9:	83 ec 0c             	sub    esp,0xc
c0012efc:	56                   	push   esi
c0012efd:	e8 6a d8 fe ff       	call   c000076c <strlen>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	83 f8 03             	cmp    eax,0x3
c0012f08:	75 34                	jne    c0012f3e <Fs::setcwd(Process*, char*)+0x95>
c0012f0a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f0f:	75 2d                	jne    c0012f3e <Fs::setcwd(Process*, char*)+0x95>
c0012f11:	eb cf                	jmp    c0012ee2 <Fs::setcwd(Process*, char*)+0x39>
c0012f13:	8b 14 85 40 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd22c0]
c0012f1a:	b8 05 00 00 00       	mov    eax,0x5
c0012f1f:	85 d2                	test   edx,edx
c0012f21:	0f 84 b2 00 00 00    	je     c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012f27:	b8 06 00 00 00       	mov    eax,0x6
c0012f2c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f33:	0f 85 92 00 00 00    	jne    c0012fcb <Fs::setcwd(Process*, char*)+0x122>
c0012f39:	e9 9b 00 00 00       	jmp    c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012f3e:	83 ec 0c             	sub    esp,0xc
c0012f41:	68 14 01 00 00       	push   0x114
c0012f46:	e8 4e c6 ff ff       	call   c000f599 <malloc>
c0012f4b:	83 c4 0c             	add    esp,0xc
c0012f4e:	89 c3                	mov    ebx,eax
c0012f50:	55                   	push   ebp
c0012f51:	56                   	push   esi
c0012f52:	50                   	push   eax
c0012f53:	e8 e0 fb ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c0012f58:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012f5d:	83 c4 0c             	add    esp,0xc
c0012f60:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012f64:	50                   	push   eax
c0012f65:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f69:	50                   	push   eax
c0012f6a:	53                   	push   ebx
c0012f6b:	e8 d8 fe ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	83 f8 02             	cmp    eax,0x2
c0012f76:	74 04                	je     c0012f7c <Fs::setcwd(Process*, char*)+0xd3>
c0012f78:	85 c0                	test   eax,eax
c0012f7a:	74 1c                	je     c0012f98 <Fs::setcwd(Process*, char*)+0xef>
c0012f7c:	b8 01 00 00 00       	mov    eax,0x1
c0012f81:	85 db                	test   ebx,ebx
c0012f83:	74 54                	je     c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f8a:	53                   	push   ebx
c0012f8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	b8 01 00 00 00       	mov    eax,0x1
c0012f96:	eb 41                	jmp    c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012f98:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012f9d:	75 1c                	jne    c0012fbb <Fs::setcwd(Process*, char*)+0x112>
c0012f9f:	b8 02 00 00 00       	mov    eax,0x2
c0012fa4:	85 db                	test   ebx,ebx
c0012fa6:	74 31                	je     c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fad:	53                   	push   ebx
c0012fae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fb1:	83 c4 10             	add    esp,0x10
c0012fb4:	b8 02 00 00 00       	mov    eax,0x2
c0012fb9:	eb 1e                	jmp    c0012fd9 <Fs::setcwd(Process*, char*)+0x130>
c0012fbb:	85 db                	test   ebx,ebx
c0012fbd:	74 0c                	je     c0012fcb <Fs::setcwd(Process*, char*)+0x122>
c0012fbf:	83 ec 0c             	sub    esp,0xc
c0012fc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fc4:	53                   	push   ebx
c0012fc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	50                   	push   eax
c0012fcc:	50                   	push   eax
c0012fcd:	56                   	push   esi
c0012fce:	57                   	push   edi
c0012fcf:	e8 38 d8 fe ff       	call   c000080c <strcpy>
c0012fd4:	83 c4 10             	add    esp,0x10
c0012fd7:	31 c0                	xor    eax,eax
c0012fd9:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012fdf:	5b                   	pop    ebx
c0012fe0:	5e                   	pop    esi
c0012fe1:	5f                   	pop    edi
c0012fe2:	5d                   	pop    ebp
c0012fe3:	c3                   	ret    

c0012fe4 <Directory::Directory(char const*, Process*)>:
c0012fe4:	83 ec 0c             	sub    esp,0xc
c0012fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012feb:	83 ec 08             	sub    esp,0x8
c0012fee:	6a 00                	push   0x0
c0012ff0:	50                   	push   eax
c0012ff1:	e8 8a dd ff ff       	call   c0010d80 <UnixFile::UnixFile(int)>
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	ba f4 a6 02 c0       	mov    edx,0xc002a6f4
c0012ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013002:	89 10                	mov    DWORD PTR [eax],edx
c0013004:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013008:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001300e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013012:	83 c0 0d             	add    eax,0xd
c0013015:	83 ec 04             	sub    esp,0x4
c0013018:	52                   	push   edx
c0013019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001301d:	50                   	push   eax
c001301e:	e8 6b f9 ff ff       	call   c001298e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013023:	83 c4 10             	add    esp,0x10
c0013026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001302a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001302d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013034:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013042:	90                   	nop
c0013043:	83 c4 0c             	add    esp,0xc
c0013046:	c3                   	ret    
c0013047:	90                   	nop

c0013048 <Directory::open()>:
c0013048:	53                   	push   ebx
c0013049:	b8 0b 00 00 00       	mov    eax,0xb
c001304e:	83 ec 08             	sub    esp,0x8
c0013051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013055:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001305c:	80 fa 19             	cmp    dl,0x19
c001305f:	77 3d                	ja     c001309e <Directory::open()+0x56>
c0013061:	8b 14 95 40 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22c0]
c0013068:	85 d2                	test   edx,edx
c001306a:	74 32                	je     c001309e <Directory::open()+0x56>
c001306c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013072:	85 d2                	test   edx,edx
c0013074:	74 28                	je     c001309e <Directory::open()+0x56>
c0013076:	b8 06 00 00 00       	mov    eax,0x6
c001307b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001307f:	75 1d                	jne    c001309e <Directory::open()+0x56>
c0013081:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013087:	50                   	push   eax
c0013088:	8b 02                	mov    eax,DWORD PTR [edx]
c001308a:	51                   	push   ecx
c001308b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001308e:	51                   	push   ecx
c001308f:	52                   	push   edx
c0013090:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013093:	83 c4 10             	add    esp,0x10
c0013096:	85 c0                	test   eax,eax
c0013098:	75 04                	jne    c001309e <Directory::open()+0x56>
c001309a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001309e:	83 c4 08             	add    esp,0x8
c00130a1:	5b                   	pop    ebx
c00130a2:	c3                   	ret    
c00130a3:	90                   	nop

c00130a4 <Directory::close()>:
c00130a4:	53                   	push   ebx
c00130a5:	b8 0b 00 00 00       	mov    eax,0xb
c00130aa:	83 ec 08             	sub    esp,0x8
c00130ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130b8:	80 fa 19             	cmp    dl,0x19
c00130bb:	77 41                	ja     c00130fe <Directory::close()+0x5a>
c00130bd:	8b 1c 95 40 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd22c0]
c00130c4:	85 db                	test   ebx,ebx
c00130c6:	74 36                	je     c00130fe <Directory::close()+0x5a>
c00130c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00130cf:	74 2d                	je     c00130fe <Directory::close()+0x5a>
c00130d1:	b8 05 00 00 00       	mov    eax,0x5
c00130d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130da:	74 22                	je     c00130fe <Directory::close()+0x5a>
c00130dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00130e0:	8b 04 95 40 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd22c0]
c00130e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130ed:	53                   	push   ebx
c00130ee:	53                   	push   ebx
c00130ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00130f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00130f7:	50                   	push   eax
c00130f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00130fb:	83 c4 10             	add    esp,0x10
c00130fe:	83 c4 08             	add    esp,0x8
c0013101:	5b                   	pop    ebx
c0013102:	c3                   	ret    
c0013103:	90                   	nop

c0013104 <Directory::unlink()>:
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	b8 0b 00 00 00       	mov    eax,0xb
c001310c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013110:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013117:	80 f9 19             	cmp    cl,0x19
c001311a:	77 2f                	ja     c001314b <Directory::unlink()+0x47>
c001311c:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0013123:	85 c9                	test   ecx,ecx
c0013125:	74 24                	je     c001314b <Directory::unlink()+0x47>
c0013127:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001312d:	85 c9                	test   ecx,ecx
c001312f:	74 1a                	je     c001314b <Directory::unlink()+0x47>
c0013131:	b8 06 00 00 00       	mov    eax,0x6
c0013136:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001313a:	75 0f                	jne    c001314b <Directory::unlink()+0x47>
c001313c:	83 c2 0d             	add    edx,0xd
c001313f:	50                   	push   eax
c0013140:	50                   	push   eax
c0013141:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013143:	52                   	push   edx
c0013144:	51                   	push   ecx
c0013145:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	83 c4 0c             	add    esp,0xc
c001314e:	c3                   	ret    
c001314f:	90                   	nop

c0013150 <Directory::rename(char const*)>:
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	b8 0b 00 00 00       	mov    eax,0xb
c0013158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001315c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013163:	80 f9 19             	cmp    cl,0x19
c0013166:	77 32                	ja     c001319a <Directory::rename(char const*)+0x4a>
c0013168:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c001316f:	85 c9                	test   ecx,ecx
c0013171:	74 27                	je     c001319a <Directory::rename(char const*)+0x4a>
c0013173:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013179:	85 c9                	test   ecx,ecx
c001317b:	74 1d                	je     c001319a <Directory::rename(char const*)+0x4a>
c001317d:	b8 06 00 00 00       	mov    eax,0x6
c0013182:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013186:	75 12                	jne    c001319a <Directory::rename(char const*)+0x4a>
c0013188:	83 c2 0d             	add    edx,0xd
c001318b:	50                   	push   eax
c001318c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001318e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013192:	52                   	push   edx
c0013193:	51                   	push   ecx
c0013194:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	83 c4 0c             	add    esp,0xc
c001319d:	c3                   	ret    

c001319e <Directory::exists()>:
c001319e:	83 ec 0c             	sub    esp,0xc
c00131a1:	31 c0                	xor    eax,eax
c00131a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131ae:	80 f9 19             	cmp    cl,0x19
c00131b1:	77 24                	ja     c00131d7 <Directory::exists()+0x39>
c00131b3:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c00131ba:	85 c9                	test   ecx,ecx
c00131bc:	74 19                	je     c00131d7 <Directory::exists()+0x39>
c00131be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131c4:	85 c9                	test   ecx,ecx
c00131c6:	74 0f                	je     c00131d7 <Directory::exists()+0x39>
c00131c8:	83 c2 0d             	add    edx,0xd
c00131cb:	50                   	push   eax
c00131cc:	50                   	push   eax
c00131cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131cf:	52                   	push   edx
c00131d0:	51                   	push   ecx
c00131d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	83 c4 0c             	add    esp,0xc
c00131da:	c3                   	ret    
c00131db:	90                   	nop

c00131dc <Directory::read(dirent*)>:
c00131dc:	83 ec 1c             	sub    esp,0x1c
c00131df:	b8 0b 00 00 00       	mov    eax,0xb
c00131e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00131e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131ef:	80 fa 19             	cmp    dl,0x19
c00131f2:	77 30                	ja     c0013224 <Directory::read(dirent*)+0x48>
c00131f4:	8b 14 95 40 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd22c0]
c00131fb:	85 d2                	test   edx,edx
c00131fd:	74 25                	je     c0013224 <Directory::read(dirent*)+0x48>
c00131ff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013206:	74 1c                	je     c0013224 <Directory::read(dirent*)+0x48>
c0013208:	83 ec 0c             	sub    esp,0xc
c001320b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001320d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013211:	52                   	push   edx
c0013212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013216:	6a 00                	push   0x0
c0013218:	68 10 01 00 00       	push   0x110
c001321d:	51                   	push   ecx
c001321e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013221:	83 c4 20             	add    esp,0x20
c0013224:	83 c4 1c             	add    esp,0x1c
c0013227:	c3                   	ret    

c0013228 <Directory::create()>:
c0013228:	83 ec 0c             	sub    esp,0xc
c001322b:	b8 0b 00 00 00       	mov    eax,0xb
c0013230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013234:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001323b:	80 f9 19             	cmp    cl,0x19
c001323e:	77 2f                	ja     c001326f <Directory::create()+0x47>
c0013240:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c0013247:	85 c9                	test   ecx,ecx
c0013249:	74 24                	je     c001326f <Directory::create()+0x47>
c001324b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013251:	85 c9                	test   ecx,ecx
c0013253:	74 1a                	je     c001326f <Directory::create()+0x47>
c0013255:	b8 06 00 00 00       	mov    eax,0x6
c001325a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001325e:	75 0f                	jne    c001326f <Directory::create()+0x47>
c0013260:	83 c2 0d             	add    edx,0xd
c0013263:	50                   	push   eax
c0013264:	50                   	push   eax
c0013265:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013267:	52                   	push   edx
c0013268:	51                   	push   ecx
c0013269:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	83 c4 0c             	add    esp,0xc
c0013272:	c3                   	ret    
c0013273:	90                   	nop

c0013274 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013274:	b8 0a 00 00 00       	mov    eax,0xa
c0013279:	c3                   	ret    

c001327a <Bus::Bus(char const*)>:
c001327a:	83 ec 0c             	sub    esp,0xc
c001327d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013281:	83 ec 08             	sub    esp,0x8
c0013284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013288:	50                   	push   eax
c0013289:	e8 88 09 00 00       	call   c0013c16 <Device::Device(char const*)>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	ba 10 a7 02 c0       	mov    edx,0xc002a710
c0013296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329a:	89 10                	mov    DWORD PTR [eax],edx
c001329c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00132aa:	90                   	nop
c00132ab:	83 c4 0c             	add    esp,0xc
c00132ae:	c3                   	ret    
c00132af:	90                   	nop

c00132b0 <Bus::~Bus()>:
c00132b0:	83 ec 0c             	sub    esp,0xc
c00132b3:	ba 10 a7 02 c0       	mov    edx,0xc002a710
c00132b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132bc:	89 10                	mov    DWORD PTR [eax],edx
c00132be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	50                   	push   eax
c00132c6:	e8 15 06 00 00       	call   c00138e0 <Device::~Device()>
c00132cb:	83 c4 10             	add    esp,0x10
c00132ce:	90                   	nop
c00132cf:	83 c4 0c             	add    esp,0xc
c00132d2:	c3                   	ret    
c00132d3:	90                   	nop

c00132d4 <Bus::~Bus()>:
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	83 ec 0c             	sub    esp,0xc
c00132da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132de:	e8 cd ff ff ff       	call   c00132b0 <Bus::~Bus()>
c00132e3:	83 c4 10             	add    esp,0x10
c00132e6:	83 ec 08             	sub    esp,0x8
c00132e9:	68 58 01 00 00       	push   0x158
c00132ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132f2:	e8 0a f2 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c00132f7:	83 c4 10             	add    esp,0x10
c00132fa:	83 c4 0c             	add    esp,0xc
c00132fd:	c3                   	ret    

c00132fe <Buzzer::Buzzer(char const*)>:
c00132fe:	83 ec 0c             	sub    esp,0xc
c0013301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013305:	83 ec 08             	sub    esp,0x8
c0013308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001330c:	50                   	push   eax
c001330d:	e8 04 09 00 00       	call   c0013c16 <Device::Device(char const*)>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	ba 3c a7 02 c0       	mov    edx,0xc002a73c
c001331a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001331e:	89 10                	mov    DWORD PTR [eax],edx
c0013320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013324:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001332e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013332:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001333c:	90                   	nop
c001333d:	83 c4 0c             	add    esp,0xc
c0013340:	c3                   	ret    
c0013341:	90                   	nop

c0013342 <Buzzer::~Buzzer()>:
c0013342:	83 ec 0c             	sub    esp,0xc
c0013345:	ba 3c a7 02 c0       	mov    edx,0xc002a73c
c001334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334e:	89 10                	mov    DWORD PTR [eax],edx
c0013350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013354:	83 ec 0c             	sub    esp,0xc
c0013357:	50                   	push   eax
c0013358:	e8 83 05 00 00       	call   c00138e0 <Device::~Device()>
c001335d:	83 c4 10             	add    esp,0x10
c0013360:	90                   	nop
c0013361:	83 c4 0c             	add    esp,0xc
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <Buzzer::~Buzzer()>:
c0013366:	83 ec 0c             	sub    esp,0xc
c0013369:	83 ec 0c             	sub    esp,0xc
c001336c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013370:	e8 cd ff ff ff       	call   c0013342 <Buzzer::~Buzzer()>
c0013375:	83 c4 10             	add    esp,0x10
c0013378:	83 ec 08             	sub    esp,0x8
c001337b:	68 5c 01 00 00       	push   0x15c
c0013380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013384:	e8 78 f1 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	83 c4 0c             	add    esp,0xc
c001338f:	c3                   	ret    

c0013390 <Buzzer::stop()>:
c0013390:	83 ec 14             	sub    esp,0x14
c0013393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013397:	8b 10                	mov    edx,DWORD PTR [eax]
c0013399:	6a 00                	push   0x0
c001339b:	50                   	push   eax
c001339c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001339f:	83 c4 1c             	add    esp,0x1c
c00133a2:	c3                   	ret    

c00133a3 <beepThread(void*)>:
c00133a3:	53                   	push   ebx
c00133a4:	83 ec 08             	sub    esp,0x8
c00133a7:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00133ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133b0:	48                   	dec    eax
c00133b1:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c00133b6:	75 01                	jne    c00133b9 <beepThread(void*)+0x16>
c00133b8:	fb                   	sti    
c00133b9:	50                   	push   eax
c00133ba:	50                   	push   eax
c00133bb:	b8 40 42 0f 00       	mov    eax,0xf4240
c00133c0:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00133c6:	52                   	push   edx
c00133c7:	50                   	push   eax
c00133c8:	e8 dc a7 00 00       	call   c001dba9 <nanoSleep(unsigned long long)>
c00133cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133d0:	e8 bb ff ff ff       	call   c0013390 <Buzzer::stop()>
c00133d5:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00133dd:	83 c4 18             	add    esp,0x18
c00133e0:	5b                   	pop    ebx
c00133e1:	e9 bf a6 00 00       	jmp    c001daa5 <blockTask(TaskState)>

c00133e6 <Buzzer::beep(int, int, bool)>:
c00133e6:	57                   	push   edi
c00133e7:	56                   	push   esi
c00133e8:	53                   	push   ebx
c00133e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00133f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133f5:	52                   	push   edx
c00133f6:	52                   	push   edx
c00133f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00133f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133fd:	56                   	push   esi
c00133fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	89 f8                	mov    eax,edi
c0013406:	84 c0                	test   al,al
c0013408:	74 1f                	je     c0013429 <Buzzer::beep(int, int, bool)+0x43>
c001340a:	50                   	push   eax
c001340b:	50                   	push   eax
c001340c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013412:	99                   	cdq    
c0013413:	52                   	push   edx
c0013414:	50                   	push   eax
c0013415:	e8 8f a7 00 00       	call   c001dba9 <nanoSleep(unsigned long long)>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013421:	5b                   	pop    ebx
c0013422:	5e                   	pop    esi
c0013423:	5f                   	pop    edi
c0013424:	e9 67 ff ff ff       	jmp    c0013390 <Buzzer::stop()>
c0013429:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001342f:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0013434:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001343c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013440:	c7 44 24 14 a3 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc00133a3
c0013448:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001344c:	5b                   	pop    ebx
c001344d:	5e                   	pop    esi
c001344e:	5f                   	pop    edi
c001344f:	e9 56 a2 00 00       	jmp    c001d6aa <Process::createThread(void (*)(void*), void*, int)>

c0013454 <User::loadClockSettings(int)>:
c0013454:	53                   	push   ebx
c0013455:	83 ec 14             	sub    esp,0x14
c0013458:	68 14 01 00 00       	push   0x114
c001345d:	e8 37 c1 ff ff       	call   c000f599 <malloc>
c0013462:	83 c4 0c             	add    esp,0xc
c0013465:	89 c3                	mov    ebx,eax
c0013467:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c001346d:	68 64 a7 02 c0       	push   0xc002a764
c0013472:	50                   	push   eax
c0013473:	e8 c0 f6 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c0013478:	58                   	pop    eax
c0013479:	5a                   	pop    edx
c001347a:	6a 01                	push   0x1
c001347c:	53                   	push   ebx
c001347d:	e8 1a f7 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c0013482:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013485:	e8 70 f7 ff ff       	call   c0012bfa <File::close()>
c001348a:	83 c4 10             	add    esp,0x10
c001348d:	85 db                	test   ebx,ebx
c001348f:	74 0f                	je     c00134a0 <User::loadClockSettings(int)+0x4c>
c0013491:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013493:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013497:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001349a:	83 c4 08             	add    esp,0x8
c001349d:	5b                   	pop    ebx
c001349e:	ff e0                	jmp    eax
c00134a0:	83 c4 08             	add    esp,0x8
c00134a3:	5b                   	pop    ebx
c00134a4:	c3                   	ret    
c00134a5:	90                   	nop

c00134a6 <Clock::Clock(char const*)>:
c00134a6:	83 ec 0c             	sub    esp,0xc
c00134a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ad:	83 ec 08             	sub    esp,0x8
c00134b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134b4:	50                   	push   eax
c00134b5:	e8 5c 07 00 00       	call   c0013c16 <Device::Device(char const*)>
c00134ba:	83 c4 10             	add    esp,0x10
c00134bd:	ba 8c a7 02 c0       	mov    edx,0xc002a78c
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	89 10                	mov    DWORD PTR [eax],edx
c00134c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134cc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134d6:	90                   	nop
c00134d7:	83 c4 0c             	add    esp,0xc
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <Clock::~Clock()>:
c00134dc:	83 ec 0c             	sub    esp,0xc
c00134df:	ba 8c a7 02 c0       	mov    edx,0xc002a78c
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	89 10                	mov    DWORD PTR [eax],edx
c00134ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ee:	83 ec 0c             	sub    esp,0xc
c00134f1:	50                   	push   eax
c00134f2:	e8 e9 03 00 00       	call   c00138e0 <Device::~Device()>
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	90                   	nop
c00134fb:	83 c4 0c             	add    esp,0xc
c00134fe:	c3                   	ret    
c00134ff:	90                   	nop

c0013500 <Clock::~Clock()>:
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001350a:	e8 cd ff ff ff       	call   c00134dc <Clock::~Clock()>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 ec 08             	sub    esp,0x8
c0013515:	68 58 01 00 00       	push   0x158
c001351a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001351e:	e8 de ef ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	83 c4 0c             	add    esp,0xc
c0013529:	c3                   	ret    

c001352a <Clock::timeInSecondsLocal()>:
c001352a:	53                   	push   ebx
c001352b:	83 ec 14             	sub    esp,0x14
c001352e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013532:	8b 10                	mov    edx,DWORD PTR [eax]
c0013534:	50                   	push   eax
c0013535:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013538:	0f b6 0d bc d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d8bc
c001353f:	03 0d c0 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d8c0
c0013545:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001354b:	89 cb                	mov    ebx,ecx
c001354d:	c1 fb 1f             	sar    ebx,0x1f
c0013550:	01 c8                	add    eax,ecx
c0013552:	11 da                	adc    edx,ebx
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	31 c9                	xor    ecx,ecx
c0013559:	80 3d bd d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8bd,0x0
c0013560:	74 05                	je     c0013567 <Clock::timeInSecondsLocal()+0x3d>
c0013562:	b9 08 07 00 00       	mov    ecx,0x708
c0013567:	31 db                	xor    ebx,ebx
c0013569:	01 c8                	add    eax,ecx
c001356b:	11 da                	adc    edx,ebx
c001356d:	83 c4 08             	add    esp,0x8
c0013570:	5b                   	pop    ebx
c0013571:	c3                   	ret    

c0013572 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013572:	57                   	push   edi
c0013573:	56                   	push   esi
c0013574:	53                   	push   ebx
c0013575:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013579:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001357d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001357f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013583:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013586:	0f b6 05 bc d8 02 c0 	movzx  eax,BYTE PTR ds:0xc002d8bc
c001358d:	03 05 c0 d8 02 c0    	add    eax,DWORD PTR ds:0xc002d8c0
c0013593:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013599:	99                   	cdq    
c001359a:	29 c6                	sub    esi,eax
c001359c:	19 d7                	sbb    edi,edx
c001359e:	89 f0                	mov    eax,esi
c00135a0:	89 fa                	mov    edx,edi
c00135a2:	31 f6                	xor    esi,esi
c00135a4:	80 3d bd d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8bd,0x0
c00135ab:	74 05                	je     c00135b2 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00135ad:	be 08 07 00 00       	mov    esi,0x708
c00135b2:	31 ff                	xor    edi,edi
c00135b4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135b8:	29 f0                	sub    eax,esi
c00135ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135be:	19 fa                	sbb    edx,edi
c00135c0:	89 d8                	mov    eax,ebx
c00135c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135c6:	5b                   	pop    ebx
c00135c7:	5e                   	pop    esi
c00135c8:	5f                   	pop    edi
c00135c9:	ff e0                	jmp    eax

c00135cb <datetimeToSeconds(datetime_t)>:
c00135cb:	55                   	push   ebp
c00135cc:	57                   	push   edi
c00135cd:	56                   	push   esi
c00135ce:	53                   	push   ebx
c00135cf:	83 ec 14             	sub    esp,0x14
c00135d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135d6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135da:	89 d3                	mov    ebx,edx
c00135dc:	0f b6 c6             	movzx  eax,dh
c00135df:	c1 eb 10             	shr    ebx,0x10
c00135e2:	48                   	dec    eax
c00135e3:	66 81 eb 6c 07       	sub    bx,0x76c
c00135e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00135ec:	0f b6 f5             	movzx  esi,ch
c00135ef:	89 cf                	mov    edi,ecx
c00135f1:	6b f6 3c             	imul   esi,esi,0x3c
c00135f4:	c1 ef 10             	shr    edi,0x10
c00135f7:	0f b6 c9             	movzx  ecx,cl
c00135fa:	89 f8                	mov    eax,edi
c00135fc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013602:	0f b6 f8             	movzx  edi,al
c0013605:	0f b6 d2             	movzx  edx,dl
c0013608:	01 fe                	add    esi,edi
c001360a:	01 f1                	add    ecx,esi
c001360c:	0f b7 f3             	movzx  esi,bx
c001360f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013613:	c1 f9 1f             	sar    ecx,0x1f
c0013616:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001361b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001361f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013624:	8b 0c 8d c0 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5840]
c001362b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001362f:	76 29                	jbe    c001365a <datetimeToSeconds(datetime_t)+0x8f>
c0013631:	f6 c3 03             	test   bl,0x3
c0013634:	75 24                	jne    c001365a <datetimeToSeconds(datetime_t)+0x8f>
c0013636:	31 d2                	xor    edx,edx
c0013638:	bf 64 00 00 00       	mov    edi,0x64
c001363d:	89 d8                	mov    eax,ebx
c001363f:	66 f7 f7             	div    di
c0013642:	66 85 d2             	test   dx,dx
c0013645:	75 12                	jne    c0013659 <datetimeToSeconds(datetime_t)+0x8e>
c0013647:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001364d:	bf 90 01 00 00       	mov    edi,0x190
c0013652:	99                   	cdq    
c0013653:	f7 ff                	idiv   edi
c0013655:	85 d2                	test   edx,edx
c0013657:	75 01                	jne    c001365a <datetimeToSeconds(datetime_t)+0x8f>
c0013659:	41                   	inc    ecx
c001365a:	66 83 fb 46          	cmp    bx,0x46
c001365e:	76 45                	jbe    c00136a5 <datetimeToSeconds(datetime_t)+0xda>
c0013660:	bb 46 00 00 00       	mov    ebx,0x46
c0013665:	bf 64 00 00 00       	mov    edi,0x64
c001366a:	bd 90 01 00 00       	mov    ebp,0x190
c001366f:	b8 6d 01 00 00       	mov    eax,0x16d
c0013674:	f6 c3 03             	test   bl,0x3
c0013677:	75 23                	jne    c001369c <datetimeToSeconds(datetime_t)+0xd1>
c0013679:	89 d8                	mov    eax,ebx
c001367b:	99                   	cdq    
c001367c:	f7 ff                	idiv   edi
c001367e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013683:	85 d2                	test   edx,edx
c0013685:	75 15                	jne    c001369c <datetimeToSeconds(datetime_t)+0xd1>
c0013687:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001368d:	99                   	cdq    
c001368e:	f7 fd                	idiv   ebp
c0013690:	83 fa 01             	cmp    edx,0x1
c0013693:	19 c0                	sbb    eax,eax
c0013695:	f7 d0                	not    eax
c0013697:	05 6e 01 00 00       	add    eax,0x16e
c001369c:	01 c1                	add    ecx,eax
c001369e:	43                   	inc    ebx
c001369f:	39 f3                	cmp    ebx,esi
c00136a1:	7c cc                	jl     c001366f <datetimeToSeconds(datetime_t)+0xa4>
c00136a3:	eb 35                	jmp    c00136da <datetimeToSeconds(datetime_t)+0x10f>
c00136a5:	74 33                	je     c00136da <datetimeToSeconds(datetime_t)+0x10f>
c00136a7:	b8 45 00 00 00       	mov    eax,0x45
c00136ac:	89 c2                	mov    edx,eax
c00136ae:	83 e2 03             	and    edx,0x3
c00136b1:	39 f0                	cmp    eax,esi
c00136b3:	7e 0f                	jle    c00136c4 <datetimeToSeconds(datetime_t)+0xf9>
c00136b5:	83 fa 01             	cmp    edx,0x1
c00136b8:	19 d2                	sbb    edx,edx
c00136ba:	48                   	dec    eax
c00136bb:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136c2:	eb e8                	jmp    c00136ac <datetimeToSeconds(datetime_t)+0xe1>
c00136c4:	b8 6d 01 00 00       	mov    eax,0x16d
c00136c9:	85 d2                	test   edx,edx
c00136cb:	75 0b                	jne    c00136d8 <datetimeToSeconds(datetime_t)+0x10d>
c00136cd:	66 83 fb 01          	cmp    bx,0x1
c00136d1:	19 c0                	sbb    eax,eax
c00136d3:	05 6e 01 00 00       	add    eax,0x16e
c00136d8:	29 c1                	sub    ecx,eax
c00136da:	b8 80 51 01 00       	mov    eax,0x15180
c00136df:	f7 e9                	imul   ecx
c00136e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00136e5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00136e9:	83 c4 14             	add    esp,0x14
c00136ec:	5b                   	pop    ebx
c00136ed:	5e                   	pop    esi
c00136ee:	5f                   	pop    edi
c00136ef:	5d                   	pop    ebp
c00136f0:	c3                   	ret    
c00136f1:	90                   	nop

c00136f2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00136f2:	57                   	push   edi
c00136f3:	56                   	push   esi
c00136f4:	53                   	push   ebx
c00136f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00136fb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00136fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013702:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013706:	e8 c0 fe ff ff       	call   c00135cb <datetimeToSeconds(datetime_t)>
c001370b:	59                   	pop    ecx
c001370c:	0f b6 0d bc d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d8bc
c0013713:	5b                   	pop    ebx
c0013714:	03 0d c0 d8 02 c0    	add    ecx,DWORD PTR ds:0xc002d8c0
c001371a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013720:	89 cb                	mov    ebx,ecx
c0013722:	c1 fb 1f             	sar    ebx,0x1f
c0013725:	29 c8                	sub    eax,ecx
c0013727:	19 da                	sbb    edx,ebx
c0013729:	31 c9                	xor    ecx,ecx
c001372b:	80 3d bd d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8bd,0x0
c0013732:	74 05                	je     c0013739 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013734:	b9 08 07 00 00       	mov    ecx,0x708
c0013739:	31 db                	xor    ebx,ebx
c001373b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001373f:	29 c8                	sub    eax,ecx
c0013741:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013745:	19 da                	sbb    edx,ebx
c0013747:	89 f8                	mov    eax,edi
c0013749:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001374d:	5b                   	pop    ebx
c001374e:	5e                   	pop    esi
c001374f:	5f                   	pop    edi
c0013750:	ff e0                	jmp    eax

c0013752 <secondsToDatetime(unsigned long long)>:
c0013752:	55                   	push   ebp
c0013753:	57                   	push   edi
c0013754:	56                   	push   esi
c0013755:	53                   	push   ebx
c0013756:	83 ec 1c             	sub    esp,0x1c
c0013759:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001375d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013761:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013765:	6a 00                	push   0x0
c0013767:	68 80 51 01 00       	push   0x15180
c001376c:	55                   	push   ebp
c001376d:	57                   	push   edi
c001376e:	e8 a1 2e 01 00       	call   c0026614 <__udivdi3>
c0013773:	83 c4 10             	add    esp,0x10
c0013776:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001377c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013780:	6a 00                	push   0x0
c0013782:	68 80 51 01 00       	push   0x15180
c0013787:	55                   	push   ebp
c0013788:	57                   	push   edi
c0013789:	bf 10 0e 00 00       	mov    edi,0xe10
c001378e:	e8 81 2f 01 00       	call   c0026714 <__umoddi3>
c0013793:	83 c4 10             	add    esp,0x10
c0013796:	99                   	cdq    
c0013797:	f7 ff                	idiv   edi
c0013799:	bf 3c 00 00 00       	mov    edi,0x3c
c001379e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00137a1:	89 d0                	mov    eax,edx
c00137a3:	99                   	cdq    
c00137a4:	f7 ff                	idiv   edi
c00137a6:	85 db                	test   ebx,ebx
c00137a8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00137ab:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00137ae:	79 11                	jns    c00137c1 <secondsToDatetime(unsigned long long)+0x6f>
c00137b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137b4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137ba:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137bf:	eb 07                	jmp    c00137c8 <secondsToDatetime(unsigned long long)+0x76>
c00137c1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137c6:	89 d8                	mov    eax,ebx
c00137c8:	bf b4 05 00 00       	mov    edi,0x5b4
c00137cd:	99                   	cdq    
c00137ce:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137d3:	f7 f9                	idiv   ecx
c00137d5:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137de:	31 d2                	xor    edx,edx
c00137e0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00137e8:	01 c3                	add    ebx,eax
c00137ea:	89 d8                	mov    eax,ebx
c00137ec:	f7 f1                	div    ecx
c00137ee:	31 d2                	xor    edx,edx
c00137f0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00137f3:	89 d8                	mov    eax,ebx
c00137f5:	f7 f7                	div    edi
c00137f7:	31 d2                	xor    edx,edx
c00137f9:	29 c1                	sub    ecx,eax
c00137fb:	89 d8                	mov    eax,ebx
c00137fd:	f7 f5                	div    ebp
c00137ff:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013804:	29 c1                	sub    ecx,eax
c0013806:	31 d2                	xor    edx,edx
c0013808:	89 c8                	mov    eax,ecx
c001380a:	f7 f5                	div    ebp
c001380c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013815:	31 d2                	xor    edx,edx
c0013817:	89 c8                	mov    eax,ecx
c0013819:	f7 f5                	div    ebp
c001381b:	31 d2                	xor    edx,edx
c001381d:	01 c3                	add    ebx,eax
c001381f:	89 c8                	mov    eax,ecx
c0013821:	f7 f7                	div    edi
c0013823:	bf 99 00 00 00       	mov    edi,0x99
c0013828:	29 c3                	sub    ebx,eax
c001382a:	31 d2                	xor    edx,edx
c001382c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013834:	29 c3                	sub    ebx,eax
c0013836:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013839:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001383c:	bb 05 00 00 00       	mov    ebx,0x5
c0013841:	83 c1 02             	add    ecx,0x2
c0013844:	89 c8                	mov    eax,ecx
c0013846:	f7 f7                	div    edi
c0013848:	31 d2                	xor    edx,edx
c001384a:	89 c7                	mov    edi,eax
c001384c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013852:	83 c0 02             	add    eax,0x2
c0013855:	f7 f3                	div    ebx
c0013857:	89 eb                	mov    ebx,ebp
c0013859:	29 c3                	sub    ebx,eax
c001385b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013861:	88 1e                	mov    BYTE PTR [esi],bl
c0013863:	19 c0                	sbb    eax,eax
c0013865:	31 d2                	xor    edx,edx
c0013867:	83 e0 0c             	and    eax,0xc
c001386a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001386e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013876:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001387a:	83 f9 01             	cmp    ecx,0x1
c001387d:	0f 96 c2             	setbe  dl
c0013880:	41                   	inc    ecx
c0013881:	01 d0                	add    eax,edx
c0013883:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013886:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001388a:	83 c4 1c             	add    esp,0x1c
c001388d:	89 f0                	mov    eax,esi
c001388f:	5b                   	pop    ebx
c0013890:	5e                   	pop    esi
c0013891:	5f                   	pop    edi
c0013892:	5d                   	pop    ebp
c0013893:	c2 04 00             	ret    0x4

c0013896 <Clock::timeInDatetimeLocal()>:
c0013896:	53                   	push   ebx
c0013897:	83 ec 14             	sub    esp,0x14
c001389a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001389e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138a2:	e8 83 fc ff ff       	call   c001352a <Clock::timeInSecondsLocal()>
c00138a7:	83 c4 0c             	add    esp,0xc
c00138aa:	52                   	push   edx
c00138ab:	50                   	push   eax
c00138ac:	53                   	push   ebx
c00138ad:	e8 a0 fe ff ff       	call   c0013752 <secondsToDatetime(unsigned long long)>
c00138b2:	89 d8                	mov    eax,ebx
c00138b4:	83 c4 14             	add    esp,0x14
c00138b7:	5b                   	pop    ebx
c00138b8:	c2 04 00             	ret    0x4
c00138bb:	90                   	nop

c00138bc <Device::hibernate()>:
c00138bc:	c3                   	ret    
c00138bd:	90                   	nop

c00138be <Device::wake()>:
c00138be:	c3                   	ret    
c00138bf:	90                   	nop

c00138c0 <Device::detect()>:
c00138c0:	c3                   	ret    
c00138c1:	90                   	nop

c00138c2 <Device::disableLegacy()>:
c00138c2:	c3                   	ret    
c00138c3:	90                   	nop

c00138c4 <Device::powerSaving(PowerSavingLevel)>:
c00138c4:	c3                   	ret    
c00138c5:	90                   	nop

c00138c6 <DriverlessDevice::close(int, int, void*)>:
c00138c6:	31 c0                	xor    eax,eax
c00138c8:	c3                   	ret    
c00138c9:	90                   	nop

c00138ca <DriverlessDevice::detect()>:
c00138ca:	c3                   	ret    
c00138cb:	90                   	nop

c00138cc <DriverlessDevice::open(int, int, void*)>:
c00138cc:	83 ec 18             	sub    esp,0x18
c00138cf:	68 f0 a7 02 c0       	push   0xc002a7f0
c00138d4:	e8 6c 64 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00138d9:	83 c8 ff             	or     eax,0xffffffff
c00138dc:	83 c4 1c             	add    esp,0x1c
c00138df:	c3                   	ret    

c00138e0 <Device::~Device()>:
c00138e0:	ba 50 a8 02 c0       	mov    edx,0xc002a850
c00138e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138e9:	89 10                	mov    DWORD PTR [eax],edx
c00138eb:	90                   	nop
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <Device::~Device()>:
c00138ee:	83 ec 0c             	sub    esp,0xc
c00138f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00138f5:	e8 e6 ff ff ff       	call   c00138e0 <Device::~Device()>
c00138fa:	83 c4 04             	add    esp,0x4
c00138fd:	83 ec 08             	sub    esp,0x8
c0013900:	68 58 01 00 00       	push   0x158
c0013905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013909:	e8 f3 eb ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c001390e:	83 c4 10             	add    esp,0x10
c0013911:	83 c4 0c             	add    esp,0xc
c0013914:	c3                   	ret    
c0013915:	90                   	nop

c0013916 <Device::findAndLoadDriver()>:
c0013916:	c7 44 24 04 0e a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a80e
c001391e:	e9 b6 ec ff ff       	jmp    c00125d9 <Dbg::kprintf(char const*, ...)>
c0013923:	90                   	nop

c0013924 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013924:	57                   	push   edi
c0013925:	b9 09 00 00 00       	mov    ecx,0x9
c001392a:	56                   	push   esi
c001392b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001392f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013933:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001393d:	81 c7 18 01 00 00    	add    edi,0x118
c0013943:	fc                   	cld    
c0013944:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013946:	5e                   	pop    esi
c0013947:	5f                   	pop    edi
c0013948:	c3                   	ret    
c0013949:	90                   	nop

c001394a <Device::preOpenACPI(void*, char*, char*)>:
c001394a:	57                   	push   edi
c001394b:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013950:	56                   	push   esi
c0013951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013959:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013963:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013969:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001396f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013973:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013975:	b9 0e 00 00 00       	mov    ecx,0xe
c001397a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013980:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013984:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013986:	5e                   	pop    esi
c0013987:	5f                   	pop    edi
c0013988:	c3                   	ret    
c0013989:	90                   	nop

c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001398a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001398e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013993:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001399a:	75 0b                	jne    c00139a7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001399c:	8b 00                	mov    eax,DWORD PTR [eax]
c001399e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00139a5:	eb 1e                	jmp    c00139c5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00139a7:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00139ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139b2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139c2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139c5:	ff e0                	jmp    eax
c00139c7:	90                   	nop

c00139c8 <Device::getParent()>:
c00139c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139cc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00139d2:	c3                   	ret    
c00139d3:	90                   	nop

c00139d4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139dd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139e4:	75 0b                	jne    c00139f1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00139e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00139e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139ec:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00139ef:	eb 1e                	jmp    c0013a0f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00139f1:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00139f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139fc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a0c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a0f:	ff e0                	jmp    eax
c0013a11:	90                   	nop

c0013a12 <Device::addChild(Device*)>:
c0013a12:	53                   	push   ebx
c0013a13:	83 ec 08             	sub    esp,0x8
c0013a16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a1e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a24:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a2c:	85 d2                	test   edx,edx
c0013a2e:	74 04                	je     c0013a34 <Device::addChild(Device*)+0x22>
c0013a30:	89 d3                	mov    ebx,edx
c0013a32:	eb f6                	jmp    c0013a2a <Device::addChild(Device*)+0x18>
c0013a34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a37:	83 ec 0c             	sub    esp,0xc
c0013a3a:	6a 08                	push   0x8
c0013a3c:	e8 58 bb ff ff       	call   c000f599 <malloc>
c0013a41:	89 03                	mov    DWORD PTR [ebx],eax
c0013a43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a50:	83 c4 18             	add    esp,0x18
c0013a53:	5b                   	pop    ebx
c0013a54:	c3                   	ret    
c0013a55:	90                   	nop

c0013a56 <Device::removeAllChildren()>:
c0013a56:	56                   	push   esi
c0013a57:	53                   	push   ebx
c0013a58:	52                   	push   edx
c0013a59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a5d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a66:	74 17                	je     c0013a7f <Device::removeAllChildren()+0x29>
c0013a68:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a6b:	85 c0                	test   eax,eax
c0013a6d:	74 0c                	je     c0013a7b <Device::removeAllChildren()+0x25>
c0013a6f:	83 ec 0c             	sub    esp,0xc
c0013a72:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a74:	50                   	push   eax
c0013a75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a78:	83 c4 10             	add    esp,0x10
c0013a7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a7d:	eb e4                	jmp    c0013a63 <Device::removeAllChildren()+0xd>
c0013a7f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a8b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013a91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a98:	58                   	pop    eax
c0013a99:	5b                   	pop    ebx
c0013a9a:	5e                   	pop    esi
c0013a9b:	c3                   	ret    

c0013a9c <Device::hibernateAll()>:
c0013a9c:	53                   	push   ebx
c0013a9d:	83 ec 14             	sub    esp,0x14
c0013aa0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aa6:	53                   	push   ebx
c0013aa7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013aaa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ab0:	83 c4 10             	add    esp,0x10
c0013ab3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ab6:	74 0f                	je     c0013ac7 <Device::hibernateAll()+0x2b>
c0013ab8:	83 ec 0c             	sub    esp,0xc
c0013abb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013abe:	e8 d9 ff ff ff       	call   c0013a9c <Device::hibernateAll()>
c0013ac3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ac5:	eb e9                	jmp    c0013ab0 <Device::hibernateAll()+0x14>
c0013ac7:	83 c4 08             	add    esp,0x8
c0013aca:	5b                   	pop    ebx
c0013acb:	c3                   	ret    

c0013acc <Device::wakeAll()>:
c0013acc:	53                   	push   ebx
c0013acd:	83 ec 14             	sub    esp,0x14
c0013ad0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ad6:	53                   	push   ebx
c0013ad7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ada:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ae0:	83 c4 10             	add    esp,0x10
c0013ae3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ae6:	74 0f                	je     c0013af7 <Device::wakeAll()+0x2b>
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013aee:	e8 d9 ff ff ff       	call   c0013acc <Device::wakeAll()>
c0013af3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013af5:	eb e9                	jmp    c0013ae0 <Device::wakeAll()+0x14>
c0013af7:	83 c4 08             	add    esp,0x8
c0013afa:	5b                   	pop    ebx
c0013afb:	c3                   	ret    

c0013afc <Device::detectAll()>:
c0013afc:	53                   	push   ebx
c0013afd:	83 ec 14             	sub    esp,0x14
c0013b00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b06:	53                   	push   ebx
c0013b07:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b0a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b16:	74 0f                	je     c0013b27 <Device::detectAll()+0x2b>
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b1e:	e8 d9 ff ff ff       	call   c0013afc <Device::detectAll()>
c0013b23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b25:	eb e9                	jmp    c0013b10 <Device::detectAll()+0x14>
c0013b27:	83 c4 08             	add    esp,0x8
c0013b2a:	5b                   	pop    ebx
c0013b2b:	c3                   	ret    

c0013b2c <Device::disableLegacyAll()>:
c0013b2c:	53                   	push   ebx
c0013b2d:	83 ec 14             	sub    esp,0x14
c0013b30:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b36:	53                   	push   ebx
c0013b37:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b46:	74 0f                	je     c0013b57 <Device::disableLegacyAll()+0x2b>
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b4e:	e8 d9 ff ff ff       	call   c0013b2c <Device::disableLegacyAll()>
c0013b53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b55:	eb e9                	jmp    c0013b40 <Device::disableLegacyAll()+0x14>
c0013b57:	83 c4 08             	add    esp,0x8
c0013b5a:	5b                   	pop    ebx
c0013b5b:	c3                   	ret    

c0013b5c <Device::loadDriversForAll()>:
c0013b5c:	53                   	push   ebx
c0013b5d:	83 ec 08             	sub    esp,0x8
c0013b60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b64:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013b6b:	75 0c                	jne    c0013b79 <Device::loadDriversForAll()+0x1d>
c0013b6d:	83 ec 0c             	sub    esp,0xc
c0013b70:	53                   	push   ebx
c0013b71:	e8 a0 fd ff ff       	call   c0013916 <Device::findAndLoadDriver()>
c0013b76:	83 c4 10             	add    esp,0x10
c0013b79:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b7f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b82:	74 12                	je     c0013b96 <Device::loadDriversForAll()+0x3a>
c0013b84:	83 ec 0c             	sub    esp,0xc
c0013b87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b8a:	e8 cd ff ff ff       	call   c0013b5c <Device::loadDriversForAll()>
c0013b8f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	eb e9                	jmp    c0013b7f <Device::loadDriversForAll()+0x23>
c0013b96:	83 c4 08             	add    esp,0x8
c0013b99:	5b                   	pop    ebx
c0013b9a:	c3                   	ret    
c0013b9b:	90                   	nop

c0013b9c <Device::closeAll()>:
c0013b9c:	53                   	push   ebx
c0013b9d:	83 ec 08             	sub    esp,0x8
c0013ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba6:	6a 00                	push   0x0
c0013ba8:	6a 00                	push   0x0
c0013baa:	6a 00                	push   0x0
c0013bac:	53                   	push   ebx
c0013bad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bb0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bb6:	83 c4 10             	add    esp,0x10
c0013bb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bbc:	74 0f                	je     c0013bcd <Device::closeAll()+0x31>
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc4:	e8 d3 ff ff ff       	call   c0013b9c <Device::closeAll()>
c0013bc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bcb:	eb e9                	jmp    c0013bb6 <Device::closeAll()+0x1a>
c0013bcd:	83 c4 08             	add    esp,0x8
c0013bd0:	5b                   	pop    ebx
c0013bd1:	c3                   	ret    

c0013bd2 <Device::powerSavingAll(PowerSavingLevel)>:
c0013bd2:	56                   	push   esi
c0013bd3:	53                   	push   ebx
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bdb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be1:	56                   	push   esi
c0013be2:	53                   	push   ebx
c0013be3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013be6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bec:	83 c4 10             	add    esp,0x10
c0013bef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bf2:	74 0f                	je     c0013c03 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013bf4:	52                   	push   edx
c0013bf5:	52                   	push   edx
c0013bf6:	56                   	push   esi
c0013bf7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bfa:	e8 d3 ff ff ff       	call   c0013bd2 <Device::powerSavingAll(PowerSavingLevel)>
c0013bff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c01:	eb e9                	jmp    c0013bec <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c03:	58                   	pop    eax
c0013c04:	5b                   	pop    ebx
c0013c05:	5e                   	pop    esi
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <Device::setName(char const*)>:
c0013c08:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c10:	e9 f7 cb fe ff       	jmp    c000080c <strcpy>
c0013c15:	90                   	nop

c0013c16 <Device::Device(char const*)>:
c0013c16:	83 ec 1c             	sub    esp,0x1c
c0013c19:	ba 50 a8 02 c0       	mov    edx,0xc002a850
c0013c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c22:	89 10                	mov    DWORD PTR [eax],edx
c0013c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c28:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c44:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c52:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c5c:	83 ec 08             	sub    esp,0x8
c0013c5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c67:	e8 9c ff ff ff       	call   c0013c08 <Device::setName(char const*)>
c0013c6c:	83 c4 10             	add    esp,0x10
c0013c6f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c77:	83 ec 0c             	sub    esp,0xc
c0013c7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c7e:	e8 16 b9 ff ff       	call   c000f599 <malloc>
c0013c83:	83 c4 10             	add    esp,0x10
c0013c86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c97:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ca7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ccd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d02:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013d0c:	90                   	nop
c0013d0d:	83 c4 1c             	add    esp,0x1c
c0013d10:	c3                   	ret    
c0013d11:	90                   	nop

c0013d12 <Device::getName()>:
c0013d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d16:	05 d0 00 00 00       	add    eax,0xd0
c0013d1b:	c3                   	ret    

c0013d1c <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d23:	83 ec 08             	sub    esp,0x8
c0013d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2a:	50                   	push   eax
c0013d2b:	e8 e6 fe ff ff       	call   c0013c16 <Device::Device(char const*)>
c0013d30:	83 c4 10             	add    esp,0x10
c0013d33:	ba 7c a8 02 c0       	mov    edx,0xc002a87c
c0013d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3c:	89 10                	mov    DWORD PTR [eax],edx
c0013d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d42:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d4c:	90                   	nop
c0013d4d:	83 c4 0c             	add    esp,0xc
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d52:	57                   	push   edi
c0013d53:	56                   	push   esi
c0013d54:	53                   	push   ebx
c0013d55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d61:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d67:	75 0c                	jne    c0013d75 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d69:	52                   	push   edx
c0013d6a:	52                   	push   edx
c0013d6b:	53                   	push   ebx
c0013d6c:	56                   	push   esi
c0013d6d:	e8 de 47 01 00       	call   c0028550 <LinkedList<Device>::addElement(Device*)>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d7e:	74 12                	je     c0013d92 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013d80:	50                   	push   eax
c0013d81:	57                   	push   edi
c0013d82:	56                   	push   esi
c0013d83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d86:	e8 c7 ff ff ff       	call   c0013d52 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8d:	83 c4 10             	add    esp,0x10
c0013d90:	eb e9                	jmp    c0013d7b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013d92:	5b                   	pop    ebx
c0013d93:	5e                   	pop    esi
c0013d94:	5f                   	pop    edi
c0013d95:	c3                   	ret    

c0013d96 <getDevicesOfType(DeviceType)>:
c0013d96:	53                   	push   ebx
c0013d97:	83 ec 14             	sub    esp,0x14
c0013d9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d9e:	53                   	push   ebx
c0013d9f:	e8 88 48 01 00       	call   c002862c <LinkedList<Device>::LinkedList()>
c0013da4:	83 c4 0c             	add    esp,0xc
c0013da7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dab:	53                   	push   ebx
c0013dac:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c0013db2:	e8 9b ff ff ff       	call   c0013d52 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013db7:	89 d8                	mov    eax,ebx
c0013db9:	83 c4 18             	add    esp,0x18
c0013dbc:	5b                   	pop    ebx
c0013dbd:	c2 04 00             	ret    0x4

c0013dc0 <HardDiskController::HardDiskController(char const*)>:
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc7:	83 ec 08             	sub    esp,0x8
c0013dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dce:	50                   	push   eax
c0013dcf:	e8 42 fe ff ff       	call   c0013c16 <Device::Device(char const*)>
c0013dd4:	83 c4 10             	add    esp,0x10
c0013dd7:	ba a8 a8 02 c0       	mov    edx,0xc002a8a8
c0013ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de0:	89 10                	mov    DWORD PTR [eax],edx
c0013de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013df0:	90                   	nop
c0013df1:	83 c4 0c             	add    esp,0xc
c0013df4:	c3                   	ret    
c0013df5:	90                   	nop

c0013df6 <HardDiskController::~HardDiskController()>:
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	ba a8 a8 02 c0       	mov    edx,0xc002a8a8
c0013dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e02:	89 10                	mov    DWORD PTR [eax],edx
c0013e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	50                   	push   eax
c0013e0c:	e8 cf fa ff ff       	call   c00138e0 <Device::~Device()>
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	90                   	nop
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	c3                   	ret    
c0013e19:	90                   	nop

c0013e1a <HardDiskController::~HardDiskController()>:
c0013e1a:	83 ec 0c             	sub    esp,0xc
c0013e1d:	83 ec 0c             	sub    esp,0xc
c0013e20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e24:	e8 cd ff ff ff       	call   c0013df6 <HardDiskController::~HardDiskController()>
c0013e29:	83 c4 10             	add    esp,0x10
c0013e2c:	83 ec 08             	sub    esp,0x8
c0013e2f:	68 58 01 00 00       	push   0x158
c0013e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e38:	e8 c4 e6 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	83 c4 0c             	add    esp,0xc
c0013e43:	c3                   	ret    

c0013e44 <PhysicalDisk::eject()>:
c0013e44:	83 c8 ff             	or     eax,0xffffffff
c0013e47:	c3                   	ret    

c0013e48 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e48:	83 ec 0c             	sub    esp,0xc
c0013e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4f:	83 ec 08             	sub    esp,0x8
c0013e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e56:	50                   	push   eax
c0013e57:	e8 ba fd ff ff       	call   c0013c16 <Device::Device(char const*)>
c0013e5c:	83 c4 10             	add    esp,0x10
c0013e5f:	ba d4 a8 02 c0       	mov    edx,0xc002a8d4
c0013e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e68:	89 10                	mov    DWORD PTR [eax],edx
c0013e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e79:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e84:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e92:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e96:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eaa:	90                   	nop
c0013eab:	83 c4 0c             	add    esp,0xc
c0013eae:	c3                   	ret    
c0013eaf:	90                   	nop

c0013eb0 <PhysicalDisk::startCache()>:
c0013eb0:	56                   	push   esi
c0013eb1:	53                   	push   ebx
c0013eb2:	83 ec 10             	sub    esp,0x10
c0013eb5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eb9:	6a 44                	push   0x44
c0013ebb:	e8 d9 b6 ff ff       	call   c000f599 <malloc>
c0013ec0:	89 c6                	mov    esi,eax
c0013ec2:	58                   	pop    eax
c0013ec3:	5a                   	pop    edx
c0013ec4:	53                   	push   ebx
c0013ec5:	56                   	push   esi
c0013ec6:	e8 71 28 00 00       	call   c001673c <VCache::VCache(PhysicalDisk*)>
c0013ecb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ed1:	83 c4 14             	add    esp,0x14
c0013ed4:	5b                   	pop    ebx
c0013ed5:	5e                   	pop    esi
c0013ed6:	c3                   	ret    
c0013ed7:	90                   	nop

c0013ed8 <PhysicalDisk::~PhysicalDisk()>:
c0013ed8:	83 ec 0c             	sub    esp,0xc
c0013edb:	ba d4 a8 02 c0       	mov    edx,0xc002a8d4
c0013ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee4:	89 10                	mov    DWORD PTR [eax],edx
c0013ee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	50                   	push   eax
c0013eee:	e8 ed f9 ff ff       	call   c00138e0 <Device::~Device()>
c0013ef3:	83 c4 10             	add    esp,0x10
c0013ef6:	90                   	nop
c0013ef7:	83 c4 0c             	add    esp,0xc
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <PhysicalDisk::~PhysicalDisk()>:
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	83 ec 0c             	sub    esp,0xc
c0013f02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f06:	e8 cd ff ff ff       	call   c0013ed8 <PhysicalDisk::~PhysicalDisk()>
c0013f0b:	83 c4 10             	add    esp,0x10
c0013f0e:	83 ec 08             	sub    esp,0x8
c0013f11:	68 6c 01 00 00       	push   0x16c
c0013f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1a:	e8 e2 e5 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0013f1f:	83 c4 10             	add    esp,0x10
c0013f22:	83 c4 0c             	add    esp,0xc
c0013f25:	c3                   	ret    

c0013f26 <FPU::FPU(char const*)>:
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2d:	83 ec 08             	sub    esp,0x8
c0013f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f34:	50                   	push   eax
c0013f35:	e8 dc fc ff ff       	call   c0013c16 <Device::Device(char const*)>
c0013f3a:	83 c4 10             	add    esp,0x10
c0013f3d:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0013f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f46:	89 10                	mov    DWORD PTR [eax],edx
c0013f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f4c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f56:	90                   	nop
c0013f57:	83 c4 0c             	add    esp,0xc
c0013f5a:	c3                   	ret    
c0013f5b:	90                   	nop

c0013f5c <FPU::~FPU()>:
c0013f5c:	83 ec 0c             	sub    esp,0xc
c0013f5f:	ba 18 a9 02 c0       	mov    edx,0xc002a918
c0013f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f68:	89 10                	mov    DWORD PTR [eax],edx
c0013f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	50                   	push   eax
c0013f72:	e8 69 f9 ff ff       	call   c00138e0 <Device::~Device()>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	90                   	nop
c0013f7b:	83 c4 0c             	add    esp,0xc
c0013f7e:	c3                   	ret    
c0013f7f:	90                   	nop

c0013f80 <FPU::~FPU()>:
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	83 ec 0c             	sub    esp,0xc
c0013f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f8a:	e8 cd ff ff ff       	call   c0013f5c <FPU::~FPU()>
c0013f8f:	83 c4 10             	add    esp,0x10
c0013f92:	83 ec 08             	sub    esp,0x8
c0013f95:	68 58 01 00 00       	push   0x158
c0013f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f9e:	e8 5e e5 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	83 c4 0c             	add    esp,0xc
c0013fa9:	c3                   	ret    

c0013faa <setupFPU()>:
c0013faa:	53                   	push   ebx
c0013fab:	83 ec 08             	sub    esp,0x8
c0013fae:	8b 15 48 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d748
c0013fb4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fbb:	74 19                	je     c0013fd6 <setupFPU()+0x2c>
c0013fbd:	83 ec 0c             	sub    esp,0xc
c0013fc0:	68 58 01 00 00       	push   0x158
c0013fc5:	e8 cf b5 ff ff       	call   c000f599 <malloc>
c0013fca:	89 c3                	mov    ebx,eax
c0013fcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fcf:	e8 c6 11 01 00       	call   c002519a <AVX::AVX()>
c0013fd4:	eb 5b                	jmp    c0014031 <setupFPU()+0x87>
c0013fd6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013fdc:	84 c0                	test   al,al
c0013fde:	79 19                	jns    c0013ff9 <setupFPU()+0x4f>
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	68 58 01 00 00       	push   0x158
c0013fe8:	e8 ac b5 ff ff       	call   c000f599 <malloc>
c0013fed:	89 c3                	mov    ebx,eax
c0013fef:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ff2:	e8 c9 12 01 00       	call   c00252c0 <SSE::SSE()>
c0013ff7:	eb 38                	jmp    c0014031 <setupFPU()+0x87>
c0013ff9:	a8 20                	test   al,0x20
c0013ffb:	74 19                	je     c0014016 <setupFPU()+0x6c>
c0013ffd:	83 ec 0c             	sub    esp,0xc
c0014000:	68 58 01 00 00       	push   0x158
c0014005:	e8 8f b5 ff ff       	call   c000f599 <malloc>
c001400a:	89 c3                	mov    ebx,eax
c001400c:	89 04 24             	mov    DWORD PTR [esp],eax
c001400f:	e8 16 12 01 00       	call   c002522a <MMX::MMX()>
c0014014:	eb 1b                	jmp    c0014031 <setupFPU()+0x87>
c0014016:	a8 10                	test   al,0x10
c0014018:	74 1c                	je     c0014036 <setupFPU()+0x8c>
c001401a:	83 ec 0c             	sub    esp,0xc
c001401d:	68 58 01 00 00       	push   0x158
c0014022:	e8 72 b5 ff ff       	call   c000f599 <malloc>
c0014027:	89 c3                	mov    ebx,eax
c0014029:	89 04 24             	mov    DWORD PTR [esp],eax
c001402c:	e8 1d 13 01 00       	call   c002534e <x87::x87()>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	eb 24                	jmp    c001405a <setupFPU()+0xb0>
c0014036:	83 e0 ef             	and    eax,0xffffffef
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014042:	68 04 a9 02 c0       	push   0xc002a904
c0014047:	e8 8d e5 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001404c:	0f 20 c0             	mov    eax,cr0
c001404f:	83 c8 04             	or     eax,0x4
c0014052:	0f 22 c0             	mov    cr0,eax
c0014055:	31 db                	xor    ebx,ebx
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	89 d8                	mov    eax,ebx
c001405c:	83 c4 08             	add    esp,0x8
c001405f:	5b                   	pop    ebx
c0014060:	c3                   	ret    
c0014061:	90                   	nop

c0014062 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014066:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001406a:	c1 e0 04             	shl    eax,0x4
c001406d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014071:	8d 50 10             	lea    edx,[eax+0x10]
c0014074:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001407a:	74 08                	je     c0014084 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001407c:	83 c0 04             	add    eax,0x4
c001407f:	39 d0                	cmp    eax,edx
c0014081:	75 f1                	jne    c0014074 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014083:	c3                   	ret    
c0014084:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001408e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014098:	eb e2                	jmp    c001407c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001409a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001409a:	57                   	push   edi
c001409b:	31 c0                	xor    eax,eax
c001409d:	56                   	push   esi
c001409e:	53                   	push   ebx
c001409f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140ab:	89 da                	mov    edx,ebx
c00140ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140b1:	c1 e2 04             	shl    edx,0x4
c00140b4:	01 ca                	add    edx,ecx
c00140b6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140be:	74 16                	je     c00140d6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140c0:	40                   	inc    eax
c00140c1:	83 f8 04             	cmp    eax,0x4
c00140c4:	75 f0                	jne    c00140b6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140c6:	c7 44 24 10 48 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a948
c00140ce:	5b                   	pop    ebx
c00140cf:	5e                   	pop    esi
c00140d0:	5f                   	pop    edi
c00140d1:	e9 6f 5c 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c00140d6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140d9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00140dc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00140e2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00140e8:	5b                   	pop    ebx
c00140e9:	5e                   	pop    esi
c00140ea:	5f                   	pop    edi
c00140eb:	c3                   	ret    

c00140ec <doubleFault(regs*, void*)>:
c00140ec:	55                   	push   ebp
c00140ed:	89 e5                	mov    ebp,esp
c00140ef:	83 ec 08             	sub    esp,0x8
c00140f2:	83 ec 0c             	sub    esp,0xc
c00140f5:	68 55 a9 02 c0       	push   0xc002a955
c00140fa:	e8 46 5c 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	90                   	nop
c0014103:	c9                   	leave  
c0014104:	c3                   	ret    
c0014105:	90                   	nop

c0014106 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014106:	56                   	push   esi
c0014107:	53                   	push   ebx
c0014108:	50                   	push   eax
c0014109:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001410d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014111:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014116:	75 35                	jne    c001414d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014118:	8d 43 20             	lea    eax,[ebx+0x20]
c001411b:	31 d2                	xor    edx,edx
c001411d:	89 c1                	mov    ecx,eax
c001411f:	c1 e1 04             	shl    ecx,0x4
c0014122:	01 f1                	add    ecx,esi
c0014124:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001412c:	74 3e                	je     c001416c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001412e:	42                   	inc    edx
c001412f:	83 fa 04             	cmp    edx,0x4
c0014132:	75 f0                	jne    c0014124 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014134:	83 ec 0c             	sub    esp,0xc
c0014137:	68 6f a9 02 c0       	push   0xc002a96f
c001413c:	e8 04 5c 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014149:	5a                   	pop    edx
c001414a:	5b                   	pop    ebx
c001414b:	5e                   	pop    esi
c001414c:	c3                   	ret    
c001414d:	83 ec 0c             	sub    esp,0xc
c0014150:	56                   	push   esi
c0014151:	e8 bc fb ff ff       	call   c0013d12 <Device::getName()>
c0014156:	83 c4 10             	add    esp,0x10
c0014159:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001415c:	75 ba                	jne    c0014118 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001415e:	83 fb 0f             	cmp    ebx,0xf
c0014161:	7f 29                	jg     c001418c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014163:	0f b6 9b a0 c9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3660]
c001416a:	eb ac                	jmp    c0014118 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001416c:	8d 04 82             	lea    eax,[edx+eax*4]
c001416f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014173:	8d 04 86             	lea    eax,[esi+eax*4]
c0014176:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001417c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014180:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014186:	89 d8                	mov    eax,ebx
c0014188:	5a                   	pop    edx
c0014189:	5b                   	pop    ebx
c001418a:	5e                   	pop    esi
c001418b:	c3                   	ret    
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	68 62 a9 02 c0       	push   0xc002a962
c0014194:	e8 ac 5b 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	e9 77 ff ff ff       	jmp    c0014118 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141a1:	90                   	nop

c00141a2 <InterruptController::clearAllHandlers(int, bool)>:
c00141a2:	56                   	push   esi
c00141a3:	53                   	push   ebx
c00141a4:	52                   	push   edx
c00141a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141b2:	75 61                	jne    c0014215 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141b4:	8d 46 20             	lea    eax,[esi+0x20]
c00141b7:	c1 e6 04             	shl    esi,0x4
c00141ba:	c1 e0 04             	shl    eax,0x4
c00141bd:	01 de                	add    esi,ebx
c00141bf:	01 d8                	add    eax,ebx
c00141c1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141cb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141d5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00141df:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00141e9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00141f3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00141fd:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014207:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014211:	58                   	pop    eax
c0014212:	5b                   	pop    ebx
c0014213:	5e                   	pop    esi
c0014214:	c3                   	ret    
c0014215:	83 ec 0c             	sub    esp,0xc
c0014218:	53                   	push   ebx
c0014219:	e8 f4 fa ff ff       	call   c0013d12 <Device::getName()>
c001421e:	83 c4 10             	add    esp,0x10
c0014221:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014224:	75 8e                	jne    c00141b4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014226:	83 fe 0f             	cmp    esi,0xf
c0014229:	7f 09                	jg     c0014234 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001422b:	0f b6 b6 a0 c9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3660]
c0014232:	eb 80                	jmp    c00141b4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014234:	83 ec 0c             	sub    esp,0xc
c0014237:	68 7c a9 02 c0       	push   0xc002a97c
c001423c:	e8 04 5b 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	e9 6b ff ff ff       	jmp    c00141b4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014249:	90                   	nop

c001424a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001424a:	56                   	push   esi
c001424b:	53                   	push   ebx
c001424c:	52                   	push   edx
c001424d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014251:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014255:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001425a:	75 3a                	jne    c0014296 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001425c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014260:	8d 50 20             	lea    edx,[eax+0x20]
c0014263:	c1 e2 04             	shl    edx,0x4
c0014266:	8d 04 16             	lea    eax,[esi+edx*1]
c0014269:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001426d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014273:	74 0b                	je     c0014280 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014275:	83 c0 04             	add    eax,0x4
c0014278:	39 d0                	cmp    eax,edx
c001427a:	75 f1                	jne    c001426d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001427c:	58                   	pop    eax
c001427d:	5b                   	pop    ebx
c001427e:	5e                   	pop    esi
c001427f:	c3                   	ret    
c0014280:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001428a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014294:	eb df                	jmp    c0014275 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014296:	83 ec 0c             	sub    esp,0xc
c0014299:	56                   	push   esi
c001429a:	e8 73 fa ff ff       	call   c0013d12 <Device::getName()>
c001429f:	83 c4 10             	add    esp,0x10
c00142a2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142a5:	75 b5                	jne    c001425c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142a7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142ac:	7f 11                	jg     c00142bf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142b2:	0f b6 80 a0 c9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3660]
c00142b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142bd:	eb 9d                	jmp    c001425c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142bf:	83 ec 0c             	sub    esp,0xc
c00142c2:	68 89 a9 02 c0       	push   0xc002a989
c00142c7:	e8 79 5a 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c00142cc:	83 c4 10             	add    esp,0x10
c00142cf:	eb 8b                	jmp    c001425c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142d1 <nmiHandler(regs*, void*)>:
c00142d1:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00142d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142da:	e9 21 aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00142df <int_handler>:
c00142df:	55                   	push   ebp
c00142e0:	57                   	push   edi
c00142e1:	56                   	push   esi
c00142e2:	53                   	push   ebx
c00142e3:	83 ec 0c             	sub    esp,0xc
c00142e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142ea:	80 3d 84 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030284,0x0
c00142f1:	74 0b                	je     c00142fe <int_handler+0x1f>
c00142f3:	fa                   	cli    
c00142f4:	f4                   	hlt    
c00142f5:	80 3d 84 02 03 c0 00 	cmp    BYTE PTR ds:0xc0030284,0x0
c00142fc:	75 f5                	jne    c00142f3 <int_handler+0x14>
c00142fe:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0014303:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014306:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001430c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014312:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014315:	83 f8 17             	cmp    eax,0x17
c0014318:	77 13                	ja     c001432d <int_handler+0x4e>
c001431a:	83 ec 08             	sub    esp,0x8
c001431d:	8b 17                	mov    edx,DWORD PTR [edi]
c001431f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014322:	0f b6 c0             	movzx  eax,al
c0014325:	50                   	push   eax
c0014326:	57                   	push   edi
c0014327:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001432a:	83 c4 10             	add    esp,0x10
c001432d:	83 c3 15             	add    ebx,0x15
c0014330:	c1 e3 04             	shl    ebx,0x4
c0014333:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014337:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001433e:	31 db                	xor    ebx,ebx
c0014340:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014344:	85 c0                	test   eax,eax
c0014346:	74 13                	je     c001435b <int_handler+0x7c>
c0014348:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001434b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001434f:	74 1c                	je     c001436d <int_handler+0x8e>
c0014351:	83 ec 08             	sub    esp,0x8
c0014354:	52                   	push   edx
c0014355:	56                   	push   esi
c0014356:	ff d0                	call   eax
c0014358:	83 c4 10             	add    esp,0x10
c001435b:	43                   	inc    ebx
c001435c:	83 fb 04             	cmp    ebx,0x4
c001435f:	75 df                	jne    c0014340 <int_handler+0x61>
c0014361:	83 c4 0c             	add    esp,0xc
c0014364:	31 c0                	xor    eax,eax
c0014366:	5b                   	pop    ebx
c0014367:	31 d2                	xor    edx,edx
c0014369:	5e                   	pop    esi
c001436a:	5f                   	pop    edi
c001436b:	5d                   	pop    ebp
c001436c:	c3                   	ret    
c001436d:	83 ec 08             	sub    esp,0x8
c0014370:	52                   	push   edx
c0014371:	56                   	push   esi
c0014372:	ff d0                	call   eax
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	83 c4 0c             	add    esp,0xc
c001437a:	5b                   	pop    ebx
c001437b:	5e                   	pop    esi
c001437c:	5f                   	pop    edi
c001437d:	5d                   	pop    ebp
c001437e:	c3                   	ret    
c001437f:	90                   	nop

c0014380 <InterruptController::InterruptController(char const*)>:
c0014380:	83 ec 1c             	sub    esp,0x1c
c0014383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014387:	83 ec 08             	sub    esp,0x8
c001438a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001438e:	50                   	push   eax
c001438f:	e8 82 f8 ff ff       	call   c0013c16 <Device::Device(char const*)>
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c001439c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143a0:	89 10                	mov    DWORD PTR [eax],edx
c00143a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143a6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143b8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143c0:	7f 5e                	jg     c0014420 <InterruptController::InterruptController(char const*)+0xa0>
c00143c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143ca:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143cf:	7f 49                	jg     c001441a <InterruptController::InterruptController(char const*)+0x9a>
c00143d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143d9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00143e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143e4:	01 ca                	add    edx,ecx
c00143e6:	83 c2 54             	add    edx,0x54
c00143e9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00143f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143f9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014404:	01 ca                	add    edx,ecx
c0014406:	81 c2 54 04 00 00    	add    edx,0x454
c001440c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014414:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014418:	eb b0                	jmp    c00143ca <InterruptController::InterruptController(char const*)+0x4a>
c001441a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001441e:	eb 98                	jmp    c00143b8 <InterruptController::InterruptController(char const*)+0x38>
c0014420:	90                   	nop
c0014421:	83 c4 1c             	add    esp,0x1c
c0014424:	c3                   	ret    
c0014425:	90                   	nop

c0014426 <InterruptController::~InterruptController()>:
c0014426:	83 ec 0c             	sub    esp,0xc
c0014429:	ba 44 ac 02 c0       	mov    edx,0xc002ac44
c001442e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014432:	89 10                	mov    DWORD PTR [eax],edx
c0014434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014438:	83 ec 0c             	sub    esp,0xc
c001443b:	50                   	push   eax
c001443c:	e8 9f f4 ff ff       	call   c00138e0 <Device::~Device()>
c0014441:	83 c4 10             	add    esp,0x10
c0014444:	90                   	nop
c0014445:	83 c4 0c             	add    esp,0xc
c0014448:	c3                   	ret    
c0014449:	90                   	nop

c001444a <InterruptController::~InterruptController()>:
c001444a:	83 ec 0c             	sub    esp,0xc
c001444d:	83 ec 0c             	sub    esp,0xc
c0014450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014454:	e8 cd ff ff ff       	call   c0014426 <InterruptController::~InterruptController()>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	83 ec 08             	sub    esp,0x8
c001445f:	68 58 21 00 00       	push   0x2158
c0014464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014468:	e8 94 e0 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c001446d:	83 c4 10             	add    esp,0x10
c0014470:	83 c4 0c             	add    esp,0xc
c0014473:	c3                   	ret    

c0014474 <displayDebugInfo(regs*)>:
c0014474:	55                   	push   ebp
c0014475:	57                   	push   edi
c0014476:	56                   	push   esi
c0014477:	53                   	push   ebx
c0014478:	83 ec 24             	sub    esp,0x24
c001447b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001447f:	0f 20 c2             	mov    edx,cr0
c0014482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014486:	0f 20 d7             	mov    edi,cr2
c0014489:	0f 20 de             	mov    esi,cr3
c001448c:	0f 20 e5             	mov    ebp,cr4
c001448f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014492:	68 96 a9 02 c0       	push   0xc002a996
c0014497:	e8 3d e1 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001449c:	59                   	pop    ecx
c001449d:	58                   	pop    eax
c001449e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144a1:	68 a1 a9 02 c0       	push   0xc002a9a1
c00144a6:	e8 2e e1 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00144ab:	58                   	pop    eax
c00144ac:	5a                   	pop    edx
c00144ad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144b0:	68 ac a9 02 c0       	push   0xc002a9ac
c00144b5:	e8 1f e1 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00144ba:	59                   	pop    ecx
c00144bb:	58                   	pop    eax
c00144bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144bf:	68 b7 a9 02 c0       	push   0xc002a9b7
c00144c4:	e8 10 e1 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00144c9:	58                   	pop    eax
c00144ca:	5a                   	pop    edx
c00144cb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144ce:	68 c2 a9 02 c0       	push   0xc002a9c2
c00144d3:	e8 01 e1 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00144d8:	59                   	pop    ecx
c00144d9:	58                   	pop    eax
c00144da:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00144dd:	68 cd a9 02 c0       	push   0xc002a9cd
c00144e2:	e8 f2 e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00144e7:	58                   	pop    eax
c00144e8:	5a                   	pop    edx
c00144e9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00144ec:	68 d8 a9 02 c0       	push   0xc002a9d8
c00144f1:	e8 e3 e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00144f6:	59                   	pop    ecx
c00144f7:	58                   	pop    eax
c00144f8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00144fb:	68 e3 a9 02 c0       	push   0xc002a9e3
c0014500:	e8 d4 e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014505:	58                   	pop    eax
c0014506:	5a                   	pop    edx
c0014507:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001450a:	68 ee a9 02 c0       	push   0xc002a9ee
c001450f:	e8 c5 e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014514:	59                   	pop    ecx
c0014515:	58                   	pop    eax
c0014516:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014519:	68 fd a9 02 c0       	push   0xc002a9fd
c001451e:	e8 b6 e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014523:	58                   	pop    eax
c0014524:	5a                   	pop    edx
c0014525:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014528:	68 08 aa 02 c0       	push   0xc002aa08
c001452d:	e8 a7 e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014532:	59                   	pop    ecx
c0014533:	58                   	pop    eax
c0014534:	57                   	push   edi
c0014535:	68 13 aa 02 c0       	push   0xc002aa13
c001453a:	e8 9a e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001453f:	58                   	pop    eax
c0014540:	5a                   	pop    edx
c0014541:	56                   	push   esi
c0014542:	68 1e aa 02 c0       	push   0xc002aa1e
c0014547:	e8 8d e0 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001454c:	59                   	pop    ecx
c001454d:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014552:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014558:	e8 9c bd ff ff       	call   c00102f9 <setActiveTerminal(VgaText*)>
c001455d:	58                   	pop    eax
c001455e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014561:	5a                   	pop    edx
c0014562:	c1 e0 05             	shl    eax,0x5
c0014565:	05 00 c7 02 c0       	add    eax,0xc002c700
c001456a:	50                   	push   eax
c001456b:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014570:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014576:	e8 8b c2 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001457b:	59                   	pop    ecx
c001457c:	58                   	pop    eax
c001457d:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014582:	68 29 aa 02 c0       	push   0xc002aa29
c0014587:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001458d:	e8 74 c2 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0014592:	58                   	pop    eax
c0014593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014598:	5a                   	pop    edx
c0014599:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001459c:	83 c0 0c             	add    eax,0xc
c001459f:	50                   	push   eax
c00145a0:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00145a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ab:	e8 56 c2 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00145b0:	59                   	pop    ecx
c00145b1:	58                   	pop    eax
c00145b2:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00145b7:	68 32 aa 02 c0       	push   0xc002aa32
c00145bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145c2:	e8 3f c2 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00145c7:	58                   	pop    eax
c00145c8:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00145cd:	5a                   	pop    edx
c00145ce:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d7:	e8 e4 c1 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c00145dc:	59                   	pop    ecx
c00145dd:	58                   	pop    eax
c00145de:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00145e3:	68 3a aa 02 c0       	push   0xc002aa3a
c00145e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ee:	e8 13 c2 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00145f3:	58                   	pop    eax
c00145f4:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00145f9:	5a                   	pop    edx
c00145fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014603:	e8 b8 c1 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014608:	59                   	pop    ecx
c0014609:	58                   	pop    eax
c001460a:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001460f:	68 42 aa 02 c0       	push   0xc002aa42
c0014614:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461a:	e8 e7 c1 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001461f:	58                   	pop    eax
c0014620:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014625:	5a                   	pop    edx
c0014626:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014629:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001462f:	e8 8c c1 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014634:	59                   	pop    ecx
c0014635:	58                   	pop    eax
c0014636:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001463b:	68 4a aa 02 c0       	push   0xc002aa4a
c0014640:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014646:	e8 bb c1 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001464b:	58                   	pop    eax
c001464c:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014651:	5a                   	pop    edx
c0014652:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014655:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465b:	e8 60 c1 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014660:	59                   	pop    ecx
c0014661:	58                   	pop    eax
c0014662:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014667:	68 52 aa 02 c0       	push   0xc002aa52
c001466c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014672:	e8 8f c1 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0014677:	58                   	pop    eax
c0014678:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001467d:	5a                   	pop    edx
c001467e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014681:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014687:	e8 34 c1 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c001468c:	59                   	pop    ecx
c001468d:	58                   	pop    eax
c001468e:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014693:	68 5a aa 02 c0       	push   0xc002aa5a
c0014698:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469e:	e8 63 c1 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00146a3:	58                   	pop    eax
c00146a4:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00146a9:	5a                   	pop    edx
c00146aa:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b3:	e8 08 c1 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c00146b8:	59                   	pop    ecx
c00146b9:	58                   	pop    eax
c00146ba:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00146bf:	68 62 aa 02 c0       	push   0xc002aa62
c00146c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ca:	e8 37 c1 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00146cf:	58                   	pop    eax
c00146d0:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00146d5:	5a                   	pop    edx
c00146d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146da:	52                   	push   edx
c00146db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e1:	e8 da c0 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c00146e6:	59                   	pop    ecx
c00146e7:	58                   	pop    eax
c00146e8:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00146ed:	68 6b aa 02 c0       	push   0xc002aa6b
c00146f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f8:	e8 09 c1 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00146fd:	58                   	pop    eax
c00146fe:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014703:	5a                   	pop    edx
c0014704:	57                   	push   edi
c0014705:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470b:	e8 b0 c0 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014710:	59                   	pop    ecx
c0014711:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014716:	5f                   	pop    edi
c0014717:	68 73 aa 02 c0       	push   0xc002aa73
c001471c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014722:	e8 df c0 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0014727:	58                   	pop    eax
c0014728:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001472d:	5a                   	pop    edx
c001472e:	56                   	push   esi
c001472f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014735:	e8 86 c0 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c001473a:	59                   	pop    ecx
c001473b:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014740:	5e                   	pop    esi
c0014741:	68 7b aa 02 c0       	push   0xc002aa7b
c0014746:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474c:	e8 b5 c0 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0014751:	5f                   	pop    edi
c0014752:	58                   	pop    eax
c0014753:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014758:	55                   	push   ebp
c0014759:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001475f:	e8 5c c0 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014764:	58                   	pop    eax
c0014765:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001476a:	5a                   	pop    edx
c001476b:	68 83 aa 02 c0       	push   0xc002aa83
c0014770:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014776:	e8 8b c0 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001477b:	0f 21 c0             	mov    eax,db0
c001477e:	59                   	pop    ecx
c001477f:	5e                   	pop    esi
c0014780:	50                   	push   eax
c0014781:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014786:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478c:	e8 2f c0 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014791:	5f                   	pop    edi
c0014792:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014797:	5d                   	pop    ebp
c0014798:	68 8c aa 02 c0       	push   0xc002aa8c
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 5e c0 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00147a8:	0f 21 c8             	mov    eax,db1
c00147ab:	5a                   	pop    edx
c00147ac:	59                   	pop    ecx
c00147ad:	50                   	push   eax
c00147ae:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00147b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b9:	e8 02 c0 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c00147be:	5e                   	pop    esi
c00147bf:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00147c4:	5f                   	pop    edi
c00147c5:	68 94 aa 02 c0       	push   0xc002aa94
c00147ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d0:	e8 31 c0 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00147d5:	0f 21 d0             	mov    eax,db2
c00147d8:	5d                   	pop    ebp
c00147d9:	5a                   	pop    edx
c00147da:	50                   	push   eax
c00147db:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00147e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e6:	e8 d5 bf ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c00147eb:	59                   	pop    ecx
c00147ec:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00147f1:	5e                   	pop    esi
c00147f2:	68 9c aa 02 c0       	push   0xc002aa9c
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 04 c0 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0014802:	0f 21 d8             	mov    eax,db3
c0014805:	5f                   	pop    edi
c0014806:	5d                   	pop    ebp
c0014807:	50                   	push   eax
c0014808:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001480d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014813:	e8 a8 bf ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014818:	58                   	pop    eax
c0014819:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001481e:	5a                   	pop    edx
c001481f:	68 a4 aa 02 c0       	push   0xc002aaa4
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 d7 bf ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001482f:	0f 21 f0             	mov    eax,db6
c0014832:	59                   	pop    ecx
c0014833:	5e                   	pop    esi
c0014834:	50                   	push   eax
c0014835:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001483a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014840:	e8 7b bf ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014845:	5f                   	pop    edi
c0014846:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001484b:	5d                   	pop    ebp
c001484c:	68 ac aa 02 c0       	push   0xc002aaac
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 aa bf ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001485c:	0f 21 f8             	mov    eax,db7
c001485f:	5a                   	pop    edx
c0014860:	59                   	pop    ecx
c0014861:	50                   	push   eax
c0014862:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014867:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486d:	e8 4e bf ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0014872:	5e                   	pop    esi
c0014873:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014876:	e8 43 86 00 00       	call   c001cebe <Thr::getDriverNameFromAddress(unsigned long)>
c001487b:	83 c4 10             	add    esp,0x10
c001487e:	85 c0                	test   eax,eax
c0014880:	74 7d                	je     c00148ff <displayDebugInfo(regs*)+0x48b>
c0014882:	89 c6                	mov    esi,eax
c0014884:	50                   	push   eax
c0014885:	50                   	push   eax
c0014886:	56                   	push   esi
c0014887:	68 b4 aa 02 c0       	push   0xc002aab4
c001488c:	e8 48 dd ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014891:	5a                   	pop    edx
c0014892:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0014897:	59                   	pop    ecx
c0014898:	68 c2 aa 02 c0       	push   0xc002aac2
c001489d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a3:	e8 5e bf ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00148a8:	5f                   	pop    edi
c00148a9:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00148ae:	5d                   	pop    ebp
c00148af:	56                   	push   esi
c00148b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b6:	e8 4b bf ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00148bb:	58                   	pop    eax
c00148bc:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00148c1:	5a                   	pop    edx
c00148c2:	68 ce aa 02 c0       	push   0xc002aace
c00148c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cd:	e8 34 bf ff ff       	call   c0010806 <VgaText::puts(char const*)>
c00148d2:	59                   	pop    ecx
c00148d3:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00148d8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00148de:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148e1:	e8 0f 86 00 00       	call   c001cef5 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00148e6:	5b                   	pop    ebx
c00148e7:	5d                   	pop    ebp
c00148e8:	50                   	push   eax
c00148e9:	57                   	push   edi
c00148ea:	e8 d1 be ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c00148ef:	58                   	pop    eax
c00148f0:	5a                   	pop    edx
c00148f1:	56                   	push   esi
c00148f2:	68 da aa 02 c0       	push   0xc002aada
c00148f7:	e8 dd dc ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	fa                   	cli    
c0014900:	f4                   	hlt    
c0014901:	eb fe                	jmp    c0014901 <displayDebugInfo(regs*)+0x48d>

c0014903 <x87EmulHandler(regs*, void*)>:
c0014903:	83 ec 0c             	sub    esp,0xc
c0014906:	0f 20 c2             	mov    edx,cr0
c0014909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001490e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014912:	75 4b                	jne    c001495f <x87EmulHandler(regs*, void*)+0x5c>
c0014914:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0014919:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001491f:	85 c0                	test   eax,eax
c0014921:	74 05                	je     c0014928 <x87EmulHandler(regs*, void*)+0x25>
c0014923:	83 e2 08             	and    edx,0x8
c0014926:	75 17                	jne    c001493f <x87EmulHandler(regs*, void*)+0x3c>
c0014928:	83 ec 0c             	sub    esp,0xc
c001492b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001492f:	e8 5b a9 00 00       	call   c001f28f <Vm::x87Handler(regs*)>
c0014934:	83 c4 10             	add    esp,0x10
c0014937:	84 c0                	test   al,al
c0014939:	74 24                	je     c001495f <x87EmulHandler(regs*, void*)+0x5c>
c001493b:	83 c4 0c             	add    esp,0xc
c001493e:	c3                   	ret    
c001493f:	83 ec 0c             	sub    esp,0xc
c0014942:	68 00 ab 02 c0       	push   0xc002ab00
c0014947:	e8 8d dc ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001494c:	0f 06                	clts   
c001494e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	a3 c8 d8 02 c0       	mov    ds:0xc002d8c8,eax
c001495b:	83 c4 0c             	add    esp,0xc
c001495e:	c3                   	ret    
c001495f:	83 ec 0c             	sub    esp,0xc
c0014962:	68 ea aa 02 c0       	push   0xc002aaea
c0014967:	e8 6d dc ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001496c:	5a                   	pop    edx
c001496d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014971:	e8 fe fa ff ff       	call   c0014474 <displayDebugInfo(regs*)>

c0014976 <gpFault(regs*, void*)>:
c0014976:	53                   	push   ebx
c0014977:	83 ec 14             	sub    esp,0x14
c001497a:	c7 05 c4 d8 02 c0 68 e7 01 c0 	mov    DWORD PTR ds:0xc002d8c4,0xc001e768
c0014984:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014988:	53                   	push   ebx
c0014989:	e8 da 9d 00 00       	call   c001e768 <Vm::faultHandler(regs*)>
c001498e:	83 c4 10             	add    esp,0x10
c0014991:	84 c0                	test   al,al
c0014993:	74 05                	je     c001499a <gpFault(regs*, void*)+0x24>
c0014995:	83 c4 08             	add    esp,0x8
c0014998:	5b                   	pop    ebx
c0014999:	c3                   	ret    
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	68 0d ab 02 c0       	push   0xc002ab0d
c00149a2:	e8 32 dc ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00149a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149aa:	e8 c5 fa ff ff       	call   c0014474 <displayDebugInfo(regs*)>

c00149af <pgFault(regs*, void*)>:
c00149af:	83 ec 18             	sub    esp,0x18
c00149b2:	68 28 ab 02 c0       	push   0xc002ab28
c00149b7:	e8 1d dc ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00149bc:	0f 20 d0             	mov    eax,cr2
c00149bf:	5a                   	pop    edx
c00149c0:	59                   	pop    ecx
c00149c1:	50                   	push   eax
c00149c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149ca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00149d0:	e8 97 d7 ff ff       	call   c001216c <VAS::tryLoadBackOffDisk(unsigned long)>
c00149d5:	83 c4 10             	add    esp,0x10
c00149d8:	84 c0                	test   al,al
c00149da:	74 04                	je     c00149e0 <pgFault(regs*, void*)+0x31>
c00149dc:	83 c4 0c             	add    esp,0xc
c00149df:	c3                   	ret    
c00149e0:	83 ec 0c             	sub    esp,0xc
c00149e3:	68 32 ab 02 c0       	push   0xc002ab32
c00149e8:	e8 ec db ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00149ed:	58                   	pop    eax
c00149ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149f2:	e8 7d fa ff ff       	call   c0014474 <displayDebugInfo(regs*)>

c00149f7 <otherISRHandler(regs*, void*)>:
c00149f7:	53                   	push   ebx
c00149f8:	83 ec 0c             	sub    esp,0xc
c00149fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149ff:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a02:	50                   	push   eax
c0014a03:	50                   	push   eax
c0014a04:	68 3f ab 02 c0       	push   0xc002ab3f
c0014a09:	e8 cb db ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014a0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a11:	e8 5e fa ff ff       	call   c0014474 <displayDebugInfo(regs*)>

c0014a16 <opcodeFault(regs*, void*)>:
c0014a16:	55                   	push   ebp
c0014a17:	89 e5                	mov    ebp,esp
c0014a19:	56                   	push   esi
c0014a1a:	53                   	push   ebx
c0014a1b:	83 ec 40             	sub    esp,0x40
c0014a1e:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0014a23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a29:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a2f:	84 c0                	test   al,al
c0014a31:	74 24                	je     c0014a57 <opcodeFault(regs*, void*)+0x41>
c0014a33:	83 ec 0c             	sub    esp,0xc
c0014a36:	68 5c ab 02 c0       	push   0xc002ab5c
c0014a3b:	e8 99 db ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014a40:	83 c4 10             	add    esp,0x10
c0014a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a49:	8d 50 19             	lea    edx,[eax+0x19]
c0014a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a52:	e9 d5 05 00 00       	jmp    c001502c <opcodeFault(regs*, void*)+0x616>
c0014a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a5d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a60:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a64:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a6e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a74:	8a 00                	mov    al,BYTE PTR [eax]
c0014a76:	3c f0                	cmp    al,0xf0
c0014a78:	75 17                	jne    c0014a91 <opcodeFault(regs*, void*)+0x7b>
c0014a7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a80:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a83:	8d 50 01             	lea    edx,[eax+0x1]
c0014a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a89:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a8c:	e9 da 00 00 00       	jmp    c0014b6b <opcodeFault(regs*, void*)+0x155>
c0014a91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a94:	8a 00                	mov    al,BYTE PTR [eax]
c0014a96:	3c f2                	cmp    al,0xf2
c0014a98:	74 09                	je     c0014aa3 <opcodeFault(regs*, void*)+0x8d>
c0014a9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9f:	3c f3                	cmp    al,0xf3
c0014aa1:	75 1b                	jne    c0014abe <opcodeFault(regs*, void*)+0xa8>
c0014aa3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aa7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab0:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab9:	e9 ad 00 00 00       	jmp    c0014b6b <opcodeFault(regs*, void*)+0x155>
c0014abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac3:	3c 66                	cmp    al,0x66
c0014ac5:	75 1f                	jne    c0014ae6 <opcodeFault(regs*, void*)+0xd0>
c0014ac7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014acb:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014acf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad8:	8d 50 01             	lea    edx,[eax+0x1]
c0014adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ade:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ae1:	e9 85 00 00 00       	jmp    c0014b6b <opcodeFault(regs*, void*)+0x155>
c0014ae6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae9:	8a 00                	mov    al,BYTE PTR [eax]
c0014aeb:	3c 67                	cmp    al,0x67
c0014aed:	75 18                	jne    c0014b07 <opcodeFault(regs*, void*)+0xf1>
c0014aef:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014af3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014afc:	8d 50 01             	lea    edx,[eax+0x1]
c0014aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b05:	eb 64                	jmp    c0014b6b <opcodeFault(regs*, void*)+0x155>
c0014b07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0c:	3c 2e                	cmp    al,0x2e
c0014b0e:	74 09                	je     c0014b19 <opcodeFault(regs*, void*)+0x103>
c0014b10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b13:	8a 00                	mov    al,BYTE PTR [eax]
c0014b15:	3c 3e                	cmp    al,0x3e
c0014b17:	75 18                	jne    c0014b31 <opcodeFault(regs*, void*)+0x11b>
c0014b19:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b26:	8d 50 01             	lea    edx,[eax+0x1]
c0014b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b2f:	eb 3a                	jmp    c0014b6b <opcodeFault(regs*, void*)+0x155>
c0014b31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b34:	8a 00                	mov    al,BYTE PTR [eax]
c0014b36:	3c 36                	cmp    al,0x36
c0014b38:	74 1b                	je     c0014b55 <opcodeFault(regs*, void*)+0x13f>
c0014b3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3f:	3c 26                	cmp    al,0x26
c0014b41:	74 12                	je     c0014b55 <opcodeFault(regs*, void*)+0x13f>
c0014b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b46:	8a 00                	mov    al,BYTE PTR [eax]
c0014b48:	3c 64                	cmp    al,0x64
c0014b4a:	74 09                	je     c0014b55 <opcodeFault(regs*, void*)+0x13f>
c0014b4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014b51:	3c 65                	cmp    al,0x65
c0014b53:	75 16                	jne    c0014b6b <opcodeFault(regs*, void*)+0x155>
c0014b55:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b59:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b62:	8d 50 01             	lea    edx,[eax+0x1]
c0014b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b68:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b70:	3c 0f                	cmp    al,0xf
c0014b72:	0f 85 ad 00 00 00    	jne    c0014c25 <opcodeFault(regs*, void*)+0x20f>
c0014b78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7b:	40                   	inc    eax
c0014b7c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7e:	3c c2                	cmp    al,0xc2
c0014b80:	74 0e                	je     c0014b90 <opcodeFault(regs*, void*)+0x17a>
c0014b82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b85:	40                   	inc    eax
c0014b86:	8a 00                	mov    al,BYTE PTR [eax]
c0014b88:	3c c3                	cmp    al,0xc3
c0014b8a:	0f 85 95 00 00 00    	jne    c0014c25 <opcodeFault(regs*, void*)+0x20f>
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	68 7f ab 02 c0       	push   0xc002ab7f
c0014b98:	e8 3c da ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ba6:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014baf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb7:	8d 50 fe             	lea    edx,[eax-0x2]
c0014bba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbd:	88 10                	mov    BYTE PTR [eax],dl
c0014bbf:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014bc2:	50                   	push   eax
c0014bc3:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bc6:	50                   	push   eax
c0014bc7:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bca:	50                   	push   eax
c0014bcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bce:	e8 8b 48 00 00       	call   c001945e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014bd3:	83 c4 10             	add    esp,0x10
c0014bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bdc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014bdf:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014be2:	01 d0                	add    eax,edx
c0014be4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bed:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014bf0:	48                   	dec    eax
c0014bf1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014bfa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	83 ec 04             	sub    esp,0x4
c0014c03:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c06:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c09:	50                   	push   eax
c0014c0a:	e8 a5 b5 fe ff       	call   c00001b4 <voodooXADD>
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c15:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c18:	01 c2                	add    edx,eax
c0014c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c20:	e9 07 04 00 00       	jmp    c001502c <opcodeFault(regs*, void*)+0x616>
c0014c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c28:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2a:	3c 0f                	cmp    al,0xf
c0014c2c:	0f 85 8b 01 00 00    	jne    c0014dbd <opcodeFault(regs*, void*)+0x3a7>
c0014c32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c35:	40                   	inc    eax
c0014c36:	8a 00                	mov    al,BYTE PTR [eax]
c0014c38:	3c c7                	cmp    al,0xc7
c0014c3a:	0f 86 7d 01 00 00    	jbe    c0014dbd <opcodeFault(regs*, void*)+0x3a7>
c0014c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c43:	40                   	inc    eax
c0014c44:	8a 00                	mov    al,BYTE PTR [eax]
c0014c46:	3c cf                	cmp    al,0xcf
c0014c48:	0f 87 6f 01 00 00    	ja     c0014dbd <opcodeFault(regs*, void*)+0x3a7>
c0014c4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c51:	40                   	inc    eax
c0014c52:	8a 00                	mov    al,BYTE PTR [eax]
c0014c54:	83 c0 38             	add    eax,0x38
c0014c57:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c5a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c5e:	75 0b                	jne    c0014c6b <opcodeFault(regs*, void*)+0x255>
c0014c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c63:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c66:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c69:	eb 75                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014c6b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c6f:	75 0b                	jne    c0014c7c <opcodeFault(regs*, void*)+0x266>
c0014c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c74:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c77:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c7a:	eb 64                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014c7c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c80:	75 0b                	jne    c0014c8d <opcodeFault(regs*, void*)+0x277>
c0014c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c85:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014c88:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c8b:	eb 53                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014c8d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c91:	75 0b                	jne    c0014c9e <opcodeFault(regs*, void*)+0x288>
c0014c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c9c:	eb 42                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014c9e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ca2:	75 0b                	jne    c0014caf <opcodeFault(regs*, void*)+0x299>
c0014ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014caa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cad:	eb 31                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014caf:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cb3:	75 0b                	jne    c0014cc0 <opcodeFault(regs*, void*)+0x2aa>
c0014cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cbb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cbe:	eb 20                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014cc0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cc4:	75 0b                	jne    c0014cd1 <opcodeFault(regs*, void*)+0x2bb>
c0014cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ccc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ccf:	eb 0f                	jmp    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014cd1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cd5:	75 09                	jne    c0014ce0 <opcodeFault(regs*, void*)+0x2ca>
c0014cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cda:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014cdd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce0:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014ce4:	74 10                	je     c0014cf6 <opcodeFault(regs*, void*)+0x2e0>
c0014ce6:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014ced:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014cf4:	eb 2d                	jmp    c0014d23 <opcodeFault(regs*, void*)+0x30d>
c0014cf6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014cf9:	c1 e0 18             	shl    eax,0x18
c0014cfc:	89 c2                	mov    edx,eax
c0014cfe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d01:	c1 e0 08             	shl    eax,0x8
c0014d04:	25 00 00 ff 00       	and    eax,0xff0000
c0014d09:	09 c2                	or     edx,eax
c0014d0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d0e:	c1 e8 08             	shr    eax,0x8
c0014d11:	25 00 ff 00 00       	and    eax,0xff00
c0014d16:	09 c2                	or     edx,eax
c0014d18:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d1b:	c1 e8 18             	shr    eax,0x18
c0014d1e:	09 d0                	or     eax,edx
c0014d20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d23:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d27:	75 0b                	jne    c0014d34 <opcodeFault(regs*, void*)+0x31e>
c0014d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d2f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d32:	eb 75                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d34:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d38:	75 0b                	jne    c0014d45 <opcodeFault(regs*, void*)+0x32f>
c0014d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d40:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d43:	eb 64                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d45:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d49:	75 0b                	jne    c0014d56 <opcodeFault(regs*, void*)+0x340>
c0014d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d51:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d54:	eb 53                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d56:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d5a:	75 0b                	jne    c0014d67 <opcodeFault(regs*, void*)+0x351>
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d62:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d65:	eb 42                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d67:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d6b:	75 0b                	jne    c0014d78 <opcodeFault(regs*, void*)+0x362>
c0014d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d70:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d73:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d76:	eb 31                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d78:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d7c:	75 0b                	jne    c0014d89 <opcodeFault(regs*, void*)+0x373>
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d84:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d87:	eb 20                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d89:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d8d:	75 0b                	jne    c0014d9a <opcodeFault(regs*, void*)+0x384>
c0014d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d95:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014d98:	eb 0f                	jmp    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014d9a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d9e:	75 09                	jne    c0014da9 <opcodeFault(regs*, void*)+0x393>
c0014da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014da6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014daf:	8d 50 02             	lea    edx,[eax+0x2]
c0014db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db8:	e9 6f 02 00 00       	jmp    c001502c <opcodeFault(regs*, void*)+0x616>
c0014dbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc0:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc2:	3c 0f                	cmp    al,0xf
c0014dc4:	0f 85 8d 01 00 00    	jne    c0014f57 <opcodeFault(regs*, void*)+0x541>
c0014dca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dcd:	40                   	inc    eax
c0014dce:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd0:	3c c7                	cmp    al,0xc7
c0014dd2:	0f 85 7f 01 00 00    	jne    c0014f57 <opcodeFault(regs*, void*)+0x541>
c0014dd8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dde:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de1:	8d 50 01             	lea    edx,[eax+0x1]
c0014de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dea:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ded:	50                   	push   eax
c0014dee:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014df1:	50                   	push   eax
c0014df2:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014df5:	50                   	push   eax
c0014df6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014df9:	e8 60 46 00 00       	call   c001945e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014dfe:	83 c4 10             	add    esp,0x10
c0014e01:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e04:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e07:	83 f0 01             	xor    eax,0x1
c0014e0a:	84 c0                	test   al,al
c0014e0c:	0f 84 45 01 00 00    	je     c0014f57 <opcodeFault(regs*, void*)+0x541>
c0014e12:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e15:	3c 01                	cmp    al,0x1
c0014e17:	0f 85 3a 01 00 00    	jne    c0014f57 <opcodeFault(regs*, void*)+0x541>
c0014e1d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e20:	83 f0 01             	xor    eax,0x1
c0014e23:	84 c0                	test   al,al
c0014e25:	0f 84 2c 01 00 00    	je     c0014f57 <opcodeFault(regs*, void*)+0x541>
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e31:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e34:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e3b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e3e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e41:	89 c2                	mov    edx,eax
c0014e43:	b8 00 00 00 00       	mov    eax,0x0
c0014e48:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e4b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e51:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e54:	ba 00 00 00 00       	mov    edx,0x0
c0014e59:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e5c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e62:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e65:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e68:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e6f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e72:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e75:	89 c2                	mov    edx,eax
c0014e77:	b8 00 00 00 00       	mov    eax,0x0
c0014e7c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e7f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e85:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e88:	ba 00 00 00 00       	mov    edx,0x0
c0014e8d:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014e90:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014e93:	fa                   	cli    
c0014e94:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0014e99:	40                   	inc    eax
c0014e9a:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0014e9f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ea2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ea5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea7:	89 c1                	mov    ecx,eax
c0014ea9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014eac:	89 cb                	mov    ebx,ecx
c0014eae:	89 d0                	mov    eax,edx
c0014eb0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014eb3:	89 c6                	mov    esi,eax
c0014eb5:	89 f0                	mov    eax,esi
c0014eb7:	09 d8                	or     eax,ebx
c0014eb9:	85 c0                	test   eax,eax
c0014ebb:	75 21                	jne    c0014ede <opcodeFault(regs*, void*)+0x4c8>
c0014ebd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014ec0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ec3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ec6:	89 01                	mov    DWORD PTR [ecx],eax
c0014ec8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ece:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed1:	83 c8 40             	or     eax,0x40
c0014ed4:	89 c2                	mov    edx,eax
c0014ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014edc:	eb 3e                	jmp    c0014f1c <opcodeFault(regs*, void*)+0x506>
c0014ede:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ee1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ee4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ee6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ee9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014eec:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ef5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ef8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014efb:	89 d0                	mov    eax,edx
c0014efd:	31 d2                	xor    edx,edx
c0014eff:	89 c3                	mov    ebx,eax
c0014f01:	89 d6                	mov    esi,edx
c0014f03:	89 da                	mov    edx,ebx
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f11:	83 e0 bf             	and    eax,0xffffffbf
c0014f14:	89 c2                	mov    edx,eax
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f1c:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0014f21:	48                   	dec    eax
c0014f22:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0014f27:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0014f2c:	85 c0                	test   eax,eax
c0014f2e:	75 01                	jne    c0014f31 <opcodeFault(regs*, void*)+0x51b>
c0014f30:	fb                   	sti    
c0014f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f37:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f3a:	01 c2                	add    edx,eax
c0014f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f42:	83 ec 0c             	sub    esp,0xc
c0014f45:	68 8e ab 02 c0       	push   0xc002ab8e
c0014f4a:	e8 8a d6 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014f4f:	83 c4 10             	add    esp,0x10
c0014f52:	e9 d5 00 00 00       	jmp    c001502c <opcodeFault(regs*, void*)+0x616>
c0014f57:	83 ec 0c             	sub    esp,0xc
c0014f5a:	68 a1 ab 02 c0       	push   0xc002aba1
c0014f5f:	e8 75 d6 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014f64:	83 c4 10             	add    esp,0x10
c0014f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f73:	c1 e0 04             	shl    eax,0x4
c0014f76:	01 d0                	add    eax,edx
c0014f78:	83 c0 03             	add    eax,0x3
c0014f7b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f7d:	0f b6 d8             	movzx  ebx,al
c0014f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f83:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f8c:	c1 e0 04             	shl    eax,0x4
c0014f8f:	01 d0                	add    eax,edx
c0014f91:	83 c0 02             	add    eax,0x2
c0014f94:	8a 00                	mov    al,BYTE PTR [eax]
c0014f96:	0f b6 c8             	movzx  ecx,al
c0014f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fa5:	c1 e0 04             	shl    eax,0x4
c0014fa8:	01 d0                	add    eax,edx
c0014faa:	40                   	inc    eax
c0014fab:	8a 00                	mov    al,BYTE PTR [eax]
c0014fad:	0f b6 d0             	movzx  edx,al
c0014fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fbc:	c1 e0 04             	shl    eax,0x4
c0014fbf:	01 f0                	add    eax,esi
c0014fc1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc3:	0f b6 c0             	movzx  eax,al
c0014fc6:	83 ec 0c             	sub    esp,0xc
c0014fc9:	53                   	push   ebx
c0014fca:	51                   	push   ecx
c0014fcb:	52                   	push   edx
c0014fcc:	50                   	push   eax
c0014fcd:	68 b4 ab 02 c0       	push   0xc002abb4
c0014fd2:	e8 02 d6 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0014fd7:	83 c4 20             	add    esp,0x20
c0014fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fe0:	83 c0 03             	add    eax,0x3
c0014fe3:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe5:	0f b6 d8             	movzx  ebx,al
c0014fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014feb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fee:	83 c0 02             	add    eax,0x2
c0014ff1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff3:	0f b6 c8             	movzx  ecx,al
c0014ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ffc:	40                   	inc    eax
c0014ffd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fff:	0f b6 d0             	movzx  edx,al
c0015002:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015005:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015008:	8a 00                	mov    al,BYTE PTR [eax]
c001500a:	0f b6 c0             	movzx  eax,al
c001500d:	83 ec 0c             	sub    esp,0xc
c0015010:	53                   	push   ebx
c0015011:	51                   	push   ecx
c0015012:	52                   	push   edx
c0015013:	50                   	push   eax
c0015014:	68 dc ab 02 c0       	push   0xc002abdc
c0015019:	e8 bb d5 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001501e:	83 c4 20             	add    esp,0x20
c0015021:	83 ec 0c             	sub    esp,0xc
c0015024:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015027:	e8 48 f4 ff ff       	call   c0014474 <displayDebugInfo(regs*)>
c001502c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001502f:	5b                   	pop    ebx
c0015030:	5e                   	pop    esi
c0015031:	5d                   	pop    ebp
c0015032:	c3                   	ret    

c0015033 <displayProgramFault(char const*)>:
c0015033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015038:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001503b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015041:	85 c0                	test   eax,eax
c0015043:	74 15                	je     c001505a <displayProgramFault(char const*)+0x27>
c0015045:	83 ec 0c             	sub    esp,0xc
c0015048:	6a 04                	push   0x4
c001504a:	6a 0f                	push   0xf
c001504c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015050:	50                   	push   eax
c0015051:	e8 ac b4 ff ff       	call   c0010502 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015056:	83 c4 1c             	add    esp,0x1c
c0015059:	c3                   	ret    
c001505a:	c3                   	ret    

c001505b <setupInterruptController()>:
c001505b:	55                   	push   ebp
c001505c:	89 e5                	mov    ebp,esp
c001505e:	53                   	push   ebx
c001505f:	83 ec 24             	sub    esp,0x24
c0015062:	b8 00 00 00 00       	mov    eax,0x0
c0015067:	85 c0                	test   eax,eax
c0015069:	0f 95 c0             	setne  al
c001506c:	84 c0                	test   al,al
c001506e:	74 5b                	je     c00150cb <setupInterruptController()+0x70>
c0015070:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015077:	83 ec 0c             	sub    esp,0xc
c001507a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001507d:	e8 17 a5 ff ff       	call   c000f599 <malloc>
c0015082:	83 c4 10             	add    esp,0x10
c0015085:	89 c3                	mov    ebx,eax
c0015087:	83 ec 0c             	sub    esp,0xc
c001508a:	53                   	push   ebx
c001508b:	e8 fc 04 01 00       	call   c002558c <APIC::APIC()>
c0015090:	83 c4 10             	add    esp,0x10
c0015093:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015096:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015099:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001509c:	8b 00                	mov    eax,DWORD PTR [eax]
c001509e:	83 c0 08             	add    eax,0x8
c00150a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a3:	6a 00                	push   0x0
c00150a5:	6a 00                	push   0x0
c00150a7:	6a 00                	push   0x0
c00150a9:	52                   	push   edx
c00150aa:	ff d0                	call   eax
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00150b4:	83 ec 08             	sub    esp,0x8
c00150b7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150ba:	50                   	push   eax
c00150bb:	e8 52 e9 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c00150c0:	83 c4 10             	add    esp,0x10
c00150c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150c6:	e9 79 03 00 00       	jmp    c0015444 <setupInterruptController()+0x3e9>
c00150cb:	a0 c0 00 03 c0       	mov    al,ds:0xc00300c0
c00150d0:	84 c0                	test   al,al
c00150d2:	75 14                	jne    c00150e8 <setupInterruptController()+0x8d>
c00150d4:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00150d9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00150df:	83 e2 fe             	and    edx,0xfffffffe
c00150e2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00150e8:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00150ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150f3:	83 e0 01             	and    eax,0x1
c00150f6:	84 c0                	test   al,al
c00150f8:	0f 95 c0             	setne  al
c00150fb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150fe:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015105:	83 ec 0c             	sub    esp,0xc
c0015108:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001510b:	e8 89 a4 ff ff       	call   c000f599 <malloc>
c0015110:	83 c4 10             	add    esp,0x10
c0015113:	89 c3                	mov    ebx,eax
c0015115:	83 ec 0c             	sub    esp,0xc
c0015118:	53                   	push   ebx
c0015119:	e8 c6 09 01 00       	call   c0025ae4 <PIC::PIC()>
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015124:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015127:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001512a:	8b 00                	mov    eax,DWORD PTR [eax]
c001512c:	83 c0 08             	add    eax,0x8
c001512f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015131:	6a 00                	push   0x0
c0015133:	6a 00                	push   0x0
c0015135:	6a 00                	push   0x0
c0015137:	52                   	push   edx
c0015138:	ff d0                	call   eax
c001513a:	83 c4 10             	add    esp,0x10
c001513d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015141:	74 73                	je     c00151b6 <setupInterruptController()+0x15b>
c0015143:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015146:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015149:	8b 00                	mov    eax,DWORD PTR [eax]
c001514b:	83 c0 0c             	add    eax,0xc
c001514e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015150:	6a 00                	push   0x0
c0015152:	6a 00                	push   0x0
c0015154:	6a 00                	push   0x0
c0015156:	52                   	push   edx
c0015157:	ff d0                	call   eax
c0015159:	83 c4 10             	add    esp,0x10
c001515c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015160:	74 15                	je     c0015177 <setupInterruptController()+0x11c>
c0015162:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015165:	8b 00                	mov    eax,DWORD PTR [eax]
c0015167:	83 c0 04             	add    eax,0x4
c001516a:	8b 00                	mov    eax,DWORD PTR [eax]
c001516c:	83 ec 0c             	sub    esp,0xc
c001516f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015172:	ff d0                	call   eax
c0015174:	83 c4 10             	add    esp,0x10
c0015177:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001517e:	83 ec 0c             	sub    esp,0xc
c0015181:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015184:	e8 10 a4 ff ff       	call   c000f599 <malloc>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	89 c3                	mov    ebx,eax
c001518e:	83 ec 0c             	sub    esp,0xc
c0015191:	53                   	push   ebx
c0015192:	e8 f5 03 01 00       	call   c002558c <APIC::APIC()>
c0015197:	83 c4 10             	add    esp,0x10
c001519a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001519d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a5:	83 c0 08             	add    eax,0x8
c00151a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00151aa:	6a 00                	push   0x0
c00151ac:	6a 00                	push   0x0
c00151ae:	6a 00                	push   0x0
c00151b0:	52                   	push   edx
c00151b1:	ff d0                	call   eax
c00151b3:	83 c4 10             	add    esp,0x10
c00151b6:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00151bb:	83 ec 08             	sub    esp,0x8
c00151be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c1:	50                   	push   eax
c00151c2:	e8 4b e8 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	c7 05 c8 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8c8,0x0
c00151d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d9:	83 c0 24             	add    eax,0x24
c00151dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151de:	6a 00                	push   0x0
c00151e0:	68 f7 49 01 c0       	push   0xc00149f7
c00151e5:	6a 00                	push   0x0
c00151e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ea:	ff d0                	call   eax
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f4:	83 c0 24             	add    eax,0x24
c00151f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f9:	6a 00                	push   0x0
c00151fb:	68 f7 49 01 c0       	push   0xc00149f7
c0015200:	6a 01                	push   0x1
c0015202:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015205:	ff d0                	call   eax
c0015207:	83 c4 10             	add    esp,0x10
c001520a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520d:	8b 00                	mov    eax,DWORD PTR [eax]
c001520f:	83 c0 24             	add    eax,0x24
c0015212:	8b 00                	mov    eax,DWORD PTR [eax]
c0015214:	6a 00                	push   0x0
c0015216:	68 d1 42 01 c0       	push   0xc00142d1
c001521b:	6a 02                	push   0x2
c001521d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015220:	ff d0                	call   eax
c0015222:	83 c4 10             	add    esp,0x10
c0015225:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015228:	8b 00                	mov    eax,DWORD PTR [eax]
c001522a:	83 c0 24             	add    eax,0x24
c001522d:	8b 00                	mov    eax,DWORD PTR [eax]
c001522f:	6a 00                	push   0x0
c0015231:	68 f7 49 01 c0       	push   0xc00149f7
c0015236:	6a 03                	push   0x3
c0015238:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001523b:	ff d0                	call   eax
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015243:	8b 00                	mov    eax,DWORD PTR [eax]
c0015245:	83 c0 24             	add    eax,0x24
c0015248:	8b 00                	mov    eax,DWORD PTR [eax]
c001524a:	6a 00                	push   0x0
c001524c:	68 f7 49 01 c0       	push   0xc00149f7
c0015251:	6a 04                	push   0x4
c0015253:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015256:	ff d0                	call   eax
c0015258:	83 c4 10             	add    esp,0x10
c001525b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015260:	83 c0 24             	add    eax,0x24
c0015263:	8b 00                	mov    eax,DWORD PTR [eax]
c0015265:	6a 00                	push   0x0
c0015267:	68 f7 49 01 c0       	push   0xc00149f7
c001526c:	6a 05                	push   0x5
c001526e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015271:	ff d0                	call   eax
c0015273:	83 c4 10             	add    esp,0x10
c0015276:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	83 c0 24             	add    eax,0x24
c001527e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015280:	6a 00                	push   0x0
c0015282:	68 16 4a 01 c0       	push   0xc0014a16
c0015287:	6a 06                	push   0x6
c0015289:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001528c:	ff d0                	call   eax
c001528e:	83 c4 10             	add    esp,0x10
c0015291:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015294:	8b 00                	mov    eax,DWORD PTR [eax]
c0015296:	83 c0 24             	add    eax,0x24
c0015299:	8b 00                	mov    eax,DWORD PTR [eax]
c001529b:	6a 00                	push   0x0
c001529d:	68 03 49 01 c0       	push   0xc0014903
c00152a2:	6a 07                	push   0x7
c00152a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152a7:	ff d0                	call   eax
c00152a9:	83 c4 10             	add    esp,0x10
c00152ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152af:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b1:	83 c0 24             	add    eax,0x24
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	6a 00                	push   0x0
c00152b8:	68 ec 40 01 c0       	push   0xc00140ec
c00152bd:	6a 08                	push   0x8
c00152bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c2:	ff d0                	call   eax
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cc:	83 c0 24             	add    eax,0x24
c00152cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d1:	6a 00                	push   0x0
c00152d3:	68 f7 49 01 c0       	push   0xc00149f7
c00152d8:	6a 09                	push   0x9
c00152da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152dd:	ff d0                	call   eax
c00152df:	83 c4 10             	add    esp,0x10
c00152e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e7:	83 c0 24             	add    eax,0x24
c00152ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ec:	6a 00                	push   0x0
c00152ee:	68 f7 49 01 c0       	push   0xc00149f7
c00152f3:	6a 0a                	push   0xa
c00152f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152f8:	ff d0                	call   eax
c00152fa:	83 c4 10             	add    esp,0x10
c00152fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015300:	8b 00                	mov    eax,DWORD PTR [eax]
c0015302:	83 c0 24             	add    eax,0x24
c0015305:	8b 00                	mov    eax,DWORD PTR [eax]
c0015307:	6a 00                	push   0x0
c0015309:	68 f7 49 01 c0       	push   0xc00149f7
c001530e:	6a 0b                	push   0xb
c0015310:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015313:	ff d0                	call   eax
c0015315:	83 c4 10             	add    esp,0x10
c0015318:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531b:	8b 00                	mov    eax,DWORD PTR [eax]
c001531d:	83 c0 24             	add    eax,0x24
c0015320:	8b 00                	mov    eax,DWORD PTR [eax]
c0015322:	6a 00                	push   0x0
c0015324:	68 f7 49 01 c0       	push   0xc00149f7
c0015329:	6a 0c                	push   0xc
c001532b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532e:	ff d0                	call   eax
c0015330:	83 c4 10             	add    esp,0x10
c0015333:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015336:	8b 00                	mov    eax,DWORD PTR [eax]
c0015338:	83 c0 24             	add    eax,0x24
c001533b:	8b 00                	mov    eax,DWORD PTR [eax]
c001533d:	6a 00                	push   0x0
c001533f:	68 76 49 01 c0       	push   0xc0014976
c0015344:	6a 0d                	push   0xd
c0015346:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015349:	ff d0                	call   eax
c001534b:	83 c4 10             	add    esp,0x10
c001534e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015351:	8b 00                	mov    eax,DWORD PTR [eax]
c0015353:	83 c0 24             	add    eax,0x24
c0015356:	8b 00                	mov    eax,DWORD PTR [eax]
c0015358:	6a 00                	push   0x0
c001535a:	68 af 49 01 c0       	push   0xc00149af
c001535f:	6a 0e                	push   0xe
c0015361:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015364:	ff d0                	call   eax
c0015366:	83 c4 10             	add    esp,0x10
c0015369:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536c:	8b 00                	mov    eax,DWORD PTR [eax]
c001536e:	83 c0 24             	add    eax,0x24
c0015371:	8b 00                	mov    eax,DWORD PTR [eax]
c0015373:	6a 00                	push   0x0
c0015375:	68 f7 49 01 c0       	push   0xc00149f7
c001537a:	6a 0f                	push   0xf
c001537c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537f:	ff d0                	call   eax
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015387:	8b 00                	mov    eax,DWORD PTR [eax]
c0015389:	83 c0 24             	add    eax,0x24
c001538c:	8b 00                	mov    eax,DWORD PTR [eax]
c001538e:	6a 00                	push   0x0
c0015390:	68 f7 49 01 c0       	push   0xc00149f7
c0015395:	6a 10                	push   0x10
c0015397:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539a:	ff d0                	call   eax
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a4:	83 c0 24             	add    eax,0x24
c00153a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a9:	6a 00                	push   0x0
c00153ab:	68 f7 49 01 c0       	push   0xc00149f7
c00153b0:	6a 11                	push   0x11
c00153b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b5:	ff d0                	call   eax
c00153b7:	83 c4 10             	add    esp,0x10
c00153ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	83 c0 24             	add    eax,0x24
c00153c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c4:	6a 00                	push   0x0
c00153c6:	68 f7 49 01 c0       	push   0xc00149f7
c00153cb:	6a 12                	push   0x12
c00153cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d0:	ff d0                	call   eax
c00153d2:	83 c4 10             	add    esp,0x10
c00153d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153da:	83 c0 24             	add    eax,0x24
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	6a 00                	push   0x0
c00153e1:	68 f7 49 01 c0       	push   0xc00149f7
c00153e6:	6a 13                	push   0x13
c00153e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153eb:	ff d0                	call   eax
c00153ed:	83 c4 10             	add    esp,0x10
c00153f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f5:	83 c0 24             	add    eax,0x24
c00153f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fa:	6a 00                	push   0x0
c00153fc:	68 f7 49 01 c0       	push   0xc00149f7
c0015401:	6a 14                	push   0x14
c0015403:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015406:	ff d0                	call   eax
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015410:	83 c0 24             	add    eax,0x24
c0015413:	8b 00                	mov    eax,DWORD PTR [eax]
c0015415:	6a 00                	push   0x0
c0015417:	68 f7 49 01 c0       	push   0xc00149f7
c001541c:	6a 1e                	push   0x1e
c001541e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015421:	ff d0                	call   eax
c0015423:	83 c4 10             	add    esp,0x10
c0015426:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015429:	8b 00                	mov    eax,DWORD PTR [eax]
c001542b:	83 c0 24             	add    eax,0x24
c001542e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015430:	6a 00                	push   0x0
c0015432:	68 34 bf 01 c0       	push   0xc001bf34
c0015437:	6a 60                	push   0x60
c0015439:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543c:	ff d0                	call   eax
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015444:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015447:	c9                   	leave  
c0015448:	c3                   	ret    
c0015449:	90                   	nop

c001544a <InterruptController::convertLegacyIRQNumber(int)>:
c001544a:	55                   	push   ebp
c001544b:	89 e5                	mov    ebp,esp
c001544d:	83 ec 08             	sub    esp,0x8
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	83 ec 0c             	sub    esp,0xc
c0015456:	50                   	push   eax
c0015457:	e8 b6 e8 ff ff       	call   c0013d12 <Device::getName()>
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	8a 00                	mov    al,BYTE PTR [eax]
c0015461:	3c 41                	cmp    al,0x41
c0015463:	0f 94 c0             	sete   al
c0015466:	84 c0                	test   al,al
c0015468:	74 28                	je     c0015492 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001546a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001546e:	7f 12                	jg     c0015482 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015470:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015473:	05 a0 c9 02 c0       	add    eax,0xc002c9a0
c0015478:	8a 00                	mov    al,BYTE PTR [eax]
c001547a:	0f b6 c0             	movzx  eax,al
c001547d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015480:	eb 10                	jmp    c0015492 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015482:	83 ec 0c             	sub    esp,0xc
c0015485:	68 04 ac 02 c0       	push   0xc002ac04
c001548a:	e8 b6 48 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015495:	c9                   	leave  
c0015496:	c3                   	ret    
c0015497:	90                   	nop

c0015498 <startGUI(void*)>:
c0015498:	55                   	push   ebp
c0015499:	89 e5                	mov    ebp,esp
c001549b:	53                   	push   ebx
c001549c:	83 ec 04             	sub    esp,0x4
c001549f:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00154a4:	48                   	dec    eax
c00154a5:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c00154aa:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00154af:	85 c0                	test   eax,eax
c00154b1:	75 01                	jne    c00154b4 <startGUI(void*)+0x1c>
c00154b3:	fb                   	sti    
c00154b4:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c00154ba:	83 ec 08             	sub    esp,0x8
c00154bd:	6a 01                	push   0x1
c00154bf:	68 84 ac 02 c0       	push   0xc002ac84
c00154c4:	e8 46 7a 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	83 ec 08             	sub    esp,0x8
c00154cf:	53                   	push   ebx
c00154d0:	50                   	push   eax
c00154d1:	e8 64 7c 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c00154df:	83 ec 08             	sub    esp,0x8
c00154e2:	6a 01                	push   0x1
c00154e4:	68 9e ac 02 c0       	push   0xc002ac9e
c00154e9:	e8 21 7a 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	83 ec 08             	sub    esp,0x8
c00154f4:	53                   	push   ebx
c00154f5:	50                   	push   eax
c00154f6:	e8 3f 7c 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	90                   	nop
c00154ff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015502:	c9                   	leave  
c0015503:	c3                   	ret    

c0015504 <startGUIVESA(void*)>:
c0015504:	55                   	push   ebp
c0015505:	89 e5                	mov    ebp,esp
c0015507:	53                   	push   ebx
c0015508:	83 ec 04             	sub    esp,0x4
c001550b:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0015510:	48                   	dec    eax
c0015511:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0015516:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001551b:	85 c0                	test   eax,eax
c001551d:	75 01                	jne    c0015520 <startGUIVESA(void*)+0x1c>
c001551f:	fb                   	sti    
c0015520:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c0015526:	83 ec 08             	sub    esp,0x8
c0015529:	6a 01                	push   0x1
c001552b:	68 b8 ac 02 c0       	push   0xc002acb8
c0015530:	e8 da 79 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	83 ec 08             	sub    esp,0x8
c001553b:	53                   	push   ebx
c001553c:	50                   	push   eax
c001553d:	e8 f8 7b 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c0015542:	83 c4 10             	add    esp,0x10
c0015545:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c001554b:	83 ec 08             	sub    esp,0x8
c001554e:	6a 01                	push   0x1
c0015550:	68 9e ac 02 c0       	push   0xc002ac9e
c0015555:	e8 b5 79 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	83 ec 08             	sub    esp,0x8
c0015560:	53                   	push   ebx
c0015561:	50                   	push   eax
c0015562:	e8 d3 7b 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c0015567:	83 c4 10             	add    esp,0x10
c001556a:	90                   	nop
c001556b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001556e:	c9                   	leave  
c001556f:	c3                   	ret    

c0015570 <sendKeyToTerminal(unsigned char)>:
c0015570:	55                   	push   ebp
c0015571:	89 e5                	mov    ebp,esp
c0015573:	83 ec 28             	sub    esp,0x28
c0015576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015579:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001557c:	a1 04 d8 02 c0       	mov    eax,ds:0xc002d804
c0015581:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015585:	83 ec 08             	sub    esp,0x8
c0015588:	52                   	push   edx
c0015589:	50                   	push   eax
c001558a:	e8 19 b4 ff ff       	call   c00109a8 <VgaText::receiveKey(unsigned char)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015596:	0f 85 8f 00 00 00    	jne    c001562b <sendKeyToTerminal(unsigned char)+0xbb>
c001559c:	fa                   	cli    
c001559d:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c00155a2:	40                   	inc    eax
c00155a3:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c00155a8:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c00155ad:	40                   	inc    eax
c00155ae:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c00155b3:	a1 e0 d8 02 c0       	mov    eax,ds:0xc002d8e0
c00155b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155bb:	c7 05 e0 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8e0,0x0
c00155c5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155c9:	74 1f                	je     c00155ea <sendKeyToTerminal(unsigned char)+0x7a>
c00155cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00155d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155da:	83 ec 0c             	sub    esp,0xc
c00155dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155e0:	e8 6d 87 00 00       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	eb db                	jmp    c00155c5 <sendKeyToTerminal(unsigned char)+0x55>
c00155ea:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c00155ef:	48                   	dec    eax
c00155f0:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c00155f5:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c00155fa:	85 c0                	test   eax,eax
c00155fc:	75 18                	jne    c0015616 <sendKeyToTerminal(unsigned char)+0xa6>
c00155fe:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c0015603:	85 c0                	test   eax,eax
c0015605:	74 0f                	je     c0015616 <sendKeyToTerminal(unsigned char)+0xa6>
c0015607:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c0015611:	e8 b9 82 00 00       	call   c001d8cf <schedule()>
c0015616:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001561b:	48                   	dec    eax
c001561c:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0015621:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0015626:	85 c0                	test   eax,eax
c0015628:	75 01                	jne    c001562b <sendKeyToTerminal(unsigned char)+0xbb>
c001562a:	fb                   	sti    
c001562b:	90                   	nop
c001562c:	c9                   	leave  
c001562d:	c3                   	ret    

c001562e <sendKeyboardToken(KeyboardToken)>:
c001562e:	55                   	push   ebp
c001562f:	89 e5                	mov    ebp,esp
c0015631:	83 ec 18             	sub    esp,0x18
c0015634:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563a:	0f b7 c0             	movzx  eax,ax
c001563d:	83 f2 01             	xor    edx,0x1
c0015640:	88 90 00 d9 02 c0    	mov    BYTE PTR [eax-0x3ffd2700],dl
c0015646:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001564b:	85 c0                	test   eax,eax
c001564d:	74 24                	je     c0015673 <sendKeyboardToken(KeyboardToken)+0x45>
c001564f:	8b 0d e8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8e8
c0015655:	83 ec 04             	sub    esp,0x4
c0015658:	68 00 d9 02 c0       	push   0xc002d900
c001565d:	83 ec 08             	sub    esp,0x8
c0015660:	89 e2                	mov    edx,esp
c0015662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015665:	89 02                	mov    DWORD PTR [edx],eax
c0015667:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001566a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001566e:	ff d1                	call   ecx
c0015670:	83 c4 10             	add    esp,0x10
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	66 3d 03 02          	cmp    ax,0x203
c001567a:	75 07                	jne    c0015683 <sendKeyboardToken(KeyboardToken)+0x55>
c001567c:	a0 00 da 02 c0       	mov    al,ds:0xc002da00
c0015681:	84 c0                	test   al,al
c0015683:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015687:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001568a:	a0 08 dd 02 c0       	mov    al,ds:0xc002dd08
c001568f:	38 c2                	cmp    dl,al
c0015691:	74 1c                	je     c00156af <sendKeyboardToken(KeyboardToken)+0x81>
c0015693:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015696:	a2 08 dd 02 c0       	mov    ds:0xc002dd08,al
c001569b:	a0 08 dd 02 c0       	mov    al,ds:0xc002dd08
c00156a0:	0f b6 c0             	movzx  eax,al
c00156a3:	83 ec 0c             	sub    esp,0xc
c00156a6:	50                   	push   eax
c00156a7:	e8 3e a9 ff ff       	call   c000ffea <setTerminalScrollLock(bool)>
c00156ac:	83 c4 10             	add    esp,0x10
c00156af:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00156b2:	84 c0                	test   al,al
c00156b4:	0f 84 ae 00 00 00    	je     c0015768 <sendKeyboardToken(KeyboardToken)+0x13a>
c00156ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bd:	66 3d 10 03          	cmp    ax,0x310
c00156c1:	75 06                	jne    c00156c9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00156c3:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00156c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cc:	66 3d 11 03          	cmp    ax,0x311
c00156d0:	75 06                	jne    c00156d8 <sendKeyboardToken(KeyboardToken)+0xaa>
c00156d2:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	66 3d 12 03          	cmp    ax,0x312
c00156df:	75 06                	jne    c00156e7 <sendKeyboardToken(KeyboardToken)+0xb9>
c00156e1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00156e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ea:	66 3d 13 03          	cmp    ax,0x313
c00156ee:	75 06                	jne    c00156f6 <sendKeyboardToken(KeyboardToken)+0xc8>
c00156f0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00156f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f9:	66 3d 14 03          	cmp    ax,0x314
c00156fd:	75 06                	jne    c0015705 <sendKeyboardToken(KeyboardToken)+0xd7>
c00156ff:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015708:	66 3d 15 03          	cmp    ax,0x315
c001570c:	75 06                	jne    c0015714 <sendKeyboardToken(KeyboardToken)+0xe6>
c001570e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015717:	66 3d 16 03          	cmp    ax,0x316
c001571b:	75 06                	jne    c0015723 <sendKeyboardToken(KeyboardToken)+0xf5>
c001571d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015726:	66 3d 17 03          	cmp    ax,0x317
c001572a:	75 06                	jne    c0015732 <sendKeyboardToken(KeyboardToken)+0x104>
c001572c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015735:	66 3d 18 03          	cmp    ax,0x318
c0015739:	75 06                	jne    c0015741 <sendKeyboardToken(KeyboardToken)+0x113>
c001573b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015744:	66 3d 19 03          	cmp    ax,0x319
c0015748:	75 06                	jne    c0015750 <sendKeyboardToken(KeyboardToken)+0x122>
c001574a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	66 3d 1a 03          	cmp    ax,0x31a
c0015757:	0f 85 c9 00 00 00    	jne    c0015826 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001575d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015763:	e9 be 00 00 00       	jmp    c0015826 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	66 3d 10 03          	cmp    ax,0x310
c001576f:	75 0a                	jne    c001577b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015771:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015777:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001577b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577e:	66 3d 11 03          	cmp    ax,0x311
c0015782:	75 0a                	jne    c001578e <sendKeyboardToken(KeyboardToken)+0x160>
c0015784:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001578a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001578e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015791:	66 3d 12 03          	cmp    ax,0x312
c0015795:	75 0a                	jne    c00157a1 <sendKeyboardToken(KeyboardToken)+0x173>
c0015797:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001579d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a4:	66 3d 13 03          	cmp    ax,0x313
c00157a8:	75 0a                	jne    c00157b4 <sendKeyboardToken(KeyboardToken)+0x186>
c00157aa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00157b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b7:	66 3d 14 03          	cmp    ax,0x314
c00157bb:	75 0a                	jne    c00157c7 <sendKeyboardToken(KeyboardToken)+0x199>
c00157bd:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00157c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ca:	66 3d 15 03          	cmp    ax,0x315
c00157ce:	75 0a                	jne    c00157da <sendKeyboardToken(KeyboardToken)+0x1ac>
c00157d0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dd:	66 3d 16 03          	cmp    ax,0x316
c00157e1:	75 0a                	jne    c00157ed <sendKeyboardToken(KeyboardToken)+0x1bf>
c00157e3:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00157e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f0:	66 3d 17 03          	cmp    ax,0x317
c00157f4:	75 0a                	jne    c0015800 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00157f6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00157fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015803:	66 3d 18 03          	cmp    ax,0x318
c0015807:	75 0a                	jne    c0015813 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015809:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001580f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015816:	66 3d 19 03          	cmp    ax,0x319
c001581a:	75 0a                	jne    c0015826 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001581c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015822:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015829:	66 3d 00 02          	cmp    ax,0x200
c001582d:	75 2c                	jne    c001585b <sendKeyboardToken(KeyboardToken)+0x22d>
c001582f:	a0 00 dd 02 c0       	mov    al,ds:0xc002dd00
c0015834:	83 f0 01             	xor    eax,0x1
c0015837:	84 c0                	test   al,al
c0015839:	74 20                	je     c001585b <sendKeyboardToken(KeyboardToken)+0x22d>
c001583b:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0015840:	6a 01                	push   0x1
c0015842:	6a 00                	push   0x0
c0015844:	68 98 54 01 c0       	push   0xc0015498
c0015849:	50                   	push   eax
c001584a:	e8 5b 7e 00 00       	call   c001d6aa <Process::createThread(void (*)(void*), void*, int)>
c001584f:	83 c4 10             	add    esp,0x10
c0015852:	c6 05 00 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd00,0x1
c0015859:	eb 33                	jmp    c001588e <sendKeyboardToken(KeyboardToken)+0x260>
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	66 3d 01 02          	cmp    ax,0x201
c0015862:	75 2a                	jne    c001588e <sendKeyboardToken(KeyboardToken)+0x260>
c0015864:	a0 00 dd 02 c0       	mov    al,ds:0xc002dd00
c0015869:	83 f0 01             	xor    eax,0x1
c001586c:	84 c0                	test   al,al
c001586e:	74 1e                	je     c001588e <sendKeyboardToken(KeyboardToken)+0x260>
c0015870:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0015875:	6a 01                	push   0x1
c0015877:	6a 00                	push   0x0
c0015879:	68 04 55 01 c0       	push   0xc0015504
c001587e:	50                   	push   eax
c001587f:	e8 26 7e 00 00       	call   c001d6aa <Process::createThread(void (*)(void*), void*, int)>
c0015884:	83 c4 10             	add    esp,0x10
c0015887:	c6 05 00 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd00,0x1
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	66 3d 1d 03          	cmp    ax,0x31d
c0015895:	75 06                	jne    c001589d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015897:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a0:	66 3d 1c 03          	cmp    ax,0x31c
c00158a4:	75 06                	jne    c00158ac <sendKeyboardToken(KeyboardToken)+0x27e>
c00158a6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00158ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158af:	66 3d 1b 03          	cmp    ax,0x31b
c00158b3:	75 06                	jne    c00158bb <sendKeyboardToken(KeyboardToken)+0x28d>
c00158b5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00158bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158be:	66 3d 1e 03          	cmp    ax,0x31e
c00158c2:	75 06                	jne    c00158ca <sendKeyboardToken(KeyboardToken)+0x29c>
c00158c4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00158ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cd:	66 3d 1f 03          	cmp    ax,0x31f
c00158d1:	75 06                	jne    c00158d9 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00158d3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00158d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158dc:	66 3d 1a 03          	cmp    ax,0x31a
c00158e0:	75 06                	jne    c00158e8 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00158e2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00158e8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00158ec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158ef:	83 f0 01             	xor    eax,0x1
c00158f2:	84 c0                	test   al,al
c00158f4:	74 77                	je     c001596d <sendKeyboardToken(KeyboardToken)+0x33f>
c00158f6:	a0 01 da 02 c0       	mov    al,ds:0xc002da01
c00158fb:	84 c0                	test   al,al
c00158fd:	74 41                	je     c0015940 <sendKeyboardToken(KeyboardToken)+0x312>
c00158ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015903:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015907:	74 2b                	je     c0015934 <sendKeyboardToken(KeyboardToken)+0x306>
c0015909:	8b 15 04 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd04
c001590f:	89 d0                	mov    eax,edx
c0015911:	c1 e0 02             	shl    eax,0x2
c0015914:	01 d0                	add    eax,edx
c0015916:	01 c0                	add    eax,eax
c0015918:	a3 04 dd 02 c0       	mov    ds:0xc002dd04,eax
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	0f b7 c0             	movzx  eax,ax
c0015923:	8d 50 d0             	lea    edx,[eax-0x30]
c0015926:	a1 04 dd 02 c0       	mov    eax,ds:0xc002dd04
c001592b:	01 d0                	add    eax,edx
c001592d:	a3 04 dd 02 c0       	mov    ds:0xc002dd04,eax
c0015932:	eb 6d                	jmp    c00159a1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015934:	c7 05 04 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd04,0x0
c001593e:	eb 61                	jmp    c00159a1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015940:	a1 04 dd 02 c0       	mov    eax,ds:0xc002dd04
c0015945:	85 c0                	test   eax,eax
c0015947:	74 18                	je     c0015961 <sendKeyboardToken(KeyboardToken)+0x333>
c0015949:	a1 04 dd 02 c0       	mov    eax,ds:0xc002dd04
c001594e:	0f b6 c0             	movzx  eax,al
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	50                   	push   eax
c0015955:	e8 16 fc ff ff       	call   c0015570 <sendKeyToTerminal(unsigned char)>
c001595a:	83 c4 10             	add    esp,0x10
c001595d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015961:	c7 05 04 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd04,0x0
c001596b:	eb 34                	jmp    c00159a1 <sendKeyboardToken(KeyboardToken)+0x373>
c001596d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015970:	66 3d 01 01          	cmp    ax,0x101
c0015974:	75 2b                	jne    c00159a1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015976:	a1 04 dd 02 c0       	mov    eax,ds:0xc002dd04
c001597b:	85 c0                	test   eax,eax
c001597d:	74 18                	je     c0015997 <sendKeyboardToken(KeyboardToken)+0x369>
c001597f:	a1 04 dd 02 c0       	mov    eax,ds:0xc002dd04
c0015984:	0f b6 c0             	movzx  eax,al
c0015987:	83 ec 0c             	sub    esp,0xc
c001598a:	50                   	push   eax
c001598b:	e8 e0 fb ff ff       	call   c0015570 <sendKeyToTerminal(unsigned char)>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015997:	c7 05 04 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd04,0x0
c00159a1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159a4:	83 f0 01             	xor    eax,0x1
c00159a7:	84 c0                	test   al,al
c00159a9:	74 4c                	je     c00159f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159ab:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159ae:	83 f0 01             	xor    eax,0x1
c00159b1:	84 c0                	test   al,al
c00159b3:	74 42                	je     c00159f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159b5:	a0 00 da 02 c0       	mov    al,ds:0xc002da00
c00159ba:	83 f0 01             	xor    eax,0x1
c00159bd:	84 c0                	test   al,al
c00159bf:	74 36                	je     c00159f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c4:	66 83 f8 1f          	cmp    ax,0x1f
c00159c8:	76 09                	jbe    c00159d3 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00159ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cd:	66 83 f8 7e          	cmp    ax,0x7e
c00159d1:	76 12                	jbe    c00159e5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d6:	66 83 f8 0a          	cmp    ax,0xa
c00159da:	74 09                	je     c00159e5 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159df:	66 83 f8 08          	cmp    ax,0x8
c00159e3:	75 12                	jne    c00159f7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e8:	0f b6 c0             	movzx  eax,al
c00159eb:	83 ec 0c             	sub    esp,0xc
c00159ee:	50                   	push   eax
c00159ef:	e8 7c fb ff ff       	call   c0015570 <sendKeyToTerminal(unsigned char)>
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159fa:	83 f0 01             	xor    eax,0x1
c00159fd:	84 c0                	test   al,al
c00159ff:	74 4f                	je     c0015a50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a04:	83 f0 01             	xor    eax,0x1
c0015a07:	84 c0                	test   al,al
c0015a09:	74 45                	je     c0015a50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a0b:	a0 00 da 02 c0       	mov    al,ds:0xc002da00
c0015a10:	84 c0                	test   al,al
c0015a12:	74 3c                	je     c0015a50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a17:	66 83 f8 3f          	cmp    ax,0x3f
c0015a1b:	76 33                	jbe    c0015a50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a20:	66 83 f8 7f          	cmp    ax,0x7f
c0015a24:	77 2a                	ja     c0015a50 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a29:	88 c2                	mov    dl,al
c0015a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2e:	66 83 f8 5f          	cmp    ax,0x5f
c0015a32:	76 04                	jbe    c0015a38 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015a34:	b0 20                	mov    al,0x20
c0015a36:	eb 02                	jmp    c0015a3a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015a38:	b0 00                	mov    al,0x0
c0015a3a:	29 c2                	sub    edx,eax
c0015a3c:	88 d0                	mov    al,dl
c0015a3e:	83 e8 40             	sub    eax,0x40
c0015a41:	0f b6 c0             	movzx  eax,al
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	50                   	push   eax
c0015a48:	e8 23 fb ff ff       	call   c0015570 <sendKeyToTerminal(unsigned char)>
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a53:	66 3d 00 03          	cmp    ax,0x300
c0015a57:	75 0f                	jne    c0015a68 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a59:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a5c:	83 f0 01             	xor    eax,0x1
c0015a5f:	84 c0                	test   al,al
c0015a61:	74 05                	je     c0015a68 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a63:	e8 f3 a8 ff ff       	call   c001035b <doTerminalCycle()>
c0015a68:	90                   	nop
c0015a69:	c9                   	leave  
c0015a6a:	c3                   	ret    

c0015a6b <clearInternalKeybuffer(VgaText*)>:
c0015a6b:	55                   	push   ebp
c0015a6c:	89 e5                	mov    ebp,esp
c0015a6e:	83 ec 08             	sub    esp,0x8
c0015a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a74:	05 98 01 00 00       	add    eax,0x198
c0015a79:	83 ec 0c             	sub    esp,0xc
c0015a7c:	50                   	push   eax
c0015a7d:	e8 ea ac fe ff       	call   c000076c <strlen>
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a88:	81 c2 98 01 00 00    	add    edx,0x198
c0015a8e:	83 ec 04             	sub    esp,0x4
c0015a91:	50                   	push   eax
c0015a92:	6a 00                	push   0x0
c0015a94:	52                   	push   edx
c0015a95:	e8 b6 ac fe ff       	call   c0000750 <memset>
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	90                   	nop
c0015a9e:	c9                   	leave  
c0015a9f:	c3                   	ret    

c0015aa0 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015aa0:	55                   	push   ebp
c0015aa1:	89 e5                	mov    ebp,esp
c0015aa3:	83 ec 18             	sub    esp,0x18
c0015aa6:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0015aab:	85 c0                	test   eax,eax
c0015aad:	74 2a                	je     c0015ad9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015aaf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ab5:	8b 0d e8 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8e8
c0015abb:	83 ec 04             	sub    esp,0x4
c0015abe:	68 00 d9 02 c0       	push   0xc002d900
c0015ac3:	83 ec 08             	sub    esp,0x8
c0015ac6:	89 e2                	mov    edx,esp
c0015ac8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015acb:	89 02                	mov    DWORD PTR [edx],eax
c0015acd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ad0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ad4:	ff d1                	call   ecx
c0015ad6:	83 c4 10             	add    esp,0x10
c0015ad9:	fb                   	sti    
c0015ada:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ae1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ae5:	0f 84 a1 00 00 00    	je     c0015b8c <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aee:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015af4:	84 c0                	test   al,al
c0015af6:	75 28                	jne    c0015b20 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015af8:	fa                   	cli    
c0015af9:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0015afe:	40                   	inc    eax
c0015aff:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0015b04:	e8 c6 7d 00 00       	call   c001d8cf <schedule()>
c0015b09:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0015b0e:	48                   	dec    eax
c0015b0f:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c0015b14:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0015b19:	85 c0                	test   eax,eax
c0015b1b:	75 ce                	jne    c0015aeb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b1d:	fb                   	sti    
c0015b1e:	eb cb                	jmp    c0015aeb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b23:	8d 50 01             	lea    edx,[eax+0x1]
c0015b26:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b29:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b2c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015b32:	88 10                	mov    BYTE PTR [eax],dl
c0015b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b37:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b3d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b43:	05 98 01 00 00       	add    eax,0x198
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	50                   	push   eax
c0015b4c:	e8 1b ac fe ff       	call   c000076c <strlen>
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b57:	81 c2 98 01 00 00    	add    edx,0x198
c0015b5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015b60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b63:	81 c2 98 01 00 00    	add    edx,0x198
c0015b69:	83 ec 04             	sub    esp,0x4
c0015b6c:	50                   	push   eax
c0015b6d:	51                   	push   ecx
c0015b6e:	52                   	push   edx
c0015b6f:	e8 14 ab fe ff       	call   c0000688 <memmove>
c0015b74:	83 c4 10             	add    esp,0x10
c0015b77:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015b7d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015b81:	0f 85 5a ff ff ff    	jne    c0015ae1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8a:	eb 03                	jmp    c0015b8f <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015b8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8f:	c9                   	leave  
c0015b90:	c3                   	ret    
c0015b91:	90                   	nop

c0015b92 <Keyboard::Keyboard(char const*)>:
c0015b92:	83 ec 0c             	sub    esp,0xc
c0015b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b99:	83 ec 08             	sub    esp,0x8
c0015b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ba0:	50                   	push   eax
c0015ba1:	e8 70 e0 ff ff       	call   c0013c16 <Device::Device(char const*)>
c0015ba6:	83 c4 10             	add    esp,0x10
c0015ba9:	ba dc ac 02 c0       	mov    edx,0xc002acdc
c0015bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb2:	89 10                	mov    DWORD PTR [eax],edx
c0015bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bb8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015bc2:	c6 05 e4 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8e4,0x1
c0015bc9:	90                   	nop
c0015bca:	83 c4 0c             	add    esp,0xc
c0015bcd:	c3                   	ret    

c0015bce <Keyboard::~Keyboard()>:
c0015bce:	83 ec 0c             	sub    esp,0xc
c0015bd1:	ba dc ac 02 c0       	mov    edx,0xc002acdc
c0015bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bda:	89 10                	mov    DWORD PTR [eax],edx
c0015bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	50                   	push   eax
c0015be4:	e8 f7 dc ff ff       	call   c00138e0 <Device::~Device()>
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	90                   	nop
c0015bed:	83 c4 0c             	add    esp,0xc
c0015bf0:	c3                   	ret    
c0015bf1:	90                   	nop

c0015bf2 <Keyboard::~Keyboard()>:
c0015bf2:	83 ec 0c             	sub    esp,0xc
c0015bf5:	83 ec 0c             	sub    esp,0xc
c0015bf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bfc:	e8 cd ff ff ff       	call   c0015bce <Keyboard::~Keyboard()>
c0015c01:	83 c4 10             	add    esp,0x10
c0015c04:	83 ec 08             	sub    esp,0x8
c0015c07:	68 5c 01 00 00       	push   0x15c
c0015c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c10:	e8 ec c8 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0015c15:	83 c4 10             	add    esp,0x10
c0015c18:	83 c4 0c             	add    esp,0xc
c0015c1b:	c3                   	ret    

c0015c1c <LogicalDisk::close(int, int, void*)>:
c0015c1c:	83 c8 ff             	or     eax,0xffffffff
c0015c1f:	c3                   	ret    

c0015c20 <LogicalDisk::~LogicalDisk()>:
c0015c20:	83 ec 0c             	sub    esp,0xc
c0015c23:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c0015c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c2c:	89 10                	mov    DWORD PTR [eax],edx
c0015c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c32:	83 ec 0c             	sub    esp,0xc
c0015c35:	50                   	push   eax
c0015c36:	e8 a5 dc ff ff       	call   c00138e0 <Device::~Device()>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	90                   	nop
c0015c3f:	83 c4 0c             	add    esp,0xc
c0015c42:	c3                   	ret    
c0015c43:	90                   	nop

c0015c44 <LogicalDisk::~LogicalDisk()>:
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	83 ec 0c             	sub    esp,0xc
c0015c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c4e:	e8 cd ff ff ff       	call   c0015c20 <LogicalDisk::~LogicalDisk()>
c0015c53:	83 c4 10             	add    esp,0x10
c0015c56:	83 ec 08             	sub    esp,0x8
c0015c59:	68 74 01 00 00       	push   0x174
c0015c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c62:	e8 9a c8 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0015c67:	83 c4 10             	add    esp,0x10
c0015c6a:	83 c4 0c             	add    esp,0xc
c0015c6d:	c3                   	ret    

c0015c6e <LogicalDisk::open(int, int, void*)>:
c0015c6e:	83 ec 18             	sub    esp,0x18
c0015c71:	68 08 ad 02 c0       	push   0xc002ad08
c0015c76:	e8 ca 40 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0015c7b:	83 c8 ff             	or     eax,0xffffffff
c0015c7e:	83 c4 1c             	add    esp,0x1c
c0015c81:	c3                   	ret    

c0015c82 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015c82:	53                   	push   ebx
c0015c83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015c87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c8f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015c95:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015c9b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015ca1:	77 10                	ja     c0015cb3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015ca3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015ca9:	89 d3                	mov    ebx,edx
c0015cab:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015cb1:	72 05                	jb     c0015cb8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015cb3:	83 c8 ff             	or     eax,0xffffffff
c0015cb6:	89 c2                	mov    edx,eax
c0015cb8:	5b                   	pop    ebx
c0015cb9:	c3                   	ret    

c0015cba <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015cba:	56                   	push   esi
c0015cbb:	83 c8 ff             	or     eax,0xffffffff
c0015cbe:	53                   	push   ebx
c0015cbf:	89 c2                	mov    edx,eax
c0015cc1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015cc5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015cc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ccd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cd3:	77 27                	ja     c0015cfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cd5:	89 d8                	mov    eax,ebx
c0015cd7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015cdd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015ce3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ce8:	89 c2                	mov    edx,eax
c0015cea:	73 10                	jae    c0015cfc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cec:	89 c8                	mov    eax,ecx
c0015cee:	89 da                	mov    edx,ebx
c0015cf0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015cf6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015cfc:	5b                   	pop    ebx
c0015cfd:	5e                   	pop    esi
c0015cfe:	c3                   	ret    
c0015cff:	90                   	nop

c0015d00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d00:	83 ec 1c             	sub    esp,0x1c
c0015d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d26:	83 ec 08             	sub    esp,0x8
c0015d29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d2d:	50                   	push   eax
c0015d2e:	e8 e3 de ff ff       	call   c0013c16 <Device::Device(char const*)>
c0015d33:	83 c4 10             	add    esp,0x10
c0015d36:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c0015d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d3f:	89 10                	mov    DWORD PTR [eax],edx
c0015d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d45:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d50:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015d65:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d71:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d77:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015d7d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d88:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015d8e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015d94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015d9c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015db0:	90                   	nop
c0015db1:	83 c4 1c             	add    esp,0x1c
c0015db4:	c3                   	ret    
c0015db5:	90                   	nop

c0015db6 <LogicalDisk::assignDriveLetter()>:
c0015db6:	55                   	push   ebp
c0015db7:	57                   	push   edi
c0015db8:	56                   	push   esi
c0015db9:	53                   	push   ebx
c0015dba:	83 ec 14             	sub    esp,0x14
c0015dbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015dc1:	8b 3d 20 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd20
c0015dc7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015dcd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015dd1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015dd7:	8b 3d 24 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd24
c0015ddd:	3c 01                	cmp    al,0x1
c0015ddf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015de3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015de7:	19 c0                	sbb    eax,eax
c0015de9:	83 e0 02             	and    eax,0x2
c0015dec:	83 c0 41             	add    eax,0x41
c0015def:	0f be e8             	movsx  ebp,al
c0015df2:	3c 43                	cmp    al,0x43
c0015df4:	75 10                	jne    c0015e06 <LogicalDisk::assignDriveLetter()+0x50>
c0015df6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015dfd:	75 5d                	jne    c0015e5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015dff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e04:	75 56                	jne    c0015e5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015e06:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e09:	ba 01 00 00 00       	mov    edx,0x1
c0015e0e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e12:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e16:	d3 e2                	shl    edx,cl
c0015e18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e1c:	89 d7                	mov    edi,edx
c0015e1e:	89 d6                	mov    esi,edx
c0015e20:	c1 ff 1f             	sar    edi,0x1f
c0015e23:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e27:	21 f9                	and    ecx,edi
c0015e29:	09 d1                	or     ecx,edx
c0015e2b:	75 2f                	jne    c0015e5c <LogicalDisk::assignDriveLetter()+0xa6>
c0015e2d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e35:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e3b:	09 f2                	or     edx,esi
c0015e3d:	89 15 20 dd 02 c0    	mov    DWORD PTR ds:0xc002dd20,edx
c0015e43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e47:	09 fa                	or     edx,edi
c0015e49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015e4d:	89 15 24 dd 02 c0    	mov    DWORD PTR ds:0xc002dd24,edx
c0015e53:	89 1c bd 40 dd 02 c0 	mov    DWORD PTR [edi*4-0x3ffd22c0],ebx
c0015e5a:	eb 08                	jmp    c0015e64 <LogicalDisk::assignDriveLetter()+0xae>
c0015e5c:	45                   	inc    ebp
c0015e5d:	40                   	inc    eax
c0015e5e:	3c 5b                	cmp    al,0x5b
c0015e60:	75 90                	jne    c0015df2 <LogicalDisk::assignDriveLetter()+0x3c>
c0015e62:	31 c0                	xor    eax,eax
c0015e64:	83 c4 14             	add    esp,0x14
c0015e67:	5b                   	pop    ebx
c0015e68:	5e                   	pop    esi
c0015e69:	5f                   	pop    edi
c0015e6a:	5d                   	pop    ebp
c0015e6b:	c3                   	ret    

c0015e6c <LogicalDisk::mount()>:
c0015e6c:	56                   	push   esi
c0015e6d:	53                   	push   ebx
c0015e6e:	53                   	push   ebx
c0015e6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e73:	8b 1d b4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b4
c0015e79:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015e83:	85 db                	test   ebx,ebx
c0015e85:	74 27                	je     c0015eae <LogicalDisk::mount()+0x42>
c0015e87:	51                   	push   ecx
c0015e88:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015e8f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e91:	83 e8 41             	sub    eax,0x41
c0015e94:	50                   	push   eax
c0015e95:	56                   	push   esi
c0015e96:	53                   	push   ebx
c0015e97:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e9a:	83 c4 10             	add    esp,0x10
c0015e9d:	84 c0                	test   al,al
c0015e9f:	74 08                	je     c0015ea9 <LogicalDisk::mount()+0x3d>
c0015ea1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015ea7:	eb 07                	jmp    c0015eb0 <LogicalDisk::mount()+0x44>
c0015ea9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015eac:	eb d5                	jmp    c0015e83 <LogicalDisk::mount()+0x17>
c0015eae:	31 c0                	xor    eax,eax
c0015eb0:	5a                   	pop    edx
c0015eb1:	5b                   	pop    ebx
c0015eb2:	5e                   	pop    esi
c0015eb3:	c3                   	ret    

c0015eb4 <LogicalDisk::unmount()>:
c0015eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ec2:	c3                   	ret    
c0015ec3:	90                   	nop

c0015ec4 <LogicalDisk::eject()>:
c0015ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ece:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ed0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ed4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015ed7:	90                   	nop

c0015ed8 <LogicalDisk::unassignDriveLetter()>:
c0015ed8:	57                   	push   edi
c0015ed9:	56                   	push   esi
c0015eda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ede:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015ee5:	84 c9                	test   cl,cl
c0015ee7:	75 0f                	jne    c0015ef8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015ee9:	c7 44 24 0c 2c ad 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ad2c
c0015ef1:	5e                   	pop    esi
c0015ef2:	5f                   	pop    edi
c0015ef3:	e9 4d 3e 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c0015ef8:	83 e9 41             	sub    ecx,0x41
c0015efb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f02:	b8 01 00 00 00       	mov    eax,0x1
c0015f07:	c7 04 8d 40 dd 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd22c0],0x0
c0015f12:	d3 e0                	shl    eax,cl
c0015f14:	89 c7                	mov    edi,eax
c0015f16:	f7 d0                	not    eax
c0015f18:	c1 ff 1f             	sar    edi,0x1f
c0015f1b:	21 05 20 dd 02 c0    	and    DWORD PTR ds:0xc002dd20,eax
c0015f21:	89 fe                	mov    esi,edi
c0015f23:	f7 d6                	not    esi
c0015f25:	21 35 24 dd 02 c0    	and    DWORD PTR ds:0xc002dd24,esi
c0015f2b:	5e                   	pop    esi
c0015f2c:	5f                   	pop    edi
c0015f2d:	c3                   	ret    

c0015f2e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f2e:	57                   	push   edi
c0015f2f:	56                   	push   esi
c0015f30:	53                   	push   ebx
c0015f31:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f41:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f47:	77 41                	ja     c0015f8a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015f49:	99                   	cdq    
c0015f4a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f50:	01 c8                	add    eax,ecx
c0015f52:	11 da                	adc    edx,ebx
c0015f54:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f5a:	19 d7                	sbb    edi,edx
c0015f5c:	72 33                	jb     c0015f91 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015f5e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f64:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f6e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f72:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f82:	5b                   	pop    ebx
c0015f83:	5e                   	pop    esi
c0015f84:	5f                   	pop    edi
c0015f85:	e9 cc 0a 00 00       	jmp    c0016a56 <VCache::read(unsigned long long, int, void*)>
c0015f8a:	b8 05 00 00 00       	mov    eax,0x5
c0015f8f:	eb 05                	jmp    c0015f96 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015f91:	b8 07 00 00 00       	mov    eax,0x7
c0015f96:	5b                   	pop    ebx
c0015f97:	5e                   	pop    esi
c0015f98:	5f                   	pop    edi
c0015f99:	c3                   	ret    

c0015f9a <LogicalDisk::write(unsigned long long, int, void*)>:
c0015f9a:	57                   	push   edi
c0015f9b:	56                   	push   esi
c0015f9c:	53                   	push   ebx
c0015f9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fa5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fb3:	77 41                	ja     c0015ff6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015fb5:	99                   	cdq    
c0015fb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fbc:	01 c8                	add    eax,ecx
c0015fbe:	11 da                	adc    edx,ebx
c0015fc0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fc6:	19 d7                	sbb    edi,edx
c0015fc8:	72 33                	jb     c0015ffd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015fca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fd0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fde:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fe4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fee:	5b                   	pop    ebx
c0015fef:	5e                   	pop    esi
c0015ff0:	5f                   	pop    edi
c0015ff1:	e9 76 09 00 00       	jmp    c001696c <VCache::write(unsigned long long, int, void*)>
c0015ff6:	b8 05 00 00 00       	mov    eax,0x5
c0015ffb:	eb 05                	jmp    c0016002 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ffd:	b8 07 00 00 00       	mov    eax,0x7
c0016002:	5b                   	pop    ebx
c0016003:	5e                   	pop    esi
c0016004:	5f                   	pop    edi
c0016005:	c3                   	ret    

c0016006 <Mouse::Mouse(char const*)>:
c0016006:	83 ec 0c             	sub    esp,0xc
c0016009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600d:	83 ec 08             	sub    esp,0x8
c0016010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016014:	50                   	push   eax
c0016015:	e8 fc db ff ff       	call   c0013c16 <Device::Device(char const*)>
c001601a:	83 c4 10             	add    esp,0x10
c001601d:	ba 80 ad 02 c0       	mov    edx,0xc002ad80
c0016022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016026:	89 10                	mov    DWORD PTR [eax],edx
c0016028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016036:	90                   	nop
c0016037:	83 c4 0c             	add    esp,0xc
c001603a:	c3                   	ret    
c001603b:	90                   	nop

c001603c <Mouse::~Mouse()>:
c001603c:	83 ec 0c             	sub    esp,0xc
c001603f:	ba 80 ad 02 c0       	mov    edx,0xc002ad80
c0016044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016048:	89 10                	mov    DWORD PTR [eax],edx
c001604a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604e:	83 ec 0c             	sub    esp,0xc
c0016051:	50                   	push   eax
c0016052:	e8 89 d8 ff ff       	call   c00138e0 <Device::~Device()>
c0016057:	83 c4 10             	add    esp,0x10
c001605a:	90                   	nop
c001605b:	83 c4 0c             	add    esp,0xc
c001605e:	c3                   	ret    
c001605f:	90                   	nop

c0016060 <Mouse::~Mouse()>:
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	83 ec 0c             	sub    esp,0xc
c0016066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001606a:	e8 cd ff ff ff       	call   c001603c <Mouse::~Mouse()>
c001606f:	83 c4 10             	add    esp,0x10
c0016072:	83 ec 08             	sub    esp,0x8
c0016075:	68 58 01 00 00       	push   0x158
c001607a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001607e:	e8 7e c4 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0016083:	83 c4 10             	add    esp,0x10
c0016086:	83 c4 0c             	add    esp,0xc
c0016089:	c3                   	ret    

c001608a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001608a:	55                   	push   ebp
c001608b:	57                   	push   edi
c001608c:	56                   	push   esi
c001608d:	53                   	push   ebx
c001608e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016094:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001609b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00160a2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00160a9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00160b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160b4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00160b8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160bf:	e8 4e dc ff ff       	call   c0013d12 <Device::getName()>
c00160c4:	5a                   	pop    edx
c00160c5:	59                   	pop    ecx
c00160c6:	50                   	push   eax
c00160c7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00160cb:	55                   	push   ebp
c00160cc:	e8 3b a7 fe ff       	call   c000080c <strcpy>
c00160d1:	5b                   	pop    ebx
c00160d2:	58                   	pop    eax
c00160d3:	68 a4 ad 02 c0       	push   0xc002ada4
c00160d8:	55                   	push   ebp
c00160d9:	e8 6e a8 fe ff       	call   c000094c <strcat>
c00160de:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00160e5:	e8 af 94 ff ff       	call   c000f599 <malloc>
c00160ea:	83 c4 0c             	add    esp,0xc
c00160ed:	89 c3                	mov    ebx,eax
c00160ef:	57                   	push   edi
c00160f0:	56                   	push   esi
c00160f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160f9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016100:	55                   	push   ebp
c0016101:	50                   	push   eax
c0016102:	e8 f9 fb ff ff       	call   c0015d00 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016107:	83 c4 14             	add    esp,0x14
c001610a:	53                   	push   ebx
c001610b:	e8 a6 fc ff ff       	call   c0015db6 <LogicalDisk::assignDriveLetter()>
c0016110:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016113:	e8 54 fd ff ff       	call   c0015e6c <LogicalDisk::mount()>
c0016118:	58                   	pop    eax
c0016119:	5a                   	pop    edx
c001611a:	53                   	push   ebx
c001611b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016122:	e8 eb d8 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c0016127:	81 c4 2c 01 00 00    	add    esp,0x12c
c001612d:	5b                   	pop    ebx
c001612e:	5e                   	pop    esi
c001612f:	5f                   	pop    edi
c0016130:	5d                   	pop    ebp
c0016131:	c3                   	ret    

c0016132 <createPartitionsForDisk(PhysicalDisk*)>:
c0016132:	55                   	push   ebp
c0016133:	57                   	push   edi
c0016134:	56                   	push   esi
c0016135:	53                   	push   ebx
c0016136:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001613c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016143:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016149:	3d 00 02 00 00       	cmp    eax,0x200
c001614e:	74 27                	je     c0016177 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016150:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016156:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001615c:	83 ec 10             	sub    esp,0x10
c001615f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016163:	99                   	cdq    
c0016164:	c1 e6 0a             	shl    esi,0xa
c0016167:	52                   	push   edx
c0016168:	89 fd                	mov    ebp,edi
c001616a:	50                   	push   eax
c001616b:	55                   	push   ebp
c001616c:	56                   	push   esi
c001616d:	e8 a2 04 01 00       	call   c0026614 <__udivdi3>
c0016172:	e9 b1 00 00 00       	jmp    c0016228 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016177:	83 ec 0c             	sub    esp,0xc
c001617a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001617c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016180:	56                   	push   esi
c0016181:	6a 01                	push   0x1
c0016183:	6a 00                	push   0x0
c0016185:	6a 00                	push   0x0
c0016187:	53                   	push   ebx
c0016188:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001618b:	83 c4 20             	add    esp,0x20
c001618e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016196:	75 0a                	jne    c00161a2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016198:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00161a0:	74 2c                	je     c00161ce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00161a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161b4:	83 ec 10             	sub    esp,0x10
c00161b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161bb:	89 f7                	mov    edi,esi
c00161bd:	c1 e0 0a             	shl    eax,0xa
c00161c0:	c1 ff 1f             	sar    edi,0x1f
c00161c3:	57                   	push   edi
c00161c4:	56                   	push   esi
c00161c5:	52                   	push   edx
c00161c6:	50                   	push   eax
c00161c7:	e8 48 04 01 00       	call   c0026614 <__udivdi3>
c00161cc:	eb 5a                	jmp    c0016228 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161ce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00161d5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00161dc:	83 e1 7f             	and    ecx,0x7f
c00161df:	83 e0 7f             	and    eax,0x7f
c00161e2:	01 c1                	add    ecx,eax
c00161e4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00161eb:	83 e0 7f             	and    eax,0x7f
c00161ee:	01 c1                	add    ecx,eax
c00161f0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00161f7:	83 e0 7f             	and    eax,0x7f
c00161fa:	00 c1                	add    cl,al
c00161fc:	74 41                	je     c001623f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00161fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016204:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001620a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016210:	83 ec 10             	sub    esp,0x10
c0016213:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016217:	89 f7                	mov    edi,esi
c0016219:	c1 e0 0a             	shl    eax,0xa
c001621c:	c1 ff 1f             	sar    edi,0x1f
c001621f:	57                   	push   edi
c0016220:	56                   	push   esi
c0016221:	52                   	push   edx
c0016222:	50                   	push   eax
c0016223:	e8 ec 03 01 00       	call   c0026614 <__udivdi3>
c0016228:	83 c4 14             	add    esp,0x14
c001622b:	52                   	push   edx
c001622c:	50                   	push   eax
c001622d:	6a 00                	push   0x0
c001622f:	6a 00                	push   0x0
c0016231:	53                   	push   ebx
c0016232:	e8 53 fe ff ff       	call   c001608a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016237:	83 c4 20             	add    esp,0x20
c001623a:	e9 79 01 00 00       	jmp    c00163b8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001623f:	89 f0                	mov    eax,esi
c0016241:	31 f6                	xor    esi,esi
c0016243:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001624a:	75 02                	jne    c001624e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001624c:	89 f1                	mov    ecx,esi
c001624e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016255:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001625c:	c1 e2 08             	shl    edx,0x8
c001625f:	c1 e7 10             	shl    edi,0x10
c0016262:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001626a:	09 fa                	or     edx,edi
c001626c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016274:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001627b:	83 c0 10             	add    eax,0x10
c001627e:	09 fa                	or     edx,edi
c0016280:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016287:	c1 e7 18             	shl    edi,0x18
c001628a:	09 fa                	or     edx,edi
c001628c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016293:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016297:	c1 e7 10             	shl    edi,0x10
c001629a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00162a1:	c1 e2 08             	shl    edx,0x8
c00162a4:	09 fa                	or     edx,edi
c00162a6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00162ad:	09 fa                	or     edx,edi
c00162af:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00162b6:	c1 e7 18             	shl    edi,0x18
c00162b9:	09 fa                	or     edx,edi
c00162bb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00162bf:	46                   	inc    esi
c00162c0:	83 fe 04             	cmp    esi,0x4
c00162c3:	0f 85 7a ff ff ff    	jne    c0016243 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00162c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162cd:	83 f0 01             	xor    eax,0x1
c00162d0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00162d4:	75 57                	jne    c001632d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162da:	83 f0 01             	xor    eax,0x1
c00162dd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00162e1:	75 4a                	jne    c001632d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162e3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00162e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00162ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00162f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016303:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016309:	0f a4 c2 0a          	shld   edx,eax,0xa
c001630d:	89 f7                	mov    edi,esi
c001630f:	c1 e0 0a             	shl    eax,0xa
c0016312:	c1 ff 1f             	sar    edi,0x1f
c0016315:	57                   	push   edi
c0016316:	56                   	push   esi
c0016317:	52                   	push   edx
c0016318:	50                   	push   eax
c0016319:	e8 f6 02 01 00       	call   c0026614 <__udivdi3>
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016325:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016329:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001632d:	84 c9                	test   cl,cl
c001632f:	74 53                	je     c0016384 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016331:	0f b6 c9             	movzx  ecx,cl
c0016334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016338:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001633c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016340:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001634c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016350:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016354:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016358:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001635c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016360:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016364:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016368:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001636c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016370:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016374:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016378:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001637c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016380:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016384:	31 ed                	xor    ebp,ebp
c0016386:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001638a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001638e:	89 f8                	mov    eax,edi
c0016390:	09 f0                	or     eax,esi
c0016392:	74 1e                	je     c00163b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016394:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016398:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001639c:	89 d1                	mov    ecx,edx
c001639e:	09 c1                	or     ecx,eax
c00163a0:	74 10                	je     c00163b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00163a2:	83 ec 0c             	sub    esp,0xc
c00163a5:	57                   	push   edi
c00163a6:	56                   	push   esi
c00163a7:	52                   	push   edx
c00163a8:	50                   	push   eax
c00163a9:	53                   	push   ebx
c00163aa:	e8 db fc ff ff       	call   c001608a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163af:	83 c4 20             	add    esp,0x20
c00163b2:	45                   	inc    ebp
c00163b3:	83 fd 04             	cmp    ebp,0x4
c00163b6:	75 ce                	jne    c0016386 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00163b8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00163be:	5b                   	pop    ebx
c00163bf:	5e                   	pop    esi
c00163c0:	5f                   	pop    edi
c00163c1:	5d                   	pop    ebp
c00163c2:	c3                   	ret    
c00163c3:	90                   	nop

c00163c4 <Serial::Serial(char const*)>:
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163cb:	83 ec 08             	sub    esp,0x8
c00163ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d2:	50                   	push   eax
c00163d3:	e8 3e d8 ff ff       	call   c0013c16 <Device::Device(char const*)>
c00163d8:	83 c4 10             	add    esp,0x10
c00163db:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c00163e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e4:	89 10                	mov    DWORD PTR [eax],edx
c00163e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00163f4:	90                   	nop
c00163f5:	83 c4 0c             	add    esp,0xc
c00163f8:	c3                   	ret    
c00163f9:	90                   	nop

c00163fa <Serial::~Serial()>:
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c0016402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016406:	89 10                	mov    DWORD PTR [eax],edx
c0016408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640c:	83 ec 0c             	sub    esp,0xc
c001640f:	50                   	push   eax
c0016410:	e8 cb d4 ff ff       	call   c00138e0 <Device::~Device()>
c0016415:	83 c4 10             	add    esp,0x10
c0016418:	90                   	nop
c0016419:	83 c4 0c             	add    esp,0xc
c001641c:	c3                   	ret    
c001641d:	90                   	nop

c001641e <Serial::~Serial()>:
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	83 ec 0c             	sub    esp,0xc
c0016424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016428:	e8 cd ff ff ff       	call   c00163fa <Serial::~Serial()>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	83 ec 08             	sub    esp,0x8
c0016433:	68 58 01 00 00       	push   0x158
c0016438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643c:	e8 c0 c0 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0016441:	83 c4 10             	add    esp,0x10
c0016444:	83 c4 0c             	add    esp,0xc
c0016447:	c3                   	ret    

c0016448 <Timer::Timer(char const*)>:
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644f:	83 ec 08             	sub    esp,0x8
c0016452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016456:	50                   	push   eax
c0016457:	e8 ba d7 ff ff       	call   c0013c16 <Device::Device(char const*)>
c001645c:	83 c4 10             	add    esp,0x10
c001645f:	ba fc ad 02 c0       	mov    edx,0xc002adfc
c0016464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016468:	89 10                	mov    DWORD PTR [eax],edx
c001646a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016478:	90                   	nop
c0016479:	83 c4 0c             	add    esp,0xc
c001647c:	c3                   	ret    
c001647d:	90                   	nop

c001647e <Timer::~Timer()>:
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	ba fc ad 02 c0       	mov    edx,0xc002adfc
c0016486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648a:	89 10                	mov    DWORD PTR [eax],edx
c001648c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016490:	83 ec 0c             	sub    esp,0xc
c0016493:	50                   	push   eax
c0016494:	e8 47 d4 ff ff       	call   c00138e0 <Device::~Device()>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	90                   	nop
c001649d:	83 c4 0c             	add    esp,0xc
c00164a0:	c3                   	ret    
c00164a1:	90                   	nop

c00164a2 <Timer::~Timer()>:
c00164a2:	83 ec 0c             	sub    esp,0xc
c00164a5:	83 ec 0c             	sub    esp,0xc
c00164a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ac:	e8 cd ff ff ff       	call   c001647e <Timer::~Timer()>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	83 ec 08             	sub    esp,0x8
c00164b7:	68 5c 01 00 00       	push   0x15c
c00164bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c0:	e8 3c c0 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	83 c4 0c             	add    esp,0xc
c00164cb:	c3                   	ret    

c00164cc <Timer::read()>:
c00164cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164d6:	c3                   	ret    

c00164d7 <timerHandler(unsigned long long)>:
c00164d7:	55                   	push   ebp
c00164d8:	57                   	push   edi
c00164d9:	56                   	push   esi
c00164da:	53                   	push   ebx
c00164db:	83 ec 0c             	sub    esp,0xc
c00164de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00164e2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00164e6:	01 35 b0 dd 02 c0    	add    DWORD PTR ds:0xc002ddb0,esi
c00164ec:	11 3d b4 dd 02 c0    	adc    DWORD PTR ds:0xc002ddb4,edi
c00164f2:	80 3d 4d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d74d,0x0
c00164f9:	0f 84 42 01 00 00    	je     c0016641 <timerHandler(unsigned long long)+0x16a>
c00164ff:	fa                   	cli    
c0016500:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c0016506:	83 ec 0c             	sub    esp,0xc
c0016509:	ff 05 64 0c 03 c0    	inc    DWORD PTR ds:0xc0030c64
c001650f:	68 78 0c 03 c0       	push   0xc0030c78
c0016514:	e8 55 21 01 00       	call   c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016519:	83 c4 10             	add    esp,0x10
c001651c:	84 c0                	test   al,al
c001651e:	0f 85 a2 00 00 00    	jne    c00165c6 <timerHandler(unsigned long long)+0xef>
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	68 78 0c 03 c0       	push   0xc0030c78
c001652c:	e8 59 21 01 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	89 c3                	mov    ebx,eax
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	68 78 0c 03 c0       	push   0xc0030c78
c001653e:	e8 47 21 01 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016543:	c7 04 24 78 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c78
c001654a:	89 c5                	mov    ebp,eax
c001654c:	e8 41 21 01 00       	call   c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016551:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016554:	83 c4 10             	add    esp,0x10
c0016557:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001655a:	39 15 b0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddb0,edx
c0016560:	a1 b4 dd 02 c0       	mov    eax,ds:0xc002ddb4
c0016565:	19 c8                	sbb    eax,ecx
c0016567:	72 21                	jb     c001658a <timerHandler(unsigned long long)+0xb3>
c0016569:	83 ec 0c             	sub    esp,0xc
c001656c:	55                   	push   ebp
c001656d:	e8 e0 77 00 00       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	39 eb                	cmp    ebx,ebp
c0016577:	75 21                	jne    c001659a <timerHandler(unsigned long long)+0xc3>
c0016579:	83 ec 0c             	sub    esp,0xc
c001657c:	68 78 0c 03 c0       	push   0xc0030c78
c0016581:	e8 04 21 01 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016586:	89 c3                	mov    ebx,eax
c0016588:	eb 0d                	jmp    c0016597 <timerHandler(unsigned long long)+0xc0>
c001658a:	50                   	push   eax
c001658b:	50                   	push   eax
c001658c:	55                   	push   ebp
c001658d:	68 78 0c 03 c0       	push   0xc0030c78
c0016592:	e8 a9 21 01 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	83 ec 0c             	sub    esp,0xc
c001659d:	68 78 0c 03 c0       	push   0xc0030c78
c00165a2:	e8 c7 20 01 00       	call   c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165a7:	83 c4 10             	add    esp,0x10
c00165aa:	84 c0                	test   al,al
c00165ac:	75 18                	jne    c00165c6 <timerHandler(unsigned long long)+0xef>
c00165ae:	83 ec 0c             	sub    esp,0xc
c00165b1:	68 78 0c 03 c0       	push   0xc0030c78
c00165b6:	e8 cf 20 01 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	39 d8                	cmp    eax,ebx
c00165c0:	0f 85 70 ff ff ff    	jne    c0016536 <timerHandler(unsigned long long)+0x5f>
c00165c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165cb:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00165cf:	74 3d                	je     c001660e <timerHandler(unsigned long long)+0x137>
c00165d1:	80 3d 4c d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d74c,0x0
c00165d8:	74 34                	je     c001660e <timerHandler(unsigned long long)+0x137>
c00165da:	fa                   	cli    
c00165db:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c00165e1:	31 d2                	xor    edx,edx
c00165e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e8:	89 f9                	mov    ecx,edi
c00165ea:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00165ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00165f5:	39 c6                	cmp    esi,eax
c00165f7:	19 d1                	sbb    ecx,edx
c00165f9:	72 05                	jb     c0016600 <timerHandler(unsigned long long)+0x129>
c00165fb:	e8 cf 72 00 00       	call   c001d8cf <schedule()>
c0016600:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0016605:	48                   	dec    eax
c0016606:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001660b:	75 01                	jne    c001660e <timerHandler(unsigned long long)+0x137>
c001660d:	fb                   	sti    
c001660e:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c0016613:	48                   	dec    eax
c0016614:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c0016619:	75 18                	jne    c0016633 <timerHandler(unsigned long long)+0x15c>
c001661b:	83 3d 60 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c60,0x0
c0016622:	74 0f                	je     c0016633 <timerHandler(unsigned long long)+0x15c>
c0016624:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001662e:	e8 9c 72 00 00       	call   c001d8cf <schedule()>
c0016633:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0016638:	48                   	dec    eax
c0016639:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001663e:	75 01                	jne    c0016641 <timerHandler(unsigned long long)+0x16a>
c0016640:	fb                   	sti    
c0016641:	83 c4 0c             	add    esp,0xc
c0016644:	5b                   	pop    ebx
c0016645:	5e                   	pop    esi
c0016646:	5f                   	pop    edi
c0016647:	5d                   	pop    ebp
c0016648:	c3                   	ret    

c0016649 <setupTimer(int)>:
c0016649:	57                   	push   edi
c001664a:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001664f:	56                   	push   esi
c0016650:	53                   	push   ebx
c0016651:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016655:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001665b:	83 ec 0c             	sub    esp,0xc
c001665e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016664:	e8 a9 d6 ff ff       	call   c0013d12 <Device::getName()>
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001666f:	0f 85 8d 00 00 00    	jne    c0016702 <setupTimer(int)+0xb9>
c0016675:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001667a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016681:	74 7f                	je     c0016702 <setupTimer(int)+0xb9>
c0016683:	83 ec 0c             	sub    esp,0xc
c0016686:	68 5c 01 00 00       	push   0x15c
c001668b:	e8 09 8f ff ff       	call   c000f599 <malloc>
c0016690:	89 04 24             	mov    DWORD PTR [esp],eax
c0016693:	89 c3                	mov    ebx,eax
c0016695:	e8 54 fb 00 00       	call   c00261ee <PIT::PIT()>
c001669a:	59                   	pop    ecx
c001669b:	5f                   	pop    edi
c001669c:	53                   	push   ebx
c001669d:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c00166a3:	e8 6a d3 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c00166a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166aa:	6a 00                	push   0x0
c00166ac:	6a 00                	push   0x0
c00166ae:	56                   	push   esi
c00166af:	53                   	push   ebx
c00166b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166b3:	83 c4 14             	add    esp,0x14
c00166b6:	68 60 01 00 00       	push   0x160
c00166bb:	e8 d9 8e ff ff       	call   c000f599 <malloc>
c00166c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c3:	89 c7                	mov    edi,eax
c00166c5:	e8 d4 f9 00 00       	call   c002609e <APICTimer::APICTimer()>
c00166ca:	6a 00                	push   0x0
c00166cc:	6a 00                	push   0x0
c00166ce:	56                   	push   esi
c00166cf:	57                   	push   edi
c00166d0:	e8 cb f8 00 00       	call   c0025fa0 <APICTimer::open(int, int, void*)>
c00166d5:	83 c4 20             	add    esp,0x20
c00166d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166da:	6a 00                	push   0x0
c00166dc:	6a 00                	push   0x0
c00166de:	6a 00                	push   0x0
c00166e0:	53                   	push   ebx
c00166e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166e4:	58                   	pop    eax
c00166e5:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00166ea:	5a                   	pop    edx
c00166eb:	57                   	push   edi
c00166ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166f2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166f8:	e8 15 d3 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	eb 33                	jmp    c0016735 <setupTimer(int)+0xec>
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	68 5c 01 00 00       	push   0x15c
c001670a:	e8 8a 8e ff ff       	call   c000f599 <malloc>
c001670f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016712:	89 c3                	mov    ebx,eax
c0016714:	e8 d5 fa 00 00       	call   c00261ee <PIT::PIT()>
c0016719:	58                   	pop    eax
c001671a:	5a                   	pop    edx
c001671b:	53                   	push   ebx
c001671c:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c0016722:	e8 eb d2 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c0016727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016729:	6a 00                	push   0x0
c001672b:	6a 00                	push   0x0
c001672d:	56                   	push   esi
c001672e:	53                   	push   ebx
c001672f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016732:	83 c4 20             	add    esp,0x20
c0016735:	89 d8                	mov    eax,ebx
c0016737:	5b                   	pop    ebx
c0016738:	5e                   	pop    esi
c0016739:	5f                   	pop    edi
c001673a:	c3                   	ret    
c001673b:	90                   	nop

c001673c <VCache::VCache(PhysicalDisk*)>:
c001673c:	53                   	push   ebx
c001673d:	83 ec 18             	sub    esp,0x18
c0016740:	ba 2c ae 02 c0       	mov    edx,0xc002ae2c
c0016745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016749:	89 10                	mov    DWORD PTR [eax],edx
c001674b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001675a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016765:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001676c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016777:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001677e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016789:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016794:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00167a3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00167aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00167b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00167ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00167cd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167dc:	e8 b8 8d ff ff       	call   c000f599 <malloc>
c00167e1:	83 c4 10             	add    esp,0x10
c00167e4:	89 c3                	mov    ebx,eax
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	53                   	push   ebx
c00167ea:	e8 a9 6e 00 00       	call   c001d698 <Mutex::Mutex()>
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016801:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016808:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001680f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016813:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016820:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016824:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001682a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016830:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016834:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016837:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001683a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016842:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016846:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001684c:	05 00 01 00 00       	add    eax,0x100
c0016851:	c1 e0 04             	shl    eax,0x4
c0016854:	83 ec 0c             	sub    esp,0xc
c0016857:	50                   	push   eax
c0016858:	e8 3c 8d ff ff       	call   c000f599 <malloc>
c001685d:	83 c4 10             	add    esp,0x10
c0016860:	89 c2                	mov    edx,eax
c0016862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016866:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016878:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001687c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016880:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016886:	c1 e0 07             	shl    eax,0x7
c0016889:	83 ec 0c             	sub    esp,0xc
c001688c:	50                   	push   eax
c001688d:	e8 07 8d ff ff       	call   c000f599 <malloc>
c0016892:	83 c4 10             	add    esp,0x10
c0016895:	89 c2                	mov    edx,eax
c0016897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001689e:	90                   	nop
c001689f:	83 c4 18             	add    esp,0x18
c00168a2:	5b                   	pop    ebx
c00168a3:	c3                   	ret    

c00168a4 <VCache::invalidateReadBuffer()>:
c00168a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168a8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00168ae:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168b2:	c3                   	ret    
c00168b3:	90                   	nop

c00168b4 <VCache::writeWriteBuffer()>:
c00168b4:	53                   	push   ebx
c00168b5:	83 ec 14             	sub    esp,0x14
c00168b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00168bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00168c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168c7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00168ca:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00168cd:	50                   	push   eax
c00168ce:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00168d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00168d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00168df:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00168e3:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00168ea:	83 c4 28             	add    esp,0x28
c00168ed:	5b                   	pop    ebx
c00168ee:	c3                   	ret    
c00168ef:	90                   	nop

c00168f0 <VCache::~VCache()>:
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	ba 2c ae 02 c0       	mov    edx,0xc002ae2c
c00168f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168fc:	89 10                	mov    DWORD PTR [eax],edx
c00168fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016902:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016905:	84 c0                	test   al,al
c0016907:	74 0f                	je     c0016918 <VCache::~VCache()+0x28>
c0016909:	83 ec 0c             	sub    esp,0xc
c001690c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016910:	e8 9f ff ff ff       	call   c00168b4 <VCache::writeWriteBuffer()>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001691f:	83 ec 0c             	sub    esp,0xc
c0016922:	50                   	push   eax
c0016923:	e8 81 8c ff ff       	call   c000f5a9 <free>
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016932:	83 ec 0c             	sub    esp,0xc
c0016935:	50                   	push   eax
c0016936:	e8 6e 8c ff ff       	call   c000f5a9 <free>
c001693b:	83 c4 10             	add    esp,0x10
c001693e:	90                   	nop
c001693f:	83 c4 0c             	add    esp,0xc
c0016942:	c3                   	ret    
c0016943:	90                   	nop

c0016944 <VCache::~VCache()>:
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	83 ec 0c             	sub    esp,0xc
c001694a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001694e:	e8 9d ff ff ff       	call   c00168f0 <VCache::~VCache()>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	83 ec 08             	sub    esp,0x8
c0016959:	6a 44                	push   0x44
c001695b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001695f:	e8 9d bb ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	83 c4 0c             	add    esp,0xc
c001696a:	c3                   	ret    
c001696b:	90                   	nop

c001696c <VCache::write(unsigned long long, int, void*)>:
c001696c:	55                   	push   ebp
c001696d:	57                   	push   edi
c001696e:	56                   	push   esi
c001696f:	53                   	push   ebx
c0016970:	83 ec 18             	sub    esp,0x18
c0016973:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001697b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001697f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016982:	e8 57 72 00 00       	call   c001dbde <Semaphore::acquire()>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001698e:	74 0c                	je     c001699c <VCache::write(unsigned long long, int, void*)+0x30>
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	53                   	push   ebx
c0016994:	e8 0b ff ff ff       	call   c00168a4 <VCache::invalidateReadBuffer()>
c0016999:	83 c4 10             	add    esp,0x10
c001699c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00169a0:	74 5c                	je     c00169fe <VCache::write(unsigned long long, int, void*)+0x92>
c00169a2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00169a5:	89 e8                	mov    eax,ebp
c00169a7:	99                   	cdq    
c00169a8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00169ab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00169ae:	89 c1                	mov    ecx,eax
c00169b0:	89 d0                	mov    eax,edx
c00169b2:	31 f1                	xor    ecx,esi
c00169b4:	31 f8                	xor    eax,edi
c00169b6:	09 c1                	or     ecx,eax
c00169b8:	75 38                	jne    c00169f2 <VCache::write(unsigned long long, int, void*)+0x86>
c00169ba:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00169bf:	75 31                	jne    c00169f2 <VCache::write(unsigned long long, int, void*)+0x86>
c00169c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169c4:	89 ef                	mov    edi,ebp
c00169c6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00169cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169d0:	0f af f9             	imul   edi,ecx
c00169d3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00169d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169db:	40                   	inc    eax
c00169dc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00169df:	83 c0 80             	add    eax,0xffffff80
c00169e2:	75 5c                	jne    c0016a40 <VCache::write(unsigned long long, int, void*)+0xd4>
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	53                   	push   ebx
c00169e8:	e8 c7 fe ff ff       	call   c00168b4 <VCache::writeWriteBuffer()>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	eb 4e                	jmp    c0016a40 <VCache::write(unsigned long long, int, void*)+0xd4>
c00169f2:	83 ec 0c             	sub    esp,0xc
c00169f5:	53                   	push   ebx
c00169f6:	e8 b9 fe ff ff       	call   c00168b4 <VCache::writeWriteBuffer()>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a01:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016a06:	7f 22                	jg     c0016a2a <VCache::write(unsigned long long, int, void*)+0xbe>
c0016a08:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016a0b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016a0e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016a12:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a16:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016a19:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016a1c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a22:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a28:	eb 16                	jmp    c0016a40 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a2a:	83 ec 0c             	sub    esp,0xc
c0016a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a37:	57                   	push   edi
c0016a38:	56                   	push   esi
c0016a39:	50                   	push   eax
c0016a3a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a3d:	83 c4 20             	add    esp,0x20
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a46:	e8 ef 77 00 00       	call   c001e23a <Semaphore::release()>
c0016a4b:	83 c4 1c             	add    esp,0x1c
c0016a4e:	31 c0                	xor    eax,eax
c0016a50:	5b                   	pop    ebx
c0016a51:	5e                   	pop    esi
c0016a52:	5f                   	pop    edi
c0016a53:	5d                   	pop    ebp
c0016a54:	c3                   	ret    
c0016a55:	90                   	nop

c0016a56 <VCache::read(unsigned long long, int, void*)>:
c0016a56:	55                   	push   ebp
c0016a57:	57                   	push   edi
c0016a58:	56                   	push   esi
c0016a59:	53                   	push   ebx
c0016a5a:	83 ec 28             	sub    esp,0x28
c0016a5d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016a61:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a65:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a69:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016a6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a70:	e8 69 71 00 00       	call   c001dbde <Semaphore::acquire()>
c0016a75:	83 c4 10             	add    esp,0x10
c0016a78:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a7c:	74 0c                	je     c0016a8a <VCache::read(unsigned long long, int, void*)+0x34>
c0016a7e:	83 ec 0c             	sub    esp,0xc
c0016a81:	53                   	push   ebx
c0016a82:	e8 2d fe ff ff       	call   c00168b4 <VCache::writeWriteBuffer()>
c0016a87:	83 c4 10             	add    esp,0x10
c0016a8a:	83 fd 01             	cmp    ebp,0x1
c0016a8d:	0f 85 80 00 00 00    	jne    c0016b13 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016a93:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a9a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016aa1:	75 70                	jne    c0016b13 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016aa3:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016aa6:	89 e9                	mov    ecx,ebp
c0016aa8:	f7 d9                	neg    ecx
c0016aaa:	89 c8                	mov    eax,ecx
c0016aac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ab0:	c1 f8 1f             	sar    eax,0x1f
c0016ab3:	21 f1                	and    ecx,esi
c0016ab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ab9:	89 c8                	mov    eax,ecx
c0016abb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016abf:	21 f9                	and    ecx,edi
c0016ac1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ac5:	89 ca                	mov    edx,ecx
c0016ac7:	74 0a                	je     c0016ad3 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ac9:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016acc:	75 05                	jne    c0016ad3 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ace:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016ad1:	74 23                	je     c0016af6 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016ad3:	83 ec 0c             	sub    esp,0xc
c0016ad6:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016ada:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016ade:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016ae1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016ae4:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ae6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ae9:	55                   	push   ebp
c0016aea:	52                   	push   edx
c0016aeb:	50                   	push   eax
c0016aec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016af0:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016af3:	83 c4 20             	add    esp,0x20
c0016af6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016af9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016afd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b03:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b06:	48                   	dec    eax
c0016b07:	21 c6                	and    esi,eax
c0016b09:	0f af f1             	imul   esi,ecx
c0016b0c:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016b0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b11:	eb 1d                	jmp    c0016b30 <VCache::read(unsigned long long, int, void*)+0xda>
c0016b13:	83 ec 0c             	sub    esp,0xc
c0016b16:	53                   	push   ebx
c0016b17:	e8 88 fd ff ff       	call   c00168a4 <VCache::invalidateReadBuffer()>
c0016b1c:	5a                   	pop    edx
c0016b1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b20:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b26:	55                   	push   ebp
c0016b27:	57                   	push   edi
c0016b28:	56                   	push   esi
c0016b29:	50                   	push   eax
c0016b2a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016b2d:	83 c4 20             	add    esp,0x20
c0016b30:	83 ec 0c             	sub    esp,0xc
c0016b33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b36:	e8 ff 76 00 00       	call   c001e23a <Semaphore::release()>
c0016b3b:	83 c4 2c             	add    esp,0x2c
c0016b3e:	31 c0                	xor    eax,eax
c0016b40:	5b                   	pop    ebx
c0016b41:	5e                   	pop    esi
c0016b42:	5f                   	pop    edi
c0016b43:	5d                   	pop    ebp
c0016b44:	c3                   	ret    
c0016b45:	90                   	nop

c0016b46 <Video::putrect(int, int, int, int, unsigned int)>:
c0016b46:	55                   	push   ebp
c0016b47:	57                   	push   edi
c0016b48:	56                   	push   esi
c0016b49:	53                   	push   ebx
c0016b4a:	83 ec 1c             	sub    esp,0x1c
c0016b4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b59:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b65:	01 df                	add    edi,ebx
c0016b67:	39 fb                	cmp    ebx,edi
c0016b69:	7d 1f                	jge    c0016b8a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b6b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b6f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b73:	7d 12                	jge    c0016b87 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b75:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b77:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b7b:	53                   	push   ebx
c0016b7c:	55                   	push   ebp
c0016b7d:	45                   	inc    ebp
c0016b7e:	56                   	push   esi
c0016b7f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016b82:	83 c4 10             	add    esp,0x10
c0016b85:	eb e8                	jmp    c0016b6f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016b87:	43                   	inc    ebx
c0016b88:	eb dd                	jmp    c0016b67 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016b8a:	83 c4 1c             	add    esp,0x1c
c0016b8d:	5b                   	pop    ebx
c0016b8e:	5e                   	pop    esi
c0016b8f:	5f                   	pop    edi
c0016b90:	5d                   	pop    ebp
c0016b91:	c3                   	ret    

c0016b92 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016b92:	55                   	push   ebp
c0016b93:	57                   	push   edi
c0016b94:	31 ff                	xor    edi,edi
c0016b96:	56                   	push   esi
c0016b97:	53                   	push   ebx
c0016b98:	83 ec 1c             	sub    esp,0x1c
c0016b9b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016b9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ba3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016baa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016baf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bb3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016bb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016bbb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016bbe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016bc2:	01 f9                	add    ecx,edi
c0016bc4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016bc8:	7d 2f                	jge    c0016bf9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016bca:	31 f6                	xor    esi,esi
c0016bcc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bd0:	01 f2                	add    edx,esi
c0016bd2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016bd6:	7d 1a                	jge    c0016bf2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016bd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bdb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016bde:	46                   	inc    esi
c0016bdf:	51                   	push   ecx
c0016be0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016be4:	52                   	push   edx
c0016be5:	55                   	push   ebp
c0016be6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bf0:	eb da                	jmp    c0016bcc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016bf2:	47                   	inc    edi
c0016bf3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016bf7:	eb c5                	jmp    c0016bbe <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016bf9:	83 c4 1c             	add    esp,0x1c
c0016bfc:	5b                   	pop    ebx
c0016bfd:	5e                   	pop    esi
c0016bfe:	5f                   	pop    edi
c0016bff:	5d                   	pop    ebp
c0016c00:	c3                   	ret    
c0016c01:	90                   	nop

c0016c02 <Video::blit(unsigned int*, int, int, int, int)>:
c0016c02:	55                   	push   ebp
c0016c03:	57                   	push   edi
c0016c04:	56                   	push   esi
c0016c05:	53                   	push   ebx
c0016c06:	83 ec 1c             	sub    esp,0x1c
c0016c09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c11:	85 c0                	test   eax,eax
c0016c13:	79 02                	jns    c0016c17 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016c15:	31 c0                	xor    eax,eax
c0016c17:	c1 e0 02             	shl    eax,0x2
c0016c1a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c26:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016c2a:	39 d8                	cmp    eax,ebx
c0016c2c:	7e 49                	jle    c0016c77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c2e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c34:	7c 41                	jl     c0016c77 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c36:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016c3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c3e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c42:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c46:	39 f9                	cmp    ecx,edi
c0016c48:	7e 22                	jle    c0016c6c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c4a:	83 c5 04             	add    ebp,0x4
c0016c4d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c53:	7c 14                	jl     c0016c69 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c55:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c57:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c5a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c62:	56                   	push   esi
c0016c63:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c66:	83 c4 10             	add    esp,0x10
c0016c69:	47                   	inc    edi
c0016c6a:	eb d2                	jmp    c0016c3e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c70:	43                   	inc    ebx
c0016c71:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c75:	eb ab                	jmp    c0016c22 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c77:	83 c4 1c             	add    esp,0x1c
c0016c7a:	5b                   	pop    ebx
c0016c7b:	5e                   	pop    esi
c0016c7c:	5f                   	pop    edi
c0016c7d:	5d                   	pop    ebp
c0016c7e:	c3                   	ret    
c0016c7f:	90                   	nop

c0016c80 <Video::clearScreen(unsigned int)>:
c0016c80:	57                   	push   edi
c0016c81:	56                   	push   esi
c0016c82:	53                   	push   ebx
c0016c83:	31 db                	xor    ebx,ebx
c0016c85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016c89:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c8f:	7e 1f                	jle    c0016cb0 <Video::clearScreen(unsigned int)+0x30>
c0016c91:	31 ff                	xor    edi,edi
c0016c93:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c99:	7e 12                	jle    c0016cad <Video::clearScreen(unsigned int)+0x2d>
c0016c9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ca1:	53                   	push   ebx
c0016ca2:	57                   	push   edi
c0016ca3:	47                   	inc    edi
c0016ca4:	56                   	push   esi
c0016ca5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ca8:	83 c4 10             	add    esp,0x10
c0016cab:	eb e6                	jmp    c0016c93 <Video::clearScreen(unsigned int)+0x13>
c0016cad:	43                   	inc    ebx
c0016cae:	eb d9                	jmp    c0016c89 <Video::clearScreen(unsigned int)+0x9>
c0016cb0:	5b                   	pop    ebx
c0016cb1:	5e                   	pop    esi
c0016cb2:	5f                   	pop    edi
c0016cb3:	c3                   	ret    

c0016cb4 <Video::putpixel(int, int, unsigned int)>:
c0016cb4:	c7 44 24 04 34 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ae34
c0016cbc:	e9 84 30 00 00       	jmp    c0019d45 <Krnl::panic(char const*)>
c0016cc1:	90                   	nop

c0016cc2 <Video::Video(char const*)>:
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc9:	83 ec 08             	sub    esp,0x8
c0016ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd0:	50                   	push   eax
c0016cd1:	e8 40 cf ff ff       	call   c0013c16 <Device::Device(char const*)>
c0016cd6:	83 c4 10             	add    esp,0x10
c0016cd9:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c0016cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce2:	89 10                	mov    DWORD PTR [eax],edx
c0016ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016cf2:	90                   	nop
c0016cf3:	83 c4 0c             	add    esp,0xc
c0016cf6:	c3                   	ret    
c0016cf7:	90                   	nop

c0016cf8 <Video::~Video()>:
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	ba a4 ae 02 c0       	mov    edx,0xc002aea4
c0016d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d04:	89 10                	mov    DWORD PTR [eax],edx
c0016d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	50                   	push   eax
c0016d0e:	e8 cd cb ff ff       	call   c00138e0 <Device::~Device()>
c0016d13:	83 c4 10             	add    esp,0x10
c0016d16:	90                   	nop
c0016d17:	83 c4 0c             	add    esp,0xc
c0016d1a:	c3                   	ret    
c0016d1b:	90                   	nop

c0016d1c <Video::~Video()>:
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	83 ec 0c             	sub    esp,0xc
c0016d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d26:	e8 cd ff ff ff       	call   c0016cf8 <Video::~Video()>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	83 ec 08             	sub    esp,0x8
c0016d31:	68 64 01 00 00       	push   0x164
c0016d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d3a:	e8 c2 b7 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0016d3f:	83 c4 10             	add    esp,0x10
c0016d42:	83 c4 0c             	add    esp,0xc
c0016d45:	c3                   	ret    

c0016d46 <Video::isMonochrome()>:
c0016d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d4a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d50:	c3                   	ret    
c0016d51:	90                   	nop

c0016d52 <Video::getWidth()>:
c0016d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d5c:	c3                   	ret    
c0016d5d:	90                   	nop

c0016d5e <Video::getHeight()>:
c0016d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d62:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d68:	c3                   	ret    
c0016d69:	90                   	nop

c0016d6a <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d6a:	55                   	push   ebp
c0016d6b:	57                   	push   edi
c0016d6c:	56                   	push   esi
c0016d6d:	53                   	push   ebx
c0016d6e:	83 ec 2c             	sub    esp,0x2c
c0016d71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d75:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d79:	83 f8 01             	cmp    eax,0x1
c0016d7c:	19 c9                	sbb    ecx,ecx
c0016d7e:	31 db                	xor    ebx,ebx
c0016d80:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016d84:	89 cd                	mov    ebp,ecx
c0016d86:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016d8e:	f7 d5                	not    ebp
c0016d90:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016d96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016d9a:	01 d8                	add    eax,ebx
c0016d9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da0:	56                   	push   esi
c0016da1:	e8 b8 ff ff ff       	call   c0016d5e <Video::getHeight()>
c0016da6:	59                   	pop    ecx
c0016da7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016dab:	7e 70                	jle    c0016e1d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016dad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016db1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016db5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016db8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016dc0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016dcb:	89 f8                	mov    eax,edi
c0016dcd:	83 c0 20             	add    eax,0x20
c0016dd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016dd4:	56                   	push   esi
c0016dd5:	e8 78 ff ff ff       	call   c0016d52 <Video::getWidth()>
c0016dda:	5a                   	pop    edx
c0016ddb:	39 c7                	cmp    edi,eax
c0016ddd:	7d 34                	jge    c0016e13 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ddf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016de4:	74 05                	je     c0016deb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016de6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016de8:	55                   	push   ebp
c0016de9:	eb 0d                	jmp    c0016df8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016deb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016df0:	74 12                	je     c0016e04 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016df2:	8b 06                	mov    eax,DWORD PTR [esi]
c0016df4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016df8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016dfc:	57                   	push   edi
c0016dfd:	56                   	push   esi
c0016dfe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016e08:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016e0c:	47                   	inc    edi
c0016e0d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016e11:	75 c1                	jne    c0016dd4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016e13:	43                   	inc    ebx
c0016e14:	83 fb 20             	cmp    ebx,0x20
c0016e17:	0f 85 79 ff ff ff    	jne    c0016d96 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016e1d:	83 c4 2c             	add    esp,0x2c
c0016e20:	5b                   	pop    ebx
c0016e21:	5e                   	pop    esi
c0016e22:	5f                   	pop    edi
c0016e23:	5d                   	pop    ebp
c0016e24:	c3                   	ret    
c0016e25:	90                   	nop

c0016e26 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016e26:	55                   	push   ebp
c0016e27:	57                   	push   edi
c0016e28:	56                   	push   esi
c0016e29:	53                   	push   ebx
c0016e2a:	83 ec 28             	sub    esp,0x28
c0016e2d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e31:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016e35:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016e39:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e3d:	c1 e6 08             	shl    esi,0x8
c0016e40:	01 c6                	add    esi,eax
c0016e42:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e46:	c1 e0 08             	shl    eax,0x8
c0016e49:	01 d0                	add    eax,edx
c0016e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e53:	0f af c6             	imul   eax,esi
c0016e56:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e5d:	50                   	push   eax
c0016e5e:	e8 36 87 ff ff       	call   c000f599 <malloc>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	89 c7                	mov    edi,eax
c0016e68:	85 c0                	test   eax,eax
c0016e6a:	75 10                	jne    c0016e7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	68 55 ae 02 c0       	push   0xc002ae55
c0016e74:	e8 cc 2e 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0016e79:	83 c4 10             	add    esp,0x10
c0016e7c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016e7f:	ba 12 00 00 00       	mov    edx,0x12
c0016e84:	84 c0                	test   al,al
c0016e86:	74 11                	je     c0016e99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016e88:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016e8c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016e90:	c1 fa 03             	sar    edx,0x3
c0016e93:	0f af d1             	imul   edx,ecx
c0016e96:	83 c2 12             	add    edx,0x12
c0016e99:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016e9d:	74 04                	je     c0016ea3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016e9f:	85 f6                	test   esi,esi
c0016ea1:	75 12                	jne    c0016eb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016ea3:	83 ec 0c             	sub    esp,0xc
c0016ea6:	68 65 ae 02 c0       	push   0xc002ae65
c0016eab:	e8 29 b7 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0016eb0:	e9 b8 00 00 00       	jmp    c0016f6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016eb5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016eb9:	80 f9 02             	cmp    cl,0x2
c0016ebc:	0f 85 96 00 00 00    	jne    c0016f58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016ec2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ec7:	75 0e                	jne    c0016ed7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016ec9:	84 c0                	test   al,al
c0016ecb:	75 0a                	jne    c0016ed7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016ecd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ed0:	83 e8 18             	sub    eax,0x18
c0016ed3:	a8 f7                	test   al,0xf7
c0016ed5:	74 0a                	je     c0016ee1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016ed7:	83 ec 0c             	sub    esp,0xc
c0016eda:	68 7a ae 02 c0       	push   0xc002ae7a
c0016edf:	eb 7f                	jmp    c0016f60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016ee1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016ee9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ef1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016ef5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016efd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016f01:	75 0c                	jne    c0016f0f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016f03:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016f08:	c1 e0 18             	shl    eax,0x18
c0016f0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f0f:	45                   	inc    ebp
c0016f10:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016f15:	c1 e1 10             	shl    ecx,0x10
c0016f18:	89 c8                	mov    eax,ecx
c0016f1a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016f1f:	c1 e1 08             	shl    ecx,0x8
c0016f22:	09 c1                	or     ecx,eax
c0016f24:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016f28:	09 c1                	or     ecx,eax
c0016f2a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016f2e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016f32:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f36:	c1 f8 03             	sar    eax,0x3
c0016f39:	01 c2                	add    edx,eax
c0016f3b:	89 e8                	mov    eax,ebp
c0016f3d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f41:	39 c6                	cmp    esi,eax
c0016f43:	7f b0                	jg     c0016ef5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016f45:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f4d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016f50:	7e 22                	jle    c0016f74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016f52:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016f56:	eb 99                	jmp    c0016ef1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016f58:	50                   	push   eax
c0016f59:	50                   	push   eax
c0016f5a:	51                   	push   ecx
c0016f5b:	68 88 ae 02 c0       	push   0xc002ae88
c0016f60:	e8 74 b6 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0016f65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f68:	e8 3c 86 ff ff       	call   c000f5a9 <free>
c0016f6d:	83 c4 10             	add    esp,0x10
c0016f70:	31 ff                	xor    edi,edi
c0016f72:	eb 0f                	jmp    c0016f83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016f74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f78:	89 30                	mov    DWORD PTR [eax],esi
c0016f7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f7e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016f81:	89 30                	mov    DWORD PTR [eax],esi
c0016f83:	83 c4 1c             	add    esp,0x1c
c0016f86:	89 f8                	mov    eax,edi
c0016f88:	5b                   	pop    ebx
c0016f89:	5e                   	pop    esi
c0016f8a:	5f                   	pop    edi
c0016f8b:	5d                   	pop    ebp
c0016f8c:	c3                   	ret    
c0016f8d:	90                   	nop

c0016f8e <Video::putTGA(int, int, unsigned char*, int)>:
c0016f8e:	55                   	push   ebp
c0016f8f:	57                   	push   edi
c0016f90:	56                   	push   esi
c0016f91:	53                   	push   ebx
c0016f92:	83 ec 28             	sub    esp,0x28
c0016f95:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f9d:	50                   	push   eax
c0016f9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fa2:	50                   	push   eax
c0016fa3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fa7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fab:	56                   	push   esi
c0016fac:	e8 75 fe ff ff       	call   c0016e26 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016fb1:	83 c4 20             	add    esp,0x20
c0016fb4:	85 c0                	test   eax,eax
c0016fb6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fba:	74 35                	je     c0016ff1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fbc:	89 c7                	mov    edi,eax
c0016fbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fc2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fc6:	39 d8                	cmp    eax,ebx
c0016fc8:	7e 27                	jle    c0016ff1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fca:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fd2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016fd6:	39 e8                	cmp    eax,ebp
c0016fd8:	7e 14                	jle    c0016fee <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016fda:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fdc:	83 c7 04             	add    edi,0x4
c0016fdf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016fe2:	53                   	push   ebx
c0016fe3:	55                   	push   ebp
c0016fe4:	45                   	inc    ebp
c0016fe5:	56                   	push   esi
c0016fe6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fe9:	83 c4 10             	add    esp,0x10
c0016fec:	eb e0                	jmp    c0016fce <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016fee:	43                   	inc    ebx
c0016fef:	eb cd                	jmp    c0016fbe <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016ff1:	83 c4 1c             	add    esp,0x1c
c0016ff4:	5b                   	pop    ebx
c0016ff5:	5e                   	pop    esi
c0016ff6:	5f                   	pop    edi
c0016ff7:	5d                   	pop    ebp
c0016ff8:	c3                   	ret    
c0016ff9:	90                   	nop

c0016ffa <ACPI::close(int, int, void*)>:
c0016ffa:	83 ec 1c             	sub    esp,0x1c
c0016ffd:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017005:	74 0a                	je     c0017011 <ACPI::close(int, int, void*)+0x17>
c0017007:	b8 00 00 00 00       	mov    eax,0x0
c001700c:	e9 8a 00 00 00       	jmp    c001709b <ACPI::close(int, int, void*)+0xa1>
c0017011:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017016:	75 27                	jne    c001703f <ACPI::close(int, int, void*)+0x45>
c0017018:	a1 e8 fd 02 c0       	mov    eax,ds:0xc002fde8
c001701d:	85 c0                	test   eax,eax
c001701f:	74 07                	je     c0017028 <ACPI::close(int, int, void*)+0x2e>
c0017021:	a1 e8 fd 02 c0       	mov    eax,ds:0xc002fde8
c0017026:	ff d0                	call   eax
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	68 e4 ae 02 c0       	push   0xc002aee4
c0017030:	e8 10 2d 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0017035:	83 c4 10             	add    esp,0x10
c0017038:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001703d:	eb 5c                	jmp    c001709b <ACPI::close(int, int, void*)+0xa1>
c001703f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017044:	75 50                	jne    c0017096 <ACPI::close(int, int, void*)+0x9c>
c0017046:	a1 e4 fd 02 c0       	mov    eax,ds:0xc002fde4
c001704b:	85 c0                	test   eax,eax
c001704d:	74 07                	je     c0017056 <ACPI::close(int, int, void*)+0x5c>
c001704f:	a1 e4 fd 02 c0       	mov    eax,ds:0xc002fde4
c0017054:	ff d0                	call   eax
c0017056:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001705b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017060:	83 e0 02             	and    eax,0x2
c0017063:	74 1c                	je     c0017081 <ACPI::close(int, int, void*)+0x87>
c0017065:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001706c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017070:	89 c2                	mov    edx,eax
c0017072:	ec                   	in     al,dx
c0017073:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017077:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001707b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001707f:	eb da                	jmp    c001705b <ACPI::close(int, int, void*)+0x61>
c0017081:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017088:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001708d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017095:	ee                   	out    dx,al
c0017096:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001709b:	83 c4 1c             	add    esp,0x1c
c001709e:	c3                   	ret    

c001709f <findRSDP()>:
c001709f:	83 ec 1c             	sub    esp,0x1c
c00170a2:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00170a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170ad:	83 e0 04             	and    eax,0x4
c00170b0:	84 c0                	test   al,al
c00170b2:	75 07                	jne    c00170bb <findRSDP()+0x1c>
c00170b4:	b8 00 00 00 00       	mov    eax,0x0
c00170b9:	eb 6a                	jmp    c0017125 <findRSDP()+0x86>
c00170bb:	a1 94 d7 02 c0       	mov    eax,ds:0xc002d794
c00170c0:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170c5:	7f 1b                	jg     c00170e2 <findRSDP()+0x43>
c00170c7:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00170cc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170d2:	83 e2 fb             	and    edx,0xfffffffb
c00170d5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170db:	b8 00 00 00 00       	mov    eax,0x0
c00170e0:	eb 43                	jmp    c0017125 <findRSDP()+0x86>
c00170e2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00170ea:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00170f2:	77 2c                	ja     c0017120 <findRSDP()+0x81>
c00170f4:	83 ec 04             	sub    esp,0x4
c00170f7:	6a 08                	push   0x8
c00170f9:	68 7f af 02 c0       	push   0xc002af7f
c00170fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017102:	e8 45 95 fe ff       	call   c000064c <memcmp>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	85 c0                	test   eax,eax
c001710c:	0f 94 c0             	sete   al
c001710f:	84 c0                	test   al,al
c0017111:	74 06                	je     c0017119 <findRSDP()+0x7a>
c0017113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017117:	eb 0c                	jmp    c0017125 <findRSDP()+0x86>
c0017119:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001711e:	eb ca                	jmp    c00170ea <findRSDP()+0x4b>
c0017120:	b8 00 00 00 00       	mov    eax,0x0
c0017125:	83 c4 1c             	add    esp,0x1c
c0017128:	c3                   	ret    

c0017129 <loadACPITables(unsigned char*)>:
c0017129:	57                   	push   edi
c001712a:	56                   	push   esi
c001712b:	53                   	push   ebx
c001712c:	83 ec 60             	sub    esp,0x60
c001712f:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0017134:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001713a:	83 e0 04             	and    eax,0x4
c001713d:	84 c0                	test   al,al
c001713f:	0f 84 33 02 00 00    	je     c0017378 <loadACPITables(unsigned char*)+0x24f>
c0017145:	a0 00 00 03 c0       	mov    al,ds:0xc0030000
c001714a:	84 c0                	test   al,al
c001714c:	74 75                	je     c00171c3 <loadACPITables(unsigned char*)+0x9a>
c001714e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017152:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017156:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001715a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001715d:	83 e8 24             	sub    eax,0x24
c0017160:	c1 e8 03             	shr    eax,0x3
c0017163:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017167:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001716f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017173:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017177:	0f 8d b2 00 00 00    	jge    c001722f <loadACPITables(unsigned char*)+0x106>
c001717d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017181:	83 c0 24             	add    eax,0x24
c0017184:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017188:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001718c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017190:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017194:	c1 e0 03             	shl    eax,0x3
c0017197:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001719b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001719f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00171a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00171a4:	89 c1                	mov    ecx,eax
c00171a6:	a1 ec fd 02 c0       	mov    eax,ds:0xc002fdec
c00171ab:	8d 50 01             	lea    edx,[eax+0x1]
c00171ae:	89 15 ec fd 02 c0    	mov    DWORD PTR ds:0xc002fdec,edx
c00171b4:	89 ca                	mov    edx,ecx
c00171b6:	89 14 c5 04 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd01fc],edx
c00171bd:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00171c1:	eb ac                	jmp    c001716f <loadACPITables(unsigned char*)+0x46>
c00171c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171c7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00171cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171d2:	83 e8 24             	sub    eax,0x24
c00171d5:	c1 e8 02             	shr    eax,0x2
c00171d8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00171e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00171e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00171ec:	7d 41                	jge    c001722f <loadACPITables(unsigned char*)+0x106>
c00171ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171f2:	83 c0 24             	add    eax,0x24
c00171f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017201:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017205:	c1 e0 02             	shl    eax,0x2
c0017208:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001720c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017210:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017212:	a1 ec fd 02 c0       	mov    eax,ds:0xc002fdec
c0017217:	8d 50 01             	lea    edx,[eax+0x1]
c001721a:	89 15 ec fd 02 c0    	mov    DWORD PTR ds:0xc002fdec,edx
c0017220:	89 ca                	mov    edx,ecx
c0017222:	89 14 c5 04 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd01fc],edx
c0017229:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001722d:	eb b5                	jmp    c00171e4 <loadACPITables(unsigned char*)+0xbb>
c001722f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017237:	a1 ec fd 02 c0       	mov    eax,ds:0xc002fdec
c001723c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017240:	0f 8d 33 01 00 00    	jge    c0017379 <loadACPITables(unsigned char*)+0x250>
c0017246:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001724a:	8b 04 c5 04 fe 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd01fc]
c0017251:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017259:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001725d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017261:	25 ff 0f 00 00       	and    eax,0xfff
c0017266:	89 c6                	mov    esi,eax
c0017268:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c001726e:	83 ec 0c             	sub    esp,0xc
c0017271:	6a 01                	push   0x1
c0017273:	e8 4b 9f ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0017278:	83 c4 10             	add    esp,0x10
c001727b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001727f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017285:	83 ec 0c             	sub    esp,0xc
c0017288:	6a 01                	push   0x1
c001728a:	6a 01                	push   0x1
c001728c:	50                   	push   eax
c001728d:	52                   	push   edx
c001728e:	53                   	push   ebx
c001728f:	e8 e2 a9 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017294:	83 c4 20             	add    esp,0x20
c0017297:	09 f0                	or     eax,esi
c0017299:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001729d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00172a1:	c1 e0 03             	shl    eax,0x3
c00172a4:	05 00 fe 02 c0       	add    eax,0xc002fe00
c00172a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172b5:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00172bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172d1:	89 c6                	mov    esi,eax
c00172d3:	89 d7                	mov    edi,edx
c00172d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172d7:	89 c8                	mov    eax,ecx
c00172d9:	89 fa                	mov    edx,edi
c00172db:	89 f3                	mov    ebx,esi
c00172dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00172e1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00172e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00172f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00172f8:	05 00 10 00 00       	add    eax,0x1000
c00172fd:	c1 e8 0c             	shr    eax,0xc
c0017300:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017304:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017308:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001730c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017310:	25 ff 0f 00 00       	and    eax,0xfff
c0017315:	89 c6                	mov    esi,eax
c0017317:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c001731d:	83 ec 0c             	sub    esp,0xc
c0017320:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017324:	e8 9a 9e ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0017329:	83 c4 10             	add    esp,0x10
c001732c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017330:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017336:	83 ec 0c             	sub    esp,0xc
c0017339:	6a 01                	push   0x1
c001733b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001733f:	50                   	push   eax
c0017340:	52                   	push   edx
c0017341:	53                   	push   ebx
c0017342:	e8 2f a9 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017347:	83 c4 20             	add    esp,0x20
c001734a:	09 f0                	or     eax,esi
c001734c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017354:	83 ec 0c             	sub    esp,0xc
c0017357:	50                   	push   eax
c0017358:	e8 ac a2 ff ff       	call   c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c001735d:	83 c4 10             	add    esp,0x10
c0017360:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017364:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017368:	89 14 c5 04 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd01fc],edx
c001736f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017373:	e9 bf fe ff ff       	jmp    c0017237 <loadACPITables(unsigned char*)+0x10e>
c0017378:	90                   	nop
c0017379:	83 c4 60             	add    esp,0x60
c001737c:	5b                   	pop    ebx
c001737d:	5e                   	pop    esi
c001737e:	5f                   	pop    edi
c001737f:	c3                   	ret    

c0017380 <findRSDT(unsigned char*)>:
c0017380:	57                   	push   edi
c0017381:	56                   	push   esi
c0017382:	53                   	push   ebx
c0017383:	83 ec 50             	sub    esp,0x50
c0017386:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001738b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017391:	83 e0 04             	and    eax,0x4
c0017394:	84 c0                	test   al,al
c0017396:	75 0a                	jne    c00173a2 <findRSDT(unsigned char*)+0x22>
c0017398:	b8 00 00 00 00       	mov    eax,0x0
c001739d:	e9 21 01 00 00       	jmp    c00174c3 <findRSDT(unsigned char*)+0x143>
c00173a2:	89 e0                	mov    eax,esp
c00173a4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00173a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00173ac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00173b0:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00173b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173c4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00173c8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00173cc:	89 c6                	mov    esi,eax
c00173ce:	89 d7                	mov    edi,edx
c00173d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173d2:	89 c8                	mov    eax,ecx
c00173d4:	89 fa                	mov    edx,edi
c00173d6:	89 f3                	mov    ebx,esi
c00173d8:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00173dc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00173e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173e8:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00173ec:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00173f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173fc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017404:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017408:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001740c:	25 ff 0f 00 00       	and    eax,0xfff
c0017411:	89 c6                	mov    esi,eax
c0017413:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c0017419:	83 ec 0c             	sub    esp,0xc
c001741c:	6a 02                	push   0x2
c001741e:	e8 a0 9d ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0017423:	83 c4 10             	add    esp,0x10
c0017426:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001742a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017430:	83 ec 0c             	sub    esp,0xc
c0017433:	6a 01                	push   0x1
c0017435:	6a 02                	push   0x2
c0017437:	50                   	push   eax
c0017438:	52                   	push   edx
c0017439:	53                   	push   ebx
c001743a:	e8 37 a8 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001743f:	83 c4 20             	add    esp,0x20
c0017442:	09 f0                	or     eax,esi
c0017444:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017448:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001744c:	25 ff 0f 00 00       	and    eax,0xfff
c0017451:	89 c6                	mov    esi,eax
c0017453:	8b 1d b0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b0
c0017459:	83 ec 0c             	sub    esp,0xc
c001745c:	6a 02                	push   0x2
c001745e:	e8 60 9d ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001746a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017470:	83 ec 0c             	sub    esp,0xc
c0017473:	6a 01                	push   0x1
c0017475:	6a 02                	push   0x2
c0017477:	50                   	push   eax
c0017478:	52                   	push   edx
c0017479:	53                   	push   ebx
c001747a:	e8 f7 a7 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001747f:	83 c4 20             	add    esp,0x20
c0017482:	09 f0                	or     eax,esi
c0017484:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017488:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001748d:	75 11                	jne    c00174a0 <findRSDT(unsigned char*)+0x120>
c001748f:	c6 05 00 00 03 c0 00 	mov    BYTE PTR ds:0xc0030000,0x0
c0017496:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001749a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001749e:	eb 1f                	jmp    c00174bf <findRSDT(unsigned char*)+0x13f>
c00174a0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00174a5:	75 11                	jne    c00174b8 <findRSDT(unsigned char*)+0x138>
c00174a7:	c6 05 00 00 03 c0 01 	mov    BYTE PTR ds:0xc0030000,0x1
c00174ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174b6:	eb 07                	jmp    c00174bf <findRSDT(unsigned char*)+0x13f>
c00174b8:	b8 00 00 00 00       	mov    eax,0x0
c00174bd:	eb 04                	jmp    c00174c3 <findRSDT(unsigned char*)+0x143>
c00174bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174c3:	83 c4 50             	add    esp,0x50
c00174c6:	5b                   	pop    ebx
c00174c7:	5e                   	pop    esi
c00174c8:	5f                   	pop    edi
c00174c9:	c3                   	ret    

c00174ca <findDataTable(unsigned char*, char*)>:
c00174ca:	83 ec 1c             	sub    esp,0x1c
c00174cd:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00174d2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174d8:	83 e0 04             	and    eax,0x4
c00174db:	84 c0                	test   al,al
c00174dd:	75 07                	jne    c00174e6 <findDataTable(unsigned char*, char*)+0x1c>
c00174df:	b8 00 00 00 00       	mov    eax,0x0
c00174e4:	eb 52                	jmp    c0017538 <findDataTable(unsigned char*, char*)+0x6e>
c00174e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00174ee:	a1 ec fd 02 c0       	mov    eax,ds:0xc002fdec
c00174f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00174f7:	7d 3a                	jge    c0017533 <findDataTable(unsigned char*, char*)+0x69>
c00174f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174fd:	c1 e0 03             	shl    eax,0x3
c0017500:	05 00 fe 02 c0       	add    eax,0xc002fe00
c0017505:	83 ec 04             	sub    esp,0x4
c0017508:	6a 04                	push   0x4
c001750a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001750e:	50                   	push   eax
c001750f:	e8 38 91 fe ff       	call   c000064c <memcmp>
c0017514:	83 c4 10             	add    esp,0x10
c0017517:	85 c0                	test   eax,eax
c0017519:	0f 94 c0             	sete   al
c001751c:	84 c0                	test   al,al
c001751e:	74 0d                	je     c001752d <findDataTable(unsigned char*, char*)+0x63>
c0017520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017524:	8b 04 c5 04 fe 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd01fc]
c001752b:	eb 0b                	jmp    c0017538 <findDataTable(unsigned char*, char*)+0x6e>
c001752d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017531:	eb bb                	jmp    c00174ee <findDataTable(unsigned char*, char*)+0x24>
c0017533:	b8 00 00 00 00       	mov    eax,0x0
c0017538:	83 c4 1c             	add    esp,0x1c
c001753b:	c3                   	ret    

c001753c <scanMADT()>:
c001753c:	53                   	push   ebx
c001753d:	83 ec 38             	sub    esp,0x38
c0017540:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0017545:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001754b:	83 e0 04             	and    eax,0x4
c001754e:	84 c0                	test   al,al
c0017550:	0f 84 4a 04 00 00    	je     c00179a0 <scanMADT()+0x464>
c0017556:	e8 44 fb ff ff       	call   c001709f <findRSDP()>
c001755b:	a3 0c 00 03 c0       	mov    ds:0xc003000c,eax
c0017560:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c0017565:	85 c0                	test   eax,eax
c0017567:	75 19                	jne    c0017582 <scanMADT()+0x46>
c0017569:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001756e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017574:	83 e2 fb             	and    edx,0xfffffffb
c0017577:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001757d:	e9 22 04 00 00       	jmp    c00179a4 <scanMADT()+0x468>
c0017582:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c0017587:	83 ec 0c             	sub    esp,0xc
c001758a:	50                   	push   eax
c001758b:	e8 f0 fd ff ff       	call   c0017380 <findRSDT(unsigned char*)>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	a3 08 00 03 c0       	mov    ds:0xc0030008,eax
c0017598:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c001759d:	85 c0                	test   eax,eax
c001759f:	75 19                	jne    c00175ba <scanMADT()+0x7e>
c00175a1:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00175a6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175ac:	83 e2 fb             	and    edx,0xfffffffb
c00175af:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175b5:	e9 ea 03 00 00       	jmp    c00179a4 <scanMADT()+0x468>
c00175ba:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c00175bf:	83 ec 0c             	sub    esp,0xc
c00175c2:	50                   	push   eax
c00175c3:	e8 61 fb ff ff       	call   c0017129 <loadACPITables(unsigned char*)>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c00175d0:	83 ec 08             	sub    esp,0x8
c00175d3:	68 88 af 02 c0       	push   0xc002af88
c00175d8:	50                   	push   eax
c00175d9:	e8 ec fe ff ff       	call   c00174ca <findDataTable(unsigned char*, char*)>
c00175de:	83 c4 10             	add    esp,0x10
c00175e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175e5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00175ea:	75 19                	jne    c0017605 <scanMADT()+0xc9>
c00175ec:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00175f1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175f7:	83 e2 fe             	and    edx,0xfffffffe
c00175fa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017600:	e9 9f 03 00 00       	jmp    c00179a4 <scanMADT()+0x468>
c0017605:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001760d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017611:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017614:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017618:	0f 87 86 03 00 00    	ja     c00179a4 <scanMADT()+0x468>
c001761e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017626:	0f 87 78 03 00 00    	ja     c00179a4 <scanMADT()+0x468>
c001762c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017630:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017638:	8d 50 01             	lea    edx,[eax+0x1]
c001763b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001763f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017643:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017647:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001764b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001764f:	8d 50 01             	lea    edx,[eax+0x1]
c0017652:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017656:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001765a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001765e:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017662:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017667:	0f 86 36 03 00 00    	jbe    c00179a3 <scanMADT()+0x467>
c001766d:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017672:	75 57                	jne    c00176cb <scanMADT()+0x18f>
c0017674:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017678:	8d 50 01             	lea    edx,[eax+0x1]
c001767b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001767f:	8a 15 00 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030200
c0017685:	0f b6 d2             	movzx  edx,dl
c0017688:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001768c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017690:	88 82 40 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfdc0],al
c0017696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769a:	8d 50 01             	lea    edx,[eax+0x1]
c001769d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176a1:	8a 15 00 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030200
c00176a7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00176aa:	88 0d 00 02 03 c0    	mov    BYTE PTR ds:0xc0030200,cl
c00176b0:	0f b6 d2             	movzx  edx,dl
c00176b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176b7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176bb:	88 82 20 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfde0],al
c00176c1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176c6:	e9 c1 02 00 00       	jmp    c001798c <scanMADT()+0x450>
c00176cb:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00176d0:	0f 85 14 01 00 00    	jne    c00177ea <scanMADT()+0x2ae>
c00176d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176da:	8d 50 01             	lea    edx,[eax+0x1]
c00176dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176e1:	8a 15 c0 00 03 c0    	mov    dl,BYTE PTR ds:0xc00300c0
c00176e7:	0f b6 d2             	movzx  edx,dl
c00176ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176ee:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176f2:	88 82 e0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff20],al
c00176f8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00176fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017700:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017704:	01 d0                	add    eax,edx
c0017706:	83 c0 2c             	add    eax,0x2c
c0017709:	8a 00                	mov    al,BYTE PTR [eax]
c001770b:	0f b6 d0             	movzx  edx,al
c001770e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017712:	8d 48 01             	lea    ecx,[eax+0x1]
c0017715:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017719:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001771d:	0f b6 c0             	movzx  eax,al
c0017720:	c1 e0 08             	shl    eax,0x8
c0017723:	89 d1                	mov    ecx,edx
c0017725:	09 c1                	or     ecx,eax
c0017727:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001772b:	8d 50 02             	lea    edx,[eax+0x2]
c001772e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017732:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017736:	0f b6 c0             	movzx  eax,al
c0017739:	c1 e0 10             	shl    eax,0x10
c001773c:	09 c1                	or     ecx,eax
c001773e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017742:	8d 50 03             	lea    edx,[eax+0x3]
c0017745:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017749:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001774d:	0f b6 c0             	movzx  eax,al
c0017750:	c1 e0 18             	shl    eax,0x18
c0017753:	09 c1                	or     ecx,eax
c0017755:	89 ca                	mov    edx,ecx
c0017757:	a0 c0 00 03 c0       	mov    al,ds:0xc00300c0
c001775c:	0f b6 c0             	movzx  eax,al
c001775f:	89 14 85 00 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcff00],edx
c0017766:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001776b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001776f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017773:	01 d0                	add    eax,edx
c0017775:	83 c0 2c             	add    eax,0x2c
c0017778:	8a 00                	mov    al,BYTE PTR [eax]
c001777a:	0f b6 d0             	movzx  edx,al
c001777d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017781:	8d 48 01             	lea    ecx,[eax+0x1]
c0017784:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017788:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001778c:	0f b6 c0             	movzx  eax,al
c001778f:	c1 e0 08             	shl    eax,0x8
c0017792:	89 d1                	mov    ecx,edx
c0017794:	09 c1                	or     ecx,eax
c0017796:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001779a:	8d 50 02             	lea    edx,[eax+0x2]
c001779d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177a5:	0f b6 c0             	movzx  eax,al
c00177a8:	c1 e0 10             	shl    eax,0x10
c00177ab:	09 c1                	or     ecx,eax
c00177ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b1:	8d 50 03             	lea    edx,[eax+0x3]
c00177b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177b8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177bc:	0f b6 c0             	movzx  eax,al
c00177bf:	c1 e0 18             	shl    eax,0x18
c00177c2:	09 c1                	or     ecx,eax
c00177c4:	89 ca                	mov    edx,ecx
c00177c6:	a0 c0 00 03 c0       	mov    al,ds:0xc00300c0
c00177cb:	0f b6 c0             	movzx  eax,al
c00177ce:	89 14 85 80 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe80],edx
c00177d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177da:	a0 c0 00 03 c0       	mov    al,ds:0xc00300c0
c00177df:	40                   	inc    eax
c00177e0:	a2 c0 00 03 c0       	mov    ds:0xc00300c0,al
c00177e5:	e9 a2 01 00 00       	jmp    c001798c <scanMADT()+0x450>
c00177ea:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00177ef:	0f 85 e9 00 00 00    	jne    c00178de <scanMADT()+0x3a2>
c00177f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f9:	8d 50 01             	lea    edx,[eax+0x1]
c00177fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017800:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017804:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017808:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001780c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017810:	8d 50 01             	lea    edx,[eax+0x1]
c0017813:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017817:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001781b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001781f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017823:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017827:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001782b:	01 d0                	add    eax,edx
c001782d:	83 c0 2c             	add    eax,0x2c
c0017830:	8a 00                	mov    al,BYTE PTR [eax]
c0017832:	0f b6 d0             	movzx  edx,al
c0017835:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017839:	8d 48 01             	lea    ecx,[eax+0x1]
c001783c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017840:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017844:	0f b6 c0             	movzx  eax,al
c0017847:	c1 e0 08             	shl    eax,0x8
c001784a:	89 d1                	mov    ecx,edx
c001784c:	09 c1                	or     ecx,eax
c001784e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017852:	8d 50 02             	lea    edx,[eax+0x2]
c0017855:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017859:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001785d:	0f b6 c0             	movzx  eax,al
c0017860:	c1 e0 10             	shl    eax,0x10
c0017863:	09 c1                	or     ecx,eax
c0017865:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017869:	8d 50 03             	lea    edx,[eax+0x3]
c001786c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017870:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017874:	0f b6 c0             	movzx  eax,al
c0017877:	c1 e0 18             	shl    eax,0x18
c001787a:	09 c8                	or     eax,ecx
c001787c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017880:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017885:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017889:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788d:	01 d0                	add    eax,edx
c001788f:	83 c0 2c             	add    eax,0x2c
c0017892:	8a 00                	mov    al,BYTE PTR [eax]
c0017894:	0f b6 c0             	movzx  eax,al
c0017897:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001789b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001789e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178a2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00178a6:	0f b6 d2             	movzx  edx,dl
c00178a9:	c1 e2 08             	shl    edx,0x8
c00178ac:	09 d0                	or     eax,edx
c00178ae:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00178b3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00178b8:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00178bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178c1:	88 90 a0 c9 02 c0    	mov    BYTE PTR [eax-0x3ffd3660],dl
c00178c7:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00178cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00178d1:	66 89 84 12 a0 00 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcff60],ax
c00178d9:	e9 ae 00 00 00       	jmp    c001798c <scanMADT()+0x450>
c00178de:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00178e3:	0f 85 97 00 00 00    	jne    c0017980 <scanMADT()+0x444>
c00178e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ed:	8d 50 01             	lea    edx,[eax+0x1]
c00178f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178fc:	0f b6 c0             	movzx  eax,al
c00178ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017903:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017907:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001790b:	01 d0                	add    eax,edx
c001790d:	83 c0 2c             	add    eax,0x2c
c0017910:	8a 00                	mov    al,BYTE PTR [eax]
c0017912:	0f b6 d0             	movzx  edx,al
c0017915:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017919:	8d 48 01             	lea    ecx,[eax+0x1]
c001791c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017920:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017924:	0f b6 c0             	movzx  eax,al
c0017927:	c1 e0 08             	shl    eax,0x8
c001792a:	09 d0                	or     eax,edx
c001792c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017930:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017935:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017939:	8d 50 01             	lea    edx,[eax+0x1]
c001793c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017940:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017944:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017948:	0f b6 c0             	movzx  eax,al
c001794b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001794f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017953:	c1 e0 08             	shl    eax,0x8
c0017956:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001795a:	89 c1                	mov    ecx,eax
c001795c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017960:	c1 e0 18             	shl    eax,0x18
c0017963:	89 c3                	mov    ebx,eax
c0017965:	a1 10 00 03 c0       	mov    eax,ds:0xc0030010
c001796a:	8d 50 01             	lea    edx,[eax+0x1]
c001796d:	89 15 10 00 03 c0    	mov    DWORD PTR ds:0xc0030010,edx
c0017973:	09 d9                	or     ecx,ebx
c0017975:	89 ca                	mov    edx,ecx
c0017977:	89 14 85 20 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcffe0],edx
c001797e:	eb 0c                	jmp    c001798c <scanMADT()+0x450>
c0017980:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017985:	75 05                	jne    c001798c <scanMADT()+0x450>
c0017987:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001798c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017991:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017995:	01 d0                	add    eax,edx
c0017997:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001799b:	e9 6d fc ff ff       	jmp    c001760d <scanMADT()+0xd1>
c00179a0:	90                   	nop
c00179a1:	eb 01                	jmp    c00179a4 <scanMADT()+0x468>
c00179a3:	90                   	nop
c00179a4:	83 c4 38             	add    esp,0x38
c00179a7:	5b                   	pop    ebx
c00179a8:	c3                   	ret    
c00179a9:	90                   	nop

c00179aa <ACPI::ACPI()>:
c00179aa:	83 ec 0c             	sub    esp,0xc
c00179ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b1:	83 ec 08             	sub    esp,0x8
c00179b4:	68 8d af 02 c0       	push   0xc002af8d
c00179b9:	50                   	push   eax
c00179ba:	e8 57 c2 ff ff       	call   c0013c16 <Device::Device(char const*)>
c00179bf:	83 c4 10             	add    esp,0x10
c00179c2:	ba e8 b0 02 c0       	mov    edx,0xc002b0e8
c00179c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cb:	89 10                	mov    DWORD PTR [eax],edx
c00179cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00179d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179dc:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00179e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ea:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00179f4:	e8 43 fb ff ff       	call   c001753c <scanMADT()>
c00179f9:	90                   	nop
c00179fa:	83 c4 0c             	add    esp,0xc
c00179fd:	c3                   	ret    

c00179fe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00179fe:	83 ec 2c             	sub    esp,0x2c
c0017a01:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017a05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a09:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a0d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017a11:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a16:	88 d0                	mov    al,dl
c0017a18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a1c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a21:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a2d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a33:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017a37:	0f 8d 97 00 00 00    	jge    c0017ad4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017a3d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a45:	83 c2 2a             	add    edx,0x2a
c0017a48:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017a4c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017a51:	75 78                	jne    c0017acb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a5b:	83 c2 2a             	add    edx,0x2a
c0017a5e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017a62:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017a66:	75 63                	jne    c0017acb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a68:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a6d:	74 3a                	je     c0017aa9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017a6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a73:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a77:	83 c2 2a             	add    edx,0x2a
c0017a7a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017a7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a85:	39 c2                	cmp    edx,eax
c0017a87:	74 10                	je     c0017a99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a89:	83 ec 0c             	sub    esp,0xc
c0017a8c:	68 08 af 02 c0       	push   0xc002af08
c0017a91:	e8 af 22 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	83 ec 0c             	sub    esp,0xc
c0017a9c:	68 92 af 02 c0       	push   0xc002af92
c0017aa1:	e8 9f 22 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017aad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ab1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ab5:	83 c2 2a             	add    edx,0x2a
c0017ab8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017abc:	8b 02                	mov    eax,DWORD PTR [edx]
c0017abe:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ac1:	89 01                	mov    DWORD PTR [ecx],eax
c0017ac3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ac6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017acb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017acf:	e9 55 ff ff ff       	jmp    c0017a29 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017ad4:	90                   	nop
c0017ad5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ad9:	83 c4 2c             	add    esp,0x2c
c0017adc:	c2 04 00             	ret    0x4
c0017adf:	90                   	nop

c0017ae0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017ae0:	83 ec 1c             	sub    esp,0x1c
c0017ae3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ae7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017aeb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017aef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017af4:	88 c8                	mov    al,cl
c0017af6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017afa:	88 d0                	mov    al,dl
c0017afc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b04:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b11:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017b15:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b1d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b27:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b2e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b37:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b3d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017b41:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b48:	83 c2 2a             	add    edx,0x2a
c0017b4b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b53:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b64:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b72:	8d 50 01             	lea    edx,[eax+0x1]
c0017b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b79:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017b7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b83:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b89:	3d 00 02 00 00       	cmp    eax,0x200
c0017b8e:	75 10                	jne    c0017ba0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	68 a1 af 02 c0       	push   0xc002afa1
c0017b98:	e8 a8 21 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0017b9d:	83 c4 10             	add    esp,0x10
c0017ba0:	90                   	nop
c0017ba1:	83 c4 1c             	add    esp,0x1c
c0017ba4:	c3                   	ret    
c0017ba5:	90                   	nop

c0017ba6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017ba6:	b8 00 00 00 00       	mov    eax,0x0
c0017bab:	c3                   	ret    

c0017bac <ACPI::detectPCI()>:
c0017bac:	53                   	push   ebx
c0017bad:	83 ec 28             	sub    esp,0x28
c0017bb0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017bb5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017bba:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0017bbf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bc5:	83 e0 04             	and    eax,0x4
c0017bc8:	84 c0                	test   al,al
c0017bca:	74 2b                	je     c0017bf7 <ACPI::detectPCI()+0x4b>
c0017bcc:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c0017bd1:	83 ec 08             	sub    esp,0x8
c0017bd4:	68 be af 02 c0       	push   0xc002afbe
c0017bd9:	50                   	push   eax
c0017bda:	e8 eb f8 ff ff       	call   c00174ca <findDataTable(unsigned char*, char*)>
c0017bdf:	83 c4 10             	add    esp,0x10
c0017be2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017be6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017beb:	74 0a                	je     c0017bf7 <ACPI::detectPCI()+0x4b>
c0017bed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bf2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017bf7:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c03:	8a 00                	mov    al,BYTE PTR [eax]
c0017c05:	3c 01                	cmp    al,0x1
c0017c07:	75 0c                	jne    c0017c15 <ACPI::detectPCI()+0x69>
c0017c09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c0e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c13:	eb 26                	jmp    c0017c3b <ACPI::detectPCI()+0x8f>
c0017c15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c19:	8a 00                	mov    al,BYTE PTR [eax]
c0017c1b:	3c 02                	cmp    al,0x2
c0017c1d:	75 1c                	jne    c0017c3b <ACPI::detectPCI()+0x8f>
c0017c1f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c24:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c29:	74 10                	je     c0017c3b <ACPI::detectPCI()+0x8f>
c0017c2b:	83 ec 0c             	sub    esp,0xc
c0017c2e:	68 38 af 02 c0       	push   0xc002af38
c0017c33:	e8 0d 21 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0017c38:	83 c4 10             	add    esp,0x10
c0017c3b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017c3f:	83 f0 01             	xor    eax,0x1
c0017c42:	84 c0                	test   al,al
c0017c44:	74 3f                	je     c0017c85 <ACPI::detectPCI()+0xd9>
c0017c46:	e8 05 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017c4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c4f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017c54:	75 0c                	jne    c0017c62 <ACPI::detectPCI()+0xb6>
c0017c56:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c5b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c60:	eb 23                	jmp    c0017c85 <ACPI::detectPCI()+0xd9>
c0017c62:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017c67:	75 1c                	jne    c0017c85 <ACPI::detectPCI()+0xd9>
c0017c69:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c6e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c73:	74 10                	je     c0017c85 <ACPI::detectPCI()+0xd9>
c0017c75:	83 ec 0c             	sub    esp,0xc
c0017c78:	68 38 af 02 c0       	push   0xc002af38
c0017c7d:	e8 c3 20 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c8a:	74 7e                	je     c0017d0a <ACPI::detectPCI()+0x15e>
c0017c8c:	83 ec 0c             	sub    esp,0xc
c0017c8f:	68 c3 af 02 c0       	push   0xc002afc3
c0017c94:	e8 5a 79 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017ca4:	83 ec 0c             	sub    esp,0xc
c0017ca7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cab:	e8 e9 78 ff ff       	call   c000f599 <malloc>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	89 c3                	mov    ebx,eax
c0017cb5:	83 ec 0c             	sub    esp,0xc
c0017cb8:	53                   	push   ebx
c0017cb9:	e8 aa a5 00 00       	call   c0022268 <PCI::PCI()>
c0017cbe:	83 c4 10             	add    esp,0x10
c0017cc1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc9:	83 ec 08             	sub    esp,0x8
c0017ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cd0:	50                   	push   eax
c0017cd1:	e8 3c bd ff ff       	call   c0013a12 <Device::addChild(Device*)>
c0017cd6:	83 c4 10             	add    esp,0x10
c0017cd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cdf:	83 c0 08             	add    eax,0x8
c0017ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ce9:	74 07                	je     c0017cf2 <ACPI::detectPCI()+0x146>
c0017ceb:	ba 01 00 00 00       	mov    edx,0x1
c0017cf0:	eb 05                	jmp    c0017cf7 <ACPI::detectPCI()+0x14b>
c0017cf2:	ba 02 00 00 00       	mov    edx,0x2
c0017cf7:	6a 00                	push   0x0
c0017cf9:	6a 00                	push   0x0
c0017cfb:	52                   	push   edx
c0017cfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d00:	ff d0                	call   eax
c0017d02:	83 c4 10             	add    esp,0x10
c0017d05:	e9 9e 00 00 00       	jmp    c0017da8 <ACPI::detectPCI()+0x1fc>
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	68 db af 02 c0       	push   0xc002afdb
c0017d12:	e8 c2 a8 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0017d17:	83 c4 10             	add    esp,0x10
c0017d1a:	83 ec 0c             	sub    esp,0xc
c0017d1d:	68 e6 af 02 c0       	push   0xc002afe6
c0017d22:	e8 cc 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d27:	83 c4 10             	add    esp,0x10
c0017d2a:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017d31:	83 ec 0c             	sub    esp,0xc
c0017d34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d38:	e8 5c 78 ff ff       	call   c000f599 <malloc>
c0017d3d:	83 c4 10             	add    esp,0x10
c0017d40:	89 c3                	mov    ebx,eax
c0017d42:	83 ec 0c             	sub    esp,0xc
c0017d45:	53                   	push   ebx
c0017d46:	e8 87 b0 00 00       	call   c0022dd2 <IDE::IDE()>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017d52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d56:	83 ec 08             	sub    esp,0x8
c0017d59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d5d:	50                   	push   eax
c0017d5e:	e8 af bc ff ff       	call   c0013a12 <Device::addChild(Device*)>
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d6a:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017d74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d78:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017d81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d85:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d94:	83 c0 08             	add    eax,0x8
c0017d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d99:	6a 00                	push   0x0
c0017d9b:	6a 00                	push   0x0
c0017d9d:	6a 00                	push   0x0
c0017d9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017da3:	ff d0                	call   eax
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	90                   	nop
c0017da9:	83 c4 28             	add    esp,0x28
c0017dac:	5b                   	pop    ebx
c0017dad:	c3                   	ret    

c0017dae <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017dae:	83 ec 1c             	sub    esp,0x1c
c0017db1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017db5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017db8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017dbc:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0017dc1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017dc6:	83 ec 08             	sub    esp,0x8
c0017dc9:	52                   	push   edx
c0017dca:	50                   	push   eax
c0017dcb:	e8 e0 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017dd0:	83 c4 10             	add    esp,0x10
c0017dd3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017dd7:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0017ddc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017de1:	83 ec 04             	sub    esp,0x4
c0017de4:	6a 01                	push   0x1
c0017de6:	52                   	push   edx
c0017de7:	50                   	push   eax
c0017de8:	e8 f5 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	90                   	nop
c0017df1:	83 c4 1c             	add    esp,0x1c
c0017df4:	c3                   	ret    
c0017df5:	90                   	nop

c0017df6 <ACPI::sleep()>:
c0017df6:	83 ec 0c             	sub    esp,0xc
c0017df9:	a1 e0 fd 02 c0       	mov    eax,ds:0xc002fde0
c0017dfe:	85 c0                	test   eax,eax
c0017e00:	74 07                	je     c0017e09 <ACPI::sleep()+0x13>
c0017e02:	a1 e0 fd 02 c0       	mov    eax,ds:0xc002fde0
c0017e07:	ff d0                	call   eax
c0017e09:	90                   	nop
c0017e0a:	83 c4 0c             	add    esp,0xc
c0017e0d:	c3                   	ret    

c0017e0e <ACPI::open(int, int, void*)>:
c0017e0e:	57                   	push   edi
c0017e0f:	56                   	push   esi
c0017e10:	53                   	push   ebx
c0017e11:	81 ec 60 01 00 00    	sub    esp,0x160
c0017e17:	83 ec 0c             	sub    esp,0xc
c0017e1a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017e21:	e8 86 fd ff ff       	call   c0017bac <ACPI::detectPCI()>
c0017e26:	83 c4 10             	add    esp,0x10
c0017e29:	83 ec 0c             	sub    esp,0xc
c0017e2c:	68 60 af 02 c0       	push   0xc002af60
c0017e31:	e8 bd 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e36:	83 c4 10             	add    esp,0x10
c0017e39:	83 ec 0c             	sub    esp,0xc
c0017e3c:	68 fb af 02 c0       	push   0xc002affb
c0017e41:	e8 52 46 00 00       	call   c001c498 <Thr::loadKernelSymbolTable(char const*)>
c0017e46:	83 c4 10             	add    esp,0x10
c0017e49:	83 ec 0c             	sub    esp,0xc
c0017e4c:	68 19 b0 02 c0       	push   0xc002b019
c0017e51:	e8 9d 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	83 ec 04             	sub    esp,0x4
c0017e5c:	6a 0c                	push   0xc
c0017e5e:	68 34 b0 02 c0       	push   0xc002b034
c0017e63:	68 45 b0 02 c0       	push   0xc002b045
c0017e68:	e8 94 2c 00 00       	call   c001ab01 <Reg::readIntWithDefault(char*, char*, int)>
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017e81:	e8 47 95 ff ff       	call   c00113cd <Virt::setupPageSwapping(int)>
c0017e86:	83 c4 10             	add    esp,0x10
c0017e89:	83 ec 0c             	sub    esp,0xc
c0017e8c:	68 15 9d 02 c0       	push   0xc0029d15
c0017e91:	e8 5d 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c0017e9f:	83 ec 08             	sub    esp,0x8
c0017ea2:	6a 01                	push   0x1
c0017ea4:	68 4c b0 02 c0       	push   0xc002b04c
c0017ea9:	e8 61 50 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	83 ec 08             	sub    esp,0x8
c0017eb4:	53                   	push   ebx
c0017eb5:	50                   	push   eax
c0017eb6:	e8 7f 52 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c0017ebb:	83 c4 10             	add    esp,0x10
c0017ebe:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017ec5:	83 ec 08             	sub    esp,0x8
c0017ec8:	6a 12                	push   0x12
c0017eca:	50                   	push   eax
c0017ecb:	e8 c6 be ff ff       	call   c0013d96 <getDevicesOfType(DeviceType)>
c0017ed0:	83 c4 0c             	add    esp,0xc
c0017ed3:	83 ec 0c             	sub    esp,0xc
c0017ed6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017edd:	50                   	push   eax
c0017ede:	e8 81 09 01 00       	call   c0028864 <LinkedList<Device>::isEmpty()>
c0017ee3:	83 c4 10             	add    esp,0x10
c0017ee6:	83 f0 01             	xor    eax,0x1
c0017ee9:	84 c0                	test   al,al
c0017eeb:	0f 84 43 01 00 00    	je     c0018034 <ACPI::open(int, int, void*)+0x226>
c0017ef1:	83 ec 0c             	sub    esp,0xc
c0017ef4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017efb:	50                   	push   eax
c0017efc:	e8 7f 09 01 00       	call   c0028880 <LinkedList<Device>::getFirstElement()>
c0017f01:	83 c4 10             	add    esp,0x10
c0017f04:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f15:	50                   	push   eax
c0017f16:	e8 6d 09 01 00       	call   c0028888 <LinkedList<Device>::removeFirst()>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017f25:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017f2c:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017f33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f37:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017f3d:	ba 09 00 00 00       	mov    edx,0x9
c0017f42:	fc                   	cld    
c0017f43:	89 c7                	mov    edi,eax
c0017f45:	89 de                	mov    esi,ebx
c0017f47:	89 d1                	mov    ecx,edx
c0017f49:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f4b:	83 ec 08             	sub    esp,0x8
c0017f4e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017f52:	50                   	push   eax
c0017f53:	83 ec 24             	sub    esp,0x24
c0017f56:	89 e0                	mov    eax,esp
c0017f58:	89 c3                	mov    ebx,eax
c0017f5a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017f5e:	ba 09 00 00 00       	mov    edx,0x9
c0017f63:	89 df                	mov    edi,ebx
c0017f65:	89 c6                	mov    esi,eax
c0017f67:	89 d1                	mov    ecx,edx
c0017f69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f6b:	e8 d6 a7 00 00       	call   c0022746 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017f70:	83 c4 30             	add    esp,0x30
c0017f73:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017f7a:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017f82:	0f 84 4b ff ff ff    	je     c0017ed3 <ACPI::open(int, int, void*)+0xc5>
c0017f88:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017f93:	83 ec 0c             	sub    esp,0xc
c0017f96:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017f9d:	e8 f7 75 ff ff       	call   c000f599 <malloc>
c0017fa2:	83 c4 10             	add    esp,0x10
c0017fa5:	89 c3                	mov    ebx,eax
c0017fa7:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0017fac:	83 ec 04             	sub    esp,0x4
c0017faf:	50                   	push   eax
c0017fb0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fb7:	53                   	push   ebx
c0017fb8:	e8 7b ab ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c0017fbd:	83 c4 10             	add    esp,0x10
c0017fc0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017fc7:	83 ec 0c             	sub    esp,0xc
c0017fca:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fd1:	e8 34 ae ff ff       	call   c0012e0a <File::exists()>
c0017fd6:	83 c4 10             	add    esp,0x10
c0017fd9:	84 c0                	test   al,al
c0017fdb:	74 27                	je     c0018004 <ACPI::open(int, int, void*)+0x1f6>
c0017fdd:	83 ec 08             	sub    esp,0x8
c0017fe0:	6a 01                	push   0x1
c0017fe2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017fe9:	e8 21 4f 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c0017fee:	83 c4 10             	add    esp,0x10
c0017ff1:	83 ec 08             	sub    esp,0x8
c0017ff4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017ffb:	50                   	push   eax
c0017ffc:	e8 39 51 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c0018001:	83 c4 10             	add    esp,0x10
c0018004:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001800c:	0f 84 c1 fe ff ff    	je     c0017ed3 <ACPI::open(int, int, void*)+0xc5>
c0018012:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018019:	8b 00                	mov    eax,DWORD PTR [eax]
c001801b:	83 c0 08             	add    eax,0x8
c001801e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018020:	83 ec 0c             	sub    esp,0xc
c0018023:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001802a:	ff d0                	call   eax
c001802c:	83 c4 10             	add    esp,0x10
c001802f:	e9 9f fe ff ff       	jmp    c0017ed3 <ACPI::open(int, int, void*)+0xc5>
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001803e:	50                   	push   eax
c001803f:	e8 1e 08 01 00       	call   c0028862 <LinkedList<Device>::~LinkedList()>
c0018044:	83 c4 10             	add    esp,0x10
c0018047:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c001804d:	83 ec 08             	sub    esp,0x8
c0018050:	6a 01                	push   0x1
c0018052:	68 67 b0 02 c0       	push   0xc002b067
c0018057:	e8 b3 4e 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c001805c:	83 c4 10             	add    esp,0x10
c001805f:	83 ec 08             	sub    esp,0x8
c0018062:	53                   	push   ebx
c0018063:	50                   	push   eax
c0018064:	e8 d1 50 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	8b 1d 48 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d748
c0018072:	83 ec 08             	sub    esp,0x8
c0018075:	6a 01                	push   0x1
c0018077:	68 84 b0 02 c0       	push   0xc002b084
c001807c:	e8 8e 4e 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	83 ec 08             	sub    esp,0x8
c0018087:	53                   	push   ebx
c0018088:	50                   	push   eax
c0018089:	e8 ac 50 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c001808e:	83 c4 10             	add    esp,0x10
c0018091:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0018096:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001809c:	83 e0 04             	and    eax,0x4
c001809f:	84 c0                	test   al,al
c00180a1:	0f 84 0d 01 00 00    	je     c00181b4 <ACPI::open(int, int, void*)+0x3a6>
c00180a7:	83 ec 0c             	sub    esp,0xc
c00180aa:	68 a1 b0 02 c0       	push   0xc002b0a1
c00180af:	e8 3f 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c00180b4:	83 c4 10             	add    esp,0x10
c00180b7:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00180c2:	83 ec 0c             	sub    esp,0xc
c00180c5:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00180cc:	e8 c8 74 ff ff       	call   c000f599 <malloc>
c00180d1:	83 c4 10             	add    esp,0x10
c00180d4:	89 c3                	mov    ebx,eax
c00180d6:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c00180db:	83 ec 04             	sub    esp,0x4
c00180de:	50                   	push   eax
c00180df:	68 be b0 02 c0       	push   0xc002b0be
c00180e4:	53                   	push   ebx
c00180e5:	e8 4e aa ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00180f4:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00180fc:	74 1a                	je     c0018118 <ACPI::open(int, int, void*)+0x30a>
c00180fe:	83 ec 0c             	sub    esp,0xc
c0018101:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018108:	e8 fd ac ff ff       	call   c0012e0a <File::exists()>
c001810d:	83 c4 10             	add    esp,0x10
c0018110:	84 c0                	test   al,al
c0018112:	74 04                	je     c0018118 <ACPI::open(int, int, void*)+0x30a>
c0018114:	b0 01                	mov    al,0x1
c0018116:	eb 02                	jmp    c001811a <ACPI::open(int, int, void*)+0x30c>
c0018118:	b0 00                	mov    al,0x0
c001811a:	84 c0                	test   al,al
c001811c:	74 25                	je     c0018143 <ACPI::open(int, int, void*)+0x335>
c001811e:	83 ec 08             	sub    esp,0x8
c0018121:	6a 01                	push   0x1
c0018123:	68 be b0 02 c0       	push   0xc002b0be
c0018128:	e8 e2 4d 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	83 ec 08             	sub    esp,0x8
c0018133:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001813a:	50                   	push   eax
c001813b:	e8 fa 4f 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c0018140:	83 c4 10             	add    esp,0x10
c0018143:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001814b:	74 27                	je     c0018174 <ACPI::open(int, int, void*)+0x366>
c001814d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018155:	74 1d                	je     c0018174 <ACPI::open(int, int, void*)+0x366>
c0018157:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001815e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018160:	83 c0 08             	add    eax,0x8
c0018163:	8b 00                	mov    eax,DWORD PTR [eax]
c0018165:	83 ec 0c             	sub    esp,0xc
c0018168:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001816f:	ff d0                	call   eax
c0018171:	83 c4 10             	add    esp,0x10
c0018174:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c0018179:	83 ec 08             	sub    esp,0x8
c001817c:	68 db b0 02 c0       	push   0xc002b0db
c0018181:	50                   	push   eax
c0018182:	e8 43 f3 ff ff       	call   c00174ca <findDataTable(unsigned char*, char*)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018191:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018199:	74 19                	je     c00181b4 <ACPI::open(int, int, void*)+0x3a6>
c001819b:	83 ec 08             	sub    esp,0x8
c001819e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00181a5:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00181ac:	e8 fd fb ff ff       	call   c0017dae <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	b8 00 00 00 00       	mov    eax,0x0
c00181b9:	81 c4 60 01 00 00    	add    esp,0x160
c00181bf:	5b                   	pop    ebx
c00181c0:	5e                   	pop    esi
c00181c1:	5f                   	pop    edi
c00181c2:	c3                   	ret    
c00181c3:	90                   	nop

c00181c4 <CPU::close(int, int, void*)>:
c00181c4:	31 c0                	xor    eax,eax
c00181c6:	c3                   	ret    
c00181c7:	90                   	nop

c00181c8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00181c8:	55                   	push   ebp
c00181c9:	57                   	push   edi
c00181ca:	56                   	push   esi
c00181cb:	53                   	push   ebx
c00181cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181d4:	89 ce                	mov    esi,ecx
c00181d6:	89 d5                	mov    ebp,edx
c00181d8:	80 f9 04             	cmp    cl,0x4
c00181db:	75 28                	jne    c0018205 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00181dd:	8d 42 f9             	lea    eax,[edx-0x7]
c00181e0:	3c 03                	cmp    al,0x3
c00181e2:	0f 86 63 01 00 00    	jbe    c001834b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181e8:	80 fa 03             	cmp    dl,0x3
c00181eb:	0f 84 5a 01 00 00    	je     c001834b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00181f1:	8d 7a f2             	lea    edi,[edx-0xe]
c00181f4:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c00181f9:	89 fb                	mov    ebx,edi
c00181fb:	80 fb 01             	cmp    bl,0x1
c00181fe:	77 4e                	ja     c001824e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018200:	e9 52 01 00 00       	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018205:	80 f9 05             	cmp    cl,0x5
c0018208:	75 4d                	jne    c0018257 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001820a:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c001820f:	80 fa 03             	cmp    dl,0x3
c0018212:	0f 86 3f 01 00 00    	jbe    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018218:	8d 7a fa             	lea    edi,[edx-0x6]
c001821b:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c0018220:	89 fb                	mov    ebx,edi
c0018222:	80 fb 01             	cmp    bl,0x1
c0018225:	0f 86 2c 01 00 00    	jbe    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001822b:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018230:	80 fa 08             	cmp    dl,0x8
c0018233:	0f 84 1e 01 00 00    	je     c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018239:	89 d7                	mov    edi,edx
c001823b:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c0018240:	83 e7 fb             	and    edi,0xfffffffb
c0018243:	89 fb                	mov    ebx,edi
c0018245:	80 fb 09             	cmp    bl,0x9
c0018248:	0f 84 09 01 00 00    	je     c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001824e:	31 c0                	xor    eax,eax
c0018250:	89 eb                	mov    ebx,ebp
c0018252:	0f b6 fb             	movzx  edi,bl
c0018255:	eb 30                	jmp    c0018287 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018257:	31 c0                	xor    eax,eax
c0018259:	80 f9 06             	cmp    cl,0x6
c001825c:	75 f2                	jne    c0018250 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001825e:	80 fa 0a             	cmp    dl,0xa
c0018261:	77 ed                	ja     c0018250 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018263:	bf de 05 00 00       	mov    edi,0x5de
c0018268:	0f a3 d7             	bt     edi,edx
c001826b:	73 e3                	jae    c0018250 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001826d:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018272:	e9 e0 00 00 00       	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018277:	39 c7                	cmp    edi,eax
c0018279:	0f 84 d3 00 00 00    	je     c0018352 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001827f:	40                   	inc    eax
c0018280:	3d d0 00 00 00       	cmp    eax,0xd0
c0018285:	74 09                	je     c0018290 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018287:	89 f3                	mov    ebx,esi
c0018289:	80 fb 0f             	cmp    bl,0xf
c001828c:	75 f1                	jne    c001827f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001828e:	eb e7                	jmp    c0018277 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018290:	80 f9 10             	cmp    cl,0x10
c0018293:	75 14                	jne    c00182a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018295:	8d 42 fc             	lea    eax,[edx-0x4]
c0018298:	83 e0 fb             	and    eax,0xfffffffb
c001829b:	3c 02                	cmp    al,0x2
c001829d:	76 34                	jbe    c00182d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001829f:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00182a4:	80 fa 02             	cmp    dl,0x2
c00182a7:	eb 24                	jmp    c00182cd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00182a9:	80 f9 11             	cmp    cl,0x11
c00182ac:	75 13                	jne    c00182c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00182ae:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00182b3:	80 fa 03             	cmp    dl,0x3
c00182b6:	0f 85 9b 00 00 00    	jne    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182bc:	e9 91 00 00 00       	jmp    c0018352 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182c1:	80 f9 12             	cmp    cl,0x12
c00182c4:	75 14                	jne    c00182da <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00182c6:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00182cb:	fe ca                	dec    dl
c00182cd:	0f 85 84 00 00 00    	jne    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182d3:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c00182d8:	eb 7d                	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182da:	80 f9 14             	cmp    cl,0x14
c00182dd:	75 12                	jne    c00182f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00182df:	4a                   	dec    edx
c00182e0:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00182e5:	80 fa 01             	cmp    dl,0x1
c00182e8:	77 6d                	ja     c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182ea:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c00182ef:	eb 66                	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f1:	80 f9 15             	cmp    cl,0x15
c00182f4:	75 31                	jne    c0018327 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00182f6:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c00182fb:	80 fa 01             	cmp    dl,0x1
c00182fe:	74 57                	je     c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018300:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c0018305:	80 fa 13             	cmp    dl,0x13
c0018308:	76 0c                	jbe    c0018316 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001830a:	80 fa 30             	cmp    dl,0x30
c001830d:	75 48                	jne    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830f:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018314:	eb 41                	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018316:	b9 04 00 09 00       	mov    ecx,0x90004
c001831b:	0f a3 d1             	bt     ecx,edx
c001831e:	73 37                	jae    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018320:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c0018325:	eb 30                	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018327:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c001832c:	80 f9 16             	cmp    cl,0x16
c001832f:	75 26                	jne    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018331:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c0018336:	84 d2                	test   dl,dl
c0018338:	74 1d                	je     c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833a:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c001833f:	80 fa 30             	cmp    dl,0x30
c0018342:	75 13                	jne    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018344:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c0018349:	eb 0c                	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001834b:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c0018350:	eb 05                	jmp    c0018357 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018352:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c0018357:	5b                   	pop    ebx
c0018358:	5e                   	pop    esi
c0018359:	5f                   	pop    edi
c001835a:	5d                   	pop    ebp
c001835b:	c3                   	ret    

c001835c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001835c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018364:	80 f9 04             	cmp    cl,0x4
c0018367:	75 6b                	jne    c00183d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018369:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c001836e:	80 fa 01             	cmp    dl,0x1
c0018371:	0f 86 92 02 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018377:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c001837c:	80 fa 02             	cmp    dl,0x2
c001837f:	0f 84 84 02 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018385:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c001838a:	80 fa 03             	cmp    dl,0x3
c001838d:	0f 84 76 02 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018393:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c0018398:	80 fa 04             	cmp    dl,0x4
c001839b:	0f 84 68 02 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a1:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c00183a6:	80 fa 05             	cmp    dl,0x5
c00183a9:	0f 84 5a 02 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183af:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c00183b4:	80 fa 07             	cmp    dl,0x7
c00183b7:	0f 84 4c 02 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183bd:	83 ea 08             	sub    edx,0x8
c00183c0:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00183c5:	80 fa 01             	cmp    dl,0x1
c00183c8:	0f 87 3b 02 00 00    	ja     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ce:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c00183d3:	c3                   	ret    
c00183d4:	80 f9 05             	cmp    cl,0x5
c00183d7:	75 45                	jne    c001841e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00183d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00183dc:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00183e1:	80 f9 02             	cmp    cl,0x2
c00183e4:	0f 86 1f 02 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183ea:	80 fa 04             	cmp    dl,0x4
c00183ed:	0f 84 f3 01 00 00    	je     c00185e6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00183f3:	80 fa 07             	cmp    dl,0x7
c00183f6:	0f 84 0d 02 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183fc:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0018401:	80 fa 08             	cmp    dl,0x8
c0018404:	0f 84 ff 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001840a:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c001840f:	80 fa 09             	cmp    dl,0x9
c0018412:	0f 85 f1 01 00 00    	jne    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018418:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c001841d:	c3                   	ret    
c001841e:	80 f9 06             	cmp    cl,0x6
c0018421:	0f 85 85 01 00 00    	jne    c00185ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018427:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c001842c:	80 fa 01             	cmp    dl,0x1
c001842f:	0f 84 d4 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018435:	8d 42 fb             	lea    eax,[edx-0x5]
c0018438:	3c 01                	cmp    al,0x1
c001843a:	0f 86 ac 01 00 00    	jbe    c00185ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018440:	80 fa 03             	cmp    dl,0x3
c0018443:	0f 84 a3 01 00 00    	je     c00185ec <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018449:	8d 4a f9             	lea    ecx,[edx-0x7]
c001844c:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0018451:	80 f9 01             	cmp    cl,0x1
c0018454:	0f 86 af 01 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845a:	80 fa 09             	cmp    dl,0x9
c001845d:	0f 84 8f 01 00 00    	je     c00185f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018463:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018466:	80 f9 01             	cmp    cl,0x1
c0018469:	0f 86 9a 01 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846f:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c0018474:	80 fa 0d             	cmp    dl,0xd
c0018477:	0f 84 8c 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847d:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c0018482:	80 fa 0e             	cmp    dl,0xe
c0018485:	0f 84 7e 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001848b:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c0018490:	80 fa 0f             	cmp    dl,0xf
c0018493:	0f 84 70 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018499:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c001849e:	80 fa 15             	cmp    dl,0x15
c00184a1:	0f 84 62 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00184aa:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c00184af:	80 f9 01             	cmp    cl,0x1
c00184b2:	0f 86 51 01 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b8:	80 fa 1a             	cmp    dl,0x1a
c00184bb:	0f 84 37 01 00 00    	je     c00185f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00184c1:	80 fa 1c             	cmp    dl,0x1c
c00184c4:	0f 84 34 01 00 00    	je     c00185fe <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00184ca:	80 fa 1d             	cmp    dl,0x1d
c00184cd:	0f 84 36 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d3:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00184d8:	80 fa 25             	cmp    dl,0x25
c00184db:	0f 84 28 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e1:	8d 4a da             	lea    ecx,[edx-0x26]
c00184e4:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00184e9:	80 f9 01             	cmp    cl,0x1
c00184ec:	0f 86 17 01 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f2:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c00184f7:	80 fa 2a             	cmp    dl,0x2a
c00184fa:	0f 84 09 01 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018500:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c0018505:	80 fa 2c             	cmp    dl,0x2c
c0018508:	0f 84 fb 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850e:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c0018513:	80 fa 2d             	cmp    dl,0x2d
c0018516:	0f 84 ed 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851c:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c0018521:	80 fa 2e             	cmp    dl,0x2e
c0018524:	0f 84 df 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001852a:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c001852f:	80 fa 2f             	cmp    dl,0x2f
c0018532:	0f 84 d1 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018538:	8d 4a cb             	lea    ecx,[edx-0x35]
c001853b:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018540:	80 f9 01             	cmp    cl,0x1
c0018543:	0f 86 c0 00 00 00    	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018549:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c001854e:	80 fa 37             	cmp    dl,0x37
c0018551:	0f 84 b2 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018557:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c001855c:	80 fa 3a             	cmp    dl,0x3a
c001855f:	0f 84 a4 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018565:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c001856a:	80 fa 3c             	cmp    dl,0x3c
c001856d:	0f 84 96 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018573:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0018578:	80 fa 3d             	cmp    dl,0x3d
c001857b:	0f 84 88 00 00 00    	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018581:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0018586:	80 fa 3e             	cmp    dl,0x3e
c0018589:	74 7e                	je     c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001858b:	8d 42 bb             	lea    eax,[edx-0x45]
c001858e:	3c 01                	cmp    al,0x1
c0018590:	76 72                	jbe    c0018604 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018592:	80 fa 3f             	cmp    dl,0x3f
c0018595:	74 6d                	je     c0018604 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018597:	80 fa 4a             	cmp    dl,0x4a
c001859a:	74 0a                	je     c00185a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001859c:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00185a1:	80 fa 4d             	cmp    dl,0x4d
c00185a4:	75 63                	jne    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a6:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c00185ab:	c3                   	ret    
c00185ac:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00185b1:	80 f9 0b             	cmp    cl,0xb
c00185b4:	75 0a                	jne    c00185c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00185b6:	fe ca                	dec    dl
c00185b8:	75 4f                	jne    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ba:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c00185bf:	c3                   	ret    
c00185c0:	80 f9 0f             	cmp    cl,0xf
c00185c3:	75 44                	jne    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c5:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c00185ca:	80 fa 02             	cmp    dl,0x2
c00185cd:	76 3a                	jbe    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cf:	8d 42 fd             	lea    eax,[edx-0x3]
c00185d2:	3c 01                	cmp    al,0x1
c00185d4:	76 0a                	jbe    c00185e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00185d6:	b8 61 b2 02 c0       	mov    eax,0xc002b261
c00185db:	80 fa 06             	cmp    dl,0x6
c00185de:	75 29                	jne    c0018609 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e0:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c00185e5:	c3                   	ret    
c00185e6:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c00185eb:	c3                   	ret    
c00185ec:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c00185f1:	c3                   	ret    
c00185f2:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c00185f7:	c3                   	ret    
c00185f8:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c00185fd:	c3                   	ret    
c00185fe:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018603:	c3                   	ret    
c0018604:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c0018609:	c3                   	ret    

c001860a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001860a:	60                   	pusha  
c001860b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001860f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018617:	9c                   	pushf  
c0018618:	fa                   	cli    
c0018619:	0f 09                	wbinvd 
c001861b:	0f 30                	wrmsr  
c001861d:	9d                   	popf   
c001861e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018622:	89 02                	mov    DWORD PTR [edx],eax
c0018624:	61                   	popa   
c0018625:	c3                   	ret    

c0018626 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018626:	60                   	pusha  
c0018627:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001862b:	9c                   	pushf  
c001862c:	fa                   	cli    
c001862d:	0f 09                	wbinvd 
c001862f:	31 c0                	xor    eax,eax
c0018631:	31 d2                	xor    edx,edx
c0018633:	0f 32                	rdmsr  
c0018635:	9d                   	popf   
c0018636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001863a:	89 02                	mov    DWORD PTR [edx],eax
c001863c:	61                   	popa   
c001863d:	c3                   	ret    

c001863e <CPU::AMD_K6_writeback(int, int, int)>:
c001863e:	56                   	push   esi
c001863f:	53                   	push   ebx
c0018640:	83 ec 10             	sub    esp,0x10
c0018643:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018647:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001864c:	75 5d                	jne    c00186ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001864e:	83 f8 08             	cmp    eax,0x8
c0018651:	75 09                	jne    c001865c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018653:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018658:	7e 13                	jle    c001866d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001865a:	eb 30                	jmp    c001868c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001865c:	83 f8 06             	cmp    eax,0x6
c001865f:	7c 4a                	jl     c00186ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018661:	83 f8 07             	cmp    eax,0x7
c0018664:	7e 07                	jle    c001866d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018666:	83 f8 09             	cmp    eax,0x9
c0018669:	74 21                	je     c001868c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001866b:	eb 3e                	jmp    c00186ab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001866d:	89 e6                	mov    esi,esp
c001866f:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c0018675:	56                   	push   esi
c0018676:	c1 eb 15             	shr    ebx,0x15
c0018679:	68 82 00 00 c0       	push   0xc0000082
c001867e:	83 e3 7e             	and    ebx,0x7e
c0018681:	e8 a0 ff ff ff       	call   c0018626 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018686:	56                   	push   esi
c0018687:	6a 00                	push   0x0
c0018689:	53                   	push   ebx
c001868a:	eb 12                	jmp    c001869e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001868c:	89 e3                	mov    ebx,esp
c001868e:	53                   	push   ebx
c001868f:	68 82 00 00 c0       	push   0xc0000082
c0018694:	e8 8d ff ff ff       	call   c0018626 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018699:	53                   	push   ebx
c001869a:	6a 00                	push   0x0
c001869c:	6a 00                	push   0x0
c001869e:	68 82 00 00 c0       	push   0xc0000082
c00186a3:	e8 62 ff ff ff       	call   c001860a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00186a8:	83 c4 18             	add    esp,0x18
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	5b                   	pop    ebx
c00186af:	5e                   	pop    esi
c00186b0:	c3                   	ret    
c00186b1:	90                   	nop

c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00186b2:	55                   	push   ebp
c00186b3:	57                   	push   edi
c00186b4:	56                   	push   esi
c00186b5:	53                   	push   ebx
c00186b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186ba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00186be:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00186c2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00186c6:	39 05 60 cc 02 c0    	cmp    DWORD PTR ds:0xc002cc60,eax
c00186cc:	75 23                	jne    c00186f1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00186ce:	a1 6c 02 03 c0       	mov    eax,ds:0xc003026c
c00186d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186d7:	89 06                	mov    DWORD PTR [esi],eax
c00186d9:	a1 68 02 03 c0       	mov    eax,ds:0xc0030268
c00186de:	89 07                	mov    DWORD PTR [edi],eax
c00186e0:	a1 64 02 03 c0       	mov    eax,ds:0xc0030264
c00186e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00186e8:	a1 60 02 03 c0       	mov    eax,ds:0xc0030260
c00186ed:	89 02                	mov    DWORD PTR [edx],eax
c00186ef:	eb 3f                	jmp    c0018730 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00186f1:	31 c9                	xor    ecx,ecx
c00186f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186f7:	0f a2                	cpuid  
c00186f9:	89 06                	mov    DWORD PTR [esi],eax
c00186fb:	89 1f                	mov    DWORD PTR [edi],ebx
c00186fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018701:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018704:	89 10                	mov    DWORD PTR [eax],edx
c0018706:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001870a:	a3 60 cc 02 c0       	mov    ds:0xc002cc60,eax
c001870f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018711:	a3 6c 02 03 c0       	mov    ds:0xc003026c,eax
c0018716:	8b 07                	mov    eax,DWORD PTR [edi]
c0018718:	a3 68 02 03 c0       	mov    ds:0xc0030268,eax
c001871d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018720:	a3 64 02 03 c0       	mov    ds:0xc0030264,eax
c0018725:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018729:	8b 00                	mov    eax,DWORD PTR [eax]
c001872b:	a3 60 02 03 c0       	mov    ds:0xc0030260,eax
c0018730:	5b                   	pop    ebx
c0018731:	5e                   	pop    esi
c0018732:	5f                   	pop    edi
c0018733:	5d                   	pop    ebp
c0018734:	c3                   	ret    
c0018735:	90                   	nop

c0018736 <CPU::cpuidCheckEDX(unsigned int)>:
c0018736:	83 ec 10             	sub    esp,0x10
c0018739:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001873d:	50                   	push   eax
c001873e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018742:	50                   	push   eax
c0018743:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018747:	50                   	push   eax
c0018748:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001874c:	50                   	push   eax
c001874d:	6a 01                	push   0x1
c001874f:	e8 5e ff ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018754:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018758:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001875c:	0f 95 c0             	setne  al
c001875f:	83 c4 24             	add    esp,0x24
c0018762:	c3                   	ret    
c0018763:	90                   	nop

c0018764 <CPU::cpuidCheckECX(unsigned int)>:
c0018764:	83 ec 10             	sub    esp,0x10
c0018767:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001876b:	50                   	push   eax
c001876c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018770:	50                   	push   eax
c0018771:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018775:	50                   	push   eax
c0018776:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001877a:	50                   	push   eax
c001877b:	6a 01                	push   0x1
c001877d:	e8 30 ff ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018782:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018786:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001878a:	0f 95 c0             	setne  al
c001878d:	83 c4 24             	add    esp,0x24
c0018790:	c3                   	ret    
c0018791:	90                   	nop

c0018792 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018792:	83 ec 10             	sub    esp,0x10
c0018795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018799:	50                   	push   eax
c001879a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001879e:	50                   	push   eax
c001879f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187a3:	50                   	push   eax
c00187a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187a8:	50                   	push   eax
c00187a9:	6a 07                	push   0x7
c00187ab:	e8 02 ff ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187b4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00187b8:	0f 95 c0             	setne  al
c00187bb:	83 c4 24             	add    esp,0x24
c00187be:	c3                   	ret    
c00187bf:	90                   	nop

c00187c0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00187c0:	83 ec 10             	sub    esp,0x10
c00187c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c7:	50                   	push   eax
c00187c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187cc:	50                   	push   eax
c00187cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187d1:	50                   	push   eax
c00187d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187d6:	50                   	push   eax
c00187d7:	6a 07                	push   0x7
c00187d9:	e8 d4 fe ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187e2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00187e6:	0f 95 c0             	setne  al
c00187e9:	83 c4 24             	add    esp,0x24
c00187ec:	c3                   	ret    
c00187ed:	90                   	nop

c00187ee <CPU::CPU()>:
c00187ee:	83 ec 0c             	sub    esp,0xc
c00187f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187f5:	83 ec 08             	sub    esp,0x8
c00187f8:	68 61 b2 02 c0       	push   0xc002b261
c00187fd:	50                   	push   eax
c00187fe:	e8 13 b4 ff ff       	call   c0013c16 <Device::Device(char const*)>
c0018803:	83 c4 10             	add    esp,0x10
c0018806:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c001880b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001880f:	89 10                	mov    DWORD PTR [eax],edx
c0018811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018815:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001881f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018823:	05 78 01 00 00       	add    eax,0x178
c0018828:	83 ec 0c             	sub    esp,0xc
c001882b:	50                   	push   eax
c001882c:	e8 9b 65 ff ff       	call   c000edcc <GDT::GDT()>
c0018831:	83 c4 10             	add    esp,0x10
c0018834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018838:	05 7c 09 00 00       	add    eax,0x97c
c001883d:	83 ec 0c             	sub    esp,0xc
c0018840:	50                   	push   eax
c0018841:	e8 d6 67 ff ff       	call   c000f01c <IDT::IDT()>
c0018846:	83 c4 10             	add    esp,0x10
c0018849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001884d:	05 7c 11 00 00       	add    eax,0x117c
c0018852:	83 ec 0c             	sub    esp,0xc
c0018855:	50                   	push   eax
c0018856:	e8 af 82 ff ff       	call   c0010b0a <TSS::TSS()>
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018862:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001886d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018877:	90                   	nop
c0018878:	83 c4 0c             	add    esp,0xc
c001887b:	c3                   	ret    

c001887c <CPU::displayFeatures()>:
c001887c:	c3                   	ret    
c001887d:	90                   	nop

c001887e <CPU::detectFeatures()>:
c001887e:	55                   	push   ebp
c001887f:	57                   	push   edi
c0018880:	56                   	push   esi
c0018881:	53                   	push   ebx
c0018882:	83 ec 50             	sub    esp,0x50
c0018885:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018889:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018893:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001889a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00188a0:	6a 0d                	push   0xd
c00188a2:	6a 00                	push   0x0
c00188a4:	55                   	push   ebp
c00188a5:	e8 a6 7e fe ff       	call   c0000750 <memset>
c00188aa:	83 c4 10             	add    esp,0x10
c00188ad:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00188b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00188b9:	0f 84 22 09 00 00    	je     c00191e1 <CPU::detectFeatures()+0x963>
c00188bf:	83 ec 0c             	sub    esp,0xc
c00188c2:	89 ef                	mov    edi,ebp
c00188c4:	6a 10                	push   0x10
c00188c6:	e8 6b fe ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c00188cb:	83 e0 01             	and    eax,0x1
c00188ce:	8d 14 00             	lea    edx,[eax+eax*1]
c00188d1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188d7:	83 e0 fd             	and    eax,0xfffffffd
c00188da:	09 d0                	or     eax,edx
c00188dc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188e2:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00188e9:	e8 48 fe ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c00188ee:	83 e0 01             	and    eax,0x1
c00188f1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00188f8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188fe:	83 e0 fb             	and    eax,0xfffffffb
c0018901:	09 d0                	or     eax,edx
c0018903:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018910:	e8 21 fe ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c0018915:	83 e0 01             	and    eax,0x1
c0018918:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001891f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018925:	83 e0 f7             	and    eax,0xfffffff7
c0018928:	09 d0                	or     eax,edx
c001892a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018930:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018937:	e8 fa fd ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c001893c:	83 e0 01             	and    eax,0x1
c001893f:	c1 e0 04             	shl    eax,0x4
c0018942:	88 c2                	mov    dl,al
c0018944:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001894a:	83 e0 ef             	and    eax,0xffffffef
c001894d:	09 d0                	or     eax,edx
c001894f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018955:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001895c:	e8 d5 fd ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c0018961:	83 e0 01             	and    eax,0x1
c0018964:	c1 e0 05             	shl    eax,0x5
c0018967:	88 c2                	mov    dl,al
c0018969:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001896f:	83 e0 df             	and    eax,0xffffffdf
c0018972:	09 d0                	or     eax,edx
c0018974:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001897a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018981:	e8 b0 fd ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c0018986:	83 e0 01             	and    eax,0x1
c0018989:	8d 14 00             	lea    edx,[eax+eax*1]
c001898c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018992:	83 e0 fd             	and    eax,0xfffffffd
c0018995:	09 d0                	or     eax,edx
c0018997:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001899d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00189a4:	e8 8d fd ff ff       	call   c0018736 <CPU::cpuidCheckEDX(unsigned int)>
c00189a9:	83 e0 01             	and    eax,0x1
c00189ac:	c1 e0 06             	shl    eax,0x6
c00189af:	88 c2                	mov    dl,al
c00189b1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189b7:	83 e0 bf             	and    eax,0xffffffbf
c00189ba:	09 d0                	or     eax,edx
c00189bc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189c2:	58                   	pop    eax
c00189c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189c7:	50                   	push   eax
c00189c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189cc:	50                   	push   eax
c00189cd:	8d 74 24 28          	lea    esi,[esp+0x28]
c00189d1:	56                   	push   esi
c00189d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189d6:	50                   	push   eax
c00189d7:	6a 00                	push   0x0
c00189d9:	e8 d4 fc ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189de:	b8 04 00 00 00       	mov    eax,0x4
c00189e3:	89 c1                	mov    ecx,eax
c00189e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189e7:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00189ed:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00189f1:	89 c1                	mov    ecx,eax
c00189f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00189f5:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00189fb:	8d 74 24 38          	lea    esi,[esp+0x38]
c00189ff:	89 c1                	mov    ecx,eax
c0018a01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a03:	83 c4 18             	add    esp,0x18
c0018a06:	68 0c b1 02 c0       	push   0xc002b10c
c0018a0b:	55                   	push   ebp
c0018a0c:	e8 87 7e fe ff       	call   c0000898 <strcmp>
c0018a11:	83 c4 10             	add    esp,0x10
c0018a14:	85 c0                	test   eax,eax
c0018a16:	75 0f                	jne    c0018a27 <CPU::detectFeatures()+0x1a9>
c0018a18:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a22:	e9 22 02 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018a27:	50                   	push   eax
c0018a28:	50                   	push   eax
c0018a29:	68 19 b1 02 c0       	push   0xc002b119
c0018a2e:	55                   	push   ebp
c0018a2f:	e8 64 7e fe ff       	call   c0000898 <strcmp>
c0018a34:	83 c4 10             	add    esp,0x10
c0018a37:	85 c0                	test   eax,eax
c0018a39:	74 dd                	je     c0018a18 <CPU::detectFeatures()+0x19a>
c0018a3b:	50                   	push   eax
c0018a3c:	50                   	push   eax
c0018a3d:	68 26 b1 02 c0       	push   0xc002b126
c0018a42:	55                   	push   ebp
c0018a43:	e8 50 7e fe ff       	call   c0000898 <strcmp>
c0018a48:	83 c4 10             	add    esp,0x10
c0018a4b:	85 c0                	test   eax,eax
c0018a4d:	74 2a                	je     c0018a79 <CPU::detectFeatures()+0x1fb>
c0018a4f:	50                   	push   eax
c0018a50:	50                   	push   eax
c0018a51:	68 33 b1 02 c0       	push   0xc002b133
c0018a56:	55                   	push   ebp
c0018a57:	e8 3c 7e fe ff       	call   c0000898 <strcmp>
c0018a5c:	83 c4 10             	add    esp,0x10
c0018a5f:	85 c0                	test   eax,eax
c0018a61:	74 16                	je     c0018a79 <CPU::detectFeatures()+0x1fb>
c0018a63:	50                   	push   eax
c0018a64:	50                   	push   eax
c0018a65:	68 40 b1 02 c0       	push   0xc002b140
c0018a6a:	55                   	push   ebp
c0018a6b:	e8 28 7e fe ff       	call   c0000898 <strcmp>
c0018a70:	83 c4 10             	add    esp,0x10
c0018a73:	85 c0                	test   eax,eax
c0018a75:	74 48                	je     c0018abf <CPU::detectFeatures()+0x241>
c0018a77:	eb 0f                	jmp    c0018a88 <CPU::detectFeatures()+0x20a>
c0018a79:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a83:	e9 c1 01 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018a88:	50                   	push   eax
c0018a89:	50                   	push   eax
c0018a8a:	68 4d b1 02 c0       	push   0xc002b14d
c0018a8f:	55                   	push   ebp
c0018a90:	e8 03 7e fe ff       	call   c0000898 <strcmp>
c0018a95:	83 c4 10             	add    esp,0x10
c0018a98:	85 c0                	test   eax,eax
c0018a9a:	74 23                	je     c0018abf <CPU::detectFeatures()+0x241>
c0018a9c:	57                   	push   edi
c0018a9d:	57                   	push   edi
c0018a9e:	68 5a b1 02 c0       	push   0xc002b15a
c0018aa3:	55                   	push   ebp
c0018aa4:	e8 ef 7d fe ff       	call   c0000898 <strcmp>
c0018aa9:	83 c4 10             	add    esp,0x10
c0018aac:	85 c0                	test   eax,eax
c0018aae:	75 1e                	jne    c0018ace <CPU::detectFeatures()+0x250>
c0018ab0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018aba:	e9 8a 01 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018abf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ac9:	e9 7b 01 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018ace:	56                   	push   esi
c0018acf:	56                   	push   esi
c0018ad0:	68 67 b1 02 c0       	push   0xc002b167
c0018ad5:	55                   	push   ebp
c0018ad6:	e8 bd 7d fe ff       	call   c0000898 <strcmp>
c0018adb:	83 c4 10             	add    esp,0x10
c0018ade:	85 c0                	test   eax,eax
c0018ae0:	75 0f                	jne    c0018af1 <CPU::detectFeatures()+0x273>
c0018ae2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018aec:	e9 58 01 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018af1:	51                   	push   ecx
c0018af2:	51                   	push   ecx
c0018af3:	68 26 b1 02 c0       	push   0xc002b126
c0018af8:	55                   	push   ebp
c0018af9:	e8 9a 7d fe ff       	call   c0000898 <strcmp>
c0018afe:	83 c4 10             	add    esp,0x10
c0018b01:	85 c0                	test   eax,eax
c0018b03:	75 0f                	jne    c0018b14 <CPU::detectFeatures()+0x296>
c0018b05:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018b0f:	e9 35 01 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018b14:	52                   	push   edx
c0018b15:	52                   	push   edx
c0018b16:	68 74 b1 02 c0       	push   0xc002b174
c0018b1b:	55                   	push   ebp
c0018b1c:	e8 77 7d fe ff       	call   c0000898 <strcmp>
c0018b21:	83 c4 10             	add    esp,0x10
c0018b24:	85 c0                	test   eax,eax
c0018b26:	75 0f                	jne    c0018b37 <CPU::detectFeatures()+0x2b9>
c0018b28:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b32:	e9 12 01 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018b37:	50                   	push   eax
c0018b38:	50                   	push   eax
c0018b39:	68 81 b1 02 c0       	push   0xc002b181
c0018b3e:	55                   	push   ebp
c0018b3f:	e8 54 7d fe ff       	call   c0000898 <strcmp>
c0018b44:	83 c4 10             	add    esp,0x10
c0018b47:	85 c0                	test   eax,eax
c0018b49:	75 0f                	jne    c0018b5a <CPU::detectFeatures()+0x2dc>
c0018b4b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018b55:	e9 ef 00 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018b5a:	50                   	push   eax
c0018b5b:	50                   	push   eax
c0018b5c:	68 8e b1 02 c0       	push   0xc002b18e
c0018b61:	55                   	push   ebp
c0018b62:	e8 31 7d fe ff       	call   c0000898 <strcmp>
c0018b67:	83 c4 10             	add    esp,0x10
c0018b6a:	85 c0                	test   eax,eax
c0018b6c:	75 0f                	jne    c0018b7d <CPU::detectFeatures()+0x2ff>
c0018b6e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b78:	e9 cc 00 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018b7d:	50                   	push   eax
c0018b7e:	50                   	push   eax
c0018b7f:	68 9b b1 02 c0       	push   0xc002b19b
c0018b84:	55                   	push   ebp
c0018b85:	e8 0e 7d fe ff       	call   c0000898 <strcmp>
c0018b8a:	83 c4 10             	add    esp,0x10
c0018b8d:	85 c0                	test   eax,eax
c0018b8f:	75 0f                	jne    c0018ba0 <CPU::detectFeatures()+0x322>
c0018b91:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b9b:	e9 a9 00 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018ba0:	50                   	push   eax
c0018ba1:	50                   	push   eax
c0018ba2:	68 a8 b1 02 c0       	push   0xc002b1a8
c0018ba7:	55                   	push   ebp
c0018ba8:	e8 eb 7c fe ff       	call   c0000898 <strcmp>
c0018bad:	83 c4 10             	add    esp,0x10
c0018bb0:	85 c0                	test   eax,eax
c0018bb2:	75 0f                	jne    c0018bc3 <CPU::detectFeatures()+0x345>
c0018bb4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018bbe:	e9 86 00 00 00       	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018bc3:	50                   	push   eax
c0018bc4:	50                   	push   eax
c0018bc5:	68 b5 b1 02 c0       	push   0xc002b1b5
c0018bca:	55                   	push   ebp
c0018bcb:	e8 c8 7c fe ff       	call   c0000898 <strcmp>
c0018bd0:	83 c4 10             	add    esp,0x10
c0018bd3:	85 c0                	test   eax,eax
c0018bd5:	75 0c                	jne    c0018be3 <CPU::detectFeatures()+0x365>
c0018bd7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018be1:	eb 66                	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018be3:	50                   	push   eax
c0018be4:	50                   	push   eax
c0018be5:	68 c2 b1 02 c0       	push   0xc002b1c2
c0018bea:	55                   	push   ebp
c0018beb:	e8 a8 7c fe ff       	call   c0000898 <strcmp>
c0018bf0:	83 c4 10             	add    esp,0x10
c0018bf3:	85 c0                	test   eax,eax
c0018bf5:	75 0c                	jne    c0018c03 <CPU::detectFeatures()+0x385>
c0018bf7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018c01:	eb 46                	jmp    c0018c49 <CPU::detectFeatures()+0x3cb>
c0018c03:	57                   	push   edi
c0018c04:	57                   	push   edi
c0018c05:	68 cf b1 02 c0       	push   0xc002b1cf
c0018c0a:	55                   	push   ebp
c0018c0b:	e8 88 7c fe ff       	call   c0000898 <strcmp>
c0018c10:	83 c4 10             	add    esp,0x10
c0018c13:	85 c0                	test   eax,eax
c0018c15:	74 e0                	je     c0018bf7 <CPU::detectFeatures()+0x379>
c0018c17:	56                   	push   esi
c0018c18:	56                   	push   esi
c0018c19:	68 dc b1 02 c0       	push   0xc002b1dc
c0018c1e:	55                   	push   ebp
c0018c1f:	e8 74 7c fe ff       	call   c0000898 <strcmp>
c0018c24:	83 c4 10             	add    esp,0x10
c0018c27:	85 c0                	test   eax,eax
c0018c29:	74 cc                	je     c0018bf7 <CPU::detectFeatures()+0x379>
c0018c2b:	51                   	push   ecx
c0018c2c:	51                   	push   ecx
c0018c2d:	68 e9 b1 02 c0       	push   0xc002b1e9
c0018c32:	55                   	push   ebp
c0018c33:	e8 60 7c fe ff       	call   c0000898 <strcmp>
c0018c38:	83 c4 10             	add    esp,0x10
c0018c3b:	85 c0                	test   eax,eax
c0018c3d:	74 b8                	je     c0018bf7 <CPU::detectFeatures()+0x379>
c0018c3f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018c49:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018c4e:	0f 86 be 00 00 00    	jbe    c0018d12 <CPU::detectFeatures()+0x494>
c0018c54:	83 ec 0c             	sub    esp,0xc
c0018c57:	68 80 00 00 00       	push   0x80
c0018c5c:	e8 31 fb ff ff       	call   c0018792 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c61:	83 e0 01             	and    eax,0x1
c0018c64:	c1 e0 06             	shl    eax,0x6
c0018c67:	88 c2                	mov    dl,al
c0018c69:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c6f:	83 e0 bf             	and    eax,0xffffffbf
c0018c72:	09 d0                	or     eax,edx
c0018c74:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c7a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c81:	e8 0c fb ff ff       	call   c0018792 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c86:	83 e0 01             	and    eax,0x1
c0018c89:	c1 e0 04             	shl    eax,0x4
c0018c8c:	88 c2                	mov    dl,al
c0018c8e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c94:	83 e0 ef             	and    eax,0xffffffef
c0018c97:	09 d0                	or     eax,edx
c0018c99:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c9f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018ca6:	e8 e7 fa ff ff       	call   c0018792 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018cab:	c1 e0 07             	shl    eax,0x7
c0018cae:	88 c2                	mov    dl,al
c0018cb0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cb6:	83 e0 7f             	and    eax,0x7f
c0018cb9:	09 d0                	or     eax,edx
c0018cbb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cc1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018cc8:	e8 f3 fa ff ff       	call   c00187c0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018ccd:	83 e0 01             	and    eax,0x1
c0018cd0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cd7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018cdd:	83 e0 f7             	and    eax,0xfffffff7
c0018ce0:	09 d0                	or     eax,edx
c0018ce2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ce8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018cef:	e8 cc fa ff ff       	call   c00187c0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cf4:	83 c4 10             	add    esp,0x10
c0018cf7:	83 e0 01             	and    eax,0x1
c0018cfa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d01:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d07:	83 e0 fb             	and    eax,0xfffffffb
c0018d0a:	09 d0                	or     eax,edx
c0018d0c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d12:	83 ec 0c             	sub    esp,0xc
c0018d15:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d19:	50                   	push   eax
c0018d1a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d1e:	50                   	push   eax
c0018d1f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d23:	56                   	push   esi
c0018d24:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d28:	50                   	push   eax
c0018d29:	6a 01                	push   0x1
c0018d2b:	e8 82 f9 ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d30:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d34:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d3a:	88 ca                	mov    dl,cl
c0018d3c:	83 e0 f0             	and    eax,0xfffffff0
c0018d3f:	83 e2 0f             	and    edx,0xf
c0018d42:	09 d0                	or     eax,edx
c0018d44:	88 ca                	mov    dl,cl
c0018d46:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d4c:	c0 ea 04             	shr    dl,0x4
c0018d4f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018d53:	0f b6 c2             	movzx  eax,dl
c0018d56:	83 c4 20             	add    esp,0x20
c0018d59:	c1 e0 06             	shl    eax,0x6
c0018d5c:	89 c7                	mov    edi,eax
c0018d5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d64:	66 25 3f c0          	and    ax,0xc03f
c0018d68:	09 f8                	or     eax,edi
c0018d6a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d71:	89 c8                	mov    eax,ecx
c0018d73:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018d7a:	c1 e8 08             	shr    eax,0x8
c0018d7d:	83 e5 3f             	and    ebp,0x3f
c0018d80:	83 e0 0f             	and    eax,0xf
c0018d83:	89 c7                	mov    edi,eax
c0018d85:	c1 e7 06             	shl    edi,0x6
c0018d88:	09 ef                	or     edi,ebp
c0018d8a:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018d91:	89 fa                	mov    edx,edi
c0018d93:	83 e5 c0             	and    ebp,0xffffffc0
c0018d96:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d9c:	88 c2                	mov    dl,al
c0018d9e:	c0 ea 02             	shr    dl,0x2
c0018da1:	89 d7                	mov    edi,edx
c0018da3:	09 ef                	or     edi,ebp
c0018da5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018dab:	89 fa                	mov    edx,edi
c0018dad:	83 e5 cf             	and    ebp,0xffffffcf
c0018db0:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018db6:	89 cf                	mov    edi,ecx
c0018db8:	c1 ef 0c             	shr    edi,0xc
c0018dbb:	83 e7 03             	and    edi,0x3
c0018dbe:	c1 e7 04             	shl    edi,0x4
c0018dc1:	09 ef                	or     edi,ebp
c0018dc3:	3c 06                	cmp    al,0x6
c0018dc5:	89 fa                	mov    edx,edi
c0018dc7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018dcd:	74 04                	je     c0018dd3 <CPU::detectFeatures()+0x555>
c0018dcf:	3c 0f                	cmp    al,0xf
c0018dd1:	75 5c                	jne    c0018e2f <CPU::detectFeatures()+0x5b1>
c0018dd3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018dd7:	89 cf                	mov    edi,ecx
c0018dd9:	c1 ef 10             	shr    edi,0x10
c0018ddc:	c1 e7 04             	shl    edi,0x4
c0018ddf:	09 fa                	or     edx,edi
c0018de1:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018de7:	0f b6 d2             	movzx  edx,dl
c0018dea:	66 81 e7 3f c0       	and    di,0xc03f
c0018def:	c1 e2 06             	shl    edx,0x6
c0018df2:	09 fa                	or     edx,edi
c0018df4:	3c 0f                	cmp    al,0xf
c0018df6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018dfd:	75 30                	jne    c0018e2f <CPU::detectFeatures()+0x5b1>
c0018dff:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018e05:	c1 e9 14             	shr    ecx,0x14
c0018e08:	83 e0 3f             	and    eax,0x3f
c0018e0b:	83 c1 0f             	add    ecx,0xf
c0018e0e:	88 ca                	mov    dl,cl
c0018e10:	c0 e9 02             	shr    cl,0x2
c0018e13:	c1 e2 06             	shl    edx,0x6
c0018e16:	09 d0                	or     eax,edx
c0018e18:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e1e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e24:	83 e0 c0             	and    eax,0xffffffc0
c0018e27:	09 c1                	or     ecx,eax
c0018e29:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e2f:	83 ec 0c             	sub    esp,0xc
c0018e32:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e3d:	50                   	push   eax
c0018e3e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e42:	55                   	push   ebp
c0018e43:	56                   	push   esi
c0018e44:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018e48:	57                   	push   edi
c0018e49:	68 00 00 00 80       	push   0x80000000
c0018e4e:	e8 5f f8 ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e53:	83 c4 20             	add    esp,0x20
c0018e56:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018e5e:	76 22                	jbe    c0018e82 <CPU::detectFeatures()+0x604>
c0018e60:	83 ec 0c             	sub    esp,0xc
c0018e63:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e67:	50                   	push   eax
c0018e68:	55                   	push   ebp
c0018e69:	56                   	push   esi
c0018e6a:	57                   	push   edi
c0018e6b:	68 01 00 00 80       	push   0x80000001
c0018e70:	e8 3d f8 ff ff       	call   c00186b2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e75:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018e7f:	83 c4 20             	add    esp,0x20
c0018e82:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018e88:	83 f8 01             	cmp    eax,0x1
c0018e8b:	75 6f                	jne    c0018efc <CPU::detectFeatures()+0x67e>
c0018e8d:	51                   	push   ecx
c0018e8e:	51                   	push   ecx
c0018e8f:	68 f5 b1 02 c0       	push   0xc002b1f5
c0018e94:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e98:	56                   	push   esi
c0018e99:	e8 6e 79 fe ff       	call   c000080c <strcpy>
c0018e9e:	5f                   	pop    edi
c0018e9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ea5:	5d                   	pop    ebp
c0018ea6:	66 c1 e8 06          	shr    ax,0x6
c0018eaa:	0f b6 c0             	movzx  eax,al
c0018ead:	50                   	push   eax
c0018eae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eb4:	c1 e8 0e             	shr    eax,0xe
c0018eb7:	0f b6 c0             	movzx  eax,al
c0018eba:	50                   	push   eax
c0018ebb:	e8 9c f4 ff ff       	call   c001835c <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018ec0:	5a                   	pop    edx
c0018ec1:	59                   	pop    ecx
c0018ec2:	50                   	push   eax
c0018ec3:	56                   	push   esi
c0018ec4:	e8 83 7a fe ff       	call   c000094c <strcat>
c0018ec9:	5f                   	pop    edi
c0018eca:	5d                   	pop    ebp
c0018ecb:	56                   	push   esi
c0018ecc:	53                   	push   ebx
c0018ecd:	e8 36 ad ff ff       	call   c0013c08 <Device::setName(char const*)>
c0018ed2:	58                   	pop    eax
c0018ed3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ed9:	5a                   	pop    edx
c0018eda:	68 fc b1 02 c0       	push   0xc002b1fc
c0018edf:	50                   	push   eax
c0018ee0:	e8 b3 79 fe ff       	call   c0000898 <strcmp>
c0018ee5:	83 c4 10             	add    esp,0x10
c0018ee8:	85 c0                	test   eax,eax
c0018eea:	0f 85 71 03 00 00    	jne    c0019261 <CPU::detectFeatures()+0x9e3>
c0018ef0:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018ef7:	e9 65 03 00 00       	jmp    c0019261 <CPU::detectFeatures()+0x9e3>
c0018efc:	83 f8 02             	cmp    eax,0x2
c0018eff:	0f 85 b5 00 00 00    	jne    c0018fba <CPU::detectFeatures()+0x73c>
c0018f05:	57                   	push   edi
c0018f06:	57                   	push   edi
c0018f07:	68 0e b2 02 c0       	push   0xc002b20e
c0018f0c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f10:	56                   	push   esi
c0018f11:	e8 f6 78 fe ff       	call   c000080c <strcpy>
c0018f16:	5d                   	pop    ebp
c0018f17:	58                   	pop    eax
c0018f18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f1e:	66 c1 e8 06          	shr    ax,0x6
c0018f22:	0f b6 c0             	movzx  eax,al
c0018f25:	50                   	push   eax
c0018f26:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f2c:	c1 e8 0e             	shr    eax,0xe
c0018f2f:	0f b6 c0             	movzx  eax,al
c0018f32:	50                   	push   eax
c0018f33:	e8 90 f2 ff ff       	call   c00181c8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f38:	5a                   	pop    edx
c0018f39:	59                   	pop    ecx
c0018f3a:	50                   	push   eax
c0018f3b:	56                   	push   esi
c0018f3c:	e8 0b 7a fe ff       	call   c000094c <strcat>
c0018f41:	5f                   	pop    edi
c0018f42:	5d                   	pop    ebp
c0018f43:	56                   	push   esi
c0018f44:	53                   	push   ebx
c0018f45:	e8 be ac ff ff       	call   c0013c08 <Device::setName(char const*)>
c0018f4a:	58                   	pop    eax
c0018f4b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f51:	5a                   	pop    edx
c0018f52:	68 13 b2 02 c0       	push   0xc002b213
c0018f57:	50                   	push   eax
c0018f58:	e8 3b 79 fe ff       	call   c0000898 <strcmp>
c0018f5d:	83 c4 10             	add    esp,0x10
c0018f60:	85 c0                	test   eax,eax
c0018f62:	75 20                	jne    c0018f84 <CPU::detectFeatures()+0x706>
c0018f64:	8b 15 48 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d748
c0018f6a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018f70:	a8 01                	test   al,0x1
c0018f72:	74 10                	je     c0018f84 <CPU::detectFeatures()+0x706>
c0018f74:	83 e0 fe             	and    eax,0xfffffffe
c0018f77:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018f7d:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f84:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f8a:	c1 e8 0e             	shr    eax,0xe
c0018f8d:	3c 05                	cmp    al,0x5
c0018f8f:	0f 85 cc 02 00 00    	jne    c0019261 <CPU::detectFeatures()+0x9e3>
c0018f95:	56                   	push   esi
c0018f96:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f9c:	83 e0 0f             	and    eax,0xf
c0018f9f:	50                   	push   eax
c0018fa0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fa6:	66 c1 e8 06          	shr    ax,0x6
c0018faa:	0f b6 c0             	movzx  eax,al
c0018fad:	50                   	push   eax
c0018fae:	6a 05                	push   0x5
c0018fb0:	e8 89 f6 ff ff       	call   c001863e <CPU::AMD_K6_writeback(int, int, int)>
c0018fb5:	e9 1f 02 00 00       	jmp    c00191d9 <CPU::detectFeatures()+0x95b>
c0018fba:	8d 50 fd             	lea    edx,[eax-0x3]
c0018fbd:	83 fa 01             	cmp    edx,0x1
c0018fc0:	76 09                	jbe    c0018fcb <CPU::detectFeatures()+0x74d>
c0018fc2:	83 f8 06             	cmp    eax,0x6
c0018fc5:	0f 85 91 01 00 00    	jne    c001915c <CPU::detectFeatures()+0x8de>
c0018fcb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fd1:	c1 ea 0e             	shr    edx,0xe
c0018fd4:	80 fa 05             	cmp    dl,0x5
c0018fd7:	75 7b                	jne    c0019054 <CPU::detectFeatures()+0x7d6>
c0018fd9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fdf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fe4:	66 81 fa 00 01       	cmp    dx,0x100
c0018fe9:	75 0c                	jne    c0018ff7 <CPU::detectFeatures()+0x779>
c0018feb:	51                   	push   ecx
c0018fec:	51                   	push   ecx
c0018fed:	68 1a b2 02 c0       	push   0xc002b21a
c0018ff2:	e9 dc 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c0018ff7:	66 81 fa 00 02       	cmp    dx,0x200
c0018ffc:	75 0c                	jne    c001900a <CPU::detectFeatures()+0x78c>
c0018ffe:	52                   	push   edx
c0018fff:	52                   	push   edx
c0019000:	68 2d b2 02 c0       	push   0xc002b22d
c0019005:	e9 c9 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001900a:	66 81 fa 40 02       	cmp    dx,0x240
c001900f:	75 0c                	jne    c001901d <CPU::detectFeatures()+0x79f>
c0019011:	50                   	push   eax
c0019012:	50                   	push   eax
c0019013:	68 3f b2 02 c0       	push   0xc002b23f
c0019018:	e9 b6 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001901d:	83 f8 06             	cmp    eax,0x6
c0019020:	75 0c                	jne    c001902e <CPU::detectFeatures()+0x7b0>
c0019022:	50                   	push   eax
c0019023:	50                   	push   eax
c0019024:	68 51 b2 02 c0       	push   0xc002b251
c0019029:	e9 a5 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001902e:	83 f8 04             	cmp    eax,0x4
c0019031:	75 0c                	jne    c001903f <CPU::detectFeatures()+0x7c1>
c0019033:	50                   	push   eax
c0019034:	50                   	push   eax
c0019035:	68 5d b2 02 c0       	push   0xc002b25d
c001903a:	e9 94 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001903f:	83 f8 03             	cmp    eax,0x3
c0019042:	0f 85 19 02 00 00    	jne    c0019261 <CPU::detectFeatures()+0x9e3>
c0019048:	50                   	push   eax
c0019049:	50                   	push   eax
c001904a:	68 65 b2 02 c0       	push   0xc002b265
c001904f:	e9 7f 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c0019054:	80 fa 06             	cmp    dl,0x6
c0019057:	0f 85 db 00 00 00    	jne    c0019138 <CPU::detectFeatures()+0x8ba>
c001905d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019063:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019068:	66 81 fa 80 01       	cmp    dx,0x180
c001906d:	75 0c                	jne    c001907b <CPU::detectFeatures()+0x7fd>
c001906f:	50                   	push   eax
c0019070:	50                   	push   eax
c0019071:	68 70 b2 02 c0       	push   0xc002b270
c0019076:	e9 58 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001907b:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019081:	66 f7 c1 80 ff       	test   cx,0xff80
c0019086:	75 0c                	jne    c0019094 <CPU::detectFeatures()+0x816>
c0019088:	50                   	push   eax
c0019089:	50                   	push   eax
c001908a:	68 80 b2 02 c0       	push   0xc002b280
c001908f:	e9 3f 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c0019094:	66 81 fa 40 02       	cmp    dx,0x240
c0019099:	75 0c                	jne    c00190a7 <CPU::detectFeatures()+0x829>
c001909b:	55                   	push   ebp
c001909c:	55                   	push   ebp
c001909d:	68 87 b2 02 c0       	push   0xc002b287
c00190a2:	e9 2c 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00190a7:	66 81 fa 80 02       	cmp    dx,0x280
c00190ac:	75 0c                	jne    c00190ba <CPU::detectFeatures()+0x83c>
c00190ae:	57                   	push   edi
c00190af:	57                   	push   edi
c00190b0:	68 90 b2 02 c0       	push   0xc002b290
c00190b5:	e9 19 01 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00190ba:	66 81 fa 40 03       	cmp    dx,0x340
c00190bf:	74 ed                	je     c00190ae <CPU::detectFeatures()+0x830>
c00190c1:	66 81 fa c0 03       	cmp    dx,0x3c0
c00190c6:	75 0c                	jne    c00190d4 <CPU::detectFeatures()+0x856>
c00190c8:	56                   	push   esi
c00190c9:	56                   	push   esi
c00190ca:	68 97 b2 02 c0       	push   0xc002b297
c00190cf:	e9 ff 00 00 00       	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00190d4:	83 f8 06             	cmp    eax,0x6
c00190d7:	0f 84 45 ff ff ff    	je     c0019022 <CPU::detectFeatures()+0x7a4>
c00190dd:	83 f8 04             	cmp    eax,0x4
c00190e0:	0f 84 4d ff ff ff    	je     c0019033 <CPU::detectFeatures()+0x7b5>
c00190e6:	83 f8 03             	cmp    eax,0x3
c00190e9:	0f 85 72 01 00 00    	jne    c0019261 <CPU::detectFeatures()+0x9e3>
c00190ef:	51                   	push   ecx
c00190f0:	51                   	push   ecx
c00190f1:	68 a0 b2 02 c0       	push   0xc002b2a0
c00190f6:	53                   	push   ebx
c00190f7:	e8 0c ab ff ff       	call   c0013c08 <Device::setName(char const*)>
c00190fc:	b1 c1                	mov    cl,0xc1
c00190fe:	88 c8                	mov    al,cl
c0019100:	e6 22                	out    0x22,al
c0019102:	e4 23                	in     al,0x23
c0019104:	88 c2                	mov    dl,al
c0019106:	88 c8                	mov    al,cl
c0019108:	e6 22                	out    0x22,al
c001910a:	88 d0                	mov    al,dl
c001910c:	83 c8 10             	or     eax,0x10
c001910f:	e6 23                	out    0x23,al
c0019111:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019118:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001911b:	89 d0                	mov    eax,edx
c001911d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019123:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019127:	40                   	inc    eax
c0019128:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001912e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019133:	e9 a1 00 00 00       	jmp    c00191d9 <CPU::detectFeatures()+0x95b>
c0019138:	83 f8 06             	cmp    eax,0x6
c001913b:	0f 84 e1 fe ff ff    	je     c0019022 <CPU::detectFeatures()+0x7a4>
c0019141:	83 f8 04             	cmp    eax,0x4
c0019144:	0f 84 e9 fe ff ff    	je     c0019033 <CPU::detectFeatures()+0x7b5>
c001914a:	83 f8 03             	cmp    eax,0x3
c001914d:	0f 85 0e 01 00 00    	jne    c0019261 <CPU::detectFeatures()+0x9e3>
c0019153:	52                   	push   edx
c0019154:	52                   	push   edx
c0019155:	68 ab b2 02 c0       	push   0xc002b2ab
c001915a:	eb 77                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001915c:	83 f8 07             	cmp    eax,0x7
c001915f:	75 09                	jne    c001916a <CPU::detectFeatures()+0x8ec>
c0019161:	50                   	push   eax
c0019162:	50                   	push   eax
c0019163:	68 b5 b2 02 c0       	push   0xc002b2b5
c0019168:	eb 69                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c001916a:	83 f8 0a             	cmp    eax,0xa
c001916d:	75 09                	jne    c0019178 <CPU::detectFeatures()+0x8fa>
c001916f:	50                   	push   eax
c0019170:	50                   	push   eax
c0019171:	68 c0 b2 02 c0       	push   0xc002b2c0
c0019176:	eb 5b                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c0019178:	83 f8 0b             	cmp    eax,0xb
c001917b:	75 09                	jne    c0019186 <CPU::detectFeatures()+0x908>
c001917d:	50                   	push   eax
c001917e:	50                   	push   eax
c001917f:	68 c8 b2 02 c0       	push   0xc002b2c8
c0019184:	eb 4d                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c0019186:	83 f8 08             	cmp    eax,0x8
c0019189:	75 09                	jne    c0019194 <CPU::detectFeatures()+0x916>
c001918b:	50                   	push   eax
c001918c:	50                   	push   eax
c001918d:	68 d1 b2 02 c0       	push   0xc002b2d1
c0019192:	eb 3f                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c0019194:	83 f8 09             	cmp    eax,0x9
c0019197:	75 09                	jne    c00191a2 <CPU::detectFeatures()+0x924>
c0019199:	50                   	push   eax
c001919a:	50                   	push   eax
c001919b:	68 d9 b2 02 c0       	push   0xc002b2d9
c00191a0:	eb 31                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00191a2:	83 f8 05             	cmp    eax,0x5
c00191a5:	75 09                	jne    c00191b0 <CPU::detectFeatures()+0x932>
c00191a7:	50                   	push   eax
c00191a8:	50                   	push   eax
c00191a9:	68 e1 b2 02 c0       	push   0xc002b2e1
c00191ae:	eb 23                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00191b0:	83 f8 0c             	cmp    eax,0xc
c00191b3:	75 09                	jne    c00191be <CPU::detectFeatures()+0x940>
c00191b5:	55                   	push   ebp
c00191b6:	55                   	push   ebp
c00191b7:	68 ef b2 02 c0       	push   0xc002b2ef
c00191bc:	eb 15                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00191be:	83 f8 0d             	cmp    eax,0xd
c00191c1:	75 09                	jne    c00191cc <CPU::detectFeatures()+0x94e>
c00191c3:	57                   	push   edi
c00191c4:	57                   	push   edi
c00191c5:	68 fa b2 02 c0       	push   0xc002b2fa
c00191ca:	eb 07                	jmp    c00191d3 <CPU::detectFeatures()+0x955>
c00191cc:	56                   	push   esi
c00191cd:	56                   	push   esi
c00191ce:	68 0e b3 02 c0       	push   0xc002b30e
c00191d3:	53                   	push   ebx
c00191d4:	e8 2f aa ff ff       	call   c0013c08 <Device::setName(char const*)>
c00191d9:	83 c4 10             	add    esp,0x10
c00191dc:	e9 80 00 00 00       	jmp    c0019261 <CPU::detectFeatures()+0x9e3>
c00191e1:	51                   	push   ecx
c00191e2:	51                   	push   ecx
c00191e3:	68 5a b1 02 c0       	push   0xc002b15a
c00191e8:	55                   	push   ebp
c00191e9:	e8 1e 76 fe ff       	call   c000080c <strcpy>
c00191ee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191f8:	e8 b1 70 fe ff       	call   c00002ae <is486>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	85 c0                	test   eax,eax
c0019202:	74 2b                	je     c001922f <CPU::detectFeatures()+0x9b1>
c0019204:	52                   	push   edx
c0019205:	52                   	push   edx
c0019206:	68 1a b3 02 c0       	push   0xc002b31a
c001920b:	53                   	push   ebx
c001920c:	e8 f7 a9 ff ff       	call   c0013c08 <Device::setName(char const*)>
c0019211:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019218:	0f 20 c0             	mov    eax,cr0
c001921b:	83 e0 14             	and    eax,0x14
c001921e:	83 c4 10             	add    esp,0x10
c0019221:	83 f8 04             	cmp    eax,0x4
c0019224:	75 1f                	jne    c0019245 <CPU::detectFeatures()+0x9c7>
c0019226:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001922d:	eb 32                	jmp    c0019261 <CPU::detectFeatures()+0x9e3>
c001922f:	50                   	push   eax
c0019230:	50                   	push   eax
c0019231:	68 25 b3 02 c0       	push   0xc002b325
c0019236:	53                   	push   ebx
c0019237:	e8 cc a9 ff ff       	call   c0013c08 <Device::setName(char const*)>
c001923c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019243:	eb d3                	jmp    c0019218 <CPU::detectFeatures()+0x99a>
c0019245:	e8 3f 70 fe ff       	call   c0000289 <hasLegacyFPU>
c001924a:	83 e0 01             	and    eax,0x1
c001924d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019250:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019256:	83 e0 fd             	and    eax,0xfffffffd
c0019259:	09 d0                	or     eax,edx
c001925b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019261:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019268:	83 c4 4c             	add    esp,0x4c
c001926b:	5b                   	pop    ebx
c001926c:	5e                   	pop    esi
c001926d:	5f                   	pop    edi
c001926e:	5d                   	pop    ebp
c001926f:	c3                   	ret    

c0019270 <CPU::setupSMEP()>:
c0019270:	0f 20 e0             	mov    eax,cr4
c0019273:	0d 00 00 10 00       	or     eax,0x100000
c0019278:	0f 22 e0             	mov    cr4,eax
c001927b:	c3                   	ret    

c001927c <CPU::setupUMIP()>:
c001927c:	0f 20 e0             	mov    eax,cr4
c001927f:	80 cc 08             	or     ah,0x8
c0019282:	0f 22 e0             	mov    cr4,eax
c0019285:	c3                   	ret    

c0019286 <CPU::setupTSC()>:
c0019286:	0f 20 e0             	mov    eax,cr4
c0019289:	83 c8 04             	or     eax,0x4
c001928c:	0f 22 e0             	mov    cr4,eax
c001928f:	c3                   	ret    

c0019290 <CPU::setupLargePages()>:
c0019290:	0f 20 e0             	mov    eax,cr4
c0019293:	83 c8 10             	or     eax,0x10
c0019296:	0f 22 e0             	mov    cr4,eax
c0019299:	c3                   	ret    

c001929a <CPU::setupPAT()>:
c001929a:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001929f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00192a6:	74 2c                	je     c00192d4 <CPU::setupPAT()+0x3a>
c00192a8:	53                   	push   ebx
c00192a9:	83 ec 10             	sub    esp,0x10
c00192ac:	68 77 02 00 00       	push   0x277
c00192b1:	50                   	push   eax
c00192b2:	e8 89 58 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00192b7:	83 e2 f8             	and    edx,0xfffffff8
c00192ba:	83 ca 01             	or     edx,0x1
c00192bd:	52                   	push   edx
c00192be:	50                   	push   eax
c00192bf:	68 77 02 00 00       	push   0x277
c00192c4:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c00192ca:	e8 9d 58 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00192cf:	83 c4 28             	add    esp,0x28
c00192d2:	5b                   	pop    ebx
c00192d3:	c3                   	ret    
c00192d4:	c3                   	ret    
c00192d5:	90                   	nop

c00192d6 <CPU::setupMTRR()>:
c00192d6:	c3                   	ret    
c00192d7:	90                   	nop

c00192d8 <CPU::setupGlobalPages()>:
c00192d8:	0f 20 e0             	mov    eax,cr4
c00192db:	0c 80                	or     al,0x80
c00192dd:	0f 22 e0             	mov    cr4,eax
c00192e0:	c3                   	ret    
c00192e1:	90                   	nop

c00192e2 <CPU::allowUsermodeDataAccess()>:
c00192e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192ed:	74 03                	je     c00192f2 <CPU::allowUsermodeDataAccess()+0x10>
c00192ef:	0f 01 cb             	stac   
c00192f2:	c3                   	ret    
c00192f3:	90                   	nop

c00192f4 <CPU::prohibitUsermodeDataAccess()>:
c00192f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192f8:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00192ff:	74 03                	je     c0019304 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019301:	0f 01 ca             	clac   
c0019304:	c3                   	ret    
c0019305:	90                   	nop

c0019306 <CPU::setupSMAP()>:
c0019306:	0f 20 e0             	mov    eax,cr4
c0019309:	0d 00 00 20 00       	or     eax,0x200000
c001930e:	0f 22 e0             	mov    cr4,eax
c0019311:	eb e1                	jmp    c00192f4 <CPU::prohibitUsermodeDataAccess()>
c0019313:	90                   	nop

c0019314 <CPU::setupFeatures()>:
c0019314:	83 ec 0c             	sub    esp,0xc
c0019317:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001931b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019322:	74 07                	je     c001932b <CPU::setupFeatures()+0x17>
c0019324:	52                   	push   edx
c0019325:	e8 46 ff ff ff       	call   c0019270 <CPU::setupSMEP()>
c001932a:	58                   	pop    eax
c001932b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019332:	74 07                	je     c001933b <CPU::setupFeatures()+0x27>
c0019334:	52                   	push   edx
c0019335:	e8 cc ff ff ff       	call   c0019306 <CPU::setupSMAP()>
c001933a:	58                   	pop    eax
c001933b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019342:	74 07                	je     c001934b <CPU::setupFeatures()+0x37>
c0019344:	52                   	push   edx
c0019345:	e8 32 ff ff ff       	call   c001927c <CPU::setupUMIP()>
c001934a:	58                   	pop    eax
c001934b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019352:	74 07                	je     c001935b <CPU::setupFeatures()+0x47>
c0019354:	52                   	push   edx
c0019355:	e8 2c ff ff ff       	call   c0019286 <CPU::setupTSC()>
c001935a:	58                   	pop    eax
c001935b:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019362:	74 07                	je     c001936b <CPU::setupFeatures()+0x57>
c0019364:	52                   	push   edx
c0019365:	e8 26 ff ff ff       	call   c0019290 <CPU::setupLargePages()>
c001936a:	59                   	pop    ecx
c001936b:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019372:	74 07                	je     c001937b <CPU::setupFeatures()+0x67>
c0019374:	52                   	push   edx
c0019375:	e8 5e ff ff ff       	call   c00192d8 <CPU::setupGlobalPages()>
c001937a:	58                   	pop    eax
c001937b:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019382:	74 0c                	je     c0019390 <CPU::setupFeatures()+0x7c>
c0019384:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019388:	83 c4 0c             	add    esp,0xc
c001938b:	e9 0a ff ff ff       	jmp    c001929a <CPU::setupPAT()>
c0019390:	83 c4 0c             	add    esp,0xc
c0019393:	c3                   	ret    

c0019394 <CPU::open(int, int, void*)>:
c0019394:	57                   	push   edi
c0019395:	56                   	push   esi
c0019396:	53                   	push   ebx
c0019397:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001939b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001939f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00193a5:	83 ec 0c             	sub    esp,0xc
c00193a8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00193ae:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00193b4:	50                   	push   eax
c00193b5:	e8 74 5a ff ff       	call   c000ee2e <GDT::setup()>
c00193ba:	83 c4 0c             	add    esp,0xc
c00193bd:	6a 00                	push   0x0
c00193bf:	68 ef be ad de       	push   0xdeadbeef
c00193c4:	57                   	push   edi
c00193c5:	e8 80 77 ff ff       	call   c0010b4a <TSS::setup(unsigned long, unsigned long)>
c00193ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193cd:	e8 58 77 ff ff       	call   c0010b2a <TSS::flush()>
c00193d2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00193d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00193db:	e8 b2 5c ff ff       	call   c000f092 <IDT::setup()>
c00193e0:	b8 00 04 00 00       	mov    eax,0x400
c00193e5:	0f 23 f8             	mov    db7,eax
c00193e8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00193f2:	e8 46 65 ff ff       	call   c000f93d <Phys::allocatePage()>
c00193f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00193fd:	89 30                	mov    DWORD PTR [eax],esi
c00193ff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019405:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019408:	58                   	pop    eax
c0019409:	5a                   	pop    edx
c001940a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019410:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019414:	e8 41 88 ff ff       	call   c0011c5a <VAS::setCPUSpecific(unsigned long)>
c0019419:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001941c:	e8 5d f4 ff ff       	call   c001887e <CPU::detectFeatures()>
c0019421:	e8 35 bc ff ff       	call   c001505b <setupInterruptController()>
c0019426:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001942c:	a1 60 d7 02 c0       	mov    eax,ds:0xc002d760
c0019431:	83 e0 10             	and    eax,0x10
c0019434:	83 f8 01             	cmp    eax,0x1
c0019437:	19 c0                	sbb    eax,eax
c0019439:	83 e0 46             	and    eax,0x46
c001943c:	83 c0 1e             	add    eax,0x1e
c001943f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019442:	e8 02 d2 ff ff       	call   c0016649 <setupTimer(int)>
c0019447:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001944d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019450:	e8 bf fe ff ff       	call   c0019314 <CPU::setupFeatures()>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	31 c0                	xor    eax,eax
c001945a:	5b                   	pop    ebx
c001945b:	5e                   	pop    esi
c001945c:	5f                   	pop    edi
c001945d:	c3                   	ret    

c001945e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001945e:	57                   	push   edi
c001945f:	56                   	push   esi
c0019460:	53                   	push   ebx
c0019461:	51                   	push   ecx
c0019462:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019466:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019469:	0f 02 c0             	lar    eax,ax
c001946c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001946f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019473:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019476:	88 ca                	mov    dl,cl
c0019478:	c0 ea 06             	shr    dl,0x6
c001947b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001947f:	89 ca                	mov    edx,ecx
c0019481:	66 c1 ea 03          	shr    dx,0x3
c0019485:	83 e2 07             	and    edx,0x7
c0019488:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001948d:	88 17                	mov    BYTE PTR [edi],dl
c001948f:	0f 84 a6 01 00 00    	je     c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019495:	83 e1 07             	and    ecx,0x7
c0019498:	80 f9 04             	cmp    cl,0x4
c001949b:	0f 84 98 00 00 00    	je     c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00194a1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00194a6:	0f 95 c0             	setne  al
c00194a9:	80 f9 05             	cmp    cl,0x5
c00194ac:	0f 95 c2             	setne  dl
c00194af:	08 c2                	or     dl,al
c00194b1:	74 79                	je     c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00194b3:	84 c9                	test   cl,cl
c00194b5:	75 05                	jne    c00194bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00194b7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194ba:	eb 3c                	jmp    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194bc:	80 f9 01             	cmp    cl,0x1
c00194bf:	75 05                	jne    c00194c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00194c1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194c4:	eb 32                	jmp    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194c6:	80 f9 02             	cmp    cl,0x2
c00194c9:	75 05                	jne    c00194d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00194cb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194ce:	eb 28                	jmp    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194d0:	31 c0                	xor    eax,eax
c00194d2:	80 f9 03             	cmp    cl,0x3
c00194d5:	75 05                	jne    c00194dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00194d7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194da:	eb 1c                	jmp    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194dc:	80 f9 05             	cmp    cl,0x5
c00194df:	75 05                	jne    c00194e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00194e1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00194e4:	eb 12                	jmp    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194e6:	80 f9 06             	cmp    cl,0x6
c00194e9:	75 05                	jne    c00194f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00194eb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00194ee:	eb 08                	jmp    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194f0:	80 f9 07             	cmp    cl,0x7
c00194f3:	75 03                	jne    c00194f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00194f8:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00194fd:	75 10                	jne    c001950f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00194ff:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019503:	b9 03 00 00 00       	mov    ecx,0x3
c0019508:	01 d0                	add    eax,edx
c001950a:	e9 37 01 00 00       	jmp    c0019646 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001950f:	b9 02 00 00 00       	mov    ecx,0x2
c0019514:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019519:	0f 85 27 01 00 00    	jne    c0019646 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001951f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019522:	b9 06 00 00 00       	mov    ecx,0x6
c0019527:	e9 1a 01 00 00       	jmp    c0019646 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001952c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001952f:	b9 06 00 00 00       	mov    ecx,0x6
c0019534:	e9 0f 01 00 00       	jmp    c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019539:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001953c:	88 ca                	mov    dl,cl
c001953e:	c0 ea 06             	shr    dl,0x6
c0019541:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019545:	89 ca                	mov    edx,ecx
c0019547:	66 c1 ea 03          	shr    dx,0x3
c001954b:	83 e2 07             	and    edx,0x7
c001954e:	80 e1 07             	and    cl,0x7
c0019551:	75 05                	jne    c0019558 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019553:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019556:	eb 4c                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019558:	80 f9 01             	cmp    cl,0x1
c001955b:	75 05                	jne    c0019562 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001955d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019560:	eb 42                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019562:	80 f9 02             	cmp    cl,0x2
c0019565:	75 05                	jne    c001956c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019567:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001956a:	eb 38                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001956c:	80 f9 03             	cmp    cl,0x3
c001956f:	75 05                	jne    c0019576 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019571:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019574:	eb 2e                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019576:	80 f9 04             	cmp    cl,0x4
c0019579:	75 12                	jne    c001958d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001957b:	f6 c4 60             	test   ah,0x60
c001957e:	75 08                	jne    c0019588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019580:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019583:	8d 78 14             	lea    edi,[eax+0x14]
c0019586:	eb 1c                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019588:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001958b:	eb 17                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001958d:	80 f9 05             	cmp    cl,0x5
c0019590:	75 05                	jne    c0019597 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019592:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019595:	eb 0d                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019597:	80 f9 06             	cmp    cl,0x6
c001959a:	75 05                	jne    c00195a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001959c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001959f:	eb 03                	jmp    c00195a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195a1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00195a4:	84 d2                	test   dl,dl
c00195a6:	75 05                	jne    c00195ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00195a8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195ab:	eb 3c                	jmp    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195ad:	80 fa 01             	cmp    dl,0x1
c00195b0:	75 05                	jne    c00195b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00195b2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195b5:	eb 32                	jmp    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195b7:	80 fa 02             	cmp    dl,0x2
c00195ba:	75 05                	jne    c00195c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00195bc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195bf:	eb 28                	jmp    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195c1:	80 fa 03             	cmp    dl,0x3
c00195c4:	75 05                	jne    c00195cb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00195c6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195c9:	eb 1e                	jmp    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195cb:	31 c0                	xor    eax,eax
c00195cd:	80 fa 04             	cmp    dl,0x4
c00195d0:	74 17                	je     c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195d2:	80 fa 05             	cmp    dl,0x5
c00195d5:	75 05                	jne    c00195dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00195d7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195da:	eb 0d                	jmp    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195dc:	80 fa 06             	cmp    dl,0x6
c00195df:	75 05                	jne    c00195e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00195e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195e4:	eb 03                	jmp    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195e9:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195ee:	0f 94 c2             	sete   dl
c00195f1:	80 f9 05             	cmp    cl,0x5
c00195f4:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00195f8:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00195fd:	d3 e0                	shl    eax,cl
c00195ff:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019603:	74 0a                	je     c001960f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019605:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019608:	b9 07 00 00 00       	mov    ecx,0x7
c001960d:	eb 37                	jmp    c0019646 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001960f:	01 f8                	add    eax,edi
c0019611:	b9 03 00 00 00       	mov    ecx,0x3
c0019616:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001961b:	74 2b                	je     c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001961d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019622:	75 0d                	jne    c0019631 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019624:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019628:	01 c8                	add    eax,ecx
c001962a:	b9 04 00 00 00       	mov    ecx,0x4
c001962f:	eb 17                	jmp    c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019631:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019634:	b9 07 00 00 00       	mov    ecx,0x7
c0019639:	eb 0d                	jmp    c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001963b:	b9 02 00 00 00       	mov    ecx,0x2
c0019640:	b2 01                	mov    dl,0x1
c0019642:	31 c0                	xor    eax,eax
c0019644:	eb 02                	jmp    c0019648 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019646:	31 d2                	xor    edx,edx
c0019648:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001964c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001964e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019652:	88 11                	mov    BYTE PTR [ecx],dl
c0019654:	5a                   	pop    edx
c0019655:	5b                   	pop    ebx
c0019656:	5e                   	pop    esi
c0019657:	5f                   	pop    edi
c0019658:	c3                   	ret    

c0019659 <Krnl::smpEntry()>:
c0019659:	eb fe                	jmp    c0019659 <Krnl::smpEntry()>

c001965b <Krnl::startCPU(int)>:
c001965b:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0019660:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019667:	0f 84 36 01 00 00    	je     c00197a3 <Krnl::startCPU(int)+0x148>
c001966d:	53                   	push   ebx
c001966e:	83 ec 10             	sub    esp,0x10
c0019671:	fa                   	cli    
c0019672:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c0019678:	6a 1b                	push   0x1b
c001967a:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c0019680:	e8 bb 54 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019685:	25 00 f0 ff ff       	and    eax,0xfffff000
c001968a:	89 c3                	mov    ebx,eax
c001968c:	58                   	pop    eax
c001968d:	5a                   	pop    edx
c001968e:	53                   	push   ebx
c001968f:	68 5c b3 02 c0       	push   0xc002b35c
c0019694:	e8 40 8f ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0019699:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196a7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196b1:	c1 e0 18             	shl    eax,0x18
c00196b4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00196ba:	83 c4 10             	add    esp,0x10
c00196bd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00196c3:	09 c2                	or     edx,eax
c00196c5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00196cb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00196d1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196d7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00196dd:	80 cd c5             	or     ch,0xc5
c00196e0:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00196e6:	f3 90                	pause  
c00196e8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00196ea:	0f ba e1 0c          	bt     ecx,0xc
c00196ee:	72 f6                	jb     c00196e6 <Krnl::startCPU(int)+0x8b>
c00196f0:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00196f6:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00196fc:	09 c1                	or     ecx,eax
c00196fe:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019704:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001970a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019710:	80 cd 85             	or     ch,0x85
c0019713:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019719:	f3 90                	pause  
c001971b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001971d:	0f ba e1 0c          	bt     ecx,0xc
c0019721:	72 f6                	jb     c0019719 <Krnl::startCPU(int)+0xbe>
c0019723:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001972d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019733:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019739:	09 c1                	or     ecx,eax
c001973b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019741:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019747:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001974d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019753:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019759:	f3 90                	pause  
c001975b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001975d:	0f ba e1 0c          	bt     ecx,0xc
c0019761:	72 f6                	jb     c0019759 <Krnl::startCPU(int)+0xfe>
c0019763:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001976d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019773:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019779:	09 c8                	or     eax,ecx
c001977b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019781:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019787:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001978c:	0d 02 06 00 00       	or     eax,0x602
c0019791:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019797:	f3 90                	pause  
c0019799:	8b 02                	mov    eax,DWORD PTR [edx]
c001979b:	0f ba e0 0c          	bt     eax,0xc
c001979f:	72 f6                	jb     c0019797 <Krnl::startCPU(int)+0x13c>
c00197a1:	eb fe                	jmp    c00197a1 <Krnl::startCPU(int)+0x146>
c00197a3:	c3                   	ret    

c00197a4 <Krnl::startCPUs()>:
c00197a4:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00197a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00197af:	88 c2                	mov    dl,al
c00197b1:	83 e2 0a             	and    edx,0xa
c00197b4:	80 fa 0a             	cmp    dl,0xa
c00197b7:	75 09                	jne    c00197c2 <Krnl::startCPUs()+0x1e>
c00197b9:	a8 01                	test   al,0x1
c00197bb:	74 05                	je     c00197c2 <Krnl::startCPUs()+0x1e>
c00197bd:	e9 d9 69 fe ff       	jmp    c000019b <prepareTramp>
c00197c2:	c3                   	ret    
c00197c3:	90                   	nop

c00197c4 <EnvVarContainer::getEnv(char const*)>:
c00197c4:	57                   	push   edi
c00197c5:	56                   	push   esi
c00197c6:	53                   	push   ebx
c00197c7:	31 db                	xor    ebx,ebx
c00197c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197cd:	39 1e                	cmp    DWORD PTR [esi],ebx
c00197cf:	7e 2b                	jle    c00197fc <EnvVarContainer::getEnv(char const*)+0x38>
c00197d1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00197d8:	50                   	push   eax
c00197d9:	50                   	push   eax
c00197da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00197e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00197e4:	e8 af 70 fe ff       	call   c0000898 <strcmp>
c00197e9:	83 c4 10             	add    esp,0x10
c00197ec:	85 c0                	test   eax,eax
c00197ee:	75 09                	jne    c00197f9 <EnvVarContainer::getEnv(char const*)+0x35>
c00197f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00197f3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00197f7:	eb 05                	jmp    c00197fe <EnvVarContainer::getEnv(char const*)+0x3a>
c00197f9:	43                   	inc    ebx
c00197fa:	eb d1                	jmp    c00197cd <EnvVarContainer::getEnv(char const*)+0x9>
c00197fc:	31 c0                	xor    eax,eax
c00197fe:	5b                   	pop    ebx
c00197ff:	5e                   	pop    esi
c0019800:	5f                   	pop    edi
c0019801:	c3                   	ret    

c0019802 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019802:	55                   	push   ebp
c0019803:	57                   	push   edi
c0019804:	56                   	push   esi
c0019805:	53                   	push   ebx
c0019806:	83 ec 28             	sub    esp,0x28
c0019809:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001980d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019811:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019815:	56                   	push   esi
c0019816:	e8 51 6f fe ff       	call   c000076c <strlen>
c001981b:	40                   	inc    eax
c001981c:	89 04 24             	mov    DWORD PTR [esp],eax
c001981f:	e8 75 5d ff ff       	call   c000f599 <malloc>
c0019824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001982b:	e8 3c 6f fe ff       	call   c000076c <strlen>
c0019830:	40                   	inc    eax
c0019831:	89 04 24             	mov    DWORD PTR [esp],eax
c0019834:	e8 60 5d ff ff       	call   c000f599 <malloc>
c0019839:	89 34 24             	mov    DWORD PTR [esp],esi
c001983c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019840:	e8 27 6f fe ff       	call   c000076c <strlen>
c0019845:	83 c4 0c             	add    esp,0xc
c0019848:	40                   	inc    eax
c0019849:	50                   	push   eax
c001984a:	6a 00                	push   0x0
c001984c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019850:	e8 fb 6e fe ff       	call   c0000750 <memset>
c0019855:	89 34 24             	mov    DWORD PTR [esp],esi
c0019858:	e8 0f 6f fe ff       	call   c000076c <strlen>
c001985d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019861:	8d 48 01             	lea    ecx,[eax+0x1]
c0019864:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019869:	89 de                	mov    esi,ebx
c001986b:	e8 fc 6e fe ff       	call   c000076c <strlen>
c0019870:	83 c4 0c             	add    esp,0xc
c0019873:	40                   	inc    eax
c0019874:	50                   	push   eax
c0019875:	6a 00                	push   0x0
c0019877:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001987b:	e8 d0 6e fe ff       	call   c0000750 <memset>
c0019880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019883:	e8 e4 6e fe ff       	call   c000076c <strlen>
c0019888:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001988c:	8d 48 01             	lea    ecx,[eax+0x1]
c001988f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019891:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019894:	40                   	inc    eax
c0019895:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019898:	c1 e0 03             	shl    eax,0x3
c001989b:	5a                   	pop    edx
c001989c:	59                   	pop    ecx
c001989d:	50                   	push   eax
c001989e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00198a1:	e8 df 5c ff ff       	call   c000f585 <realloc>
c00198a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00198aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00198ad:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00198b0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00198b4:	b9 08 00 00 00       	mov    ecx,0x8
c00198b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198bb:	83 c4 2c             	add    esp,0x2c
c00198be:	5b                   	pop    ebx
c00198bf:	5e                   	pop    esi
c00198c0:	5f                   	pop    edi
c00198c1:	5d                   	pop    ebp
c00198c2:	c3                   	ret    
c00198c3:	90                   	nop

c00198c4 <EnvVarContainer::deleteEnv(char const*)>:
c00198c4:	c3                   	ret    
c00198c5:	90                   	nop

c00198c6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00198c6:	55                   	push   ebp
c00198c7:	57                   	push   edi
c00198c8:	56                   	push   esi
c00198c9:	53                   	push   ebx
c00198ca:	81 ec 38 01 00 00    	sub    esp,0x138
c00198d0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00198d7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00198de:	68 14 01 00 00       	push   0x114
c00198e3:	e8 b1 5c ff ff       	call   c000f599 <malloc>
c00198e8:	83 c4 0c             	add    esp,0xc
c00198eb:	89 c3                	mov    ebx,eax
c00198ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00198f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00198f7:	50                   	push   eax
c00198f8:	e8 3b 92 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c00198fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019900:	e8 05 95 ff ff       	call   c0012e0a <File::exists()>
c0019905:	83 c4 10             	add    esp,0x10
c0019908:	84 c0                	test   al,al
c001990a:	75 31                	jne    c001993d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001990c:	50                   	push   eax
c001990d:	50                   	push   eax
c001990e:	6a 12                	push   0x12
c0019910:	53                   	push   ebx
c0019911:	e8 86 92 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c0019916:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019918:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001991b:	89 34 24             	mov    DWORD PTR [esp],esi
c001991e:	e8 49 6e fe ff       	call   c000076c <strlen>
c0019923:	5a                   	pop    edx
c0019924:	31 d2                	xor    edx,edx
c0019926:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001992a:	51                   	push   ecx
c001992b:	56                   	push   esi
c001992c:	52                   	push   edx
c001992d:	50                   	push   eax
c001992e:	53                   	push   ebx
c001992f:	ff d7                	call   edi
c0019931:	83 c4 14             	add    esp,0x14
c0019934:	53                   	push   ebx
c0019935:	e8 c0 92 ff ff       	call   c0012bfa <File::close()>
c001993a:	83 c4 10             	add    esp,0x10
c001993d:	56                   	push   esi
c001993e:	31 f6                	xor    esi,esi
c0019940:	68 00 01 00 00       	push   0x100
c0019945:	6a 00                	push   0x0
c0019947:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001994b:	50                   	push   eax
c001994c:	e8 ff 6d fe ff       	call   c0000750 <memset>
c0019951:	5f                   	pop    edi
c0019952:	58                   	pop    eax
c0019953:	6a 01                	push   0x1
c0019955:	53                   	push   ebx
c0019956:	e8 41 92 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001995b:	83 c4 10             	add    esp,0x10
c001995e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019966:	83 ec 0c             	sub    esp,0xc
c0019969:	8b 03                	mov    eax,DWORD PTR [ebx]
c001996b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001996f:	51                   	push   ecx
c0019970:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019974:	52                   	push   edx
c0019975:	6a 00                	push   0x0
c0019977:	6a 01                	push   0x1
c0019979:	53                   	push   ebx
c001997a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001997d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019981:	83 c4 20             	add    esp,0x20
c0019984:	3c 0d                	cmp    al,0xd
c0019986:	0f 84 09 01 00 00    	je     c0019a95 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001998c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019991:	0f 84 ef 00 00 00    	je     c0019a86 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019997:	3c 0a                	cmp    al,0xa
c0019999:	74 13                	je     c00199ae <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001999b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199a0:	74 0c                	je     c00199ae <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00199a2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00199a8:	0f 8e d8 00 00 00    	jle    c0019a86 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00199ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199b2:	83 ec 0c             	sub    esp,0xc
c00199b5:	8d 78 01             	lea    edi,[eax+0x1]
c00199b8:	57                   	push   edi
c00199b9:	e8 db 5b ff ff       	call   c000f599 <malloc>
c00199be:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00199c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00199c6:	8d 56 04             	lea    edx,[esi+0x4]
c00199c9:	89 14 24             	mov    DWORD PTR [esp],edx
c00199cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00199d0:	e8 c4 5b ff ff       	call   c000f599 <malloc>
c00199d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00199d9:	83 c4 0c             	add    esp,0xc
c00199dc:	57                   	push   edi
c00199dd:	6a 00                	push   0x0
c00199df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00199e3:	e8 68 6d fe ff       	call   c0000750 <memset>
c00199e8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00199ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00199f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00199f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199f6:	83 c4 0c             	add    esp,0xc
c00199f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199fd:	52                   	push   edx
c00199fe:	6a 00                	push   0x0
c0019a00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a04:	e8 47 6d fe ff       	call   c0000750 <memset>
c0019a09:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019a0d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019a11:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a14:	e8 53 6d fe ff       	call   c000076c <strlen>
c0019a19:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019a1d:	89 c1                	mov    ecx,eax
c0019a1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a24:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019a27:	40                   	inc    eax
c0019a28:	83 c4 10             	add    esp,0x10
c0019a2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a2e:	85 d2                	test   edx,edx
c0019a30:	75 0c                	jne    c0019a3e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019a32:	83 ec 0c             	sub    esp,0xc
c0019a35:	6a 08                	push   0x8
c0019a37:	e8 5d 5b ff ff       	call   c000f599 <malloc>
c0019a3c:	eb 0c                	jmp    c0019a4a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019a3e:	c1 e0 03             	shl    eax,0x3
c0019a41:	51                   	push   ecx
c0019a42:	51                   	push   ecx
c0019a43:	50                   	push   eax
c0019a44:	52                   	push   edx
c0019a45:	e8 3b 5b ff ff       	call   c000f585 <realloc>
c0019a4a:	83 c4 10             	add    esp,0x10
c0019a4d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a53:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019a56:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a5a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a5e:	b9 08 00 00 00       	mov    ecx,0x8
c0019a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a65:	31 f6                	xor    esi,esi
c0019a67:	50                   	push   eax
c0019a68:	68 00 01 00 00       	push   0x100
c0019a6d:	6a 00                	push   0x0
c0019a6f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a73:	50                   	push   eax
c0019a74:	e8 d7 6c fe ff       	call   c0000750 <memset>
c0019a79:	83 c4 10             	add    esp,0x10
c0019a7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a84:	eb 0f                	jmp    c0019a95 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a86:	3c 3d                	cmp    al,0x3d
c0019a88:	74 07                	je     c0019a91 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019a8a:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019a8e:	46                   	inc    esi
c0019a8f:	eb 04                	jmp    c0019a95 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a91:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019a95:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a9a:	0f 85 c6 fe ff ff    	jne    c0019966 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019aa0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019aa6:	5b                   	pop    ebx
c0019aa7:	5e                   	pop    esi
c0019aa8:	5f                   	pop    edi
c0019aa9:	5d                   	pop    ebp
c0019aaa:	c3                   	ret    
c0019aab:	90                   	nop

c0019aac <EnvVarContainer::__loadSystem()>:
c0019aac:	83 ec 10             	sub    esp,0x10
c0019aaf:	68 80 cc 02 c0       	push   0xc002cc80
c0019ab4:	68 6d b3 02 c0       	push   0xc002b36d
c0019ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019abd:	e8 04 fe ff ff       	call   c00198c6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ac2:	83 c4 1c             	add    esp,0x1c
c0019ac5:	c3                   	ret    

c0019ac6 <EnvVarContainer::__loadUser()>:
c0019ac6:	c3                   	ret    
c0019ac7:	90                   	nop

c0019ac8 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019acc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ada:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019add:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ae1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ae8:	90                   	nop
c0019ae9:	c3                   	ret    

c0019aea <EnvVarContainer::~EnvVarContainer()>:
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019af4:	85 c0                	test   eax,eax
c0019af6:	74 1d                	je     c0019b15 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019afc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019afe:	85 c0                	test   eax,eax
c0019b00:	74 13                	je     c0019b15 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b09:	83 ec 0c             	sub    esp,0xc
c0019b0c:	50                   	push   eax
c0019b0d:	e8 97 5a ff ff       	call   c000f5a9 <free>
c0019b12:	83 c4 10             	add    esp,0x10
c0019b15:	90                   	nop
c0019b16:	83 c4 0c             	add    esp,0xc
c0019b19:	c3                   	ret    

c0019b1a <Krnl::getEnv(Process*, char const*)>:
c0019b1a:	53                   	push   ebx
c0019b1b:	83 ec 08             	sub    esp,0x8
c0019b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b26:	39 05 90 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c90,eax
c0019b2c:	74 04                	je     c0019b32 <Krnl::getEnv(Process*, char const*)+0x18>
c0019b2e:	85 c0                	test   eax,eax
c0019b30:	75 0b                	jne    c0019b3d <Krnl::getEnv(Process*, char const*)+0x23>
c0019b32:	a1 74 02 03 c0       	mov    eax,ds:0xc0030274
c0019b37:	85 c0                	test   eax,eax
c0019b39:	75 19                	jne    c0019b54 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019b3b:	eb 27                	jmp    c0019b64 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019b3d:	52                   	push   edx
c0019b3e:	52                   	push   edx
c0019b3f:	53                   	push   ebx
c0019b40:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019b46:	e8 79 fc ff ff       	call   c00197c4 <EnvVarContainer::getEnv(char const*)>
c0019b4b:	83 c4 10             	add    esp,0x10
c0019b4e:	85 c0                	test   eax,eax
c0019b50:	75 28                	jne    c0019b7a <Krnl::getEnv(Process*, char const*)+0x60>
c0019b52:	eb de                	jmp    c0019b32 <Krnl::getEnv(Process*, char const*)+0x18>
c0019b54:	52                   	push   edx
c0019b55:	52                   	push   edx
c0019b56:	53                   	push   ebx
c0019b57:	50                   	push   eax
c0019b58:	e8 67 fc ff ff       	call   c00197c4 <EnvVarContainer::getEnv(char const*)>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	85 c0                	test   eax,eax
c0019b62:	75 16                	jne    c0019b7a <Krnl::getEnv(Process*, char const*)+0x60>
c0019b64:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019b68:	a1 78 02 03 c0       	mov    eax,ds:0xc0030278
c0019b6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019b71:	83 c4 08             	add    esp,0x8
c0019b74:	5b                   	pop    ebx
c0019b75:	e9 4a fc ff ff       	jmp    c00197c4 <EnvVarContainer::getEnv(char const*)>
c0019b7a:	83 c4 08             	add    esp,0x8
c0019b7d:	5b                   	pop    ebx
c0019b7e:	c3                   	ret    

c0019b7f <Krnl::setEnvSystem(char const*, char const*)>:
c0019b7f:	83 ec 10             	sub    esp,0x10
c0019b82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b8a:	ff 35 78 02 03 c0    	push   DWORD PTR ds:0xc0030278
c0019b90:	e8 6d fc ff ff       	call   c0019802 <EnvVarContainer::setEnv(char const*, char const*)>
c0019b95:	83 c4 1c             	add    esp,0x1c
c0019b98:	c3                   	ret    

c0019b99 <Krnl::setEnvUser(char const*, char const*)>:
c0019b99:	a1 74 02 03 c0       	mov    eax,ds:0xc0030274
c0019b9e:	85 c0                	test   eax,eax
c0019ba0:	74 15                	je     c0019bb7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019ba2:	83 ec 10             	sub    esp,0x10
c0019ba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bad:	50                   	push   eax
c0019bae:	e8 4f fc ff ff       	call   c0019802 <EnvVarContainer::setEnv(char const*, char const*)>
c0019bb3:	83 c4 1c             	add    esp,0x1c
c0019bb6:	c3                   	ret    
c0019bb7:	c3                   	ret    

c0019bb8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbc:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bc6:	e9 37 fc ff ff       	jmp    c0019802 <EnvVarContainer::setEnv(char const*, char const*)>

c0019bcb <Krnl::deleteEnvSystem(char const*)>:
c0019bcb:	c3                   	ret    

c0019bcc <Krnl::deleteEnvUser(char const*)>:
c0019bcc:	c3                   	ret    

c0019bcd <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019bcd:	c3                   	ret    

c0019bce <Krnl::newProcessEnv(Process*)>:
c0019bce:	83 ec 28             	sub    esp,0x28
c0019bd1:	6a 0c                	push   0xc
c0019bd3:	e8 c1 59 ff ff       	call   c000f599 <malloc>
c0019bd8:	5a                   	pop    edx
c0019bd9:	59                   	pop    ecx
c0019bda:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bde:	50                   	push   eax
c0019bdf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019be3:	e8 e0 fe ff ff       	call   c0019ac8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bec:	83 c4 2c             	add    esp,0x2c
c0019bef:	c3                   	ret    

c0019bf0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019bf0:	57                   	push   edi
c0019bf1:	56                   	push   esi
c0019bf2:	53                   	push   ebx
c0019bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf7:	83 ec 0c             	sub    esp,0xc
c0019bfa:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019c00:	6a 0c                	push   0xc
c0019c02:	e8 92 59 ff ff       	call   c000f599 <malloc>
c0019c07:	89 c3                	mov    ebx,eax
c0019c09:	58                   	pop    eax
c0019c0a:	5a                   	pop    edx
c0019c0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c0f:	53                   	push   ebx
c0019c10:	e8 b3 fe ff ff       	call   c0019ac8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c17:	89 03                	mov    DWORD PTR [ebx],eax
c0019c19:	c1 e0 03             	shl    eax,0x3
c0019c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c1f:	e8 75 59 ff ff       	call   c000f599 <malloc>
c0019c24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019c27:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019c29:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019c2c:	c1 e1 03             	shl    ecx,0x3
c0019c2f:	89 c7                	mov    edi,eax
c0019c31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	89 d8                	mov    eax,ebx
c0019c38:	5b                   	pop    ebx
c0019c39:	5e                   	pop    esi
c0019c3a:	5f                   	pop    edi
c0019c3b:	c3                   	ret    

c0019c3c <Krnl::loadSystemEnv()>:
c0019c3c:	53                   	push   ebx
c0019c3d:	83 ec 14             	sub    esp,0x14
c0019c40:	6a 0c                	push   0xc
c0019c42:	e8 52 59 ff ff       	call   c000f599 <malloc>
c0019c47:	89 c3                	mov    ebx,eax
c0019c49:	58                   	pop    eax
c0019c4a:	5a                   	pop    edx
c0019c4b:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c0019c51:	53                   	push   ebx
c0019c52:	e8 71 fe ff ff       	call   c0019ac8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c5a:	89 1d 78 02 03 c0    	mov    DWORD PTR ds:0xc0030278,ebx
c0019c60:	e8 47 fe ff ff       	call   c0019aac <EnvVarContainer::__loadSystem()>
c0019c65:	83 c4 18             	add    esp,0x18
c0019c68:	5b                   	pop    ebx
c0019c69:	c3                   	ret    

c0019c6a <Krnl::loadUserEnv()>:
c0019c6a:	53                   	push   ebx
c0019c6b:	83 ec 14             	sub    esp,0x14
c0019c6e:	6a 0c                	push   0xc
c0019c70:	e8 24 59 ff ff       	call   c000f599 <malloc>
c0019c75:	89 c3                	mov    ebx,eax
c0019c77:	58                   	pop    eax
c0019c78:	5a                   	pop    edx
c0019c79:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c0019c7f:	53                   	push   ebx
c0019c80:	e8 43 fe ff ff       	call   c0019ac8 <EnvVarContainer::EnvVarContainer(Process*)>
c0019c85:	89 1d 74 02 03 c0    	mov    DWORD PTR ds:0xc0030274,ebx
c0019c8b:	83 c4 18             	add    esp,0x18
c0019c8e:	5b                   	pop    ebx
c0019c8f:	c3                   	ret    

c0019c90 <Krnl::flushEnv()>:
c0019c90:	c3                   	ret    

c0019c91 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c95:	8b 15 74 02 03 c0    	mov    edx,DWORD PTR ds:0xc0030274
c0019c9b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019ca1:	a1 78 02 03 c0       	mov    eax,ds:0xc0030278
c0019ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ca8:	03 01                	add    eax,DWORD PTR [ecx]
c0019caa:	85 d2                	test   edx,edx
c0019cac:	74 02                	je     c0019cb0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019cae:	03 02                	add    eax,DWORD PTR [edx]
c0019cb0:	c3                   	ret    

c0019cb1 <Krnl::getProcessEnvPair(Process*, int)>:
c0019cb1:	57                   	push   edi
c0019cb2:	56                   	push   esi
c0019cb3:	8b 35 74 02 03 c0    	mov    esi,DWORD PTR ds:0xc0030274
c0019cb9:	53                   	push   ebx
c0019cba:	85 f6                	test   esi,esi
c0019cbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cc4:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019cca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cce:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019cd0:	75 16                	jne    c0019ce8 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019cd2:	39 c2                	cmp    edx,eax
c0019cd4:	7c 16                	jl     c0019cec <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019cd6:	8b 0d 78 02 03 c0    	mov    ecx,DWORD PTR ds:0xc0030278
c0019cdc:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019cde:	01 c6                	add    esi,eax
c0019ce0:	39 d6                	cmp    esi,edx
c0019ce2:	7e 3c                	jle    c0019d20 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019ce4:	29 c2                	sub    edx,eax
c0019ce6:	eb 04                	jmp    c0019cec <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019ce8:	39 c2                	cmp    edx,eax
c0019cea:	7d 05                	jge    c0019cf1 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019cec:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019cef:	eb 20                	jmp    c0019d11 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019cf1:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019cf3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019cf6:	39 d1                	cmp    ecx,edx
c0019cf8:	7e 04                	jle    c0019cfe <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019cfa:	29 c2                	sub    edx,eax
c0019cfc:	eb 10                	jmp    c0019d0e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019cfe:	8b 35 78 02 03 c0    	mov    esi,DWORD PTR ds:0xc0030278
c0019d04:	03 0e                	add    ecx,DWORD PTR [esi]
c0019d06:	39 d1                	cmp    ecx,edx
c0019d08:	7e 16                	jle    c0019d20 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019d0a:	29 c2                	sub    edx,eax
c0019d0c:	29 fa                	sub    edx,edi
c0019d0e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d11:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019d14:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d16:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019d19:	89 03                	mov    DWORD PTR [ebx],eax
c0019d1b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019d1e:	eb 1d                	jmp    c0019d3d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	68 8f b3 02 c0       	push   0xc002b38f
c0019d28:	e8 18 00 00 00       	call   c0019d45 <Krnl::panic(char const*)>
c0019d2d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019d33:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d3a:	83 c4 10             	add    esp,0x10
c0019d3d:	89 d8                	mov    eax,ebx
c0019d3f:	5b                   	pop    ebx
c0019d40:	5e                   	pop    esi
c0019d41:	5f                   	pop    edi
c0019d42:	c2 04 00             	ret    0x4

c0019d45 <Krnl::panic(char const*)>:
c0019d45:	55                   	push   ebp
c0019d46:	89 e5                	mov    ebp,esp
c0019d48:	53                   	push   ebx
c0019d49:	83 ec 10             	sub    esp,0x10
c0019d4c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019d4f:	fa                   	cli    
c0019d50:	c6 05 84 02 03 c0 01 	mov    BYTE PTR ds:0xc0030284,0x1
c0019d57:	53                   	push   ebx
c0019d58:	e8 96 58 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019d5d:	58                   	pop    eax
c0019d5e:	c6 05 80 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c680,0x0
c0019d65:	5a                   	pop    edx
c0019d66:	53                   	push   ebx
c0019d67:	68 a9 b3 02 c0       	push   0xc002b3a9
c0019d6c:	e8 68 88 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0019d71:	59                   	pop    ecx
c0019d72:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019d77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d7d:	e8 77 65 ff ff       	call   c00102f9 <setActiveTerminal(VgaText*)>
c0019d82:	83 c4 0c             	add    esp,0xc
c0019d85:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019d8a:	6a 01                	push   0x1
c0019d8c:	6a 0f                	push   0xf
c0019d8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d94:	e8 bf 63 ff ff       	call   c0010158 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019d99:	58                   	pop    eax
c0019d9a:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019d9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da5:	e8 d0 68 ff ff       	call   c001067a <VgaText::clearScreen()>
c0019daa:	58                   	pop    eax
c0019dab:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019db0:	5a                   	pop    edx
c0019db1:	68 c2 b3 02 c0       	push   0xc002b3c2
c0019db6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dbc:	e8 45 6a ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019dc1:	59                   	pop    ecx
c0019dc2:	58                   	pop    eax
c0019dc3:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019dc8:	68 68 b4 02 c0       	push   0xc002b468
c0019dcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dd3:	e8 2e 6a ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019dd8:	58                   	pop    eax
c0019dd9:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019dde:	5a                   	pop    edx
c0019ddf:	68 de b3 02 c0       	push   0xc002b3de
c0019de4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dea:	e8 17 6a ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019def:	59                   	pop    ecx
c0019df0:	58                   	pop    eax
c0019df1:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019df6:	53                   	push   ebx
c0019df7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dfd:	e8 04 6a ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019e02:	58                   	pop    eax
c0019e03:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019e08:	5a                   	pop    edx
c0019e09:	68 fe b3 02 c0       	push   0xc002b3fe
c0019e0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e14:	e8 ed 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019e19:	a1 80 02 03 c0       	mov    eax,ds:0xc0030280
c0019e1e:	83 c4 10             	add    esp,0x10
c0019e21:	85 c0                	test   eax,eax
c0019e23:	74 02                	je     c0019e27 <Krnl::panic(char const*)+0xe2>
c0019e25:	ff d0                	call   eax
c0019e27:	83 ec 0c             	sub    esp,0xc
c0019e2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e2d:	e8 8c 30 00 00       	call   c001cebe <Thr::getDriverNameFromAddress(unsigned long)>
c0019e32:	83 c4 10             	add    esp,0x10
c0019e35:	89 c3                	mov    ebx,eax
c0019e37:	85 c0                	test   eax,eax
c0019e39:	0f 84 4e 02 00 00    	je     c001a08d <Krnl::panic(char const*)+0x348>
c0019e3f:	83 ec 08             	sub    esp,0x8
c0019e42:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019e47:	68 a4 b4 02 c0       	push   0xc002b4a4
c0019e4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e52:	e8 af 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019e57:	58                   	pop    eax
c0019e58:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019e5d:	5a                   	pop    edx
c0019e5e:	68 de b3 02 c0       	push   0xc002b3de
c0019e63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e69:	e8 98 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019e6e:	59                   	pop    ecx
c0019e6f:	58                   	pop    eax
c0019e70:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019e75:	53                   	push   ebx
c0019e76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e7c:	e8 85 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019e81:	83 c4 10             	add    esp,0x10
c0019e84:	83 ec 08             	sub    esp,0x8
c0019e87:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019e8c:	68 fd b3 02 c0       	push   0xc002b3fd
c0019e91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e97:	e8 6a 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019e9c:	58                   	pop    eax
c0019e9d:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019ea2:	5a                   	pop    edx
c0019ea3:	68 fc b4 02 c0       	push   0xc002b4fc
c0019ea8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eae:	e8 53 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019eb3:	59                   	pop    ecx
c0019eb4:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019eb9:	5b                   	pop    ebx
c0019eba:	68 3c b5 02 c0       	push   0xc002b53c
c0019ebf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec5:	e8 3c 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019eca:	58                   	pop    eax
c0019ecb:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019ed0:	5a                   	pop    edx
c0019ed1:	68 e9 b3 02 c0       	push   0xc002b3e9
c0019ed6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019edc:	e8 25 69 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019ee1:	59                   	pop    ecx
c0019ee2:	5b                   	pop    ebx
c0019ee3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019ee6:	68 01 b4 02 c0       	push   0xc002b401
c0019eeb:	e8 e9 86 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0019ef0:	58                   	pop    eax
c0019ef1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ef4:	5a                   	pop    edx
c0019ef5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019ef8:	68 0a b4 02 c0       	push   0xc002b40a
c0019efd:	e8 d7 86 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0019f02:	59                   	pop    ecx
c0019f03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f06:	5b                   	pop    ebx
c0019f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f09:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019f0c:	68 13 b4 02 c0       	push   0xc002b413
c0019f11:	e8 c3 86 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0019f16:	58                   	pop    eax
c0019f17:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019f1c:	5a                   	pop    edx
c0019f1d:	68 80 b5 02 c0       	push   0xc002b580
c0019f22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f28:	e8 d9 68 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019f2d:	59                   	pop    ecx
c0019f2e:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019f33:	5b                   	pop    ebx
c0019f34:	68 1c b4 02 c0       	push   0xc002b41c
c0019f39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3f:	e8 c2 68 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019f44:	0f 20 c0             	mov    eax,cr0
c0019f47:	5a                   	pop    edx
c0019f48:	59                   	pop    ecx
c0019f49:	50                   	push   eax
c0019f4a:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019f4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f55:	e8 66 68 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0019f5a:	5b                   	pop    ebx
c0019f5b:	58                   	pop    eax
c0019f5c:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019f61:	68 26 b4 02 c0       	push   0xc002b426
c0019f66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6c:	e8 95 68 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019f71:	0f 20 d0             	mov    eax,cr2
c0019f74:	5a                   	pop    edx
c0019f75:	59                   	pop    ecx
c0019f76:	50                   	push   eax
c0019f77:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019f7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f82:	e8 39 68 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0019f87:	5b                   	pop    ebx
c0019f88:	58                   	pop    eax
c0019f89:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019f8e:	68 30 b4 02 c0       	push   0xc002b430
c0019f93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f99:	e8 68 68 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019f9e:	0f 20 d8             	mov    eax,cr3
c0019fa1:	5a                   	pop    edx
c0019fa2:	59                   	pop    ecx
c0019fa3:	50                   	push   eax
c0019fa4:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019faf:	e8 0c 68 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0019fb4:	5b                   	pop    ebx
c0019fb5:	58                   	pop    eax
c0019fb6:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019fbb:	68 43 b4 02 c0       	push   0xc002b443
c0019fc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fc6:	e8 3b 68 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019fcb:	0f 20 e0             	mov    eax,cr4
c0019fce:	5a                   	pop    edx
c0019fcf:	59                   	pop    ecx
c0019fd0:	50                   	push   eax
c0019fd1:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019fd6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fdc:	e8 df 67 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c0019fe1:	5b                   	pop    ebx
c0019fe2:	58                   	pop    eax
c0019fe3:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019fe8:	68 4d b4 02 c0       	push   0xc002b44d
c0019fed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ff3:	e8 0e 68 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c0019ff8:	5a                   	pop    edx
c0019ff9:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0019ffe:	59                   	pop    ecx
c0019fff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a005:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a008:	50                   	push   eax
c001a009:	e8 b2 67 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c001a00e:	5b                   	pop    ebx
c001a00f:	58                   	pop    eax
c001a010:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a015:	68 64 b4 02 c0       	push   0xc002b464
c001a01a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a020:	e8 e1 67 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001a025:	5a                   	pop    edx
c001a026:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a02b:	59                   	pop    ecx
c001a02c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a032:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a035:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a038:	50                   	push   eax
c001a039:	e8 82 67 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c001a03e:	5b                   	pop    ebx
c001a03f:	58                   	pop    eax
c001a040:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a045:	68 64 b4 02 c0       	push   0xc002b464
c001a04a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a050:	e8 b1 67 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001a055:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a05a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a05d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a063:	8b 12                	mov    edx,DWORD PTR [edx]
c001a065:	59                   	pop    ecx
c001a066:	5b                   	pop    ebx
c001a067:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a06a:	50                   	push   eax
c001a06b:	e8 50 67 ff ff       	call   c00107c0 <VgaText::putx(unsigned int)>
c001a070:	83 c4 10             	add    esp,0x10
c001a073:	b2 fe                	mov    dl,0xfe
c001a075:	e4 60                	in     al,0x60
c001a077:	3c 1c                	cmp    al,0x1c
c001a079:	74 04                	je     c001a07f <Krnl::panic(char const*)+0x33a>
c001a07b:	3c 5a                	cmp    al,0x5a
c001a07d:	75 f6                	jne    c001a075 <Krnl::panic(char const*)+0x330>
c001a07f:	e4 64                	in     al,0x64
c001a081:	a8 02                	test   al,0x2
c001a083:	75 fa                	jne    c001a07f <Krnl::panic(char const*)+0x33a>
c001a085:	88 d0                	mov    al,dl
c001a087:	e6 64                	out    0x64,al
c001a089:	fa                   	cli    
c001a08a:	f4                   	hlt    
c001a08b:	eb e8                	jmp    c001a075 <Krnl::panic(char const*)+0x330>
c001a08d:	50                   	push   eax
c001a08e:	50                   	push   eax
c001a08f:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a094:	68 d0 b4 02 c0       	push   0xc002b4d0
c001a099:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a09f:	e8 62 67 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001a0a4:	58                   	pop    eax
c001a0a5:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a0aa:	5a                   	pop    edx
c001a0ab:	68 de b3 02 c0       	push   0xc002b3de
c001a0b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b6:	e8 4b 67 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001a0bb:	59                   	pop    ecx
c001a0bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0c1:	5b                   	pop    ebx
c001a0c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a0c5:	83 c0 0c             	add    eax,0xc
c001a0c8:	50                   	push   eax
c001a0c9:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001a0ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0d4:	e8 2d 67 ff ff       	call   c0010806 <VgaText::puts(char const*)>
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	e9 a3 fd ff ff       	jmp    c0019e84 <Krnl::panic(char const*)+0x13f>

c001a0e1 <Net::switchEndian16(unsigned short)>:
c001a0e1:	83 ec 04             	sub    esp,0x4
c001a0e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0e8:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a0ec:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a0f0:	c1 f8 08             	sar    eax,0x8
c001a0f3:	89 c2                	mov    edx,eax
c001a0f5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a0f9:	c1 e0 08             	shl    eax,0x8
c001a0fc:	09 d0                	or     eax,edx
c001a0fe:	83 c4 04             	add    esp,0x4
c001a101:	c3                   	ret    

c001a102 <Net::switchEndian32(unsigned int)>:
c001a102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a106:	c1 e8 18             	shr    eax,0x18
c001a109:	89 c2                	mov    edx,eax
c001a10b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a10f:	c1 e0 08             	shl    eax,0x8
c001a112:	25 00 00 ff 00       	and    eax,0xff0000
c001a117:	09 c2                	or     edx,eax
c001a119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a11d:	c1 e8 08             	shr    eax,0x8
c001a120:	25 00 ff 00 00       	and    eax,0xff00
c001a125:	09 c2                	or     edx,eax
c001a127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a12b:	c1 e0 18             	shl    eax,0x18
c001a12e:	09 d0                	or     eax,edx
c001a130:	c3                   	ret    

c001a131 <Net::crc32Calc(unsigned char*, int)>:
c001a131:	83 ec 10             	sub    esp,0x10
c001a134:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a139:	75 07                	jne    c001a142 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a13b:	b8 00 00 00 00       	mov    eax,0x0
c001a140:	eb 7c                	jmp    c001a1be <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a142:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a147:	7f 07                	jg     c001a150 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a149:	b8 00 00 00 00       	mov    eax,0x0
c001a14e:	eb 6e                	jmp    c001a1be <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a150:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a158:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a160:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a164:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a168:	7d 4e                	jge    c001a1b8 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a16a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a172:	01 d0                	add    eax,edx
c001a174:	8a 00                	mov    al,BYTE PTR [eax]
c001a176:	0f b6 c0             	movzx  eax,al
c001a179:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a17d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a185:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a18a:	7f 26                	jg     c001a1b2 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a190:	83 e0 01             	and    eax,0x1
c001a193:	74 0d                	je     c001a1a2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a195:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a199:	d1 e8                	shr    eax,1
c001a19b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a1a0:	eb 06                	jmp    c001a1a8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a1a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1a6:	d1 e8                	shr    eax,1
c001a1a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a1b0:	eb d3                	jmp    c001a185 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a1b2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a1b6:	eb a8                	jmp    c001a160 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1bc:	f7 d0                	not    eax
c001a1be:	83 c4 10             	add    esp,0x10
c001a1c1:	c3                   	ret    

c001a1c2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a1c2:	57                   	push   edi
c001a1c3:	56                   	push   esi
c001a1c4:	53                   	push   ebx
c001a1c5:	83 ec 60             	sub    esp,0x60
c001a1c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1cf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a1d3:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a1db:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a1e0:	7f 1a                	jg     c001a1fc <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a1e2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a1ec:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a1f3:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a1f6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a1fa:	eb df                	jmp    c001a1db <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a1fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a203:	8d 50 01             	lea    edx,[eax+0x1]
c001a206:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a20d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a210:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a217:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a21b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a21f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a223:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a22b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a22f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a237:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a23b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a23f:	89 c6                	mov    esi,eax
c001a241:	89 d7                	mov    edi,edx
c001a243:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a245:	89 c8                	mov    eax,ecx
c001a247:	89 fa                	mov    edx,edi
c001a249:	89 f3                	mov    ebx,esi
c001a24b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a24f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a253:	89 04 24             	mov    DWORD PTR [esp],eax
c001a256:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a25e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a265:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a269:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a26d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a271:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a279:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a27d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a285:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a289:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a28d:	89 c6                	mov    esi,eax
c001a28f:	89 d7                	mov    edi,edx
c001a291:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a293:	89 c8                	mov    eax,ecx
c001a295:	89 fa                	mov    edx,edi
c001a297:	89 f3                	mov    ebx,esi
c001a299:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a29d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a2a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2a5:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a2ad:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a2b4:	0f b7 c0             	movzx  eax,ax
c001a2b7:	c1 f8 08             	sar    eax,0x8
c001a2ba:	89 c1                	mov    ecx,eax
c001a2bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2c3:	8d 50 01             	lea    edx,[eax+0x1]
c001a2c6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2cd:	88 ca                	mov    dl,cl
c001a2cf:	88 10                	mov    BYTE PTR [eax],dl
c001a2d1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a2d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2df:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2e2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a2e9:	88 10                	mov    BYTE PTR [eax],dl
c001a2eb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a2ef:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a2f3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a2fa:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a2fe:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a302:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a306:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a30a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a30e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a312:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a316:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a31a:	89 c6                	mov    esi,eax
c001a31c:	89 d7                	mov    edi,edx
c001a31e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a320:	89 c8                	mov    eax,ecx
c001a322:	89 fa                	mov    edx,edi
c001a324:	89 f3                	mov    ebx,esi
c001a326:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a32a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a32e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a332:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a336:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a33d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a344:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a348:	50                   	push   eax
c001a349:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a34d:	e8 df fd ff ff       	call   c001a131 <Net::crc32Calc(unsigned char*, int)>
c001a352:	83 c4 08             	add    esp,0x8
c001a355:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a359:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a35d:	c1 e8 18             	shr    eax,0x18
c001a360:	89 c1                	mov    ecx,eax
c001a362:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a369:	8d 50 01             	lea    edx,[eax+0x1]
c001a36c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a373:	88 ca                	mov    dl,cl
c001a375:	88 10                	mov    BYTE PTR [eax],dl
c001a377:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a37b:	c1 e8 10             	shr    eax,0x10
c001a37e:	89 c1                	mov    ecx,eax
c001a380:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a387:	8d 50 01             	lea    edx,[eax+0x1]
c001a38a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a391:	88 ca                	mov    dl,cl
c001a393:	88 10                	mov    BYTE PTR [eax],dl
c001a395:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a399:	c1 e8 08             	shr    eax,0x8
c001a39c:	89 c1                	mov    ecx,eax
c001a39e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3a5:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3af:	88 ca                	mov    dl,cl
c001a3b1:	88 10                	mov    BYTE PTR [eax],dl
c001a3b3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a3bd:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3c4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a3c8:	88 10                	mov    BYTE PTR [eax],dl
c001a3ca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3ce:	83 c4 60             	add    esp,0x60
c001a3d1:	5b                   	pop    ebx
c001a3d2:	5e                   	pop    esi
c001a3d3:	5f                   	pop    edi
c001a3d4:	c3                   	ret    

c001a3d5 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a3d5:	57                   	push   edi
c001a3d6:	56                   	push   esi
c001a3d7:	53                   	push   ebx
c001a3d8:	83 ec 70             	sub    esp,0x70
c001a3db:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3e2:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a3e6:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a3ee:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a3f5:	83 c0 0e             	add    eax,0xe
c001a3f8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a3fc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a403:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a407:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a40f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a413:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a41b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a41f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a423:	89 c6                	mov    esi,eax
c001a425:	89 d7                	mov    edi,edx
c001a427:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a429:	89 c8                	mov    eax,ecx
c001a42b:	89 fa                	mov    edx,edi
c001a42d:	89 f3                	mov    ebx,esi
c001a42f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a433:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a437:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a43b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a443:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a44a:	83 c0 08             	add    eax,0x8
c001a44d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a451:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a458:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a45c:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a464:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a468:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a46c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a470:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a474:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a478:	89 c6                	mov    esi,eax
c001a47a:	89 d7                	mov    edi,edx
c001a47c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a47e:	89 c8                	mov    eax,ecx
c001a480:	89 fa                	mov    edx,edi
c001a482:	89 f3                	mov    ebx,esi
c001a484:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a488:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a48c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a490:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a498:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a49f:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4a9:	8a 00                	mov    al,BYTE PTR [eax]
c001a4ab:	0f b6 c0             	movzx  eax,al
c001a4ae:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a4b3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4ba:	8d 50 01             	lea    edx,[eax+0x1]
c001a4bd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a4c6:	0f b6 c0             	movzx  eax,al
c001a4c9:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a4ce:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a4d3:	c1 e0 08             	shl    eax,0x8
c001a4d6:	89 c2                	mov    edx,eax
c001a4d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a4dc:	09 d0                	or     eax,edx
c001a4de:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a4e5:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a4e9:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a4f1:	75 46                	jne    c001a539 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a4f3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4fa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4fd:	66 3d dc 05          	cmp    ax,0x5dc
c001a501:	77 16                	ja     c001a519 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a503:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a50a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a50d:	0f b7 c0             	movzx  eax,ax
c001a510:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a517:	eb 20                	jmp    c001a539 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a519:	83 ec 0c             	sub    esp,0xc
c001a51c:	68 a8 b5 02 c0       	push   0xc002b5a8
c001a521:	e8 b3 80 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001a526:	83 c4 10             	add    esp,0x10
c001a529:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a530:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a534:	e9 17 01 00 00       	jmp    c001a650 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a539:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a540:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a547:	8b 12                	mov    edx,DWORD PTR [edx]
c001a549:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a54d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a554:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a558:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a55c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a560:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a564:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a568:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a56c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a570:	89 c6                	mov    esi,eax
c001a572:	89 d7                	mov    edi,edx
c001a574:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a576:	89 c8                	mov    eax,ecx
c001a578:	89 fa                	mov    edx,edi
c001a57a:	89 f3                	mov    ebx,esi
c001a57c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a584:	89 04 24             	mov    DWORD PTR [esp],eax
c001a587:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a58e:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a595:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a59c:	8d 50 01             	lea    edx,[eax+0x1]
c001a59f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5a6:	8a 00                	mov    al,BYTE PTR [eax]
c001a5a8:	0f b6 c0             	movzx  eax,al
c001a5ab:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a5af:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5b6:	8d 50 01             	lea    edx,[eax+0x1]
c001a5b9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5c0:	8a 00                	mov    al,BYTE PTR [eax]
c001a5c2:	0f b6 c0             	movzx  eax,al
c001a5c5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a5c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5d0:	8d 50 01             	lea    edx,[eax+0x1]
c001a5d3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5da:	8a 00                	mov    al,BYTE PTR [eax]
c001a5dc:	0f b6 c0             	movzx  eax,al
c001a5df:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a5e3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5ea:	8d 50 01             	lea    edx,[eax+0x1]
c001a5ed:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5f4:	8a 00                	mov    al,BYTE PTR [eax]
c001a5f6:	0f b6 c0             	movzx  eax,al
c001a5f9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a5fd:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a601:	c1 e0 18             	shl    eax,0x18
c001a604:	89 c2                	mov    edx,eax
c001a606:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a60a:	c1 e0 10             	shl    eax,0x10
c001a60d:	09 c2                	or     edx,eax
c001a60f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a613:	c1 e0 08             	shl    eax,0x8
c001a616:	09 d0                	or     eax,edx
c001a618:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a61c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a620:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a627:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a62b:	83 e8 04             	sub    eax,0x4
c001a62e:	83 ec 08             	sub    esp,0x8
c001a631:	50                   	push   eax
c001a632:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a636:	e8 f6 fa ff ff       	call   c001a131 <Net::crc32Calc(unsigned char*, int)>
c001a63b:	83 c4 10             	add    esp,0x10
c001a63e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a642:	0f 94 c2             	sete   dl
c001a645:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a64c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a64f:	90                   	nop
c001a650:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a657:	83 c4 70             	add    esp,0x70
c001a65a:	5b                   	pop    ebx
c001a65b:	5e                   	pop    esi
c001a65c:	5f                   	pop    edi
c001a65d:	c2 04 00             	ret    0x4

c001a660 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a660:	55                   	push   ebp
c001a661:	57                   	push   edi
c001a662:	56                   	push   esi
c001a663:	53                   	push   ebx
c001a664:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a66a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a671:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a673:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a676:	80 fb 40             	cmp    bl,0x40
c001a679:	75 1b                	jne    c001a696 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a67b:	8a 16                	mov    dl,BYTE PTR [esi]
c001a67d:	84 d2                	test   dl,dl
c001a67f:	0f 84 f1 00 00 00    	je     c001a776 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a685:	8d 46 01             	lea    eax,[esi+0x1]
c001a688:	80 fa 3a             	cmp    dl,0x3a
c001a68b:	74 04                	je     c001a691 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a68d:	89 c6                	mov    esi,eax
c001a68f:	eb ea                	jmp    c001a67b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a691:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a694:	89 c6                	mov    esi,eax
c001a696:	50                   	push   eax
c001a697:	6a 40                	push   0x40
c001a699:	6a 00                	push   0x0
c001a69b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a69f:	50                   	push   eax
c001a6a0:	e8 ab 60 fe ff       	call   c0000750 <memset>
c001a6a5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a6ac:	31 c0                	xor    eax,eax
c001a6ae:	83 c4 10             	add    esp,0x10
c001a6b1:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a6b3:	84 c9                	test   cl,cl
c001a6b5:	0f 84 bb 00 00 00    	je     c001a776 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6bb:	3d c7 00 00 00       	cmp    eax,0xc7
c001a6c0:	0f 8f b0 00 00 00    	jg     c001a776 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6c6:	80 f9 0a             	cmp    cl,0xa
c001a6c9:	0f 85 98 00 00 00    	jne    c001a767 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a6cf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a6d4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a6d8:	a8 df                	test   al,0xdf
c001a6da:	0f 94 c1             	sete   cl
c001a6dd:	3c 23                	cmp    al,0x23
c001a6df:	0f 94 c2             	sete   dl
c001a6e2:	08 d1                	or     cl,dl
c001a6e4:	75 4a                	jne    c001a730 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6e6:	8d 50 f7             	lea    edx,[eax-0x9]
c001a6e9:	80 fa 01             	cmp    dl,0x1
c001a6ec:	76 42                	jbe    c001a730 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6ee:	3c 5b                	cmp    al,0x5b
c001a6f0:	75 42                	jne    c001a734 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a6f2:	80 fb 40             	cmp    bl,0x40
c001a6f5:	75 39                	jne    c001a730 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6f7:	83 ec 0c             	sub    esp,0xc
c001a6fa:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a6fe:	52                   	push   edx
c001a6ff:	e8 68 60 fe ff       	call   c000076c <strlen>
c001a704:	83 c4 10             	add    esp,0x10
c001a707:	83 f8 3f             	cmp    eax,0x3f
c001a70a:	77 6a                	ja     c001a776 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a70c:	50                   	push   eax
c001a70d:	50                   	push   eax
c001a70e:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a712:	52                   	push   edx
c001a713:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a717:	52                   	push   edx
c001a718:	e8 ef 60 fe ff       	call   c000080c <strcpy>
c001a71d:	58                   	pop    eax
c001a71e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a722:	52                   	push   edx
c001a723:	e8 44 60 fe ff       	call   c000076c <strlen>
c001a728:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a72d:	83 c4 10             	add    esp,0x10
c001a730:	31 d2                	xor    edx,edx
c001a732:	eb 3a                	jmp    c001a76e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a734:	80 fb 40             	cmp    bl,0x40
c001a737:	74 06                	je     c001a73f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a739:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a73d:	eb 20                	jmp    c001a75f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a73f:	50                   	push   eax
c001a740:	50                   	push   eax
c001a741:	55                   	push   ebp
c001a742:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a746:	50                   	push   eax
c001a747:	e8 4c 61 fe ff       	call   c0000898 <strcmp>
c001a74c:	83 c4 10             	add    esp,0x10
c001a74f:	85 c0                	test   eax,eax
c001a751:	75 dd                	jne    c001a730 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a753:	eb e4                	jmp    c001a739 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a755:	8d 50 01             	lea    edx,[eax+0x1]
c001a758:	80 f9 3d             	cmp    cl,0x3d
c001a75b:	74 1d                	je     c001a77a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a75d:	89 d0                	mov    eax,edx
c001a75f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a761:	84 c9                	test   cl,cl
c001a763:	75 f0                	jne    c001a755 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a765:	eb 0f                	jmp    c001a776 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a767:	8d 50 01             	lea    edx,[eax+0x1]
c001a76a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a76e:	47                   	inc    edi
c001a76f:	89 d0                	mov    eax,edx
c001a771:	e9 3b ff ff ff       	jmp    c001a6b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a776:	31 c0                	xor    eax,eax
c001a778:	eb 33                	jmp    c001a7ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a77a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a77e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a781:	50                   	push   eax
c001a782:	50                   	push   eax
c001a783:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a787:	50                   	push   eax
c001a788:	56                   	push   esi
c001a789:	e8 0a 61 fe ff       	call   c0000898 <strcmp>
c001a78e:	83 c4 10             	add    esp,0x10
c001a791:	85 c0                	test   eax,eax
c001a793:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a797:	75 97                	jne    c001a730 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a799:	51                   	push   ecx
c001a79a:	51                   	push   ecx
c001a79b:	52                   	push   edx
c001a79c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a7a3:	e8 64 60 fe ff       	call   c000080c <strcpy>
c001a7a8:	83 c4 10             	add    esp,0x10
c001a7ab:	b0 01                	mov    al,0x1
c001a7ad:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a7b3:	5b                   	pop    ebx
c001a7b4:	5e                   	pop    esi
c001a7b5:	5f                   	pop    edi
c001a7b6:	5d                   	pop    ebp
c001a7b7:	c3                   	ret    

c001a7b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a7b8:	57                   	push   edi
c001a7b9:	56                   	push   esi
c001a7ba:	53                   	push   ebx
c001a7bb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7c1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a7c8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a7cf:	53                   	push   ebx
c001a7d0:	e8 97 5f fe ff       	call   c000076c <strlen>
c001a7d5:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7d8:	89 c7                	mov    edi,eax
c001a7da:	e8 8d 5f fe ff       	call   c000076c <strlen>
c001a7df:	83 c4 10             	add    esp,0x10
c001a7e2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a7e6:	3d ff 00 00 00       	cmp    eax,0xff
c001a7eb:	0f 87 d3 00 00 00    	ja     c001a8c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a7f1:	57                   	push   edi
c001a7f2:	57                   	push   edi
c001a7f3:	56                   	push   esi
c001a7f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a7f8:	56                   	push   esi
c001a7f9:	e8 0e 60 fe ff       	call   c000080c <strcpy>
c001a7fe:	58                   	pop    eax
c001a7ff:	5a                   	pop    edx
c001a800:	68 4a b9 02 c0       	push   0xc002b94a
c001a805:	56                   	push   esi
c001a806:	e8 41 61 fe ff       	call   c000094c <strcat>
c001a80b:	59                   	pop    ecx
c001a80c:	5f                   	pop    edi
c001a80d:	53                   	push   ebx
c001a80e:	56                   	push   esi
c001a80f:	e8 38 61 fe ff       	call   c000094c <strcat>
c001a814:	58                   	pop    eax
c001a815:	5a                   	pop    edx
c001a816:	68 f4 b5 02 c0       	push   0xc002b5f4
c001a81b:	56                   	push   esi
c001a81c:	e8 2b 61 fe ff       	call   c000094c <strcat>
c001a821:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a828:	e8 6c 4d ff ff       	call   c000f599 <malloc>
c001a82d:	83 c4 0c             	add    esp,0xc
c001a830:	89 c3                	mov    ebx,eax
c001a832:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c001a838:	56                   	push   esi
c001a839:	50                   	push   eax
c001a83a:	e8 f9 82 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001a83f:	83 c4 10             	add    esp,0x10
c001a842:	85 db                	test   ebx,ebx
c001a844:	74 7e                	je     c001a8c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a846:	51                   	push   ecx
c001a847:	51                   	push   ecx
c001a848:	6a 01                	push   0x1
c001a84a:	53                   	push   ebx
c001a84b:	e8 4c 83 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001a850:	83 c4 10             	add    esp,0x10
c001a853:	85 c0                	test   eax,eax
c001a855:	74 08                	je     c001a85f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a857:	83 ec 0c             	sub    esp,0xc
c001a85a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a85c:	53                   	push   ebx
c001a85d:	eb 5f                	jmp    c001a8be <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a85f:	52                   	push   edx
c001a860:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a864:	50                   	push   eax
c001a865:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a869:	50                   	push   eax
c001a86a:	53                   	push   ebx
c001a86b:	e8 d8 85 ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c001a870:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	89 c1                	mov    ecx,eax
c001a879:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a87d:	74 31                	je     c001a8b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a87f:	83 ec 0c             	sub    esp,0xc
c001a882:	50                   	push   eax
c001a883:	e8 11 4d ff ff       	call   c000f599 <malloc>
c001a888:	89 c6                	mov    esi,eax
c001a88a:	58                   	pop    eax
c001a88b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a88d:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a891:	52                   	push   edx
c001a892:	56                   	push   esi
c001a893:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a897:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a89b:	53                   	push   ebx
c001a89c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a89f:	83 c4 20             	add    esp,0x20
c001a8a2:	85 c0                	test   eax,eax
c001a8a4:	75 0a                	jne    c001a8b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a8a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a8ae:	74 18                	je     c001a8c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a8b0:	83 ec 0c             	sub    esp,0xc
c001a8b3:	53                   	push   ebx
c001a8b4:	e8 41 83 ff ff       	call   c0012bfa <File::close()>
c001a8b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8c1:	83 c4 10             	add    esp,0x10
c001a8c4:	31 c0                	xor    eax,eax
c001a8c6:	eb 3b                	jmp    c001a903 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a8c8:	83 ec 0c             	sub    esp,0xc
c001a8cb:	53                   	push   ebx
c001a8cc:	e8 29 83 ff ff       	call   c0012bfa <File::close()>
c001a8d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8d9:	83 c4 0c             	add    esp,0xc
c001a8dc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a8e3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a8ea:	56                   	push   esi
c001a8eb:	e8 70 fd ff ff       	call   c001a660 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a8f0:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8f3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a8f7:	e8 ad 4c ff ff       	call   c000f5a9 <free>
c001a8fc:	83 c4 10             	add    esp,0x10
c001a8ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a903:	81 c4 20 01 00 00    	add    esp,0x120
c001a909:	5b                   	pop    ebx
c001a90a:	5e                   	pop    esi
c001a90b:	5f                   	pop    edi
c001a90c:	c3                   	ret    

c001a90d <Reg::getLine(char*, char*, char*)>:
c001a90d:	57                   	push   edi
c001a90e:	56                   	push   esi
c001a90f:	53                   	push   ebx
c001a910:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a914:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a918:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a91c:	57                   	push   edi
c001a91d:	56                   	push   esi
c001a91e:	53                   	push   ebx
c001a91f:	68 f9 b5 02 c0       	push   0xc002b5f9
c001a924:	e8 8f fe ff ff       	call   c001a7b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	84 c0                	test   al,al
c001a92e:	75 10                	jne    c001a940 <Reg::getLine(char*, char*, char*)+0x33>
c001a930:	57                   	push   edi
c001a931:	56                   	push   esi
c001a932:	53                   	push   ebx
c001a933:	68 1e b6 02 c0       	push   0xc002b61e
c001a938:	e8 7b fe ff ff       	call   c001a7b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	5b                   	pop    ebx
c001a941:	5e                   	pop    esi
c001a942:	5f                   	pop    edi
c001a943:	c3                   	ret    

c001a944 <Reg::readInt(char*, char*, int*)>:
c001a944:	55                   	push   ebp
c001a945:	57                   	push   edi
c001a946:	56                   	push   esi
c001a947:	53                   	push   ebx
c001a948:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a94e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a952:	57                   	push   edi
c001a953:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a95a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a961:	e8 a7 ff ff ff       	call   c001a90d <Reg::getLine(char*, char*, char*)>
c001a966:	83 c4 10             	add    esp,0x10
c001a969:	84 c0                	test   al,al
c001a96b:	0f 84 b3 00 00 00    	je     c001aa24 <Reg::readInt(char*, char*, int*)+0xe0>
c001a971:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a975:	80 fa 2b             	cmp    dl,0x2b
c001a978:	74 0c                	je     c001a986 <Reg::readInt(char*, char*, int*)+0x42>
c001a97a:	80 fa 2d             	cmp    dl,0x2d
c001a97d:	75 0e                	jne    c001a98d <Reg::readInt(char*, char*, int*)+0x49>
c001a97f:	ba 01 00 00 00       	mov    edx,0x1
c001a984:	eb 0b                	jmp    c001a991 <Reg::readInt(char*, char*, int*)+0x4d>
c001a986:	ba 01 00 00 00       	mov    edx,0x1
c001a98b:	eb 02                	jmp    c001a98f <Reg::readInt(char*, char*, int*)+0x4b>
c001a98d:	31 d2                	xor    edx,edx
c001a98f:	31 c0                	xor    eax,eax
c001a991:	be 0a 00 00 00       	mov    esi,0xa
c001a996:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a99b:	75 20                	jne    c001a9bd <Reg::readInt(char*, char*, int*)+0x79>
c001a99d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a9a1:	80 f9 78             	cmp    cl,0x78
c001a9a4:	75 0a                	jne    c001a9b0 <Reg::readInt(char*, char*, int*)+0x6c>
c001a9a6:	83 c2 02             	add    edx,0x2
c001a9a9:	be 10 00 00 00       	mov    esi,0x10
c001a9ae:	eb 0d                	jmp    c001a9bd <Reg::readInt(char*, char*, int*)+0x79>
c001a9b0:	80 f9 62             	cmp    cl,0x62
c001a9b3:	75 08                	jne    c001a9bd <Reg::readInt(char*, char*, int*)+0x79>
c001a9b5:	83 c2 02             	add    edx,0x2
c001a9b8:	be 02 00 00 00       	mov    esi,0x2
c001a9bd:	01 d7                	add    edi,edx
c001a9bf:	31 d2                	xor    edx,edx
c001a9c1:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a9c3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a9c7:	80 fb 0d             	cmp    bl,0xd
c001a9ca:	0f 94 c3             	sete   bl
c001a9cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a9d2:	0f 94 c1             	sete   cl
c001a9d5:	08 cb                	or     bl,cl
c001a9d7:	75 3a                	jne    c001aa13 <Reg::readInt(char*, char*, int*)+0xcf>
c001a9d9:	0f af d6             	imul   edx,esi
c001a9dc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a9e1:	83 fe 10             	cmp    esi,0x10
c001a9e4:	75 26                	jne    c001aa0c <Reg::readInt(char*, char*, int*)+0xc8>
c001a9e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a9ea:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a9ed:	89 e9                	mov    ecx,ebp
c001a9ef:	80 f9 05             	cmp    cl,0x5
c001a9f2:	77 06                	ja     c001a9fa <Reg::readInt(char*, char*, int*)+0xb6>
c001a9f4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a9f8:	eb 16                	jmp    c001aa10 <Reg::readInt(char*, char*, int*)+0xcc>
c001a9fa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a9fe:	83 e9 61             	sub    ecx,0x61
c001aa01:	80 f9 05             	cmp    cl,0x5
c001aa04:	77 06                	ja     c001aa0c <Reg::readInt(char*, char*, int*)+0xc8>
c001aa06:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aa0a:	eb 04                	jmp    c001aa10 <Reg::readInt(char*, char*, int*)+0xcc>
c001aa0c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aa10:	47                   	inc    edi
c001aa11:	eb ae                	jmp    c001a9c1 <Reg::readInt(char*, char*, int*)+0x7d>
c001aa13:	84 c0                	test   al,al
c001aa15:	74 02                	je     c001aa19 <Reg::readInt(char*, char*, int*)+0xd5>
c001aa17:	f7 da                	neg    edx
c001aa19:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aa20:	89 10                	mov    DWORD PTR [eax],edx
c001aa22:	88 d8                	mov    al,bl
c001aa24:	81 c4 ec 00 00 00    	add    esp,0xec
c001aa2a:	5b                   	pop    ebx
c001aa2b:	5e                   	pop    esi
c001aa2c:	5f                   	pop    edi
c001aa2d:	5d                   	pop    ebp
c001aa2e:	c3                   	ret    

c001aa2f <Reg::readString(char*, char*, char*, int)>:
c001aa2f:	57                   	push   edi
c001aa30:	56                   	push   esi
c001aa31:	53                   	push   ebx
c001aa32:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aa38:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aa3f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aa43:	57                   	push   edi
c001aa44:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa4b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa52:	e8 b6 fe ff ff       	call   c001a90d <Reg::getLine(char*, char*, char*)>
c001aa57:	83 c4 10             	add    esp,0x10
c001aa5a:	89 c6                	mov    esi,eax
c001aa5c:	84 c0                	test   al,al
c001aa5e:	74 44                	je     c001aaa4 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa60:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001aa67:	31 c0                	xor    eax,eax
c001aa69:	4a                   	dec    edx
c001aa6a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aa6d:	84 c9                	test   cl,cl
c001aa6f:	74 0f                	je     c001aa80 <Reg::readString(char*, char*, char*, int)+0x51>
c001aa71:	39 c2                	cmp    edx,eax
c001aa73:	7e 0b                	jle    c001aa80 <Reg::readString(char*, char*, char*, int)+0x51>
c001aa75:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aa78:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aa7d:	40                   	inc    eax
c001aa7e:	eb ea                	jmp    c001aa6a <Reg::readString(char*, char*, char*, int)+0x3b>
c001aa80:	83 ec 0c             	sub    esp,0xc
c001aa83:	53                   	push   ebx
c001aa84:	e8 e3 5c fe ff       	call   c000076c <strlen>
c001aa89:	83 c4 10             	add    esp,0x10
c001aa8c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aa91:	75 11                	jne    c001aaa4 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa93:	83 ec 0c             	sub    esp,0xc
c001aa96:	53                   	push   ebx
c001aa97:	e8 d0 5c fe ff       	call   c000076c <strlen>
c001aa9c:	83 c4 10             	add    esp,0x10
c001aa9f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001aaa4:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aaaa:	89 f0                	mov    eax,esi
c001aaac:	5b                   	pop    ebx
c001aaad:	5e                   	pop    esi
c001aaae:	5f                   	pop    edi
c001aaaf:	c3                   	ret    

c001aab0 <Reg::readBool(char*, char*, bool*)>:
c001aab0:	83 ec 20             	sub    esp,0x20
c001aab3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aab7:	50                   	push   eax
c001aab8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aabc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aac0:	e8 7f fe ff ff       	call   c001a944 <Reg::readInt(char*, char*, int*)>
c001aac5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aaca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aace:	0f 95 02             	setne  BYTE PTR [edx]
c001aad1:	83 c4 2c             	add    esp,0x2c
c001aad4:	c3                   	ret    

c001aad5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aad5:	53                   	push   ebx
c001aad6:	83 ec 1c             	sub    esp,0x1c
c001aad9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aadd:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aae1:	50                   	push   eax
c001aae2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaea:	e8 c1 ff ff ff       	call   c001aab0 <Reg::readBool(char*, char*, bool*)>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	84 c0                	test   al,al
c001aaf4:	74 04                	je     c001aafa <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aaf6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aafa:	88 d8                	mov    al,bl
c001aafc:	83 c4 18             	add    esp,0x18
c001aaff:	5b                   	pop    ebx
c001ab00:	c3                   	ret    

c001ab01 <Reg::readIntWithDefault(char*, char*, int)>:
c001ab01:	53                   	push   ebx
c001ab02:	83 ec 1c             	sub    esp,0x1c
c001ab05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ab09:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab0d:	50                   	push   eax
c001ab0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab16:	e8 29 fe ff ff       	call   c001a944 <Reg::readInt(char*, char*, int*)>
c001ab1b:	83 c4 10             	add    esp,0x10
c001ab1e:	84 c0                	test   al,al
c001ab20:	74 04                	je     c001ab26 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ab22:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ab26:	89 d8                	mov    eax,ebx
c001ab28:	83 c4 18             	add    esp,0x18
c001ab2b:	5b                   	pop    ebx
c001ab2c:	c3                   	ret    

c001ab2d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ab2d:	57                   	push   edi
c001ab2e:	56                   	push   esi
c001ab2f:	56                   	push   esi
c001ab30:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab34:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab38:	56                   	push   esi
c001ab39:	57                   	push   edi
c001ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab42:	e8 e8 fe ff ff       	call   c001aa2f <Reg::readString(char*, char*, char*, int)>
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	84 c0                	test   al,al
c001ab4c:	75 1a                	jne    c001ab68 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ab4e:	51                   	push   ecx
c001ab4f:	56                   	push   esi
c001ab50:	6a 00                	push   0x0
c001ab52:	57                   	push   edi
c001ab53:	e8 f8 5b fe ff       	call   c0000750 <memset>
c001ab58:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ab5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ab5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ab68:	89 f8                	mov    eax,edi
c001ab6a:	5a                   	pop    edx
c001ab6b:	5e                   	pop    esi
c001ab6c:	5f                   	pop    edi
c001ab6d:	c3                   	ret    

c001ab6e <Sys::eject(regs*)>:
c001ab6e:	83 ec 0c             	sub    esp,0xc
c001ab71:	83 ca ff             	or     edx,0xffffffff
c001ab74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab78:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ab7b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ab80:	83 e9 41             	sub    ecx,0x41
c001ab83:	83 f9 19             	cmp    ecx,0x19
c001ab86:	77 18                	ja     c001aba0 <Sys::eject(regs*)+0x32>
c001ab88:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c001ab8f:	85 c9                	test   ecx,ecx
c001ab91:	74 0d                	je     c001aba0 <Sys::eject(regs*)+0x32>
c001ab93:	83 ec 0c             	sub    esp,0xc
c001ab96:	51                   	push   ecx
c001ab97:	e8 28 b3 ff ff       	call   c0015ec4 <LogicalDisk::eject()>
c001ab9c:	83 c4 10             	add    esp,0x10
c001ab9f:	99                   	cdq    
c001aba0:	83 c4 0c             	add    esp,0xc
c001aba3:	c3                   	ret    

c001aba4 <Sys::exit(regs*)>:
c001aba4:	83 ec 18             	sub    esp,0x18
c001aba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001abae:	e8 bc 35 00 00       	call   c001e16f <terminateTask(int)>
c001abb3:	83 c8 ff             	or     eax,0xffffffff
c001abb6:	83 c4 1c             	add    esp,0x1c
c001abb9:	89 c2                	mov    edx,eax
c001abbb:	c3                   	ret    

c001abbc <Sys::getCwd(regs*)>:
c001abbc:	83 ec 10             	sub    esp,0x10
c001abbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abc3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001abc6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001abc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abd1:	e8 64 7d ff ff       	call   c001293a <Fs::getcwd(Process*, char*, int)>
c001abd6:	83 c4 1c             	add    esp,0x1c
c001abd9:	99                   	cdq    
c001abda:	c3                   	ret    

c001abdb <Sys::getPID(regs*)>:
c001abdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abe0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abe3:	8b 00                	mov    eax,DWORD PTR [eax]
c001abe5:	99                   	cdq    
c001abe6:	c3                   	ret    

c001abe7 <Sys::getRAMData(regs*)>:
c001abe7:	8b 0d 94 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d794
c001abed:	6b 05 90 d7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d790,0x64
c001abf4:	99                   	cdq    
c001abf5:	f7 f9                	idiv   ecx
c001abf7:	c1 e0 18             	shl    eax,0x18
c001abfa:	09 c8                	or     eax,ecx
c001abfc:	99                   	cdq    
c001abfd:	c3                   	ret    

c001abfe <Sys::getVGAPtr(regs*)>:
c001abfe:	55                   	push   ebp
c001abff:	57                   	push   edi
c001ac00:	56                   	push   esi
c001ac01:	53                   	push   ebx
c001ac02:	83 ec 18             	sub    esp,0x18
c001ac05:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac09:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ac0c:	e8 aa 30 00 00       	call   c001dcbb <Thr::processFromPID(int)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	89 c1                	mov    ecx,eax
c001ac16:	b8 01 00 00 00       	mov    eax,0x1
c001ac1b:	85 c9                	test   ecx,ecx
c001ac1d:	74 59                	je     c001ac78 <Sys::getVGAPtr(regs*)+0x7a>
c001ac1f:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ac25:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ac29:	74 0c                	je     c001ac37 <Sys::getVGAPtr(regs*)+0x39>
c001ac2b:	83 ec 0c             	sub    esp,0xc
c001ac2e:	53                   	push   ebx
c001ac2f:	e8 c5 56 ff ff       	call   c00102f9 <setActiveTerminal(VgaText*)>
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ac3a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ac3d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ac42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac44:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ac47:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac4a:	81 c3 82 00 00 00    	add    ebx,0x82
c001ac50:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ac56:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac59:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ac5c:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ac62:	50                   	push   eax
c001ac63:	50                   	push   eax
c001ac64:	53                   	push   ebx
c001ac65:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac68:	05 a8 0f 00 00       	add    eax,0xfa8
c001ac6d:	50                   	push   eax
c001ac6e:	e8 99 5b fe ff       	call   c000080c <strcpy>
c001ac73:	83 c4 10             	add    esp,0x10
c001ac76:	31 c0                	xor    eax,eax
c001ac78:	83 c4 0c             	add    esp,0xc
c001ac7b:	31 d2                	xor    edx,edx
c001ac7d:	5b                   	pop    ebx
c001ac7e:	5e                   	pop    esi
c001ac7f:	5f                   	pop    edi
c001ac80:	5d                   	pop    ebp
c001ac81:	c3                   	ret    

c001ac82 <Sys::loadDLL(regs*)>:
c001ac82:	56                   	push   esi
c001ac83:	53                   	push   ebx
c001ac84:	31 d2                	xor    edx,edx
c001ac86:	51                   	push   ecx
c001ac87:	b8 01 00 00 00       	mov    eax,0x1
c001ac8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac90:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ac94:	0f 84 8c 00 00 00    	je     c001ad26 <Sys::loadDLL(regs*)+0xa4>
c001ac9a:	83 ec 0c             	sub    esp,0xc
c001ac9d:	68 14 01 00 00       	push   0x114
c001aca2:	e8 f2 48 ff ff       	call   c000f599 <malloc>
c001aca7:	83 c4 0c             	add    esp,0xc
c001acaa:	89 c3                	mov    ebx,eax
c001acac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acb1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acb4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001acb7:	53                   	push   ebx
c001acb8:	e8 7b 7e ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	31 d2                	xor    edx,edx
c001acc2:	b8 02 00 00 00       	mov    eax,0x2
c001acc7:	85 db                	test   ebx,ebx
c001acc9:	74 5b                	je     c001ad26 <Sys::loadDLL(regs*)+0xa4>
c001accb:	83 ec 0c             	sub    esp,0xc
c001acce:	53                   	push   ebx
c001accf:	e8 36 81 ff ff       	call   c0012e0a <File::exists()>
c001acd4:	83 c4 10             	add    esp,0x10
c001acd7:	84 c0                	test   al,al
c001acd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acdb:	75 11                	jne    c001acee <Sys::loadDLL(regs*)+0x6c>
c001acdd:	83 ec 0c             	sub    esp,0xc
c001ace0:	53                   	push   ebx
c001ace1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ace4:	83 c4 10             	add    esp,0x10
c001ace7:	b8 03 00 00 00       	mov    eax,0x3
c001acec:	eb 36                	jmp    c001ad24 <Sys::loadDLL(regs*)+0xa2>
c001acee:	83 ec 0c             	sub    esp,0xc
c001acf1:	53                   	push   ebx
c001acf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acf5:	58                   	pop    eax
c001acf6:	5a                   	pop    edx
c001acf7:	6a 00                	push   0x0
c001acf9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001acfc:	e8 0e 22 00 00       	call   c001cf0f <Thr::loadDLL(char const*, bool)>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	89 c1                	mov    ecx,eax
c001ad06:	31 d2                	xor    edx,edx
c001ad08:	b8 04 00 00 00       	mov    eax,0x4
c001ad0d:	85 c9                	test   ecx,ecx
c001ad0f:	74 15                	je     c001ad26 <Sys::loadDLL(regs*)+0xa4>
c001ad11:	53                   	push   ebx
c001ad12:	53                   	push   ebx
c001ad13:	ff 35 48 d7 02 c0    	push   DWORD PTR ds:0xc002d748
c001ad19:	51                   	push   ecx
c001ad1a:	e8 1b 24 00 00       	call   c001d13a <Thr::executeDLL(unsigned long, void*)>
c001ad1f:	83 c4 10             	add    esp,0x10
c001ad22:	31 c0                	xor    eax,eax
c001ad24:	31 d2                	xor    edx,edx
c001ad26:	59                   	pop    ecx
c001ad27:	5b                   	pop    ebx
c001ad28:	5e                   	pop    esi
c001ad29:	c3                   	ret    

c001ad2a <Sys::read(regs*)>:
c001ad2a:	57                   	push   edi
c001ad2b:	56                   	push   esi
c001ad2c:	53                   	push   ebx
c001ad2d:	83 ec 10             	sub    esp,0x10
c001ad30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad37:	83 f8 02             	cmp    eax,0x2
c001ad3a:	77 10                	ja     c001ad4c <Sys::read(regs*)+0x22>
c001ad3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad44:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ad4a:	eb 0e                	jmp    c001ad5a <Sys::read(regs*)+0x30>
c001ad4c:	83 ec 0c             	sub    esp,0xc
c001ad4f:	50                   	push   eax
c001ad50:	e8 18 63 ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	89 c1                	mov    ecx,eax
c001ad5a:	83 c8 ff             	or     eax,0xffffffff
c001ad5d:	85 c9                	test   ecx,ecx
c001ad5f:	89 c2                	mov    edx,eax
c001ad61:	74 28                	je     c001ad8b <Sys::read(regs*)+0x61>
c001ad63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad6b:	31 ff                	xor    edi,edi
c001ad6d:	83 ec 0c             	sub    esp,0xc
c001ad70:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad72:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad76:	52                   	push   edx
c001ad77:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad7a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ad7d:	57                   	push   edi
c001ad7e:	56                   	push   esi
c001ad7f:	51                   	push   ecx
c001ad80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ad83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad87:	83 c4 20             	add    esp,0x20
c001ad8a:	99                   	cdq    
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	5b                   	pop    ebx
c001ad8f:	5e                   	pop    esi
c001ad90:	5f                   	pop    edi
c001ad91:	c3                   	ret    

c001ad92 <Sys::sbrk(regs*)>:
c001ad92:	56                   	push   esi
c001ad93:	53                   	push   ebx
c001ad94:	50                   	push   eax
c001ad95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ada1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ada4:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001adaa:	85 db                	test   ebx,ebx
c001adac:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001adaf:	74 02                	je     c001adb3 <Sys::sbrk(regs*)+0x21>
c001adb1:	79 06                	jns    c001adb9 <Sys::sbrk(regs*)+0x27>
c001adb3:	89 f0                	mov    eax,esi
c001adb5:	31 d2                	xor    edx,edx
c001adb7:	eb 2a                	jmp    c001ade3 <Sys::sbrk(regs*)+0x51>
c001adb9:	83 c8 ff             	or     eax,0xffffffff
c001adbc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001adc2:	89 c2                	mov    edx,eax
c001adc4:	77 1d                	ja     c001ade3 <Sys::sbrk(regs*)+0x51>
c001adc6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001adcc:	50                   	push   eax
c001adcd:	c1 ea 0c             	shr    edx,0xc
c001add0:	68 07 0c 00 00       	push   0xc07
c001add5:	52                   	push   edx
c001add6:	51                   	push   ecx
c001add7:	e8 a6 6c ff ff       	call   c0011a82 <VAS::allocatePages(int, int)>
c001addc:	89 f0                	mov    eax,esi
c001adde:	31 d2                	xor    edx,edx
c001ade0:	83 c4 10             	add    esp,0x10
c001ade3:	59                   	pop    ecx
c001ade4:	5b                   	pop    ebx
c001ade5:	5e                   	pop    esi
c001ade6:	c3                   	ret    

c001ade7 <Sys::setCwd(regs*)>:
c001ade7:	83 ec 14             	sub    esp,0x14
c001adea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adf6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001adf9:	e8 ab 80 ff ff       	call   c0012ea9 <Fs::setcwd(Process*, char*)>
c001adfe:	83 c4 1c             	add    esp,0x1c
c001ae01:	99                   	cdq    
c001ae02:	c3                   	ret    

c001ae03 <Sys::setTime(regs*)>:
c001ae03:	55                   	push   ebp
c001ae04:	31 c9                	xor    ecx,ecx
c001ae06:	57                   	push   edi
c001ae07:	bd 0c 00 00 00       	mov    ebp,0xc
c001ae0c:	56                   	push   esi
c001ae0d:	53                   	push   ebx
c001ae0e:	31 db                	xor    ebx,ebx
c001ae10:	83 ec 10             	sub    esp,0x10
c001ae13:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae17:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ae1a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ae1d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ae20:	89 c2                	mov    edx,eax
c001ae22:	66 81 ef 6c 07       	sub    di,0x76c
c001ae27:	83 e2 1f             	and    edx,0x1f
c001ae2a:	c1 e7 10             	shl    edi,0x10
c001ae2d:	42                   	inc    edx
c001ae2e:	c1 e8 05             	shr    eax,0x5
c001ae31:	88 d1                	mov    cl,dl
c001ae33:	31 d2                	xor    edx,edx
c001ae35:	f7 f5                	div    ebp
c001ae37:	89 dd                	mov    ebp,ebx
c001ae39:	88 d5                	mov    ch,dl
c001ae3b:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ae41:	0f b7 c1             	movzx  eax,cx
c001ae44:	31 d2                	xor    edx,edx
c001ae46:	09 f8                	or     eax,edi
c001ae48:	bf 3c 00 00 00       	mov    edi,0x3c
c001ae4d:	89 c1                	mov    ecx,eax
c001ae4f:	89 f0                	mov    eax,esi
c001ae51:	f7 f7                	div    edi
c001ae53:	c1 e2 10             	shl    edx,0x10
c001ae56:	09 d5                	or     ebp,edx
c001ae58:	31 d2                	xor    edx,edx
c001ae5a:	89 eb                	mov    ebx,ebp
c001ae5c:	f7 f7                	div    edi
c001ae5e:	bf 10 0e 00 00       	mov    edi,0xe10
c001ae63:	88 d7                	mov    bh,dl
c001ae65:	89 f0                	mov    eax,esi
c001ae67:	31 d2                	xor    edx,edx
c001ae69:	f7 f7                	div    edi
c001ae6b:	bf 18 00 00 00       	mov    edi,0x18
c001ae70:	31 d2                	xor    edx,edx
c001ae72:	f7 f7                	div    edi
c001ae74:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001ae79:	88 d3                	mov    bl,dl
c001ae7b:	53                   	push   ebx
c001ae7c:	51                   	push   ecx
c001ae7d:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ae83:	e8 6a 88 ff ff       	call   c00136f2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ae88:	83 c4 1c             	add    esp,0x1c
c001ae8b:	83 f0 01             	xor    eax,0x1
c001ae8e:	5b                   	pop    ebx
c001ae8f:	0f b6 c0             	movzx  eax,al
c001ae92:	5e                   	pop    esi
c001ae93:	31 d2                	xor    edx,edx
c001ae95:	5f                   	pop    edi
c001ae96:	5d                   	pop    ebp
c001ae97:	c3                   	ret    

c001ae98 <Sys::timezone(regs*)>:
c001ae98:	53                   	push   ebx
c001ae99:	83 ec 08             	sub    esp,0x8
c001ae9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aea0:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001aea4:	75 17                	jne    c001aebd <Sys::timezone(regs*)+0x25>
c001aea6:	83 ec 0c             	sub    esp,0xc
c001aea9:	68 39 b6 02 c0       	push   0xc002b639
c001aeae:	e8 26 77 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001aeb3:	83 c8 ff             	or     eax,0xffffffff
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	89 c2                	mov    edx,eax
c001aebb:	eb 20                	jmp    c001aedd <Sys::timezone(regs*)+0x45>
c001aebd:	83 ec 0c             	sub    esp,0xc
c001aec0:	68 4e b6 02 c0       	push   0xc002b64e
c001aec5:	e8 0f 77 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001aeca:	58                   	pop    eax
c001aecb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aece:	e8 81 85 ff ff       	call   c0013454 <User::loadClockSettings(int)>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	b8 01 00 00 00       	mov    eax,0x1
c001aedb:	31 d2                	xor    edx,edx
c001aedd:	83 c4 08             	add    esp,0x8
c001aee0:	5b                   	pop    ebx
c001aee1:	c3                   	ret    

c001aee2 <Sys::write(regs*)>:
c001aee2:	57                   	push   edi
c001aee3:	56                   	push   esi
c001aee4:	53                   	push   ebx
c001aee5:	83 ec 10             	sub    esp,0x10
c001aee8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aeef:	83 f8 02             	cmp    eax,0x2
c001aef2:	77 10                	ja     c001af04 <Sys::write(regs*)+0x22>
c001aef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aef9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aefc:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af02:	eb 0e                	jmp    c001af12 <Sys::write(regs*)+0x30>
c001af04:	83 ec 0c             	sub    esp,0xc
c001af07:	50                   	push   eax
c001af08:	e8 60 61 ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001af0d:	83 c4 10             	add    esp,0x10
c001af10:	89 c1                	mov    ecx,eax
c001af12:	83 c8 ff             	or     eax,0xffffffff
c001af15:	85 c9                	test   ecx,ecx
c001af17:	89 c2                	mov    edx,eax
c001af19:	74 28                	je     c001af43 <Sys::write(regs*)+0x61>
c001af1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af23:	31 ff                	xor    edi,edi
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af2a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af2e:	52                   	push   edx
c001af2f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af32:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af35:	57                   	push   edi
c001af36:	56                   	push   esi
c001af37:	51                   	push   ecx
c001af38:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001af3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af3f:	83 c4 20             	add    esp,0x20
c001af42:	99                   	cdq    
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	5b                   	pop    ebx
c001af47:	5e                   	pop    esi
c001af48:	5f                   	pop    edi
c001af49:	c3                   	ret    

c001af4a <Sys::wsbe(regs*)>:
c001af4a:	57                   	push   edi
c001af4b:	b9 0b 00 00 00       	mov    ecx,0xb
c001af50:	56                   	push   esi
c001af51:	be 8d b6 02 c0       	mov    esi,0xc002b68d
c001af56:	53                   	push   ebx
c001af57:	83 ec 30             	sub    esp,0x30
c001af5a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001af5e:	fc                   	cld    
c001af5f:	83 ec 0c             	sub    esp,0xc
c001af62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af64:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001af68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af70:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001af76:	8b 06                	mov    eax,DWORD PTR [esi]
c001af78:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001af7b:	57                   	push   edi
c001af7c:	e8 eb 57 fe ff       	call   c000076c <strlen>
c001af81:	5a                   	pop    edx
c001af82:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001af86:	52                   	push   edx
c001af87:	31 d2                	xor    edx,edx
c001af89:	57                   	push   edi
c001af8a:	52                   	push   edx
c001af8b:	50                   	push   eax
c001af8c:	56                   	push   esi
c001af8d:	ff d3                	call   ebx
c001af8f:	83 c4 14             	add    esp,0x14
c001af92:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001af96:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001af99:	e8 d1 31 00 00       	call   c001e16f <terminateTask(int)>
c001af9e:	83 c4 40             	add    esp,0x40
c001afa1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001afa6:	5b                   	pop    ebx
c001afa7:	31 d2                	xor    edx,edx
c001afa9:	5e                   	pop    esi
c001afaa:	5f                   	pop    edi
c001afab:	c3                   	ret    

c001afac <Sys::yield(regs*)>:
c001afac:	57                   	push   edi
c001afad:	56                   	push   esi
c001afae:	53                   	push   ebx
c001afaf:	fa                   	cli    
c001afb0:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001afb6:	e8 14 29 00 00       	call   c001d8cf <schedule()>
c001afbb:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001afc0:	48                   	dec    eax
c001afc1:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001afc6:	75 01                	jne    c001afc9 <Sys::yield(regs*)+0x1d>
c001afc8:	fb                   	sti    
c001afc9:	8b 35 b0 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002ddb0
c001afcf:	8b 3d b4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002ddb4
c001afd5:	89 f0                	mov    eax,esi
c001afd7:	89 fb                	mov    ebx,edi
c001afd9:	89 f1                	mov    ecx,esi
c001afdb:	c1 e0 07             	shl    eax,0x7
c001afde:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001afe2:	25 80 30 0f 00       	and    eax,0xf3080
c001afe7:	c1 eb 17             	shr    ebx,0x17
c001afea:	31 c8                	xor    eax,ecx
c001afec:	89 da                	mov    edx,ebx
c001afee:	5b                   	pop    ebx
c001afef:	5e                   	pop    esi
c001aff0:	5f                   	pop    edi
c001aff1:	c3                   	ret    

c001aff2 <sysCallSeekDir(regs*)>:
c001aff2:	31 c0                	xor    eax,eax
c001aff4:	31 d2                	xor    edx,edx
c001aff6:	c3                   	ret    

c001aff7 <sysCallTellDir(regs*)>:
c001aff7:	31 c0                	xor    eax,eax
c001aff9:	31 d2                	xor    edx,edx
c001affb:	c3                   	ret    

c001affc <sysCallVerify(regs*)>:
c001affc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b000:	31 d2                	xor    edx,edx
c001b002:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b005:	c3                   	ret    

c001b006 <sysCallGetArgc(regs*)>:
c001b006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b00b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b00e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b014:	99                   	cdq    
c001b015:	c3                   	ret    

c001b016 <sysFormatDisk(regs*)>:
c001b016:	56                   	push   esi
c001b017:	53                   	push   ebx
c001b018:	53                   	push   ebx
c001b019:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b01d:	8b 1d b4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b4
c001b023:	eb 25                	jmp    c001b04a <sysFormatDisk(regs*)+0x34>
c001b025:	83 ec 0c             	sub    esp,0xc
c001b028:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b02b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b02d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b030:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b033:	50                   	push   eax
c001b034:	ff 34 85 40 dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd22c0]
c001b03b:	53                   	push   ebx
c001b03c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b03f:	83 c4 20             	add    esp,0x20
c001b042:	83 f8 08             	cmp    eax,0x8
c001b045:	75 12                	jne    c001b059 <sysFormatDisk(regs*)+0x43>
c001b047:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b04a:	85 db                	test   ebx,ebx
c001b04c:	75 d7                	jne    c001b025 <sysFormatDisk(regs*)+0xf>
c001b04e:	59                   	pop    ecx
c001b04f:	b8 03 00 00 00       	mov    eax,0x3
c001b054:	31 d2                	xor    edx,edx
c001b056:	5b                   	pop    ebx
c001b057:	5e                   	pop    esi
c001b058:	c3                   	ret    
c001b059:	85 c0                	test   eax,eax
c001b05b:	74 1b                	je     c001b078 <sysFormatDisk(regs*)+0x62>
c001b05d:	83 f8 09             	cmp    eax,0x9
c001b060:	74 0b                	je     c001b06d <sysFormatDisk(regs*)+0x57>
c001b062:	59                   	pop    ecx
c001b063:	b8 02 00 00 00       	mov    eax,0x2
c001b068:	31 d2                	xor    edx,edx
c001b06a:	5b                   	pop    ebx
c001b06b:	5e                   	pop    esi
c001b06c:	c3                   	ret    
c001b06d:	59                   	pop    ecx
c001b06e:	b8 01 00 00 00       	mov    eax,0x1
c001b073:	31 d2                	xor    edx,edx
c001b075:	5b                   	pop    ebx
c001b076:	5e                   	pop    esi
c001b077:	c3                   	ret    
c001b078:	59                   	pop    ecx
c001b079:	31 c0                	xor    eax,eax
c001b07b:	31 d2                	xor    edx,edx
c001b07d:	5b                   	pop    ebx
c001b07e:	5e                   	pop    esi
c001b07f:	c3                   	ret    

c001b080 <sysSetDiskVolumeLabel(regs*)>:
c001b080:	56                   	push   esi
c001b081:	53                   	push   ebx
c001b082:	53                   	push   ebx
c001b083:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b087:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b08a:	83 f8 19             	cmp    eax,0x19
c001b08d:	77 29                	ja     c001b0b8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b08f:	8b 0c 85 40 dd 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd22c0]
c001b096:	85 c9                	test   ecx,ecx
c001b098:	74 1e                	je     c001b0b8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b09a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b09d:	85 d2                	test   edx,edx
c001b09f:	74 17                	je     c001b0b8 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b0a1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b0a7:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b0a9:	52                   	push   edx
c001b0aa:	50                   	push   eax
c001b0ab:	51                   	push   ecx
c001b0ac:	53                   	push   ebx
c001b0ad:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b0b0:	83 c4 10             	add    esp,0x10
c001b0b3:	99                   	cdq    
c001b0b4:	59                   	pop    ecx
c001b0b5:	5b                   	pop    ebx
c001b0b6:	5e                   	pop    esi
c001b0b7:	c3                   	ret    
c001b0b8:	59                   	pop    ecx
c001b0b9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0be:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0c3:	5b                   	pop    ebx
c001b0c4:	5e                   	pop    esi
c001b0c5:	c3                   	ret    

c001b0c6 <sysGetDiskVolumeLabel(regs*)>:
c001b0c6:	57                   	push   edi
c001b0c7:	56                   	push   esi
c001b0c8:	53                   	push   ebx
c001b0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0cd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b0d0:	83 fa 19             	cmp    edx,0x19
c001b0d3:	77 34                	ja     c001b109 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0d5:	8b 0c 95 40 dd 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd22c0]
c001b0dc:	85 c9                	test   ecx,ecx
c001b0de:	74 29                	je     c001b109 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0e0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0e3:	85 db                	test   ebx,ebx
c001b0e5:	74 22                	je     c001b109 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0e7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b0ea:	85 c0                	test   eax,eax
c001b0ec:	74 1b                	je     c001b109 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0ee:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b0f9:	50                   	push   eax
c001b0fa:	53                   	push   ebx
c001b0fb:	52                   	push   edx
c001b0fc:	51                   	push   ecx
c001b0fd:	56                   	push   esi
c001b0fe:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b101:	83 c4 20             	add    esp,0x20
c001b104:	99                   	cdq    
c001b105:	5b                   	pop    ebx
c001b106:	5e                   	pop    esi
c001b107:	5f                   	pop    edi
c001b108:	c3                   	ret    
c001b109:	5b                   	pop    ebx
c001b10a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b10f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b114:	5e                   	pop    esi
c001b115:	5f                   	pop    edi
c001b116:	c3                   	ret    

c001b117 <sysShutdown(regs*)>:
c001b117:	83 ec 0c             	sub    esp,0xc
c001b11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b121:	85 c0                	test   eax,eax
c001b123:	74 18                	je     c001b13d <sysShutdown(regs*)+0x26>
c001b125:	83 f8 01             	cmp    eax,0x1
c001b128:	74 38                	je     c001b162 <sysShutdown(regs*)+0x4b>
c001b12a:	83 f8 02             	cmp    eax,0x2
c001b12d:	74 24                	je     c001b153 <sysShutdown(regs*)+0x3c>
c001b12f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b134:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b139:	83 c4 0c             	add    esp,0xc
c001b13c:	c3                   	ret    
c001b13d:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001b142:	8b 10                	mov    edx,DWORD PTR [eax]
c001b144:	6a 00                	push   0x0
c001b146:	6a 00                	push   0x0
c001b148:	6a 00                	push   0x0
c001b14a:	50                   	push   eax
c001b14b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b14e:	83 c4 10             	add    esp,0x10
c001b151:	eb dc                	jmp    c001b12f <sysShutdown(regs*)+0x18>
c001b153:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001b158:	8b 10                	mov    edx,DWORD PTR [eax]
c001b15a:	6a 00                	push   0x0
c001b15c:	6a 00                	push   0x0
c001b15e:	6a 01                	push   0x1
c001b160:	eb e8                	jmp    c001b14a <sysShutdown(regs*)+0x33>
c001b162:	a1 e0 fd 02 c0       	mov    eax,ds:0xc002fde0
c001b167:	85 c0                	test   eax,eax
c001b169:	74 02                	je     c001b16d <sysShutdown(regs*)+0x56>
c001b16b:	ff d0                	call   eax
c001b16d:	31 c0                	xor    eax,eax
c001b16f:	31 d2                	xor    edx,edx
c001b171:	83 c4 0c             	add    esp,0xc
c001b174:	c3                   	ret    

c001b175 <sysCallRealpath(regs*)>:
c001b175:	83 ec 0c             	sub    esp,0xc
c001b178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b17c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b17f:	85 d2                	test   edx,edx
c001b181:	74 07                	je     c001b18a <sysCallRealpath(regs*)+0x15>
c001b183:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b186:	85 c0                	test   eax,eax
c001b188:	75 0b                	jne    c001b195 <sysCallRealpath(regs*)+0x20>
c001b18a:	b8 01 00 00 00       	mov    eax,0x1
c001b18f:	31 d2                	xor    edx,edx
c001b191:	83 c4 0c             	add    esp,0xc
c001b194:	c3                   	ret    
c001b195:	51                   	push   ecx
c001b196:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b19c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b19f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b1a5:	51                   	push   ecx
c001b1a6:	52                   	push   edx
c001b1a7:	50                   	push   eax
c001b1a8:	e8 e1 77 ff ff       	call   c001298e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b1ad:	83 c4 10             	add    esp,0x10
c001b1b0:	31 c0                	xor    eax,eax
c001b1b2:	31 d2                	xor    edx,edx
c001b1b4:	83 c4 0c             	add    esp,0xc
c001b1b7:	c3                   	ret    

c001b1b8 <sysCallReadDir(regs*)>:
c001b1b8:	53                   	push   ebx
c001b1b9:	83 ec 18             	sub    esp,0x18
c001b1bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1c0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b1c3:	83 f8 02             	cmp    eax,0x2
c001b1c6:	76 60                	jbe    c001b228 <sysCallReadDir(regs*)+0x70>
c001b1c8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b1cf:	77 48                	ja     c001b219 <sysCallReadDir(regs*)+0x61>
c001b1d1:	83 ec 0c             	sub    esp,0xc
c001b1d4:	50                   	push   eax
c001b1d5:	e8 93 5e ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b1da:	83 c4 10             	add    esp,0x10
c001b1dd:	85 c0                	test   eax,eax
c001b1df:	74 38                	je     c001b219 <sysCallReadDir(regs*)+0x61>
c001b1e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1e9:	83 ec 0c             	sub    esp,0xc
c001b1ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1ee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b1f2:	51                   	push   ecx
c001b1f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1f6:	6a 00                	push   0x0
c001b1f8:	68 10 01 00 00       	push   0x110
c001b1fd:	50                   	push   eax
c001b1fe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b201:	83 c4 20             	add    esp,0x20
c001b204:	85 c0                	test   eax,eax
c001b206:	74 29                	je     c001b231 <sysCallReadDir(regs*)+0x79>
c001b208:	83 f8 07             	cmp    eax,0x7
c001b20b:	74 1b                	je     c001b228 <sysCallReadDir(regs*)+0x70>
c001b20d:	b8 02 00 00 00       	mov    eax,0x2
c001b212:	31 d2                	xor    edx,edx
c001b214:	83 c4 18             	add    esp,0x18
c001b217:	5b                   	pop    ebx
c001b218:	c3                   	ret    
c001b219:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b21e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b223:	83 c4 18             	add    esp,0x18
c001b226:	5b                   	pop    ebx
c001b227:	c3                   	ret    
c001b228:	b8 01 00 00 00       	mov    eax,0x1
c001b22d:	31 d2                	xor    edx,edx
c001b22f:	eb e3                	jmp    c001b214 <sysCallReadDir(regs*)+0x5c>
c001b231:	31 c0                	xor    eax,eax
c001b233:	31 d2                	xor    edx,edx
c001b235:	eb dd                	jmp    c001b214 <sysCallReadDir(regs*)+0x5c>

c001b237 <sysCallIsATTY(regs*)>:
c001b237:	83 ec 0c             	sub    esp,0xc
c001b23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b241:	83 f8 02             	cmp    eax,0x2
c001b244:	76 07                	jbe    c001b24d <sysCallIsATTY(regs*)+0x16>
c001b246:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b24b:	75 26                	jne    c001b273 <sysCallIsATTY(regs*)+0x3c>
c001b24d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b252:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b255:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b25b:	85 c0                	test   eax,eax
c001b25d:	74 24                	je     c001b283 <sysCallIsATTY(regs*)+0x4c>
c001b25f:	83 ec 0c             	sub    esp,0xc
c001b262:	8b 10                	mov    edx,DWORD PTR [eax]
c001b264:	50                   	push   eax
c001b265:	ff 12                	call   DWORD PTR [edx]
c001b267:	31 d2                	xor    edx,edx
c001b269:	0f b6 c0             	movzx  eax,al
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	83 c4 0c             	add    esp,0xc
c001b272:	c3                   	ret    
c001b273:	83 ec 0c             	sub    esp,0xc
c001b276:	50                   	push   eax
c001b277:	e8 f1 5d ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	85 c0                	test   eax,eax
c001b281:	75 dc                	jne    c001b25f <sysCallIsATTY(regs*)+0x28>
c001b283:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b288:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b28d:	83 c4 0c             	add    esp,0xc
c001b290:	c3                   	ret    

c001b291 <sysCallSeek(regs*)>:
c001b291:	53                   	push   ebx
c001b292:	83 ec 08             	sub    esp,0x8
c001b295:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b299:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b29c:	8d 50 fd             	lea    edx,[eax-0x3]
c001b29f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b2a5:	77 32                	ja     c001b2d9 <sysCallSeek(regs*)+0x48>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	50                   	push   eax
c001b2ab:	e8 bd 5d ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b2b0:	83 c4 0c             	add    esp,0xc
c001b2b3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b2b6:	31 db                	xor    ebx,ebx
c001b2b8:	53                   	push   ebx
c001b2b9:	51                   	push   ecx
c001b2ba:	50                   	push   eax
c001b2bb:	e8 9a 79 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001b2c0:	83 c4 10             	add    esp,0x10
c001b2c3:	85 c0                	test   eax,eax
c001b2c5:	0f 95 c0             	setne  al
c001b2c8:	31 d2                	xor    edx,edx
c001b2ca:	0f b6 c0             	movzx  eax,al
c001b2cd:	f7 d8                	neg    eax
c001b2cf:	83 d2 00             	adc    edx,0x0
c001b2d2:	83 c4 08             	add    esp,0x8
c001b2d5:	f7 da                	neg    edx
c001b2d7:	5b                   	pop    ebx
c001b2d8:	c3                   	ret    
c001b2d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2de:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2e3:	83 c4 08             	add    esp,0x8
c001b2e6:	5b                   	pop    ebx
c001b2e7:	c3                   	ret    

c001b2e8 <sysCallTell(regs*)>:
c001b2e8:	53                   	push   ebx
c001b2e9:	83 ec 08             	sub    esp,0x8
c001b2ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2f3:	83 f8 02             	cmp    eax,0x2
c001b2f6:	76 4d                	jbe    c001b345 <sysCallTell(regs*)+0x5d>
c001b2f8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b2fd:	76 19                	jbe    c001b318 <sysCallTell(regs*)+0x30>
c001b2ff:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b302:	31 d2                	xor    edx,edx
c001b304:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b30a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b311:	31 c0                	xor    eax,eax
c001b313:	83 c4 08             	add    esp,0x8
c001b316:	5b                   	pop    ebx
c001b317:	c3                   	ret    
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	50                   	push   eax
c001b31c:	e8 4c 5d ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b321:	5a                   	pop    edx
c001b322:	59                   	pop    ecx
c001b323:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b326:	50                   	push   eax
c001b327:	e8 84 79 ff ff       	call   c0012cb0 <File::tell(unsigned long long*)>
c001b32c:	83 c4 10             	add    esp,0x10
c001b32f:	85 c0                	test   eax,eax
c001b331:	0f 95 c0             	setne  al
c001b334:	31 d2                	xor    edx,edx
c001b336:	0f b6 c0             	movzx  eax,al
c001b339:	f7 d8                	neg    eax
c001b33b:	83 d2 00             	adc    edx,0x0
c001b33e:	83 c4 08             	add    esp,0x8
c001b341:	f7 da                	neg    edx
c001b343:	5b                   	pop    ebx
c001b344:	c3                   	ret    
c001b345:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b34a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b34f:	83 c4 08             	add    esp,0x8
c001b352:	5b                   	pop    ebx
c001b353:	c3                   	ret    

c001b354 <sysCallSize(regs*)>:
c001b354:	53                   	push   ebx
c001b355:	83 ec 18             	sub    esp,0x18
c001b358:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b35c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b35f:	83 f8 02             	cmp    eax,0x2
c001b362:	76 53                	jbe    c001b3b7 <sysCallSize(regs*)+0x63>
c001b364:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b369:	76 19                	jbe    c001b384 <sysCallSize(regs*)+0x30>
c001b36b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b36e:	31 d2                	xor    edx,edx
c001b370:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b376:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b37d:	31 c0                	xor    eax,eax
c001b37f:	83 c4 18             	add    esp,0x18
c001b382:	5b                   	pop    ebx
c001b383:	c3                   	ret    
c001b384:	83 ec 0c             	sub    esp,0xc
c001b387:	50                   	push   eax
c001b388:	e8 e0 5c ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b38d:	83 c4 0c             	add    esp,0xc
c001b390:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b394:	52                   	push   edx
c001b395:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b398:	50                   	push   eax
c001b399:	e8 aa 7a ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c001b39e:	83 c4 10             	add    esp,0x10
c001b3a1:	85 c0                	test   eax,eax
c001b3a3:	0f 95 c0             	setne  al
c001b3a6:	31 d2                	xor    edx,edx
c001b3a8:	0f b6 c0             	movzx  eax,al
c001b3ab:	f7 d8                	neg    eax
c001b3ad:	83 d2 00             	adc    edx,0x0
c001b3b0:	83 c4 18             	add    esp,0x18
c001b3b3:	f7 da                	neg    edx
c001b3b5:	5b                   	pop    ebx
c001b3b6:	c3                   	ret    
c001b3b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3c1:	83 c4 18             	add    esp,0x18
c001b3c4:	5b                   	pop    ebx
c001b3c5:	c3                   	ret    

c001b3c6 <sysCallSizeFromFilename(regs*)>:
c001b3c6:	57                   	push   edi
c001b3c7:	56                   	push   esi
c001b3c8:	53                   	push   ebx
c001b3c9:	83 ec 20             	sub    esp,0x20
c001b3cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3d0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b3d3:	83 fb 02             	cmp    ebx,0x2
c001b3d6:	0f 86 88 00 00 00    	jbe    c001b464 <sysCallSizeFromFilename(regs*)+0x9e>
c001b3dc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b3e2:	76 1b                	jbe    c001b3ff <sysCallSizeFromFilename(regs*)+0x39>
c001b3e4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b3e7:	31 d2                	xor    edx,edx
c001b3e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3f6:	83 c4 20             	add    esp,0x20
c001b3f9:	31 c0                	xor    eax,eax
c001b3fb:	5b                   	pop    ebx
c001b3fc:	5e                   	pop    esi
c001b3fd:	5f                   	pop    edi
c001b3fe:	c3                   	ret    
c001b3ff:	83 ec 0c             	sub    esp,0xc
c001b402:	68 14 01 00 00       	push   0x114
c001b407:	e8 8d 41 ff ff       	call   c000f599 <malloc>
c001b40c:	83 c4 0c             	add    esp,0xc
c001b40f:	89 c7                	mov    edi,eax
c001b411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b416:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b419:	53                   	push   ebx
c001b41a:	57                   	push   edi
c001b41b:	e8 18 77 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001b420:	83 c4 0c             	add    esp,0xc
c001b423:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b427:	50                   	push   eax
c001b428:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b42b:	57                   	push   edi
c001b42c:	e8 17 7a ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c001b431:	83 c4 10             	add    esp,0x10
c001b434:	85 ff                	test   edi,edi
c001b436:	74 14                	je     c001b44c <sysCallSizeFromFilename(regs*)+0x86>
c001b438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b43c:	8b 17                	mov    edx,DWORD PTR [edi]
c001b43e:	83 ec 0c             	sub    esp,0xc
c001b441:	57                   	push   edi
c001b442:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b44c:	85 c0                	test   eax,eax
c001b44e:	0f 95 c0             	setne  al
c001b451:	31 d2                	xor    edx,edx
c001b453:	0f b6 c0             	movzx  eax,al
c001b456:	f7 d8                	neg    eax
c001b458:	83 d2 00             	adc    edx,0x0
c001b45b:	83 c4 20             	add    esp,0x20
c001b45e:	f7 da                	neg    edx
c001b460:	5b                   	pop    ebx
c001b461:	5e                   	pop    esi
c001b462:	5f                   	pop    edi
c001b463:	c3                   	ret    
c001b464:	83 c4 20             	add    esp,0x20
c001b467:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b46c:	5b                   	pop    ebx
c001b46d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b472:	5e                   	pop    esi
c001b473:	5f                   	pop    edi
c001b474:	c3                   	ret    

c001b475 <sysCallClose(regs*)>:
c001b475:	53                   	push   ebx
c001b476:	83 ec 08             	sub    esp,0x8
c001b479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b47d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b480:	83 f8 02             	cmp    eax,0x2
c001b483:	76 41                	jbe    c001b4c6 <sysCallClose(regs*)+0x51>
c001b485:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b48b:	83 fa 01             	cmp    edx,0x1
c001b48e:	76 2d                	jbe    c001b4bd <sysCallClose(regs*)+0x48>
c001b490:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b495:	77 2f                	ja     c001b4c6 <sysCallClose(regs*)+0x51>
c001b497:	83 ec 0c             	sub    esp,0xc
c001b49a:	50                   	push   eax
c001b49b:	e8 cd 5b ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b4a0:	89 c3                	mov    ebx,eax
c001b4a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4a5:	e8 50 77 ff ff       	call   c0012bfa <File::close()>
c001b4aa:	83 c4 10             	add    esp,0x10
c001b4ad:	85 db                	test   ebx,ebx
c001b4af:	74 0c                	je     c001b4bd <sysCallClose(regs*)+0x48>
c001b4b1:	83 ec 0c             	sub    esp,0xc
c001b4b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4b6:	53                   	push   ebx
c001b4b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	31 c0                	xor    eax,eax
c001b4bf:	31 d2                	xor    edx,edx
c001b4c1:	83 c4 08             	add    esp,0x8
c001b4c4:	5b                   	pop    ebx
c001b4c5:	c3                   	ret    
c001b4c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4d0:	83 c4 08             	add    esp,0x8
c001b4d3:	5b                   	pop    ebx
c001b4d4:	c3                   	ret    

c001b4d5 <sysCallOpenDir(regs*)>:
c001b4d5:	56                   	push   esi
c001b4d6:	53                   	push   ebx
c001b4d7:	53                   	push   ebx
c001b4d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b4df:	85 f6                	test   esi,esi
c001b4e1:	74 59                	je     c001b53c <sysCallOpenDir(regs*)+0x67>
c001b4e3:	83 ec 0c             	sub    esp,0xc
c001b4e6:	68 14 01 00 00       	push   0x114
c001b4eb:	e8 a9 40 ff ff       	call   c000f599 <malloc>
c001b4f0:	83 c4 0c             	add    esp,0xc
c001b4f3:	89 c6                	mov    esi,eax
c001b4f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b500:	56                   	push   esi
c001b501:	e8 de 7a ff ff       	call   c0012fe4 <Directory::Directory(char const*, Process*)>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	85 f6                	test   esi,esi
c001b50b:	74 2f                	je     c001b53c <sysCallOpenDir(regs*)+0x67>
c001b50d:	83 ec 0c             	sub    esp,0xc
c001b510:	56                   	push   esi
c001b511:	e8 32 7b ff ff       	call   c0013048 <Directory::open()>
c001b516:	83 c4 10             	add    esp,0x10
c001b519:	85 c0                	test   eax,eax
c001b51b:	75 1f                	jne    c001b53c <sysCallOpenDir(regs*)+0x67>
c001b51d:	83 ec 0c             	sub    esp,0xc
c001b520:	56                   	push   esi
c001b521:	e8 52 58 ff ff       	call   c0010d78 <UnixFile::getFileDescriptor()>
c001b526:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b529:	83 c4 10             	add    esp,0x10
c001b52c:	89 02                	mov    DWORD PTR [edx],eax
c001b52e:	c1 f8 1f             	sar    eax,0x1f
c001b531:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b534:	31 c0                	xor    eax,eax
c001b536:	59                   	pop    ecx
c001b537:	31 d2                	xor    edx,edx
c001b539:	5b                   	pop    ebx
c001b53a:	5e                   	pop    esi
c001b53b:	c3                   	ret    
c001b53c:	59                   	pop    ecx
c001b53d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b542:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b547:	5b                   	pop    ebx
c001b548:	5e                   	pop    esi
c001b549:	c3                   	ret    

c001b54a <sysCallCloseDir(regs*)>:
c001b54a:	53                   	push   ebx
c001b54b:	83 ec 08             	sub    esp,0x8
c001b54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b552:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b555:	8d 50 fd             	lea    edx,[eax-0x3]
c001b558:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b55e:	77 2f                	ja     c001b58f <sysCallCloseDir(regs*)+0x45>
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	50                   	push   eax
c001b564:	e8 04 5b ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b569:	89 c3                	mov    ebx,eax
c001b56b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b56e:	e8 31 7b ff ff       	call   c00130a4 <Directory::close()>
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	85 db                	test   ebx,ebx
c001b578:	74 0c                	je     c001b586 <sysCallCloseDir(regs*)+0x3c>
c001b57a:	83 ec 0c             	sub    esp,0xc
c001b57d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b57f:	53                   	push   ebx
c001b580:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b583:	83 c4 10             	add    esp,0x10
c001b586:	31 c0                	xor    eax,eax
c001b588:	31 d2                	xor    edx,edx
c001b58a:	83 c4 08             	add    esp,0x8
c001b58d:	5b                   	pop    ebx
c001b58e:	c3                   	ret    
c001b58f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b594:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b599:	83 c4 08             	add    esp,0x8
c001b59c:	5b                   	pop    ebx
c001b59d:	c3                   	ret    

c001b59e <sysCallMakeDir(regs*)>:
c001b59e:	56                   	push   esi
c001b59f:	53                   	push   ebx
c001b5a0:	83 ec 10             	sub    esp,0x10
c001b5a3:	68 14 01 00 00       	push   0x114
c001b5a8:	e8 ec 3f ff ff       	call   c000f599 <malloc>
c001b5ad:	83 c4 0c             	add    esp,0xc
c001b5b0:	89 c3                	mov    ebx,eax
c001b5b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5be:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5c1:	53                   	push   ebx
c001b5c2:	e8 1d 7a ff ff       	call   c0012fe4 <Directory::Directory(char const*, Process*)>
c001b5c7:	83 c4 10             	add    esp,0x10
c001b5ca:	85 db                	test   ebx,ebx
c001b5cc:	74 32                	je     c001b600 <sysCallMakeDir(regs*)+0x62>
c001b5ce:	83 ec 0c             	sub    esp,0xc
c001b5d1:	53                   	push   ebx
c001b5d2:	e8 51 7c ff ff       	call   c0013228 <Directory::create()>
c001b5d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5da:	89 c6                	mov    esi,eax
c001b5dc:	e8 c3 7a ff ff       	call   c00130a4 <Directory::close()>
c001b5e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5e9:	83 c4 10             	add    esp,0x10
c001b5ec:	31 c0                	xor    eax,eax
c001b5ee:	59                   	pop    ecx
c001b5ef:	85 f6                	test   esi,esi
c001b5f1:	5b                   	pop    ebx
c001b5f2:	0f 95 c0             	setne  al
c001b5f5:	5e                   	pop    esi
c001b5f6:	31 d2                	xor    edx,edx
c001b5f8:	f7 d8                	neg    eax
c001b5fa:	83 d2 00             	adc    edx,0x0
c001b5fd:	f7 da                	neg    edx
c001b5ff:	c3                   	ret    
c001b600:	59                   	pop    ecx
c001b601:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b606:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b60b:	5b                   	pop    ebx
c001b60c:	5e                   	pop    esi
c001b60d:	c3                   	ret    

c001b60e <sysCallWait(regs*)>:
c001b60e:	83 ec 10             	sub    esp,0x10
c001b611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b615:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b618:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b61b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b61e:	e8 af 24 00 00       	call   c001dad2 <waitTask(int, int*, int)>
c001b623:	83 c4 1c             	add    esp,0x1c
c001b626:	99                   	cdq    
c001b627:	c3                   	ret    

c001b628 <sysCallNotImpl(regs*)>:
c001b628:	83 ec 18             	sub    esp,0x18
c001b62b:	68 b9 b6 02 c0       	push   0xc002b6b9
c001b630:	e8 10 e7 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001b635:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b63a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b63f:	83 c4 1c             	add    esp,0x1c
c001b642:	c3                   	ret    

c001b643 <sysPanic(regs*)>:
c001b643:	83 ec 18             	sub    esp,0x18
c001b646:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b64a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b64d:	e8 f3 e6 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001b652:	b8 01 00 00 00       	mov    eax,0x1
c001b657:	31 d2                	xor    edx,edx
c001b659:	83 c4 1c             	add    esp,0x1c
c001b65c:	c3                   	ret    

c001b65d <sysCallRmdir(regs*)>:
c001b65d:	56                   	push   esi
c001b65e:	53                   	push   ebx
c001b65f:	83 ec 20             	sub    esp,0x20
c001b662:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b666:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b669:	68 14 01 00 00       	push   0x114
c001b66e:	e8 26 3f ff ff       	call   c000f599 <malloc>
c001b673:	83 c4 0c             	add    esp,0xc
c001b676:	89 c3                	mov    ebx,eax
c001b678:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b67d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b680:	56                   	push   esi
c001b681:	53                   	push   ebx
c001b682:	e8 b1 74 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001b687:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b68a:	e8 85 76 ff ff       	call   c0012d14 <File::unlink()>
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	85 db                	test   ebx,ebx
c001b694:	74 14                	je     c001b6aa <sysCallRmdir(regs*)+0x4d>
c001b696:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b69a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b69c:	83 ec 0c             	sub    esp,0xc
c001b69f:	53                   	push   ebx
c001b6a0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6a3:	83 c4 10             	add    esp,0x10
c001b6a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6aa:	85 c0                	test   eax,eax
c001b6ac:	0f 95 c0             	setne  al
c001b6af:	31 d2                	xor    edx,edx
c001b6b1:	0f b6 c0             	movzx  eax,al
c001b6b4:	f7 d8                	neg    eax
c001b6b6:	83 d2 00             	adc    edx,0x0
c001b6b9:	83 c4 14             	add    esp,0x14
c001b6bc:	f7 da                	neg    edx
c001b6be:	5b                   	pop    ebx
c001b6bf:	5e                   	pop    esi
c001b6c0:	c3                   	ret    

c001b6c1 <sysCallUnlink(regs*)>:
c001b6c1:	56                   	push   esi
c001b6c2:	53                   	push   ebx
c001b6c3:	83 ec 20             	sub    esp,0x20
c001b6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6ca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b6cd:	68 14 01 00 00       	push   0x114
c001b6d2:	e8 c2 3e ff ff       	call   c000f599 <malloc>
c001b6d7:	83 c4 0c             	add    esp,0xc
c001b6da:	89 c3                	mov    ebx,eax
c001b6dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6e4:	56                   	push   esi
c001b6e5:	53                   	push   ebx
c001b6e6:	e8 4d 74 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001b6eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6ee:	e8 21 76 ff ff       	call   c0012d14 <File::unlink()>
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	85 db                	test   ebx,ebx
c001b6f8:	74 14                	je     c001b70e <sysCallUnlink(regs*)+0x4d>
c001b6fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b700:	83 ec 0c             	sub    esp,0xc
c001b703:	53                   	push   ebx
c001b704:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b70e:	85 c0                	test   eax,eax
c001b710:	0f 95 c0             	setne  al
c001b713:	31 d2                	xor    edx,edx
c001b715:	0f b6 c0             	movzx  eax,al
c001b718:	f7 d8                	neg    eax
c001b71a:	83 d2 00             	adc    edx,0x0
c001b71d:	83 c4 14             	add    esp,0x14
c001b720:	f7 da                	neg    edx
c001b722:	5b                   	pop    ebx
c001b723:	5e                   	pop    esi
c001b724:	c3                   	ret    

c001b725 <sysCallGetArgv(regs*)>:
c001b725:	83 ec 0c             	sub    esp,0xc
c001b728:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b72c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b72f:	85 c0                	test   eax,eax
c001b731:	78 2b                	js     c001b75e <sysCallGetArgv(regs*)+0x39>
c001b733:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b739:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b73c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b742:	7d 1a                	jge    c001b75e <sysCallGetArgv(regs*)+0x39>
c001b744:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b74b:	85 c0                	test   eax,eax
c001b74d:	74 17                	je     c001b766 <sysCallGetArgv(regs*)+0x41>
c001b74f:	83 ec 08             	sub    esp,0x8
c001b752:	50                   	push   eax
c001b753:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b756:	e8 b1 50 fe ff       	call   c000080c <strcpy>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	31 c0                	xor    eax,eax
c001b760:	31 d2                	xor    edx,edx
c001b762:	83 c4 0c             	add    esp,0xc
c001b765:	c3                   	ret    
c001b766:	b8 01 00 00 00       	mov    eax,0x1
c001b76b:	31 d2                	xor    edx,edx
c001b76d:	83 c4 0c             	add    esp,0xc
c001b770:	c3                   	ret    

c001b771 <sysCallTTYName(regs*)>:
c001b771:	56                   	push   esi
c001b772:	53                   	push   ebx
c001b773:	53                   	push   ebx
c001b774:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b778:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b77b:	85 c0                	test   eax,eax
c001b77d:	74 5f                	je     c001b7de <sysCallTTYName(regs*)+0x6d>
c001b77f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b782:	83 f8 02             	cmp    eax,0x2
c001b785:	77 3e                	ja     c001b7c5 <sysCallTTYName(regs*)+0x54>
c001b787:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b78c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b78f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b795:	85 db                	test   ebx,ebx
c001b797:	74 45                	je     c001b7de <sysCallTTYName(regs*)+0x6d>
c001b799:	83 ec 0c             	sub    esp,0xc
c001b79c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b79e:	53                   	push   ebx
c001b79f:	ff 10                	call   DWORD PTR [eax]
c001b7a1:	83 c4 10             	add    esp,0x10
c001b7a4:	84 c0                	test   al,al
c001b7a6:	74 41                	je     c001b7e9 <sysCallTTYName(regs*)+0x78>
c001b7a8:	83 ec 08             	sub    esp,0x8
c001b7ab:	81 c3 82 00 00 00    	add    ebx,0x82
c001b7b1:	53                   	push   ebx
c001b7b2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7b5:	e8 52 50 fe ff       	call   c000080c <strcpy>
c001b7ba:	83 c4 10             	add    esp,0x10
c001b7bd:	31 c0                	xor    eax,eax
c001b7bf:	59                   	pop    ecx
c001b7c0:	31 d2                	xor    edx,edx
c001b7c2:	5b                   	pop    ebx
c001b7c3:	5e                   	pop    esi
c001b7c4:	c3                   	ret    
c001b7c5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7ca:	74 bb                	je     c001b787 <sysCallTTYName(regs*)+0x16>
c001b7cc:	83 ec 0c             	sub    esp,0xc
c001b7cf:	50                   	push   eax
c001b7d0:	e8 98 58 ff ff       	call   c001106d <getFromFileDescriptor(int)>
c001b7d5:	83 c4 10             	add    esp,0x10
c001b7d8:	89 c3                	mov    ebx,eax
c001b7da:	85 db                	test   ebx,ebx
c001b7dc:	75 bb                	jne    c001b799 <sysCallTTYName(regs*)+0x28>
c001b7de:	59                   	pop    ecx
c001b7df:	b8 01 00 00 00       	mov    eax,0x1
c001b7e4:	31 d2                	xor    edx,edx
c001b7e6:	5b                   	pop    ebx
c001b7e7:	5e                   	pop    esi
c001b7e8:	c3                   	ret    
c001b7e9:	59                   	pop    ecx
c001b7ea:	b8 02 00 00 00       	mov    eax,0x2
c001b7ef:	31 d2                	xor    edx,edx
c001b7f1:	5b                   	pop    ebx
c001b7f2:	5e                   	pop    esi
c001b7f3:	c3                   	ret    

c001b7f4 <sysCallUSleep(regs*)>:
c001b7f4:	83 ec 14             	sub    esp,0x14
c001b7f7:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b7fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b800:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b807:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b80a:	01 ca                	add    edx,ecx
c001b80c:	52                   	push   edx
c001b80d:	50                   	push   eax
c001b80e:	e8 96 23 00 00       	call   c001dba9 <nanoSleep(unsigned long long)>
c001b813:	31 c0                	xor    eax,eax
c001b815:	31 d2                	xor    edx,edx
c001b817:	83 c4 1c             	add    esp,0x1c
c001b81a:	c3                   	ret    

c001b81b <sysCallSpawn(regs*)>:
c001b81b:	56                   	push   esi
c001b81c:	53                   	push   ebx
c001b81d:	50                   	push   eax
c001b81e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b822:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b825:	85 c0                	test   eax,eax
c001b827:	75 08                	jne    c001b831 <sysCallSpawn(regs*)+0x16>
c001b829:	59                   	pop    ecx
c001b82a:	31 c0                	xor    eax,eax
c001b82c:	31 d2                	xor    edx,edx
c001b82e:	5b                   	pop    ebx
c001b82f:	5e                   	pop    esi
c001b830:	c3                   	ret    
c001b831:	83 ec 0c             	sub    esp,0xc
c001b834:	68 3f 07 00 00       	push   0x73f
c001b839:	e8 5b 3d ff ff       	call   c000f599 <malloc>
c001b83e:	83 c4 10             	add    esp,0x10
c001b841:	89 c6                	mov    esi,eax
c001b843:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b846:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b849:	85 c0                	test   eax,eax
c001b84b:	75 32                	jne    c001b87f <sysCallSpawn(regs*)+0x64>
c001b84d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b852:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b855:	52                   	push   edx
c001b856:	50                   	push   eax
c001b857:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b85a:	56                   	push   esi
c001b85b:	e8 6e 1a 00 00       	call   c001d2ce <Process::Process(char const*, Process*, char**)>
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b86a:	75 bd                	jne    c001b829 <sysCallSpawn(regs*)+0xe>
c001b86c:	83 ec 0c             	sub    esp,0xc
c001b86f:	56                   	push   esi
c001b870:	e8 3b 1f 00 00       	call   c001d7b0 <Process::createUserThread()>
c001b875:	8b 06                	mov    eax,DWORD PTR [esi]
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	99                   	cdq    
c001b87b:	59                   	pop    ecx
c001b87c:	5b                   	pop    ebx
c001b87d:	5e                   	pop    esi
c001b87e:	c3                   	ret    
c001b87f:	31 c0                	xor    eax,eax
c001b881:	eb d2                	jmp    c001b855 <sysCallSpawn(regs*)+0x3a>

c001b883 <sysCallGetEnv(regs*)>:
c001b883:	57                   	push   edi
c001b884:	56                   	push   esi
c001b885:	53                   	push   ebx
c001b886:	83 ec 1c             	sub    esp,0x1c
c001b889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b88d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b892:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b895:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b898:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b89b:	e8 f1 e3 ff ff       	call   c0019c91 <Krnl::getProcessTotalEnvCount(Process*)>
c001b8a0:	83 c4 10             	add    esp,0x10
c001b8a3:	39 c7                	cmp    edi,eax
c001b8a5:	7c 14                	jl     c001b8bb <sysCallGetEnv(regs*)+0x38>
c001b8a7:	85 f6                	test   esi,esi
c001b8a9:	75 0b                	jne    c001b8b6 <sysCallGetEnv(regs*)+0x33>
c001b8ab:	83 c4 10             	add    esp,0x10
c001b8ae:	31 c0                	xor    eax,eax
c001b8b0:	5b                   	pop    ebx
c001b8b1:	31 d2                	xor    edx,edx
c001b8b3:	5e                   	pop    esi
c001b8b4:	5f                   	pop    edi
c001b8b5:	c3                   	ret    
c001b8b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8b9:	eb f0                	jmp    c001b8ab <sysCallGetEnv(regs*)+0x28>
c001b8bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8bf:	52                   	push   edx
c001b8c0:	57                   	push   edi
c001b8c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8c7:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b8ca:	50                   	push   eax
c001b8cb:	e8 e1 e3 ff ff       	call   c0019cb1 <Krnl::getProcessEnvPair(Process*, int)>
c001b8d0:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8db:	83 c4 0c             	add    esp,0xc
c001b8de:	85 c9                	test   ecx,ecx
c001b8e0:	75 23                	jne    c001b905 <sysCallGetEnv(regs*)+0x82>
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	50                   	push   eax
c001b8e6:	e8 81 4e fe ff       	call   c000076c <strlen>
c001b8eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b8ee:	89 c3                	mov    ebx,eax
c001b8f0:	e8 77 4e fe ff       	call   c000076c <strlen>
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	31 d2                	xor    edx,edx
c001b901:	5b                   	pop    ebx
c001b902:	5e                   	pop    esi
c001b903:	5f                   	pop    edi
c001b904:	c3                   	ret    
c001b905:	83 ec 08             	sub    esp,0x8
c001b908:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b90b:	50                   	push   eax
c001b90c:	56                   	push   esi
c001b90d:	e8 fa 4e fe ff       	call   c000080c <strcpy>
c001b912:	58                   	pop    eax
c001b913:	5a                   	pop    edx
c001b914:	68 d3 b6 02 c0       	push   0xc002b6d3
c001b919:	56                   	push   esi
c001b91a:	e8 2d 50 fe ff       	call   c000094c <strcat>
c001b91f:	59                   	pop    ecx
c001b920:	5b                   	pop    ebx
c001b921:	57                   	push   edi
c001b922:	56                   	push   esi
c001b923:	e8 24 50 fe ff       	call   c000094c <strcat>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	e9 7b ff ff ff       	jmp    c001b8ab <sysCallGetEnv(regs*)+0x28>

c001b930 <sysAppSettings(regs*)>:
c001b930:	57                   	push   edi
c001b931:	56                   	push   esi
c001b932:	56                   	push   esi
c001b933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b937:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b93a:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b940:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b945:	66 3d c0 09          	cmp    ax,0x9c0
c001b949:	75 2e                	jne    c001b979 <sysAppSettings(regs*)+0x49>
c001b94b:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b951:	83 e0 1f             	and    eax,0x1f
c001b954:	3c 01                	cmp    al,0x1
c001b956:	74 2c                	je     c001b984 <sysAppSettings(regs*)+0x54>
c001b958:	3c 07                	cmp    al,0x7
c001b95a:	0f 84 b3 00 00 00    	je     c001ba13 <sysAppSettings(regs*)+0xe3>
c001b960:	84 c0                	test   al,al
c001b962:	0f 84 d2 00 00 00    	je     c001ba3a <sysAppSettings(regs*)+0x10a>
c001b968:	3c 08                	cmp    al,0x8
c001b96a:	74 63                	je     c001b9cf <sysAppSettings(regs*)+0x9f>
c001b96c:	59                   	pop    ecx
c001b96d:	0f b6 c0             	movzx  eax,al
c001b970:	5e                   	pop    esi
c001b971:	05 e8 03 00 00       	add    eax,0x3e8
c001b976:	5f                   	pop    edi
c001b977:	99                   	cdq    
c001b978:	c3                   	ret    
c001b979:	b8 01 00 00 00       	mov    eax,0x1
c001b97e:	59                   	pop    ecx
c001b97f:	31 d2                	xor    edx,edx
c001b981:	5e                   	pop    esi
c001b982:	5f                   	pop    edi
c001b983:	c3                   	ret    
c001b984:	50                   	push   eax
c001b985:	68 00 01 00 00       	push   0x100
c001b98a:	6a 00                	push   0x0
c001b98c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b991:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b994:	83 c0 0c             	add    eax,0xc
c001b997:	50                   	push   eax
c001b998:	e8 b3 4d fe ff       	call   c0000750 <memset>
c001b99d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a2:	b9 ff 00 00 00       	mov    ecx,0xff
c001b9a7:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b9aa:	83 c7 0c             	add    edi,0xc
c001b9ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b9af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b4:	5a                   	pop    edx
c001b9b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9b8:	59                   	pop    ecx
c001b9b9:	8d 50 0c             	lea    edx,[eax+0xc]
c001b9bc:	52                   	push   edx
c001b9bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9c3:	e8 d0 47 ff ff       	call   c0010198 <VgaText::setTitle(char*)>
c001b9c8:	83 c4 10             	add    esp,0x10
c001b9cb:	31 c0                	xor    eax,eax
c001b9cd:	eb af                	jmp    c001b97e <sysAppSettings(regs*)+0x4e>
c001b9cf:	83 ec 08             	sub    esp,0x8
c001b9d2:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9d8:	83 e0 0f             	and    eax,0xf
c001b9db:	50                   	push   eax
c001b9dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9ea:	e8 99 47 ff ff       	call   c0010188 <VgaText::setTitleColour(VgaColour)>
c001b9ef:	5f                   	pop    edi
c001b9f0:	58                   	pop    eax
c001b9f1:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9f7:	c1 e8 04             	shr    eax,0x4
c001b9fa:	83 e0 0f             	and    eax,0xf
c001b9fd:	50                   	push   eax
c001b9fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba0c:	e8 67 47 ff ff       	call   c0010178 <VgaText::setTitleTextColour(VgaColour)>
c001ba11:	eb b5                	jmp    c001b9c8 <sysAppSettings(regs*)+0x98>
c001ba13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba1b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ba21:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001ba27:	c0 e8 06             	shr    al,0x6
c001ba2a:	83 e0 01             	and    eax,0x1
c001ba2d:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001ba33:	31 c0                	xor    eax,eax
c001ba35:	e9 44 ff ff ff       	jmp    c001b97e <sysAppSettings(regs*)+0x4e>
c001ba3a:	b8 02 00 00 00       	mov    eax,0x2
c001ba3f:	e9 3a ff ff ff       	jmp    c001b97e <sysAppSettings(regs*)+0x4e>

c001ba44 <sysSetFatAttrib(regs*)>:
c001ba44:	57                   	push   edi
c001ba45:	56                   	push   esi
c001ba46:	53                   	push   ebx
c001ba47:	83 ec 1c             	sub    esp,0x1c
c001ba4a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ba4e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001ba51:	68 14 01 00 00       	push   0x114
c001ba56:	e8 3e 3b ff ff       	call   c000f599 <malloc>
c001ba5b:	83 c4 0c             	add    esp,0xc
c001ba5e:	89 c3                	mov    ebx,eax
c001ba60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba65:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba68:	57                   	push   edi
c001ba69:	53                   	push   ebx
c001ba6a:	e8 c9 70 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001ba6f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba72:	83 c4 0c             	add    esp,0xc
c001ba75:	0f b6 d4             	movzx  edx,ah
c001ba78:	0f b6 c0             	movzx  eax,al
c001ba7b:	52                   	push   edx
c001ba7c:	50                   	push   eax
c001ba7d:	53                   	push   ebx
c001ba7e:	e8 2b 73 ff ff       	call   c0012dae <File::chfatattr(unsigned char, unsigned char)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	85 db                	test   ebx,ebx
c001ba88:	74 14                	je     c001ba9e <sysSetFatAttrib(regs*)+0x5a>
c001ba8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba90:	83 ec 0c             	sub    esp,0xc
c001ba93:	53                   	push   ebx
c001ba94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba97:	83 c4 10             	add    esp,0x10
c001ba9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba9e:	85 c0                	test   eax,eax
c001baa0:	0f 95 c0             	setne  al
c001baa3:	31 d2                	xor    edx,edx
c001baa5:	0f b6 c0             	movzx  eax,al
c001baa8:	f7 d8                	neg    eax
c001baaa:	83 d2 00             	adc    edx,0x0
c001baad:	83 c4 10             	add    esp,0x10
c001bab0:	f7 da                	neg    edx
c001bab2:	5b                   	pop    ebx
c001bab3:	5e                   	pop    esi
c001bab4:	5f                   	pop    edi
c001bab5:	c3                   	ret    

c001bab6 <sysPipe(regs*)>:
c001bab6:	57                   	push   edi
c001bab7:	56                   	push   esi
c001bab8:	53                   	push   ebx
c001bab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babd:	83 ec 0c             	sub    esp,0xc
c001bac0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bac3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bac6:	6a 20                	push   0x20
c001bac8:	e8 cc 3a ff ff       	call   c000f599 <malloc>
c001bacd:	89 c3                	mov    ebx,eax
c001bacf:	58                   	pop    eax
c001bad0:	5a                   	pop    edx
c001bad1:	68 00 50 00 00       	push   0x5000
c001bad6:	53                   	push   ebx
c001bad7:	e8 34 44 ff ff       	call   c000ff10 <Pipe::Pipe(int)>
c001badc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001badf:	e8 94 52 ff ff       	call   c0010d78 <UnixFile::getFileDescriptor()>
c001bae4:	89 07                	mov    DWORD PTR [edi],eax
c001bae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bae9:	e8 8a 52 ff ff       	call   c0010d78 <UnixFile::getFileDescriptor()>
c001baee:	83 c4 10             	add    esp,0x10
c001baf1:	89 06                	mov    DWORD PTR [esi],eax
c001baf3:	31 d2                	xor    edx,edx
c001baf5:	5b                   	pop    ebx
c001baf6:	31 c0                	xor    eax,eax
c001baf8:	5e                   	pop    esi
c001baf9:	5f                   	pop    edi
c001bafa:	c3                   	ret    

c001bafb <sysGetUnixTime(regs*)>:
c001bafb:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001bb00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb0a:	e9 1b 7a ff ff       	jmp    c001352a <Clock::timeInSecondsLocal()>

c001bb0f <string_ends_with(char const*, char const*)>:
c001bb0f:	57                   	push   edi
c001bb10:	56                   	push   esi
c001bb11:	53                   	push   ebx
c001bb12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	53                   	push   ebx
c001bb1e:	e8 49 4c fe ff       	call   c000076c <strlen>
c001bb23:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb26:	89 c6                	mov    esi,eax
c001bb28:	e8 3f 4c fe ff       	call   c000076c <strlen>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	39 c6                	cmp    esi,eax
c001bb32:	7d 06                	jge    c001bb3a <string_ends_with(char const*, char const*)+0x2b>
c001bb34:	5b                   	pop    ebx
c001bb35:	31 c0                	xor    eax,eax
c001bb37:	5e                   	pop    esi
c001bb38:	5f                   	pop    edi
c001bb39:	c3                   	ret    
c001bb3a:	83 ec 08             	sub    esp,0x8
c001bb3d:	29 c6                	sub    esi,eax
c001bb3f:	57                   	push   edi
c001bb40:	01 f3                	add    ebx,esi
c001bb42:	53                   	push   ebx
c001bb43:	e8 50 4d fe ff       	call   c0000898 <strcmp>
c001bb48:	83 c4 10             	add    esp,0x10
c001bb4b:	85 c0                	test   eax,eax
c001bb4d:	5b                   	pop    ebx
c001bb4e:	0f 94 c0             	sete   al
c001bb51:	5e                   	pop    esi
c001bb52:	0f b6 c0             	movzx  eax,al
c001bb55:	5f                   	pop    edi
c001bb56:	c3                   	ret    

c001bb57 <sysCallOpen(regs*)>:
c001bb57:	56                   	push   esi
c001bb58:	53                   	push   ebx
c001bb59:	81 ec 04 01 00 00    	sub    esp,0x104
c001bb5f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bb66:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bb69:	85 c9                	test   ecx,ecx
c001bb6b:	0f 84 ad 01 00 00    	je     c001bd1e <sysCallOpen(regs*)+0x1c7>
c001bb71:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bb74:	85 c0                	test   eax,eax
c001bb76:	0f 84 a2 01 00 00    	je     c001bd1e <sysCallOpen(regs*)+0x1c7>
c001bb7c:	52                   	push   edx
c001bb7d:	68 d5 b6 02 c0       	push   0xc002b6d5
c001bb82:	50                   	push   eax
c001bb83:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bb87:	56                   	push   esi
c001bb88:	e8 01 6e ff ff       	call   c001298e <Fs::standardiseFiles(char*, char const*, char const*)>
c001bb8d:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb90:	e8 d7 4b fe ff       	call   c000076c <strlen>
c001bb95:	83 c4 10             	add    esp,0x10
c001bb98:	48                   	dec    eax
c001bb99:	74 1d                	je     c001bbb8 <sysCallOpen(regs*)+0x61>
c001bb9b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bb9e:	eb 0f                	jmp    c001bbaf <sysCallOpen(regs*)+0x58>
c001bba0:	80 fa 3a             	cmp    dl,0x3a
c001bba3:	74 0f                	je     c001bbb4 <sysCallOpen(regs*)+0x5d>
c001bba5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bba9:	48                   	dec    eax
c001bbaa:	74 0c                	je     c001bbb8 <sysCallOpen(regs*)+0x61>
c001bbac:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bbaf:	80 fa 2e             	cmp    dl,0x2e
c001bbb2:	75 ec                	jne    c001bba0 <sysCallOpen(regs*)+0x49>
c001bbb4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bbb8:	83 ec 08             	sub    esp,0x8
c001bbbb:	68 d9 b6 02 c0       	push   0xc002b6d9
c001bbc0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbc3:	e8 47 ff ff ff       	call   c001bb0f <string_ends_with(char const*, char const*)>
c001bbc8:	83 c4 10             	add    esp,0x10
c001bbcb:	85 c0                	test   eax,eax
c001bbcd:	74 1d                	je     c001bbec <sysCallOpen(regs*)+0x95>
c001bbcf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbd2:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bbd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbdf:	81 c4 04 01 00 00    	add    esp,0x104
c001bbe5:	31 c0                	xor    eax,eax
c001bbe7:	31 d2                	xor    edx,edx
c001bbe9:	5b                   	pop    ebx
c001bbea:	5e                   	pop    esi
c001bbeb:	c3                   	ret    
c001bbec:	83 ec 08             	sub    esp,0x8
c001bbef:	68 de b6 02 c0       	push   0xc002b6de
c001bbf4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbf7:	e8 13 ff ff ff       	call   c001bb0f <string_ends_with(char const*, char const*)>
c001bbfc:	83 c4 10             	add    esp,0x10
c001bbff:	85 c0                	test   eax,eax
c001bc01:	75 cc                	jne    c001bbcf <sysCallOpen(regs*)+0x78>
c001bc03:	83 ec 08             	sub    esp,0x8
c001bc06:	68 da b6 02 c0       	push   0xc002b6da
c001bc0b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc0e:	e8 85 4c fe ff       	call   c0000898 <strcmp>
c001bc13:	83 c4 10             	add    esp,0x10
c001bc16:	85 c0                	test   eax,eax
c001bc18:	74 b5                	je     c001bbcf <sysCallOpen(regs*)+0x78>
c001bc1a:	83 ec 08             	sub    esp,0x8
c001bc1d:	68 d9 b6 02 c0       	push   0xc002b6d9
c001bc22:	56                   	push   esi
c001bc23:	e8 e7 fe ff ff       	call   c001bb0f <string_ends_with(char const*, char const*)>
c001bc28:	83 c4 10             	add    esp,0x10
c001bc2b:	85 c0                	test   eax,eax
c001bc2d:	75 a0                	jne    c001bbcf <sysCallOpen(regs*)+0x78>
c001bc2f:	83 ec 08             	sub    esp,0x8
c001bc32:	68 e3 b6 02 c0       	push   0xc002b6e3
c001bc37:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc3a:	e8 d0 fe ff ff       	call   c001bb0f <string_ends_with(char const*, char const*)>
c001bc3f:	83 c4 10             	add    esp,0x10
c001bc42:	85 c0                	test   eax,eax
c001bc44:	0f 85 e7 00 00 00    	jne    c001bd31 <sysCallOpen(regs*)+0x1da>
c001bc4a:	83 ec 08             	sub    esp,0x8
c001bc4d:	68 e8 b6 02 c0       	push   0xc002b6e8
c001bc52:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc55:	e8 b5 fe ff ff       	call   c001bb0f <string_ends_with(char const*, char const*)>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	85 c0                	test   eax,eax
c001bc5f:	0f 85 cc 00 00 00    	jne    c001bd31 <sysCallOpen(regs*)+0x1da>
c001bc65:	83 ec 08             	sub    esp,0x8
c001bc68:	68 e4 b6 02 c0       	push   0xc002b6e4
c001bc6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc70:	e8 23 4c fe ff       	call   c0000898 <strcmp>
c001bc75:	83 c4 10             	add    esp,0x10
c001bc78:	85 c0                	test   eax,eax
c001bc7a:	0f 84 b1 00 00 00    	je     c001bd31 <sysCallOpen(regs*)+0x1da>
c001bc80:	83 ec 08             	sub    esp,0x8
c001bc83:	68 e3 b6 02 c0       	push   0xc002b6e3
c001bc88:	56                   	push   esi
c001bc89:	e8 81 fe ff ff       	call   c001bb0f <string_ends_with(char const*, char const*)>
c001bc8e:	83 c4 10             	add    esp,0x10
c001bc91:	85 c0                	test   eax,eax
c001bc93:	0f 85 98 00 00 00    	jne    c001bd31 <sysCallOpen(regs*)+0x1da>
c001bc99:	83 ec 0c             	sub    esp,0xc
c001bc9c:	68 14 01 00 00       	push   0x114
c001bca1:	e8 f3 38 ff ff       	call   c000f599 <malloc>
c001bca6:	83 c4 0c             	add    esp,0xc
c001bca9:	89 c6                	mov    esi,eax
c001bcab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcb3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcb6:	56                   	push   esi
c001bcb7:	e8 7c 6e ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	85 f6                	test   esi,esi
c001bcc1:	74 5b                	je     c001bd1e <sysCallOpen(regs*)+0x1c7>
c001bcc3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bcc6:	0f b6 c2             	movzx  eax,dl
c001bcc9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bccc:	89 d0                	mov    eax,edx
c001bcce:	83 e0 01             	and    eax,0x1
c001bcd1:	f6 c2 02             	test   dl,0x2
c001bcd4:	74 03                	je     c001bcd9 <sysCallOpen(regs*)+0x182>
c001bcd6:	83 c8 02             	or     eax,0x2
c001bcd9:	f6 c2 04             	test   dl,0x4
c001bcdc:	74 03                	je     c001bce1 <sysCallOpen(regs*)+0x18a>
c001bcde:	83 c8 04             	or     eax,0x4
c001bce1:	f6 c2 08             	test   dl,0x8
c001bce4:	74 03                	je     c001bce9 <sysCallOpen(regs*)+0x192>
c001bce6:	83 c8 0a             	or     eax,0xa
c001bce9:	83 e2 10             	and    edx,0x10
c001bcec:	74 03                	je     c001bcf1 <sysCallOpen(regs*)+0x19a>
c001bcee:	83 c8 12             	or     eax,0x12
c001bcf1:	83 ec 08             	sub    esp,0x8
c001bcf4:	50                   	push   eax
c001bcf5:	56                   	push   esi
c001bcf6:	e8 a1 6e ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001bcfb:	83 c4 10             	add    esp,0x10
c001bcfe:	85 c0                	test   eax,eax
c001bd00:	75 1c                	jne    c001bd1e <sysCallOpen(regs*)+0x1c7>
c001bd02:	83 ec 0c             	sub    esp,0xc
c001bd05:	56                   	push   esi
c001bd06:	e8 6d 50 ff ff       	call   c0010d78 <UnixFile::getFileDescriptor()>
c001bd0b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd0e:	83 c4 10             	add    esp,0x10
c001bd11:	89 02                	mov    DWORD PTR [edx],eax
c001bd13:	c1 f8 1f             	sar    eax,0x1f
c001bd16:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd19:	e9 c1 fe ff ff       	jmp    c001bbdf <sysCallOpen(regs*)+0x88>
c001bd1e:	81 c4 04 01 00 00    	add    esp,0x104
c001bd24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2e:	5b                   	pop    ebx
c001bd2f:	5e                   	pop    esi
c001bd30:	c3                   	ret    
c001bd31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd34:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bd3a:	e9 99 fe ff ff       	jmp    c001bbd8 <sysCallOpen(regs*)+0x81>

c001bd3f <Sys::loadSyscalls()>:
c001bd3f:	c7 05 a0 02 03 c0 ac af 01 c0 	mov    DWORD PTR ds:0xc00302a0,0xc001afac
c001bd49:	c7 05 a4 02 03 c0 a4 ab 01 c0 	mov    DWORD PTR ds:0xc00302a4,0xc001aba4
c001bd53:	c7 05 a8 02 03 c0 92 ad 01 c0 	mov    DWORD PTR ds:0xc00302a8,0xc001ad92
c001bd5d:	c7 05 ac 02 03 c0 e2 ae 01 c0 	mov    DWORD PTR ds:0xc00302ac,0xc001aee2
c001bd67:	c7 05 b0 02 03 c0 2a ad 01 c0 	mov    DWORD PTR ds:0xc00302b0,0xc001ad2a
c001bd71:	c7 05 b4 02 03 c0 db ab 01 c0 	mov    DWORD PTR ds:0xc00302b4,0xc001abdb
c001bd7b:	c7 05 b8 02 03 c0 bc ab 01 c0 	mov    DWORD PTR ds:0xc00302b8,0xc001abbc
c001bd85:	c7 05 bc 02 03 c0 e7 ad 01 c0 	mov    DWORD PTR ds:0xc00302bc,0xc001ade7
c001bd8f:	c7 05 c4 02 03 c0 75 b4 01 c0 	mov    DWORD PTR ds:0xc00302c4,0xc001b475
c001bd99:	c7 05 c0 02 03 c0 57 bb 01 c0 	mov    DWORD PTR ds:0xc00302c0,0xc001bb57
c001bda3:	c7 05 c8 02 03 c0 d5 b4 01 c0 	mov    DWORD PTR ds:0xc00302c8,0xc001b4d5
c001bdad:	c7 05 cc 02 03 c0 b8 b1 01 c0 	mov    DWORD PTR ds:0xc00302cc,0xc001b1b8
c001bdb7:	c7 05 d0 02 03 c0 f2 af 01 c0 	mov    DWORD PTR ds:0xc00302d0,0xc001aff2
c001bdc1:	c7 05 d4 02 03 c0 f7 af 01 c0 	mov    DWORD PTR ds:0xc00302d4,0xc001aff7
c001bdcb:	c7 05 d8 02 03 c0 9e b5 01 c0 	mov    DWORD PTR ds:0xc00302d8,0xc001b59e
c001bdd5:	c7 05 dc 02 03 c0 4a b5 01 c0 	mov    DWORD PTR ds:0xc00302dc,0xc001b54a
c001bddf:	c7 05 e0 02 03 c0 91 b2 01 c0 	mov    DWORD PTR ds:0xc00302e0,0xc001b291
c001bde9:	c7 05 e4 02 03 c0 e8 b2 01 c0 	mov    DWORD PTR ds:0xc00302e4,0xc001b2e8
c001bdf3:	c7 05 e8 02 03 c0 54 b3 01 c0 	mov    DWORD PTR ds:0xc00302e8,0xc001b354
c001bdfd:	c7 05 ec 02 03 c0 fc af 01 c0 	mov    DWORD PTR ds:0xc00302ec,0xc001affc
c001be07:	c7 05 f0 02 03 c0 0e b6 01 c0 	mov    DWORD PTR ds:0xc00302f0,0xc001b60e
c001be11:	c7 05 f4 02 03 c0 28 b6 01 c0 	mov    DWORD PTR ds:0xc00302f4,0xc001b628
c001be1b:	c7 05 f8 02 03 c0 28 b6 01 c0 	mov    DWORD PTR ds:0xc00302f8,0xc001b628
c001be25:	c7 05 fc 02 03 c0 5d b6 01 c0 	mov    DWORD PTR ds:0xc00302fc,0xc001b65d
c001be2f:	c7 05 00 03 03 c0 c1 b6 01 c0 	mov    DWORD PTR ds:0xc0030300,0xc001b6c1
c001be39:	c7 05 04 03 03 c0 06 b0 01 c0 	mov    DWORD PTR ds:0xc0030304,0xc001b006
c001be43:	c7 05 08 03 03 c0 25 b7 01 c0 	mov    DWORD PTR ds:0xc0030308,0xc001b725
c001be4d:	c7 05 0c 03 03 c0 75 b1 01 c0 	mov    DWORD PTR ds:0xc003030c,0xc001b175
c001be57:	c7 05 10 03 03 c0 71 b7 01 c0 	mov    DWORD PTR ds:0xc0030310,0xc001b771
c001be61:	c7 05 14 03 03 c0 37 b2 01 c0 	mov    DWORD PTR ds:0xc0030314,0xc001b237
c001be6b:	c7 05 18 03 03 c0 f4 b7 01 c0 	mov    DWORD PTR ds:0xc0030318,0xc001b7f4
c001be75:	c7 05 1c 03 03 c0 c6 b3 01 c0 	mov    DWORD PTR ds:0xc003031c,0xc001b3c6
c001be7f:	c7 05 20 03 03 c0 1b b8 01 c0 	mov    DWORD PTR ds:0xc0030320,0xc001b81b
c001be89:	c7 05 24 03 03 c0 83 b8 01 c0 	mov    DWORD PTR ds:0xc0030324,0xc001b883
c001be93:	c7 05 28 03 03 c0 30 b9 01 c0 	mov    DWORD PTR ds:0xc0030328,0xc001b930
c001be9d:	c7 05 2c 03 03 c0 16 b0 01 c0 	mov    DWORD PTR ds:0xc003032c,0xc001b016
c001bea7:	c7 05 30 03 03 c0 80 b0 01 c0 	mov    DWORD PTR ds:0xc0030330,0xc001b080
c001beb1:	c7 05 34 03 03 c0 c6 b0 01 c0 	mov    DWORD PTR ds:0xc0030334,0xc001b0c6
c001bebb:	c7 05 38 03 03 c0 44 ba 01 c0 	mov    DWORD PTR ds:0xc0030338,0xc001ba44
c001bec5:	c7 05 3c 03 03 c0 43 b6 01 c0 	mov    DWORD PTR ds:0xc003033c,0xc001b643
c001becf:	c7 05 40 03 03 c0 17 b1 01 c0 	mov    DWORD PTR ds:0xc0030340,0xc001b117
c001bed9:	c7 05 44 03 03 c0 b6 ba 01 c0 	mov    DWORD PTR ds:0xc0030344,0xc001bab6
c001bee3:	c7 05 48 03 03 c0 fb ba 01 c0 	mov    DWORD PTR ds:0xc0030348,0xc001bafb
c001beed:	c7 05 4c 03 03 c0 82 ac 01 c0 	mov    DWORD PTR ds:0xc003034c,0xc001ac82
c001bef7:	c7 05 50 03 03 c0 03 ae 01 c0 	mov    DWORD PTR ds:0xc0030350,0xc001ae03
c001bf01:	c7 05 54 03 03 c0 98 ae 01 c0 	mov    DWORD PTR ds:0xc0030354,0xc001ae98
c001bf0b:	c7 05 58 03 03 c0 6e ab 01 c0 	mov    DWORD PTR ds:0xc0030358,0xc001ab6e
c001bf15:	c7 05 5c 03 03 c0 4a af 01 c0 	mov    DWORD PTR ds:0xc003035c,0xc001af4a
c001bf1f:	c7 05 60 03 03 c0 e7 ab 01 c0 	mov    DWORD PTR ds:0xc0030360,0xc001abe7
c001bf29:	c7 05 64 03 03 c0 fe ab 01 c0 	mov    DWORD PTR ds:0xc0030364,0xc001abfe
c001bf33:	c3                   	ret    

c001bf34 <Sys::systemCall(regs*, void*)>:
c001bf34:	53                   	push   ebx
c001bf35:	83 ec 08             	sub    esp,0x8
c001bf38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bf3f:	83 f8 7f             	cmp    eax,0x7f
c001bf42:	77 16                	ja     c001bf5a <Sys::systemCall(regs*, void*)+0x26>
c001bf44:	8b 14 85 a0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd60]
c001bf4b:	85 d2                	test   edx,edx
c001bf4d:	74 0b                	je     c001bf5a <Sys::systemCall(regs*, void*)+0x26>
c001bf4f:	83 ec 0c             	sub    esp,0xc
c001bf52:	53                   	push   ebx
c001bf53:	ff d2                	call   edx
c001bf55:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bf58:	eb 0d                	jmp    c001bf67 <Sys::systemCall(regs*, void*)+0x33>
c001bf5a:	52                   	push   edx
c001bf5b:	52                   	push   edx
c001bf5c:	50                   	push   eax
c001bf5d:	68 ed b6 02 c0       	push   0xc002b6ed
c001bf62:	e8 72 66 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001bf67:	83 c4 10             	add    esp,0x10
c001bf6a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bf6f:	31 d2                	xor    edx,edx
c001bf71:	83 c4 08             	add    esp,0x8
c001bf74:	5b                   	pop    ebx
c001bf75:	c3                   	ret    

c001bf76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bf76:	55                   	push   ebp
c001bf77:	57                   	push   edi
c001bf78:	56                   	push   esi
c001bf79:	53                   	push   ebx
c001bf7a:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bf80:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bf87:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bf8e:	85 c0                	test   eax,eax
c001bf90:	0f 95 c1             	setne  cl
c001bf93:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001bf9b:	0f 94 c2             	sete   dl
c001bf9e:	84 d1                	test   cl,dl
c001bfa0:	74 23                	je     c001bfc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bfa2:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bfa8:	74 1b                	je     c001bfc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bfaa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bfb0:	89 da                	mov    edx,ebx
c001bfb2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bfb8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bfbe:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bfc5:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bfcc:	05 ff 0f 00 00       	add    eax,0xfff
c001bfd1:	83 ec 0c             	sub    esp,0xc
c001bfd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bfd8:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bfde:	c1 e8 0c             	shr    eax,0xc
c001bfe1:	89 fe                	mov    esi,edi
c001bfe3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bfe7:	c1 ee 0c             	shr    esi,0xc
c001bfea:	6a 01                	push   0x1
c001bfec:	e8 d2 51 ff ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c001bff1:	89 c5                	mov    ebp,eax
c001bff3:	58                   	pop    eax
c001bff4:	5a                   	pop    edx
c001bff5:	56                   	push   esi
c001bff6:	68 01 b7 02 c0       	push   0xc002b701
c001bffb:	e8 d9 65 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001c000:	59                   	pop    ecx
c001c001:	58                   	pop    eax
c001c002:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c006:	68 13 b7 02 c0       	push   0xc002b713
c001c00b:	e8 c9 65 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c019:	0f 86 31 01 00 00    	jbe    c001c150 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c01f:	c1 e6 0c             	shl    esi,0xc
c001c022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c025:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c02c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c033:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c036:	01 df                	add    edi,ebx
c001c038:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c03b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c03f:	0f 84 08 01 00 00    	je     c001c14d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c045:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c04b:	76 05                	jbe    c001c052 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c04d:	bf 00 10 00 00       	mov    edi,0x1000
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	31 d2                	xor    edx,edx
c001c057:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c05e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c060:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c064:	50                   	push   eax
c001c065:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c069:	56                   	push   esi
c001c06a:	52                   	push   edx
c001c06b:	57                   	push   edi
c001c06c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c073:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c076:	83 c4 20             	add    esp,0x20
c001c079:	85 c0                	test   eax,eax
c001c07b:	74 0a                	je     c001c087 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c07d:	53                   	push   ebx
c001c07e:	53                   	push   ebx
c001c07f:	50                   	push   eax
c001c080:	68 25 b7 02 c0       	push   0xc002b725
c001c085:	eb 0f                	jmp    c001c096 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c087:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c08b:	74 20                	je     c001c0ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c08d:	51                   	push   ecx
c001c08e:	51                   	push   ecx
c001c08f:	6a 00                	push   0x0
c001c091:	68 50 b7 02 c0       	push   0xc002b750
c001c096:	e8 3e 65 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001c09b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c09e:	e8 66 55 ff ff       	call   c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c001c0a3:	83 c4 10             	add    esp,0x10
c001c0a6:	31 c0                	xor    eax,eax
c001c0a8:	e9 68 01 00 00       	jmp    c001c215 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c0ad:	fa                   	cli    
c001c0ae:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001c0b4:	e8 84 38 ff ff       	call   c000f93d <Phys::allocatePage()>
c001c0b9:	6a 07                	push   0x7
c001c0bb:	89 c7                	mov    edi,eax
c001c0bd:	55                   	push   ebp
c001c0be:	50                   	push   eax
c001c0bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0c7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0cd:	e8 ae 58 ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0d2:	83 c4 0c             	add    esp,0xc
c001c0d5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c0dc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0e2:	6a 00                	push   0x0
c001c0e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0e9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0ec:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0f2:	e8 e3 56 ff ff       	call   c00117da <VAS::mapOtherVASIn(bool, VAS*)>
c001c0f7:	58                   	pop    eax
c001c0f8:	5a                   	pop    edx
c001c0f9:	68 07 0c 00 00       	push   0xc07
c001c0fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c102:	57                   	push   edi
c001c103:	89 ef                	mov    edi,ebp
c001c105:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c10c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c112:	6a 00                	push   0x0
c001c114:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c119:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c11c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c122:	e8 15 5c ff ff       	call   c0011d3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c127:	b9 00 10 00 00       	mov    ecx,0x1000
c001c12c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c12e:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001c133:	83 c4 20             	add    esp,0x20
c001c136:	48                   	dec    eax
c001c137:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001c13c:	85 c0                	test   eax,eax
c001c13e:	75 01                	jne    c001c141 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c140:	fb                   	sti    
c001c141:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c148:	e9 df fe ff ff       	jmp    c001c02c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c14d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c150:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c158:	0f 86 a9 00 00 00    	jbe    c001c207 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c15e:	fa                   	cli    
c001c15f:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001c165:	51                   	push   ecx
c001c166:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c16d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c173:	6a 00                	push   0x0
c001c175:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c17a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c17d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c183:	e8 52 56 ff ff       	call   c00117da <VAS::mapOtherVASIn(bool, VAS*)>
c001c188:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c18c:	c1 e6 0c             	shl    esi,0xc
c001c18f:	01 de                	add    esi,ebx
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	39 de                	cmp    esi,ebx
c001c196:	74 61                	je     c001c1f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c198:	e8 a0 37 ff ff       	call   c000f93d <Phys::allocatePage()>
c001c19d:	6a 07                	push   0x7
c001c19f:	89 c7                	mov    edi,eax
c001c1a1:	55                   	push   ebp
c001c1a2:	50                   	push   eax
c001c1a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1ab:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1b1:	e8 ca 57 ff ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1b6:	58                   	pop    eax
c001c1b7:	5a                   	pop    edx
c001c1b8:	68 07 0c 00 00       	push   0xc07
c001c1bd:	53                   	push   ebx
c001c1be:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1c4:	57                   	push   edi
c001c1c5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1cc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d2:	6a 00                	push   0x0
c001c1d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1dc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1e2:	e8 55 5b ff ff       	call   c0011d3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c1e7:	83 c4 1c             	add    esp,0x1c
c001c1ea:	68 00 10 00 00       	push   0x1000
c001c1ef:	6a 00                	push   0x0
c001c1f1:	55                   	push   ebp
c001c1f2:	e8 59 45 fe ff       	call   c0000750 <memset>
c001c1f7:	eb 98                	jmp    c001c191 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c1f9:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001c1fe:	48                   	dec    eax
c001c1ff:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001c204:	75 01                	jne    c001c207 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c206:	fb                   	sti    
c001c207:	83 ec 0c             	sub    esp,0xc
c001c20a:	55                   	push   ebp
c001c20b:	e8 f9 53 ff ff       	call   c0011609 <Virt::freeKernelVirtualPages(unsigned long)>
c001c210:	83 c4 10             	add    esp,0x10
c001c213:	b0 01                	mov    al,0x1
c001c215:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c21b:	5b                   	pop    ebx
c001c21c:	5e                   	pop    esi
c001c21d:	5f                   	pop    edi
c001c21e:	5d                   	pop    ebp
c001c21f:	c3                   	ret    

c001c220 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c220:	55                   	push   ebp
c001c221:	57                   	push   edi
c001c222:	56                   	push   esi
c001c223:	53                   	push   ebx
c001c224:	83 ec 48             	sub    esp,0x48
c001c227:	68 14 01 00 00       	push   0x114
c001c22c:	e8 68 33 ff ff       	call   c000f599 <malloc>
c001c231:	83 c4 0c             	add    esp,0xc
c001c234:	89 c6                	mov    esi,eax
c001c236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c23a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c23e:	50                   	push   eax
c001c23f:	e8 f4 68 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001c244:	58                   	pop    eax
c001c245:	5a                   	pop    edx
c001c246:	6a 01                	push   0x1
c001c248:	56                   	push   esi
c001c249:	e8 4e 69 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	85 c0                	test   eax,eax
c001c253:	0f 85 47 01 00 00    	jne    c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c259:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c261:	83 ec 0c             	sub    esp,0xc
c001c264:	6a 34                	push   0x34
c001c266:	e8 2e 33 ff ff       	call   c000f599 <malloc>
c001c26b:	89 c3                	mov    ebx,eax
c001c26d:	58                   	pop    eax
c001c26e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c270:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c274:	57                   	push   edi
c001c275:	53                   	push   ebx
c001c276:	6a 00                	push   0x0
c001c278:	6a 34                	push   0x34
c001c27a:	56                   	push   esi
c001c27b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c27e:	83 c4 20             	add    esp,0x20
c001c281:	85 c0                	test   eax,eax
c001c283:	0f 85 17 01 00 00    	jne    c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c289:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c28f:	0f 85 0b 01 00 00    	jne    c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c295:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c298:	85 c0                	test   eax,eax
c001c29a:	0f 84 00 01 00 00    	je     c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2a0:	31 d2                	xor    edx,edx
c001c2a2:	55                   	push   ebp
c001c2a3:	52                   	push   edx
c001c2a4:	50                   	push   eax
c001c2a5:	56                   	push   esi
c001c2a6:	e8 af 69 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c2ab:	83 c4 10             	add    esp,0x10
c001c2ae:	85 c0                	test   eax,eax
c001c2b0:	0f 85 ea 00 00 00    	jne    c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c2bc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2c4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2c8:	0f af c2             	imul   eax,edx
c001c2cb:	50                   	push   eax
c001c2cc:	e8 c8 32 ff ff       	call   c000f599 <malloc>
c001c2d1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c2d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2de:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2e2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2e6:	0f af c2             	imul   eax,edx
c001c2e9:	99                   	cdq    
c001c2ea:	52                   	push   edx
c001c2eb:	50                   	push   eax
c001c2ec:	56                   	push   esi
c001c2ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2f0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c2f3:	83 c4 20             	add    esp,0x20
c001c2f6:	85 c0                	test   eax,eax
c001c2f8:	0f 84 a2 00 00 00    	je     c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2fe:	31 d2                	xor    edx,edx
c001c300:	51                   	push   ecx
c001c301:	52                   	push   edx
c001c302:	50                   	push   eax
c001c303:	56                   	push   esi
c001c304:	e8 51 69 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c309:	83 c4 10             	add    esp,0x10
c001c30c:	85 c0                	test   eax,eax
c001c30e:	0f 85 8c 00 00 00    	jne    c001c3a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c314:	83 ec 0c             	sub    esp,0xc
c001c317:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c31b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c31f:	31 ed                	xor    ebp,ebp
c001c321:	0f af c2             	imul   eax,edx
c001c324:	50                   	push   eax
c001c325:	e8 6f 32 ff ff       	call   c000f599 <malloc>
c001c32a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c32c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c330:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c333:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c337:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c33b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c33f:	0f af c2             	imul   eax,edx
c001c342:	99                   	cdq    
c001c343:	52                   	push   edx
c001c344:	50                   	push   eax
c001c345:	56                   	push   esi
c001c346:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c349:	83 c4 20             	add    esp,0x20
c001c34c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c354:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c358:	0f 86 80 00 00 00    	jbe    c001c3de <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c35e:	0f b7 fd             	movzx  edi,bp
c001c361:	c1 e7 05             	shl    edi,0x5
c001c364:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c368:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c36b:	75 6b                	jne    c001c3d8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c36d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c370:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c374:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c377:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c37b:	52                   	push   edx
c001c37c:	31 d2                	xor    edx,edx
c001c37e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c381:	52                   	push   edx
c001c382:	50                   	push   eax
c001c383:	56                   	push   esi
c001c384:	e8 d1 68 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c389:	83 c4 10             	add    esp,0x10
c001c38c:	85 c0                	test   eax,eax
c001c38e:	74 17                	je     c001c3a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c390:	83 ec 0c             	sub    esp,0xc
c001c393:	68 7c b7 02 c0       	push   0xc002b77c
c001c398:	e8 3c 62 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001c39d:	83 c4 10             	add    esp,0x10
c001c3a0:	31 c0                	xor    eax,eax
c001c3a2:	e9 87 00 00 00       	jmp    c001c42e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c3a7:	83 ec 0c             	sub    esp,0xc
c001c3aa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c3ad:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c3b0:	50                   	push   eax
c001c3b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3b9:	56                   	push   esi
c001c3ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c3be:	e8 b3 fb ff ff       	call   c001bf76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c3c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3c7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c3cb:	83 c4 20             	add    esp,0x20
c001c3ce:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c3d2:	73 04                	jae    c001c3d8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c3d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3d8:	45                   	inc    ebp
c001c3d9:	e9 76 ff ff ff       	jmp    c001c354 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c3de:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3ea:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c3f0:	83 ec 0c             	sub    esp,0xc
c001c3f3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c3f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c3fe:	05 00 10 00 00       	add    eax,0x1000
c001c403:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c40a:	e8 9a 31 ff ff       	call   c000f5a9 <free>
c001c40f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c412:	e8 92 31 ff ff       	call   c000f5a9 <free>
c001c417:	58                   	pop    eax
c001c418:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c41c:	e8 88 31 ff ff       	call   c000f5a9 <free>
c001c421:	89 34 24             	mov    DWORD PTR [esp],esi
c001c424:	e8 d1 67 ff ff       	call   c0012bfa <File::close()>
c001c429:	83 c4 10             	add    esp,0x10
c001c42c:	b0 01                	mov    al,0x1
c001c42e:	83 c4 3c             	add    esp,0x3c
c001c431:	5b                   	pop    ebx
c001c432:	5e                   	pop    esi
c001c433:	5f                   	pop    edi
c001c434:	5d                   	pop    ebp
c001c435:	c3                   	ret    

c001c436 <Thr::runtimeReferenceHelper()>:
c001c436:	83 ec 18             	sub    esp,0x18
c001c439:	68 84 b7 02 c0       	push   0xc002b784
c001c43e:	e8 96 61 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001c443:	fa                   	cli    
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	eb fe                	jmp    c001c447 <Thr::runtimeReferenceHelper()+0x11>

c001c449 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c449:	57                   	push   edi
c001c44a:	56                   	push   esi
c001c44b:	53                   	push   ebx
c001c44c:	31 db                	xor    ebx,ebx
c001c44e:	39 1d 40 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c40,ebx
c001c454:	7e 3c                	jle    c001c492 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c456:	8b 34 9d c0 0b 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf440]
c001c45d:	31 ff                	xor    edi,edi
c001c45f:	39 3c 9d c0 0a 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf540],edi
c001c466:	7e 27                	jle    c001c48f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c468:	50                   	push   eax
c001c469:	50                   	push   eax
c001c46a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c46e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c470:	03 04 9d 40 0b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf4c0]
c001c477:	50                   	push   eax
c001c478:	e8 1b 44 fe ff       	call   c0000898 <strcmp>
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	85 c0                	test   eax,eax
c001c482:	75 05                	jne    c001c489 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c484:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c487:	eb 0b                	jmp    c001c494 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c489:	83 c6 10             	add    esi,0x10
c001c48c:	47                   	inc    edi
c001c48d:	eb d0                	jmp    c001c45f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c48f:	43                   	inc    ebx
c001c490:	eb bc                	jmp    c001c44e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c492:	31 c0                	xor    eax,eax
c001c494:	5b                   	pop    ebx
c001c495:	5e                   	pop    esi
c001c496:	5f                   	pop    edi
c001c497:	c3                   	ret    

c001c498 <Thr::loadKernelSymbolTable(char const*)>:
c001c498:	55                   	push   ebp
c001c499:	57                   	push   edi
c001c49a:	56                   	push   esi
c001c49b:	53                   	push   ebx
c001c49c:	83 ec 68             	sub    esp,0x68
c001c49f:	8b 35 90 0c 03 c0    	mov    esi,DWORD PTR ds:0xc0030c90
c001c4a5:	68 14 01 00 00       	push   0x114
c001c4aa:	e8 ea 30 ff ff       	call   c000f599 <malloc>
c001c4af:	83 c4 0c             	add    esp,0xc
c001c4b2:	89 c3                	mov    ebx,eax
c001c4b4:	56                   	push   esi
c001c4b5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c4b9:	50                   	push   eax
c001c4ba:	e8 79 66 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001c4bf:	5e                   	pop    esi
c001c4c0:	5f                   	pop    edi
c001c4c1:	6a 01                	push   0x1
c001c4c3:	53                   	push   ebx
c001c4c4:	e8 d3 66 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	85 c0                	test   eax,eax
c001c4ce:	74 0a                	je     c001c4da <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c4d0:	83 ec 0c             	sub    esp,0xc
c001c4d3:	68 a6 b7 02 c0       	push   0xc002b7a6
c001c4d8:	eb 34                	jmp    c001c50e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c4da:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c4e2:	83 ec 0c             	sub    esp,0xc
c001c4e5:	6a 34                	push   0x34
c001c4e7:	e8 ad 30 ff ff       	call   c000f599 <malloc>
c001c4ec:	59                   	pop    ecx
c001c4ed:	89 c7                	mov    edi,eax
c001c4ef:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c4f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4f5:	56                   	push   esi
c001c4f6:	57                   	push   edi
c001c4f7:	6a 00                	push   0x0
c001c4f9:	6a 34                	push   0x34
c001c4fb:	53                   	push   ebx
c001c4fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c4ff:	83 c4 20             	add    esp,0x20
c001c502:	85 c0                	test   eax,eax
c001c504:	74 17                	je     c001c51d <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c506:	83 ec 0c             	sub    esp,0xc
c001c509:	68 bd b7 02 c0       	push   0xc002b7bd
c001c50e:	e8 32 d8 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	31 c0                	xor    eax,eax
c001c518:	e9 31 02 00 00       	jmp    c001c74e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c51d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c523:	75 e1                	jne    c001c506 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c525:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c528:	85 c0                	test   eax,eax
c001c52a:	74 da                	je     c001c506 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c52c:	52                   	push   edx
c001c52d:	31 d2                	xor    edx,edx
c001c52f:	52                   	push   edx
c001c530:	50                   	push   eax
c001c531:	53                   	push   ebx
c001c532:	e8 23 67 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c537:	83 c4 10             	add    esp,0x10
c001c53a:	85 c0                	test   eax,eax
c001c53c:	75 c8                	jne    c001c506 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c53e:	83 ec 0c             	sub    esp,0xc
c001c541:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c545:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c549:	31 ed                	xor    ebp,ebp
c001c54b:	0f af c2             	imul   eax,edx
c001c54e:	50                   	push   eax
c001c54f:	e8 45 30 ff ff       	call   c000f599 <malloc>
c001c554:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c55a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c55d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c561:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c565:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c569:	0f af c2             	imul   eax,edx
c001c56c:	99                   	cdq    
c001c56d:	52                   	push   edx
c001c56e:	50                   	push   eax
c001c56f:	53                   	push   ebx
c001c570:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c573:	83 c4 20             	add    esp,0x20
c001c576:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c57e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c586:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c58e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c596:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c59a:	0f 86 aa 00 00 00    	jbe    c001c64a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c5a0:	0f b7 f5             	movzx  esi,bp
c001c5a3:	6b f6 28             	imul   esi,esi,0x28
c001c5a6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c5aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5b1:	50                   	push   eax
c001c5b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5b6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c5ba:	8b 16                	mov    edx,DWORD PTR [esi]
c001c5bc:	6b c0 28             	imul   eax,eax,0x28
c001c5bf:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c5c3:	89 d0                	mov    eax,edx
c001c5c5:	31 d2                	xor    edx,edx
c001c5c7:	52                   	push   edx
c001c5c8:	50                   	push   eax
c001c5c9:	53                   	push   ebx
c001c5ca:	e8 8b 66 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c5cf:	83 c4 0c             	add    esp,0xc
c001c5d2:	6a 20                	push   0x20
c001c5d4:	6a 00                	push   0x0
c001c5d6:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c5da:	52                   	push   edx
c001c5db:	e8 70 41 fe ff       	call   c0000750 <memset>
c001c5e0:	58                   	pop    eax
c001c5e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5e3:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c5e7:	51                   	push   ecx
c001c5e8:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c5ec:	52                   	push   edx
c001c5ed:	6a 00                	push   0x0
c001c5ef:	6a 1f                	push   0x1f
c001c5f1:	53                   	push   ebx
c001c5f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5f5:	83 c4 18             	add    esp,0x18
c001c5f8:	68 d4 b7 02 c0       	push   0xc002b7d4
c001c5fd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c601:	52                   	push   edx
c001c602:	e8 91 42 fe ff       	call   c0000898 <strcmp>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	85 c0                	test   eax,eax
c001c60c:	75 0f                	jne    c001c61d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c60e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c611:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c61d:	50                   	push   eax
c001c61e:	50                   	push   eax
c001c61f:	68 dc b7 02 c0       	push   0xc002b7dc
c001c624:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c628:	50                   	push   eax
c001c629:	e8 6a 42 fe ff       	call   c0000898 <strcmp>
c001c62e:	83 c4 10             	add    esp,0x10
c001c631:	85 c0                	test   eax,eax
c001c633:	75 0f                	jne    c001c644 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c635:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c638:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c63c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c640:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c644:	45                   	inc    ebp
c001c645:	e9 4c ff ff ff       	jmp    c001c596 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c64a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c64f:	75 10                	jne    c001c661 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c651:	83 ec 0c             	sub    esp,0xc
c001c654:	68 e4 b7 02 c0       	push   0xc002b7e4
c001c659:	e8 e7 d6 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001c65e:	83 c4 10             	add    esp,0x10
c001c661:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c666:	75 10                	jne    c001c678 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	68 e4 b7 02 c0       	push   0xc002b7e4
c001c670:	e8 d0 d6 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	31 d2                	xor    edx,edx
c001c67a:	50                   	push   eax
c001c67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67f:	52                   	push   edx
c001c680:	50                   	push   eax
c001c681:	53                   	push   ebx
c001c682:	e8 d3 65 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c687:	5a                   	pop    edx
c001c688:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c68c:	e8 08 2f ff ff       	call   c000f599 <malloc>
c001c691:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c699:	31 c9                	xor    ecx,ecx
c001c69b:	5e                   	pop    esi
c001c69c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c69e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c6a2:	55                   	push   ebp
c001c6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6a7:	51                   	push   ecx
c001c6a8:	52                   	push   edx
c001c6a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c6ad:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c6b1:	53                   	push   ebx
c001c6b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6b5:	83 c4 14             	add    esp,0x14
c001c6b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6bc:	e8 d8 2e ff ff       	call   c000f599 <malloc>
c001c6c1:	89 c6                	mov    esi,eax
c001c6c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6c8:	56                   	push   esi
c001c6c9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c6cd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c6d1:	51                   	push   ecx
c001c6d2:	52                   	push   edx
c001c6d3:	53                   	push   ebx
c001c6d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6db:	8b 15 40 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c40
c001c6e1:	83 c4 1c             	add    esp,0x1c
c001c6e4:	c1 e8 04             	shr    eax,0x4
c001c6e7:	89 04 95 c0 0a 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf540],eax
c001c6ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c6f2:	31 d2                	xor    edx,edx
c001c6f4:	52                   	push   edx
c001c6f5:	50                   	push   eax
c001c6f6:	53                   	push   ebx
c001c6f7:	e8 5e 65 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c6fc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c6fe:	31 d2                	xor    edx,edx
c001c700:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c703:	56                   	push   esi
c001c704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c708:	52                   	push   edx
c001c709:	50                   	push   eax
c001c70a:	53                   	push   ebx
c001c70b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c70e:	83 c4 14             	add    esp,0x14
c001c711:	53                   	push   ebx
c001c712:	e8 e3 64 ff ff       	call   c0012bfa <File::close()>
c001c717:	5d                   	pop    ebp
c001c718:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c71c:	e8 88 2e ff ff       	call   c000f5a9 <free>
c001c721:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c724:	e8 80 2e ff ff       	call   c000f5a9 <free>
c001c729:	a1 40 0c 03 c0       	mov    eax,ds:0xc0030c40
c001c72e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c732:	8d 50 01             	lea    edx,[eax+0x1]
c001c735:	89 0c 85 c0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf440],ecx
c001c73c:	89 34 85 40 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf4c0],esi
c001c743:	89 15 40 0c 03 c0    	mov    DWORD PTR ds:0xc0030c40,edx
c001c749:	83 c4 10             	add    esp,0x10
c001c74c:	b0 01                	mov    al,0x1
c001c74e:	83 c4 5c             	add    esp,0x5c
c001c751:	5b                   	pop    ebx
c001c752:	5e                   	pop    esi
c001c753:	5f                   	pop    edi
c001c754:	5d                   	pop    ebp
c001c755:	c3                   	ret    

c001c756 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c756:	55                   	push   ebp
c001c757:	57                   	push   edi
c001c758:	56                   	push   esi
c001c759:	53                   	push   ebx
c001c75a:	81 ec 68 03 00 00    	sub    esp,0x368
c001c760:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c767:	8b 1d 90 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030c90
c001c76d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c771:	68 14 01 00 00       	push   0x114
c001c776:	e8 1e 2e ff ff       	call   c000f599 <malloc>
c001c77b:	83 c4 0c             	add    esp,0xc
c001c77e:	89 c5                	mov    ebp,eax
c001c780:	53                   	push   ebx
c001c781:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c788:	50                   	push   eax
c001c789:	e8 aa 63 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001c78e:	5e                   	pop    esi
c001c78f:	5f                   	pop    edi
c001c790:	6a 01                	push   0x1
c001c792:	55                   	push   ebp
c001c793:	e8 04 64 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001c798:	83 c4 10             	add    esp,0x10
c001c79b:	85 c0                	test   eax,eax
c001c79d:	0f 85 a7 06 00 00    	jne    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7a3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c7ab:	83 ec 0c             	sub    esp,0xc
c001c7ae:	6a 34                	push   0x34
c001c7b0:	e8 e4 2d ff ff       	call   c000f599 <malloc>
c001c7b5:	5b                   	pop    ebx
c001c7b6:	89 c7                	mov    edi,eax
c001c7b8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7bf:	53                   	push   ebx
c001c7c0:	57                   	push   edi
c001c7c1:	6a 00                	push   0x0
c001c7c3:	6a 34                	push   0x34
c001c7c5:	55                   	push   ebp
c001c7c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7c9:	83 c4 20             	add    esp,0x20
c001c7cc:	85 c0                	test   eax,eax
c001c7ce:	0f 85 76 06 00 00    	jne    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7d4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7da:	0f 85 6a 06 00 00    	jne    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7e0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c7e3:	85 c0                	test   eax,eax
c001c7e5:	0f 84 5f 06 00 00    	je     c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7eb:	31 d2                	xor    edx,edx
c001c7ed:	51                   	push   ecx
c001c7ee:	52                   	push   edx
c001c7ef:	50                   	push   eax
c001c7f0:	55                   	push   ebp
c001c7f1:	e8 64 64 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c7f6:	83 c4 10             	add    esp,0x10
c001c7f9:	85 c0                	test   eax,eax
c001c7fb:	0f 85 49 06 00 00    	jne    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c801:	83 ec 0c             	sub    esp,0xc
c001c804:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c807:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c80b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c80f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c813:	0f af c2             	imul   eax,edx
c001c816:	50                   	push   eax
c001c817:	e8 7d 2d ff ff       	call   c000f599 <malloc>
c001c81c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c81f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c826:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c82a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c82e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c832:	0f af c2             	imul   eax,edx
c001c835:	99                   	cdq    
c001c836:	52                   	push   edx
c001c837:	50                   	push   eax
c001c838:	55                   	push   ebp
c001c839:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c83c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c83f:	83 c4 20             	add    esp,0x20
c001c842:	85 c0                	test   eax,eax
c001c844:	0f 84 00 06 00 00    	je     c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c84a:	52                   	push   edx
c001c84b:	31 d2                	xor    edx,edx
c001c84d:	52                   	push   edx
c001c84e:	50                   	push   eax
c001c84f:	55                   	push   ebp
c001c850:	e8 05 64 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c855:	83 c4 10             	add    esp,0x10
c001c858:	85 c0                	test   eax,eax
c001c85a:	0f 85 ea 05 00 00    	jne    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c867:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c86b:	31 f6                	xor    esi,esi
c001c86d:	0f af c2             	imul   eax,edx
c001c870:	50                   	push   eax
c001c871:	e8 23 2d ff ff       	call   c000f599 <malloc>
c001c876:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c879:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c87d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c880:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c884:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c888:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c88c:	0f af c2             	imul   eax,edx
c001c88f:	99                   	cdq    
c001c890:	52                   	push   edx
c001c891:	50                   	push   eax
c001c892:	55                   	push   ebp
c001c893:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c896:	83 c4 20             	add    esp,0x20
c001c899:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c89d:	0f 86 8a 00 00 00    	jbe    c001c92d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c8a3:	0f b7 de             	movzx  ebx,si
c001c8a6:	c1 e3 05             	shl    ebx,0x5
c001c8a9:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c8ad:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c8b0:	75 75                	jne    c001c927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c8b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c8b5:	31 d2                	xor    edx,edx
c001c8b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8c2:	50                   	push   eax
c001c8c3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c8c6:	52                   	push   edx
c001c8c7:	50                   	push   eax
c001c8c8:	55                   	push   ebp
c001c8c9:	e8 8c 63 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c8ce:	83 c4 10             	add    esp,0x10
c001c8d1:	85 c0                	test   eax,eax
c001c8d3:	0f 85 71 05 00 00    	jne    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8d9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c8e0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8e3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c8e7:	31 d2                	xor    edx,edx
c001c8e9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c8ed:	83 ec 0c             	sub    esp,0xc
c001c8f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c8fb:	50                   	push   eax
c001c8fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c904:	52                   	push   edx
c001c905:	50                   	push   eax
c001c906:	55                   	push   ebp
c001c907:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c90a:	83 c4 1c             	add    esp,0x1c
c001c90d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c910:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c913:	50                   	push   eax
c001c914:	6a 00                	push   0x0
c001c916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c91e:	50                   	push   eax
c001c91f:	e8 2c 3e fe ff       	call   c0000750 <memset>
c001c924:	83 c4 10             	add    esp,0x10
c001c927:	46                   	inc    esi
c001c928:	e9 6c ff ff ff       	jmp    c001c899 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c92d:	53                   	push   ebx
c001c92e:	31 db                	xor    ebx,ebx
c001c930:	68 00 01 00 00       	push   0x100
c001c935:	6a 00                	push   0x0
c001c937:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c93b:	50                   	push   eax
c001c93c:	e8 0f 3e fe ff       	call   c0000750 <memset>
c001c941:	83 c4 0c             	add    esp,0xc
c001c944:	68 00 01 00 00       	push   0x100
c001c949:	6a 00                	push   0x0
c001c94b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c952:	50                   	push   eax
c001c953:	e8 f8 3d fe ff       	call   c0000750 <memset>
c001c958:	83 c4 10             	add    esp,0x10
c001c95b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c963:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c96b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c973:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c97b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c983:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c987:	0f 86 30 01 00 00    	jbe    c001cabd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c98d:	0f b7 f3             	movzx  esi,bx
c001c990:	6b f6 28             	imul   esi,esi,0x28
c001c993:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c997:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c99a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c99e:	52                   	push   edx
c001c99f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c9a3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c9a7:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9a9:	6b d2 28             	imul   edx,edx,0x28
c001c9ac:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c9b0:	31 d2                	xor    edx,edx
c001c9b2:	52                   	push   edx
c001c9b3:	50                   	push   eax
c001c9b4:	55                   	push   ebp
c001c9b5:	e8 a0 62 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001c9ba:	83 c4 0c             	add    esp,0xc
c001c9bd:	6a 20                	push   0x20
c001c9bf:	6a 00                	push   0x0
c001c9c1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9c8:	51                   	push   ecx
c001c9c9:	e8 82 3d fe ff       	call   c0000750 <memset>
c001c9ce:	59                   	pop    ecx
c001c9cf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9d2:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c9d6:	52                   	push   edx
c001c9d7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c9de:	51                   	push   ecx
c001c9df:	6a 00                	push   0x0
c001c9e1:	6a 1f                	push   0x1f
c001c9e3:	55                   	push   ebp
c001c9e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9e7:	83 c4 1c             	add    esp,0x1c
c001c9ea:	6a 09                	push   0x9
c001c9ec:	68 fe b7 02 c0       	push   0xc002b7fe
c001c9f1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9f8:	51                   	push   ecx
c001c9f9:	e8 4e 3c fe ff       	call   c000064c <memcmp>
c001c9fe:	83 c4 10             	add    esp,0x10
c001ca01:	85 c0                	test   eax,eax
c001ca03:	75 21                	jne    c001ca26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ca05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca0d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca15:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca18:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca1f:	89 d0                	mov    eax,edx
c001ca21:	40                   	inc    eax
c001ca22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca26:	50                   	push   eax
c001ca27:	6a 09                	push   0x9
c001ca29:	68 08 b8 02 c0       	push   0xc002b808
c001ca2e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca35:	50                   	push   eax
c001ca36:	e8 11 3c fe ff       	call   c000064c <memcmp>
c001ca3b:	83 c4 10             	add    esp,0x10
c001ca3e:	85 c0                	test   eax,eax
c001ca40:	75 21                	jne    c001ca63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ca42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca4a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca55:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca5c:	89 d0                	mov    eax,edx
c001ca5e:	40                   	inc    eax
c001ca5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca63:	50                   	push   eax
c001ca64:	50                   	push   eax
c001ca65:	68 d4 b7 02 c0       	push   0xc002b7d4
c001ca6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca71:	50                   	push   eax
c001ca72:	e8 21 3e fe ff       	call   c0000898 <strcmp>
c001ca77:	83 c4 10             	add    esp,0x10
c001ca7a:	85 c0                	test   eax,eax
c001ca7c:	75 0f                	jne    c001ca8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001ca7e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca8d:	50                   	push   eax
c001ca8e:	50                   	push   eax
c001ca8f:	68 dc b7 02 c0       	push   0xc002b7dc
c001ca94:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca9b:	50                   	push   eax
c001ca9c:	e8 f7 3d fe ff       	call   c0000898 <strcmp>
c001caa1:	83 c4 10             	add    esp,0x10
c001caa4:	85 c0                	test   eax,eax
c001caa6:	75 0f                	jne    c001cab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001caa8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001caaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cab3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cab7:	43                   	inc    ebx
c001cab8:	e9 c6 fe ff ff       	jmp    c001c983 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cabd:	31 d2                	xor    edx,edx
c001cabf:	50                   	push   eax
c001cac0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cac4:	52                   	push   edx
c001cac5:	50                   	push   eax
c001cac6:	55                   	push   ebp
c001cac7:	e8 8e 61 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001cacc:	58                   	pop    eax
c001cacd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cad1:	e8 c3 2a ff ff       	call   c000f599 <malloc>
c001cad6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cad9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cadd:	31 d2                	xor    edx,edx
c001cadf:	58                   	pop    eax
c001cae0:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cae4:	53                   	push   ebx
c001cae5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cae9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001caed:	52                   	push   edx
c001caee:	50                   	push   eax
c001caef:	55                   	push   ebp
c001caf0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caf3:	83 c4 14             	add    esp,0x14
c001caf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cafa:	e8 9a 2a ff ff       	call   c000f599 <malloc>
c001caff:	31 d2                	xor    edx,edx
c001cb01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb05:	83 c4 0c             	add    esp,0xc
c001cb08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb0c:	52                   	push   edx
c001cb0d:	50                   	push   eax
c001cb0e:	55                   	push   ebp
c001cb0f:	e8 46 61 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001cb14:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb17:	31 d2                	xor    edx,edx
c001cb19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cb20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb24:	52                   	push   edx
c001cb25:	50                   	push   eax
c001cb26:	55                   	push   ebp
c001cb27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb2a:	83 c4 20             	add    esp,0x20
c001cb2d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cb39:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cb3d:	0f 84 0b 03 00 00    	je     c001ce4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cb43:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cb4a:	31 d2                	xor    edx,edx
c001cb4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb50:	c1 e8 03             	shr    eax,0x3
c001cb53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cb57:	51                   	push   ecx
c001cb58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb5c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cb60:	52                   	push   edx
c001cb61:	50                   	push   eax
c001cb62:	55                   	push   ebp
c001cb63:	e8 f2 60 ff ff       	call   c0012c5a <File::seek(unsigned long long)>
c001cb68:	5b                   	pop    ebx
c001cb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb6d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cb74:	e8 20 2a ff ff       	call   c000f599 <malloc>
c001cb79:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb80:	31 d2                	xor    edx,edx
c001cb82:	5e                   	pop    esi
c001cb83:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cb87:	50                   	push   eax
c001cb88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb90:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cb97:	52                   	push   edx
c001cb98:	50                   	push   eax
c001cb99:	55                   	push   ebp
c001cb9a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb9d:	83 c4 20             	add    esp,0x20
c001cba0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cba8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cbac:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cbb0:	0f 8d 7c 02 00 00    	jge    c001ce32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cbb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbbe:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cbc3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cbc6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbce:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cbd2:	89 d8                	mov    eax,ebx
c001cbd4:	c1 e8 08             	shr    eax,0x8
c001cbd7:	89 c6                	mov    esi,eax
c001cbd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cbdd:	c1 e6 04             	shl    esi,0x4
c001cbe0:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cbe4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cbe7:	85 d2                	test   edx,edx
c001cbe9:	0f 85 bf 00 00 00    	jne    c001ccae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cbef:	83 ec 0c             	sub    esp,0xc
c001cbf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbf6:	03 06                	add    eax,DWORD PTR [esi]
c001cbf8:	50                   	push   eax
c001cbf9:	e8 4b f8 ff ff       	call   c001c449 <Thr::getAddressOfKernelSymbol(char const*)>
c001cbfe:	83 c4 10             	add    esp,0x10
c001cc01:	89 c2                	mov    edx,eax
c001cc03:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cc08:	85 c0                	test   eax,eax
c001cc0a:	0f 85 9e 00 00 00    	jne    c001ccae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc17:	03 06                	add    eax,DWORD PTR [esi]
c001cc19:	50                   	push   eax
c001cc1a:	e8 20 19 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	89 c2                	mov    edx,eax
c001cc24:	85 c0                	test   eax,eax
c001cc26:	0f 85 82 00 00 00    	jne    c001ccae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc2c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cc30:	50                   	push   eax
c001cc31:	50                   	push   eax
c001cc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc36:	03 06                	add    eax,DWORD PTR [esi]
c001cc38:	50                   	push   eax
c001cc39:	68 12 b8 02 c0       	push   0xc002b812
c001cc3e:	e8 96 59 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001cc43:	58                   	pop    eax
c001cc44:	5a                   	pop    edx
c001cc45:	68 2c b8 02 c0       	push   0xc002b82c
c001cc4a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc51:	50                   	push   eax
c001cc52:	e8 b5 3b fe ff       	call   c000080c <strcpy>
c001cc57:	59                   	pop    ecx
c001cc58:	58                   	pop    eax
c001cc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc5d:	03 06                	add    eax,DWORD PTR [esi]
c001cc5f:	50                   	push   eax
c001cc60:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc67:	50                   	push   eax
c001cc68:	e8 df 3c fe ff       	call   c000094c <strcat>
c001cc6d:	58                   	pop    eax
c001cc6e:	5a                   	pop    edx
c001cc6f:	68 c2 b8 02 c0       	push   0xc002b8c2
c001cc74:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc7b:	50                   	push   eax
c001cc7c:	e8 cb 3c fe ff       	call   c000094c <strcat>
c001cc81:	83 c4 10             	add    esp,0x10
c001cc84:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc89:	0f 84 5d 01 00 00    	je     c001cdec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc8f:	83 ec 0c             	sub    esp,0xc
c001cc92:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc99:	50                   	push   eax
c001cc9a:	e8 a6 d0 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001cc9f:	83 c4 10             	add    esp,0x10
c001cca2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cca6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ccaa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ccae:	80 fb 01             	cmp    bl,0x1
c001ccb1:	0f 85 88 00 00 00    	jne    c001cd3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ccb7:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001ccbe:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccc2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ccc6:	01 ce                	add    esi,ecx
c001ccc8:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ccce:	0f 94 c0             	sete   al
c001ccd1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccd7:	0f 94 c3             	sete   bl
c001ccda:	09 c3                	or     ebx,eax
c001ccdc:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccde:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cce3:	74 41                	je     c001cd26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cce5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cce8:	84 db                	test   bl,bl
c001ccea:	75 15                	jne    c001cd01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001ccec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccf0:	66 83 f8 0c          	cmp    ax,0xc
c001ccf4:	76 05                	jbe    c001ccfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ccf6:	b8 0c 00 00 00       	mov    eax,0xc
c001ccfb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ccff:	76 37                	jbe    c001cd38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd01:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cd05:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd0a:	0f 84 dc 00 00 00    	je     c001cdec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd10:	83 ec 0c             	sub    esp,0xc
c001cd13:	68 43 b8 02 c0       	push   0xc002b843
c001cd18:	e8 28 d0 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd24:	eb 12                	jmp    c001cd38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd26:	01 c1                	add    ecx,eax
c001cd28:	84 db                	test   bl,bl
c001cd2a:	75 0c                	jne    c001cd38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd30:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cd34:	77 02                	ja     c001cd38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd36:	01 d1                	add    ecx,edx
c001cd38:	89 0e                	mov    DWORD PTR [esi],ecx
c001cd3a:	e9 ea 00 00 00       	jmp    c001ce29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd3f:	80 fb 02             	cmp    bl,0x2
c001cd42:	75 7c                	jne    c001cdc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cd44:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cd4b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cd4f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cd53:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cd59:	74 20                	je     c001cd7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd5b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cd61:	74 18                	je     c001cd7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd63:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd67:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd6c:	66 83 f8 0e          	cmp    ax,0xe
c001cd70:	77 03                	ja     c001cd75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cd72:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cd75:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cd79:	76 1f                	jbe    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cd7b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cd7f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd84:	74 66                	je     c001cdec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd86:	83 ec 0c             	sub    esp,0xc
c001cd89:	68 5f b8 02 c0       	push   0xc002b85f
c001cd8e:	e8 b2 cf ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd9a:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd9c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cda1:	74 13                	je     c001cdb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cda3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cda7:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cdae:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cdb2:	01 c8                	add    eax,ecx
c001cdb4:	eb 04                	jmp    c001cdba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cdb6:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cdba:	01 c2                	add    edx,eax
c001cdbc:	89 16                	mov    DWORD PTR [esi],edx
c001cdbe:	eb 69                	jmp    c001ce29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cdc0:	0f b6 db             	movzx  ebx,bl
c001cdc3:	50                   	push   eax
c001cdc4:	50                   	push   eax
c001cdc5:	53                   	push   ebx
c001cdc6:	68 7b b8 02 c0       	push   0xc002b87b
c001cdcb:	e8 09 58 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001cdd0:	83 c4 10             	add    esp,0x10
c001cdd3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdd8:	74 12                	je     c001cdec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdda:	83 ec 0c             	sub    esp,0xc
c001cddd:	68 86 b8 02 c0       	push   0xc002b886
c001cde2:	e8 5e cf ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001cde7:	83 c4 10             	add    esp,0x10
c001cdea:	eb 3d                	jmp    c001ce29 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cdec:	83 ec 0c             	sub    esp,0xc
c001cdef:	55                   	push   ebp
c001cdf0:	e8 05 5e ff ff       	call   c0012bfa <File::close()>
c001cdf5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cdf8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdfb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cdfe:	59                   	pop    ecx
c001cdff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce03:	e8 a1 27 ff ff       	call   c000f5a9 <free>
c001ce08:	5b                   	pop    ebx
c001ce09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce0d:	e8 97 27 ff ff       	call   c000f5a9 <free>
c001ce12:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce15:	e8 8f 27 ff ff       	call   c000f5a9 <free>
c001ce1a:	5e                   	pop    esi
c001ce1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce1f:	e8 85 27 ff ff       	call   c000f5a9 <free>
c001ce24:	83 c4 10             	add    esp,0x10
c001ce27:	eb 21                	jmp    c001ce4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce29:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ce2d:	e9 76 fd ff ff       	jmp    c001cba8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ce32:	83 ec 0c             	sub    esp,0xc
c001ce35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce39:	e8 6b 27 ff ff       	call   c000f5a9 <free>
c001ce3e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ce42:	83 c4 10             	add    esp,0x10
c001ce45:	e9 eb fc ff ff       	jmp    c001cb35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ce4a:	31 c0                	xor    eax,eax
c001ce4c:	eb 33                	jmp    c001ce81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001ce4e:	83 ec 0c             	sub    esp,0xc
c001ce51:	55                   	push   ebp
c001ce52:	e8 a3 5d ff ff       	call   c0012bfa <File::close()>
c001ce57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce5a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce60:	58                   	pop    eax
c001ce61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce65:	e8 3f 27 ff ff       	call   c000f5a9 <free>
c001ce6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce6d:	e8 37 27 ff ff       	call   c000f5a9 <free>
c001ce72:	5a                   	pop    edx
c001ce73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce77:	e8 2d 27 ff ff       	call   c000f5a9 <free>
c001ce7c:	83 c4 10             	add    esp,0x10
c001ce7f:	b0 01                	mov    al,0x1
c001ce81:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ce87:	5b                   	pop    ebx
c001ce88:	5e                   	pop    esi
c001ce89:	5f                   	pop    edi
c001ce8a:	5d                   	pop    ebp
c001ce8b:	c3                   	ret    

c001ce8c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ce8c:	56                   	push   esi
c001ce8d:	31 d2                	xor    edx,edx
c001ce8f:	53                   	push   ebx
c001ce90:	8b 1d a0 04 03 c0    	mov    ebx,DWORD PTR ds:0xc00304a0
c001ce96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce9a:	39 d3                	cmp    ebx,edx
c001ce9c:	7e 1b                	jle    c001ceb9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ce9e:	8b 04 95 c0 06 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf940]
c001cea5:	39 c8                	cmp    eax,ecx
c001cea7:	77 0d                	ja     c001ceb6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cea9:	8b 34 95 c0 04 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfb40]
c001ceb0:	01 c6                	add    esi,eax
c001ceb2:	39 ce                	cmp    esi,ecx
c001ceb4:	77 05                	ja     c001cebb <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ceb6:	42                   	inc    edx
c001ceb7:	eb e1                	jmp    c001ce9a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ceb9:	31 c0                	xor    eax,eax
c001cebb:	5b                   	pop    ebx
c001cebc:	5e                   	pop    esi
c001cebd:	c3                   	ret    

c001cebe <Thr::getDriverNameFromAddress(unsigned long)>:
c001cebe:	53                   	push   ebx
c001cebf:	31 c0                	xor    eax,eax
c001cec1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cec5:	8b 1d a0 04 03 c0    	mov    ebx,DWORD PTR ds:0xc00304a0
c001cecb:	39 c3                	cmp    ebx,eax
c001cecd:	7e 22                	jle    c001cef1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cecf:	8b 14 85 c0 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf940]
c001ced6:	39 ca                	cmp    edx,ecx
c001ced8:	77 14                	ja     c001ceee <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ceda:	03 14 85 c0 04 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfb40]
c001cee1:	39 ca                	cmp    edx,ecx
c001cee3:	76 09                	jbe    c001ceee <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cee5:	8b 04 85 c0 08 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf740]
c001ceec:	eb 05                	jmp    c001cef3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ceee:	40                   	inc    eax
c001ceef:	eb da                	jmp    c001cecb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cef1:	31 c0                	xor    eax,eax
c001cef3:	5b                   	pop    ebx
c001cef4:	c3                   	ret    

c001cef5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cef5:	53                   	push   ebx
c001cef6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cefa:	53                   	push   ebx
c001cefb:	e8 8c ff ff ff       	call   c001ce8c <Thr::getDriverBaseFromAddress(unsigned long)>
c001cf00:	5a                   	pop    edx
c001cf01:	31 d2                	xor    edx,edx
c001cf03:	85 c0                	test   eax,eax
c001cf05:	74 04                	je     c001cf0b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cf07:	89 da                	mov    edx,ebx
c001cf09:	29 c2                	sub    edx,eax
c001cf0b:	89 d0                	mov    eax,edx
c001cf0d:	5b                   	pop    ebx
c001cf0e:	c3                   	ret    

c001cf0f <Thr::loadDLL(char const*, bool)>:
c001cf0f:	55                   	push   ebp
c001cf10:	57                   	push   edi
c001cf11:	56                   	push   esi
c001cf12:	53                   	push   ebx
c001cf13:	81 ec 34 01 00 00    	sub    esp,0x134
c001cf19:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cf20:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cf27:	56                   	push   esi
c001cf28:	68 9e b8 02 c0       	push   0xc002b89e
c001cf2d:	e8 a7 56 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001cf32:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cf39:	e8 5b 26 ff ff       	call   c000f599 <malloc>
c001cf3e:	83 c4 0c             	add    esp,0xc
c001cf41:	89 c3                	mov    ebx,eax
c001cf43:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c001cf49:	56                   	push   esi
c001cf4a:	50                   	push   eax
c001cf4b:	e8 e8 5b ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001cf50:	83 c4 10             	add    esp,0x10
c001cf53:	85 db                	test   ebx,ebx
c001cf55:	75 3c                	jne    c001cf93 <Thr::loadDLL(char const*, bool)+0x84>
c001cf57:	89 f8                	mov    eax,edi
c001cf59:	84 c0                	test   al,al
c001cf5b:	0f 84 cc 01 00 00    	je     c001d12d <Thr::loadDLL(char const*, bool)+0x21e>
c001cf61:	55                   	push   ebp
c001cf62:	55                   	push   ebp
c001cf63:	68 af b8 02 c0       	push   0xc002b8af
c001cf68:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cf6c:	55                   	push   ebp
c001cf6d:	e8 9a 38 fe ff       	call   c000080c <strcpy>
c001cf72:	58                   	pop    eax
c001cf73:	5a                   	pop    edx
c001cf74:	56                   	push   esi
c001cf75:	55                   	push   ebp
c001cf76:	e8 d1 39 fe ff       	call   c000094c <strcat>
c001cf7b:	59                   	pop    ecx
c001cf7c:	58                   	pop    eax
c001cf7d:	68 c2 b8 02 c0       	push   0xc002b8c2
c001cf82:	55                   	push   ebp
c001cf83:	e8 c4 39 fe ff       	call   c000094c <strcat>
c001cf88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf8b:	e8 b5 cd ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001cf90:	83 c4 10             	add    esp,0x10
c001cf93:	51                   	push   ecx
c001cf94:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cf98:	50                   	push   eax
c001cf99:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf9d:	50                   	push   eax
c001cf9e:	53                   	push   ebx
c001cf9f:	e8 a4 5e ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c001cfa4:	83 c4 10             	add    esp,0x10
c001cfa7:	85 db                	test   ebx,ebx
c001cfa9:	74 0c                	je     c001cfb7 <Thr::loadDLL(char const*, bool)+0xa8>
c001cfab:	83 ec 0c             	sub    esp,0xc
c001cfae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfb0:	53                   	push   ebx
c001cfb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfb4:	83 c4 10             	add    esp,0x10
c001cfb7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cfbc:	75 0a                	jne    c001cfc8 <Thr::loadDLL(char const*, bool)+0xb9>
c001cfbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfc2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cfc6:	75 3c                	jne    c001d004 <Thr::loadDLL(char const*, bool)+0xf5>
c001cfc8:	89 f8                	mov    eax,edi
c001cfca:	84 c0                	test   al,al
c001cfcc:	0f 84 43 01 00 00    	je     c001d115 <Thr::loadDLL(char const*, bool)+0x206>
c001cfd2:	51                   	push   ecx
c001cfd3:	51                   	push   ecx
c001cfd4:	68 af b8 02 c0       	push   0xc002b8af
c001cfd9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cfdd:	53                   	push   ebx
c001cfde:	e8 29 38 fe ff       	call   c000080c <strcpy>
c001cfe3:	5d                   	pop    ebp
c001cfe4:	58                   	pop    eax
c001cfe5:	56                   	push   esi
c001cfe6:	53                   	push   ebx
c001cfe7:	e8 60 39 fe ff       	call   c000094c <strcat>
c001cfec:	58                   	pop    eax
c001cfed:	5a                   	pop    edx
c001cfee:	68 c2 b8 02 c0       	push   0xc002b8c2
c001cff3:	53                   	push   ebx
c001cff4:	e8 53 39 fe ff       	call   c000094c <strcat>
c001cff9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cffc:	e8 44 cd ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001d001:	83 c4 10             	add    esp,0x10
c001d004:	52                   	push   edx
c001d005:	6a 03                	push   0x3
c001d007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d00b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d00f:	05 ff 0f 00 00       	add    eax,0xfff
c001d014:	83 d2 00             	adc    edx,0x0
c001d017:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d01b:	50                   	push   eax
c001d01c:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c001d022:	e8 5b 4a ff ff       	call   c0011a82 <VAS::allocatePages(int, int)>
c001d027:	59                   	pop    ecx
c001d028:	89 c3                	mov    ebx,eax
c001d02a:	5d                   	pop    ebp
c001d02b:	50                   	push   eax
c001d02c:	68 53 9f 02 c0       	push   0xc0029f53
c001d031:	e8 a3 55 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001d036:	89 34 24             	mov    DWORD PTR [esp],esi
c001d039:	e8 2e 37 fe ff       	call   c000076c <strlen>
c001d03e:	8b 2d a0 04 03 c0    	mov    ebp,DWORD PTR ds:0xc00304a0
c001d044:	40                   	inc    eax
c001d045:	89 04 24             	mov    DWORD PTR [esp],eax
c001d048:	e8 4c 25 ff ff       	call   c000f599 <malloc>
c001d04d:	89 04 ad c0 08 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf740],eax
c001d054:	58                   	pop    eax
c001d055:	a1 a0 04 03 c0       	mov    eax,ds:0xc00304a0
c001d05a:	5a                   	pop    edx
c001d05b:	56                   	push   esi
c001d05c:	ff 34 85 c0 08 03 c0 	push   DWORD PTR [eax*4-0x3ffcf740]
c001d063:	e8 a4 37 fe ff       	call   c000080c <strcpy>
c001d068:	a1 a0 04 03 c0       	mov    eax,ds:0xc00304a0
c001d06d:	8d 50 01             	lea    edx,[eax+0x1]
c001d070:	89 1c 85 c0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf940],ebx
c001d077:	89 15 a0 04 03 c0    	mov    DWORD PTR ds:0xc00304a0,edx
c001d07d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d081:	83 c4 0c             	add    esp,0xc
c001d084:	89 14 85 c0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb40],edx
c001d08b:	6a 01                	push   0x1
c001d08d:	53                   	push   ebx
c001d08e:	56                   	push   esi
c001d08f:	e8 c2 f6 ff ff       	call   c001c756 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d094:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d0a0:	0f 85 83 00 00 00    	jne    c001d129 <Thr::loadDLL(char const*, bool)+0x21a>
c001d0a6:	89 f8                	mov    eax,edi
c001d0a8:	84 c0                	test   al,al
c001d0aa:	74 6d                	je     c001d119 <Thr::loadDLL(char const*, bool)+0x20a>
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	68 c4 b8 02 c0       	push   0xc002b8c4
c001d0b4:	e8 8c cc ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001d0b9:	83 c4 10             	add    esp,0x10
c001d0bc:	eb 5b                	jmp    c001d119 <Thr::loadDLL(char const*, bool)+0x20a>
c001d0be:	89 ee                	mov    esi,ebp
c001d0c0:	50                   	push   eax
c001d0c1:	c1 e6 0c             	shl    esi,0xc
c001d0c4:	50                   	push   eax
c001d0c5:	01 de                	add    esi,ebx
c001d0c7:	56                   	push   esi
c001d0c8:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c001d0ce:	e8 17 45 ff ff       	call   c00115ea <VAS::getPageTableEntry(unsigned long)>
c001d0d3:	83 c4 10             	add    esp,0x10
c001d0d6:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d0d9:	75 0c                	jne    c001d0e7 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d0db:	83 ec 0c             	sub    esp,0xc
c001d0de:	56                   	push   esi
c001d0df:	e8 fe 27 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c001d0e4:	83 c4 10             	add    esp,0x10
c001d0e7:	45                   	inc    ebp
c001d0e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d0ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0f0:	05 ff 0f 00 00       	add    eax,0xfff
c001d0f5:	bf 00 00 00 00       	mov    edi,0x0
c001d0fa:	83 d2 00             	adc    edx,0x0
c001d0fd:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d101:	c1 ea 0c             	shr    edx,0xc
c001d104:	39 c5                	cmp    ebp,eax
c001d106:	89 d1                	mov    ecx,edx
c001d108:	89 f8                	mov    eax,edi
c001d10a:	19 c8                	sbb    eax,ecx
c001d10c:	72 b0                	jb     c001d0be <Thr::loadDLL(char const*, bool)+0x1af>
c001d10e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d113:	75 18                	jne    c001d12d <Thr::loadDLL(char const*, bool)+0x21e>
c001d115:	31 db                	xor    ebx,ebx
c001d117:	eb 14                	jmp    c001d12d <Thr::loadDLL(char const*, bool)+0x21e>
c001d119:	83 ec 0c             	sub    esp,0xc
c001d11c:	68 e3 b8 02 c0       	push   0xc002b8e3
c001d121:	e8 1f cc ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001d126:	83 c4 10             	add    esp,0x10
c001d129:	31 ed                	xor    ebp,ebp
c001d12b:	eb bb                	jmp    c001d0e8 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d12d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d133:	89 d8                	mov    eax,ebx
c001d135:	5b                   	pop    ebx
c001d136:	5e                   	pop    esi
c001d137:	5f                   	pop    edi
c001d138:	5d                   	pop    ebp
c001d139:	c3                   	ret    

c001d13a <Thr::executeDLL(unsigned long, void*)>:
c001d13a:	56                   	push   esi
c001d13b:	53                   	push   ebx
c001d13c:	52                   	push   edx
c001d13d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d141:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d145:	85 db                	test   ebx,ebx
c001d147:	75 10                	jne    c001d159 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d149:	83 ec 0c             	sub    esp,0xc
c001d14c:	68 ff b8 02 c0       	push   0xc002b8ff
c001d151:	e8 ef cb ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	50                   	push   eax
c001d15a:	50                   	push   eax
c001d15b:	53                   	push   ebx
c001d15c:	68 29 b9 02 c0       	push   0xc002b929
c001d161:	e8 73 54 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001d166:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d16a:	89 d8                	mov    eax,ebx
c001d16c:	83 c4 14             	add    esp,0x14
c001d16f:	5b                   	pop    ebx
c001d170:	5e                   	pop    esi
c001d171:	ff e0                	jmp    eax
c001d173:	90                   	nop

c001d174 <userModeEntryPoint(void*)>:
c001d174:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001d179:	48                   	dec    eax
c001d17a:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001d17f:	75 01                	jne    c001d182 <userModeEntryPoint(void*)+0xe>
c001d181:	fb                   	sti    
c001d182:	fb                   	sti    
c001d183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d188:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d18b:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d191:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d195:	e9 90 31 fe ff       	jmp    c000032a <goToUsermode>

c001d19a <changeTSS>:
c001d19a:	83 ec 14             	sub    esp,0x14
c001d19d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1a2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d1a5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d1aa:	c1 e2 15             	shl    edx,0x15
c001d1ad:	29 d0                	sub    eax,edx
c001d1af:	50                   	push   eax
c001d1b0:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001d1b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1bb:	05 7c 11 00 00       	add    eax,0x117c
c001d1c0:	50                   	push   eax
c001d1c1:	e8 52 39 ff ff       	call   c0010b18 <TSS::setESP(unsigned long)>
c001d1c6:	83 c4 1c             	add    esp,0x1c
c001d1c9:	c3                   	ret    

c001d1ca <switchToThread(ThreadControlBlock*)>:
c001d1ca:	57                   	push   edi
c001d1cb:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001d1d0:	56                   	push   esi
c001d1d1:	85 c0                	test   eax,eax
c001d1d3:	53                   	push   ebx
c001d1d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1d8:	0f 85 88 00 00 00    	jne    c001d266 <switchToThread(ThreadControlBlock*)+0x9c>
c001d1de:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d1e1:	3c ff                	cmp    al,0xff
c001d1e3:	74 7d                	je     c001d262 <switchToThread(ThreadControlBlock*)+0x98>
c001d1e5:	0f b6 d0             	movzx  edx,al
c001d1e8:	b8 84 03 00 00       	mov    eax,0x384
c001d1ed:	29 d0                	sub    eax,edx
c001d1ef:	c1 e0 10             	shl    eax,0x10
c001d1f2:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d1f5:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d1f8:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c001d1fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d203:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d20a:	74 4a                	je     c001d256 <switchToThread(ThreadControlBlock*)+0x8c>
c001d20c:	0f 31                	rdtsc  
c001d20e:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001d213:	89 c6                	mov    esi,eax
c001d215:	89 d7                	mov    edi,edx
c001d217:	2b 35 98 0c 03 c0    	sub    esi,DWORD PTR ds:0xc0030c98
c001d21d:	89 15 ac 0c 03 c0    	mov    DWORD PTR ds:0xc0030cac,edx
c001d223:	1b 3d 9c 0c 03 c0    	sbb    edi,DWORD PTR ds:0xc0030c9c
c001d229:	89 35 a0 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca0,esi
c001d22f:	a3 98 0c 03 c0       	mov    ds:0xc0030c98,eax
c001d234:	89 3d a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,edi
c001d23a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d240:	89 15 9c 0c 03 c0    	mov    DWORD PTR ds:0xc0030c9c,edx
c001d246:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d249:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d24c:	01 c6                	add    esi,eax
c001d24e:	11 d7                	adc    edi,edx
c001d250:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d253:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d256:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d25a:	5b                   	pop    ebx
c001d25b:	5e                   	pop    esi
c001d25c:	5f                   	pop    edi
c001d25d:	e9 00 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d262:	31 c0                	xor    eax,eax
c001d264:	eb 8f                	jmp    c001d1f5 <switchToThread(ThreadControlBlock*)+0x2b>
c001d266:	5b                   	pop    ebx
c001d267:	c7 05 60 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x1
c001d271:	5e                   	pop    esi
c001d272:	5f                   	pop    edi
c001d273:	c3                   	ret    

c001d274 <Process::addArgs(char**)>:
c001d274:	57                   	push   edi
c001d275:	56                   	push   esi
c001d276:	53                   	push   ebx
c001d277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d27b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d27f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d289:	85 ff                	test   edi,edi
c001d28b:	74 3d                	je     c001d2ca <Process::addArgs(char**)+0x56>
c001d28d:	8b 07                	mov    eax,DWORD PTR [edi]
c001d28f:	85 c0                	test   eax,eax
c001d291:	74 37                	je     c001d2ca <Process::addArgs(char**)+0x56>
c001d293:	31 db                	xor    ebx,ebx
c001d295:	83 ec 0c             	sub    esp,0xc
c001d298:	50                   	push   eax
c001d299:	e8 ce 34 fe ff       	call   c000076c <strlen>
c001d29e:	40                   	inc    eax
c001d29f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2a2:	e8 f2 22 ff ff       	call   c000f599 <malloc>
c001d2a7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d2ae:	5a                   	pop    edx
c001d2af:	59                   	pop    ecx
c001d2b0:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d2b3:	43                   	inc    ebx
c001d2b4:	50                   	push   eax
c001d2b5:	e8 52 35 fe ff       	call   c000080c <strcpy>
c001d2ba:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d2c0:	83 c4 10             	add    esp,0x10
c001d2c3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d2c6:	85 c0                	test   eax,eax
c001d2c8:	75 cb                	jne    c001d295 <Process::addArgs(char**)+0x21>
c001d2ca:	5b                   	pop    ebx
c001d2cb:	5e                   	pop    esi
c001d2cc:	5f                   	pop    edi
c001d2cd:	c3                   	ret    

c001d2ce <Process::Process(char const*, Process*, char**)>:
c001d2ce:	56                   	push   esi
c001d2cf:	53                   	push   ebx
c001d2d0:	83 ec 14             	sub    esp,0x14
c001d2d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d7:	05 0c 02 00 00       	add    eax,0x20c
c001d2dc:	bb 07 00 00 00       	mov    ebx,0x7
c001d2e1:	89 c6                	mov    esi,eax
c001d2e3:	85 db                	test   ebx,ebx
c001d2e5:	78 12                	js     c001d2f9 <Process::Process(char const*, Process*, char**)+0x2b>
c001d2e7:	83 ec 0c             	sub    esp,0xc
c001d2ea:	56                   	push   esi
c001d2eb:	e8 96 b6 00 00       	call   c0028986 <ThreadControlBlock::ThreadControlBlock()>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	83 c6 63             	add    esi,0x63
c001d2f6:	4b                   	dec    ebx
c001d2f7:	eb ea                	jmp    c001d2e3 <Process::Process(char const*, Process*, char**)+0x15>
c001d2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d304:	83 ec 0c             	sub    esp,0xc
c001d307:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d30b:	e8 be c8 ff ff       	call   c0019bce <Krnl::newProcessEnv(Process*)>
c001d310:	83 c4 10             	add    esp,0x10
c001d313:	89 c2                	mov    edx,eax
c001d315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d319:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d31f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d323:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d32c:	a1 d0 cc 02 c0       	mov    eax,ds:0xc002ccd0
c001d331:	8d 50 01             	lea    edx,[eax+0x1]
c001d334:	89 15 d0 cc 02 c0    	mov    DWORD PTR ds:0xc002ccd0,edx
c001d33a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d33e:	89 02                	mov    DWORD PTR [edx],eax
c001d340:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d348:	83 ec 0c             	sub    esp,0xc
c001d34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d34f:	e8 45 22 ff ff       	call   c000f599 <malloc>
c001d354:	83 c4 10             	add    esp,0x10
c001d357:	89 c3                	mov    ebx,eax
c001d359:	83 ec 08             	sub    esp,0x8
c001d35c:	6a 00                	push   0x0
c001d35e:	53                   	push   ebx
c001d35f:	e8 c6 4a ff ff       	call   c0011e2a <VAS::VAS(bool)>
c001d364:	83 c4 10             	add    esp,0x10
c001d367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d36b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d375:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d37f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d383:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d387:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d38d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d391:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d397:	85 c0                	test   eax,eax
c001d399:	74 42                	je     c001d3dd <Process::Process(char const*, Process*, char**)+0x10f>
c001d39b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3a5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3af:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3bf:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c9:	05 0c 01 00 00       	add    eax,0x10c
c001d3ce:	83 ec 08             	sub    esp,0x8
c001d3d1:	52                   	push   edx
c001d3d2:	50                   	push   eax
c001d3d3:	e8 34 34 fe ff       	call   c000080c <strcpy>
c001d3d8:	83 c4 10             	add    esp,0x10
c001d3db:	eb 63                	jmp    c001d440 <Process::Process(char const*, Process*, char**)+0x172>
c001d3dd:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d3e5:	83 ec 0c             	sub    esp,0xc
c001d3e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d3ec:	e8 a8 21 ff ff       	call   c000f599 <malloc>
c001d3f1:	83 c4 10             	add    esp,0x10
c001d3f4:	89 c3                	mov    ebx,eax
c001d3f6:	83 ec 08             	sub    esp,0x8
c001d3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3fd:	53                   	push   ebx
c001d3fe:	e8 29 34 ff ff       	call   c001082c <VgaText::VgaText(char const*)>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d40a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d414:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	50                   	push   eax
c001d41e:	e8 c8 2b ff ff       	call   c000ffeb <addToTerminalCycle(VgaText*)>
c001d423:	83 c4 10             	add    esp,0x10
c001d426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d42a:	05 0c 01 00 00       	add    eax,0x10c
c001d42f:	83 ec 08             	sub    esp,0x8
c001d432:	68 48 b9 02 c0       	push   0xc002b948
c001d437:	50                   	push   eax
c001d438:	e8 cf 33 fe ff       	call   c000080c <strcpy>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d444:	83 c0 0c             	add    eax,0xc
c001d447:	83 ec 08             	sub    esp,0x8
c001d44a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44e:	50                   	push   eax
c001d44f:	e8 b8 33 fe ff       	call   c000080c <strcpy>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	83 ec 08             	sub    esp,0x8
c001d45a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d45e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d462:	e8 0d fe ff ff       	call   c001d274 <Process::addArgs(char**)>
c001d467:	83 c4 10             	add    esp,0x10
c001d46a:	83 ec 08             	sub    esp,0x8
c001d46d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d471:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d475:	e8 a6 ed ff ff       	call   c001c220 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d481:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d485:	83 f0 01             	xor    eax,0x1
c001d488:	88 c2                	mov    dl,al
c001d48a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d48e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d494:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d499:	83 ec 08             	sub    esp,0x8
c001d49c:	50                   	push   eax
c001d49d:	68 a0 b9 02 c0       	push   0xc002b9a0
c001d4a2:	e8 32 51 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001d4a7:	83 c4 10             	add    esp,0x10
c001d4aa:	90                   	nop
c001d4ab:	83 c4 14             	add    esp,0x14
c001d4ae:	5b                   	pop    ebx
c001d4af:	5e                   	pop    esi
c001d4b0:	c3                   	ret    
c001d4b1:	90                   	nop

c001d4b2 <Process::Process(bool, char const*, Process*, char**)>:
c001d4b2:	56                   	push   esi
c001d4b3:	53                   	push   ebx
c001d4b4:	83 ec 24             	sub    esp,0x24
c001d4b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d4bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4c3:	05 0c 02 00 00       	add    eax,0x20c
c001d4c8:	bb 07 00 00 00       	mov    ebx,0x7
c001d4cd:	89 c6                	mov    esi,eax
c001d4cf:	85 db                	test   ebx,ebx
c001d4d1:	78 12                	js     c001d4e5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	56                   	push   esi
c001d4d7:	e8 aa b4 00 00       	call   c0028986 <ThreadControlBlock::ThreadControlBlock()>
c001d4dc:	83 c4 10             	add    esp,0x10
c001d4df:	83 c6 63             	add    esi,0x63
c001d4e2:	4b                   	dec    ebx
c001d4e3:	eb ea                	jmp    c001d4cf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d4e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4e9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4f7:	e8 d2 c6 ff ff       	call   c0019bce <Krnl::newProcessEnv(Process*)>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	89 c2                	mov    edx,eax
c001d501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d505:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d50b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d50f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d518:	a1 d0 cc 02 c0       	mov    eax,ds:0xc002ccd0
c001d51d:	8d 50 01             	lea    edx,[eax+0x1]
c001d520:	89 15 d0 cc 02 c0    	mov    DWORD PTR ds:0xc002ccd0,edx
c001d526:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d52a:	89 02                	mov    DWORD PTR [edx],eax
c001d52c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d534:	83 ec 0c             	sub    esp,0xc
c001d537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d53b:	e8 59 20 ff ff       	call   c000f599 <malloc>
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	89 c3                	mov    ebx,eax
c001d545:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d54a:	83 ec 08             	sub    esp,0x8
c001d54d:	50                   	push   eax
c001d54e:	53                   	push   ebx
c001d54f:	e8 d6 48 ff ff       	call   c0011e2a <VAS::VAS(bool)>
c001d554:	83 c4 10             	add    esp,0x10
c001d557:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d55b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d561:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d565:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d56f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d573:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d577:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d57d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d581:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d587:	85 c0                	test   eax,eax
c001d589:	74 42                	je     c001d5cd <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d58b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d58f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d595:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d59f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d5a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5af:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d5b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b9:	05 0c 01 00 00       	add    eax,0x10c
c001d5be:	83 ec 08             	sub    esp,0x8
c001d5c1:	52                   	push   edx
c001d5c2:	50                   	push   eax
c001d5c3:	e8 44 32 fe ff       	call   c000080c <strcpy>
c001d5c8:	83 c4 10             	add    esp,0x10
c001d5cb:	eb 63                	jmp    c001d630 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d5cd:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d5d5:	83 ec 0c             	sub    esp,0xc
c001d5d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d5dc:	e8 b8 1f ff ff       	call   c000f599 <malloc>
c001d5e1:	83 c4 10             	add    esp,0x10
c001d5e4:	89 c3                	mov    ebx,eax
c001d5e6:	83 ec 08             	sub    esp,0x8
c001d5e9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5ed:	53                   	push   ebx
c001d5ee:	e8 39 32 ff ff       	call   c001082c <VgaText::VgaText(char const*)>
c001d5f3:	83 c4 10             	add    esp,0x10
c001d5f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5fa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d600:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d604:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d60a:	83 ec 0c             	sub    esp,0xc
c001d60d:	50                   	push   eax
c001d60e:	e8 d8 29 ff ff       	call   c000ffeb <addToTerminalCycle(VgaText*)>
c001d613:	83 c4 10             	add    esp,0x10
c001d616:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d61a:	05 0c 01 00 00       	add    eax,0x10c
c001d61f:	83 ec 08             	sub    esp,0x8
c001d622:	68 48 b9 02 c0       	push   0xc002b948
c001d627:	50                   	push   eax
c001d628:	e8 df 31 fe ff       	call   c000080c <strcpy>
c001d62d:	83 c4 10             	add    esp,0x10
c001d630:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d634:	83 c0 0c             	add    eax,0xc
c001d637:	83 ec 08             	sub    esp,0x8
c001d63a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d63e:	50                   	push   eax
c001d63f:	e8 c8 31 fe ff       	call   c000080c <strcpy>
c001d644:	83 c4 10             	add    esp,0x10
c001d647:	83 ec 08             	sub    esp,0x8
c001d64a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d64e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d652:	e8 1d fc ff ff       	call   c001d274 <Process::addArgs(char**)>
c001d657:	83 c4 10             	add    esp,0x10
c001d65a:	90                   	nop
c001d65b:	83 c4 24             	add    esp,0x24
c001d65e:	5b                   	pop    ebx
c001d65f:	5e                   	pop    esi
c001d660:	c3                   	ret    

c001d661 <taskStartupFunction>:
c001d661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d666:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d669:	c3                   	ret    

c001d66a <Semaphore::Semaphore(int)>:
c001d66a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d66e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d672:	89 10                	mov    DWORD PTR [eax],edx
c001d674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d678:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d683:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d68e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d695:	90                   	nop
c001d696:	c3                   	ret    
c001d697:	90                   	nop

c001d698 <Mutex::Mutex()>:
c001d698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d69c:	6a 01                	push   0x1
c001d69e:	50                   	push   eax
c001d69f:	e8 c6 ff ff ff       	call   c001d66a <Semaphore::Semaphore(int)>
c001d6a4:	83 c4 08             	add    esp,0x8
c001d6a7:	90                   	nop
c001d6a8:	c3                   	ret    
c001d6a9:	90                   	nop

c001d6aa <Process::createThread(void (*)(void*), void*, int)>:
c001d6aa:	55                   	push   ebp
c001d6ab:	31 c9                	xor    ecx,ecx
c001d6ad:	57                   	push   edi
c001d6ae:	56                   	push   esi
c001d6af:	53                   	push   ebx
c001d6b0:	83 ec 1c             	sub    esp,0x1c
c001d6b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6b7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d6be:	89 f2                	mov    edx,esi
c001d6c0:	0f b7 c2             	movzx  eax,dx
c001d6c3:	83 e2 01             	and    edx,0x1
c001d6c6:	74 16                	je     c001d6de <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d6c8:	d1 f8                	sar    eax,1
c001d6ca:	41                   	inc    ecx
c001d6cb:	89 c2                	mov    edx,eax
c001d6cd:	83 f9 10             	cmp    ecx,0x10
c001d6d0:	75 ee                	jne    c001d6c0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d6d2:	83 c4 1c             	add    esp,0x1c
c001d6d5:	31 db                	xor    ebx,ebx
c001d6d7:	89 d8                	mov    eax,ebx
c001d6d9:	5b                   	pop    ebx
c001d6da:	5e                   	pop    esi
c001d6db:	5f                   	pop    edi
c001d6dc:	5d                   	pop    ebp
c001d6dd:	c3                   	ret    
c001d6de:	b8 01 00 00 00       	mov    eax,0x1
c001d6e3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d6e6:	d3 e0                	shl    eax,cl
c001d6e8:	09 c6                	or     esi,eax
c001d6ea:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d6ed:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d6f4:	89 c6                	mov    esi,eax
c001d6f6:	c1 e6 05             	shl    esi,0x5
c001d6f9:	01 f0                	add    eax,esi
c001d6fb:	01 d8                	add    eax,ebx
c001d6fd:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d704:	75 0a                	jne    c001d710 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d706:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d710:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d716:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d71a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d71d:	01 ca                	add    edx,ecx
c001d71f:	83 ec 08             	sub    esp,0x8
c001d722:	89 d0                	mov    eax,edx
c001d724:	c1 e0 05             	shl    eax,0x5
c001d727:	01 d0                	add    eax,edx
c001d729:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d72d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d731:	01 d8                	add    eax,ebx
c001d733:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d739:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d73f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d745:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d74b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d751:	89 cd                	mov    ebp,ecx
c001d753:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d757:	f7 dd                	neg    ebp
c001d759:	c1 e5 15             	shl    ebp,0x15
c001d75c:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d762:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d768:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d772:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d778:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d782:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d78c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d790:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d797:	53                   	push   ebx
c001d798:	68 84 0c 03 c0       	push   0xc0030c84
c001d79d:	e8 9e af 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7a2:	89 d8                	mov    eax,ebx
c001d7a4:	83 c4 10             	add    esp,0x10
c001d7a7:	83 c4 1c             	add    esp,0x1c
c001d7aa:	5b                   	pop    ebx
c001d7ab:	5e                   	pop    esi
c001d7ac:	5f                   	pop    edi
c001d7ad:	5d                   	pop    ebp
c001d7ae:	c3                   	ret    
c001d7af:	90                   	nop

c001d7b0 <Process::createUserThread()>:
c001d7b0:	83 ec 0c             	sub    esp,0xc
c001d7b3:	68 80 00 00 00       	push   0x80
c001d7b8:	6a 00                	push   0x0
c001d7ba:	68 74 d1 01 c0       	push   0xc001d174
c001d7bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7c3:	e8 e2 fe ff ff       	call   c001d6aa <Process::createThread(void (*)(void*), void*, int)>
c001d7c8:	83 c4 1c             	add    esp,0x1c
c001d7cb:	c3                   	ret    

c001d7cc <setupMultitasking(void (*)())>:
c001d7cc:	56                   	push   esi
c001d7cd:	53                   	push   ebx
c001d7ce:	51                   	push   ecx
c001d7cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7d3:	eb 10                	jmp    c001d7e5 <setupMultitasking(void (*)())+0x19>
c001d7d5:	83 ec 0c             	sub    esp,0xc
c001d7d8:	68 84 0c 03 c0       	push   0xc0030c84
c001d7dd:	e8 b0 ae 00 00       	call   c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	83 ec 0c             	sub    esp,0xc
c001d7e8:	68 84 0c 03 c0       	push   0xc0030c84
c001d7ed:	e8 7c ae 00 00       	call   c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d7f2:	83 c4 10             	add    esp,0x10
c001d7f5:	84 c0                	test   al,al
c001d7f7:	74 dc                	je     c001d7d5 <setupMultitasking(void (*)())+0x9>
c001d7f9:	83 ec 0c             	sub    esp,0xc
c001d7fc:	68 3f 07 00 00       	push   0x73f
c001d801:	e8 93 1d ff ff       	call   c000f599 <malloc>
c001d806:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d80d:	89 c3                	mov    ebx,eax
c001d80f:	6a 00                	push   0x0
c001d811:	68 4c b9 02 c0       	push   0xc002b94c
c001d816:	6a 01                	push   0x1
c001d818:	50                   	push   eax
c001d819:	e8 94 fc ff ff       	call   c001d4b2 <Process::Process(bool, char const*, Process*, char**)>
c001d81e:	83 c4 14             	add    esp,0x14
c001d821:	89 1d 90 0c 03 c0    	mov    DWORD PTR ds:0xc0030c90,ebx
c001d827:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d82d:	e8 c7 2a ff ff       	call   c00102f9 <setActiveTerminal(VgaText*)>
c001d832:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d83a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d844:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d84a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d84d:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d857:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d85d:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d863:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d86d:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d877:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d881:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d887:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d891:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d897:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d8a1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d8a7:	58                   	pop    eax
c001d8a8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d8ae:	5a                   	pop    edx
c001d8af:	68 48 b9 02 c0       	push   0xc002b948
c001d8b4:	50                   	push   eax
c001d8b5:	e8 52 2f fe ff       	call   c000080c <strcpy>
c001d8ba:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d8c1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d8c5:	83 c4 14             	add    esp,0x14
c001d8c8:	5b                   	pop    ebx
c001d8c9:	5e                   	pop    esi
c001d8ca:	e9 85 2a fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d8cf <schedule()>:
c001d8cf:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001d8d4:	85 c0                	test   eax,eax
c001d8d6:	74 0b                	je     c001d8e3 <schedule()+0x14>
c001d8d8:	c7 05 60 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x1
c001d8e2:	c3                   	ret    
c001d8e3:	53                   	push   ebx
c001d8e4:	83 ec 14             	sub    esp,0x14
c001d8e7:	68 84 0c 03 c0       	push   0xc0030c84
c001d8ec:	e8 7d ad 00 00       	call   c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8f1:	83 c4 10             	add    esp,0x10
c001d8f4:	84 c0                	test   al,al
c001d8f6:	75 38                	jne    c001d930 <schedule()+0x61>
c001d8f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d900:	4a                   	dec    edx
c001d901:	74 32                	je     c001d935 <schedule()+0x66>
c001d903:	83 ec 0c             	sub    esp,0xc
c001d906:	68 84 0c 03 c0       	push   0xc0030c84
c001d90b:	e8 7a ad 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d910:	c7 04 24 84 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c84
c001d917:	89 c3                	mov    ebx,eax
c001d919:	e8 74 ad 00 00       	call   c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d91e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d925:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d928:	e8 9d f8 ff ff       	call   c001d1ca <switchToThread(ThreadControlBlock*)>
c001d92d:	83 c4 10             	add    esp,0x10
c001d930:	83 c4 08             	add    esp,0x8
c001d933:	5b                   	pop    ebx
c001d934:	c3                   	ret    
c001d935:	83 ec 08             	sub    esp,0x8
c001d938:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d93f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d945:	68 84 0c 03 c0       	push   0xc0030c84
c001d94a:	e8 f1 ad 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d94f:	83 c4 10             	add    esp,0x10
c001d952:	eb af                	jmp    c001d903 <schedule()+0x34>

c001d954 <Semaphore::tryAcquire()>:
c001d954:	53                   	push   ebx
c001d955:	83 ec 08             	sub    esp,0x8
c001d958:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d95c:	fa                   	cli    
c001d95d:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001d962:	8d 50 01             	lea    edx,[eax+0x1]
c001d965:	89 15 68 0c 03 c0    	mov    DWORD PTR ds:0xc0030c68,edx
c001d96b:	8b 15 64 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c64
c001d971:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d974:	89 1d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,ebx
c001d97a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d97d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d97f:	7c 2a                	jl     c001d9ab <Semaphore::tryAcquire()+0x57>
c001d981:	89 15 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,edx
c001d987:	85 d2                	test   edx,edx
c001d989:	75 0a                	jne    c001d995 <Semaphore::tryAcquire()+0x41>
c001d98b:	8b 15 60 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c60
c001d991:	85 d2                	test   edx,edx
c001d993:	75 5b                	jne    c001d9f0 <Semaphore::tryAcquire()+0x9c>
c001d995:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001d99a:	85 c0                	test   eax,eax
c001d99c:	74 07                	je     c001d9a5 <Semaphore::tryAcquire()+0x51>
c001d99e:	31 c0                	xor    eax,eax
c001d9a0:	83 c4 08             	add    esp,0x8
c001d9a3:	5b                   	pop    ebx
c001d9a4:	c3                   	ret    
c001d9a5:	fb                   	sti    
c001d9a6:	83 c4 08             	add    esp,0x8
c001d9a9:	5b                   	pop    ebx
c001d9aa:	c3                   	ret    
c001d9ab:	43                   	inc    ebx
c001d9ac:	89 15 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,edx
c001d9b2:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d9b5:	85 d2                	test   edx,edx
c001d9b7:	75 1f                	jne    c001d9d8 <Semaphore::tryAcquire()+0x84>
c001d9b9:	8b 0d 60 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030c60
c001d9bf:	85 c9                	test   ecx,ecx
c001d9c1:	74 15                	je     c001d9d8 <Semaphore::tryAcquire()+0x84>
c001d9c3:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001d9cd:	e8 fd fe ff ff       	call   c001d8cf <schedule()>
c001d9d2:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001d9d7:	48                   	dec    eax
c001d9d8:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001d9dd:	85 c0                	test   eax,eax
c001d9df:	75 08                	jne    c001d9e9 <Semaphore::tryAcquire()+0x95>
c001d9e1:	fb                   	sti    
c001d9e2:	b0 01                	mov    al,0x1
c001d9e4:	83 c4 08             	add    esp,0x8
c001d9e7:	5b                   	pop    ebx
c001d9e8:	c3                   	ret    
c001d9e9:	b0 01                	mov    al,0x1
c001d9eb:	83 c4 08             	add    esp,0x8
c001d9ee:	5b                   	pop    ebx
c001d9ef:	c3                   	ret    
c001d9f0:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001d9fa:	e8 d0 fe ff ff       	call   c001d8cf <schedule()>
c001d9ff:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001da04:	48                   	dec    eax
c001da05:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001da0a:	85 c0                	test   eax,eax
c001da0c:	75 90                	jne    c001d99e <Semaphore::tryAcquire()+0x4a>
c001da0e:	eb 95                	jmp    c001d9a5 <Semaphore::tryAcquire()+0x51>

c001da10 <Semaphore::assertLocked(char const*)>:
c001da10:	83 ec 0c             	sub    esp,0xc
c001da13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da17:	fa                   	cli    
c001da18:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001da1e:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001da23:	8d 48 01             	lea    ecx,[eax+0x1]
c001da26:	89 0d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,ecx
c001da2c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001da2e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001da31:	7c 24                	jl     c001da57 <Semaphore::assertLocked(char const*)+0x47>
c001da33:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001da38:	85 c0                	test   eax,eax
c001da3a:	75 09                	jne    c001da45 <Semaphore::assertLocked(char const*)+0x35>
c001da3c:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001da41:	85 c0                	test   eax,eax
c001da43:	75 29                	jne    c001da6e <Semaphore::assertLocked(char const*)+0x5e>
c001da45:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001da4a:	48                   	dec    eax
c001da4b:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001da50:	75 01                	jne    c001da53 <Semaphore::assertLocked(char const*)+0x43>
c001da52:	fb                   	sti    
c001da53:	83 c4 0c             	add    esp,0xc
c001da56:	c3                   	ret    
c001da57:	83 ec 0c             	sub    esp,0xc
c001da5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da5e:	e8 e2 c2 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001da63:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001da68:	83 c4 10             	add    esp,0x10
c001da6b:	48                   	dec    eax
c001da6c:	eb c5                	jmp    c001da33 <Semaphore::assertLocked(char const*)+0x23>
c001da6e:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001da78:	e8 52 fe ff ff       	call   c001d8cf <schedule()>
c001da7d:	eb c6                	jmp    c001da45 <Semaphore::assertLocked(char const*)+0x35>

c001da7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001da7f:	83 ec 0c             	sub    esp,0xc
c001da82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da8b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da8e:	e8 3c fe ff ff       	call   c001d8cf <schedule()>
c001da93:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001da98:	48                   	dec    eax
c001da99:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001da9e:	75 01                	jne    c001daa1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001daa0:	fb                   	sti    
c001daa1:	83 c4 0c             	add    esp,0xc
c001daa4:	c3                   	ret    

c001daa5 <blockTask(TaskState)>:
c001daa5:	83 ec 0c             	sub    esp,0xc
c001daa8:	fa                   	cli    
c001daa9:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001daaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dab8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dabb:	e8 0f fe ff ff       	call   c001d8cf <schedule()>
c001dac0:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001dac5:	48                   	dec    eax
c001dac6:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001dacb:	75 01                	jne    c001dace <blockTask(TaskState)+0x29>
c001dacd:	fb                   	sti    
c001dace:	83 c4 0c             	add    esp,0xc
c001dad1:	c3                   	ret    

c001dad2 <waitTask(int, int*, int)>:
c001dad2:	83 ec 18             	sub    esp,0x18
c001dad5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dada:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dade:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dae1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dae5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daea:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001daed:	6a 07                	push   0x7
c001daef:	e8 b1 ff ff ff       	call   c001daa5 <blockTask(TaskState)>
c001daf4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001daff:	85 d2                	test   edx,edx
c001db01:	74 0a                	je     c001db0d <waitTask(int, int*, int)+0x3b>
c001db03:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001db06:	89 02                	mov    DWORD PTR [edx],eax
c001db08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db0d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001db10:	83 c4 0c             	add    esp,0xc
c001db13:	c3                   	ret    

c001db14 <nanoSleepUntil(unsigned long long)>:
c001db14:	83 ec 0c             	sub    esp,0xc
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db1f:	3b 05 b0 dd 02 c0    	cmp    eax,DWORD PTR ds:0xc002ddb0
c001db25:	89 d1                	mov    ecx,edx
c001db27:	1b 0d b4 dd 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ddb4
c001db2d:	73 04                	jae    c001db33 <nanoSleepUntil(unsigned long long)+0x1f>
c001db2f:	83 c4 0c             	add    esp,0xc
c001db32:	c3                   	ret    
c001db33:	fa                   	cli    
c001db34:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001db3a:	83 ec 08             	sub    esp,0x8
c001db3d:	ff 05 64 0c 03 c0    	inc    DWORD PTR ds:0xc0030c64
c001db43:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db49:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001db4c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001db4f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db55:	68 78 0c 03 c0       	push   0xc0030c78
c001db5a:	e8 e1 ab 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db5f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001db66:	e8 3a ff ff ff       	call   c001daa5 <blockTask(TaskState)>
c001db6b:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001db70:	83 c4 10             	add    esp,0x10
c001db73:	48                   	dec    eax
c001db74:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001db79:	85 c0                	test   eax,eax
c001db7b:	75 09                	jne    c001db86 <nanoSleepUntil(unsigned long long)+0x72>
c001db7d:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001db82:	85 c0                	test   eax,eax
c001db84:	75 12                	jne    c001db98 <nanoSleepUntil(unsigned long long)+0x84>
c001db86:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001db8b:	48                   	dec    eax
c001db8c:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001db91:	75 9c                	jne    c001db2f <nanoSleepUntil(unsigned long long)+0x1b>
c001db93:	fb                   	sti    
c001db94:	83 c4 0c             	add    esp,0xc
c001db97:	c3                   	ret    
c001db98:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001dba2:	e8 28 fd ff ff       	call   c001d8cf <schedule()>
c001dba7:	eb dd                	jmp    c001db86 <nanoSleepUntil(unsigned long long)+0x72>

c001dba9 <nanoSleep(unsigned long long)>:
c001dba9:	a1 b0 dd 02 c0       	mov    eax,ds:0xc002ddb0
c001dbae:	8b 15 b4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddb4
c001dbb4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dbb8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dbbc:	e9 53 ff ff ff       	jmp    c001db14 <nanoSleepUntil(unsigned long long)>

c001dbc1 <sleep(unsigned long long)>:
c001dbc1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dbc9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dbce:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dbd2:	01 ca                	add    edx,ecx
c001dbd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbd8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dbdc:	eb cb                	jmp    c001dba9 <nanoSleep(unsigned long long)>

c001dbde <Semaphore::acquire()>:
c001dbde:	83 ec 0c             	sub    esp,0xc
c001dbe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbe5:	fa                   	cli    
c001dbe6:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001dbeb:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001dbf1:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbf4:	89 0d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,ecx
c001dbfa:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dbfd:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dbff:	7d 28                	jge    c001dc29 <Semaphore::acquire()+0x4b>
c001dc01:	41                   	inc    ecx
c001dc02:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dc05:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001dc0a:	85 c0                	test   eax,eax
c001dc0c:	75 09                	jne    c001dc17 <Semaphore::acquire()+0x39>
c001dc0e:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001dc13:	85 c0                	test   eax,eax
c001dc15:	75 4e                	jne    c001dc65 <Semaphore::acquire()+0x87>
c001dc17:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001dc1c:	48                   	dec    eax
c001dc1d:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001dc22:	75 01                	jne    c001dc25 <Semaphore::acquire()+0x47>
c001dc24:	fb                   	sti    
c001dc25:	83 c4 0c             	add    esp,0xc
c001dc28:	c3                   	ret    
c001dc29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc2e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dc35:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dc38:	85 c9                	test   ecx,ecx
c001dc3a:	74 3a                	je     c001dc76 <Semaphore::acquire()+0x98>
c001dc3c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dc3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc45:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dc48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc4d:	83 ec 0c             	sub    esp,0xc
c001dc50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dc53:	6a 05                	push   0x5
c001dc55:	e8 4b fe ff ff       	call   c001daa5 <blockTask(TaskState)>
c001dc5a:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001dc5f:	83 c4 10             	add    esp,0x10
c001dc62:	48                   	dec    eax
c001dc63:	eb a0                	jmp    c001dc05 <Semaphore::acquire()+0x27>
c001dc65:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001dc6f:	e8 5b fc ff ff       	call   c001d8cf <schedule()>
c001dc74:	eb a1                	jmp    c001dc17 <Semaphore::acquire()+0x39>
c001dc76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc7b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dc7e:	eb c8                	jmp    c001dc48 <Semaphore::acquire()+0x6a>

c001dc80 <taskReturned>:
c001dc80:	83 ec 18             	sub    esp,0x18
c001dc83:	68 c8 b9 02 c0       	push   0xc002b9c8
c001dc88:	e8 b8 c0 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001dc8d:	83 c4 10             	add    esp,0x10
c001dc90:	83 ec 0c             	sub    esp,0xc
c001dc93:	6a 02                	push   0x2
c001dc95:	e8 0b fe ff ff       	call   c001daa5 <blockTask(TaskState)>
c001dc9a:	fa                   	cli    
c001dc9b:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001dca1:	e8 29 fc ff ff       	call   c001d8cf <schedule()>
c001dca6:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001dcab:	83 c4 10             	add    esp,0x10
c001dcae:	48                   	dec    eax
c001dcaf:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001dcb4:	85 c0                	test   eax,eax
c001dcb6:	75 d8                	jne    c001dc90 <taskReturned+0x10>
c001dcb8:	fb                   	sti    
c001dcb9:	eb d5                	jmp    c001dc90 <taskReturned+0x10>

c001dcbb <Thr::processFromPID(int)>:
c001dcbb:	57                   	push   edi
c001dcbc:	56                   	push   esi
c001dcbd:	53                   	push   ebx
c001dcbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcc2:	fa                   	cli    
c001dcc3:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001dcc9:	83 ec 0c             	sub    esp,0xc
c001dccc:	68 84 0c 03 c0       	push   0xc0030c84
c001dcd1:	e8 b4 a9 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcd6:	83 c4 10             	add    esp,0x10
c001dcd9:	89 c7                	mov    edi,eax
c001dcdb:	eb 14                	jmp    c001dcf1 <Thr::processFromPID(int)+0x36>
c001dcdd:	83 ec 0c             	sub    esp,0xc
c001dce0:	68 84 0c 03 c0       	push   0xc0030c84
c001dce5:	e8 a0 a9 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcea:	83 c4 10             	add    esp,0x10
c001dced:	39 f8                	cmp    eax,edi
c001dcef:	74 49                	je     c001dd3a <Thr::processFromPID(int)+0x7f>
c001dcf1:	83 ec 0c             	sub    esp,0xc
c001dcf4:	68 84 0c 03 c0       	push   0xc0030c84
c001dcf9:	e8 8c a9 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcfe:	c7 04 24 84 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c84
c001dd05:	89 c3                	mov    ebx,eax
c001dd07:	e8 86 a9 00 00       	call   c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dd0c:	58                   	pop    eax
c001dd0d:	5a                   	pop    edx
c001dd0e:	53                   	push   ebx
c001dd0f:	68 84 0c 03 c0       	push   0xc0030c84
c001dd14:	e8 27 aa 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd19:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd1c:	83 c4 10             	add    esp,0x10
c001dd1f:	39 30                	cmp    DWORD PTR [eax],esi
c001dd21:	75 ba                	jne    c001dcdd <Thr::processFromPID(int)+0x22>
c001dd23:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001dd28:	48                   	dec    eax
c001dd29:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001dd2e:	74 07                	je     c001dd37 <Thr::processFromPID(int)+0x7c>
c001dd30:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd33:	5b                   	pop    ebx
c001dd34:	5e                   	pop    esi
c001dd35:	5f                   	pop    edi
c001dd36:	c3                   	ret    
c001dd37:	fb                   	sti    
c001dd38:	eb f6                	jmp    c001dd30 <Thr::processFromPID(int)+0x75>
c001dd3a:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001dd3f:	48                   	dec    eax
c001dd40:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001dd45:	75 05                	jne    c001dd4c <Thr::processFromPID(int)+0x91>
c001dd47:	fb                   	sti    
c001dd48:	5b                   	pop    ebx
c001dd49:	5e                   	pop    esi
c001dd4a:	5f                   	pop    edi
c001dd4b:	c3                   	ret    
c001dd4c:	5b                   	pop    ebx
c001dd4d:	31 c0                	xor    eax,eax
c001dd4f:	5e                   	pop    esi
c001dd50:	5f                   	pop    edi
c001dd51:	c3                   	ret    

c001dd52 <unblockTask(ThreadControlBlock*)>:
c001dd52:	53                   	push   ebx
c001dd53:	83 ec 08             	sub    esp,0x8
c001dd56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd5a:	fa                   	cli    
c001dd5b:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001dd61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd64:	85 c0                	test   eax,eax
c001dd66:	74 5a                	je     c001ddc2 <unblockTask(ThreadControlBlock*)+0x70>
c001dd68:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd6b:	48                   	dec    eax
c001dd6c:	74 31                	je     c001dd9f <unblockTask(ThreadControlBlock*)+0x4d>
c001dd6e:	83 ec 0c             	sub    esp,0xc
c001dd71:	68 84 0c 03 c0       	push   0xc0030c84
c001dd76:	e8 0f a9 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	85 c0                	test   eax,eax
c001dd80:	75 17                	jne    c001dd99 <unblockTask(ThreadControlBlock*)+0x47>
c001dd82:	eb 50                	jmp    c001ddd4 <unblockTask(ThreadControlBlock*)+0x82>
c001dd84:	83 ec 08             	sub    esp,0x8
c001dd87:	50                   	push   eax
c001dd88:	68 84 0c 03 c0       	push   0xc0030c84
c001dd8d:	e8 80 ac 00 00       	call   c0028a12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	85 c0                	test   eax,eax
c001dd97:	74 3b                	je     c001ddd4 <unblockTask(ThreadControlBlock*)+0x82>
c001dd99:	39 c3                	cmp    ebx,eax
c001dd9b:	75 e7                	jne    c001dd84 <unblockTask(ThreadControlBlock*)+0x32>
c001dd9d:	eb 10                	jmp    c001ddaf <unblockTask(ThreadControlBlock*)+0x5d>
c001dd9f:	83 ec 0c             	sub    esp,0xc
c001dda2:	68 6a b9 02 c0       	push   0xc002b96a
c001dda7:	e8 2d 48 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001ddb4:	48                   	dec    eax
c001ddb5:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001ddba:	75 01                	jne    c001ddbd <unblockTask(ThreadControlBlock*)+0x6b>
c001ddbc:	fb                   	sti    
c001ddbd:	83 c4 08             	add    esp,0x8
c001ddc0:	5b                   	pop    ebx
c001ddc1:	c3                   	ret    
c001ddc2:	83 ec 0c             	sub    esp,0xc
c001ddc5:	68 53 b9 02 c0       	push   0xc002b953
c001ddca:	e8 0a 48 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	eb db                	jmp    c001ddaf <unblockTask(ThreadControlBlock*)+0x5d>
c001ddd4:	83 ec 08             	sub    esp,0x8
c001ddd7:	53                   	push   ebx
c001ddd8:	68 84 0c 03 c0       	push   0xc0030c84
c001dddd:	e8 5e a9 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dde2:	83 c4 10             	add    esp,0x10
c001dde5:	eb c8                	jmp    c001ddaf <unblockTask(ThreadControlBlock*)+0x5d>

c001dde7 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dde7:	55                   	push   ebp
c001dde8:	57                   	push   edi
c001dde9:	56                   	push   esi
c001ddea:	53                   	push   ebx
c001ddeb:	83 ec 1c             	sub    esp,0x1c
c001ddee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddf2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddf5:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ddfb:	85 ff                	test   edi,edi
c001ddfd:	7e 20                	jle    c001de1f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ddff:	31 f6                	xor    esi,esi
c001de01:	83 ec 0c             	sub    esp,0xc
c001de04:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001de0b:	46                   	inc    esi
c001de0c:	e8 98 17 ff ff       	call   c000f5a9 <free>
c001de11:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de14:	83 c4 10             	add    esp,0x10
c001de17:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001de1d:	7f e2                	jg     c001de01 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001de1f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001de29:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001de2e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001de31:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001de34:	d3 c0                	rol    eax,cl
c001de36:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001de3d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de40:	89 f7                	mov    edi,esi
c001de42:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001de4a:	0f 85 64 01 00 00    	jne    c001dfb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001de50:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001de56:	85 ed                	test   ebp,ebp
c001de58:	74 1b                	je     c001de75 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001de5a:	83 ec 0c             	sub    esp,0xc
c001de5d:	55                   	push   ebp
c001de5e:	e8 87 bc ff ff       	call   c0019aea <EnvVarContainer::~EnvVarContainer()>
c001de63:	59                   	pop    ecx
c001de64:	5e                   	pop    esi
c001de65:	6a 0c                	push   0xc
c001de67:	55                   	push   ebp
c001de68:	e8 94 46 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c001de6d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de70:	83 c4 10             	add    esp,0x10
c001de73:	89 f7                	mov    edi,esi
c001de75:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de7b:	85 c0                	test   eax,eax
c001de7d:	0f 84 aa 00 00 00    	je     c001df2d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de83:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001de86:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de8a:	31 c9                	xor    ecx,ecx
c001de8c:	eb 10                	jmp    c001de9e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001de8e:	41                   	inc    ecx
c001de8f:	83 f9 10             	cmp    ecx,0x10
c001de92:	0f 84 95 00 00 00    	je     c001df2d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de98:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de9e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001dea5:	d3 fa                	sar    edx,cl
c001dea7:	83 e2 01             	and    edx,0x1
c001deaa:	74 e2                	je     c001de8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001deac:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001deaf:	01 ca                	add    edx,ecx
c001deb1:	89 d5                	mov    ebp,edx
c001deb3:	c1 e5 05             	shl    ebp,0x5
c001deb6:	01 ea                	add    edx,ebp
c001deb8:	01 d0                	add    eax,edx
c001deba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dec0:	83 fd 07             	cmp    ebp,0x7
c001dec3:	75 c9                	jne    c001de8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dec5:	05 40 02 00 00       	add    eax,0x240
c001deca:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001decd:	83 fd ff             	cmp    ebp,0xffffffff
c001ded0:	0f 8c e6 00 00 00    	jl     c001dfbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001ded6:	0f 84 97 01 00 00    	je     c001e073 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dedc:	85 ed                	test   ebp,ebp
c001dede:	0f 84 7e 01 00 00    	je     c001e062 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dee4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dee6:	75 a6                	jne    c001de8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dee8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001deee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001def2:	01 d0                	add    eax,edx
c001def4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001def8:	83 ec 0c             	sub    esp,0xc
c001defb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001df01:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df04:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df0a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001df11:	50                   	push   eax
c001df12:	e8 3b fe ff ff       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c001df17:	83 c4 10             	add    esp,0x10
c001df1a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df21:	89 f7                	mov    edi,esi
c001df23:	41                   	inc    ecx
c001df24:	83 f9 10             	cmp    ecx,0x10
c001df27:	0f 85 6b ff ff ff    	jne    c001de98 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001df2d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001df33:	85 c0                	test   eax,eax
c001df35:	74 5d                	je     c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df37:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001df3d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001df43:	74 4f                	je     c001df94 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df45:	83 ec 0c             	sub    esp,0xc
c001df48:	68 84 0c 03 c0       	push   0xc0030c84
c001df4d:	e8 38 a7 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df52:	c7 04 24 84 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c84
c001df59:	89 c7                	mov    edi,eax
c001df5b:	e8 0e a7 00 00       	call   c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	84 c0                	test   al,al
c001df65:	0f 84 c2 00 00 00    	je     c001e02d <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001df6b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df6e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df74:	85 d2                	test   edx,edx
c001df76:	74 0f                	je     c001df87 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	8b 02                	mov    eax,DWORD PTR [edx]
c001df7d:	52                   	push   edx
c001df7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df84:	83 c4 10             	add    esp,0x10
c001df87:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001df91:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001df94:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001df9a:	85 db                	test   ebx,ebx
c001df9c:	74 16                	je     c001dfb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df9e:	83 ec 0c             	sub    esp,0xc
c001dfa1:	53                   	push   ebx
c001dfa2:	e8 5d 38 ff ff       	call   c0011804 <VAS::~VAS()>
c001dfa7:	58                   	pop    eax
c001dfa8:	5a                   	pop    edx
c001dfa9:	6a 14                	push   0x14
c001dfab:	53                   	push   ebx
c001dfac:	e8 50 45 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c001dfb1:	83 c4 10             	add    esp,0x10
c001dfb4:	83 c4 1c             	add    esp,0x1c
c001dfb7:	5b                   	pop    ebx
c001dfb8:	5e                   	pop    esi
c001dfb9:	5f                   	pop    edi
c001dfba:	5d                   	pop    ebp
c001dfbb:	c3                   	ret    
c001dfbc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfc0:	83 ec 0c             	sub    esp,0xc
c001dfc3:	68 fc b9 02 c0       	push   0xc002b9fc
c001dfc8:	e8 78 bd ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001dfcd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dfd0:	83 c4 10             	add    esp,0x10
c001dfd3:	89 f7                	mov    edi,esi
c001dfd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfd9:	e9 b0 fe ff ff       	jmp    c001de8e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfde:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfe4:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dfea:	75 1c                	jne    c001e008 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	68 64 ba 02 c0       	push   0xc002ba64
c001dff4:	e8 e0 45 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001dff9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e000:	e8 a0 fa ff ff       	call   c001daa5 <blockTask(TaskState)>
c001e005:	83 c4 10             	add    esp,0x10
c001e008:	83 ec 08             	sub    esp,0x8
c001e00b:	56                   	push   esi
c001e00c:	68 84 0c 03 c0       	push   0xc0030c84
c001e011:	e8 2a a7 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e016:	c7 04 24 84 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c84
c001e01d:	e8 68 a6 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e022:	83 c4 10             	add    esp,0x10
c001e025:	39 f8                	cmp    eax,edi
c001e027:	0f 84 3e ff ff ff    	je     c001df6b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e02d:	83 ec 0c             	sub    esp,0xc
c001e030:	68 84 0c 03 c0       	push   0xc0030c84
c001e035:	e8 50 a6 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e03a:	c7 04 24 84 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c84
c001e041:	89 c6                	mov    esi,eax
c001e043:	e8 4a a6 00 00       	call   c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e048:	83 c4 10             	add    esp,0x10
c001e04b:	39 f3                	cmp    ebx,esi
c001e04d:	74 b9                	je     c001e008 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e04f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e052:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e055:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e05b:	75 ab                	jne    c001e008 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e05d:	e9 7c ff ff ff       	jmp    c001dfde <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e062:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e066:	83 ec 0c             	sub    esp,0xc
c001e069:	68 30 ba 02 c0       	push   0xc002ba30
c001e06e:	e9 55 ff ff ff       	jmp    c001dfc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e073:	8b 36                	mov    esi,DWORD PTR [esi]
c001e075:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e079:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e07c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e07f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e085:	01 d7                	add    edi,edx
c001e087:	89 f8                	mov    eax,edi
c001e089:	e9 66 fe ff ff       	jmp    c001def4 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e08e <cleanerTaskFunction(void*)>:
c001e08e:	53                   	push   ebx
c001e08f:	83 ec 08             	sub    esp,0x8
c001e092:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e097:	48                   	dec    eax
c001e098:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e09d:	75 01                	jne    c001e0a0 <cleanerTaskFunction(void*)+0x12>
c001e09f:	fb                   	sti    
c001e0a0:	fa                   	cli    
c001e0a1:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e0a6:	80 3d 4c 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c4c,0x0
c001e0ad:	8d 50 01             	lea    edx,[eax+0x1]
c001e0b0:	89 15 68 0c 03 c0    	mov    DWORD PTR ds:0xc0030c68,edx
c001e0b6:	0f 84 a1 00 00 00    	je     c001e15d <cleanerTaskFunction(void*)+0xcf>
c001e0bc:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e0c1:	85 c0                	test   eax,eax
c001e0c3:	75 01                	jne    c001e0c6 <cleanerTaskFunction(void*)+0x38>
c001e0c5:	fb                   	sti    
c001e0c6:	c6 05 4c 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c4c,0x0
c001e0cd:	fa                   	cli    
c001e0ce:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e0d4:	ff 05 64 0c 03 c0    	inc    DWORD PTR ds:0xc0030c64
c001e0da:	fa                   	cli    
c001e0db:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e0e1:	eb 26                	jmp    c001e109 <cleanerTaskFunction(void*)+0x7b>
c001e0e3:	83 ec 0c             	sub    esp,0xc
c001e0e6:	68 6c 0c 03 c0       	push   0xc0030c6c
c001e0eb:	e8 9a a5 00 00       	call   c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0f0:	c7 04 24 6c 0c 03 c0 	mov    DWORD PTR [esp],0xc0030c6c
c001e0f7:	89 c3                	mov    ebx,eax
c001e0f9:	e8 94 a5 00 00       	call   c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e101:	e8 e1 fc ff ff       	call   c001dde7 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e106:	83 c4 10             	add    esp,0x10
c001e109:	83 ec 0c             	sub    esp,0xc
c001e10c:	68 6c 0c 03 c0       	push   0xc0030c6c
c001e111:	e8 58 a5 00 00       	call   c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	84 c0                	test   al,al
c001e11b:	74 c6                	je     c001e0e3 <cleanerTaskFunction(void*)+0x55>
c001e11d:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e122:	48                   	dec    eax
c001e123:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e128:	75 01                	jne    c001e12b <cleanerTaskFunction(void*)+0x9d>
c001e12a:	fb                   	sti    
c001e12b:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001e130:	48                   	dec    eax
c001e131:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001e136:	0f 85 56 ff ff ff    	jne    c001e092 <cleanerTaskFunction(void*)+0x4>
c001e13c:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001e141:	85 c0                	test   eax,eax
c001e143:	0f 84 49 ff ff ff    	je     c001e092 <cleanerTaskFunction(void*)+0x4>
c001e149:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001e153:	e8 77 f7 ff ff       	call   c001d8cf <schedule()>
c001e158:	e9 35 ff ff ff       	jmp    c001e092 <cleanerTaskFunction(void*)+0x4>
c001e15d:	83 ec 0c             	sub    esp,0xc
c001e160:	6a 02                	push   0x2
c001e162:	e8 18 f9 ff ff       	call   c001da7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e167:	83 c4 10             	add    esp,0x10
c001e16a:	e9 57 ff ff ff       	jmp    c001e0c6 <cleanerTaskFunction(void*)+0x38>

c001e16f <terminateTask(int)>:
c001e16f:	83 ec 14             	sub    esp,0x14
c001e172:	fa                   	cli    
c001e173:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e179:	ff 05 64 0c 03 c0    	inc    DWORD PTR ds:0xc0030c64
c001e17f:	fa                   	cli    
c001e180:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e18a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e18f:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e192:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e197:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e19a:	50                   	push   eax
c001e19b:	68 6c 0c 03 c0       	push   0xc0030c6c
c001e1a0:	e8 9b a5 00 00       	call   c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1aa:	83 c4 10             	add    esp,0x10
c001e1ad:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e1b4:	a1 48 0c 03 c0       	mov    eax,ds:0xc0030c48
c001e1b9:	85 c0                	test   eax,eax
c001e1bb:	74 53                	je     c001e210 <terminateTask(int)+0xa1>
c001e1bd:	83 ec 0c             	sub    esp,0xc
c001e1c0:	c6 05 4c 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c4c,0x1
c001e1c7:	50                   	push   eax
c001e1c8:	e8 85 fb ff ff       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c001e1cd:	83 c4 10             	add    esp,0x10
c001e1d0:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e1d5:	48                   	dec    eax
c001e1d6:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e1db:	75 01                	jne    c001e1de <terminateTask(int)+0x6f>
c001e1dd:	fb                   	sti    
c001e1de:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001e1e3:	48                   	dec    eax
c001e1e4:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001e1e9:	75 09                	jne    c001e1f4 <terminateTask(int)+0x85>
c001e1eb:	83 3d 60 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030c60,0x0
c001e1f2:	75 2e                	jne    c001e222 <terminateTask(int)+0xb3>
c001e1f4:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e1f9:	48                   	dec    eax
c001e1fa:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e1ff:	75 01                	jne    c001e202 <terminateTask(int)+0x93>
c001e201:	fb                   	sti    
c001e202:	fa                   	cli    
c001e203:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e209:	e8 c1 f6 ff ff       	call   c001d8cf <schedule()>
c001e20e:	eb e4                	jmp    c001e1f4 <terminateTask(int)+0x85>
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	68 81 b9 02 c0       	push   0xc002b981
c001e218:	e8 bc 43 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001e21d:	83 c4 10             	add    esp,0x10
c001e220:	eb ae                	jmp    c001e1d0 <terminateTask(int)+0x61>
c001e222:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001e22c:	eb db                	jmp    c001e209 <terminateTask(int)+0x9a>

c001e22e <Thr::terminateFromIRQ(int)>:
c001e22e:	83 ec 18             	sub    esp,0x18
c001e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e235:	e8 35 ff ff ff       	call   c001e16f <terminateTask(int)>

c001e23a <Semaphore::release()>:
c001e23a:	83 ec 0c             	sub    esp,0xc
c001e23d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e241:	fa                   	cli    
c001e242:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001e247:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e24d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e250:	89 0d 64 0c 03 c0    	mov    DWORD PTR ds:0xc0030c64,ecx
c001e256:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e259:	85 c9                	test   ecx,ecx
c001e25b:	74 3c                	je     c001e299 <Semaphore::release()+0x5f>
c001e25d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e266:	51                   	push   ecx
c001e267:	e8 e6 fa ff ff       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c001e26c:	a1 64 0c 03 c0       	mov    eax,ds:0xc0030c64
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	48                   	dec    eax
c001e275:	a3 64 0c 03 c0       	mov    ds:0xc0030c64,eax
c001e27a:	85 c0                	test   eax,eax
c001e27c:	75 09                	jne    c001e287 <Semaphore::release()+0x4d>
c001e27e:	a1 60 0c 03 c0       	mov    eax,ds:0xc0030c60
c001e283:	85 c0                	test   eax,eax
c001e285:	75 17                	jne    c001e29e <Semaphore::release()+0x64>
c001e287:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e28c:	48                   	dec    eax
c001e28d:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e292:	75 01                	jne    c001e295 <Semaphore::release()+0x5b>
c001e294:	fb                   	sti    
c001e295:	83 c4 0c             	add    esp,0xc
c001e298:	c3                   	ret    
c001e299:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e29c:	eb d7                	jmp    c001e275 <Semaphore::release()+0x3b>
c001e29e:	c7 05 60 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c60,0x0
c001e2a8:	e8 22 f6 ff ff       	call   c001d8cf <schedule()>
c001e2ad:	eb d8                	jmp    c001e287 <Semaphore::release()+0x4d>

c001e2af <__static_initialization_and_destruction_0(int, int)>:
c001e2af:	83 ec 0c             	sub    esp,0xc
c001e2b2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e2b7:	0f 85 88 00 00 00    	jne    c001e345 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2bd:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e2c5:	75 7e                	jne    c001e345 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2c7:	83 ec 0c             	sub    esp,0xc
c001e2ca:	68 84 0c 03 c0       	push   0xc0030c84
c001e2cf:	e8 fc a6 00 00       	call   c00289d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2d4:	83 c4 10             	add    esp,0x10
c001e2d7:	83 ec 04             	sub    esp,0x4
c001e2da:	68 18 c5 02 c0       	push   0xc002c518
c001e2df:	68 84 0c 03 c0       	push   0xc0030c84
c001e2e4:	68 84 89 02 c0       	push   0xc0028984
c001e2e9:	e8 8d 41 ff ff       	call   c001247b <__cxa_atexit>
c001e2ee:	83 c4 10             	add    esp,0x10
c001e2f1:	83 ec 0c             	sub    esp,0xc
c001e2f4:	68 78 0c 03 c0       	push   0xc0030c78
c001e2f9:	e8 d2 a6 00 00       	call   c00289d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	83 ec 04             	sub    esp,0x4
c001e304:	68 18 c5 02 c0       	push   0xc002c518
c001e309:	68 78 0c 03 c0       	push   0xc0030c78
c001e30e:	68 84 89 02 c0       	push   0xc0028984
c001e313:	e8 63 41 ff ff       	call   c001247b <__cxa_atexit>
c001e318:	83 c4 10             	add    esp,0x10
c001e31b:	83 ec 0c             	sub    esp,0xc
c001e31e:	68 6c 0c 03 c0       	push   0xc0030c6c
c001e323:	e8 a8 a6 00 00       	call   c00289d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e328:	83 c4 10             	add    esp,0x10
c001e32b:	83 ec 04             	sub    esp,0x4
c001e32e:	68 18 c5 02 c0       	push   0xc002c518
c001e333:	68 6c 0c 03 c0       	push   0xc0030c6c
c001e338:	68 84 89 02 c0       	push   0xc0028984
c001e33d:	e8 39 41 ff ff       	call   c001247b <__cxa_atexit>
c001e342:	83 c4 10             	add    esp,0x10
c001e345:	90                   	nop
c001e346:	83 c4 0c             	add    esp,0xc
c001e349:	c3                   	ret    

c001e34a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e34a:	83 ec 0c             	sub    esp,0xc
c001e34d:	83 ec 08             	sub    esp,0x8
c001e350:	68 ff ff 00 00       	push   0xffff
c001e355:	6a 01                	push   0x1
c001e357:	e8 53 ff ff ff       	call   c001e2af <__static_initialization_and_destruction_0(int, int)>
c001e35c:	83 c4 10             	add    esp,0x10
c001e35f:	83 c4 0c             	add    esp,0xc
c001e362:	c3                   	ret    

c001e363 <Vm::inbv(unsigned short)>:
c001e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e367:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e36c:	75 06                	jne    c001e374 <Vm::inbv(unsigned short)+0x11>
c001e36e:	a0 cc 0c 03 c0       	mov    al,ds:0xc0030ccc
c001e373:	c3                   	ret    
c001e374:	ec                   	in     al,dx
c001e375:	c3                   	ret    

c001e376 <Vm::outbv(unsigned short, unsigned char)>:
c001e376:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e37a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e37e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e383:	75 25                	jne    c001e3aa <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e385:	8b 0d cc 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ccc
c001e38b:	8d 51 01             	lea    edx,[ecx+0x1]
c001e38e:	88 81 e0 0c 03 c0    	mov    BYTE PTR [ecx-0x3ffcf320],al
c001e394:	89 15 cc 0c 03 c0    	mov    DWORD PTR ds:0xc0030ccc,edx
c001e39a:	83 fa 20             	cmp    edx,0x20
c001e39d:	75 0c                	jne    c001e3ab <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e39f:	c7 05 cc 0c 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030ccc,0x1f
c001e3a9:	c3                   	ret    
c001e3aa:	ee                   	out    dx,al
c001e3ab:	c3                   	ret    

c001e3ac <Vm::realToLinear(unsigned short, unsigned short)>:
c001e3ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e3b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e3b6:	c1 e0 04             	shl    eax,0x4
c001e3b9:	01 d0                	add    eax,edx
c001e3bb:	c3                   	ret    

c001e3bc <Vm::getSegment(unsigned int)>:
c001e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c0:	c1 e8 10             	shr    eax,0x10
c001e3c3:	c3                   	ret    

c001e3c4 <Vm::getOffset(unsigned int)>:
c001e3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c8:	c3                   	ret    

c001e3c9 <Vm::mainloop2()>:
c001e3c9:	83 ec 18             	sub    esp,0x18
c001e3cc:	fa                   	cli    
c001e3cd:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e3d3:	6a 02                	push   0x2
c001e3d5:	c6 05 c5 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030cc5,0x1
c001e3dc:	e8 9e f6 ff ff       	call   c001da7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3e6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e3ea:	52                   	push   edx
c001e3eb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e3ef:	52                   	push   edx
c001e3f0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e3f4:	52                   	push   edx
c001e3f5:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e3f9:	50                   	push   eax
c001e3fa:	e8 fb 1e fe ff       	call   c00002fa <goToVM86>
c001e3ff:	83 c4 2c             	add    esp,0x2c
c001e402:	c3                   	ret    

c001e403 <Vm::mainVm8086Loop(void*)>:
c001e403:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e408:	48                   	dec    eax
c001e409:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e40e:	75 01                	jne    c001e411 <Vm::mainVm8086Loop(void*)+0xe>
c001e410:	fb                   	sti    
c001e411:	eb b6                	jmp    c001e3c9 <Vm::mainloop2()>

c001e413 <Vm::mainloop3(unsigned long)>:
c001e413:	83 ec 18             	sub    esp,0x18
c001e416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e41a:	fa                   	cli    
c001e41b:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e421:	6a 02                	push   0x2
c001e423:	c6 05 c4 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030cc4,0x1
c001e42a:	a3 c0 0c 03 c0       	mov    ds:0xc0030cc0,eax
c001e42f:	e8 4b f6 ff ff       	call   c001da7f <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e434:	83 c4 1c             	add    esp,0x1c
c001e437:	eb 90                	jmp    c001e3c9 <Vm::mainloop2()>

c001e439 <Vm::initialise8086()>:
c001e439:	83 ec 0c             	sub    esp,0xc
c001e43c:	68 80 00 00 00       	push   0x80
c001e441:	6a 00                	push   0x0
c001e443:	68 03 e4 01 c0       	push   0xc001e403
c001e448:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c001e44e:	e8 57 f2 ff ff       	call   c001d6aa <Process::createThread(void (*)(void*), void*, int)>
c001e453:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e45a:	a3 c8 0c 03 c0       	mov    ds:0xc0030cc8,eax
c001e45f:	68 00 01 00 00       	push   0x100
c001e464:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c001e469:	6a 00                	push   0x0
c001e46b:	6a 00                	push   0x0
c001e46d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e473:	e8 fe 37 ff ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e478:	83 c4 2c             	add    esp,0x2c
c001e47b:	c3                   	ret    

c001e47c <Vm::finish8086()>:
c001e47c:	53                   	push   ebx
c001e47d:	83 ec 08             	sub    esp,0x8
c001e480:	fa                   	cli    
c001e481:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e487:	80 3d c4 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030cc4,0x0
c001e48e:	75 15                	jne    c001e4a5 <Vm::finish8086()+0x29>
c001e490:	e8 3a f4 ff ff       	call   c001d8cf <schedule()>
c001e495:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e49a:	48                   	dec    eax
c001e49b:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e4a0:	75 de                	jne    c001e480 <Vm::finish8086()+0x4>
c001e4a2:	fb                   	sti    
c001e4a3:	eb db                	jmp    c001e480 <Vm::finish8086()+0x4>
c001e4a5:	83 ec 0c             	sub    esp,0xc
c001e4a8:	8b 1d c0 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030cc0
c001e4ae:	ff 35 c8 0c 03 c0    	push   DWORD PTR ds:0xc0030cc8
c001e4b4:	c6 05 c4 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030cc4,0x0
c001e4bb:	e8 92 f8 ff ff       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c001e4c0:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e4c5:	83 c4 10             	add    esp,0x10
c001e4c8:	8d 50 ff             	lea    edx,[eax-0x1]
c001e4cb:	89 15 68 0c 03 c0    	mov    DWORD PTR ds:0xc0030c68,edx
c001e4d1:	85 d2                	test   edx,edx
c001e4d3:	75 01                	jne    c001e4d6 <Vm::finish8086()+0x5a>
c001e4d5:	fb                   	sti    
c001e4d6:	89 d8                	mov    eax,ebx
c001e4d8:	83 c4 08             	add    esp,0x8
c001e4db:	5b                   	pop    ebx
c001e4dc:	c3                   	ret    

c001e4dd <Vm::getOutput8086(unsigned char*)>:
c001e4dd:	57                   	push   edi
c001e4de:	8b 0d cc 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ccc
c001e4e4:	56                   	push   esi
c001e4e5:	be e0 0c 03 c0       	mov    esi,0xc0030ce0
c001e4ea:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4f0:	a1 cc 0c 03 c0       	mov    eax,ds:0xc0030ccc
c001e4f5:	5e                   	pop    esi
c001e4f6:	c7 05 cc 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ccc,0x0
c001e500:	5f                   	pop    edi
c001e501:	c3                   	ret    

c001e502 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e502:	55                   	push   ebp
c001e503:	57                   	push   edi
c001e504:	56                   	push   esi
c001e505:	53                   	push   ebx
c001e506:	83 ec 2c             	sub    esp,0x2c
c001e509:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e50d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e511:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e515:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e519:	fa                   	cli    
c001e51a:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c001e520:	0f b6 35 c5 0c 03 c0 	movzx  esi,BYTE PTR ds:0xc0030cc5
c001e527:	89 f0                	mov    eax,esi
c001e529:	84 c0                	test   al,al
c001e52b:	75 1d                	jne    c001e54a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e52d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e531:	e8 99 f3 ff ff       	call   c001d8cf <schedule()>
c001e536:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e53b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e53f:	48                   	dec    eax
c001e540:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e545:	75 d2                	jne    c001e519 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e547:	fb                   	sti    
c001e548:	eb cf                	jmp    c001e519 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e54a:	a1 c8 0c 03 c0       	mov    eax,ds:0xc0030cc8
c001e54f:	c7 05 cc 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ccc,0x0
c001e559:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e55d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e561:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e565:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e569:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e56d:	50                   	push   eax
c001e56e:	6a 20                	push   0x20
c001e570:	6a 00                	push   0x0
c001e572:	68 e0 0c 03 c0       	push   0xc0030ce0
c001e577:	e8 d4 21 fe ff       	call   c0000750 <memset>
c001e57c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e583:	e8 11 10 ff ff       	call   c000f599 <malloc>
c001e588:	83 c4 0c             	add    esp,0xc
c001e58b:	89 c3                	mov    ebx,eax
c001e58d:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c001e593:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e597:	50                   	push   eax
c001e598:	e8 9b 45 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c001e59d:	83 c4 10             	add    esp,0x10
c001e5a0:	85 db                	test   ebx,ebx
c001e5a2:	75 0a                	jne    c001e5ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	68 8c ba 02 c0       	push   0xc002ba8c
c001e5ac:	eb 3e                	jmp    c001e5ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5ae:	50                   	push   eax
c001e5af:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e5b3:	50                   	push   eax
c001e5b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e5b8:	50                   	push   eax
c001e5b9:	53                   	push   ebx
c001e5ba:	e8 89 48 ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c001e5bf:	83 c4 10             	add    esp,0x10
c001e5c2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e5c7:	74 0a                	je     c001e5d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e5c9:	83 ec 0c             	sub    esp,0xc
c001e5cc:	68 a0 ba 02 c0       	push   0xc002baa0
c001e5d1:	eb 19                	jmp    c001e5ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5d3:	51                   	push   ecx
c001e5d4:	51                   	push   ecx
c001e5d5:	6a 01                	push   0x1
c001e5d7:	53                   	push   ebx
c001e5d8:	e8 bf 45 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c001e5dd:	83 c4 10             	add    esp,0x10
c001e5e0:	85 c0                	test   eax,eax
c001e5e2:	74 24                	je     c001e608 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	68 b9 ba 02 c0       	push   0xc002bab9
c001e5ec:	e8 54 b7 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001e5f1:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e5f6:	83 c4 10             	add    esp,0x10
c001e5f9:	48                   	dec    eax
c001e5fa:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e5ff:	85 c0                	test   eax,eax
c001e601:	75 01                	jne    c001e604 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e603:	fb                   	sti    
c001e604:	31 f6                	xor    esi,esi
c001e606:	eb 58                	jmp    c001e660 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e608:	0f b7 ed             	movzx  ebp,bp
c001e60b:	50                   	push   eax
c001e60c:	0f b7 ff             	movzx  edi,di
c001e60f:	50                   	push   eax
c001e610:	55                   	push   ebp
c001e611:	57                   	push   edi
c001e612:	e8 95 fd ff ff       	call   c001e3ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e617:	5a                   	pop    edx
c001e618:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e61a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e61e:	51                   	push   ecx
c001e61f:	50                   	push   eax
c001e620:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e624:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e628:	53                   	push   ebx
c001e629:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e62c:	83 c4 14             	add    esp,0x14
c001e62f:	53                   	push   ebx
c001e630:	e8 c5 45 ff ff       	call   c0012bfa <File::close()>
c001e635:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	48                   	dec    eax
c001e63e:	c6 05 c5 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030cc5,0x0
c001e645:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c001e64a:	85 c0                	test   eax,eax
c001e64c:	75 01                	jne    c001e64f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e64e:	fb                   	sti    
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	ff 35 c8 0c 03 c0    	push   DWORD PTR ds:0xc0030cc8
c001e658:	e8 f5 f6 ff ff       	call   c001dd52 <unblockTask(ThreadControlBlock*)>
c001e65d:	83 c4 10             	add    esp,0x10
c001e660:	83 c4 2c             	add    esp,0x2c
c001e663:	89 f0                	mov    eax,esi
c001e665:	5b                   	pop    ebx
c001e666:	5e                   	pop    esi
c001e667:	5f                   	pop    edi
c001e668:	5d                   	pop    ebp
c001e669:	c3                   	ret    

c001e66a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e66a:	57                   	push   edi
c001e66b:	56                   	push   esi
c001e66c:	53                   	push   ebx
c001e66d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e675:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e679:	83 e8 06             	sub    eax,0x6
c001e67c:	0f b7 c0             	movzx  eax,ax
c001e67f:	50                   	push   eax
c001e680:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e685:	50                   	push   eax
c001e686:	e8 21 fd ff ff       	call   c001e3ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e68b:	5a                   	pop    edx
c001e68c:	5e                   	pop    esi
c001e68d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e690:	8d 56 fa             	lea    edx,[esi-0x6]
c001e693:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e699:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e69c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e69f:	83 c2 02             	add    edx,0x2
c001e6a2:	66 89 10             	mov    WORD PTR [eax],dx
c001e6a5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e6a8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e6ac:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e6af:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e6b3:	89 d6                	mov    esi,edx
c001e6b5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e6bb:	66 81 e6 ff fd       	and    si,0xfdff
c001e6c0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e6c4:	74 07                	je     c001e6cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e6c6:	89 d6                	mov    esi,edx
c001e6c8:	66 81 ce 00 02       	or     si,0x200
c001e6cd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e6d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e6da:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e6e2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e6e5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e6ed:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e6f0:	5b                   	pop    ebx
c001e6f1:	5e                   	pop    esi
c001e6f2:	5f                   	pop    edi
c001e6f3:	c3                   	ret    

c001e6f4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e6f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6fe:	c1 e0 04             	shl    eax,0x4
c001e701:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e704:	c3                   	ret    

c001e705 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e705:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e70a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e70f:	c1 e0 04             	shl    eax,0x4
c001e712:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e716:	c3                   	ret    

c001e717 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e717:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e71c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e721:	c1 e0 04             	shl    eax,0x4
c001e724:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e727:	c3                   	ret    

c001e728 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e728:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e72d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e732:	c1 e0 04             	shl    eax,0x4
c001e735:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e739:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e73c:	c3                   	ret    

c001e73d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e73d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e742:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e747:	c1 e0 04             	shl    eax,0x4
c001e74a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e74e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e752:	c3                   	ret    

c001e753 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e753:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e758:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e75d:	c1 e0 04             	shl    eax,0x4
c001e760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e764:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e767:	c3                   	ret    

c001e768 <Vm::faultHandler(regs*)>:
c001e768:	55                   	push   ebp
c001e769:	57                   	push   edi
c001e76a:	56                   	push   esi
c001e76b:	53                   	push   ebx
c001e76c:	83 ec 1c             	sub    esp,0x1c
c001e76f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e773:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e776:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e77a:	0f b7 f8             	movzx  edi,ax
c001e77d:	52                   	push   edx
c001e77e:	0f b7 c0             	movzx  eax,ax
c001e781:	50                   	push   eax
c001e782:	e8 25 fc ff ff       	call   c001e3ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e787:	5a                   	pop    edx
c001e788:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e78b:	59                   	pop    ecx
c001e78c:	89 c1                	mov    ecx,eax
c001e78e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e791:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e795:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e79a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e79e:	0f b7 c5             	movzx  eax,bp
c001e7a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e7a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e7ad:	e8 fa fb ff ff       	call   c001e3ac <Vm::realToLinear(unsigned short, unsigned short)>
c001e7b2:	5e                   	pop    esi
c001e7b3:	be 06 00 00 00       	mov    esi,0x6
c001e7b8:	5a                   	pop    edx
c001e7b9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e7be:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e7c3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e7c6:	80 fa 9d             	cmp    dl,0x9d
c001e7c9:	0f 84 2c 02 00 00    	je     c001e9fb <Vm::faultHandler(regs*)+0x293>
c001e7cf:	0f 87 91 00 00 00    	ja     c001e866 <Vm::faultHandler(regs*)+0xfe>
c001e7d5:	80 fa 66             	cmp    dl,0x66
c001e7d8:	0f 84 98 01 00 00    	je     c001e976 <Vm::faultHandler(regs*)+0x20e>
c001e7de:	77 47                	ja     c001e827 <Vm::faultHandler(regs*)+0xbf>
c001e7e0:	80 fa 36             	cmp    dl,0x36
c001e7e3:	0f 84 80 01 00 00    	je     c001e969 <Vm::faultHandler(regs*)+0x201>
c001e7e9:	77 1a                	ja     c001e805 <Vm::faultHandler(regs*)+0x9d>
c001e7eb:	80 fa 26             	cmp    dl,0x26
c001e7ee:	0f 84 4e 01 00 00    	je     c001e942 <Vm::faultHandler(regs*)+0x1da>
c001e7f4:	80 fa 2e             	cmp    dl,0x2e
c001e7f7:	0f 85 e2 05 00 00    	jne    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e7fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e800:	31 f6                	xor    esi,esi
c001e802:	41                   	inc    ecx
c001e803:	eb be                	jmp    c001e7c3 <Vm::faultHandler(regs*)+0x5b>
c001e805:	80 fa 64             	cmp    dl,0x64
c001e808:	0f 84 41 01 00 00    	je     c001e94f <Vm::faultHandler(regs*)+0x1e7>
c001e80e:	0f 87 48 01 00 00    	ja     c001e95c <Vm::faultHandler(regs*)+0x1f4>
c001e814:	80 fa 3e             	cmp    dl,0x3e
c001e817:	0f 85 c2 05 00 00    	jne    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e81d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e820:	be 01 00 00 00       	mov    esi,0x1
c001e825:	eb db                	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e827:	80 fa 6d             	cmp    dl,0x6d
c001e82a:	0f 84 ec 02 00 00    	je     c001eb1c <Vm::faultHandler(regs*)+0x3b4>
c001e830:	77 17                	ja     c001e849 <Vm::faultHandler(regs*)+0xe1>
c001e832:	80 fa 67             	cmp    dl,0x67
c001e835:	0f 84 48 01 00 00    	je     c001e983 <Vm::faultHandler(regs*)+0x21b>
c001e83b:	80 fa 6c             	cmp    dl,0x6c
c001e83e:	0f 84 69 02 00 00    	je     c001eaad <Vm::faultHandler(regs*)+0x345>
c001e844:	e9 96 05 00 00       	jmp    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e849:	80 fa 6f             	cmp    dl,0x6f
c001e84c:	0f 84 f4 03 00 00    	je     c001ec46 <Vm::faultHandler(regs*)+0x4de>
c001e852:	0f 82 59 03 00 00    	jb     c001ebb1 <Vm::faultHandler(regs*)+0x449>
c001e858:	80 fa 9c             	cmp    dl,0x9c
c001e85b:	0f 84 2f 01 00 00    	je     c001e990 <Vm::faultHandler(regs*)+0x228>
c001e861:	e9 79 05 00 00       	jmp    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e866:	80 fa ec             	cmp    dl,0xec
c001e869:	0f 84 14 05 00 00    	je     c001ed83 <Vm::faultHandler(regs*)+0x61b>
c001e86f:	77 7b                	ja     c001e8ec <Vm::faultHandler(regs*)+0x184>
c001e871:	80 fa e4             	cmp    dl,0xe4
c001e874:	0f 84 93 04 00 00    	je     c001ed0d <Vm::faultHandler(regs*)+0x5a5>
c001e87a:	77 53                	ja     c001e8cf <Vm::faultHandler(regs*)+0x167>
c001e87c:	80 fa cd             	cmp    dl,0xcd
c001e87f:	0f 84 d9 01 00 00    	je     c001ea5e <Vm::faultHandler(regs*)+0x2f6>
c001e885:	80 fa cf             	cmp    dl,0xcf
c001e888:	0f 85 51 05 00 00    	jne    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e88e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e891:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e894:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e898:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e89b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e89f:	81 ca 00 02 02 00    	or     edx,0x20200
c001e8a5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e8a8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e8ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e8b2:	66 c1 e8 09          	shr    ax,0x9
c001e8b6:	83 e0 01             	and    eax,0x1
c001e8b9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e8bc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8bf:	83 c0 06             	add    eax,0x6
c001e8c2:	25 ff ff 00 00       	and    eax,0xffff
c001e8c7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e8ca:	e9 0c 05 00 00       	jmp    c001eddb <Vm::faultHandler(regs*)+0x673>
c001e8cf:	80 fa e6             	cmp    dl,0xe6
c001e8d2:	0f 84 7f 04 00 00    	je     c001ed57 <Vm::faultHandler(regs*)+0x5ef>
c001e8d8:	0f 82 4b 04 00 00    	jb     c001ed29 <Vm::faultHandler(regs*)+0x5c1>
c001e8de:	80 fa e7             	cmp    dl,0xe7
c001e8e1:	0f 84 87 04 00 00    	je     c001ed6e <Vm::faultHandler(regs*)+0x606>
c001e8e7:	e9 f3 04 00 00       	jmp    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e8ec:	80 fa ef             	cmp    dl,0xef
c001e8ef:	0f 84 d1 04 00 00    	je     c001edc6 <Vm::faultHandler(regs*)+0x65e>
c001e8f5:	77 28                	ja     c001e91f <Vm::faultHandler(regs*)+0x1b7>
c001e8f7:	80 fa ed             	cmp    dl,0xed
c001e8fa:	0f 84 9f 04 00 00    	je     c001ed9f <Vm::faultHandler(regs*)+0x637>
c001e900:	80 fa ee             	cmp    dl,0xee
c001e903:	0f 85 d6 04 00 00    	jne    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e909:	50                   	push   eax
c001e90a:	50                   	push   eax
c001e90b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e90f:	50                   	push   eax
c001e910:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e914:	50                   	push   eax
c001e915:	e8 5c fa ff ff       	call   c001e376 <Vm::outbv(unsigned short, unsigned char)>
c001e91a:	e9 9f 04 00 00       	jmp    c001edbe <Vm::faultHandler(regs*)+0x656>
c001e91f:	80 fa fa             	cmp    dl,0xfa
c001e922:	0f 84 69 01 00 00    	je     c001ea91 <Vm::faultHandler(regs*)+0x329>
c001e928:	80 fa fb             	cmp    dl,0xfb
c001e92b:	0f 84 6e 01 00 00    	je     c001ea9f <Vm::faultHandler(regs*)+0x337>
c001e931:	80 fa f3             	cmp    dl,0xf3
c001e934:	0f 85 a5 04 00 00    	jne    c001eddf <Vm::faultHandler(regs*)+0x677>
c001e93a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e93d:	e9 c0 fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e942:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e945:	be 02 00 00 00       	mov    esi,0x2
c001e94a:	e9 b3 fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e94f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e952:	be 03 00 00 00       	mov    esi,0x3
c001e957:	e9 a6 fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e95c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e95f:	be 04 00 00 00       	mov    esi,0x4
c001e964:	e9 99 fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e96c:	be 05 00 00 00       	mov    esi,0x5
c001e971:	e9 8c fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e976:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e979:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e97e:	e9 7f fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e983:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e986:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e98b:	e9 72 fe ff ff       	jmp    c001e802 <Vm::faultHandler(regs*)+0x9a>
c001e990:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e993:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e997:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e99c:	74 30                	je     c001e9ce <Vm::faultHandler(regs*)+0x266>
c001e99e:	83 e9 04             	sub    ecx,0x4
c001e9a1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e9a7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e9ad:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e9b0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9b3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9b9:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9bd:	0f 84 15 04 00 00    	je     c001edd8 <Vm::faultHandler(regs*)+0x670>
c001e9c3:	80 ce 02             	or     dh,0x2
c001e9c6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9c9:	e9 0a 04 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001e9ce:	83 e9 02             	sub    ecx,0x2
c001e9d1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e9d7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e9da:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e9de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9e4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9e8:	74 05                	je     c001e9ef <Vm::faultHandler(regs*)+0x287>
c001e9ea:	80 ce 02             	or     dh,0x2
c001e9ed:	eb 03                	jmp    c001e9f2 <Vm::faultHandler(regs*)+0x28a>
c001e9ef:	80 e6 fd             	and    dh,0xfd
c001e9f2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e9f6:	e9 dd 03 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001e9fb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea00:	74 2a                	je     c001ea2c <Vm::faultHandler(regs*)+0x2c4>
c001ea02:	8b 10                	mov    edx,DWORD PTR [eax]
c001ea04:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea0a:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea10:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea1b:	c1 e8 09             	shr    eax,0x9
c001ea1e:	83 e0 01             	and    eax,0x1
c001ea21:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea24:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea27:	83 c0 04             	add    eax,0x4
c001ea2a:	eb 25                	jmp    c001ea51 <Vm::faultHandler(regs*)+0x2e9>
c001ea2c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea2f:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea35:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea38:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ea3b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea41:	66 c1 e8 09          	shr    ax,0x9
c001ea45:	83 e0 01             	and    eax,0x1
c001ea48:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea4b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea4e:	83 c0 02             	add    eax,0x2
c001ea51:	25 ff ff 00 00       	and    eax,0xffff
c001ea56:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea59:	e9 7a 03 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001ea5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea62:	3c ee                	cmp    al,0xee
c001ea64:	75 10                	jne    c001ea76 <Vm::faultHandler(regs*)+0x30e>
c001ea66:	83 ec 0c             	sub    esp,0xc
c001ea69:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ea6c:	e8 a2 f9 ff ff       	call   c001e413 <Vm::mainloop3(unsigned long)>
c001ea71:	e9 4b 03 00 00       	jmp    c001edc1 <Vm::faultHandler(regs*)+0x659>
c001ea76:	83 ec 0c             	sub    esp,0xc
c001ea79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ea7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea81:	51                   	push   ecx
c001ea82:	50                   	push   eax
c001ea83:	53                   	push   ebx
c001ea84:	e8 e1 fb ff ff       	call   c001e66a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ea89:	83 c4 20             	add    esp,0x20
c001ea8c:	e9 4a 03 00 00       	jmp    c001eddb <Vm::faultHandler(regs*)+0x673>
c001ea91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea96:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea9a:	e9 39 03 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001ea9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaa4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eaa8:	e9 2b 03 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001eaad:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eab0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eab5:	74 2b                	je     c001eae2 <Vm::faultHandler(regs*)+0x37a>
c001eab7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eabe:	76 22                	jbe    c001eae2 <Vm::faultHandler(regs*)+0x37a>
c001eac0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eac4:	50                   	push   eax
c001eac5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eac9:	50                   	push   eax
c001eaca:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eace:	50                   	push   eax
c001eacf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ead3:	50                   	push   eax
c001ead4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ead8:	50                   	push   eax
c001ead9:	6a 6c                	push   0x6c
c001eadb:	6a 6c                	push   0x6c
c001eadd:	e9 b9 01 00 00       	jmp    c001ec9b <Vm::faultHandler(regs*)+0x533>
c001eae2:	83 ec 0c             	sub    esp,0xc
c001eae5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eae9:	0f b7 f6             	movzx  esi,si
c001eaec:	50                   	push   eax
c001eaed:	e8 71 f8 ff ff       	call   c001e363 <Vm::inbv(unsigned short)>
c001eaf2:	83 c4 0c             	add    esp,0xc
c001eaf5:	0f b6 c0             	movzx  eax,al
c001eaf8:	50                   	push   eax
c001eaf9:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eafd:	50                   	push   eax
c001eafe:	56                   	push   esi
c001eaff:	e8 24 fc ff ff       	call   c001e728 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eb04:	83 c4 10             	add    esp,0x10
c001eb07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb0a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb0e:	74 03                	je     c001eb13 <Vm::faultHandler(regs*)+0x3ab>
c001eb10:	48                   	dec    eax
c001eb11:	eb 01                	jmp    c001eb14 <Vm::faultHandler(regs*)+0x3ac>
c001eb13:	40                   	inc    eax
c001eb14:	0f b7 c0             	movzx  eax,ax
c001eb17:	e9 8d 00 00 00       	jmp    c001eba9 <Vm::faultHandler(regs*)+0x441>
c001eb1c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb22:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb27:	74 29                	je     c001eb52 <Vm::faultHandler(regs*)+0x3ea>
c001eb29:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb2e:	76 22                	jbe    c001eb52 <Vm::faultHandler(regs*)+0x3ea>
c001eb30:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb34:	50                   	push   eax
c001eb35:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb39:	50                   	push   eax
c001eb3a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb3e:	50                   	push   eax
c001eb3f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb43:	50                   	push   eax
c001eb44:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb48:	50                   	push   eax
c001eb49:	6a 6d                	push   0x6d
c001eb4b:	6a 6d                	push   0x6d
c001eb4d:	e9 49 01 00 00       	jmp    c001ec9b <Vm::faultHandler(regs*)+0x533>
c001eb52:	0f b7 c8             	movzx  ecx,ax
c001eb55:	0f b7 f6             	movzx  esi,si
c001eb58:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eb5b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb60:	74 20                	je     c001eb82 <Vm::faultHandler(regs*)+0x41a>
c001eb62:	ed                   	in     eax,dx
c001eb63:	55                   	push   ebp
c001eb64:	50                   	push   eax
c001eb65:	51                   	push   ecx
c001eb66:	56                   	push   esi
c001eb67:	e8 e7 fb ff ff       	call   c001e753 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eb6c:	83 c4 10             	add    esp,0x10
c001eb6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb72:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb76:	74 05                	je     c001eb7d <Vm::faultHandler(regs*)+0x415>
c001eb78:	83 e8 04             	sub    eax,0x4
c001eb7b:	eb 27                	jmp    c001eba4 <Vm::faultHandler(regs*)+0x43c>
c001eb7d:	83 c0 04             	add    eax,0x4
c001eb80:	eb 22                	jmp    c001eba4 <Vm::faultHandler(regs*)+0x43c>
c001eb82:	66 ed                	in     ax,dx
c001eb84:	0f b7 c0             	movzx  eax,ax
c001eb87:	57                   	push   edi
c001eb88:	50                   	push   eax
c001eb89:	51                   	push   ecx
c001eb8a:	56                   	push   esi
c001eb8b:	e8 ad fb ff ff       	call   c001e73d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eb90:	83 c4 10             	add    esp,0x10
c001eb93:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb96:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb9a:	74 05                	je     c001eba1 <Vm::faultHandler(regs*)+0x439>
c001eb9c:	83 e8 02             	sub    eax,0x2
c001eb9f:	eb 03                	jmp    c001eba4 <Vm::faultHandler(regs*)+0x43c>
c001eba1:	83 c0 02             	add    eax,0x2
c001eba4:	25 ff ff 00 00       	and    eax,0xffff
c001eba9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ebac:	e9 27 02 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001ebb1:	8d 46 ff             	lea    eax,[esi-0x1]
c001ebb4:	3c 05                	cmp    al,0x5
c001ebb6:	77 24                	ja     c001ebdc <Vm::faultHandler(regs*)+0x474>
c001ebb8:	0f b6 c0             	movzx  eax,al
c001ebbb:	ff 24 85 2c bb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd44d4]
c001ebc2:	0f b7 fd             	movzx  edi,bp
c001ebc5:	eb 15                	jmp    c001ebdc <Vm::faultHandler(regs*)+0x474>
c001ebc7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ebcb:	eb 0f                	jmp    c001ebdc <Vm::faultHandler(regs*)+0x474>
c001ebcd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ebd1:	eb 09                	jmp    c001ebdc <Vm::faultHandler(regs*)+0x474>
c001ebd3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ebd7:	eb 03                	jmp    c001ebdc <Vm::faultHandler(regs*)+0x474>
c001ebd9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ebdc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ebdf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebe4:	74 29                	je     c001ec0f <Vm::faultHandler(regs*)+0x4a7>
c001ebe6:	3d ff ff 00 00       	cmp    eax,0xffff
c001ebeb:	76 22                	jbe    c001ec0f <Vm::faultHandler(regs*)+0x4a7>
c001ebed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebf1:	50                   	push   eax
c001ebf2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebf6:	50                   	push   eax
c001ebf7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebfb:	50                   	push   eax
c001ebfc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec00:	50                   	push   eax
c001ec01:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec05:	50                   	push   eax
c001ec06:	6a 6e                	push   0x6e
c001ec08:	6a 6e                	push   0x6e
c001ec0a:	e9 8c 00 00 00       	jmp    c001ec9b <Vm::faultHandler(regs*)+0x533>
c001ec0f:	0f b7 c0             	movzx  eax,ax
c001ec12:	52                   	push   edx
c001ec13:	52                   	push   edx
c001ec14:	50                   	push   eax
c001ec15:	57                   	push   edi
c001ec16:	e8 d9 fa ff ff       	call   c001e6f4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ec1b:	59                   	pop    ecx
c001ec1c:	0f b6 c0             	movzx  eax,al
c001ec1f:	5e                   	pop    esi
c001ec20:	50                   	push   eax
c001ec21:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec25:	50                   	push   eax
c001ec26:	e8 4b f7 ff ff       	call   c001e376 <Vm::outbv(unsigned short, unsigned char)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ec31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec35:	74 03                	je     c001ec3a <Vm::faultHandler(regs*)+0x4d2>
c001ec37:	48                   	dec    eax
c001ec38:	eb 01                	jmp    c001ec3b <Vm::faultHandler(regs*)+0x4d3>
c001ec3a:	40                   	inc    eax
c001ec3b:	0f b7 c0             	movzx  eax,ax
c001ec3e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ec41:	e9 92 01 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001ec46:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec49:	3c 05                	cmp    al,0x5
c001ec4b:	77 1f                	ja     c001ec6c <Vm::faultHandler(regs*)+0x504>
c001ec4d:	0f b6 c0             	movzx  eax,al
c001ec50:	ff 24 85 44 bb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd44bc]
c001ec57:	89 ef                	mov    edi,ebp
c001ec59:	eb 11                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x504>
c001ec5b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ec5e:	eb 0c                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x504>
c001ec60:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ec63:	eb 07                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x504>
c001ec65:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ec68:	eb 02                	jmp    c001ec6c <Vm::faultHandler(regs*)+0x504>
c001ec6a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ec6c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ec6f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec74:	74 37                	je     c001ecad <Vm::faultHandler(regs*)+0x545>
c001ec76:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ec7c:	76 2f                	jbe    c001ecad <Vm::faultHandler(regs*)+0x545>
c001ec7e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec82:	50                   	push   eax
c001ec83:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec87:	50                   	push   eax
c001ec88:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec8c:	50                   	push   eax
c001ec8d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec91:	50                   	push   eax
c001ec92:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec96:	50                   	push   eax
c001ec97:	6a 6f                	push   0x6f
c001ec99:	6a 6f                	push   0x6f
c001ec9b:	68 d2 ba 02 c0       	push   0xc002bad2
c001eca0:	e8 34 39 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001eca5:	83 c4 20             	add    esp,0x20
c001eca8:	e9 86 01 00 00       	jmp    c001ee33 <Vm::faultHandler(regs*)+0x6cb>
c001ecad:	0f b7 d7             	movzx  edx,di
c001ecb0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ecb3:	0f b7 c6             	movzx  eax,si
c001ecb6:	81 e1 00 04 00 00    	and    ecx,0x400
c001ecbc:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ecbf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecc4:	74 1d                	je     c001ece3 <Vm::faultHandler(regs*)+0x57b>
c001ecc6:	55                   	push   ebp
c001ecc7:	55                   	push   ebp
c001ecc8:	50                   	push   eax
c001ecc9:	52                   	push   edx
c001ecca:	e8 48 fa ff ff       	call   c001e717 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eccf:	83 c4 10             	add    esp,0x10
c001ecd2:	89 fa                	mov    edx,edi
c001ecd4:	ef                   	out    dx,eax
c001ecd5:	85 c9                	test   ecx,ecx
c001ecd7:	74 05                	je     c001ecde <Vm::faultHandler(regs*)+0x576>
c001ecd9:	83 ee 04             	sub    esi,0x4
c001ecdc:	eb 21                	jmp    c001ecff <Vm::faultHandler(regs*)+0x597>
c001ecde:	83 c6 04             	add    esi,0x4
c001ece1:	eb 1c                	jmp    c001ecff <Vm::faultHandler(regs*)+0x597>
c001ece3:	55                   	push   ebp
c001ece4:	55                   	push   ebp
c001ece5:	50                   	push   eax
c001ece6:	52                   	push   edx
c001ece7:	e8 19 fa ff ff       	call   c001e705 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ecec:	83 c4 10             	add    esp,0x10
c001ecef:	89 fa                	mov    edx,edi
c001ecf1:	66 ef                	out    dx,ax
c001ecf3:	85 c9                	test   ecx,ecx
c001ecf5:	74 05                	je     c001ecfc <Vm::faultHandler(regs*)+0x594>
c001ecf7:	83 ee 02             	sub    esi,0x2
c001ecfa:	eb 03                	jmp    c001ecff <Vm::faultHandler(regs*)+0x597>
c001ecfc:	83 c6 02             	add    esi,0x2
c001ecff:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ed05:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ed08:	e9 cb 00 00 00       	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001ed0d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed14:	83 ec 0c             	sub    esp,0xc
c001ed17:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed1b:	50                   	push   eax
c001ed1c:	e8 42 f6 ff ff       	call   c001e363 <Vm::inbv(unsigned short)>
c001ed21:	0f b6 c0             	movzx  eax,al
c001ed24:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed27:	eb 3f                	jmp    c001ed68 <Vm::faultHandler(regs*)+0x600>
c001ed29:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed2e:	74 07                	je     c001ed37 <Vm::faultHandler(regs*)+0x5cf>
c001ed30:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed34:	ed                   	in     eax,dx
c001ed35:	eb 14                	jmp    c001ed4b <Vm::faultHandler(regs*)+0x5e3>
c001ed37:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ed3a:	66 31 f6             	xor    si,si
c001ed3d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ed40:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed44:	66 ed                	in     ax,dx
c001ed46:	0f b7 c0             	movzx  eax,ax
c001ed49:	09 f0                	or     eax,esi
c001ed4b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ed4e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed52:	e9 84 00 00 00       	jmp    c001eddb <Vm::faultHandler(regs*)+0x673>
c001ed57:	52                   	push   edx
c001ed58:	52                   	push   edx
c001ed59:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ed5d:	50                   	push   eax
c001ed5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed62:	50                   	push   eax
c001ed63:	e8 0e f6 ff ff       	call   c001e376 <Vm::outbv(unsigned short, unsigned char)>
c001ed68:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed6c:	eb 53                	jmp    c001edc1 <Vm::faultHandler(regs*)+0x659>
c001ed6e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ed71:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed75:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed7a:	74 03                	je     c001ed7f <Vm::faultHandler(regs*)+0x617>
c001ed7c:	ef                   	out    dx,eax
c001ed7d:	eb cf                	jmp    c001ed4e <Vm::faultHandler(regs*)+0x5e6>
c001ed7f:	66 ef                	out    dx,ax
c001ed81:	eb cb                	jmp    c001ed4e <Vm::faultHandler(regs*)+0x5e6>
c001ed83:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed8a:	83 ec 0c             	sub    esp,0xc
c001ed8d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ed91:	50                   	push   eax
c001ed92:	e8 cc f5 ff ff       	call   c001e363 <Vm::inbv(unsigned short)>
c001ed97:	0f b6 c0             	movzx  eax,al
c001ed9a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed9d:	eb 1f                	jmp    c001edbe <Vm::faultHandler(regs*)+0x656>
c001ed9f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eda2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eda7:	74 03                	je     c001edac <Vm::faultHandler(regs*)+0x644>
c001eda9:	ed                   	in     eax,dx
c001edaa:	eb 0d                	jmp    c001edb9 <Vm::faultHandler(regs*)+0x651>
c001edac:	66 ed                	in     ax,dx
c001edae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001edb1:	0f b7 c0             	movzx  eax,ax
c001edb4:	66 31 d2             	xor    dx,dx
c001edb7:	09 d0                	or     eax,edx
c001edb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001edbc:	eb 1a                	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001edbe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	eb 15                	jmp    c001eddb <Vm::faultHandler(regs*)+0x673>
c001edc6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001edc9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001edcc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edd1:	74 03                	je     c001edd6 <Vm::faultHandler(regs*)+0x66e>
c001edd3:	ef                   	out    dx,eax
c001edd4:	eb 02                	jmp    c001edd8 <Vm::faultHandler(regs*)+0x670>
c001edd6:	66 ef                	out    dx,ax
c001edd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eddb:	b0 01                	mov    al,0x1
c001eddd:	eb 56                	jmp    c001ee35 <Vm::faultHandler(regs*)+0x6cd>
c001eddf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ede3:	50                   	push   eax
c001ede4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ede8:	50                   	push   eax
c001ede9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eded:	50                   	push   eax
c001edee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edf2:	50                   	push   eax
c001edf3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edf7:	50                   	push   eax
c001edf8:	52                   	push   edx
c001edf9:	52                   	push   edx
c001edfa:	68 ff ba 02 c0       	push   0xc002baff
c001edff:	e8 d5 37 ff ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c001ee04:	83 c4 20             	add    esp,0x20
c001ee07:	83 ec 0c             	sub    esp,0xc
c001ee0a:	6a 60                	push   0x60
c001ee0c:	e8 52 f5 ff ff       	call   c001e363 <Vm::inbv(unsigned short)>
c001ee11:	83 c4 10             	add    esp,0x10
c001ee14:	3c 1c                	cmp    al,0x1c
c001ee16:	74 04                	je     c001ee1c <Vm::faultHandler(regs*)+0x6b4>
c001ee18:	3c 5a                	cmp    al,0x5a
c001ee1a:	75 eb                	jne    c001ee07 <Vm::faultHandler(regs*)+0x69f>
c001ee1c:	3c 5a                	cmp    al,0x5a
c001ee1e:	74 04                	je     c001ee24 <Vm::faultHandler(regs*)+0x6bc>
c001ee20:	3c 1c                	cmp    al,0x1c
c001ee22:	75 0f                	jne    c001ee33 <Vm::faultHandler(regs*)+0x6cb>
c001ee24:	83 ec 0c             	sub    esp,0xc
c001ee27:	6a 60                	push   0x60
c001ee29:	e8 35 f5 ff ff       	call   c001e363 <Vm::inbv(unsigned short)>
c001ee2e:	83 c4 10             	add    esp,0x10
c001ee31:	eb e9                	jmp    c001ee1c <Vm::faultHandler(regs*)+0x6b4>
c001ee33:	31 c0                	xor    eax,eax
c001ee35:	83 c4 1c             	add    esp,0x1c
c001ee38:	5b                   	pop    ebx
c001ee39:	5e                   	pop    esi
c001ee3a:	5f                   	pop    edi
c001ee3b:	5d                   	pop    ebp
c001ee3c:	c3                   	ret    

c001ee3d <Vm::fpuInternalTo32(unsigned long long)>:
c001ee3d:	57                   	push   edi
c001ee3e:	56                   	push   esi
c001ee3f:	53                   	push   ebx
c001ee40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee48:	89 d6                	mov    esi,edx
c001ee4a:	89 d7                	mov    edi,edx
c001ee4c:	89 c1                	mov    ecx,eax
c001ee4e:	c1 ef 14             	shr    edi,0x14
c001ee51:	89 d3                	mov    ebx,edx
c001ee53:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ee59:	31 d2                	xor    edx,edx
c001ee5b:	89 f8                	mov    eax,edi
c001ee5d:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ee63:	bf ff 00 00 00       	mov    edi,0xff
c001ee68:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ee6d:	83 d2 ff             	adc    edx,0xffffffff
c001ee70:	39 c7                	cmp    edi,eax
c001ee72:	bf 00 00 00 00       	mov    edi,0x0
c001ee77:	19 d7                	sbb    edi,edx
c001ee79:	72 15                	jb     c001ee90 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ee7b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ee7f:	c1 e0 17             	shl    eax,0x17
c001ee82:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ee88:	09 f1                	or     ecx,esi
c001ee8a:	09 c1                	or     ecx,eax
c001ee8c:	89 cf                	mov    edi,ecx
c001ee8e:	eb 02                	jmp    c001ee92 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ee90:	31 ff                	xor    edi,edi
c001ee92:	89 f8                	mov    eax,edi
c001ee94:	5b                   	pop    ebx
c001ee95:	5e                   	pop    esi
c001ee96:	5f                   	pop    edi
c001ee97:	c3                   	ret    

c001ee98 <Vm::fpuInternalTo64(unsigned long long)>:
c001ee98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eea0:	c3                   	ret    

c001eea1 <Vm::fpu32ToInternal(unsigned int)>:
c001eea1:	57                   	push   edi
c001eea2:	31 ff                	xor    edi,edi
c001eea4:	56                   	push   esi
c001eea5:	53                   	push   ebx
c001eea6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eeaa:	89 cb                	mov    ebx,ecx
c001eeac:	89 ce                	mov    esi,ecx
c001eeae:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eeb4:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eeba:	c1 e9 17             	shr    ecx,0x17
c001eebd:	89 f0                	mov    eax,esi
c001eebf:	0f b6 d1             	movzx  edx,cl
c001eec2:	81 c2 80 03 00 00    	add    edx,0x380
c001eec8:	89 d1                	mov    ecx,edx
c001eeca:	89 fa                	mov    edx,edi
c001eecc:	c1 e1 14             	shl    ecx,0x14
c001eecf:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eed3:	c1 e0 1d             	shl    eax,0x1d
c001eed6:	89 d7                	mov    edi,edx
c001eed8:	89 c6                	mov    esi,eax
c001eeda:	89 ca                	mov    edx,ecx
c001eedc:	89 f0                	mov    eax,esi
c001eede:	09 fa                	or     edx,edi
c001eee0:	09 da                	or     edx,ebx
c001eee2:	5b                   	pop    ebx
c001eee3:	5e                   	pop    esi
c001eee4:	5f                   	pop    edi
c001eee5:	c3                   	ret    

c001eee6 <Vm::fpu64ToInternal(unsigned long long)>:
c001eee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eeee:	c3                   	ret    

c001eeef <Vm::fpuFloatToLong(unsigned long long)>:
c001eeef:	57                   	push   edi
c001eef0:	31 c0                	xor    eax,eax
c001eef2:	56                   	push   esi
c001eef3:	31 d2                	xor    edx,edx
c001eef5:	53                   	push   ebx
c001eef6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eefa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eefe:	89 d9                	mov    ecx,ebx
c001ef00:	c1 e9 14             	shr    ecx,0x14
c001ef03:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ef09:	89 cf                	mov    edi,ecx
c001ef0b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ef11:	78 33                	js     c001ef46 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef13:	89 d9                	mov    ecx,ebx
c001ef15:	89 f0                	mov    eax,esi
c001ef17:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef1d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ef23:	89 ca                	mov    edx,ecx
c001ef25:	b9 34 00 00 00       	mov    ecx,0x34
c001ef2a:	29 f9                	sub    ecx,edi
c001ef2c:	0f ad d0             	shrd   eax,edx,cl
c001ef2f:	d3 fa                	sar    edx,cl
c001ef31:	f6 c1 20             	test   cl,0x20
c001ef34:	74 05                	je     c001ef3b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ef36:	89 d0                	mov    eax,edx
c001ef38:	c1 fa 1f             	sar    edx,0x1f
c001ef3b:	85 db                	test   ebx,ebx
c001ef3d:	79 07                	jns    c001ef46 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef3f:	f7 d8                	neg    eax
c001ef41:	83 d2 00             	adc    edx,0x0
c001ef44:	f7 da                	neg    edx
c001ef46:	5b                   	pop    ebx
c001ef47:	5e                   	pop    esi
c001ef48:	5f                   	pop    edi
c001ef49:	c3                   	ret    

c001ef4a <Vm::fpuULongToFloat(unsigned long long)>:
c001ef4a:	57                   	push   edi
c001ef4b:	31 c9                	xor    ecx,ecx
c001ef4d:	56                   	push   esi
c001ef4e:	53                   	push   ebx
c001ef4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ef57:	0f ba e7 14          	bt     edi,0x14
c001ef5b:	72 07                	jb     c001ef64 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ef5d:	01 f6                	add    esi,esi
c001ef5f:	11 ff                	adc    edi,edi
c001ef61:	41                   	inc    ecx
c001ef62:	eb f3                	jmp    c001ef57 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ef64:	89 fa                	mov    edx,edi
c001ef66:	89 f0                	mov    eax,esi
c001ef68:	bb 33 04 00 00       	mov    ebx,0x433
c001ef6d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ef73:	29 cb                	sub    ebx,ecx
c001ef75:	89 d9                	mov    ecx,ebx
c001ef77:	5b                   	pop    ebx
c001ef78:	c1 e1 14             	shl    ecx,0x14
c001ef7b:	5e                   	pop    esi
c001ef7c:	09 ca                	or     edx,ecx
c001ef7e:	5f                   	pop    edi
c001ef7f:	c3                   	ret    

c001ef80 <Vm::fpuLongToFloat(long long)>:
c001ef80:	56                   	push   esi
c001ef81:	31 c0                	xor    eax,eax
c001ef83:	53                   	push   ebx
c001ef84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ef88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef8c:	39 c8                	cmp    eax,ecx
c001ef8e:	19 d8                	sbb    eax,ebx
c001ef90:	7d 04                	jge    c001ef96 <Vm::fpuLongToFloat(long long)+0x16>
c001ef92:	31 f6                	xor    esi,esi
c001ef94:	eb 0c                	jmp    c001efa2 <Vm::fpuLongToFloat(long long)+0x22>
c001ef96:	f7 d9                	neg    ecx
c001ef98:	be 01 00 00 00       	mov    esi,0x1
c001ef9d:	83 d3 00             	adc    ebx,0x0
c001efa0:	f7 db                	neg    ebx
c001efa2:	31 c0                	xor    eax,eax
c001efa4:	0f ba e3 14          	bt     ebx,0x14
c001efa8:	72 07                	jb     c001efb1 <Vm::fpuLongToFloat(long long)+0x31>
c001efaa:	01 c9                	add    ecx,ecx
c001efac:	11 db                	adc    ebx,ebx
c001efae:	40                   	inc    eax
c001efaf:	eb f3                	jmp    c001efa4 <Vm::fpuLongToFloat(long long)+0x24>
c001efb1:	ba 33 04 00 00       	mov    edx,0x433
c001efb6:	29 c2                	sub    edx,eax
c001efb8:	89 c8                	mov    eax,ecx
c001efba:	c1 e2 14             	shl    edx,0x14
c001efbd:	89 d9                	mov    ecx,ebx
c001efbf:	89 f3                	mov    ebx,esi
c001efc1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efc7:	09 ca                	or     edx,ecx
c001efc9:	84 db                	test   bl,bl
c001efcb:	74 06                	je     c001efd3 <Vm::fpuLongToFloat(long long)+0x53>
c001efcd:	81 ca 00 00 00 80    	or     edx,0x80000000
c001efd3:	5b                   	pop    ebx
c001efd4:	5e                   	pop    esi
c001efd5:	c3                   	ret    

c001efd6 <Vm::fpuGet0()>:
c001efd6:	31 c0                	xor    eax,eax
c001efd8:	31 d2                	xor    edx,edx
c001efda:	c3                   	ret    

c001efdb <Vm::fpuGet1()>:
c001efdb:	b8 01 00 00 00       	mov    eax,0x1
c001efe0:	31 d2                	xor    edx,edx
c001efe2:	c3                   	ret    

c001efe3 <Vm::fpuGetPi()>:
c001efe3:	b8 03 00 00 00       	mov    eax,0x3
c001efe8:	31 d2                	xor    edx,edx
c001efea:	c3                   	ret    

c001efeb <Vm::fpuGetLog2E()>:
c001efeb:	83 ec 18             	sub    esp,0x18
c001efee:	68 5c bb 02 c0       	push   0xc002bb5c
c001eff3:	e8 4d ad ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001eff8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001effd:	31 d2                	xor    edx,edx
c001efff:	83 c4 1c             	add    esp,0x1c
c001f002:	c3                   	ret    

c001f003 <Vm::fpuGetLogE2()>:
c001f003:	83 ec 18             	sub    esp,0x18
c001f006:	68 68 bb 02 c0       	push   0xc002bb68
c001f00b:	e8 35 ad ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001f010:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f015:	31 d2                	xor    edx,edx
c001f017:	83 c4 1c             	add    esp,0x1c
c001f01a:	c3                   	ret    

c001f01b <Vm::fpuGetLog210()>:
c001f01b:	83 ec 18             	sub    esp,0x18
c001f01e:	68 74 bb 02 c0       	push   0xc002bb74
c001f023:	e8 1d ad ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001f028:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f02d:	31 d2                	xor    edx,edx
c001f02f:	83 c4 1c             	add    esp,0x1c
c001f032:	c3                   	ret    

c001f033 <Vm::fpuGetLog102()>:
c001f033:	83 ec 18             	sub    esp,0x18
c001f036:	68 81 bb 02 c0       	push   0xc002bb81
c001f03b:	e8 05 ad ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001f040:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f045:	31 d2                	xor    edx,edx
c001f047:	83 c4 1c             	add    esp,0x1c
c001f04a:	c3                   	ret    

c001f04b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f04b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f04f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f053:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f057:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f05b:	0f 92 c0             	setb   al
c001f05e:	c3                   	ret    

c001f05f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f05f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f067:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f06b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f06f:	09 c2                	or     edx,eax
c001f071:	0f 94 c0             	sete   al
c001f074:	c3                   	ret    

c001f075 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f075:	57                   	push   edi
c001f076:	56                   	push   esi
c001f077:	53                   	push   ebx
c001f078:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f07c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f080:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f084:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f088:	57                   	push   edi
c001f089:	56                   	push   esi
c001f08a:	53                   	push   ebx
c001f08b:	51                   	push   ecx
c001f08c:	e8 ce ff ff ff       	call   c001f05f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f091:	83 c4 10             	add    esp,0x10
c001f094:	88 c2                	mov    dl,al
c001f096:	31 c0                	xor    eax,eax
c001f098:	84 d2                	test   dl,dl
c001f09a:	75 0c                	jne    c001f0a8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f09c:	57                   	push   edi
c001f09d:	56                   	push   esi
c001f09e:	53                   	push   ebx
c001f09f:	51                   	push   ecx
c001f0a0:	e8 a6 ff ff ff       	call   c001f04b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	83 e0 01             	and    eax,0x1
c001f0ab:	5b                   	pop    ebx
c001f0ac:	88 c1                	mov    cl,al
c001f0ae:	83 e2 01             	and    edx,0x1
c001f0b1:	a0 01 0d 03 c0       	mov    al,ds:0xc0030d01
c001f0b6:	c1 e2 06             	shl    edx,0x6
c001f0b9:	83 e0 ba             	and    eax,0xffffffba
c001f0bc:	5e                   	pop    esi
c001f0bd:	09 c8                	or     eax,ecx
c001f0bf:	5f                   	pop    edi
c001f0c0:	09 d0                	or     eax,edx
c001f0c2:	a2 01 0d 03 c0       	mov    ds:0xc0030d01,al
c001f0c7:	c3                   	ret    

c001f0c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f0c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0d0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f0d4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f0d8:	c3                   	ret    

c001f0d9 <Vm::fpuAbs(unsigned long long)>:
c001f0d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0e1:	c3                   	ret    

c001f0e2 <Vm::fpuChs(unsigned long long)>:
c001f0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0ea:	f7 d8                	neg    eax
c001f0ec:	83 d2 00             	adc    edx,0x0
c001f0ef:	f7 da                	neg    edx
c001f0f1:	c3                   	ret    

c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f0f2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f0f6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f0fb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f0ff:	eb c7                	jmp    c001f0c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f101 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f101:	53                   	push   ebx
c001f102:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f106:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f10a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f10e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f112:	0f af ca             	imul   ecx,edx
c001f115:	0f af d8             	imul   ebx,eax
c001f118:	f7 e2                	mul    edx
c001f11a:	01 d9                	add    ecx,ebx
c001f11c:	5b                   	pop    ebx
c001f11d:	01 ca                	add    edx,ecx
c001f11f:	c3                   	ret    

c001f120 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f133:	e8 dc 74 00 00       	call   c0026614 <__udivdi3>
c001f138:	83 c4 1c             	add    esp,0x1c
c001f13b:	c3                   	ret    

c001f13c <Vm::fpuSquare(unsigned long long)>:
c001f13c:	50                   	push   eax
c001f13d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f141:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f145:	52                   	push   edx
c001f146:	50                   	push   eax
c001f147:	52                   	push   edx
c001f148:	50                   	push   eax
c001f149:	e8 b3 ff ff ff       	call   c001f101 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f14e:	83 c4 14             	add    esp,0x14
c001f151:	c3                   	ret    

c001f152 <Vm::fpuGetReg(int)>:
c001f152:	83 ec 0c             	sub    esp,0xc
c001f155:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f15a:	76 10                	jbe    c001f16c <Vm::fpuGetReg(int)+0x1a>
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	68 8e bb 02 c0       	push   0xc002bb8e
c001f164:	e8 dc ab ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	a0 01 0d 03 c0       	mov    al,ds:0xc0030d01
c001f171:	b9 08 00 00 00       	mov    ecx,0x8
c001f176:	c0 e8 03             	shr    al,0x3
c001f179:	83 e0 07             	and    eax,0x7
c001f17c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f180:	99                   	cdq    
c001f181:	f7 f9                	idiv   ecx
c001f183:	8b 04 d5 04 0d 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf2fc]
c001f18a:	8b 14 d5 08 0d 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf2f8]
c001f191:	83 c4 0c             	add    esp,0xc
c001f194:	c3                   	ret    

c001f195 <Vm::fpuSetReg(int, unsigned long long)>:
c001f195:	57                   	push   edi
c001f196:	56                   	push   esi
c001f197:	52                   	push   edx
c001f198:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f19c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1a0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f1a5:	76 10                	jbe    c001f1b7 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f1a7:	83 ec 0c             	sub    esp,0xc
c001f1aa:	68 a1 bb 02 c0       	push   0xc002bba1
c001f1af:	e8 91 ab ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c001f1b4:	83 c4 10             	add    esp,0x10
c001f1b7:	a0 01 0d 03 c0       	mov    al,ds:0xc0030d01
c001f1bc:	b9 08 00 00 00       	mov    ecx,0x8
c001f1c1:	c0 e8 03             	shr    al,0x3
c001f1c4:	83 e0 07             	and    eax,0x7
c001f1c7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f1cb:	99                   	cdq    
c001f1cc:	f7 f9                	idiv   ecx
c001f1ce:	89 34 d5 04 0d 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf2fc],esi
c001f1d5:	89 3c d5 08 0d 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf2f8],edi
c001f1dc:	58                   	pop    eax
c001f1dd:	5e                   	pop    esi
c001f1de:	5f                   	pop    edi
c001f1df:	c3                   	ret    

c001f1e0 <Vm::fpuPush(unsigned long long)>:
c001f1e0:	a0 01 0d 03 c0       	mov    al,ds:0xc0030d01
c001f1e5:	c0 e8 03             	shr    al,0x3
c001f1e8:	83 e0 07             	and    eax,0x7
c001f1eb:	83 c0 07             	add    eax,0x7
c001f1ee:	88 c2                	mov    dl,al
c001f1f0:	83 e0 07             	and    eax,0x7
c001f1f3:	83 e2 07             	and    edx,0x7
c001f1f6:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f1fd:	8a 15 01 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d01
c001f203:	83 e2 c7             	and    edx,0xffffffc7
c001f206:	09 ca                	or     edx,ecx
c001f208:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f20c:	88 15 01 0d 03 c0    	mov    BYTE PTR ds:0xc0030d01,dl
c001f212:	89 0c c5 08 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2f8],ecx
c001f219:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f21d:	89 14 c5 04 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2fc],edx
c001f224:	a1 44 0d 03 c0       	mov    eax,ds:0xc0030d44
c001f229:	83 f8 08             	cmp    eax,0x8
c001f22c:	75 08                	jne    c001f236 <Vm::fpuPush(unsigned long long)+0x56>
c001f22e:	80 0d 00 0d 03 c0 40 	or     BYTE PTR ds:0xc0030d00,0x40
c001f235:	c3                   	ret    
c001f236:	40                   	inc    eax
c001f237:	a3 44 0d 03 c0       	mov    ds:0xc0030d44,eax
c001f23c:	c3                   	ret    

c001f23d <Vm::fpuPop()>:
c001f23d:	8a 0d 01 0d 03 c0    	mov    cl,BYTE PTR ds:0xc0030d01
c001f243:	53                   	push   ebx
c001f244:	c0 e9 03             	shr    cl,0x3
c001f247:	8a 1d 01 0d 03 c0    	mov    bl,BYTE PTR ds:0xc0030d01
c001f24d:	83 e1 07             	and    ecx,0x7
c001f250:	83 e3 c7             	and    ebx,0xffffffc7
c001f253:	8b 04 cd 04 0d 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf2fc]
c001f25a:	8b 14 cd 08 0d 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf2f8]
c001f261:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f268:	83 e1 38             	and    ecx,0x38
c001f26b:	09 d9                	or     ecx,ebx
c001f26d:	88 0d 01 0d 03 c0    	mov    BYTE PTR ds:0xc0030d01,cl
c001f273:	8b 0d 44 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d44
c001f279:	85 c9                	test   ecx,ecx
c001f27b:	74 09                	je     c001f286 <Vm::fpuPop()+0x49>
c001f27d:	49                   	dec    ecx
c001f27e:	89 0d 44 0d 03 c0    	mov    DWORD PTR ds:0xc0030d44,ecx
c001f284:	eb 07                	jmp    c001f28d <Vm::fpuPop()+0x50>
c001f286:	80 0d 00 0d 03 c0 40 	or     BYTE PTR ds:0xc0030d00,0x40
c001f28d:	5b                   	pop    ebx
c001f28e:	c3                   	ret    

c001f28f <Vm::x87Handler(regs*)>:
c001f28f:	55                   	push   ebp
c001f290:	57                   	push   edi
c001f291:	56                   	push   esi
c001f292:	53                   	push   ebx
c001f293:	83 ec 1c             	sub    esp,0x1c
c001f296:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f29a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f29f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f2a2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f2aa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f2ae:	50                   	push   eax
c001f2af:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f2b3:	50                   	push   eax
c001f2b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2b8:	50                   	push   eax
c001f2b9:	53                   	push   ebx
c001f2ba:	e8 9f a1 ff ff       	call   c001945e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f2bf:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f2c2:	83 c4 10             	add    esp,0x10
c001f2c5:	89 c6                	mov    esi,eax
c001f2c7:	80 fa d9             	cmp    dl,0xd9
c001f2ca:	0f 85 52 01 00 00    	jne    c001f422 <Vm::x87Handler(regs*)+0x193>
c001f2d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2d4:	8d 50 20             	lea    edx,[eax+0x20]
c001f2d7:	80 fa 0e             	cmp    dl,0xe
c001f2da:	0f 87 86 00 00 00    	ja     c001f366 <Vm::x87Handler(regs*)+0xd7>
c001f2e0:	0f b6 d2             	movzx  edx,dl
c001f2e3:	ff 24 95 b4 bb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd444c]
c001f2ea:	e8 e7 fc ff ff       	call   c001efd6 <Vm::fpuGet0()>
c001f2ef:	eb 05                	jmp    c001f2f6 <Vm::x87Handler(regs*)+0x67>
c001f2f1:	e8 e5 fc ff ff       	call   c001efdb <Vm::fpuGet1()>
c001f2f6:	57                   	push   edi
c001f2f7:	57                   	push   edi
c001f2f8:	52                   	push   edx
c001f2f9:	50                   	push   eax
c001f2fa:	e8 e1 fe ff ff       	call   c001f1e0 <Vm::fpuPush(unsigned long long)>
c001f2ff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f303:	83 c4 10             	add    esp,0x10
c001f306:	b0 01                	mov    al,0x1
c001f308:	e9 e3 09 00 00       	jmp    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001f30d:	83 ec 0c             	sub    esp,0xc
c001f310:	6a 00                	push   0x0
c001f312:	e8 3b fe ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f317:	59                   	pop    ecx
c001f318:	5e                   	pop    esi
c001f319:	52                   	push   edx
c001f31a:	50                   	push   eax
c001f31b:	e8 c2 fd ff ff       	call   c001f0e2 <Vm::fpuChs(unsigned long long)>
c001f320:	eb 13                	jmp    c001f335 <Vm::x87Handler(regs*)+0xa6>
c001f322:	83 ec 0c             	sub    esp,0xc
c001f325:	6a 00                	push   0x0
c001f327:	e8 26 fe ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f32c:	5f                   	pop    edi
c001f32d:	5d                   	pop    ebp
c001f32e:	52                   	push   edx
c001f32f:	50                   	push   eax
c001f330:	e8 a4 fd ff ff       	call   c001f0d9 <Vm::fpuAbs(unsigned long long)>
c001f335:	83 c4 0c             	add    esp,0xc
c001f338:	52                   	push   edx
c001f339:	50                   	push   eax
c001f33a:	6a 00                	push   0x0
c001f33c:	e8 54 fe ff ff       	call   c001f195 <Vm::fpuSetReg(int, unsigned long long)>
c001f341:	eb bc                	jmp    c001f2ff <Vm::x87Handler(regs*)+0x70>
c001f343:	e8 d3 fc ff ff       	call   c001f01b <Vm::fpuGetLog210()>
c001f348:	eb ac                	jmp    c001f2f6 <Vm::x87Handler(regs*)+0x67>
c001f34a:	e8 9c fc ff ff       	call   c001efeb <Vm::fpuGetLog2E()>
c001f34f:	eb a5                	jmp    c001f2f6 <Vm::x87Handler(regs*)+0x67>
c001f351:	e8 8d fc ff ff       	call   c001efe3 <Vm::fpuGetPi()>
c001f356:	eb 9e                	jmp    c001f2f6 <Vm::x87Handler(regs*)+0x67>
c001f358:	e8 d6 fc ff ff       	call   c001f033 <Vm::fpuGetLog102()>
c001f35d:	eb 97                	jmp    c001f2f6 <Vm::x87Handler(regs*)+0x67>
c001f35f:	e8 9f fc ff ff       	call   c001f003 <Vm::fpuGetLogE2()>
c001f364:	eb 90                	jmp    c001f2f6 <Vm::x87Handler(regs*)+0x67>
c001f366:	8d 50 40             	lea    edx,[eax+0x40]
c001f369:	80 fa 07             	cmp    dl,0x7
c001f36c:	77 15                	ja     c001f383 <Vm::x87Handler(regs*)+0xf4>
c001f36e:	83 ec 0c             	sub    esp,0xc
c001f371:	2d c0 00 00 00       	sub    eax,0xc0
c001f376:	50                   	push   eax
c001f377:	e8 d6 fd ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f37c:	59                   	pop    ecx
c001f37d:	5e                   	pop    esi
c001f37e:	e9 75 ff ff ff       	jmp    c001f2f8 <Vm::x87Handler(regs*)+0x69>
c001f383:	8d 50 38             	lea    edx,[eax+0x38]
c001f386:	80 fa 07             	cmp    dl,0x7
c001f389:	77 3c                	ja     c001f3c7 <Vm::x87Handler(regs*)+0x138>
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	2d c8 00 00 00       	sub    eax,0xc8
c001f393:	50                   	push   eax
c001f394:	e8 b9 fd ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f399:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3a0:	89 c6                	mov    esi,eax
c001f3a2:	89 d7                	mov    edi,edx
c001f3a4:	e8 a9 fd ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f3a9:	83 c4 0c             	add    esp,0xc
c001f3ac:	52                   	push   edx
c001f3ad:	50                   	push   eax
c001f3ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3b2:	2d c8 00 00 00       	sub    eax,0xc8
c001f3b7:	50                   	push   eax
c001f3b8:	e8 d8 fd ff ff       	call   c001f195 <Vm::fpuSetReg(int, unsigned long long)>
c001f3bd:	83 c4 0c             	add    esp,0xc
c001f3c0:	57                   	push   edi
c001f3c1:	56                   	push   esi
c001f3c2:	e9 73 ff ff ff       	jmp    c001f33a <Vm::x87Handler(regs*)+0xab>
c001f3c7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3cb:	84 d2                	test   dl,dl
c001f3cd:	75 0f                	jne    c001f3de <Vm::x87Handler(regs*)+0x14f>
c001f3cf:	83 ec 0c             	sub    esp,0xc
c001f3d2:	ff 36                	push   DWORD PTR [esi]
c001f3d4:	e8 c8 fa ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001f3d9:	e9 bf 00 00 00       	jmp    c001f49d <Vm::x87Handler(regs*)+0x20e>
c001f3de:	80 fa 03             	cmp    dl,0x3
c001f3e1:	75 13                	jne    c001f3f6 <Vm::x87Handler(regs*)+0x167>
c001f3e3:	e8 55 fe ff ff       	call   c001f23d <Vm::fpuPop()>
c001f3e8:	55                   	push   ebp
c001f3e9:	55                   	push   ebp
c001f3ea:	52                   	push   edx
c001f3eb:	50                   	push   eax
c001f3ec:	e8 4c fa ff ff       	call   c001ee3d <Vm::fpuInternalTo32(unsigned long long)>
c001f3f1:	e9 88 00 00 00       	jmp    c001f47e <Vm::x87Handler(regs*)+0x1ef>
c001f3f6:	80 fa 05             	cmp    dl,0x5
c001f3f9:	75 0e                	jne    c001f409 <Vm::x87Handler(regs*)+0x17a>
c001f3fb:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3fe:	66 a3 02 0d 03 c0    	mov    ds:0xc0030d02,ax
c001f404:	e9 df 00 00 00       	jmp    c001f4e8 <Vm::x87Handler(regs*)+0x259>
c001f409:	31 c0                	xor    eax,eax
c001f40b:	80 fa 07             	cmp    dl,0x7
c001f40e:	0f 85 dc 08 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001f414:	66 a1 02 0d 03 c0    	mov    ax,ds:0xc0030d02
c001f41a:	66 89 06             	mov    WORD PTR [esi],ax
c001f41d:	e9 c6 00 00 00       	jmp    c001f4e8 <Vm::x87Handler(regs*)+0x259>
c001f422:	80 fa d8             	cmp    dl,0xd8
c001f425:	0f 84 c9 00 00 00    	je     c001f4f4 <Vm::x87Handler(regs*)+0x265>
c001f42b:	80 fa dc             	cmp    dl,0xdc
c001f42e:	0f 84 0d 02 00 00    	je     c001f641 <Vm::x87Handler(regs*)+0x3b2>
c001f434:	80 fa de             	cmp    dl,0xde
c001f437:	0f 84 cd 02 00 00    	je     c001f70a <Vm::x87Handler(regs*)+0x47b>
c001f43d:	80 fa dd             	cmp    dl,0xdd
c001f440:	0f 84 5f 04 00 00    	je     c001f8a5 <Vm::x87Handler(regs*)+0x616>
c001f446:	80 fa da             	cmp    dl,0xda
c001f449:	0f 84 24 05 00 00    	je     c001f973 <Vm::x87Handler(regs*)+0x6e4>
c001f44f:	80 fa df             	cmp    dl,0xdf
c001f452:	0f 84 68 05 00 00    	je     c001f9c0 <Vm::x87Handler(regs*)+0x731>
c001f458:	31 c0                	xor    eax,eax
c001f45a:	80 fa db             	cmp    dl,0xdb
c001f45d:	0f 85 8d 08 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001f463:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f467:	80 fa 03             	cmp    dl,0x3
c001f46a:	0f 85 70 06 00 00    	jne    c001fae0 <Vm::x87Handler(regs*)+0x851>
c001f470:	e8 c8 fd ff ff       	call   c001f23d <Vm::fpuPop()>
c001f475:	55                   	push   ebp
c001f476:	55                   	push   ebp
c001f477:	52                   	push   edx
c001f478:	50                   	push   eax
c001f479:	e8 71 fa ff ff       	call   c001eeef <Vm::fpuFloatToLong(unsigned long long)>
c001f47e:	83 c4 10             	add    esp,0x10
c001f481:	89 06                	mov    DWORD PTR [esi],eax
c001f483:	eb 63                	jmp    c001f4e8 <Vm::x87Handler(regs*)+0x259>
c001f485:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f489:	84 d2                	test   dl,dl
c001f48b:	0f 85 e6 05 00 00    	jne    c001fa77 <Vm::x87Handler(regs*)+0x7e8>
c001f491:	57                   	push   edi
c001f492:	57                   	push   edi
c001f493:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f496:	ff 36                	push   DWORD PTR [esi]
c001f498:	e8 49 fa ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001f49d:	5e                   	pop    esi
c001f49e:	5f                   	pop    edi
c001f49f:	52                   	push   edx
c001f4a0:	50                   	push   eax
c001f4a1:	e8 3a fd ff ff       	call   c001f1e0 <Vm::fpuPush(unsigned long long)>
c001f4a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f4aa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f4ad:	e9 51 fe ff ff       	jmp    c001f303 <Vm::x87Handler(regs*)+0x74>
c001f4b2:	80 fa 03             	cmp    dl,0x3
c001f4b5:	0f 85 d7 06 00 00    	jne    c001fb92 <Vm::x87Handler(regs*)+0x903>
c001f4bb:	57                   	push   edi
c001f4bc:	57                   	push   edi
c001f4bd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4c0:	ff 36                	push   DWORD PTR [esi]
c001f4c2:	e8 1f fa ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001f4c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4ce:	89 c6                	mov    esi,eax
c001f4d0:	89 d7                	mov    edi,edx
c001f4d2:	e8 7b fc ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f4d7:	57                   	push   edi
c001f4d8:	56                   	push   esi
c001f4d9:	52                   	push   edx
c001f4da:	50                   	push   eax
c001f4db:	e8 95 fb ff ff       	call   c001f075 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f4e0:	83 c4 20             	add    esp,0x20
c001f4e3:	e8 55 fd ff ff       	call   c001f23d <Vm::fpuPop()>
c001f4e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4ec:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f4ef:	e9 12 fe ff ff       	jmp    c001f306 <Vm::x87Handler(regs*)+0x77>
c001f4f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4f8:	8d 50 40             	lea    edx,[eax+0x40]
c001f4fb:	80 fa 07             	cmp    dl,0x7
c001f4fe:	77 29                	ja     c001f529 <Vm::x87Handler(regs*)+0x29a>
c001f500:	83 ec 0c             	sub    esp,0xc
c001f503:	2d c0 00 00 00       	sub    eax,0xc0
c001f508:	50                   	push   eax
c001f509:	e8 44 fc ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f50e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f515:	89 c6                	mov    esi,eax
c001f517:	89 d7                	mov    edi,edx
c001f519:	e8 34 fc ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f51e:	57                   	push   edi
c001f51f:	56                   	push   esi
c001f520:	52                   	push   edx
c001f521:	50                   	push   eax
c001f522:	e8 a1 fb ff ff       	call   c001f0c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f527:	eb 2f                	jmp    c001f558 <Vm::x87Handler(regs*)+0x2c9>
c001f529:	8d 50 38             	lea    edx,[eax+0x38]
c001f52c:	80 fa 07             	cmp    dl,0x7
c001f52f:	77 2f                	ja     c001f560 <Vm::x87Handler(regs*)+0x2d1>
c001f531:	83 ec 0c             	sub    esp,0xc
c001f534:	2d c8 00 00 00       	sub    eax,0xc8
c001f539:	50                   	push   eax
c001f53a:	e8 13 fc ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f53f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f546:	89 c6                	mov    esi,eax
c001f548:	89 d7                	mov    edi,edx
c001f54a:	e8 03 fc ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f54f:	57                   	push   edi
c001f550:	56                   	push   esi
c001f551:	52                   	push   edx
c001f552:	50                   	push   eax
c001f553:	e8 a9 fb ff ff       	call   c001f101 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f558:	83 c4 1c             	add    esp,0x1c
c001f55b:	e9 d8 fd ff ff       	jmp    c001f338 <Vm::x87Handler(regs*)+0xa9>
c001f560:	8d 50 30             	lea    edx,[eax+0x30]
c001f563:	80 fa 07             	cmp    dl,0x7
c001f566:	77 0d                	ja     c001f575 <Vm::x87Handler(regs*)+0x2e6>
c001f568:	83 ec 0c             	sub    esp,0xc
c001f56b:	2d d0 00 00 00       	sub    eax,0xd0
c001f570:	e9 99 03 00 00       	jmp    c001f90e <Vm::x87Handler(regs*)+0x67f>
c001f575:	8d 50 28             	lea    edx,[eax+0x28]
c001f578:	80 fa 07             	cmp    dl,0x7
c001f57b:	77 0d                	ja     c001f58a <Vm::x87Handler(regs*)+0x2fb>
c001f57d:	83 ec 0c             	sub    esp,0xc
c001f580:	2d d8 00 00 00       	sub    eax,0xd8
c001f585:	e9 c0 03 00 00       	jmp    c001f94a <Vm::x87Handler(regs*)+0x6bb>
c001f58a:	8d 50 20             	lea    edx,[eax+0x20]
c001f58d:	80 fa 07             	cmp    dl,0x7
c001f590:	77 1b                	ja     c001f5ad <Vm::x87Handler(regs*)+0x31e>
c001f592:	83 ec 0c             	sub    esp,0xc
c001f595:	2d e0 00 00 00       	sub    eax,0xe0
c001f59a:	50                   	push   eax
c001f59b:	e8 b2 fb ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f5a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a7:	89 c6                	mov    esi,eax
c001f5a9:	89 d7                	mov    edi,edx
c001f5ab:	eb 22                	jmp    c001f5cf <Vm::x87Handler(regs*)+0x340>
c001f5ad:	8d 50 18             	lea    edx,[eax+0x18]
c001f5b0:	80 fa 07             	cmp    dl,0x7
c001f5b3:	77 2d                	ja     c001f5e2 <Vm::x87Handler(regs*)+0x353>
c001f5b5:	83 ec 0c             	sub    esp,0xc
c001f5b8:	6a 00                	push   0x0
c001f5ba:	e8 93 fb ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f5bf:	89 c6                	mov    esi,eax
c001f5c1:	89 d7                	mov    edi,edx
c001f5c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5c7:	2d e8 00 00 00       	sub    eax,0xe8
c001f5cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5cf:	e8 7e fb ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f5d4:	57                   	push   edi
c001f5d5:	56                   	push   esi
c001f5d6:	52                   	push   edx
c001f5d7:	50                   	push   eax
c001f5d8:	e8 15 fb ff ff       	call   c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f5dd:	e9 76 ff ff ff       	jmp    c001f558 <Vm::x87Handler(regs*)+0x2c9>
c001f5e2:	8d 50 10             	lea    edx,[eax+0x10]
c001f5e5:	80 fa 07             	cmp    dl,0x7
c001f5e8:	77 1b                	ja     c001f605 <Vm::x87Handler(regs*)+0x376>
c001f5ea:	83 ec 0c             	sub    esp,0xc
c001f5ed:	2d f0 00 00 00       	sub    eax,0xf0
c001f5f2:	50                   	push   eax
c001f5f3:	e8 5a fb ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f5f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5ff:	89 c6                	mov    esi,eax
c001f601:	89 d7                	mov    edi,edx
c001f603:	eb 22                	jmp    c001f627 <Vm::x87Handler(regs*)+0x398>
c001f605:	3c f7                	cmp    al,0xf7
c001f607:	0f 86 d1 03 00 00    	jbe    c001f9de <Vm::x87Handler(regs*)+0x74f>
c001f60d:	83 ec 0c             	sub    esp,0xc
c001f610:	6a 00                	push   0x0
c001f612:	e8 3b fb ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f617:	89 c6                	mov    esi,eax
c001f619:	89 d7                	mov    edi,edx
c001f61b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f61f:	2d f8 00 00 00       	sub    eax,0xf8
c001f624:	89 04 24             	mov    DWORD PTR [esp],eax
c001f627:	e8 26 fb ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f62c:	57                   	push   edi
c001f62d:	56                   	push   esi
c001f62e:	52                   	push   edx
c001f62f:	50                   	push   eax
c001f630:	e8 eb fa ff ff       	call   c001f120 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f635:	83 c4 1c             	add    esp,0x1c
c001f638:	52                   	push   edx
c001f639:	50                   	push   eax
c001f63a:	6a 00                	push   0x0
c001f63c:	e9 51 02 00 00       	jmp    c001f892 <Vm::x87Handler(regs*)+0x603>
c001f641:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f645:	8d 50 40             	lea    edx,[eax+0x40]
c001f648:	80 fa 07             	cmp    dl,0x7
c001f64b:	77 37                	ja     c001f684 <Vm::x87Handler(regs*)+0x3f5>
c001f64d:	83 ec 0c             	sub    esp,0xc
c001f650:	2d c0 00 00 00       	sub    eax,0xc0
c001f655:	50                   	push   eax
c001f656:	e8 f7 fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f65b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f662:	89 c6                	mov    esi,eax
c001f664:	89 d7                	mov    edi,edx
c001f666:	e8 e7 fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f66b:	57                   	push   edi
c001f66c:	56                   	push   esi
c001f66d:	52                   	push   edx
c001f66e:	50                   	push   eax
c001f66f:	e8 54 fa ff ff       	call   c001f0c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f674:	83 c4 1c             	add    esp,0x1c
c001f677:	52                   	push   edx
c001f678:	50                   	push   eax
c001f679:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f67d:	2d c0 00 00 00       	sub    eax,0xc0
c001f682:	eb 3d                	jmp    c001f6c1 <Vm::x87Handler(regs*)+0x432>
c001f684:	8d 50 38             	lea    edx,[eax+0x38]
c001f687:	80 fa 07             	cmp    dl,0x7
c001f68a:	77 3b                	ja     c001f6c7 <Vm::x87Handler(regs*)+0x438>
c001f68c:	83 ec 0c             	sub    esp,0xc
c001f68f:	2d c8 00 00 00       	sub    eax,0xc8
c001f694:	50                   	push   eax
c001f695:	e8 b8 fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f69a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6a1:	89 c6                	mov    esi,eax
c001f6a3:	89 d7                	mov    edi,edx
c001f6a5:	e8 a8 fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f6aa:	57                   	push   edi
c001f6ab:	56                   	push   esi
c001f6ac:	52                   	push   edx
c001f6ad:	50                   	push   eax
c001f6ae:	e8 4e fa ff ff       	call   c001f101 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6b3:	83 c4 1c             	add    esp,0x1c
c001f6b6:	52                   	push   edx
c001f6b7:	50                   	push   eax
c001f6b8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6bc:	2d c8 00 00 00       	sub    eax,0xc8
c001f6c1:	50                   	push   eax
c001f6c2:	e9 75 fc ff ff       	jmp    c001f33c <Vm::x87Handler(regs*)+0xad>
c001f6c7:	83 c0 18             	add    eax,0x18
c001f6ca:	3c 07                	cmp    al,0x7
c001f6cc:	0f 87 3b 04 00 00    	ja     c001fb0d <Vm::x87Handler(regs*)+0x87e>
c001f6d2:	83 ec 0c             	sub    esp,0xc
c001f6d5:	6a 00                	push   0x0
c001f6d7:	e8 76 fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f6dc:	89 c6                	mov    esi,eax
c001f6de:	89 d7                	mov    edi,edx
c001f6e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e4:	2d e8 00 00 00       	sub    eax,0xe8
c001f6e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6ec:	e8 61 fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f6f1:	57                   	push   edi
c001f6f2:	56                   	push   esi
c001f6f3:	52                   	push   edx
c001f6f4:	50                   	push   eax
c001f6f5:	e8 f8 f9 ff ff       	call   c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6fa:	83 c4 1c             	add    esp,0x1c
c001f6fd:	52                   	push   edx
c001f6fe:	50                   	push   eax
c001f6ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f703:	2d e8 00 00 00       	sub    eax,0xe8
c001f708:	eb b7                	jmp    c001f6c1 <Vm::x87Handler(regs*)+0x432>
c001f70a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70e:	8d 50 40             	lea    edx,[eax+0x40]
c001f711:	80 fa 07             	cmp    dl,0x7
c001f714:	77 3a                	ja     c001f750 <Vm::x87Handler(regs*)+0x4c1>
c001f716:	83 ec 0c             	sub    esp,0xc
c001f719:	2d c0 00 00 00       	sub    eax,0xc0
c001f71e:	50                   	push   eax
c001f71f:	e8 2e fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f724:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f72b:	89 c6                	mov    esi,eax
c001f72d:	89 d7                	mov    edi,edx
c001f72f:	e8 1e fa ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f734:	57                   	push   edi
c001f735:	56                   	push   esi
c001f736:	52                   	push   edx
c001f737:	50                   	push   eax
c001f738:	e8 8b f9 ff ff       	call   c001f0c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f73d:	83 c4 1c             	add    esp,0x1c
c001f740:	52                   	push   edx
c001f741:	50                   	push   eax
c001f742:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f746:	2d c0 00 00 00       	sub    eax,0xc0
c001f74b:	e9 9e 01 00 00       	jmp    c001f8ee <Vm::x87Handler(regs*)+0x65f>
c001f750:	8d 50 20             	lea    edx,[eax+0x20]
c001f753:	80 fa 07             	cmp    dl,0x7
c001f756:	77 3a                	ja     c001f792 <Vm::x87Handler(regs*)+0x503>
c001f758:	83 ec 0c             	sub    esp,0xc
c001f75b:	2d e0 00 00 00       	sub    eax,0xe0
c001f760:	50                   	push   eax
c001f761:	e8 ec f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f766:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f76d:	89 c6                	mov    esi,eax
c001f76f:	89 d7                	mov    edi,edx
c001f771:	e8 dc f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f776:	57                   	push   edi
c001f777:	56                   	push   esi
c001f778:	52                   	push   edx
c001f779:	50                   	push   eax
c001f77a:	e8 73 f9 ff ff       	call   c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f77f:	83 c4 1c             	add    esp,0x1c
c001f782:	52                   	push   edx
c001f783:	50                   	push   eax
c001f784:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f788:	2d e0 00 00 00       	sub    eax,0xe0
c001f78d:	e9 5c 01 00 00       	jmp    c001f8ee <Vm::x87Handler(regs*)+0x65f>
c001f792:	8d 50 18             	lea    edx,[eax+0x18]
c001f795:	80 fa 07             	cmp    dl,0x7
c001f798:	77 3b                	ja     c001f7d5 <Vm::x87Handler(regs*)+0x546>
c001f79a:	83 ec 0c             	sub    esp,0xc
c001f79d:	6a 00                	push   0x0
c001f79f:	e8 ae f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f7a4:	89 c6                	mov    esi,eax
c001f7a6:	89 d7                	mov    edi,edx
c001f7a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ac:	2d e8 00 00 00       	sub    eax,0xe8
c001f7b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7b4:	e8 99 f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f7b9:	57                   	push   edi
c001f7ba:	56                   	push   esi
c001f7bb:	52                   	push   edx
c001f7bc:	50                   	push   eax
c001f7bd:	e8 30 f9 ff ff       	call   c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7c2:	83 c4 1c             	add    esp,0x1c
c001f7c5:	52                   	push   edx
c001f7c6:	50                   	push   eax
c001f7c7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7cb:	2d e8 00 00 00       	sub    eax,0xe8
c001f7d0:	e9 19 01 00 00       	jmp    c001f8ee <Vm::x87Handler(regs*)+0x65f>
c001f7d5:	8d 50 38             	lea    edx,[eax+0x38]
c001f7d8:	80 fa 07             	cmp    dl,0x7
c001f7db:	77 37                	ja     c001f814 <Vm::x87Handler(regs*)+0x585>
c001f7dd:	83 ec 0c             	sub    esp,0xc
c001f7e0:	2d c8 00 00 00       	sub    eax,0xc8
c001f7e5:	50                   	push   eax
c001f7e6:	e8 67 f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f7eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7f2:	89 c6                	mov    esi,eax
c001f7f4:	89 d7                	mov    edi,edx
c001f7f6:	e8 57 f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f7fb:	57                   	push   edi
c001f7fc:	56                   	push   esi
c001f7fd:	52                   	push   edx
c001f7fe:	50                   	push   eax
c001f7ff:	e8 fd f8 ff ff       	call   c001f101 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f804:	83 c4 1c             	add    esp,0x1c
c001f807:	52                   	push   edx
c001f808:	50                   	push   eax
c001f809:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f80d:	2d c8 00 00 00       	sub    eax,0xc8
c001f812:	eb 7d                	jmp    c001f891 <Vm::x87Handler(regs*)+0x602>
c001f814:	3c f7                	cmp    al,0xf7
c001f816:	76 38                	jbe    c001f850 <Vm::x87Handler(regs*)+0x5c1>
c001f818:	83 ec 0c             	sub    esp,0xc
c001f81b:	6a 00                	push   0x0
c001f81d:	e8 30 f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f822:	89 c6                	mov    esi,eax
c001f824:	89 d7                	mov    edi,edx
c001f826:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f82a:	2d f8 00 00 00       	sub    eax,0xf8
c001f82f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f832:	e8 1b f9 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f837:	57                   	push   edi
c001f838:	56                   	push   esi
c001f839:	52                   	push   edx
c001f83a:	50                   	push   eax
c001f83b:	e8 e0 f8 ff ff       	call   c001f120 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f840:	83 c4 1c             	add    esp,0x1c
c001f843:	52                   	push   edx
c001f844:	50                   	push   eax
c001f845:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f849:	2d f8 00 00 00       	sub    eax,0xf8
c001f84e:	eb 41                	jmp    c001f891 <Vm::x87Handler(regs*)+0x602>
c001f850:	8d 50 10             	lea    edx,[eax+0x10]
c001f853:	80 fa 07             	cmp    dl,0x7
c001f856:	0f 87 5a 01 00 00    	ja     c001f9b6 <Vm::x87Handler(regs*)+0x727>
c001f85c:	83 ec 0c             	sub    esp,0xc
c001f85f:	2d f0 00 00 00       	sub    eax,0xf0
c001f864:	50                   	push   eax
c001f865:	e8 e8 f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f86a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f871:	89 c6                	mov    esi,eax
c001f873:	89 d7                	mov    edi,edx
c001f875:	e8 d8 f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f87a:	57                   	push   edi
c001f87b:	56                   	push   esi
c001f87c:	52                   	push   edx
c001f87d:	50                   	push   eax
c001f87e:	e8 9d f8 ff ff       	call   c001f120 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f883:	83 c4 1c             	add    esp,0x1c
c001f886:	52                   	push   edx
c001f887:	50                   	push   eax
c001f888:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f88c:	2d f0 00 00 00       	sub    eax,0xf0
c001f891:	50                   	push   eax
c001f892:	e8 fe f8 ff ff       	call   c001f195 <Vm::fpuSetReg(int, unsigned long long)>
c001f897:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f89b:	e8 9d f9 ff ff       	call   c001f23d <Vm::fpuPop()>
c001f8a0:	e9 5e fa ff ff       	jmp    c001f303 <Vm::x87Handler(regs*)+0x74>
c001f8a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a9:	8d 50 30             	lea    edx,[eax+0x30]
c001f8ac:	80 fa 07             	cmp    dl,0x7
c001f8af:	77 1d                	ja     c001f8ce <Vm::x87Handler(regs*)+0x63f>
c001f8b1:	83 ec 0c             	sub    esp,0xc
c001f8b4:	6a 00                	push   0x0
c001f8b6:	e8 97 f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f8bb:	83 c4 0c             	add    esp,0xc
c001f8be:	52                   	push   edx
c001f8bf:	50                   	push   eax
c001f8c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8c4:	2d d0 00 00 00       	sub    eax,0xd0
c001f8c9:	e9 f3 fd ff ff       	jmp    c001f6c1 <Vm::x87Handler(regs*)+0x432>
c001f8ce:	8d 50 28             	lea    edx,[eax+0x28]
c001f8d1:	80 fa 07             	cmp    dl,0x7
c001f8d4:	77 28                	ja     c001f8fe <Vm::x87Handler(regs*)+0x66f>
c001f8d6:	83 ec 0c             	sub    esp,0xc
c001f8d9:	6a 00                	push   0x0
c001f8db:	e8 72 f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f8e0:	83 c4 0c             	add    esp,0xc
c001f8e3:	52                   	push   edx
c001f8e4:	50                   	push   eax
c001f8e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8e9:	2d d8 00 00 00       	sub    eax,0xd8
c001f8ee:	50                   	push   eax
c001f8ef:	e8 a1 f8 ff ff       	call   c001f195 <Vm::fpuSetReg(int, unsigned long long)>
c001f8f4:	e8 44 f9 ff ff       	call   c001f23d <Vm::fpuPop()>
c001f8f9:	e9 01 fa ff ff       	jmp    c001f2ff <Vm::x87Handler(regs*)+0x70>
c001f8fe:	8d 50 20             	lea    edx,[eax+0x20]
c001f901:	80 fa 07             	cmp    dl,0x7
c001f904:	77 30                	ja     c001f936 <Vm::x87Handler(regs*)+0x6a7>
c001f906:	83 ec 0c             	sub    esp,0xc
c001f909:	2d e0 00 00 00       	sub    eax,0xe0
c001f90e:	50                   	push   eax
c001f90f:	e8 3e f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f914:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f91b:	89 c6                	mov    esi,eax
c001f91d:	89 d7                	mov    edi,edx
c001f91f:	e8 2e f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f924:	57                   	push   edi
c001f925:	56                   	push   esi
c001f926:	52                   	push   edx
c001f927:	50                   	push   eax
c001f928:	e8 48 f7 ff ff       	call   c001f075 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f92d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f931:	e9 54 02 00 00       	jmp    c001fb8a <Vm::x87Handler(regs*)+0x8fb>
c001f936:	8d 50 18             	lea    edx,[eax+0x18]
c001f939:	80 fa 07             	cmp    dl,0x7
c001f93c:	0f 87 43 fb ff ff    	ja     c001f485 <Vm::x87Handler(regs*)+0x1f6>
c001f942:	83 ec 0c             	sub    esp,0xc
c001f945:	2d e8 00 00 00       	sub    eax,0xe8
c001f94a:	50                   	push   eax
c001f94b:	e8 02 f8 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f957:	89 c6                	mov    esi,eax
c001f959:	89 d7                	mov    edi,edx
c001f95b:	e8 f2 f7 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f960:	57                   	push   edi
c001f961:	56                   	push   esi
c001f962:	52                   	push   edx
c001f963:	50                   	push   eax
c001f964:	e8 0c f7 ff ff       	call   c001f075 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f969:	83 c4 20             	add    esp,0x20
c001f96c:	e8 cc f8 ff ff       	call   c001f23d <Vm::fpuPop()>
c001f971:	eb 62                	jmp    c001f9d5 <Vm::x87Handler(regs*)+0x746>
c001f973:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f977:	0f 85 0f 01 00 00    	jne    c001fa8c <Vm::x87Handler(regs*)+0x7fd>
c001f97d:	83 ec 0c             	sub    esp,0xc
c001f980:	6a 01                	push   0x1
c001f982:	e8 cb f7 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f987:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f98e:	89 c6                	mov    esi,eax
c001f990:	89 d7                	mov    edi,edx
c001f992:	e8 bb f7 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001f997:	57                   	push   edi
c001f998:	56                   	push   esi
c001f999:	52                   	push   edx
c001f99a:	50                   	push   eax
c001f99b:	e8 d5 f6 ff ff       	call   c001f075 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9a0:	83 c4 20             	add    esp,0x20
c001f9a3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9a7:	e8 91 f8 ff ff       	call   c001f23d <Vm::fpuPop()>
c001f9ac:	e8 8c f8 ff ff       	call   c001f23d <Vm::fpuPop()>
c001f9b1:	e9 50 f9 ff ff       	jmp    c001f306 <Vm::x87Handler(regs*)+0x77>
c001f9b6:	3c d9                	cmp    al,0xd9
c001f9b8:	0f 85 b5 02 00 00    	jne    c001fc73 <Vm::x87Handler(regs*)+0x9e4>
c001f9be:	eb bd                	jmp    c001f97d <Vm::x87Handler(regs*)+0x6ee>
c001f9c0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f9c4:	0f 85 ea 02 00 00    	jne    c001fcb4 <Vm::x87Handler(regs*)+0xa25>
c001f9ca:	0f b7 05 00 0d 03 c0 	movzx  eax,WORD PTR ds:0xc0030d00
c001f9d1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f9d5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9d9:	e9 28 f9 ff ff       	jmp    c001f306 <Vm::x87Handler(regs*)+0x77>
c001f9de:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9e2:	84 d2                	test   dl,dl
c001f9e4:	75 0f                	jne    c001f9f5 <Vm::x87Handler(regs*)+0x766>
c001f9e6:	83 ec 0c             	sub    esp,0xc
c001f9e9:	ff 36                	push   DWORD PTR [esi]
c001f9eb:	e8 b1 f4 ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001f9f0:	e9 2c 01 00 00       	jmp    c001fb21 <Vm::x87Handler(regs*)+0x892>
c001f9f5:	80 fa 01             	cmp    dl,0x1
c001f9f8:	75 0f                	jne    c001fa09 <Vm::x87Handler(regs*)+0x77a>
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	ff 36                	push   DWORD PTR [esi]
c001f9ff:	e8 9d f4 ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001fa04:	e9 81 02 00 00       	jmp    c001fc8a <Vm::x87Handler(regs*)+0x9fb>
c001fa09:	80 fa 04             	cmp    dl,0x4
c001fa0c:	75 0f                	jne    c001fa1d <Vm::x87Handler(regs*)+0x78e>
c001fa0e:	83 ec 0c             	sub    esp,0xc
c001fa11:	ff 36                	push   DWORD PTR [esi]
c001fa13:	e8 89 f4 ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001fa18:	e9 86 01 00 00       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x914>
c001fa1d:	80 fa 05             	cmp    dl,0x5
c001fa20:	75 1b                	jne    c001fa3d <Vm::x87Handler(regs*)+0x7ae>
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	6a 00                	push   0x0
c001fa27:	e8 26 f7 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fa2c:	89 c7                	mov    edi,eax
c001fa2e:	89 d5                	mov    ebp,edx
c001fa30:	58                   	pop    eax
c001fa31:	ff 36                	push   DWORD PTR [esi]
c001fa33:	e8 69 f4 ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001fa38:	e9 a3 01 00 00       	jmp    c001fbe0 <Vm::x87Handler(regs*)+0x951>
c001fa3d:	80 fa 06             	cmp    dl,0x6
c001fa40:	75 0f                	jne    c001fa51 <Vm::x87Handler(regs*)+0x7c2>
c001fa42:	83 ec 0c             	sub    esp,0xc
c001fa45:	ff 36                	push   DWORD PTR [esi]
c001fa47:	e8 55 f4 ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001fa4c:	e9 ae 01 00 00       	jmp    c001fbff <Vm::x87Handler(regs*)+0x970>
c001fa51:	31 c0                	xor    eax,eax
c001fa53:	80 fa 07             	cmp    dl,0x7
c001fa56:	0f 85 94 02 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fa5c:	83 ec 0c             	sub    esp,0xc
c001fa5f:	6a 00                	push   0x0
c001fa61:	e8 ec f6 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fa66:	89 c7                	mov    edi,eax
c001fa68:	89 d5                	mov    ebp,edx
c001fa6a:	58                   	pop    eax
c001fa6b:	ff 36                	push   DWORD PTR [esi]
c001fa6d:	e8 2f f4 ff ff       	call   c001eea1 <Vm::fpu32ToInternal(unsigned int)>
c001fa72:	e9 cb 01 00 00       	jmp    c001fc42 <Vm::x87Handler(regs*)+0x9b3>
c001fa77:	80 fa 03             	cmp    dl,0x3
c001fa7a:	0f 85 d3 01 00 00    	jne    c001fc53 <Vm::x87Handler(regs*)+0x9c4>
c001fa80:	e8 b8 f7 ff ff       	call   c001f23d <Vm::fpuPop()>
c001fa85:	51                   	push   ecx
c001fa86:	51                   	push   ecx
c001fa87:	e9 de 01 00 00       	jmp    c001fc6a <Vm::x87Handler(regs*)+0x9db>
c001fa8c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa90:	80 fa 01             	cmp    dl,0x1
c001fa93:	75 09                	jne    c001fa9e <Vm::x87Handler(regs*)+0x80f>
c001fa95:	57                   	push   edi
c001fa96:	57                   	push   edi
c001fa97:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa99:	e9 e3 01 00 00       	jmp    c001fc81 <Vm::x87Handler(regs*)+0x9f2>
c001fa9e:	80 fa 04             	cmp    dl,0x4
c001faa1:	75 12                	jne    c001fab5 <Vm::x87Handler(regs*)+0x826>
c001faa3:	31 d2                	xor    edx,edx
c001faa5:	51                   	push   ecx
c001faa6:	51                   	push   ecx
c001faa7:	8b 06                	mov    eax,DWORD PTR [esi]
c001faa9:	52                   	push   edx
c001faaa:	50                   	push   eax
c001faab:	e8 d0 f4 ff ff       	call   c001ef80 <Vm::fpuLongToFloat(long long)>
c001fab0:	e9 ee 00 00 00       	jmp    c001fba3 <Vm::x87Handler(regs*)+0x914>
c001fab5:	31 c0                	xor    eax,eax
c001fab7:	80 fa 07             	cmp    dl,0x7
c001faba:	0f 85 30 02 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	6a 00                	push   0x0
c001fac5:	e8 88 f6 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001faca:	89 c7                	mov    edi,eax
c001facc:	89 d5                	mov    ebp,edx
c001face:	58                   	pop    eax
c001facf:	8b 06                	mov    eax,DWORD PTR [esi]
c001fad1:	5a                   	pop    edx
c001fad2:	31 d2                	xor    edx,edx
c001fad4:	52                   	push   edx
c001fad5:	50                   	push   eax
c001fad6:	e8 a5 f4 ff ff       	call   c001ef80 <Vm::fpuLongToFloat(long long)>
c001fadb:	e9 62 01 00 00       	jmp    c001fc42 <Vm::x87Handler(regs*)+0x9b3>
c001fae0:	84 d2                	test   dl,dl
c001fae2:	75 0d                	jne    c001faf1 <Vm::x87Handler(regs*)+0x862>
c001fae4:	31 d2                	xor    edx,edx
c001fae6:	55                   	push   ebp
c001fae7:	55                   	push   ebp
c001fae8:	8b 06                	mov    eax,DWORD PTR [esi]
c001faea:	52                   	push   edx
c001faeb:	50                   	push   eax
c001faec:	e9 d3 01 00 00       	jmp    c001fcc4 <Vm::x87Handler(regs*)+0xa35>
c001faf1:	31 c0                	xor    eax,eax
c001faf3:	80 fa 02             	cmp    dl,0x2
c001faf6:	0f 85 f4 01 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	6a 00                	push   0x0
c001fb01:	e8 4c f6 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fb06:	59                   	pop    ecx
c001fb07:	5f                   	pop    edi
c001fb08:	e9 6a f9 ff ff       	jmp    c001f477 <Vm::x87Handler(regs*)+0x1e8>
c001fb0d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb11:	84 d2                	test   dl,dl
c001fb13:	75 2a                	jne    c001fb3f <Vm::x87Handler(regs*)+0x8b0>
c001fb15:	50                   	push   eax
c001fb16:	50                   	push   eax
c001fb17:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb1a:	ff 36                	push   DWORD PTR [esi]
c001fb1c:	e8 c5 f3 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fb21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb28:	89 c6                	mov    esi,eax
c001fb2a:	89 d7                	mov    edi,edx
c001fb2c:	e8 21 f6 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fb31:	57                   	push   edi
c001fb32:	56                   	push   esi
c001fb33:	52                   	push   edx
c001fb34:	50                   	push   eax
c001fb35:	e8 8e f5 ff ff       	call   c001f0c8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb3a:	e9 64 01 00 00       	jmp    c001fca3 <Vm::x87Handler(regs*)+0xa14>
c001fb3f:	80 fa 01             	cmp    dl,0x1
c001fb42:	75 11                	jne    c001fb55 <Vm::x87Handler(regs*)+0x8c6>
c001fb44:	50                   	push   eax
c001fb45:	50                   	push   eax
c001fb46:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb49:	ff 36                	push   DWORD PTR [esi]
c001fb4b:	e8 96 f3 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fb50:	e9 35 01 00 00       	jmp    c001fc8a <Vm::x87Handler(regs*)+0x9fb>
c001fb55:	80 fa 02             	cmp    dl,0x2
c001fb58:	0f 85 54 f9 ff ff    	jne    c001f4b2 <Vm::x87Handler(regs*)+0x223>
c001fb5e:	55                   	push   ebp
c001fb5f:	55                   	push   ebp
c001fb60:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb63:	ff 36                	push   DWORD PTR [esi]
c001fb65:	e8 7c f3 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fb6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb71:	89 c6                	mov    esi,eax
c001fb73:	89 d7                	mov    edi,edx
c001fb75:	e8 d8 f5 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fb7a:	57                   	push   edi
c001fb7b:	56                   	push   esi
c001fb7c:	52                   	push   edx
c001fb7d:	50                   	push   eax
c001fb7e:	e8 f2 f4 ff ff       	call   c001f075 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fb87:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb8a:	83 c4 20             	add    esp,0x20
c001fb8d:	e9 74 f7 ff ff       	jmp    c001f306 <Vm::x87Handler(regs*)+0x77>
c001fb92:	80 fa 04             	cmp    dl,0x4
c001fb95:	75 2a                	jne    c001fbc1 <Vm::x87Handler(regs*)+0x932>
c001fb97:	51                   	push   ecx
c001fb98:	51                   	push   ecx
c001fb99:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb9c:	ff 36                	push   DWORD PTR [esi]
c001fb9e:	e8 43 f3 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fba3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbaa:	89 c6                	mov    esi,eax
c001fbac:	89 d7                	mov    edi,edx
c001fbae:	e8 9f f5 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fbb3:	57                   	push   edi
c001fbb4:	56                   	push   esi
c001fbb5:	52                   	push   edx
c001fbb6:	50                   	push   eax
c001fbb7:	e8 36 f5 ff ff       	call   c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbbc:	e9 e2 00 00 00       	jmp    c001fca3 <Vm::x87Handler(regs*)+0xa14>
c001fbc1:	80 fa 05             	cmp    dl,0x5
c001fbc4:	75 28                	jne    c001fbee <Vm::x87Handler(regs*)+0x95f>
c001fbc6:	83 ec 0c             	sub    esp,0xc
c001fbc9:	6a 00                	push   0x0
c001fbcb:	e8 82 f5 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fbd0:	89 c7                	mov    edi,eax
c001fbd2:	89 d5                	mov    ebp,edx
c001fbd4:	58                   	pop    eax
c001fbd5:	5a                   	pop    edx
c001fbd6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbd9:	ff 36                	push   DWORD PTR [esi]
c001fbdb:	e8 06 f3 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fbe0:	83 c4 10             	add    esp,0x10
c001fbe3:	55                   	push   ebp
c001fbe4:	57                   	push   edi
c001fbe5:	52                   	push   edx
c001fbe6:	50                   	push   eax
c001fbe7:	e8 06 f5 ff ff       	call   c001f0f2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbec:	eb 60                	jmp    c001fc4e <Vm::x87Handler(regs*)+0x9bf>
c001fbee:	80 fa 06             	cmp    dl,0x6
c001fbf1:	75 2a                	jne    c001fc1d <Vm::x87Handler(regs*)+0x98e>
c001fbf3:	51                   	push   ecx
c001fbf4:	51                   	push   ecx
c001fbf5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbf8:	ff 36                	push   DWORD PTR [esi]
c001fbfa:	e8 e7 f2 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fbff:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc06:	89 c6                	mov    esi,eax
c001fc08:	89 d7                	mov    edi,edx
c001fc0a:	e8 43 f5 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fc0f:	57                   	push   edi
c001fc10:	56                   	push   esi
c001fc11:	52                   	push   edx
c001fc12:	50                   	push   eax
c001fc13:	e8 08 f5 ff ff       	call   c001f120 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc18:	e9 86 00 00 00       	jmp    c001fca3 <Vm::x87Handler(regs*)+0xa14>
c001fc1d:	31 c0                	xor    eax,eax
c001fc1f:	80 fa 07             	cmp    dl,0x7
c001fc22:	0f 85 c8 00 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	6a 00                	push   0x0
c001fc2d:	e8 20 f5 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fc32:	89 c7                	mov    edi,eax
c001fc34:	89 d5                	mov    ebp,edx
c001fc36:	58                   	pop    eax
c001fc37:	5a                   	pop    edx
c001fc38:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc3b:	ff 36                	push   DWORD PTR [esi]
c001fc3d:	e8 a4 f2 ff ff       	call   c001eee6 <Vm::fpu64ToInternal(unsigned long long)>
c001fc42:	83 c4 10             	add    esp,0x10
c001fc45:	55                   	push   ebp
c001fc46:	57                   	push   edi
c001fc47:	52                   	push   edx
c001fc48:	50                   	push   eax
c001fc49:	e8 d2 f4 ff ff       	call   c001f120 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc4e:	83 c4 0c             	add    esp,0xc
c001fc51:	eb 53                	jmp    c001fca6 <Vm::x87Handler(regs*)+0xa17>
c001fc53:	31 c0                	xor    eax,eax
c001fc55:	80 fa 02             	cmp    dl,0x2
c001fc58:	0f 85 92 00 00 00    	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	6a 00                	push   0x0
c001fc63:	e8 ea f4 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fc68:	59                   	pop    ecx
c001fc69:	5f                   	pop    edi
c001fc6a:	52                   	push   edx
c001fc6b:	50                   	push   eax
c001fc6c:	e8 27 f2 ff ff       	call   c001ee98 <Vm::fpuInternalTo64(unsigned long long)>
c001fc71:	eb 70                	jmp    c001fce3 <Vm::x87Handler(regs*)+0xa54>
c001fc73:	31 c0                	xor    eax,eax
c001fc75:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fc7a:	75 74                	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fc7c:	50                   	push   eax
c001fc7d:	50                   	push   eax
c001fc7e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fc81:	31 d2                	xor    edx,edx
c001fc83:	52                   	push   edx
c001fc84:	50                   	push   eax
c001fc85:	e8 f6 f2 ff ff       	call   c001ef80 <Vm::fpuLongToFloat(long long)>
c001fc8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc91:	89 c6                	mov    esi,eax
c001fc93:	89 d7                	mov    edi,edx
c001fc95:	e8 b8 f4 ff ff       	call   c001f152 <Vm::fpuGetReg(int)>
c001fc9a:	57                   	push   edi
c001fc9b:	56                   	push   esi
c001fc9c:	52                   	push   edx
c001fc9d:	50                   	push   eax
c001fc9e:	e8 5e f4 ff ff       	call   c001f101 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fca3:	83 c4 1c             	add    esp,0x1c
c001fca6:	52                   	push   edx
c001fca7:	50                   	push   eax
c001fca8:	6a 00                	push   0x0
c001fcaa:	e8 e6 f4 ff ff       	call   c001f195 <Vm::fpuSetReg(int, unsigned long long)>
c001fcaf:	e9 f2 f7 ff ff       	jmp    c001f4a6 <Vm::x87Handler(regs*)+0x217>
c001fcb4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcb8:	80 fa 05             	cmp    dl,0x5
c001fcbb:	75 11                	jne    c001fcce <Vm::x87Handler(regs*)+0xa3f>
c001fcbd:	55                   	push   ebp
c001fcbe:	55                   	push   ebp
c001fcbf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcc2:	ff 36                	push   DWORD PTR [esi]
c001fcc4:	e8 81 f2 ff ff       	call   c001ef4a <Vm::fpuULongToFloat(unsigned long long)>
c001fcc9:	e9 cf f7 ff ff       	jmp    c001f49d <Vm::x87Handler(regs*)+0x20e>
c001fcce:	31 c0                	xor    eax,eax
c001fcd0:	80 fa 07             	cmp    dl,0x7
c001fcd3:	75 1b                	jne    c001fcf0 <Vm::x87Handler(regs*)+0xa61>
c001fcd5:	e8 63 f5 ff ff       	call   c001f23d <Vm::fpuPop()>
c001fcda:	51                   	push   ecx
c001fcdb:	51                   	push   ecx
c001fcdc:	52                   	push   edx
c001fcdd:	50                   	push   eax
c001fcde:	e8 0c f2 ff ff       	call   c001eeef <Vm::fpuFloatToLong(unsigned long long)>
c001fce3:	83 c4 10             	add    esp,0x10
c001fce6:	89 06                	mov    DWORD PTR [esi],eax
c001fce8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fceb:	e9 f8 f7 ff ff       	jmp    c001f4e8 <Vm::x87Handler(regs*)+0x259>
c001fcf0:	83 c4 1c             	add    esp,0x1c
c001fcf3:	5b                   	pop    ebx
c001fcf4:	5e                   	pop    esi
c001fcf5:	5f                   	pop    edi
c001fcf6:	5d                   	pop    ebp
c001fcf7:	c3                   	ret    

c001fcf8 <__static_initialization_and_destruction_0(int, int)>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fd00:	75 1a                	jne    c001fd1c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fd0a:	75 10                	jne    c001fd1c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	68 00 0d 03 c0       	push   0xc0030d00
c001fd14:	e8 01 8d 00 00       	call   c0028a1a <Vm::_FPUState::_FPUState()>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	90                   	nop
c001fd1d:	83 c4 0c             	add    esp,0xc
c001fd20:	c3                   	ret    

c001fd21 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fd21:	83 ec 0c             	sub    esp,0xc
c001fd24:	83 ec 08             	sub    esp,0x8
c001fd27:	68 ff ff 00 00       	push   0xffff
c001fd2c:	6a 01                	push   0x1
c001fd2e:	e8 c5 ff ff ff       	call   c001fcf8 <__static_initialization_and_destruction_0(int, int)>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	83 c4 0c             	add    esp,0xc
c001fd39:	c3                   	ret    

c001fd3a <FAT::getName()>:
c001fd3a:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c001fd3f:	c3                   	ret    

c001fd40 <FAT::tell(void*, unsigned long long*)>:
c001fd40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd45:	75 06                	jne    c001fd4d <FAT::tell(void*, unsigned long long*)+0xd>
c001fd47:	b8 04 00 00 00       	mov    eax,0x4
c001fd4c:	c3                   	ret    
c001fd4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd52:	75 06                	jne    c001fd5a <FAT::tell(void*, unsigned long long*)+0x1a>
c001fd54:	b8 04 00 00 00       	mov    eax,0x4
c001fd59:	c3                   	ret    
c001fd5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd5e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fd61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fd64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd68:	89 01                	mov    DWORD PTR [ecx],eax
c001fd6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd6d:	b8 00 00 00 00       	mov    eax,0x0
c001fd72:	c3                   	ret    
c001fd73:	90                   	nop

c001fd74 <FAT::stat(void*, unsigned long long*)>:
c001fd74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd79:	75 06                	jne    c001fd81 <FAT::stat(void*, unsigned long long*)+0xd>
c001fd7b:	b8 04 00 00 00       	mov    eax,0x4
c001fd80:	c3                   	ret    
c001fd81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd86:	75 06                	jne    c001fd8e <FAT::stat(void*, unsigned long long*)+0x1a>
c001fd88:	b8 04 00 00 00       	mov    eax,0x4
c001fd8d:	c3                   	ret    
c001fd8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd92:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fd95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fd98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd9c:	89 01                	mov    DWORD PTR [ecx],eax
c001fd9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fda1:	b8 00 00 00 00       	mov    eax,0x0
c001fda6:	c3                   	ret    
c001fda7:	90                   	nop

c001fda8 <FAT::~FAT()>:
c001fda8:	83 ec 0c             	sub    esp,0xc
c001fdab:	ba 3c bc 02 c0       	mov    edx,0xc002bc3c
c001fdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb4:	89 10                	mov    DWORD PTR [eax],edx
c001fdb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	50                   	push   eax
c001fdbe:	e8 45 2b ff ff       	call   c0012908 <Filesystem::~Filesystem()>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	90                   	nop
c001fdc7:	83 c4 0c             	add    esp,0xc
c001fdca:	c3                   	ret    
c001fdcb:	90                   	nop

c001fdcc <FAT::~FAT()>:
c001fdcc:	83 ec 0c             	sub    esp,0xc
c001fdcf:	83 ec 0c             	sub    esp,0xc
c001fdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd6:	e8 cd ff ff ff       	call   c001fda8 <FAT::~FAT()>
c001fddb:	83 c4 10             	add    esp,0x10
c001fdde:	83 ec 08             	sub    esp,0x8
c001fde1:	6a 08                	push   0x8
c001fde3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde7:	e8 15 27 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c001fdec:	83 c4 10             	add    esp,0x10
c001fdef:	83 c4 0c             	add    esp,0xc
c001fdf2:	c3                   	ret    
c001fdf3:	90                   	nop

c001fdf4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fdf4:	83 ec 1c             	sub    esp,0x1c
c001fdf7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fdfe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fe03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe07:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c001fe0e:	83 f8 ff             	cmp    eax,0xffffffff
c001fe11:	75 34                	jne    c001fe47 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fe13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe17:	88 c2                	mov    dl,al
c001fe19:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c001fe1e:	01 d0                	add    eax,edx
c001fe20:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe24:	8b 15 60 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d60
c001fe2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe2e:	89 14 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],edx
c001fe35:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c001fe3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fe3e:	89 14 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],edx
c001fe45:	eb 17                	jmp    c001fe5e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fe47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe4b:	88 c2                	mov    dl,al
c001fe4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe51:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c001fe58:	01 d0                	add    eax,edx
c001fe5a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe5e:	83 ec 04             	sub    esp,0x4
c001fe61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe69:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fe6d:	50                   	push   eax
c001fe6e:	e8 8b 6e fe ff       	call   c0006cfe <f_getlabel>
c001fe73:	83 c4 10             	add    esp,0x10
c001fe76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe7a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe7f:	75 07                	jne    c001fe88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fe81:	b8 00 00 00 00       	mov    eax,0x0
c001fe86:	eb 05                	jmp    c001fe8d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fe88:	b8 01 00 00 00       	mov    eax,0x1
c001fe8d:	83 c4 1c             	add    esp,0x1c
c001fe90:	c3                   	ret    
c001fe91:	90                   	nop

c001fe92 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fe92:	57                   	push   edi
c001fe93:	83 ec 58             	sub    esp,0x58
c001fe96:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fe9e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fea2:	b9 0f 00 00 00       	mov    ecx,0xf
c001fea7:	b8 00 00 00 00       	mov    eax,0x0
c001feac:	fc                   	cld    
c001fead:	89 d7                	mov    edi,edx
c001feaf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001feb1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001feb5:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c001febc:	83 f8 ff             	cmp    eax,0xffffffff
c001febf:	75 34                	jne    c001fef5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fec1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fec5:	88 c2                	mov    dl,al
c001fec7:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c001fecc:	01 d0                	add    eax,edx
c001fece:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fed2:	8b 15 60 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d60
c001fed8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fedc:	89 14 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],edx
c001fee3:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c001fee8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001feec:	89 14 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],edx
c001fef3:	eb 17                	jmp    c001ff0c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fef5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fef9:	88 c2                	mov    dl,al
c001fefb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001feff:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c001ff06:	01 d0                	add    eax,edx
c001ff08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff0c:	83 ec 08             	sub    esp,0x8
c001ff0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ff13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff17:	50                   	push   eax
c001ff18:	e8 2f 0a fe ff       	call   c000094c <strcat>
c001ff1d:	83 c4 10             	add    esp,0x10
c001ff20:	83 ec 0c             	sub    esp,0xc
c001ff23:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff27:	50                   	push   eax
c001ff28:	e8 bf 6f fe ff       	call   c0006eec <f_setlabel>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ff34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ff39:	75 07                	jne    c001ff42 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ff3b:	b8 00 00 00 00       	mov    eax,0x0
c001ff40:	eb 05                	jmp    c001ff47 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ff42:	b8 01 00 00 00       	mov    eax,0x1
c001ff47:	83 c4 58             	add    esp,0x58
c001ff4a:	5f                   	pop    edi
c001ff4b:	c3                   	ret    

c001ff4c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ff4c:	83 ec 2c             	sub    esp,0x2c
c001ff4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ff57:	83 ec 08             	sub    esp,0x8
c001ff5a:	68 14 bc 02 c0       	push   0xc002bc14
c001ff5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff63:	e8 30 09 fe ff       	call   c0000898 <strcmp>
c001ff68:	83 c4 10             	add    esp,0x10
c001ff6b:	85 c0                	test   eax,eax
c001ff6d:	0f 94 c0             	sete   al
c001ff70:	84 c0                	test   al,al
c001ff72:	74 0d                	je     c001ff81 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ff74:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff7c:	e9 a6 00 00 00       	jmp    c0020027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff81:	83 ec 08             	sub    esp,0x8
c001ff84:	68 06 bc 02 c0       	push   0xc002bc06
c001ff89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff8d:	e8 06 09 fe ff       	call   c0000898 <strcmp>
c001ff92:	83 c4 10             	add    esp,0x10
c001ff95:	85 c0                	test   eax,eax
c001ff97:	0f 94 c0             	sete   al
c001ff9a:	84 c0                	test   al,al
c001ff9c:	74 0a                	je     c001ffa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ff9e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffa6:	eb 7f                	jmp    c0020027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffa8:	83 ec 08             	sub    esp,0x8
c001ffab:	68 0c bc 02 c0       	push   0xc002bc0c
c001ffb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffb4:	e8 df 08 fe ff       	call   c0000898 <strcmp>
c001ffb9:	83 c4 10             	add    esp,0x10
c001ffbc:	85 c0                	test   eax,eax
c001ffbe:	0f 94 c0             	sete   al
c001ffc1:	84 c0                	test   al,al
c001ffc3:	74 0a                	je     c001ffcf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ffc5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffcd:	eb 58                	jmp    c0020027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffcf:	83 ec 08             	sub    esp,0x8
c001ffd2:	68 8c 91 02 c0       	push   0xc002918c
c001ffd7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffdb:	e8 b8 08 fe ff       	call   c0000898 <strcmp>
c001ffe0:	83 c4 10             	add    esp,0x10
c001ffe3:	85 c0                	test   eax,eax
c001ffe5:	0f 94 c0             	sete   al
c001ffe8:	84 c0                	test   al,al
c001ffea:	74 0a                	je     c001fff6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ffec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fff4:	eb 31                	jmp    c0020027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fff6:	83 ec 08             	sub    esp,0x8
c001fff9:	68 12 bc 02 c0       	push   0xc002bc12
c001fffe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020002:	e8 91 08 fe ff       	call   c0000898 <strcmp>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	85 c0                	test   eax,eax
c002000c:	0f 94 c0             	sete   al
c002000f:	84 c0                	test   al,al
c0020011:	74 0a                	je     c002001d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020013:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002001b:	eb 0a                	jmp    c0020027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002001d:	b8 08 00 00 00       	mov    eax,0x8
c0020022:	e9 df 00 00 00       	jmp    c0020106 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020027:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002002e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020033:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020037:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c002003e:	83 f8 ff             	cmp    eax,0xffffffff
c0020041:	75 34                	jne    c0020077 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020043:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020047:	88 c2                	mov    dl,al
c0020049:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c002004e:	01 d0                	add    eax,edx
c0020050:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020054:	8b 15 60 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d60
c002005a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002005e:	89 14 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],edx
c0020065:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c002006a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002006e:	89 14 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],edx
c0020075:	eb 17                	jmp    c002008e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020077:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002007b:	88 c2                	mov    dl,al
c002007d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020081:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c0020088:	01 d0                	add    eax,edx
c002008a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002008e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020092:	88 04 24             	mov    BYTE PTR [esp],al
c0020095:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002009d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00200a5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00200aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	68 00 20 00 00       	push   0x2000
c00200ba:	e8 da f4 fe ff       	call   c000f599 <malloc>
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00200c6:	68 00 20 00 00       	push   0x2000
c00200cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200d3:	50                   	push   eax
c00200d4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00200d8:	50                   	push   eax
c00200d9:	e8 59 72 fe ff       	call   c0007337 <f_mkfs>
c00200de:	83 c4 10             	add    esp,0x10
c00200e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00200e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00200ea:	75 07                	jne    c00200f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00200ec:	b8 00 00 00 00       	mov    eax,0x0
c00200f1:	eb 13                	jmp    c0020106 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00200f3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00200f8:	75 07                	jne    c0020101 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00200fa:	b8 09 00 00 00       	mov    eax,0x9
c00200ff:	eb 05                	jmp    c0020106 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020101:	b8 01 00 00 00       	mov    eax,0x1
c0020106:	83 c4 2c             	add    esp,0x2c
c0020109:	c3                   	ret    

c002010a <FAT::tryMount(LogicalDisk*, int)>:
c002010a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020110:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c0020115:	83 f8 14             	cmp    eax,0x14
c0020118:	75 17                	jne    c0020131 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	68 18 bc 02 c0       	push   0xc002bc18
c0020122:	e8 1e 9c ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	b0 00                	mov    al,0x0
c002012c:	e9 d7 01 00 00       	jmp    c0020308 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020131:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020138:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002013e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020144:	3d 00 02 00 00       	cmp    eax,0x200
c0020149:	74 07                	je     c0020152 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002014b:	b0 00                	mov    al,0x0
c002014d:	e9 b6 01 00 00       	jmp    c0020308 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020152:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002015a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020161:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c0020168:	83 f8 ff             	cmp    eax,0xffffffff
c002016b:	74 07                	je     c0020174 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002016d:	b0 01                	mov    al,0x1
c002016f:	e9 94 01 00 00       	jmp    c0020308 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020174:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002017e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020186:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002018d:	88 c2                	mov    dl,al
c002018f:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c0020194:	01 d0                	add    eax,edx
c0020196:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002019d:	8b 15 60 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d60
c00201a3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00201aa:	89 14 85 80 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf280],edx
c00201b1:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c00201b6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00201bd:	89 14 85 00 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf200],edx
c00201c4:	83 ec 0c             	sub    esp,0xc
c00201c7:	68 54 02 00 00       	push   0x254
c00201cc:	e8 c8 f3 fe ff       	call   c000f599 <malloc>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00201db:	83 ec 04             	sub    esp,0x4
c00201de:	6a 00                	push   0x0
c00201e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00201e7:	50                   	push   eax
c00201e8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00201ef:	e8 01 4d fe ff       	call   c0004ef5 <f_mount>
c00201f4:	83 c4 10             	add    esp,0x10
c00201f7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201fe:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020206:	74 19                	je     c0020221 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020212:	e8 a2 f3 fe ff       	call   c000f5b9 <rfree>
c0020217:	83 c4 10             	add    esp,0x10
c002021a:	b0 00                	mov    al,0x0
c002021c:	e9 e7 00 00 00       	jmp    c0020308 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020221:	83 ec 04             	sub    esp,0x4
c0020224:	68 00 01 00 00       	push   0x100
c0020229:	6a 00                	push   0x0
c002022b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020232:	50                   	push   eax
c0020233:	e8 18 05 fe ff       	call   c0000750 <memset>
c0020238:	83 c4 10             	add    esp,0x10
c002023b:	83 ec 08             	sub    esp,0x8
c002023e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020245:	50                   	push   eax
c0020246:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002024d:	50                   	push   eax
c002024e:	e8 f9 06 fe ff       	call   c000094c <strcat>
c0020253:	83 c4 10             	add    esp,0x10
c0020256:	83 ec 08             	sub    esp,0x8
c0020259:	68 26 bc 02 c0       	push   0xc002bc26
c002025e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020265:	50                   	push   eax
c0020266:	e8 e1 06 fe ff       	call   c000094c <strcat>
c002026b:	83 c4 10             	add    esp,0x10
c002026e:	83 ec 04             	sub    esp,0x4
c0020271:	6a 01                	push   0x1
c0020273:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002027a:	50                   	push   eax
c002027b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002027f:	50                   	push   eax
c0020280:	e8 d2 4c fe ff       	call   c0004f57 <f_open>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002028f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020296:	85 c0                	test   eax,eax
c0020298:	74 0a                	je     c00202a4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002029a:	78 2d                	js     c00202c9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002029c:	83 e8 04             	sub    eax,0x4
c002029f:	83 f8 01             	cmp    eax,0x1
c00202a2:	77 25                	ja     c00202c9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00202a4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00202ac:	83 ec 0c             	sub    esp,0xc
c00202af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00202b3:	50                   	push   eax
c00202b4:	e8 f0 57 fe ff       	call   c0005aa9 <f_close>
c00202b9:	83 c4 10             	add    esp,0x10
c00202bc:	90                   	nop
c00202bd:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00202c5:	74 3a                	je     c0020301 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00202c7:	eb 2d                	jmp    c00202f6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00202c9:	83 ec 0c             	sub    esp,0xc
c00202cc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202d3:	e8 e1 f2 fe ff       	call   c000f5b9 <rfree>
c00202d8:	83 c4 10             	add    esp,0x10
c00202db:	83 ec 04             	sub    esp,0x4
c00202de:	6a 00                	push   0x0
c00202e0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202e7:	50                   	push   eax
c00202e8:	6a 00                	push   0x0
c00202ea:	e8 06 4c fe ff       	call   c0004ef5 <f_mount>
c00202ef:	83 c4 10             	add    esp,0x10
c00202f2:	b0 00                	mov    al,0x0
c00202f4:	eb 12                	jmp    c0020308 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202f6:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c00202fb:	40                   	inc    eax
c00202fc:	a3 60 0d 03 c0       	mov    ds:0xc0030d60,eax
c0020301:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020308:	81 c4 6c 03 00 00    	add    esp,0x36c
c002030e:	c3                   	ret    
c002030f:	90                   	nop

c0020310 <FAT::getFileFirstSector(char const*)>:
c0020310:	53                   	push   ebx
c0020311:	83 ec 28             	sub    esp,0x28
c0020314:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020323:	e8 71 f2 fe ff       	call   c000f599 <malloc>
c0020328:	83 c4 10             	add    esp,0x10
c002032b:	89 c3                	mov    ebx,eax
c002032d:	a1 90 0c 03 c0       	mov    eax,ds:0xc0030c90
c0020332:	83 ec 04             	sub    esp,0x4
c0020335:	50                   	push   eax
c0020336:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002033a:	53                   	push   ebx
c002033b:	e8 f8 27 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c0020340:	83 c4 10             	add    esp,0x10
c0020343:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020347:	83 ec 08             	sub    esp,0x8
c002034a:	6a 01                	push   0x1
c002034c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020350:	e8 47 28 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c0020355:	83 c4 10             	add    esp,0x10
c0020358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002035c:	8b 00                	mov    eax,DWORD PTR [eax]
c002035e:	83 c0 0c             	add    eax,0xc
c0020361:	8b 00                	mov    eax,DWORD PTR [eax]
c0020363:	83 ec 0c             	sub    esp,0xc
c0020366:	8d 54 24 14          	lea    edx,[esp+0x14]
c002036a:	52                   	push   edx
c002036b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002036f:	52                   	push   edx
c0020370:	6a 00                	push   0x0
c0020372:	6a 04                	push   0x4
c0020374:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020378:	ff d0                	call   eax
c002037a:	83 c4 20             	add    esp,0x20
c002037d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020381:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020387:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002038b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002038f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020392:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020395:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020399:	83 ec 0c             	sub    esp,0xc
c002039c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00203a0:	e8 55 28 ff ff       	call   c0012bfa <File::close()>
c00203a5:	83 c4 10             	add    esp,0x10
c00203a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203ac:	ba 00 00 00 00       	mov    edx,0x0
c00203b1:	83 c4 28             	add    esp,0x28
c00203b4:	5b                   	pop    ebx
c00203b5:	c3                   	ret    

c00203b6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00203b6:	57                   	push   edi
c00203b7:	56                   	push   esi
c00203b8:	53                   	push   ebx
c00203b9:	81 ec 50 02 00 00    	sub    esp,0x250
c00203bf:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00203c7:	74 0a                	je     c00203d3 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00203c9:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00203d1:	75 0a                	jne    c00203dd <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00203d3:	b8 04 00 00 00       	mov    eax,0x4
c00203d8:	e9 29 01 00 00       	jmp    c0020506 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00203dd:	83 ec 08             	sub    esp,0x8
c00203e0:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00203e7:	50                   	push   eax
c00203e8:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00203ef:	e8 bf 5c fe ff       	call   c00060b3 <f_readdir>
c00203f4:	83 c4 10             	add    esp,0x10
c00203f7:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00203fe:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020405:	83 ec 0c             	sub    esp,0xc
c0020408:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002040f:	83 c0 1a             	add    eax,0x1a
c0020412:	50                   	push   eax
c0020413:	e8 54 03 fe ff       	call   c000076c <strlen>
c0020418:	83 c4 10             	add    esp,0x10
c002041b:	ba 00 00 00 00       	mov    edx,0x0
c0020420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020428:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002042f:	0f b6 c0             	movzx  eax,al
c0020432:	83 e0 10             	and    eax,0x10
c0020435:	74 07                	je     c002043e <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020437:	b8 02 00 00 00       	mov    eax,0x2
c002043c:	eb 05                	jmp    c0020443 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002043e:	b8 01 00 00 00       	mov    eax,0x1
c0020443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020447:	83 ec 08             	sub    esp,0x8
c002044a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020451:	83 c0 1a             	add    eax,0x1a
c0020454:	50                   	push   eax
c0020455:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020459:	83 c0 10             	add    eax,0x10
c002045c:	50                   	push   eax
c002045d:	e8 aa 03 fe ff       	call   c000080c <strcpy>
c0020462:	83 c4 10             	add    esp,0x10
c0020465:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002046c:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020473:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020477:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002047e:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020485:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002048c:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020493:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002049a:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00204a1:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00204a8:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00204af:	89 c6                	mov    esi,eax
c00204b1:	89 d7                	mov    edi,edx
c00204b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204b5:	89 c8                	mov    eax,ecx
c00204b7:	89 fa                	mov    edx,edi
c00204b9:	89 f3                	mov    ebx,esi
c00204bb:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00204c2:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00204c9:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00204d0:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00204d7:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00204dd:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00204e4:	84 c0                	test   al,al
c00204e6:	75 07                	jne    c00204ef <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00204e8:	b8 07 00 00 00       	mov    eax,0x7
c00204ed:	eb 17                	jmp    c0020506 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204ef:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00204f6:	85 c0                	test   eax,eax
c00204f8:	75 07                	jne    c0020501 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00204fa:	b8 00 00 00 00       	mov    eax,0x0
c00204ff:	eb 05                	jmp    c0020506 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020501:	b8 01 00 00 00       	mov    eax,0x1
c0020506:	81 c4 50 02 00 00    	add    esp,0x250
c002050c:	5b                   	pop    ebx
c002050d:	5e                   	pop    esi
c002050e:	5f                   	pop    edi
c002050f:	c3                   	ret    

c0020510 <FAT::read(void*, unsigned long, void*, int*)>:
c0020510:	83 ec 1c             	sub    esp,0x1c
c0020513:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020518:	74 07                	je     c0020521 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002051a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002051f:	75 07                	jne    c0020528 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020521:	b8 04 00 00 00       	mov    eax,0x4
c0020526:	eb 3d                	jmp    c0020565 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020528:	8d 44 24 08          	lea    eax,[esp+0x8]
c002052c:	50                   	push   eax
c002052d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020531:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020535:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020539:	e8 55 4e fe ff       	call   c0005393 <f_read>
c002053e:	83 c4 10             	add    esp,0x10
c0020541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020549:	89 c2                	mov    edx,eax
c002054b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002054f:	89 10                	mov    DWORD PTR [eax],edx
c0020551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020555:	85 c0                	test   eax,eax
c0020557:	75 07                	jne    c0020560 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020559:	b8 00 00 00 00       	mov    eax,0x0
c002055e:	eb 05                	jmp    c0020565 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020560:	b8 01 00 00 00       	mov    eax,0x1
c0020565:	83 c4 1c             	add    esp,0x1c
c0020568:	c3                   	ret    
c0020569:	90                   	nop

c002056a <FAT::write(void*, unsigned long, void*, int*)>:
c002056a:	83 ec 1c             	sub    esp,0x1c
c002056d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020572:	74 07                	je     c002057b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020574:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020579:	75 07                	jne    c0020582 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002057b:	b8 04 00 00 00       	mov    eax,0x4
c0020580:	eb 3d                	jmp    c00205bf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020582:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020586:	50                   	push   eax
c0020587:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002058b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002058f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020593:	e8 7b 50 fe ff       	call   c0005613 <f_write>
c0020598:	83 c4 10             	add    esp,0x10
c002059b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002059f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205a3:	89 c2                	mov    edx,eax
c00205a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00205a9:	89 10                	mov    DWORD PTR [eax],edx
c00205ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205af:	85 c0                	test   eax,eax
c00205b1:	75 07                	jne    c00205ba <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00205b3:	b8 00 00 00 00       	mov    eax,0x0
c00205b8:	eb 05                	jmp    c00205bf <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205ba:	b8 01 00 00 00       	mov    eax,0x1
c00205bf:	83 c4 1c             	add    esp,0x1c
c00205c2:	c3                   	ret    
c00205c3:	90                   	nop

c00205c4 <FAT::close(void*)>:
c00205c4:	83 ec 1c             	sub    esp,0x1c
c00205c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205cc:	75 07                	jne    c00205d5 <FAT::close(void*)+0x11>
c00205ce:	b8 04 00 00 00       	mov    eax,0x4
c00205d3:	eb 36                	jmp    c002060b <FAT::close(void*)+0x47>
c00205d5:	83 ec 0c             	sub    esp,0xc
c00205d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205dc:	e8 c8 54 fe ff       	call   c0005aa9 <f_close>
c00205e1:	83 c4 10             	add    esp,0x10
c00205e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205e8:	83 ec 0c             	sub    esp,0xc
c00205eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205ef:	e8 b5 ef fe ff       	call   c000f5a9 <free>
c00205f4:	83 c4 10             	add    esp,0x10
c00205f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205fb:	85 c0                	test   eax,eax
c00205fd:	75 07                	jne    c0020606 <FAT::close(void*)+0x42>
c00205ff:	b8 00 00 00 00       	mov    eax,0x0
c0020604:	eb 05                	jmp    c002060b <FAT::close(void*)+0x47>
c0020606:	b8 01 00 00 00       	mov    eax,0x1
c002060b:	83 c4 1c             	add    esp,0x1c
c002060e:	c3                   	ret    
c002060f:	90                   	nop

c0020610 <FAT::closeDir(void*)>:
c0020610:	83 ec 1c             	sub    esp,0x1c
c0020613:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020618:	75 07                	jne    c0020621 <FAT::closeDir(void*)+0x11>
c002061a:	b8 04 00 00 00       	mov    eax,0x4
c002061f:	eb 36                	jmp    c0020657 <FAT::closeDir(void*)+0x47>
c0020621:	83 ec 0c             	sub    esp,0xc
c0020624:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020628:	e8 64 5a fe ff       	call   c0006091 <f_closedir>
c002062d:	83 c4 10             	add    esp,0x10
c0020630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020634:	83 ec 0c             	sub    esp,0xc
c0020637:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002063b:	e8 69 ef fe ff       	call   c000f5a9 <free>
c0020640:	83 c4 10             	add    esp,0x10
c0020643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020647:	85 c0                	test   eax,eax
c0020649:	75 07                	jne    c0020652 <FAT::closeDir(void*)+0x42>
c002064b:	b8 00 00 00 00       	mov    eax,0x0
c0020650:	eb 05                	jmp    c0020657 <FAT::closeDir(void*)+0x47>
c0020652:	b8 01 00 00 00       	mov    eax,0x1
c0020657:	83 c4 1c             	add    esp,0x1c
c002065a:	c3                   	ret    
c002065b:	90                   	nop

c002065c <FAT::seek(void*, unsigned long long)>:
c002065c:	83 ec 2c             	sub    esp,0x2c
c002065f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020667:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002066b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002066f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020674:	75 07                	jne    c002067d <FAT::seek(void*, unsigned long long)+0x21>
c0020676:	b8 04 00 00 00       	mov    eax,0x4
c002067b:	eb 2f                	jmp    c00206ac <FAT::seek(void*, unsigned long long)+0x50>
c002067d:	83 ec 04             	sub    esp,0x4
c0020680:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020684:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020688:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002068c:	e8 47 54 fe ff       	call   c0005ad8 <f_lseek>
c0020691:	83 c4 10             	add    esp,0x10
c0020694:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002069c:	85 c0                	test   eax,eax
c002069e:	75 07                	jne    c00206a7 <FAT::seek(void*, unsigned long long)+0x4b>
c00206a0:	b8 00 00 00 00       	mov    eax,0x0
c00206a5:	eb 05                	jmp    c00206ac <FAT::seek(void*, unsigned long long)+0x50>
c00206a7:	b8 01 00 00 00       	mov    eax,0x1
c00206ac:	83 c4 2c             	add    esp,0x2c
c00206af:	c3                   	ret    

c00206b0 <fatWrapperReadDisk>:
c00206b0:	83 ec 1c             	sub    esp,0x1c
c00206b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00206c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206cf:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c00206d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206da:	83 ec 0c             	sub    esp,0xc
c00206dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206e1:	52                   	push   edx
c00206e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206ea:	50                   	push   eax
c00206eb:	e8 3e 58 ff ff       	call   c0015f2e <LogicalDisk::read(unsigned long long, int, void*)>
c00206f0:	83 c4 20             	add    esp,0x20
c00206f3:	83 c4 1c             	add    esp,0x1c
c00206f6:	c3                   	ret    

c00206f7 <fatWrapperWriteDisk>:
c00206f7:	83 ec 1c             	sub    esp,0x1c
c00206fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206fe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020706:	89 04 24             	mov    DWORD PTR [esp],eax
c0020709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002070d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020711:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020716:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c002071d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020721:	83 ec 0c             	sub    esp,0xc
c0020724:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020728:	52                   	push   edx
c0020729:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002072d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020731:	50                   	push   eax
c0020732:	e8 63 58 ff ff       	call   c0015f9a <LogicalDisk::write(unsigned long long, int, void*)>
c0020737:	83 c4 20             	add    esp,0x20
c002073a:	83 c4 1c             	add    esp,0x1c
c002073d:	c3                   	ret    

c002073e <fatWrapperIoctl>:
c002073e:	53                   	push   ebx
c002073f:	83 ec 28             	sub    esp,0x28
c0020742:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020746:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002074a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002074e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020752:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020757:	75 31                	jne    c002078a <fatWrapperIoctl+0x4c>
c0020759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002075d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020761:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020766:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c002076d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020773:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020779:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002077d:	66 89 02             	mov    WORD PTR [edx],ax
c0020780:	b8 00 00 00 00       	mov    eax,0x0
c0020785:	e9 b2 00 00 00       	jmp    c002083c <fatWrapperIoctl+0xfe>
c002078a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002078f:	75 6a                	jne    c00207fb <fatWrapperIoctl+0xbd>
c0020791:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020799:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002079e:	8b 04 85 40 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd22c0]
c00207a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207ab:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00207b1:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00207b7:	89 c8                	mov    eax,ecx
c00207b9:	89 da                	mov    edx,ebx
c00207bb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00207bf:	c1 e0 0a             	shl    eax,0xa
c00207c2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207c7:	8b 0c 8d 40 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd22c0]
c00207ce:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00207d4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00207da:	89 cb                	mov    ebx,ecx
c00207dc:	c1 fb 1f             	sar    ebx,0x1f
c00207df:	53                   	push   ebx
c00207e0:	51                   	push   ecx
c00207e1:	52                   	push   edx
c00207e2:	50                   	push   eax
c00207e3:	e8 2c 5e 00 00       	call   c0026614 <__udivdi3>
c00207e8:	83 c4 10             	add    esp,0x10
c00207eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00207ef:	89 01                	mov    DWORD PTR [ecx],eax
c00207f1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00207f4:	b8 00 00 00 00       	mov    eax,0x0
c00207f9:	eb 41                	jmp    c002083c <fatWrapperIoctl+0xfe>
c00207fb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020800:	75 07                	jne    c0020809 <fatWrapperIoctl+0xcb>
c0020802:	b8 00 00 00 00       	mov    eax,0x0
c0020807:	eb 33                	jmp    c002083c <fatWrapperIoctl+0xfe>
c0020809:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002080e:	75 19                	jne    c0020829 <fatWrapperIoctl+0xeb>
c0020810:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020814:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002081c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020822:	b8 00 00 00 00       	mov    eax,0x0
c0020827:	eb 13                	jmp    c002083c <fatWrapperIoctl+0xfe>
c0020829:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002082e:	75 07                	jne    c0020837 <fatWrapperIoctl+0xf9>
c0020830:	b8 00 00 00 00       	mov    eax,0x0
c0020835:	eb 05                	jmp    c002083c <fatWrapperIoctl+0xfe>
c0020837:	b8 04 00 00 00       	mov    eax,0x4
c002083c:	83 c4 28             	add    esp,0x28
c002083f:	5b                   	pop    ebx
c0020840:	c3                   	ret    
c0020841:	90                   	nop

c0020842 <FAT::FAT()>:
c0020842:	83 ec 1c             	sub    esp,0x1c
c0020845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020849:	83 ec 0c             	sub    esp,0xc
c002084c:	50                   	push   eax
c002084d:	e8 92 20 ff ff       	call   c00128e4 <Filesystem::Filesystem()>
c0020852:	83 c4 10             	add    esp,0x10
c0020855:	ba 3c bc 02 c0       	mov    edx,0xc002bc3c
c002085a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002085e:	89 10                	mov    DWORD PTR [eax],edx
c0020860:	c7 05 60 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d60,0x0
c002086a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020872:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020877:	7f 15                	jg     c002088e <FAT::FAT()+0x4c>
c0020879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002087d:	c7 04 85 80 0d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf280],0xffffffff
c0020888:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002088c:	eb e4                	jmp    c0020872 <FAT::FAT()+0x30>
c002088e:	90                   	nop
c002088f:	83 c4 1c             	add    esp,0x1c
c0020892:	c3                   	ret    
c0020893:	90                   	nop

c0020894 <FAT::fixFilepath(char*)>:
c0020894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020898:	8a 00                	mov    al,BYTE PTR [eax]
c002089a:	3c 40                	cmp    al,0x40
c002089c:	7e 2c                	jle    c00208ca <FAT::fixFilepath(char*)+0x36>
c002089e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208a2:	8a 00                	mov    al,BYTE PTR [eax]
c00208a4:	83 e8 41             	sub    eax,0x41
c00208a7:	88 c2                	mov    dl,al
c00208a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208ad:	88 10                	mov    BYTE PTR [eax],dl
c00208af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208b3:	8a 00                	mov    al,BYTE PTR [eax]
c00208b5:	0f be c0             	movsx  eax,al
c00208b8:	8b 04 85 80 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf280]
c00208bf:	83 c0 30             	add    eax,0x30
c00208c2:	88 c2                	mov    dl,al
c00208c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208c8:	88 10                	mov    BYTE PTR [eax],dl
c00208ca:	90                   	nop
c00208cb:	c3                   	ret    

c00208cc <FAT::open(char const*, void**, FileOpenMode)>:
c00208cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208da:	74 0a                	je     c00208e6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00208dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00208e4:	75 0a                	jne    c00208f0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00208e6:	b8 04 00 00 00       	mov    eax,0x4
c00208eb:	e9 fd 00 00 00       	jmp    c00209ed <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00208f0:	83 ec 08             	sub    esp,0x8
c00208f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208fe:	50                   	push   eax
c00208ff:	e8 08 ff fd ff       	call   c000080c <strcpy>
c0020904:	83 c4 10             	add    esp,0x10
c0020907:	83 ec 08             	sub    esp,0x8
c002090a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002090e:	50                   	push   eax
c002090f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020916:	e8 79 ff ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c002091b:	83 c4 10             	add    esp,0x10
c002091e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020926:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002092d:	83 e0 01             	and    eax,0x1
c0020930:	74 08                	je     c002093a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020932:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002093a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020941:	83 e0 04             	and    eax,0x4
c0020944:	74 10                	je     c0020956 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020946:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002094e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020956:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002095d:	83 e0 02             	and    eax,0x2
c0020960:	74 08                	je     c002096a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020962:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002096a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020971:	83 e0 08             	and    eax,0x8
c0020974:	74 08                	je     c002097e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020976:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002097e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020985:	83 e0 10             	and    eax,0x10
c0020988:	74 08                	je     c0020992 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002098a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020992:	83 ec 0c             	sub    esp,0xc
c0020995:	68 50 02 00 00       	push   0x250
c002099a:	e8 fa eb fe ff       	call   c000f599 <malloc>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	89 c2                	mov    edx,eax
c00209a4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209ab:	89 10                	mov    DWORD PTR [eax],edx
c00209ad:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00209b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00209be:	83 ec 04             	sub    esp,0x4
c00209c1:	52                   	push   edx
c00209c2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00209c6:	52                   	push   edx
c00209c7:	50                   	push   eax
c00209c8:	e8 8a 45 fe ff       	call   c0004f57 <f_open>
c00209cd:	83 c4 10             	add    esp,0x10
c00209d0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00209d7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00209df:	74 07                	je     c00209e8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00209e1:	b8 01 00 00 00       	mov    eax,0x1
c00209e6:	eb 05                	jmp    c00209ed <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209e8:	b8 00 00 00 00       	mov    eax,0x0
c00209ed:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209f3:	c3                   	ret    

c00209f4 <FAT::openDir(char const*, void**)>:
c00209f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a02:	74 0a                	je     c0020a0e <FAT::openDir(char const*, void**)+0x1a>
c0020a04:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a0c:	75 07                	jne    c0020a15 <FAT::openDir(char const*, void**)+0x21>
c0020a0e:	b8 04 00 00 00       	mov    eax,0x4
c0020a13:	eb 7d                	jmp    c0020a92 <FAT::openDir(char const*, void**)+0x9e>
c0020a15:	83 ec 08             	sub    esp,0x8
c0020a18:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a23:	50                   	push   eax
c0020a24:	e8 e3 fd fd ff       	call   c000080c <strcpy>
c0020a29:	83 c4 10             	add    esp,0x10
c0020a2c:	83 ec 08             	sub    esp,0x8
c0020a2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a33:	50                   	push   eax
c0020a34:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a3b:	e8 54 fe ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020a40:	83 c4 10             	add    esp,0x10
c0020a43:	83 ec 0c             	sub    esp,0xc
c0020a46:	6a 4c                	push   0x4c
c0020a48:	e8 4c eb fe ff       	call   c000f599 <malloc>
c0020a4d:	83 c4 10             	add    esp,0x10
c0020a50:	89 c2                	mov    edx,eax
c0020a52:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a59:	89 10                	mov    DWORD PTR [eax],edx
c0020a5b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a64:	83 ec 08             	sub    esp,0x8
c0020a67:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a6b:	52                   	push   edx
c0020a6c:	50                   	push   eax
c0020a6d:	e8 1d 55 fe ff       	call   c0005f8f <f_opendir>
c0020a72:	83 c4 10             	add    esp,0x10
c0020a75:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a7c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a84:	74 07                	je     c0020a8d <FAT::openDir(char const*, void**)+0x99>
c0020a86:	b8 01 00 00 00       	mov    eax,0x1
c0020a8b:	eb 05                	jmp    c0020a92 <FAT::openDir(char const*, void**)+0x9e>
c0020a8d:	b8 00 00 00 00       	mov    eax,0x0
c0020a92:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a98:	c3                   	ret    
c0020a99:	90                   	nop

c0020a9a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a9a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020aa0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020aa8:	75 0a                	jne    c0020ab4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020aaa:	b8 04 00 00 00       	mov    eax,0x4
c0020aaf:	e9 c9 00 00 00       	jmp    c0020b7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ab4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020abc:	75 0a                	jne    c0020ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020abe:	b8 04 00 00 00       	mov    eax,0x4
c0020ac3:	e9 b5 00 00 00       	jmp    c0020b7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ac8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020ad0:	75 0a                	jne    c0020adc <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020ad2:	b8 04 00 00 00       	mov    eax,0x4
c0020ad7:	e9 a1 00 00 00       	jmp    c0020b7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020adc:	83 ec 08             	sub    esp,0x8
c0020adf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ae6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020aed:	50                   	push   eax
c0020aee:	e8 19 fd fd ff       	call   c000080c <strcpy>
c0020af3:	83 c4 10             	add    esp,0x10
c0020af6:	83 ec 08             	sub    esp,0x8
c0020af9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020b00:	50                   	push   eax
c0020b01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020b08:	e8 87 fd ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020b0d:	83 c4 10             	add    esp,0x10
c0020b10:	83 ec 08             	sub    esp,0x8
c0020b13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b17:	50                   	push   eax
c0020b18:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b1f:	50                   	push   eax
c0020b20:	e8 29 56 fe ff       	call   c000614e <f_stat>
c0020b25:	83 c4 10             	add    esp,0x10
c0020b28:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020b2f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020b36:	85 c0                	test   eax,eax
c0020b38:	74 07                	je     c0020b41 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020b3a:	83 f8 04             	cmp    eax,0x4
c0020b3d:	74 32                	je     c0020b71 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020b3f:	eb 37                	jmp    c0020b78 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020b41:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b45:	0f b6 c0             	movzx  eax,al
c0020b48:	83 e0 10             	and    eax,0x10
c0020b4b:	0f 95 c2             	setne  dl
c0020b4e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020b55:	88 10                	mov    BYTE PTR [eax],dl
c0020b57:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b5a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b5e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020b65:	89 01                	mov    DWORD PTR [ecx],eax
c0020b67:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b6a:	b8 00 00 00 00       	mov    eax,0x0
c0020b6f:	eb 0c                	jmp    c0020b7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b71:	b8 02 00 00 00       	mov    eax,0x2
c0020b76:	eb 05                	jmp    c0020b7d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b78:	b8 01 00 00 00       	mov    eax,0x1
c0020b7d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b83:	c3                   	ret    

c0020b84 <FAT::unlink(char const*)>:
c0020b84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b92:	75 07                	jne    c0020b9b <FAT::unlink(char const*)+0x17>
c0020b94:	b8 04 00 00 00       	mov    eax,0x4
c0020b99:	eb 5c                	jmp    c0020bf7 <FAT::unlink(char const*)+0x73>
c0020b9b:	83 ec 08             	sub    esp,0x8
c0020b9e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ba5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ba9:	50                   	push   eax
c0020baa:	e8 5d fc fd ff       	call   c000080c <strcpy>
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	83 ec 08             	sub    esp,0x8
c0020bb5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bb9:	50                   	push   eax
c0020bba:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bc1:	e8 ce fc ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020bc6:	83 c4 10             	add    esp,0x10
c0020bc9:	83 ec 0c             	sub    esp,0xc
c0020bcc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bd0:	50                   	push   eax
c0020bd1:	e8 ca 58 fe ff       	call   c00064a0 <f_unlink>
c0020bd6:	83 c4 10             	add    esp,0x10
c0020bd9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020be0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020be7:	85 c0                	test   eax,eax
c0020be9:	75 07                	jne    c0020bf2 <FAT::unlink(char const*)+0x6e>
c0020beb:	b8 00 00 00 00       	mov    eax,0x0
c0020bf0:	eb 05                	jmp    c0020bf7 <FAT::unlink(char const*)+0x73>
c0020bf2:	b8 01 00 00 00       	mov    eax,0x1
c0020bf7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bfd:	c3                   	ret    

c0020bfe <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020bfe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020c04:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020c0b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020c12:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c16:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c1a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020c22:	75 0a                	jne    c0020c2e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020c24:	b8 04 00 00 00       	mov    eax,0x4
c0020c29:	e9 1c 01 00 00       	jmp    c0020d4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c2e:	83 ec 08             	sub    esp,0x8
c0020c31:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c3c:	50                   	push   eax
c0020c3d:	e8 ca fb fd ff       	call   c000080c <strcpy>
c0020c42:	83 c4 10             	add    esp,0x10
c0020c45:	83 ec 08             	sub    esp,0x8
c0020c48:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020c4c:	50                   	push   eax
c0020c4d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c54:	e8 3b fc ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020c59:	83 c4 10             	add    esp,0x10
c0020c5c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020c64:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020c6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c71:	83 e0 01             	and    eax,0x1
c0020c74:	74 08                	je     c0020c7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c76:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c83:	83 e0 02             	and    eax,0x2
c0020c86:	74 08                	je     c0020c90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c88:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c95:	83 e0 04             	and    eax,0x4
c0020c98:	74 08                	je     c0020ca2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c9a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020ca2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ca7:	83 e0 08             	and    eax,0x8
c0020caa:	74 08                	je     c0020cb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020cac:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020cb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cb9:	83 e0 01             	and    eax,0x1
c0020cbc:	74 08                	je     c0020cc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020cbe:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020cc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ccb:	83 e0 02             	and    eax,0x2
c0020cce:	74 08                	je     c0020cd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020cd0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020cd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cdd:	83 e0 04             	and    eax,0x4
c0020ce0:	74 08                	je     c0020cea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020ce2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020cea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cef:	83 e0 08             	and    eax,0x8
c0020cf2:	74 08                	je     c0020cfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020cf4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020cfc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020d03:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020d0a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020d12:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020d1a:	83 ec 04             	sub    esp,0x4
c0020d1d:	52                   	push   edx
c0020d1e:	50                   	push   eax
c0020d1f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d23:	50                   	push   eax
c0020d24:	e8 19 5e fe ff       	call   c0006b42 <f_chmod>
c0020d29:	83 c4 10             	add    esp,0x10
c0020d2c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020d33:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020d3a:	85 c0                	test   eax,eax
c0020d3c:	75 07                	jne    c0020d45 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020d3e:	b8 00 00 00 00       	mov    eax,0x0
c0020d43:	eb 05                	jmp    c0020d4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d45:	b8 01 00 00 00       	mov    eax,0x1
c0020d4a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020d50:	c3                   	ret    
c0020d51:	90                   	nop

c0020d52 <FAT::rename(char const*, char const*)>:
c0020d52:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020d58:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020d60:	74 0a                	je     c0020d6c <FAT::rename(char const*, char const*)+0x1a>
c0020d62:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020d6a:	75 0a                	jne    c0020d76 <FAT::rename(char const*, char const*)+0x24>
c0020d6c:	b8 04 00 00 00       	mov    eax,0x4
c0020d71:	e9 98 00 00 00       	jmp    c0020e0e <FAT::rename(char const*, char const*)+0xbc>
c0020d76:	83 ec 08             	sub    esp,0x8
c0020d79:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d80:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d87:	50                   	push   eax
c0020d88:	e8 7f fa fd ff       	call   c000080c <strcpy>
c0020d8d:	83 c4 10             	add    esp,0x10
c0020d90:	83 ec 08             	sub    esp,0x8
c0020d93:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d9a:	50                   	push   eax
c0020d9b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020da2:	e8 ed fa ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020da7:	83 c4 10             	add    esp,0x10
c0020daa:	83 ec 08             	sub    esp,0x8
c0020dad:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020db4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020db8:	50                   	push   eax
c0020db9:	e8 4e fa fd ff       	call   c000080c <strcpy>
c0020dbe:	83 c4 10             	add    esp,0x10
c0020dc1:	83 ec 08             	sub    esp,0x8
c0020dc4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dc8:	50                   	push   eax
c0020dc9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020dd0:	e8 bf fa ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020dd5:	83 c4 10             	add    esp,0x10
c0020dd8:	83 ec 08             	sub    esp,0x8
c0020ddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ddf:	50                   	push   eax
c0020de0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020de7:	50                   	push   eax
c0020de8:	e8 62 5a fe ff       	call   c000684f <f_rename>
c0020ded:	83 c4 10             	add    esp,0x10
c0020df0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020df7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020dfe:	85 c0                	test   eax,eax
c0020e00:	75 07                	jne    c0020e09 <FAT::rename(char const*, char const*)+0xb7>
c0020e02:	b8 00 00 00 00       	mov    eax,0x0
c0020e07:	eb 05                	jmp    c0020e0e <FAT::rename(char const*, char const*)+0xbc>
c0020e09:	b8 01 00 00 00       	mov    eax,0x1
c0020e0e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020e14:	c3                   	ret    
c0020e15:	90                   	nop

c0020e16 <FAT::mkdir(char const*)>:
c0020e16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e1c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e24:	75 07                	jne    c0020e2d <FAT::mkdir(char const*)+0x17>
c0020e26:	b8 04 00 00 00       	mov    eax,0x4
c0020e2b:	eb 5c                	jmp    c0020e89 <FAT::mkdir(char const*)+0x73>
c0020e2d:	83 ec 08             	sub    esp,0x8
c0020e30:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e3b:	50                   	push   eax
c0020e3c:	e8 cb f9 fd ff       	call   c000080c <strcpy>
c0020e41:	83 c4 10             	add    esp,0x10
c0020e44:	83 ec 08             	sub    esp,0x8
c0020e47:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e4b:	50                   	push   eax
c0020e4c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e53:	e8 3c fa ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020e58:	83 c4 10             	add    esp,0x10
c0020e5b:	83 ec 0c             	sub    esp,0xc
c0020e5e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e62:	50                   	push   eax
c0020e63:	e8 bb 57 fe ff       	call   c0006623 <f_mkdir>
c0020e68:	83 c4 10             	add    esp,0x10
c0020e6b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e72:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e79:	85 c0                	test   eax,eax
c0020e7b:	75 07                	jne    c0020e84 <FAT::mkdir(char const*)+0x6e>
c0020e7d:	b8 00 00 00 00       	mov    eax,0x0
c0020e82:	eb 05                	jmp    c0020e89 <FAT::mkdir(char const*)+0x73>
c0020e84:	b8 01 00 00 00       	mov    eax,0x1
c0020e89:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e8f:	c3                   	ret    

c0020e90 <FAT::exists(char const*)>:
c0020e90:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e96:	83 ec 08             	sub    esp,0x8
c0020e99:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ea0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ea4:	50                   	push   eax
c0020ea5:	e8 62 f9 fd ff       	call   c000080c <strcpy>
c0020eaa:	83 c4 10             	add    esp,0x10
c0020ead:	83 ec 08             	sub    esp,0x8
c0020eb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020eb4:	50                   	push   eax
c0020eb5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ebc:	e8 d3 f9 ff ff       	call   c0020894 <FAT::fixFilepath(char*)>
c0020ec1:	83 c4 10             	add    esp,0x10
c0020ec4:	83 ec 08             	sub    esp,0x8
c0020ec7:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ece:	50                   	push   eax
c0020ecf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ed3:	50                   	push   eax
c0020ed4:	e8 75 52 fe ff       	call   c000614e <f_stat>
c0020ed9:	83 c4 10             	add    esp,0x10
c0020edc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ee3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020eea:	85 c0                	test   eax,eax
c0020eec:	75 04                	jne    c0020ef2 <FAT::exists(char const*)+0x62>
c0020eee:	b0 01                	mov    al,0x1
c0020ef0:	eb 02                	jmp    c0020ef4 <FAT::exists(char const*)+0x64>
c0020ef2:	b0 00                	mov    al,0x0
c0020ef4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020efa:	c3                   	ret    
c0020efb:	90                   	nop

c0020efc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020efc:	b8 08 00 00 00       	mov    eax,0x8
c0020f01:	c3                   	ret    

c0020f02 <ISO9660::seek(void*, unsigned long long)>:
c0020f02:	53                   	push   ebx
c0020f03:	b8 04 00 00 00       	mov    eax,0x4
c0020f08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f14:	85 d2                	test   edx,edx
c0020f16:	74 17                	je     c0020f2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f18:	89 c8                	mov    eax,ecx
c0020f1a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020f1d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020f20:	b8 01 00 00 00       	mov    eax,0x1
c0020f25:	73 08                	jae    c0020f2f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f27:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020f2a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020f2d:	31 c0                	xor    eax,eax
c0020f2f:	5b                   	pop    ebx
c0020f30:	c3                   	ret    
c0020f31:	90                   	nop

c0020f32 <ISO9660::tell(void*, unsigned long long*)>:
c0020f32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f3a:	85 d2                	test   edx,edx
c0020f3c:	74 12                	je     c0020f50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f3e:	85 c0                	test   eax,eax
c0020f40:	74 0e                	je     c0020f50 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f42:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020f45:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020f48:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f4b:	89 10                	mov    DWORD PTR [eax],edx
c0020f4d:	31 c0                	xor    eax,eax
c0020f4f:	c3                   	ret    
c0020f50:	b8 04 00 00 00       	mov    eax,0x4
c0020f55:	c3                   	ret    

c0020f56 <ISO9660::getName()>:
c0020f56:	b8 9c bc 02 c0       	mov    eax,0xc002bc9c
c0020f5b:	c3                   	ret    

c0020f5c <ISO9660::stat(void*, unsigned long long*)>:
c0020f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f64:	85 d2                	test   edx,edx
c0020f66:	74 12                	je     c0020f7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f68:	85 c0                	test   eax,eax
c0020f6a:	74 0e                	je     c0020f7a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020f6f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f72:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f75:	89 10                	mov    DWORD PTR [eax],edx
c0020f77:	31 c0                	xor    eax,eax
c0020f79:	c3                   	ret    
c0020f7a:	b8 04 00 00 00       	mov    eax,0x4
c0020f7f:	c3                   	ret    

c0020f80 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f80:	b8 01 00 00 00       	mov    eax,0x1
c0020f85:	c3                   	ret    

c0020f86 <ISO9660::unlink(char const*)>:
c0020f86:	b8 01 00 00 00       	mov    eax,0x1
c0020f8b:	c3                   	ret    

c0020f8c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f8c:	b8 01 00 00 00       	mov    eax,0x1
c0020f91:	c3                   	ret    

c0020f92 <ISO9660::rename(char const*, char const*)>:
c0020f92:	b8 01 00 00 00       	mov    eax,0x1
c0020f97:	c3                   	ret    

c0020f98 <ISO9660::mkdir(char const*)>:
c0020f98:	b8 01 00 00 00       	mov    eax,0x1
c0020f9d:	c3                   	ret    

c0020f9e <ISO9660::close(void*)>:
c0020f9e:	83 ec 0c             	sub    esp,0xc
c0020fa1:	b8 04 00 00 00       	mov    eax,0x4
c0020fa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020faa:	85 d2                	test   edx,edx
c0020fac:	74 0e                	je     c0020fbc <ISO9660::close(void*)+0x1e>
c0020fae:	83 ec 0c             	sub    esp,0xc
c0020fb1:	52                   	push   edx
c0020fb2:	e8 f2 e5 fe ff       	call   c000f5a9 <free>
c0020fb7:	83 c4 10             	add    esp,0x10
c0020fba:	31 c0                	xor    eax,eax
c0020fbc:	83 c4 0c             	add    esp,0xc
c0020fbf:	c3                   	ret    

c0020fc0 <ISO9660::closeDir(void*)>:
c0020fc0:	83 ec 0c             	sub    esp,0xc
c0020fc3:	b8 04 00 00 00       	mov    eax,0x4
c0020fc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fcc:	85 d2                	test   edx,edx
c0020fce:	74 0e                	je     c0020fde <ISO9660::closeDir(void*)+0x1e>
c0020fd0:	83 ec 0c             	sub    esp,0xc
c0020fd3:	52                   	push   edx
c0020fd4:	e8 d0 e5 fe ff       	call   c000f5a9 <free>
c0020fd9:	83 c4 10             	add    esp,0x10
c0020fdc:	31 c0                	xor    eax,eax
c0020fde:	83 c4 0c             	add    esp,0xc
c0020fe1:	c3                   	ret    

c0020fe2 <ISO9660::~ISO9660()>:
c0020fe2:	83 ec 0c             	sub    esp,0xc
c0020fe5:	ba c0 bc 02 c0       	mov    edx,0xc002bcc0
c0020fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fee:	89 10                	mov    DWORD PTR [eax],edx
c0020ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ff4:	83 ec 0c             	sub    esp,0xc
c0020ff7:	50                   	push   eax
c0020ff8:	e8 0b 19 ff ff       	call   c0012908 <Filesystem::~Filesystem()>
c0020ffd:	83 c4 10             	add    esp,0x10
c0021000:	90                   	nop
c0021001:	83 c4 0c             	add    esp,0xc
c0021004:	c3                   	ret    
c0021005:	90                   	nop

c0021006 <ISO9660::~ISO9660()>:
c0021006:	83 ec 0c             	sub    esp,0xc
c0021009:	83 ec 0c             	sub    esp,0xc
c002100c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021010:	e8 cd ff ff ff       	call   c0020fe2 <ISO9660::~ISO9660()>
c0021015:	83 c4 10             	add    esp,0x10
c0021018:	83 ec 08             	sub    esp,0x8
c002101b:	6a 08                	push   0x8
c002101d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021021:	e8 db 14 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0021026:	83 c4 10             	add    esp,0x10
c0021029:	83 c4 0c             	add    esp,0xc
c002102c:	c3                   	ret    

c002102d <__memmem(unsigned char*, int, unsigned char*, int)>:
c002102d:	55                   	push   ebp
c002102e:	31 c9                	xor    ecx,ecx
c0021030:	57                   	push   edi
c0021031:	56                   	push   esi
c0021032:	53                   	push   ebx
c0021033:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021037:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002103b:	89 eb                	mov    ebx,ebp
c002103d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021041:	39 ce                	cmp    esi,ecx
c0021043:	7e 17                	jle    c002105c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021045:	31 d2                	xor    edx,edx
c0021047:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002104b:	7d 13                	jge    c0021060 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002104d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021051:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021054:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021057:	75 0d                	jne    c0021066 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021059:	42                   	inc    edx
c002105a:	eb eb                	jmp    c0021047 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002105c:	31 c0                	xor    eax,eax
c002105e:	eb 0a                	jmp    c002106a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021060:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021064:	eb 04                	jmp    c002106a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021066:	41                   	inc    ecx
c0021067:	43                   	inc    ebx
c0021068:	eb d7                	jmp    c0021041 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002106a:	5b                   	pop    ebx
c002106b:	5e                   	pop    esi
c002106c:	5f                   	pop    edi
c002106d:	5d                   	pop    ebp
c002106e:	c3                   	ret    

c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002106f:	57                   	push   edi
c0021070:	56                   	push   esi
c0021071:	53                   	push   ebx
c0021072:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021076:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002107a:	39 0d 60 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e60,ecx
c0021080:	75 08                	jne    c002108a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021082:	38 05 d4 cc 02 c0    	cmp    BYTE PTR ds:0xc002ccd4,al
c0021088:	74 2b                	je     c00210b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002108a:	83 ec 0c             	sub    esp,0xc
c002108d:	a2 d4 cc 02 c0       	mov    ds:0xc002ccd4,al
c0021092:	68 80 0e 03 c0       	push   0xc0030e80
c0021097:	0f be c0             	movsx  eax,al
c002109a:	6a 01                	push   0x1
c002109c:	89 0d 60 0e 03 c0    	mov    DWORD PTR ds:0xc0030e60,ecx
c00210a2:	31 db                	xor    ebx,ebx
c00210a4:	53                   	push   ebx
c00210a5:	51                   	push   ecx
c00210a6:	ff 34 85 3c dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd23c4]
c00210ad:	e8 7c 4e ff ff       	call   c0015f2e <LogicalDisk::read(unsigned long long, int, void*)>
c00210b2:	83 c4 20             	add    esp,0x20
c00210b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00210b9:	be 80 0e 03 c0       	mov    esi,0xc0030e80
c00210be:	b9 00 08 00 00       	mov    ecx,0x800
c00210c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210c5:	5b                   	pop    ebx
c00210c6:	5e                   	pop    esi
c00210c7:	5f                   	pop    edi
c00210c8:	c3                   	ret    
c00210c9:	90                   	nop

c00210ca <ISO9660::tryMount(LogicalDisk*, int)>:
c00210ca:	81 ec 10 08 00 00    	sub    esp,0x810
c00210d0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00210d7:	83 c0 41             	add    eax,0x41
c00210da:	0f be c0             	movsx  eax,al
c00210dd:	50                   	push   eax
c00210de:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210e2:	50                   	push   eax
c00210e3:	6a 10                	push   0x10
c00210e5:	e8 85 ff ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210ea:	83 c4 10             	add    esp,0x10
c00210ed:	31 c0                	xor    eax,eax
c00210ef:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00210f4:	75 1d                	jne    c0021113 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210f6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00210fb:	75 16                	jne    c0021113 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00210fd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021102:	75 0f                	jne    c0021113 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021104:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021109:	75 08                	jne    c0021113 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002110b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021110:	0f 94 c0             	sete   al
c0021113:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021119:	c3                   	ret    

c002111a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002111a:	55                   	push   ebp
c002111b:	57                   	push   edi
c002111c:	56                   	push   esi
c002111d:	53                   	push   ebx
c002111e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021124:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002112b:	85 ed                	test   ebp,ebp
c002112d:	0f 84 da 01 00 00    	je     c002130d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021133:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002113b:	0f 84 cc 01 00 00    	je     c002130d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021141:	b8 01 00 00 00       	mov    eax,0x1
c0021146:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002114a:	0f 85 c2 01 00 00    	jne    c0021312 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021150:	31 d2                	xor    edx,edx
c0021152:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021159:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002115c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c002115f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021162:	89 04 24             	mov    DWORD PTR [esp],eax
c0021165:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021169:	01 c8                	add    eax,ecx
c002116b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002116e:	11 da                	adc    edx,ebx
c0021170:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021174:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021178:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002117c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021180:	19 d7                	sbb    edi,edx
c0021182:	72 11                	jb     c0021195 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021184:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021187:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002118b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002118f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021193:	eb 0c                	jmp    c00211a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021195:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021199:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002119d:	29 ce                	sub    esi,ecx
c002119f:	19 df                	sbb    edi,ebx
c00211a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00211a4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00211a7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00211ab:	c1 e0 0b             	shl    eax,0xb
c00211ae:	01 c8                	add    eax,ecx
c00211b0:	11 da                	adc    edx,ebx
c00211b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00211b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211b9:	51                   	push   ecx
c00211ba:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211be:	50                   	push   eax
c00211bf:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00211c3:	53                   	push   ebx
c00211c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211cc:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211d0:	50                   	push   eax
c00211d1:	e8 99 fe ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00211d9:	b8 00 08 00 00       	mov    eax,0x800
c00211de:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00211e4:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00211e8:	29 d0                	sub    eax,edx
c00211ea:	83 c4 10             	add    esp,0x10
c00211ed:	89 f9                	mov    ecx,edi
c00211ef:	39 c6                	cmp    esi,eax
c00211f1:	83 d9 00             	sbb    ecx,0x0
c00211f4:	7d 1b                	jge    c0021211 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00211f6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00211fb:	75 12                	jne    c002120f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00211fd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021204:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002120a:	e9 fa 00 00 00       	jmp    c0021309 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002120f:	89 f0                	mov    eax,esi
c0021211:	01 d3                	add    ebx,edx
c0021213:	31 d2                	xor    edx,edx
c0021215:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021219:	39 c2                	cmp    edx,eax
c002121b:	7d 14                	jge    c0021231 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002121d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021224:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021228:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002122b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002122e:	42                   	inc    edx
c002122f:	eb e8                	jmp    c0021219 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021231:	89 c2                	mov    edx,eax
c0021233:	85 c0                	test   eax,eax
c0021235:	79 02                	jns    c0021239 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021237:	31 d2                	xor    edx,edx
c0021239:	01 c2                	add    edx,eax
c002123b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002123e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021245:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021249:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002124d:	99                   	cdq    
c002124e:	01 c1                	add    ecx,eax
c0021250:	11 d3                	adc    ebx,edx
c0021252:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021256:	29 c6                	sub    esi,eax
c0021258:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002125c:	19 d7                	sbb    edi,edx
c002125e:	89 34 24             	mov    DWORD PTR [esp],esi
c0021261:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021265:	b8 ff 07 00 00       	mov    eax,0x7ff
c002126a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002126d:	b8 00 00 00 00       	mov    eax,0x0
c0021272:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021276:	7d 43                	jge    c00212bb <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021278:	52                   	push   edx
c0021279:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002127d:	50                   	push   eax
c002127e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021282:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021286:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002128a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002128e:	50                   	push   eax
c002128f:	e8 db fd ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021294:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002129c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00212a1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00212a9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00212b1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00212b6:	83 c4 10             	add    esp,0x10
c00212b9:	eb aa                	jmp    c0021265 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00212bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212bf:	0b 04 24             	or     eax,DWORD PTR [esp]
c00212c2:	74 2a                	je     c00212ee <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00212c4:	50                   	push   eax
c00212c5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212c9:	50                   	push   eax
c00212ca:	8d 74 24 28          	lea    esi,[esp+0x28]
c00212ce:	56                   	push   esi
c00212cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00212d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00212d7:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00212db:	51                   	push   ecx
c00212dc:	e8 8e fd ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212e1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00212e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00212e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00212eb:	83 c4 10             	add    esp,0x10
c00212ee:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00212f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00212fd:	89 18                	mov    DWORD PTR [eax],ebx
c00212ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021303:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021306:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021309:	31 c0                	xor    eax,eax
c002130b:	eb 05                	jmp    c0021312 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002130d:	b8 04 00 00 00       	mov    eax,0x4
c0021312:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021318:	5b                   	pop    ebx
c0021319:	5e                   	pop    esi
c002131a:	5f                   	pop    edi
c002131b:	5d                   	pop    ebp
c002131c:	c3                   	ret    
c002131d:	90                   	nop

c002131e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002131e:	55                   	push   ebp
c002131f:	57                   	push   edi
c0021320:	56                   	push   esi
c0021321:	53                   	push   ebx
c0021322:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021328:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002132f:	85 ed                	test   ebp,ebp
c0021331:	0f 84 51 02 00 00    	je     c0021588 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021337:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002133f:	0f 84 43 02 00 00    	je     c0021588 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021345:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021348:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002134b:	75 0a                	jne    c0021357 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002134d:	b8 07 00 00 00       	mov    eax,0x7
c0021352:	e9 36 02 00 00       	jmp    c002158d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021357:	50                   	push   eax
c0021358:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002135c:	50                   	push   eax
c002135d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021364:	53                   	push   ebx
c0021365:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021368:	c1 e0 0b             	shl    eax,0xb
c002136b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002136e:	c1 e8 0b             	shr    eax,0xb
c0021371:	50                   	push   eax
c0021372:	e8 f8 fc ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021377:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002137a:	83 c4 10             	add    esp,0x10
c002137d:	89 c1                	mov    ecx,eax
c002137f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021382:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021388:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002138b:	84 db                	test   bl,bl
c002138d:	0f 85 8b 00 00 00    	jne    c002141e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021393:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021399:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002139c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00213a2:	29 c6                	sub    esi,eax
c00213a4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00213a8:	89 f3                	mov    ebx,esi
c00213aa:	89 f1                	mov    ecx,esi
c00213ac:	c1 fb 1f             	sar    ebx,0x1f
c00213af:	01 f0                	add    eax,esi
c00213b1:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00213b4:	11 da                	adc    edx,ebx
c00213b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00213b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213bd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213c0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213c3:	89 d8                	mov    eax,ebx
c00213c5:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00213c9:	ba 00 00 00 00       	mov    edx,0x0
c00213ce:	19 f8                	sbb    eax,edi
c00213d0:	b8 00 00 00 00       	mov    eax,0x0
c00213d5:	73 08                	jae    c00213df <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00213d7:	89 f0                	mov    eax,esi
c00213d9:	89 fa                	mov    edx,edi
c00213db:	29 c8                	sub    eax,ecx
c00213dd:	19 da                	sbb    edx,ebx
c00213df:	89 d7                	mov    edi,edx
c00213e1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00213e4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00213e7:	09 c7                	or     edi,eax
c00213e9:	0f 84 5e ff ff ff    	je     c002134d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00213ef:	57                   	push   edi
c00213f0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213f4:	50                   	push   eax
c00213f5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00213fc:	53                   	push   ebx
c00213fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021400:	c1 e0 0b             	shl    eax,0xb
c0021403:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021407:	c1 e8 0b             	shr    eax,0xb
c002140a:	50                   	push   eax
c002140b:	e8 5f fc ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021410:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021413:	83 c4 10             	add    esp,0x10
c0021416:	25 ff 07 00 00       	and    eax,0x7ff
c002141b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002141e:	31 ff                	xor    edi,edi
c0021420:	56                   	push   esi
c0021421:	6a 28                	push   0x28
c0021423:	6a 00                	push   0x0
c0021425:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021429:	50                   	push   eax
c002142a:	e8 21 f3 fd ff       	call   c0000750 <memset>
c002142f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021432:	25 ff 07 00 00       	and    eax,0x7ff
c0021437:	89 c6                	mov    esi,eax
c0021439:	83 c6 21             	add    esi,0x21
c002143c:	83 d7 00             	adc    edi,0x0
c002143f:	83 c4 10             	add    esp,0x10
c0021442:	31 c9                	xor    ecx,ecx
c0021444:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002144b:	83 f9 28             	cmp    ecx,0x28
c002144e:	88 04 24             	mov    BYTE PTR [esp],al
c0021451:	0f 94 c2             	sete   dl
c0021454:	88 d0                	mov    al,dl
c0021456:	ba ff 07 00 00       	mov    edx,0x7ff
c002145b:	39 f2                	cmp    edx,esi
c002145d:	ba 00 00 00 00       	mov    edx,0x0
c0021462:	19 fa                	sbb    edx,edi
c0021464:	0f 92 c2             	setb   dl
c0021467:	09 c2                	or     edx,eax
c0021469:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002146d:	0f 94 c0             	sete   al
c0021470:	08 d0                	or     al,dl
c0021472:	75 16                	jne    c002148a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021474:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021478:	74 10                	je     c002148a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002147a:	8a 04 24             	mov    al,BYTE PTR [esp]
c002147d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021481:	41                   	inc    ecx
c0021482:	83 c6 01             	add    esi,0x1
c0021485:	83 d7 00             	adc    edi,0x0
c0021488:	eb ba                	jmp    c0021444 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002148a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021491:	83 ec 0c             	sub    esp,0xc
c0021494:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021498:	56                   	push   esi
c0021499:	e8 ce f2 fd ff       	call   c000076c <strlen>
c002149e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00214a5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214a9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00214b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214b4:	5a                   	pop    edx
c00214b5:	25 ff 07 00 00       	and    eax,0x7ff
c00214ba:	59                   	pop    ecx
c00214bb:	01 f8                	add    eax,edi
c00214bd:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00214c3:	83 e0 02             	and    eax,0x2
c00214c6:	3c 01                	cmp    al,0x1
c00214c8:	19 c0                	sbb    eax,eax
c00214ca:	83 c0 02             	add    eax,0x2
c00214cd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214d1:	56                   	push   esi
c00214d2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00214d6:	50                   	push   eax
c00214d7:	e8 30 f3 fd ff       	call   c000080c <strcpy>
c00214dc:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00214e0:	83 c4 10             	add    esp,0x10
c00214e3:	84 c0                	test   al,al
c00214e5:	75 21                	jne    c0021508 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00214e7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00214ef:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00214f7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00214ff:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021506:	eb 28                	jmp    c0021530 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021508:	fe c8                	dec    al
c002150a:	75 24                	jne    c0021530 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002150c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021514:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002151c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021524:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002152b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021530:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021534:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002153b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021542:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021544:	0f b6 f3             	movzx  esi,bl
c0021547:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002154e:	31 db                	xor    ebx,ebx
c0021550:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021556:	89 df                	mov    edi,ebx
c0021558:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002155b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002155e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021561:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021564:	39 c6                	cmp    esi,eax
c0021566:	19 d7                	sbb    edi,edx
c0021568:	72 10                	jb     c002157a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002156a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021571:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021578:	eb 0a                	jmp    c0021584 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002157a:	29 f0                	sub    eax,esi
c002157c:	19 da                	sbb    edx,ebx
c002157e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021581:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021584:	31 c0                	xor    eax,eax
c0021586:	eb 05                	jmp    c002158d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021588:	b8 04 00 00 00       	mov    eax,0x4
c002158d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021593:	5b                   	pop    ebx
c0021594:	5e                   	pop    esi
c0021595:	5f                   	pop    edi
c0021596:	5d                   	pop    ebp
c0021597:	c3                   	ret    

c0021598 <readRoot(unsigned int*, unsigned int*, char)>:
c0021598:	57                   	push   edi
c0021599:	56                   	push   esi
c002159a:	81 ec 38 08 00 00    	sub    esp,0x838
c00215a0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00215a8:	50                   	push   eax
c00215a9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00215ad:	50                   	push   eax
c00215ae:	6a 10                	push   0x10
c00215b0:	e8 ba fa ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215b5:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00215bc:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00215c0:	b9 22 00 00 00       	mov    ecx,0x22
c00215c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215c7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00215ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215d2:	89 10                	mov    DWORD PTR [eax],edx
c00215d4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00215db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215df:	89 10                	mov    DWORD PTR [eax],edx
c00215e1:	81 c4 44 08 00 00    	add    esp,0x844
c00215e7:	b0 01                	mov    al,0x1
c00215e9:	5e                   	pop    esi
c00215ea:	5f                   	pop    edi
c00215eb:	c3                   	ret    

c00215ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00215ec:	55                   	push   ebp
c00215ed:	57                   	push   edi
c00215ee:	56                   	push   esi
c00215ef:	53                   	push   ebx
c00215f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215f6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00215fd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021604:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021608:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002160c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021610:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021614:	75 03                	jne    c0021619 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021616:	83 c3 02             	add    ebx,0x2
c0021619:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002161c:	75 03                	jne    c0021621 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002161e:	43                   	inc    ebx
c002161f:	eb f8                	jmp    c0021619 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021621:	51                   	push   ecx
c0021622:	68 00 01 00 00       	push   0x100
c0021627:	6a 00                	push   0x0
c0021629:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002162d:	50                   	push   eax
c002162e:	e8 1d f1 fd ff       	call   c0000750 <memset>
c0021633:	83 c4 10             	add    esp,0x10
c0021636:	31 d2                	xor    edx,edx
c0021638:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002163b:	84 c0                	test   al,al
c002163d:	74 21                	je     c0021660 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002163f:	3c 2f                	cmp    al,0x2f
c0021641:	75 0b                	jne    c002164e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021643:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021647:	bd 01 00 00 00       	mov    ebp,0x1
c002164c:	eb 14                	jmp    c0021662 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002164e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021651:	80 f9 19             	cmp    cl,0x19
c0021654:	77 03                	ja     c0021659 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021656:	83 e8 20             	sub    eax,0x20
c0021659:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002165d:	42                   	inc    edx
c002165e:	eb d8                	jmp    c0021638 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021660:	31 ed                	xor    ebp,ebp
c0021662:	83 ec 0c             	sub    esp,0xc
c0021665:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002166c:	e8 28 df fe ff       	call   c000f599 <malloc>
c0021671:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021678:	89 c6                	mov    esi,eax
c002167a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021680:	c1 ef 0b             	shr    edi,0xb
c0021683:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002168a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002168e:	83 c4 10             	add    esp,0x10
c0021691:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021696:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002169a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00216a1:	74 28                	je     c00216cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00216a3:	52                   	push   edx
c00216a4:	57                   	push   edi
c00216a5:	50                   	push   eax
c00216a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00216aa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00216b1:	e8 b9 f9 ff ff       	call   c002106f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216ba:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00216c1:	05 00 08 00 00       	add    eax,0x800
c00216c6:	83 c4 10             	add    esp,0x10
c00216c9:	eb cb                	jmp    c0021696 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00216cb:	83 ec 0c             	sub    esp,0xc
c00216ce:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00216d2:	57                   	push   edi
c00216d3:	e8 94 f0 fd ff       	call   c000076c <strlen>
c00216d8:	50                   	push   eax
c00216d9:	57                   	push   edi
c00216da:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00216e1:	56                   	push   esi
c00216e2:	e8 46 f9 ff ff       	call   c002102d <__memmem(unsigned char*, int, unsigned char*, int)>
c00216e7:	83 c4 20             	add    esp,0x20
c00216ea:	85 c0                	test   eax,eax
c00216ec:	75 13                	jne    c0021701 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00216ee:	83 ec 0c             	sub    esp,0xc
c00216f1:	56                   	push   esi
c00216f2:	e8 b2 de fe ff       	call   c000f5a9 <free>
c00216f7:	83 c4 10             	add    esp,0x10
c00216fa:	31 c0                	xor    eax,eax
c00216fc:	e9 b3 00 00 00       	jmp    c00217b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021701:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021705:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021709:	c1 e7 08             	shl    edi,0x8
c002170c:	c1 e2 10             	shl    edx,0x10
c002170f:	09 d7                	or     edi,edx
c0021711:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021715:	09 d7                	or     edi,edx
c0021717:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002171b:	c1 e2 18             	shl    edx,0x18
c002171e:	09 d7                	or     edi,edx
c0021720:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021724:	89 d1                	mov    ecx,edx
c0021726:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002172a:	c1 e1 08             	shl    ecx,0x8
c002172d:	c1 e2 10             	shl    edx,0x10
c0021730:	09 ca                	or     edx,ecx
c0021732:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021736:	09 ca                	or     edx,ecx
c0021738:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002173c:	c1 e1 18             	shl    ecx,0x18
c002173f:	09 ca                	or     edx,ecx
c0021741:	89 e9                	mov    ecx,ebp
c0021743:	84 c9                	test   cl,cl
c0021745:	74 3c                	je     c0021783 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021747:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002174b:	83 ec 0c             	sub    esp,0xc
c002174e:	56                   	push   esi
c002174f:	e8 55 de fe ff       	call   c000f5a9 <free>
c0021754:	83 c4 0c             	add    esp,0xc
c0021757:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002175e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021763:	50                   	push   eax
c0021764:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002176b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021772:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021776:	52                   	push   edx
c0021777:	57                   	push   edi
c0021778:	53                   	push   ebx
c0021779:	e8 6e fe ff ff       	call   c00215ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002177e:	83 c4 20             	add    esp,0x20
c0021781:	eb 31                	jmp    c00217b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021783:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021786:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002178d:	d0 e8                	shr    al,1
c002178f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021791:	83 e0 01             	and    eax,0x1
c0021794:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002179b:	83 ec 0c             	sub    esp,0xc
c002179e:	89 13                	mov    DWORD PTR [ebx],edx
c00217a0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00217a7:	89 03                	mov    DWORD PTR [ebx],eax
c00217a9:	56                   	push   esi
c00217aa:	e8 fa dd fe ff       	call   c000f5a9 <free>
c00217af:	83 c4 10             	add    esp,0x10
c00217b2:	b0 01                	mov    al,0x1
c00217b4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217ba:	5b                   	pop    ebx
c00217bb:	5e                   	pop    esi
c00217bc:	5f                   	pop    edi
c00217bd:	5d                   	pop    ebp
c00217be:	c3                   	ret    

c00217bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00217bf:	55                   	push   ebp
c00217c0:	57                   	push   edi
c00217c1:	56                   	push   esi
c00217c2:	53                   	push   ebx
c00217c3:	83 ec 20             	sub    esp,0x20
c00217c6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00217ca:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00217ce:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00217d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00217e2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00217e7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00217ed:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00217f3:	57                   	push   edi
c00217f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217f8:	50                   	push   eax
c00217f9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217fd:	50                   	push   eax
c00217fe:	e8 95 fd ff ff       	call   c0021598 <readRoot(unsigned int*, unsigned int*, char)>
c0021803:	5a                   	pop    edx
c0021804:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021808:	e8 5f ef fd ff       	call   c000076c <strlen>
c002180d:	83 c4 10             	add    esp,0x10
c0021810:	83 f8 03             	cmp    eax,0x3
c0021813:	77 17                	ja     c002182c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021815:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021819:	89 03                	mov    DWORD PTR [ebx],eax
c002181b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002181f:	89 06                	mov    DWORD PTR [esi],eax
c0021821:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021828:	b0 01                	mov    al,0x1
c002182a:	eb 19                	jmp    c0021845 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002182c:	50                   	push   eax
c002182d:	55                   	push   ebp
c002182e:	57                   	push   edi
c002182f:	56                   	push   esi
c0021830:	53                   	push   ebx
c0021831:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021835:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021839:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002183d:	e8 aa fd ff ff       	call   c00215ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021842:	83 c4 20             	add    esp,0x20
c0021845:	83 c4 1c             	add    esp,0x1c
c0021848:	5b                   	pop    ebx
c0021849:	5e                   	pop    esi
c002184a:	5f                   	pop    edi
c002184b:	5d                   	pop    ebp
c002184c:	c3                   	ret    
c002184d:	90                   	nop

c002184e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002184e:	57                   	push   edi
c002184f:	56                   	push   esi
c0021850:	53                   	push   ebx
c0021851:	83 ec 10             	sub    esp,0x10
c0021854:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021858:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002185c:	85 ff                	test   edi,edi
c002185e:	0f 84 8b 00 00 00    	je     c00218ef <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021864:	85 f6                	test   esi,esi
c0021866:	0f 84 83 00 00 00    	je     c00218ef <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002186c:	b8 03 00 00 00       	mov    eax,0x3
c0021871:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021876:	75 7c                	jne    c00218f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021878:	83 ec 0c             	sub    esp,0xc
c002187b:	6a 1c                	push   0x1c
c002187d:	e8 17 dd fe ff       	call   c000f599 <malloc>
c0021882:	89 07                	mov    DWORD PTR [edi],eax
c0021884:	89 c3                	mov    ebx,eax
c0021886:	58                   	pop    eax
c0021887:	8d 44 24 18          	lea    eax,[esp+0x18]
c002188b:	50                   	push   eax
c002188c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002188f:	50                   	push   eax
c0021890:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021894:	50                   	push   eax
c0021895:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021899:	50                   	push   eax
c002189a:	56                   	push   esi
c002189b:	e8 1f ff ff ff       	call   c00217bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218a0:	83 c4 20             	add    esp,0x20
c00218a3:	84 c0                	test   al,al
c00218a5:	74 07                	je     c00218ae <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00218a7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00218ac:	74 0b                	je     c00218b9 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00218ae:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00218b2:	b8 01 00 00 00       	mov    eax,0x1
c00218b7:	eb 3b                	jmp    c00218f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218bd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00218c1:	89 03                	mov    DWORD PTR [ebx],eax
c00218c3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00218ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218ce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00218d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218dc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00218df:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00218e6:	8a 06                	mov    al,BYTE PTR [esi]
c00218e8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00218eb:	31 c0                	xor    eax,eax
c00218ed:	eb 05                	jmp    c00218f4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218ef:	b8 04 00 00 00       	mov    eax,0x4
c00218f4:	83 c4 10             	add    esp,0x10
c00218f7:	5b                   	pop    ebx
c00218f8:	5e                   	pop    esi
c00218f9:	5f                   	pop    edi
c00218fa:	c3                   	ret    
c00218fb:	90                   	nop

c00218fc <ISO9660::exists(char const*)>:
c00218fc:	83 ec 28             	sub    esp,0x28
c00218ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021903:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021907:	52                   	push   edx
c0021908:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002190b:	52                   	push   edx
c002190c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021910:	52                   	push   edx
c0021911:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021915:	52                   	push   edx
c0021916:	50                   	push   eax
c0021917:	e8 a3 fe ff ff       	call   c00217bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002191c:	83 c4 3c             	add    esp,0x3c
c002191f:	c3                   	ret    

c0021920 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021920:	56                   	push   esi
c0021921:	53                   	push   ebx
c0021922:	83 ec 14             	sub    esp,0x14
c0021925:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021929:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002192d:	85 db                	test   ebx,ebx
c002192f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021933:	0f 94 c2             	sete   dl
c0021936:	85 f6                	test   esi,esi
c0021938:	0f 94 c0             	sete   al
c002193b:	08 c2                	or     dl,al
c002193d:	75 68                	jne    c00219a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002193f:	85 c9                	test   ecx,ecx
c0021941:	74 64                	je     c00219a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021943:	83 ec 0c             	sub    esp,0xc
c0021946:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021949:	8d 44 24 18          	lea    eax,[esp+0x18]
c002194d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021953:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002195a:	50                   	push   eax
c002195b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002195e:	50                   	push   eax
c002195f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021963:	50                   	push   eax
c0021964:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021968:	50                   	push   eax
c0021969:	51                   	push   ecx
c002196a:	e8 50 fe ff ff       	call   c00217bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002196f:	83 c4 20             	add    esp,0x20
c0021972:	ba 01 00 00 00       	mov    edx,0x1
c0021977:	84 c0                	test   al,al
c0021979:	74 31                	je     c00219ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002197b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002197f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021986:	89 03                	mov    DWORD PTR [ebx],eax
c0021988:	ba 00 00 00 00       	mov    edx,0x0
c002198d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021991:	85 c0                	test   eax,eax
c0021993:	0f 95 06             	setne  BYTE PTR [esi]
c0021996:	74 14                	je     c00219ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021998:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002199e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219a5:	eb 05                	jmp    c00219ac <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219a7:	ba 04 00 00 00       	mov    edx,0x4
c00219ac:	83 c4 14             	add    esp,0x14
c00219af:	89 d0                	mov    eax,edx
c00219b1:	5b                   	pop    ebx
c00219b2:	5e                   	pop    esi
c00219b3:	c3                   	ret    

c00219b4 <ISO9660::openDir(char const*, void**)>:
c00219b4:	57                   	push   edi
c00219b5:	56                   	push   esi
c00219b6:	53                   	push   ebx
c00219b7:	83 ec 10             	sub    esp,0x10
c00219ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219c2:	85 ff                	test   edi,edi
c00219c4:	74 7b                	je     c0021a41 <ISO9660::openDir(char const*, void**)+0x8d>
c00219c6:	85 f6                	test   esi,esi
c00219c8:	74 77                	je     c0021a41 <ISO9660::openDir(char const*, void**)+0x8d>
c00219ca:	83 ec 0c             	sub    esp,0xc
c00219cd:	6a 1c                	push   0x1c
c00219cf:	e8 c5 db fe ff       	call   c000f599 <malloc>
c00219d4:	89 07                	mov    DWORD PTR [edi],eax
c00219d6:	89 c3                	mov    ebx,eax
c00219d8:	58                   	pop    eax
c00219d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219dd:	50                   	push   eax
c00219de:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00219e1:	50                   	push   eax
c00219e2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219e6:	50                   	push   eax
c00219e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00219eb:	50                   	push   eax
c00219ec:	56                   	push   esi
c00219ed:	e8 cd fd ff ff       	call   c00217bf <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219f2:	83 c4 20             	add    esp,0x20
c00219f5:	84 c0                	test   al,al
c00219f7:	74 07                	je     c0021a00 <ISO9660::openDir(char const*, void**)+0x4c>
c00219f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00219fe:	75 0b                	jne    c0021a0b <ISO9660::openDir(char const*, void**)+0x57>
c0021a00:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a04:	b8 01 00 00 00       	mov    eax,0x1
c0021a09:	eb 3b                	jmp    c0021a46 <ISO9660::openDir(char const*, void**)+0x92>
c0021a0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a0f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a13:	89 03                	mov    DWORD PTR [ebx],eax
c0021a15:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a20:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a27:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a31:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a38:	8a 06                	mov    al,BYTE PTR [esi]
c0021a3a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a3d:	31 c0                	xor    eax,eax
c0021a3f:	eb 05                	jmp    c0021a46 <ISO9660::openDir(char const*, void**)+0x92>
c0021a41:	b8 04 00 00 00       	mov    eax,0x4
c0021a46:	83 c4 10             	add    esp,0x10
c0021a49:	5b                   	pop    ebx
c0021a4a:	5e                   	pop    esi
c0021a4b:	5f                   	pop    edi
c0021a4c:	c3                   	ret    
c0021a4d:	90                   	nop

c0021a4e <ISO9660::ISO9660()>:
c0021a4e:	83 ec 0c             	sub    esp,0xc
c0021a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a55:	83 ec 0c             	sub    esp,0xc
c0021a58:	50                   	push   eax
c0021a59:	e8 86 0e ff ff       	call   c00128e4 <Filesystem::Filesystem()>
c0021a5e:	83 c4 10             	add    esp,0x10
c0021a61:	ba c0 bc 02 c0       	mov    edx,0xc002bcc0
c0021a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6a:	89 10                	mov    DWORD PTR [eax],edx
c0021a6c:	90                   	nop
c0021a6d:	83 c4 0c             	add    esp,0xc
c0021a70:	c3                   	ret    
c0021a71:	90                   	nop

c0021a72 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021a72:	83 ec 1c             	sub    esp,0x1c
c0021a75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021a7d:	89 10                	mov    DWORD PTR [eax],edx
c0021a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021a87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021a92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a95:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021a9a:	75 23                	jne    c0021abf <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aa0:	8b 10                	mov    edx,DWORD PTR [eax]
c0021aa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aa9:	0f af c2             	imul   eax,edx
c0021aac:	85 c0                	test   eax,eax
c0021aae:	79 03                	jns    c0021ab3 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021ab0:	83 c0 03             	add    eax,0x3
c0021ab3:	c1 f8 02             	sar    eax,0x2
c0021ab6:	05 a0 0f 00 00       	add    eax,0xfa0
c0021abb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ac3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021ac7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021aca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ace:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ad9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ae4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ae7:	c1 e0 02             	shl    eax,0x2
c0021aea:	83 ec 0c             	sub    esp,0xc
c0021aed:	50                   	push   eax
c0021aee:	e8 a6 da fe ff       	call   c000f599 <malloc>
c0021af3:	83 c4 10             	add    esp,0x10
c0021af6:	89 c2                	mov    edx,eax
c0021af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021afc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021aff:	83 ec 04             	sub    esp,0x4
c0021b02:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b06:	50                   	push   eax
c0021b07:	6a 01                	push   0x1
c0021b09:	6a 04                	push   0x4
c0021b0b:	e8 55 70 fe ff       	call   c0008b65 <src_new>
c0021b10:	83 c4 10             	add    esp,0x10
c0021b13:	89 c2                	mov    edx,eax
c0021b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b20:	85 c0                	test   eax,eax
c0021b22:	74 10                	je     c0021b34 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021b24:	83 ec 0c             	sub    esp,0xc
c0021b27:	68 20 bd 02 c0       	push   0xc002bd20
c0021b2c:	e8 14 82 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0021b31:	83 c4 10             	add    esp,0x10
c0021b34:	a0 80 1a 03 c0       	mov    al,ds:0xc0031a80
c0021b39:	83 f0 01             	xor    eax,0x1
c0021b3c:	84 c0                	test   al,al
c0021b3e:	74 57                	je     c0021b97 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021b40:	a1 3c bd 02 c0       	mov    eax,ds:0xc002bd3c
c0021b45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b51:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021b59:	7f 35                	jg     c0021b90 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021b5b:	83 ec 0c             	sub    esp,0xc
c0021b5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b62:	e8 d8 53 00 00       	call   c0026f3f <__floatsisf>
c0021b67:	83 c4 10             	add    esp,0x10
c0021b6a:	8b 15 3c bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd3c
c0021b70:	83 ec 08             	sub    esp,0x8
c0021b73:	52                   	push   edx
c0021b74:	50                   	push   eax
c0021b75:	e8 d7 4f 00 00       	call   c0026b51 <__mulsf3>
c0021b7a:	83 c4 10             	add    esp,0x10
c0021b7d:	89 c2                	mov    edx,eax
c0021b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b83:	89 14 85 80 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce980],edx
c0021b8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021b8e:	eb c1                	jmp    c0021b51 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021b90:	c6 05 80 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a80,0x1
c0021b97:	90                   	nop
c0021b98:	83 c4 1c             	add    esp,0x1c
c0021b9b:	c3                   	ret    

c0021b9c <SoundChannel::~SoundChannel()>:
c0021b9c:	83 ec 0c             	sub    esp,0xc
c0021b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021ba6:	83 ec 0c             	sub    esp,0xc
c0021ba9:	50                   	push   eax
c0021baa:	e8 fa d9 fe ff       	call   c000f5a9 <free>
c0021baf:	83 c4 10             	add    esp,0x10
c0021bb2:	90                   	nop
c0021bb3:	83 c4 0c             	add    esp,0xc
c0021bb6:	c3                   	ret    
c0021bb7:	90                   	nop

c0021bb8 <SoundChannel::getSampleRate()>:
c0021bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bbe:	c3                   	ret    
c0021bbf:	90                   	nop

c0021bc0 <SoundChannel::getBits()>:
c0021bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bc7:	c3                   	ret    

c0021bc8 <SoundChannel::getBufferUsed()>:
c0021bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bcc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021bcf:	c3                   	ret    

c0021bd0 <SoundChannel::getBufferSize()>:
c0021bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bd4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bd7:	c3                   	ret    

c0021bd8 <SoundChannel::unbuffer(float*, int, int)>:
c0021bd8:	56                   	push   esi
c0021bd9:	53                   	push   ebx
c0021bda:	83 ec 40             	sub    esp,0x40
c0021bdd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021be1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021be4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021be8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021beb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021bef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021bf3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021bf7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021bfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021bff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021c03:	e8 37 53 00 00       	call   c0026f3f <__floatsisf>
c0021c08:	5a                   	pop    edx
c0021c09:	89 c6                	mov    esi,eax
c0021c0b:	ff 33                	push   DWORD PTR [ebx]
c0021c0d:	e8 2d 53 00 00       	call   c0026f3f <__floatsisf>
c0021c12:	59                   	pop    ecx
c0021c13:	5a                   	pop    edx
c0021c14:	50                   	push   eax
c0021c15:	56                   	push   esi
c0021c16:	e8 f9 50 00 00       	call   c0026d14 <__divsf3>
c0021c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c1e:	e8 ec 65 00 00       	call   c002820f <__extendsfdf2>
c0021c23:	59                   	pop    ecx
c0021c24:	5e                   	pop    esi
c0021c25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021c2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021c35:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c39:	50                   	push   eax
c0021c3a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021c3d:	e8 18 6b fe ff       	call   c000875a <src_process>
c0021c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c46:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021c49:	83 c4 0c             	add    esp,0xc
c0021c4c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021c4f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021c52:	29 d0                	sub    eax,edx
c0021c54:	c1 e0 02             	shl    eax,0x2
c0021c57:	50                   	push   eax
c0021c58:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021c5b:	50                   	push   eax
c0021c5c:	51                   	push   ecx
c0021c5d:	e8 26 ea fd ff       	call   c0000688 <memmove>
c0021c62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c66:	83 c4 44             	add    esp,0x44
c0021c69:	5b                   	pop    ebx
c0021c6a:	5e                   	pop    esi
c0021c6b:	c3                   	ret    

c0021c6c <SoundChannel::buffer16(short*, int)>:
c0021c6c:	55                   	push   ebp
c0021c6d:	57                   	push   edi
c0021c6e:	56                   	push   esi
c0021c6f:	53                   	push   ebx
c0021c70:	83 ec 1c             	sub    esp,0x1c
c0021c73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021c77:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021c7a:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021c7d:	0f 84 d2 00 00 00    	je     c0021d55 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c83:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021c87:	85 ed                	test   ebp,ebp
c0021c89:	0f 8e c6 00 00 00    	jle    c0021d55 <SoundChannel::buffer16(short*, int)+0xe9>
c0021c8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c93:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021c98:	83 ec 0c             	sub    esp,0xc
c0021c9b:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021c9e:	50                   	push   eax
c0021c9f:	e8 9b 52 00 00       	call   c0026f3f <__floatsisf>
c0021ca4:	59                   	pop    ecx
c0021ca5:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021ca8:	5f                   	pop    edi
c0021ca9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021cac:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021caf:	55                   	push   ebp
c0021cb0:	50                   	push   eax
c0021cb1:	e8 9b 4e 00 00       	call   c0026b51 <__mulsf3>
c0021cb6:	83 c4 10             	add    esp,0x10
c0021cb9:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021cbc:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021cbf:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021cc2:	0f 84 99 00 00 00    	je     c0021d61 <SoundChannel::buffer16(short*, int)+0xf5>
c0021cc8:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021ccd:	74 78                	je     c0021d47 <SoundChannel::buffer16(short*, int)+0xdb>
c0021ccf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021cd3:	83 ec 0c             	sub    esp,0xc
c0021cd6:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021cda:	50                   	push   eax
c0021cdb:	e8 5f 52 00 00       	call   c0026f3f <__floatsisf>
c0021ce0:	5f                   	pop    edi
c0021ce1:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021ce4:	5a                   	pop    edx
c0021ce5:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021ce8:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021ceb:	55                   	push   ebp
c0021cec:	50                   	push   eax
c0021ced:	e8 5f 4e 00 00       	call   c0026b51 <__mulsf3>
c0021cf2:	83 c4 10             	add    esp,0x10
c0021cf5:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021cf8:	be 02 00 00 00       	mov    esi,0x2
c0021cfd:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d00:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d03:	74 46                	je     c0021d4b <SoundChannel::buffer16(short*, int)+0xdf>
c0021d05:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021d09:	eb 36                	jmp    c0021d41 <SoundChannel::buffer16(short*, int)+0xd5>
c0021d0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d0f:	83 ec 0c             	sub    esp,0xc
c0021d12:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021d16:	46                   	inc    esi
c0021d17:	50                   	push   eax
c0021d18:	e8 22 52 00 00       	call   c0026f3f <__floatsisf>
c0021d1d:	5a                   	pop    edx
c0021d1e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021d21:	59                   	pop    ecx
c0021d22:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021d25:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d2c:	50                   	push   eax
c0021d2d:	e8 1f 4e 00 00       	call   c0026b51 <__mulsf3>
c0021d32:	83 c4 10             	add    esp,0x10
c0021d35:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021d39:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d3c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d3f:	74 0a                	je     c0021d4b <SoundChannel::buffer16(short*, int)+0xdf>
c0021d41:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021d45:	75 c4                	jne    c0021d0b <SoundChannel::buffer16(short*, int)+0x9f>
c0021d47:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021d4b:	83 c4 1c             	add    esp,0x1c
c0021d4e:	89 f0                	mov    eax,esi
c0021d50:	5b                   	pop    ebx
c0021d51:	5e                   	pop    esi
c0021d52:	5f                   	pop    edi
c0021d53:	5d                   	pop    ebp
c0021d54:	c3                   	ret    
c0021d55:	83 c4 1c             	add    esp,0x1c
c0021d58:	31 f6                	xor    esi,esi
c0021d5a:	5b                   	pop    ebx
c0021d5b:	89 f0                	mov    eax,esi
c0021d5d:	5e                   	pop    esi
c0021d5e:	5f                   	pop    edi
c0021d5f:	5d                   	pop    ebp
c0021d60:	c3                   	ret    
c0021d61:	be 01 00 00 00       	mov    esi,0x1
c0021d66:	eb e3                	jmp    c0021d4b <SoundChannel::buffer16(short*, int)+0xdf>

c0021d68 <SoundChannel::buffer8(unsigned char*, int)>:
c0021d68:	55                   	push   ebp
c0021d69:	57                   	push   edi
c0021d6a:	56                   	push   esi
c0021d6b:	53                   	push   ebx
c0021d6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d70:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d74:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d7b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d7e:	74 7a                	je     c0021dfa <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d80:	85 ff                	test   edi,edi
c0021d82:	7e 76                	jle    c0021dfa <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d84:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021d88:	8d 70 01             	lea    esi,[eax+0x1]
c0021d8b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d8e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d91:	8b 1c 9d 80 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce980]
c0021d98:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d9b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d9e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021da1:	74 5e                	je     c0021e01 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021da3:	83 ff 01             	cmp    edi,0x1
c0021da6:	74 4b                	je     c0021df3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021da8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021dac:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021daf:	8d 70 01             	lea    esi,[eax+0x1]
c0021db2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021db5:	8b 1c 9d 80 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce980]
c0021dbc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021dbf:	b8 02 00 00 00       	mov    eax,0x2
c0021dc4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021dc7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021dca:	75 23                	jne    c0021def <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021dcc:	eb 27                	jmp    c0021df5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021dce:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021dd3:	8d 71 01             	lea    esi,[ecx+0x1]
c0021dd6:	40                   	inc    eax
c0021dd7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021dda:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021ddd:	8b 1c 9d 80 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce980]
c0021de4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021de7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021dea:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ded:	74 06                	je     c0021df5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021def:	39 c7                	cmp    edi,eax
c0021df1:	75 db                	jne    c0021dce <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021df3:	89 f8                	mov    eax,edi
c0021df5:	5b                   	pop    ebx
c0021df6:	5e                   	pop    esi
c0021df7:	5f                   	pop    edi
c0021df8:	5d                   	pop    ebp
c0021df9:	c3                   	ret    
c0021dfa:	5b                   	pop    ebx
c0021dfb:	31 c0                	xor    eax,eax
c0021dfd:	5e                   	pop    esi
c0021dfe:	5f                   	pop    edi
c0021dff:	5d                   	pop    ebp
c0021e00:	c3                   	ret    
c0021e01:	b8 01 00 00 00       	mov    eax,0x1
c0021e06:	eb ed                	jmp    c0021df5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021e08 <SoundDevice::SoundDevice(char const*)>:
c0021e08:	83 ec 1c             	sub    esp,0x1c
c0021e0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e0f:	83 ec 08             	sub    esp,0x8
c0021e12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021e16:	50                   	push   eax
c0021e17:	e8 fa 1d ff ff       	call   c0013c16 <Device::Device(char const*)>
c0021e1c:	83 c4 10             	add    esp,0x10
c0021e1f:	ba 48 bd 02 c0       	mov    edx,0xc002bd48
c0021e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e28:	89 10                	mov    DWORD PTR [eax],edx
c0021e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e2e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e3c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021e46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e4e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e53:	7f 19                	jg     c0021e6e <SoundDevice::SoundDevice(char const*)+0x66>
c0021e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e5d:	83 c2 54             	add    edx,0x54
c0021e60:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021e68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e6c:	eb e0                	jmp    c0021e4e <SoundDevice::SoundDevice(char const*)+0x46>
c0021e6e:	90                   	nop
c0021e6f:	83 c4 1c             	add    esp,0x1c
c0021e72:	c3                   	ret    
c0021e73:	90                   	nop

c0021e74 <SoundDevice::~SoundDevice()>:
c0021e74:	53                   	push   ebx
c0021e75:	83 ec 18             	sub    esp,0x18
c0021e78:	ba 48 bd 02 c0       	mov    edx,0xc002bd48
c0021e7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e81:	89 10                	mov    DWORD PTR [eax],edx
c0021e83:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e8b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e90:	7f 46                	jg     c0021ed8 <SoundDevice::~SoundDevice()+0x64>
c0021e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e9a:	83 c2 54             	add    edx,0x54
c0021e9d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021ea1:	85 c0                	test   eax,eax
c0021ea3:	74 2d                	je     c0021ed2 <SoundDevice::~SoundDevice()+0x5e>
c0021ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ead:	83 c2 54             	add    edx,0x54
c0021eb0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021eb4:	85 db                	test   ebx,ebx
c0021eb6:	74 1a                	je     c0021ed2 <SoundDevice::~SoundDevice()+0x5e>
c0021eb8:	83 ec 0c             	sub    esp,0xc
c0021ebb:	53                   	push   ebx
c0021ebc:	e8 db fc ff ff       	call   c0021b9c <SoundChannel::~SoundChannel()>
c0021ec1:	83 c4 10             	add    esp,0x10
c0021ec4:	83 ec 08             	sub    esp,0x8
c0021ec7:	6a 2c                	push   0x2c
c0021ec9:	53                   	push   ebx
c0021eca:	e8 32 06 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0021ecf:	83 c4 10             	add    esp,0x10
c0021ed2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ed6:	eb b3                	jmp    c0021e8b <SoundDevice::~SoundDevice()+0x17>
c0021ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021edc:	83 ec 0c             	sub    esp,0xc
c0021edf:	50                   	push   eax
c0021ee0:	e8 fb 19 ff ff       	call   c00138e0 <Device::~Device()>
c0021ee5:	83 c4 10             	add    esp,0x10
c0021ee8:	90                   	nop
c0021ee9:	83 c4 18             	add    esp,0x18
c0021eec:	5b                   	pop    ebx
c0021eed:	c3                   	ret    

c0021eee <SoundDevice::~SoundDevice()>:
c0021eee:	83 ec 0c             	sub    esp,0xc
c0021ef1:	83 ec 0c             	sub    esp,0xc
c0021ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ef8:	e8 77 ff ff ff       	call   c0021e74 <SoundDevice::~SoundDevice()>
c0021efd:	83 c4 10             	add    esp,0x10
c0021f00:	83 ec 08             	sub    esp,0x8
c0021f03:	68 e4 01 00 00       	push   0x1e4
c0021f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f0c:	e8 f0 05 ff ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	83 c4 0c             	add    esp,0xc
c0021f17:	c3                   	ret    

c0021f18 <SoundDevice::getFreeChannelNum()>:
c0021f18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f1c:	31 c0                	xor    eax,eax
c0021f1e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021f26:	74 09                	je     c0021f31 <SoundDevice::getFreeChannelNum()+0x19>
c0021f28:	40                   	inc    eax
c0021f29:	83 f8 20             	cmp    eax,0x20
c0021f2c:	75 f0                	jne    c0021f1e <SoundDevice::getFreeChannelNum()+0x6>
c0021f2e:	83 c8 ff             	or     eax,0xffffffff
c0021f31:	c3                   	ret    

c0021f32 <SoundDevice::addChannel(SoundChannel*)>:
c0021f32:	56                   	push   esi
c0021f33:	53                   	push   ebx
c0021f34:	51                   	push   ecx
c0021f35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f3d:	53                   	push   ebx
c0021f3e:	e8 d5 ff ff ff       	call   c0021f18 <SoundDevice::getFreeChannelNum()>
c0021f43:	5a                   	pop    edx
c0021f44:	83 f8 ff             	cmp    eax,0xffffffff
c0021f47:	74 51                	je     c0021f9a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f49:	85 f6                	test   esi,esi
c0021f4b:	74 4d                	je     c0021f9a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f4d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021f54:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021f5b:	75 30                	jne    c0021f8d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021f5d:	83 ec 0c             	sub    esp,0xc
c0021f60:	56                   	push   esi
c0021f61:	e8 52 fc ff ff       	call   c0021bb8 <SoundChannel::getSampleRate()>
c0021f66:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021f6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f6f:	e8 4c fc ff ff       	call   c0021bc0 <SoundChannel::getBits()>
c0021f74:	83 c4 0c             	add    esp,0xc
c0021f77:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021f7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021f7f:	50                   	push   eax
c0021f80:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021f86:	53                   	push   ebx
c0021f87:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021f8a:	83 c4 10             	add    esp,0x10
c0021f8d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021f93:	b8 01 00 00 00       	mov    eax,0x1
c0021f98:	eb 03                	jmp    c0021f9d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021f9a:	83 c8 ff             	or     eax,0xffffffff
c0021f9d:	5a                   	pop    edx
c0021f9e:	5b                   	pop    ebx
c0021f9f:	5e                   	pop    esi
c0021fa0:	c3                   	ret    
c0021fa1:	90                   	nop

c0021fa2 <SoundDevice::removeChannel(int)>:
c0021fa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021faa:	83 fa 1f             	cmp    edx,0x1f
c0021fad:	77 23                	ja     c0021fd2 <SoundDevice::removeChannel(int)+0x30>
c0021faf:	8d 14 90             	lea    edx,[eax+edx*4]
c0021fb2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021fb9:	74 17                	je     c0021fd2 <SoundDevice::removeChannel(int)+0x30>
c0021fbb:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021fc5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021fcb:	75 05                	jne    c0021fd2 <SoundDevice::removeChannel(int)+0x30>
c0021fcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fcf:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021fd2:	c3                   	ret    
c0021fd3:	90                   	nop

c0021fd4 <SoundDevice::floatTo16(float*, short*, int)>:
c0021fd4:	57                   	push   edi
c0021fd5:	56                   	push   esi
c0021fd6:	53                   	push   ebx
c0021fd7:	31 db                	xor    ebx,ebx
c0021fd9:	83 ec 10             	sub    esp,0x10
c0021fdc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fe0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fe4:	0f 8d d0 00 00 00    	jge    c00220ba <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021fea:	83 ec 0c             	sub    esp,0xc
c0021fed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ff1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021ff4:	e8 16 62 00 00       	call   c002820f <__extendsfdf2>
c0021ff9:	83 c4 10             	add    esp,0x10
c0021ffc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022000:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022004:	68 00 00 f0 3f       	push   0x3ff00000
c0022009:	6a 00                	push   0x0
c002200b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002200f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022013:	e8 83 51 00 00       	call   c002719b <__adddf3>
c0022018:	83 c4 10             	add    esp,0x10
c002201b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002201f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022023:	68 00 00 e0 3f       	push   0x3fe00000
c0022028:	6a 00                	push   0x0
c002202a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002202e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022032:	e8 e1 57 00 00       	call   c0027818 <__muldf3>
c0022037:	83 c4 10             	add    esp,0x10
c002203a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002203e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022042:	68 c0 ff df 40       	push   0x40dfffc0
c0022047:	6a 00                	push   0x0
c0022049:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002204d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022051:	e8 c2 57 00 00       	call   c0027818 <__muldf3>
c0022056:	59                   	pop    ecx
c0022057:	5f                   	pop    edi
c0022058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002205c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022068:	e8 7e 60 00 00       	call   c00280eb <__truncdfsf2>
c002206d:	5a                   	pop    edx
c002206e:	89 c7                	mov    edi,eax
c0022070:	59                   	pop    ecx
c0022071:	68 00 fe ff 46       	push   0x46fffe00
c0022076:	50                   	push   eax
c0022077:	e8 19 51 00 00       	call   c0027195 <__gesf2>
c002207c:	83 c4 10             	add    esp,0x10
c002207f:	85 c0                	test   eax,eax
c0022081:	78 08                	js     c002208b <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022083:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022089:	eb 29                	jmp    c00220b4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002208b:	50                   	push   eax
c002208c:	50                   	push   eax
c002208d:	6a 00                	push   0x0
c002208f:	57                   	push   edi
c0022090:	e8 04 51 00 00       	call   c0027199 <__lesf2>
c0022095:	83 c4 10             	add    esp,0x10
c0022098:	85 c0                	test   eax,eax
c002209a:	7f 08                	jg     c00220a4 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002209c:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00220a2:	eb 10                	jmp    c00220b4 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00220a4:	83 ec 0c             	sub    esp,0xc
c00220a7:	57                   	push   edi
c00220a8:	e8 ff 61 00 00       	call   c00282ac <lrintf>
c00220ad:	83 c4 10             	add    esp,0x10
c00220b0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00220b4:	43                   	inc    ebx
c00220b5:	e9 26 ff ff ff       	jmp    c0021fe0 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00220ba:	83 c4 10             	add    esp,0x10
c00220bd:	5b                   	pop    ebx
c00220be:	5e                   	pop    esi
c00220bf:	5f                   	pop    edi
c00220c0:	c3                   	ret    
c00220c1:	90                   	nop

c00220c2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00220c2:	57                   	push   edi
c00220c3:	56                   	push   esi
c00220c4:	53                   	push   ebx
c00220c5:	31 db                	xor    ebx,ebx
c00220c7:	83 ec 10             	sub    esp,0x10
c00220ca:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220ce:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220d2:	0f 8d cb 00 00 00    	jge    c00221a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00220d8:	83 ec 0c             	sub    esp,0xc
c00220db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220df:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220e2:	e8 28 61 00 00       	call   c002820f <__extendsfdf2>
c00220e7:	83 c4 10             	add    esp,0x10
c00220ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220f2:	68 00 00 f0 3f       	push   0x3ff00000
c00220f7:	6a 00                	push   0x0
c00220f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022101:	e8 95 50 00 00       	call   c002719b <__adddf3>
c0022106:	83 c4 10             	add    esp,0x10
c0022109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002210d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022111:	68 00 00 e0 3f       	push   0x3fe00000
c0022116:	6a 00                	push   0x0
c0022118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002211c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022120:	e8 f3 56 00 00       	call   c0027818 <__muldf3>
c0022125:	83 c4 10             	add    esp,0x10
c0022128:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002212c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022130:	68 00 00 60 40       	push   0x40600000
c0022135:	6a 00                	push   0x0
c0022137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213f:	e8 d4 56 00 00       	call   c0027818 <__muldf3>
c0022144:	59                   	pop    ecx
c0022145:	5f                   	pop    edi
c0022146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002214a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002214e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022152:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022156:	e8 90 5f 00 00       	call   c00280eb <__truncdfsf2>
c002215b:	5a                   	pop    edx
c002215c:	89 c7                	mov    edi,eax
c002215e:	59                   	pop    ecx
c002215f:	68 00 00 fe 42       	push   0x42fe0000
c0022164:	50                   	push   eax
c0022165:	e8 2b 50 00 00       	call   c0027195 <__gesf2>
c002216a:	83 c4 10             	add    esp,0x10
c002216d:	85 c0                	test   eax,eax
c002216f:	78 06                	js     c0022177 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022171:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022175:	eb 26                	jmp    c002219d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022177:	50                   	push   eax
c0022178:	50                   	push   eax
c0022179:	6a 00                	push   0x0
c002217b:	57                   	push   edi
c002217c:	e8 18 50 00 00       	call   c0027199 <__lesf2>
c0022181:	83 c4 10             	add    esp,0x10
c0022184:	85 c0                	test   eax,eax
c0022186:	7f 06                	jg     c002218e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022188:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002218c:	eb 0f                	jmp    c002219d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002218e:	83 ec 0c             	sub    esp,0xc
c0022191:	57                   	push   edi
c0022192:	e8 15 61 00 00       	call   c00282ac <lrintf>
c0022197:	83 c4 10             	add    esp,0x10
c002219a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002219d:	43                   	inc    ebx
c002219e:	e9 2b ff ff ff       	jmp    c00220ce <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00221a3:	83 c4 10             	add    esp,0x10
c00221a6:	5b                   	pop    ebx
c00221a7:	5e                   	pop    esi
c00221a8:	5f                   	pop    edi
c00221a9:	c3                   	ret    

c00221aa <SoundDevice::getAudio(int, float*, float*)>:
c00221aa:	55                   	push   ebp
c00221ab:	31 ed                	xor    ebp,ebp
c00221ad:	57                   	push   edi
c00221ae:	56                   	push   esi
c00221af:	31 f6                	xor    esi,esi
c00221b1:	53                   	push   ebx
c00221b2:	83 ec 20             	sub    esp,0x20
c00221b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00221b9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00221bd:	c1 e0 02             	shl    eax,0x2
c00221c0:	50                   	push   eax
c00221c1:	6a 00                	push   0x0
c00221c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00221c7:	e8 84 e5 fd ff       	call   c0000750 <memset>
c00221cc:	83 c4 10             	add    esp,0x10
c00221cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221d7:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00221de:	85 c9                	test   ecx,ecx
c00221e0:	74 52                	je     c0022234 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00221e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00221e6:	99                   	cdq    
c00221e7:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00221ed:	50                   	push   eax
c00221ee:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00221f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00221f8:	51                   	push   ecx
c00221f9:	e8 da f9 ff ff       	call   c0021bd8 <SoundChannel::unbuffer(float*, int, int)>
c00221fe:	31 d2                	xor    edx,edx
c0022200:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022204:	83 c4 10             	add    esp,0x10
c0022207:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002220b:	7d 1e                	jge    c002222b <SoundDevice::getAudio(int, float*, float*)+0x81>
c002220d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022211:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022215:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022218:	89 cf                	mov    edi,ecx
c002221a:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022220:	0f af ca             	imul   ecx,edx
c0022223:	42                   	inc    edx
c0022224:	01 e9                	add    ecx,ebp
c0022226:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022229:	eb dc                	jmp    c0022207 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002222b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002222f:	45                   	inc    ebp
c0022230:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022234:	46                   	inc    esi
c0022235:	83 fe 20             	cmp    esi,0x20
c0022238:	75 9d                	jne    c00221d7 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002223a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002223e:	83 c4 1c             	add    esp,0x1c
c0022241:	5b                   	pop    ebx
c0022242:	5e                   	pop    esi
c0022243:	5f                   	pop    edi
c0022244:	5d                   	pop    ebp
c0022245:	c3                   	ret    

c0022246 <PCI::open(int, int, void*)>:
c0022246:	83 ec 18             	sub    esp,0x18
c0022249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002224d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022251:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022257:	8b 10                	mov    edx,DWORD PTR [eax]
c0022259:	50                   	push   eax
c002225a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002225d:	31 c0                	xor    eax,eax
c002225f:	83 c4 1c             	add    esp,0x1c
c0022262:	c3                   	ret    
c0022263:	90                   	nop

c0022264 <PCI::close(int, int, void*)>:
c0022264:	31 c0                	xor    eax,eax
c0022266:	c3                   	ret    
c0022267:	90                   	nop

c0022268 <PCI::PCI()>:
c0022268:	83 ec 0c             	sub    esp,0xc
c002226b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226f:	83 ec 08             	sub    esp,0x8
c0022272:	68 78 bd 02 c0       	push   0xc002bd78
c0022277:	50                   	push   eax
c0022278:	e8 fd 0f ff ff       	call   c001327a <Bus::Bus(char const*)>
c002227d:	83 c4 10             	add    esp,0x10
c0022280:	ba 64 be 02 c0       	mov    edx,0xc002be64
c0022285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022289:	89 10                	mov    DWORD PTR [eax],edx
c002228b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229d:	a3 84 1a 03 c0       	mov    ds:0xc0031a84,eax
c00222a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222ac:	0f b6 d0             	movzx  edx,al
c00222af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00222ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222c4:	0f b6 d0             	movzx  edx,al
c00222c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00222d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222da:	8d 50 01             	lea    edx,[eax+0x1]
c00222dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222e1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222e7:	0f b6 d0             	movzx  edx,al
c00222ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222f2:	83 c9 c0             	or     ecx,0xffffffc0
c00222f5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222f9:	90                   	nop
c00222fa:	83 c4 0c             	add    esp,0xc
c00222fd:	c3                   	ret    

c00222fe <PCI::readBAR8(unsigned int, int)>:
c00222fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022306:	f6 c2 01             	test   dl,0x1
c0022309:	74 07                	je     c0022312 <PCI::readBAR8(unsigned int, int)+0x14>
c002230b:	83 e2 fc             	and    edx,0xfffffffc
c002230e:	01 c2                	add    edx,eax
c0022310:	ec                   	in     al,dx
c0022311:	c3                   	ret    
c0022312:	83 e2 f0             	and    edx,0xfffffff0
c0022315:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022318:	c3                   	ret    
c0022319:	90                   	nop

c002231a <PCI::readBAR16(unsigned int, int)>:
c002231a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002231e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022322:	f6 c2 01             	test   dl,0x1
c0022325:	74 08                	je     c002232f <PCI::readBAR16(unsigned int, int)+0x15>
c0022327:	83 e2 fc             	and    edx,0xfffffffc
c002232a:	01 c2                	add    edx,eax
c002232c:	66 ed                	in     ax,dx
c002232e:	c3                   	ret    
c002232f:	83 e2 f0             	and    edx,0xfffffff0
c0022332:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022336:	c3                   	ret    
c0022337:	90                   	nop

c0022338 <PCI::readBAR32(unsigned int, int)>:
c0022338:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002233c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022340:	f6 c2 01             	test   dl,0x1
c0022343:	74 07                	je     c002234c <PCI::readBAR32(unsigned int, int)+0x14>
c0022345:	83 e2 fc             	and    edx,0xfffffffc
c0022348:	01 c2                	add    edx,eax
c002234a:	ed                   	in     eax,dx
c002234b:	c3                   	ret    
c002234c:	83 e2 f0             	and    edx,0xfffffff0
c002234f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022352:	c3                   	ret    
c0022353:	90                   	nop

c0022354 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002235c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022360:	f6 c2 01             	test   dl,0x1
c0022363:	74 07                	je     c002236c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022365:	83 e2 fc             	and    edx,0xfffffffc
c0022368:	01 ca                	add    edx,ecx
c002236a:	ee                   	out    dx,al
c002236b:	c3                   	ret    
c002236c:	83 e2 f0             	and    edx,0xfffffff0
c002236f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022372:	c3                   	ret    
c0022373:	90                   	nop

c0022374 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022374:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002237c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022380:	f6 c2 01             	test   dl,0x1
c0022383:	74 08                	je     c002238d <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022385:	83 e2 fc             	and    edx,0xfffffffc
c0022388:	01 ca                	add    edx,ecx
c002238a:	66 ef                	out    dx,ax
c002238c:	c3                   	ret    
c002238d:	83 e2 f0             	and    edx,0xfffffff0
c0022390:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022394:	c3                   	ret    
c0022395:	90                   	nop

c0022396 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002239a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002239e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223a2:	f6 c2 01             	test   dl,0x1
c00223a5:	74 07                	je     c00223ae <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00223a7:	83 e2 fc             	and    edx,0xfffffffc
c00223aa:	01 ca                	add    edx,ecx
c00223ac:	ef                   	out    dx,eax
c00223ad:	c3                   	ret    
c00223ae:	83 e2 f0             	and    edx,0xfffffff0
c00223b1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00223b4:	c3                   	ret    
c00223b5:	90                   	nop

c00223b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223b6:	55                   	push   ebp
c00223b7:	57                   	push   edi
c00223b8:	56                   	push   esi
c00223b9:	53                   	push   ebx
c00223ba:	83 ec 0c             	sub    esp,0xc
c00223bd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00223c1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00223c5:	89 f0                	mov    eax,esi
c00223c7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00223cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00223cf:	3c 07                	cmp    al,0x7
c00223d1:	76 10                	jbe    c00223e3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00223d3:	83 ec 0c             	sub    esp,0xc
c00223d6:	68 80 bd 02 c0       	push   0xc002bd80
c00223db:	e8 65 79 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00223e0:	83 c4 10             	add    esp,0x10
c00223e3:	80 fb 0f             	cmp    bl,0xf
c00223e6:	76 10                	jbe    c00223f8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00223e8:	83 ec 0c             	sub    esp,0xc
c00223eb:	68 b0 bd 02 c0       	push   0xc002bdb0
c00223f0:	e8 50 79 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00223f5:	83 c4 10             	add    esp,0x10
c00223f8:	8d 04 36             	lea    eax,[esi+esi*1]
c00223fb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022400:	83 c8 f0             	or     eax,0xfffffff0
c0022403:	ee                   	out    dx,al
c0022404:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022409:	89 e8                	mov    eax,ebp
c002240b:	ee                   	out    dx,al
c002240c:	83 c4 0c             	add    esp,0xc
c002240f:	89 d8                	mov    eax,ebx
c0022411:	66 81 e7 fc 00       	and    di,0xfc
c0022416:	5b                   	pop    ebx
c0022417:	c1 e0 08             	shl    eax,0x8
c002241a:	5e                   	pop    esi
c002241b:	09 f8                	or     eax,edi
c002241d:	5f                   	pop    edi
c002241e:	66 0d 00 c0          	or     ax,0xc000
c0022422:	5d                   	pop    ebp
c0022423:	c3                   	ret    

c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022424:	57                   	push   edi
c0022425:	56                   	push   esi
c0022426:	53                   	push   ebx
c0022427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002242b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002242f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022435:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022439:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002243d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022441:	83 ff 01             	cmp    edi,0x1
c0022444:	75 3e                	jne    c0022484 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022446:	89 de                	mov    esi,ebx
c0022448:	0f b6 c0             	movzx  eax,al
c002244b:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022451:	c1 e0 10             	shl    eax,0x10
c0022454:	0f b6 c9             	movzx  ecx,cl
c0022457:	09 f0                	or     eax,esi
c0022459:	c1 e1 08             	shl    ecx,0x8
c002245c:	0f b6 d2             	movzx  edx,dl
c002245f:	09 c8                	or     eax,ecx
c0022461:	c1 e2 0b             	shl    edx,0xb
c0022464:	09 d0                	or     eax,edx
c0022466:	ba f8 0c 00 00       	mov    edx,0xcf8
c002246b:	0d 00 00 00 80       	or     eax,0x80000000
c0022470:	ef                   	out    dx,eax
c0022471:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022476:	ed                   	in     eax,dx
c0022477:	83 e3 02             	and    ebx,0x2
c002247a:	0f b6 cb             	movzx  ecx,bl
c002247d:	c1 e1 03             	shl    ecx,0x3
c0022480:	d3 e8                	shr    eax,cl
c0022482:	eb 43                	jmp    c00224c7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022484:	83 ff 02             	cmp    edi,0x2
c0022487:	75 2c                	jne    c00224b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022489:	83 ec 0c             	sub    esp,0xc
c002248c:	0f b6 c9             	movzx  ecx,cl
c002248f:	0f b6 d2             	movzx  edx,dl
c0022492:	0f b6 fb             	movzx  edi,bl
c0022495:	0f b6 c0             	movzx  eax,al
c0022498:	57                   	push   edi
c0022499:	51                   	push   ecx
c002249a:	52                   	push   edx
c002249b:	50                   	push   eax
c002249c:	56                   	push   esi
c002249d:	e8 14 ff ff ff       	call   c00223b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224a2:	89 c2                	mov    edx,eax
c00224a4:	ed                   	in     eax,dx
c00224a5:	83 e3 02             	and    ebx,0x2
c00224a8:	83 c4 20             	add    esp,0x20
c00224ab:	0f b6 cb             	movzx  ecx,bl
c00224ae:	c1 e1 03             	shl    ecx,0x3
c00224b1:	d3 e8                	shr    eax,cl
c00224b3:	eb 12                	jmp    c00224c7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00224b5:	83 ec 0c             	sub    esp,0xc
c00224b8:	68 e0 bd 02 c0       	push   0xc002bde0
c00224bd:	e8 83 78 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00224c2:	83 c4 10             	add    esp,0x10
c00224c5:	31 c0                	xor    eax,eax
c00224c7:	5b                   	pop    ebx
c00224c8:	5e                   	pop    esi
c00224c9:	5f                   	pop    edi
c00224ca:	c3                   	ret    
c00224cb:	90                   	nop

c00224cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00224cc:	83 ec 18             	sub    esp,0x18
c00224cf:	6a 00                	push   0x0
c00224d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224d6:	50                   	push   eax
c00224d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224dc:	50                   	push   eax
c00224dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e2:	50                   	push   eax
c00224e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224e7:	e8 38 ff ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224ec:	83 c4 2c             	add    esp,0x2c
c00224ef:	c3                   	ret    

c00224f0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00224f0:	83 ec 18             	sub    esp,0x18
c00224f3:	6a 0e                	push   0xe
c00224f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224fa:	50                   	push   eax
c00224fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022500:	50                   	push   eax
c0022501:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022506:	50                   	push   eax
c0022507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002250b:	e8 14 ff ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022510:	83 c4 2c             	add    esp,0x2c
c0022513:	0f b6 c0             	movzx  eax,al
c0022516:	c3                   	ret    
c0022517:	90                   	nop

c0022518 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022518:	55                   	push   ebp
c0022519:	57                   	push   edi
c002251a:	56                   	push   esi
c002251b:	53                   	push   ebx
c002251c:	83 ec 18             	sub    esp,0x18
c002251f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022524:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022529:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002252e:	6a 0a                	push   0xa
c0022530:	56                   	push   esi
c0022531:	55                   	push   ebp
c0022532:	57                   	push   edi
c0022533:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022537:	e8 e8 fe ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002253c:	83 c4 14             	add    esp,0x14
c002253f:	89 c3                	mov    ebx,eax
c0022541:	6a 0a                	push   0xa
c0022543:	0f b6 db             	movzx  ebx,bl
c0022546:	56                   	push   esi
c0022547:	55                   	push   ebp
c0022548:	57                   	push   edi
c0022549:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002254d:	e8 d2 fe ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022552:	83 c4 2c             	add    esp,0x2c
c0022555:	25 00 ff 00 00       	and    eax,0xff00
c002255a:	09 d8                	or     eax,ebx
c002255c:	5b                   	pop    ebx
c002255d:	5e                   	pop    esi
c002255e:	5f                   	pop    edi
c002255f:	5d                   	pop    ebp
c0022560:	c3                   	ret    
c0022561:	90                   	nop

c0022562 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022562:	83 ec 18             	sub    esp,0x18
c0022565:	6a 08                	push   0x8
c0022567:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002256c:	50                   	push   eax
c002256d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022572:	50                   	push   eax
c0022573:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022578:	50                   	push   eax
c0022579:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002257d:	e8 a2 fe ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022582:	83 c4 2c             	add    esp,0x2c
c0022585:	0f b6 c4             	movzx  eax,ah
c0022588:	c3                   	ret    
c0022589:	90                   	nop

c002258a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002258a:	83 ec 18             	sub    esp,0x18
c002258d:	6a 08                	push   0x8
c002258f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022594:	50                   	push   eax
c0022595:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002259a:	50                   	push   eax
c002259b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225a0:	50                   	push   eax
c00225a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225a5:	e8 7a fe ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225aa:	83 c4 2c             	add    esp,0x2c
c00225ad:	c3                   	ret    

c00225ae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00225ae:	83 ec 18             	sub    esp,0x18
c00225b1:	6a 3c                	push   0x3c
c00225b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b8:	50                   	push   eax
c00225b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225be:	50                   	push   eax
c00225bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c4:	50                   	push   eax
c00225c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225c9:	e8 56 fe ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225ce:	83 c4 2c             	add    esp,0x2c
c00225d1:	c3                   	ret    

c00225d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00225d2:	83 ec 18             	sub    esp,0x18
c00225d5:	6a 18                	push   0x18
c00225d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225dc:	50                   	push   eax
c00225dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225e2:	50                   	push   eax
c00225e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225e8:	50                   	push   eax
c00225e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225ed:	e8 32 fe ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225f2:	83 c4 2c             	add    esp,0x2c
c00225f5:	0f b6 c4             	movzx  eax,ah
c00225f8:	c3                   	ret    
c00225f9:	90                   	nop

c00225fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225fa:	55                   	push   ebp
c00225fb:	57                   	push   edi
c00225fc:	56                   	push   esi
c00225fd:	53                   	push   ebx
c00225fe:	83 ec 28             	sub    esp,0x28
c0022601:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022605:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002260a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002260f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022614:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002261b:	8d 43 12             	lea    eax,[ebx+0x12]
c002261e:	83 c3 10             	add    ebx,0x10
c0022621:	0f b6 c0             	movzx  eax,al
c0022624:	0f b6 db             	movzx  ebx,bl
c0022627:	50                   	push   eax
c0022628:	51                   	push   ecx
c0022629:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002262d:	57                   	push   edi
c002262e:	55                   	push   ebp
c002262f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022633:	e8 ec fd ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022638:	83 c4 14             	add    esp,0x14
c002263b:	89 c6                	mov    esi,eax
c002263d:	53                   	push   ebx
c002263e:	c1 e6 10             	shl    esi,0x10
c0022641:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022645:	51                   	push   ecx
c0022646:	57                   	push   edi
c0022647:	55                   	push   ebp
c0022648:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002264c:	e8 d3 fd ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022651:	83 c4 3c             	add    esp,0x3c
c0022654:	0f b7 c0             	movzx  eax,ax
c0022657:	5b                   	pop    ebx
c0022658:	09 f0                	or     eax,esi
c002265a:	5e                   	pop    esi
c002265b:	5f                   	pop    edi
c002265c:	5d                   	pop    ebp
c002265d:	c3                   	ret    

c002265e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002265e:	55                   	push   ebp
c002265f:	57                   	push   edi
c0022660:	56                   	push   esi
c0022661:	53                   	push   ebx
c0022662:	83 ec 0c             	sub    esp,0xc
c0022665:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022669:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002266d:	89 f5                	mov    ebp,esi
c002266f:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022675:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022679:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002267d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022681:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022685:	83 f9 01             	cmp    ecx,0x1
c0022688:	75 5d                	jne    c00226e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002268a:	0f b6 c8             	movzx  ecx,al
c002268d:	0f b6 d2             	movzx  edx,dl
c0022690:	c1 e1 10             	shl    ecx,0x10
c0022693:	c1 e2 0b             	shl    edx,0xb
c0022696:	89 f0                	mov    eax,esi
c0022698:	25 fc 00 00 00       	and    eax,0xfc
c002269d:	09 c1                	or     ecx,eax
c002269f:	89 e8                	mov    eax,ebp
c00226a1:	0f b6 c0             	movzx  eax,al
c00226a4:	c1 e0 08             	shl    eax,0x8
c00226a7:	09 c1                	or     ecx,eax
c00226a9:	09 d1                	or     ecx,edx
c00226ab:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226b0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00226b6:	89 c8                	mov    eax,ecx
c00226b8:	ef                   	out    dx,eax
c00226b9:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226be:	ed                   	in     eax,dx
c00226bf:	0f b7 db             	movzx  ebx,bx
c00226c2:	83 e6 02             	and    esi,0x2
c00226c5:	74 0a                	je     c00226d1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00226c7:	0f b7 d0             	movzx  edx,ax
c00226ca:	c1 e3 10             	shl    ebx,0x10
c00226cd:	09 d3                	or     ebx,edx
c00226cf:	eb 05                	jmp    c00226d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00226d1:	66 31 c0             	xor    ax,ax
c00226d4:	09 c3                	or     ebx,eax
c00226d6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226db:	89 c8                	mov    eax,ecx
c00226dd:	ef                   	out    dx,eax
c00226de:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226e3:	89 d8                	mov    eax,ebx
c00226e5:	eb 41                	jmp    c0022728 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00226e7:	83 f9 02             	cmp    ecx,0x2
c00226ea:	75 45                	jne    c0022731 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00226ec:	83 ec 0c             	sub    esp,0xc
c00226ef:	0f b6 d2             	movzx  edx,dl
c00226f2:	89 f1                	mov    ecx,esi
c00226f4:	0f b6 c0             	movzx  eax,al
c00226f7:	0f b6 f1             	movzx  esi,cl
c00226fa:	89 e9                	mov    ecx,ebp
c00226fc:	56                   	push   esi
c00226fd:	0f b6 c9             	movzx  ecx,cl
c0022700:	51                   	push   ecx
c0022701:	52                   	push   edx
c0022702:	50                   	push   eax
c0022703:	57                   	push   edi
c0022704:	e8 ad fc ff ff       	call   c00223b6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022709:	89 c2                	mov    edx,eax
c002270b:	ed                   	in     eax,dx
c002270c:	83 c4 20             	add    esp,0x20
c002270f:	0f b7 db             	movzx  ebx,bx
c0022712:	f6 c2 02             	test   dl,0x2
c0022715:	74 0c                	je     c0022723 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022717:	0f b7 c8             	movzx  ecx,ax
c002271a:	89 d8                	mov    eax,ebx
c002271c:	c1 e0 10             	shl    eax,0x10
c002271f:	09 c8                	or     eax,ecx
c0022721:	eb 05                	jmp    c0022728 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022723:	66 31 c0             	xor    ax,ax
c0022726:	09 d8                	or     eax,ebx
c0022728:	ef                   	out    dx,eax
c0022729:	83 c4 0c             	add    esp,0xc
c002272c:	5b                   	pop    ebx
c002272d:	5e                   	pop    esi
c002272e:	5f                   	pop    edi
c002272f:	5d                   	pop    ebp
c0022730:	c3                   	ret    
c0022731:	c7 44 24 20 e0 bd 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bde0
c0022739:	83 c4 0c             	add    esp,0xc
c002273c:	5b                   	pop    ebx
c002273d:	5e                   	pop    esi
c002273e:	5f                   	pop    edi
c002273f:	5d                   	pop    ebp
c0022740:	e9 00 76 ff ff       	jmp    c0019d45 <Krnl::panic(char const*)>
c0022745:	90                   	nop

c0022746 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022746:	55                   	push   ebp
c0022747:	57                   	push   edi
c0022748:	56                   	push   esi
c0022749:	53                   	push   ebx
c002274a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022750:	80 3d 90 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a90,0x0
c0022757:	0f 85 84 00 00 00    	jne    c00227e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002275d:	83 ec 0c             	sub    esp,0xc
c0022760:	68 14 01 00 00       	push   0x114
c0022765:	e8 2f ce fe ff       	call   c000f599 <malloc>
c002276a:	83 c4 0c             	add    esp,0xc
c002276d:	89 c3                	mov    ebx,eax
c002276f:	ff 35 90 0c 03 c0    	push   DWORD PTR ds:0xc0030c90
c0022775:	68 e6 bd 02 c0       	push   0xc002bde6
c002277a:	50                   	push   eax
c002277b:	e8 b8 03 ff ff       	call   c0012b38 <File::File(char const*, Process*)>
c0022780:	5a                   	pop    edx
c0022781:	59                   	pop    ecx
c0022782:	6a 01                	push   0x1
c0022784:	53                   	push   ebx
c0022785:	e8 12 04 ff ff       	call   c0012b9c <File::open(FileOpenMode)>
c002278a:	83 c4 0c             	add    esp,0xc
c002278d:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022791:	50                   	push   eax
c0022792:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022796:	50                   	push   eax
c0022797:	53                   	push   ebx
c0022798:	e8 ab 06 ff ff       	call   c0012e48 <File::stat(unsigned long long*, bool*)>
c002279d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227a1:	40                   	inc    eax
c00227a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00227a5:	e8 ef cd fe ff       	call   c000f599 <malloc>
c00227aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227ae:	a3 8c 1a 03 c0       	mov    ds:0xc0031a8c,eax
c00227b3:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00227b7:	5e                   	pop    esi
c00227b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00227ba:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00227be:	51                   	push   ecx
c00227bf:	50                   	push   eax
c00227c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227c4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227c8:	53                   	push   ebx
c00227c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00227cc:	83 c4 14             	add    esp,0x14
c00227cf:	53                   	push   ebx
c00227d0:	e8 25 04 ff ff       	call   c0012bfa <File::close()>
c00227d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227d9:	83 c4 10             	add    esp,0x10
c00227dc:	a3 88 1a 03 c0       	mov    ds:0xc0031a88,eax
c00227e1:	a1 88 1a 03 c0       	mov    eax,ds:0xc0031a88
c00227e6:	8b 15 8c 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a8c
c00227ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00227ef:	31 ff                	xor    edi,edi
c00227f1:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00227f9:	31 f6                	xor    esi,esi
c00227fb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022800:	31 db                	xor    ebx,ebx
c0022802:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002280a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002280f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022816:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002281a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022821:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022825:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022828:	0f 8e 6b 01 00 00    	jle    c0022999 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002282e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022831:	d4 40                	aam    0x40
c0022833:	d5 39                	aad    0x39
c0022835:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022839:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002283d:	d4 40                	aam    0x40
c002283f:	d5 39                	aad    0x39
c0022841:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022845:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022849:	d4 40                	aam    0x40
c002284b:	d5 39                	aad    0x39
c002284d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022851:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022855:	d4 40                	aam    0x40
c0022857:	d5 39                	aad    0x39
c0022859:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002285d:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022861:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022865:	3c 56                	cmp    al,0x56
c0022867:	74 45                	je     c00228ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022869:	d4 40                	aam    0x40
c002286b:	d5 39                	aad    0x39
c002286d:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022870:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022874:	0f b6 c9             	movzx  ecx,cl
c0022877:	c1 e1 04             	shl    ecx,0x4
c002287a:	d4 40                	aam    0x40
c002287c:	d5 39                	aad    0x39
c002287e:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022881:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022885:	0f b6 db             	movzx  ebx,bl
c0022888:	09 cb                	or     ebx,ecx
c002288a:	c1 e3 04             	shl    ebx,0x4
c002288d:	d4 40                	aam    0x40
c002288f:	d5 39                	aad    0x39
c0022891:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022894:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022898:	0f b6 c9             	movzx  ecx,cl
c002289b:	09 cb                	or     ebx,ecx
c002289d:	c1 e3 04             	shl    ebx,0x4
c00228a0:	89 d9                	mov    ecx,ebx
c00228a2:	d4 40                	aam    0x40
c00228a4:	d5 39                	aad    0x39
c00228a6:	8d 58 d0             	lea    ebx,[eax-0x30]
c00228a9:	0f b6 db             	movzx  ebx,bl
c00228ac:	09 cb                	or     ebx,ecx
c00228ae:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00228b2:	80 f9 44             	cmp    cl,0x44
c00228b5:	74 47                	je     c00228fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00228b7:	88 c8                	mov    al,cl
c00228b9:	d4 40                	aam    0x40
c00228bb:	d5 39                	aad    0x39
c00228bd:	83 e8 30             	sub    eax,0x30
c00228c0:	0f b6 e8             	movzx  ebp,al
c00228c3:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00228c7:	c1 e5 04             	shl    ebp,0x4
c00228ca:	d4 40                	aam    0x40
c00228cc:	d5 39                	aad    0x39
c00228ce:	83 e8 30             	sub    eax,0x30
c00228d1:	0f b6 f0             	movzx  esi,al
c00228d4:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00228d8:	09 ee                	or     esi,ebp
c00228da:	c1 e6 04             	shl    esi,0x4
c00228dd:	d4 40                	aam    0x40
c00228df:	d5 39                	aad    0x39
c00228e1:	83 e8 30             	sub    eax,0x30
c00228e4:	0f b6 e8             	movzx  ebp,al
c00228e7:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00228eb:	09 ee                	or     esi,ebp
c00228ed:	c1 e6 04             	shl    esi,0x4
c00228f0:	89 f5                	mov    ebp,esi
c00228f2:	d4 40                	aam    0x40
c00228f4:	d5 39                	aad    0x39
c00228f6:	83 e8 30             	sub    eax,0x30
c00228f9:	0f b6 f0             	movzx  esi,al
c00228fc:	09 ee                	or     esi,ebp
c00228fe:	83 c7 10             	add    edi,0x10
c0022901:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022905:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022908:	3c 0a                	cmp    al,0xa
c002290a:	74 09                	je     c0022915 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c002290c:	45                   	inc    ebp
c002290d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022910:	75 16                	jne    c0022928 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022912:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022915:	3c 0a                	cmp    al,0xa
c0022917:	0f 94 c0             	sete   al
c002291a:	0f b6 c0             	movzx  eax,al
c002291d:	01 c7                	add    edi,eax
c002291f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022924:	75 0c                	jne    c0022932 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022926:	eb 15                	jmp    c002293d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022928:	47                   	inc    edi
c0022929:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002292c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022930:	eb d3                	jmp    c0022905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022932:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022937:	0f 85 e8 fe ff ff    	jne    c0022825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002293d:	80 f9 44             	cmp    cl,0x44
c0022940:	74 0b                	je     c002294d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022942:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022947:	0f 85 d8 fe ff ff    	jne    c0022825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002294d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022951:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022955:	c1 e1 04             	shl    ecx,0x4
c0022958:	83 e8 30             	sub    eax,0x30
c002295b:	09 c8                	or     eax,ecx
c002295d:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022961:	0f 85 be fe ff ff    	jne    c0022825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022967:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c002296b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002296f:	c1 e1 04             	shl    ecx,0x4
c0022972:	83 e8 30             	sub    eax,0x30
c0022975:	09 c8                	or     eax,ecx
c0022977:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c002297b:	0f 85 a4 fe ff ff    	jne    c0022825 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022981:	50                   	push   eax
c0022982:	50                   	push   eax
c0022983:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022987:	50                   	push   eax
c0022988:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c002298f:	e8 78 de fd ff       	call   c000080c <strcpy>
c0022994:	83 c4 10             	add    esp,0x10
c0022997:	eb 15                	jmp    c00229ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022999:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00229a0:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00229ab:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00229ae:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00229b5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00229bb:	5b                   	pop    ebx
c00229bc:	5e                   	pop    esi
c00229bd:	5f                   	pop    edi
c00229be:	5d                   	pop    ebp
c00229bf:	c3                   	ret    

c00229c0 <PCI::checkBus(unsigned char)>:
c00229c0:	56                   	push   esi
c00229c1:	53                   	push   ebx
c00229c2:	31 db                	xor    ebx,ebx
c00229c4:	51                   	push   ecx
c00229c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00229ca:	52                   	push   edx
c00229cb:	53                   	push   ebx
c00229cc:	43                   	inc    ebx
c00229cd:	56                   	push   esi
c00229ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229d2:	e8 37 03 00 00       	call   c0022d0e <PCI::checkDevice(unsigned char, unsigned char)>
c00229d7:	83 c4 10             	add    esp,0x10
c00229da:	83 fb 20             	cmp    ebx,0x20
c00229dd:	75 eb                	jne    c00229ca <PCI::checkBus(unsigned char)+0xa>
c00229df:	58                   	pop    eax
c00229e0:	5b                   	pop    ebx
c00229e1:	5e                   	pop    esi
c00229e2:	c3                   	ret    
c00229e3:	90                   	nop

c00229e4 <PCI::foundDevice(PCIDeviceInfo)>:
c00229e4:	55                   	push   ebp
c00229e5:	57                   	push   edi
c00229e6:	56                   	push   esi
c00229e7:	53                   	push   ebx
c00229e8:	83 ec 1c             	sub    esp,0x1c
c00229eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00229ef:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00229f5:	0f 84 52 01 00 00    	je     c0022b4d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00229fb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00229ff:	66 81 f9 06 04       	cmp    cx,0x406
c0022a04:	75 2c                	jne    c0022a32 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a06:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a0b:	50                   	push   eax
c0022a0c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a11:	50                   	push   eax
c0022a12:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a17:	50                   	push   eax
c0022a18:	56                   	push   esi
c0022a19:	e8 b4 fb ff ff       	call   c00225d2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022a1e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a22:	0f b6 c0             	movzx  eax,al
c0022a25:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022a29:	83 c4 2c             	add    esp,0x2c
c0022a2c:	5b                   	pop    ebx
c0022a2d:	5e                   	pop    esi
c0022a2e:	5f                   	pop    edi
c0022a2f:	5d                   	pop    ebp
c0022a30:	eb 8e                	jmp    c00229c0 <PCI::checkBus(unsigned char)>
c0022a32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a36:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022a3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a40:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022a44:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022a48:	88 d3                	mov    bl,dl
c0022a4a:	85 c0                	test   eax,eax
c0022a4c:	74 33                	je     c0022a81 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022a4e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022a51:	85 d2                	test   edx,edx
c0022a53:	74 28                	je     c0022a7d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a55:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022a5b:	31 ef                	xor    edi,ebp
c0022a5d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022a63:	75 18                	jne    c0022a7d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a65:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022a69:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022a6f:	75 0c                	jne    c0022a7d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a71:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022a77:	0f 84 d0 00 00 00    	je     c0022b4d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a7f:	eb c9                	jmp    c0022a4a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022a81:	66 81 f9 01 06       	cmp    cx,0x601
c0022a86:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022a8a:	75 19                	jne    c0022aa5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022a8c:	83 ec 0c             	sub    esp,0xc
c0022a8f:	68 64 01 00 00       	push   0x164
c0022a94:	e8 00 cb fe ff       	call   c000f599 <malloc>
c0022a99:	89 c5                	mov    ebp,eax
c0022a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a9e:	e8 85 0e 00 00       	call   c0023928 <SATABus::SATABus()>
c0022aa3:	eb 1e                	jmp    c0022ac3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022aa5:	66 81 f9 01 01       	cmp    cx,0x101
c0022aaa:	75 60                	jne    c0022b0c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022aac:	83 ec 0c             	sub    esp,0xc
c0022aaf:	68 70 02 00 00       	push   0x270
c0022ab4:	e8 e0 ca fe ff       	call   c000f599 <malloc>
c0022ab9:	89 c5                	mov    ebp,eax
c0022abb:	89 04 24             	mov    DWORD PTR [esp],eax
c0022abe:	e8 0f 03 00 00       	call   c0022dd2 <IDE::IDE()>
c0022ac3:	58                   	pop    eax
c0022ac4:	5a                   	pop    edx
c0022ac5:	55                   	push   ebp
c0022ac6:	56                   	push   esi
c0022ac7:	e8 46 0f ff ff       	call   c0013a12 <Device::addChild(Device*)>
c0022acc:	83 ec 1c             	sub    esp,0x1c
c0022acf:	b9 09 00 00 00       	mov    ecx,0x9
c0022ad4:	fc                   	cld    
c0022ad5:	89 e7                	mov    edi,esp
c0022ad7:	89 de                	mov    esi,ebx
c0022ad9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022adb:	55                   	push   ebp
c0022adc:	e8 43 0e ff ff       	call   c0013924 <Device::preOpenPCI(PCIDeviceInfo)>
c0022ae1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ae4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022ae8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022af0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022af8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b03:	83 c4 4c             	add    esp,0x4c
c0022b06:	5b                   	pop    ebx
c0022b07:	5e                   	pop    esi
c0022b08:	5f                   	pop    edi
c0022b09:	5d                   	pop    ebp
c0022b0a:	ff e0                	jmp    eax
c0022b0c:	83 ec 0c             	sub    esp,0xc
c0022b0f:	68 58 01 00 00       	push   0x158
c0022b14:	e8 80 ca fe ff       	call   c000f599 <malloc>
c0022b19:	89 c5                	mov    ebp,eax
c0022b1b:	58                   	pop    eax
c0022b1c:	5a                   	pop    edx
c0022b1d:	68 ff bd 02 c0       	push   0xc002bdff
c0022b22:	55                   	push   ebp
c0022b23:	e8 f4 11 ff ff       	call   c0013d1c <DriverlessDevice::DriverlessDevice(char const*)>
c0022b28:	59                   	pop    ecx
c0022b29:	5f                   	pop    edi
c0022b2a:	55                   	push   ebp
c0022b2b:	56                   	push   esi
c0022b2c:	e8 e1 0e ff ff       	call   c0013a12 <Device::addChild(Device*)>
c0022b31:	b9 09 00 00 00       	mov    ecx,0x9
c0022b36:	fc                   	cld    
c0022b37:	89 df                	mov    edi,ebx
c0022b39:	89 de                	mov    esi,ebx
c0022b3b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b3d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022b41:	83 c4 2c             	add    esp,0x2c
c0022b44:	5b                   	pop    ebx
c0022b45:	5e                   	pop    esi
c0022b46:	5f                   	pop    edi
c0022b47:	5d                   	pop    ebp
c0022b48:	e9 d7 0d ff ff       	jmp    c0013924 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b4d:	83 c4 1c             	add    esp,0x1c
c0022b50:	5b                   	pop    ebx
c0022b51:	5e                   	pop    esi
c0022b52:	5f                   	pop    edi
c0022b53:	5d                   	pop    ebp
c0022b54:	c3                   	ret    
c0022b55:	90                   	nop

c0022b56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022b56:	55                   	push   ebp
c0022b57:	57                   	push   edi
c0022b58:	56                   	push   esi
c0022b59:	53                   	push   ebx
c0022b5a:	83 ec 68             	sub    esp,0x68
c0022b5d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022b61:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022b68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b6c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022b73:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022b78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b7c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022b83:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022b88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b8c:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022b91:	6a 0c                	push   0xc
c0022b93:	57                   	push   edi
c0022b94:	53                   	push   ebx
c0022b95:	56                   	push   esi
c0022b96:	55                   	push   ebp
c0022b97:	e8 88 f8 ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b9c:	83 c4 20             	add    esp,0x20
c0022b9f:	57                   	push   edi
c0022ba0:	53                   	push   ebx
c0022ba1:	56                   	push   esi
c0022ba2:	55                   	push   ebp
c0022ba3:	e8 70 f9 ff ff       	call   c0022518 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022ba8:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022bad:	57                   	push   edi
c0022bae:	53                   	push   ebx
c0022baf:	56                   	push   esi
c0022bb0:	55                   	push   ebp
c0022bb1:	e8 f8 f9 ff ff       	call   c00225ae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022bb6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022bba:	83 c4 14             	add    esp,0x14
c0022bbd:	6a 3c                	push   0x3c
c0022bbf:	57                   	push   edi
c0022bc0:	53                   	push   ebx
c0022bc1:	56                   	push   esi
c0022bc2:	55                   	push   ebp
c0022bc3:	e8 5c f8 ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc8:	0f b6 c4             	movzx  eax,ah
c0022bcb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022bcf:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022bd3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022bd7:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0022bdc:	83 c4 20             	add    esp,0x20
c0022bdf:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022be5:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022bec:	74 7c                	je     c0022c6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022bee:	31 c0                	xor    eax,eax
c0022bf0:	8b 15 48 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d748
c0022bf6:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022bfc:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022c02:	7e 66                	jle    c0022c6a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022c04:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022c07:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c0e:	39 cb                	cmp    ebx,ecx
c0022c10:	75 55                	jne    c0022c67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c12:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022c19:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022c1d:	75 48                	jne    c0022c67 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022c23:	83 ec 0c             	sub    esp,0xc
c0022c26:	68 19 be 02 c0       	push   0xc002be19
c0022c2b:	e8 a9 f9 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0022c30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c34:	8b 15 48 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d748
c0022c3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022c3e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c44:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022c4c:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022c50:	52                   	push   edx
c0022c51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c55:	53                   	push   ebx
c0022c56:	68 3e be 02 c0       	push   0xc002be3e
c0022c5b:	e8 79 f9 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0022c60:	83 c4 20             	add    esp,0x20
c0022c63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c67:	40                   	inc    eax
c0022c68:	eb 86                	jmp    c0022bf0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022c6a:	31 d2                	xor    edx,edx
c0022c6c:	83 ec 0c             	sub    esp,0xc
c0022c6f:	57                   	push   edi
c0022c70:	53                   	push   ebx
c0022c71:	56                   	push   esi
c0022c72:	52                   	push   edx
c0022c73:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022c77:	55                   	push   ebp
c0022c78:	e8 7d f9 ff ff       	call   c00225fa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022c81:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022c85:	42                   	inc    edx
c0022c86:	83 c4 20             	add    esp,0x20
c0022c89:	83 fa 06             	cmp    edx,0x6
c0022c8c:	75 de                	jne    c0022c6c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022c8e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022c93:	83 ec 0c             	sub    esp,0xc
c0022c96:	86 e0                	xchg   al,ah
c0022c98:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022c9d:	6a 02                	push   0x2
c0022c9f:	57                   	push   edi
c0022ca0:	53                   	push   ebx
c0022ca1:	56                   	push   esi
c0022ca2:	55                   	push   ebp
c0022ca3:	e8 7c f7 ff ff       	call   c0022424 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ca8:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022cad:	83 c4 20             	add    esp,0x20
c0022cb0:	57                   	push   edi
c0022cb1:	53                   	push   ebx
c0022cb2:	56                   	push   esi
c0022cb3:	55                   	push   ebp
c0022cb4:	e8 a9 f8 ff ff       	call   c0022562 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022cb9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022cbd:	57                   	push   edi
c0022cbe:	53                   	push   ebx
c0022cbf:	56                   	push   esi
c0022cc0:	55                   	push   ebp
c0022cc1:	e8 06 f8 ff ff       	call   c00224cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cc6:	b9 09 00 00 00       	mov    ecx,0x9
c0022ccb:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022cd0:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022cd4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022cd8:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022cdc:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022ce0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ce4:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022ce8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022cec:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	fc                   	cld    
c0022cf4:	89 e7                	mov    edi,esp
c0022cf6:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022cfa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cfc:	55                   	push   ebp
c0022cfd:	e8 e2 fc ff ff       	call   c00229e4 <PCI::foundDevice(PCIDeviceInfo)>
c0022d02:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d08:	5b                   	pop    ebx
c0022d09:	5e                   	pop    esi
c0022d0a:	5f                   	pop    edi
c0022d0b:	5d                   	pop    ebp
c0022d0c:	c3                   	ret    
c0022d0d:	90                   	nop

c0022d0e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d0e:	55                   	push   ebp
c0022d0f:	57                   	push   edi
c0022d10:	56                   	push   esi
c0022d11:	53                   	push   ebx
c0022d12:	83 ec 0c             	sub    esp,0xc
c0022d15:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d19:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d1e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d23:	6a 00                	push   0x0
c0022d25:	56                   	push   esi
c0022d26:	57                   	push   edi
c0022d27:	55                   	push   ebp
c0022d28:	e8 9f f7 ff ff       	call   c00224cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d2d:	6a 00                	push   0x0
c0022d2f:	56                   	push   esi
c0022d30:	57                   	push   edi
c0022d31:	55                   	push   ebp
c0022d32:	e8 1f fe ff ff       	call   c0022b56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d37:	83 c4 20             	add    esp,0x20
c0022d3a:	6a 00                	push   0x0
c0022d3c:	56                   	push   esi
c0022d3d:	57                   	push   edi
c0022d3e:	55                   	push   ebp
c0022d3f:	e8 ac f7 ff ff       	call   c00224f0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d44:	83 c4 10             	add    esp,0x10
c0022d47:	84 c0                	test   al,al
c0022d49:	79 27                	jns    c0022d72 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022d4b:	bb 01 00 00 00       	mov    ebx,0x1
c0022d50:	53                   	push   ebx
c0022d51:	56                   	push   esi
c0022d52:	57                   	push   edi
c0022d53:	55                   	push   ebp
c0022d54:	e8 73 f7 ff ff       	call   c00224cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d59:	83 c4 10             	add    esp,0x10
c0022d5c:	66 40                	inc    ax
c0022d5e:	74 0c                	je     c0022d6c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022d60:	53                   	push   ebx
c0022d61:	56                   	push   esi
c0022d62:	57                   	push   edi
c0022d63:	55                   	push   ebp
c0022d64:	e8 ed fd ff ff       	call   c0022b56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d69:	83 c4 10             	add    esp,0x10
c0022d6c:	43                   	inc    ebx
c0022d6d:	83 fb 08             	cmp    ebx,0x8
c0022d70:	75 de                	jne    c0022d50 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022d72:	83 c4 0c             	add    esp,0xc
c0022d75:	5b                   	pop    ebx
c0022d76:	5e                   	pop    esi
c0022d77:	5f                   	pop    edi
c0022d78:	5d                   	pop    ebp
c0022d79:	c3                   	ret    

c0022d7a <PCI::detect()>:
c0022d7a:	56                   	push   esi
c0022d7b:	53                   	push   ebx
c0022d7c:	53                   	push   ebx
c0022d7d:	31 db                	xor    ebx,ebx
c0022d7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022d83:	6a 00                	push   0x0
c0022d85:	6a 00                	push   0x0
c0022d87:	6a 00                	push   0x0
c0022d89:	56                   	push   esi
c0022d8a:	e8 61 f7 ff ff       	call   c00224f0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d8f:	83 c4 10             	add    esp,0x10
c0022d92:	a8 80                	test   al,0x80
c0022d94:	75 21                	jne    c0022db7 <PCI::detect()+0x3d>
c0022d96:	51                   	push   ecx
c0022d97:	51                   	push   ecx
c0022d98:	6a 00                	push   0x0
c0022d9a:	56                   	push   esi
c0022d9b:	e8 20 fc ff ff       	call   c00229c0 <PCI::checkBus(unsigned char)>
c0022da0:	83 c4 10             	add    esp,0x10
c0022da3:	eb 24                	jmp    c0022dc9 <PCI::detect()+0x4f>
c0022da5:	52                   	push   edx
c0022da6:	52                   	push   edx
c0022da7:	53                   	push   ebx
c0022da8:	43                   	inc    ebx
c0022da9:	56                   	push   esi
c0022daa:	e8 11 fc ff ff       	call   c00229c0 <PCI::checkBus(unsigned char)>
c0022daf:	83 c4 10             	add    esp,0x10
c0022db2:	83 fb 08             	cmp    ebx,0x8
c0022db5:	74 12                	je     c0022dc9 <PCI::detect()+0x4f>
c0022db7:	53                   	push   ebx
c0022db8:	6a 00                	push   0x0
c0022dba:	6a 00                	push   0x0
c0022dbc:	56                   	push   esi
c0022dbd:	e8 0a f7 ff ff       	call   c00224cc <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022dc2:	83 c4 10             	add    esp,0x10
c0022dc5:	66 40                	inc    ax
c0022dc7:	74 dc                	je     c0022da5 <PCI::detect()+0x2b>
c0022dc9:	58                   	pop    eax
c0022dca:	5b                   	pop    ebx
c0022dcb:	5e                   	pop    esi
c0022dcc:	c3                   	ret    
c0022dcd:	90                   	nop

c0022dce <IDE::close(int, int, void*)>:
c0022dce:	83 c8 ff             	or     eax,0xffffffff
c0022dd1:	c3                   	ret    

c0022dd2 <IDE::IDE()>:
c0022dd2:	83 ec 0c             	sub    esp,0xc
c0022dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd9:	83 ec 08             	sub    esp,0x8
c0022ddc:	68 88 be 02 c0       	push   0xc002be88
c0022de1:	50                   	push   eax
c0022de2:	e8 d9 0f ff ff       	call   c0013dc0 <HardDiskController::HardDiskController(char const*)>
c0022de7:	83 c4 10             	add    esp,0x10
c0022dea:	ba 18 bf 02 c0       	mov    edx,0xc002bf18
c0022def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df3:	89 10                	mov    DWORD PTR [eax],edx
c0022df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e00:	90                   	nop
c0022e01:	83 c4 0c             	add    esp,0xc
c0022e04:	c3                   	ret    
c0022e05:	90                   	nop

c0022e06 <IDE::prepareInterrupt(unsigned char)>:
c0022e06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e0f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e17:	c3                   	ret    

c0022e18 <selectDrive(unsigned char, unsigned char)>:
c0022e18:	c3                   	ret    
c0022e19:	90                   	nop

c0022e1a <IDE::getBase(unsigned char)>:
c0022e1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e23:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022e2b:	c3                   	ret    

c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022e2c:	55                   	push   ebp
c0022e2d:	57                   	push   edi
c0022e2e:	56                   	push   esi
c0022e2f:	53                   	push   ebx
c0022e30:	83 ec 1c             	sub    esp,0x1c
c0022e33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022e3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e46:	80 f9 03             	cmp    cl,0x3
c0022e49:	77 51                	ja     c0022e9c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e4f:	0f b6 f2             	movzx  esi,dl
c0022e52:	0f b6 db             	movzx  ebx,bl
c0022e55:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e58:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022e5c:	83 ca 80             	or     edx,0xffffff80
c0022e5f:	0f b6 d2             	movzx  edx,dl
c0022e62:	52                   	push   edx
c0022e63:	6a 0c                	push   0xc
c0022e65:	56                   	push   esi
c0022e66:	57                   	push   edi
c0022e67:	e8 c0 ff ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e6c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022e71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e75:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022e79:	ee                   	out    dx,al
c0022e7a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022e7f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022e83:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022e87:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022e8b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022e93:	83 c4 2c             	add    esp,0x2c
c0022e96:	5b                   	pop    ebx
c0022e97:	5e                   	pop    esi
c0022e98:	5f                   	pop    edi
c0022e99:	5d                   	pop    ebp
c0022e9a:	eb 90                	jmp    c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e9c:	80 fb 07             	cmp    bl,0x7
c0022e9f:	77 12                	ja     c0022eb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022ea1:	0f b6 d2             	movzx  edx,dl
c0022ea4:	0f b6 db             	movzx  ebx,bl
c0022ea7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022eaf:	89 da                	mov    edx,ebx
c0022eb1:	eb 2f                	jmp    c0022ee2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022eb3:	80 fb 0d             	cmp    bl,0xd
c0022eb6:	77 13                	ja     c0022ecb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022eb8:	0f b6 d2             	movzx  edx,dl
c0022ebb:	0f b6 db             	movzx  ebx,bl
c0022ebe:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022ec5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022ec9:	eb 17                	jmp    c0022ee2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ecb:	80 fb 15             	cmp    bl,0x15
c0022ece:	77 13                	ja     c0022ee3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ed0:	0f b6 d2             	movzx  edx,dl
c0022ed3:	0f b6 db             	movzx  ebx,bl
c0022ed6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022ede:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022ee2:	ee                   	out    dx,al
c0022ee3:	83 c4 1c             	add    esp,0x1c
c0022ee6:	5b                   	pop    ebx
c0022ee7:	5e                   	pop    esi
c0022ee8:	5f                   	pop    edi
c0022ee9:	5d                   	pop    ebp
c0022eea:	c3                   	ret    
c0022eeb:	90                   	nop

c0022eec <IDE::read(unsigned char, unsigned char)>:
c0022eec:	55                   	push   ebp
c0022eed:	57                   	push   edi
c0022eee:	56                   	push   esi
c0022eef:	53                   	push   ebx
c0022ef0:	83 ec 1c             	sub    esp,0x1c
c0022ef3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ef7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022efb:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022efe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f02:	3c 03                	cmp    al,0x3
c0022f04:	77 43                	ja     c0022f49 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f06:	0f b6 f2             	movzx  esi,dl
c0022f09:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f0c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f10:	83 c8 80             	or     eax,0xffffff80
c0022f13:	0f b6 c0             	movzx  eax,al
c0022f16:	50                   	push   eax
c0022f17:	6a 0c                	push   0xc
c0022f19:	56                   	push   esi
c0022f1a:	57                   	push   edi
c0022f1b:	e8 0c ff ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f20:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022f25:	0f b6 c3             	movzx  eax,bl
c0022f28:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022f2c:	ec                   	in     al,dx
c0022f2d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022f31:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022f36:	52                   	push   edx
c0022f37:	6a 0c                	push   0xc
c0022f39:	56                   	push   esi
c0022f3a:	57                   	push   edi
c0022f3b:	e8 ec fe ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f40:	83 c4 20             	add    esp,0x20
c0022f43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f47:	eb 49                	jmp    c0022f92 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f49:	80 fb 07             	cmp    bl,0x7
c0022f4c:	77 12                	ja     c0022f60 <IDE::read(unsigned char, unsigned char)+0x74>
c0022f4e:	0f b6 d2             	movzx  edx,dl
c0022f51:	0f b6 c3             	movzx  eax,bl
c0022f54:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022f5c:	89 c2                	mov    edx,eax
c0022f5e:	eb 31                	jmp    c0022f91 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f60:	80 fb 0d             	cmp    bl,0xd
c0022f63:	77 13                	ja     c0022f78 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022f65:	0f b6 d2             	movzx  edx,dl
c0022f68:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022f6f:	0f b6 d3             	movzx  edx,bl
c0022f72:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022f76:	eb 19                	jmp    c0022f91 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f78:	31 c0                	xor    eax,eax
c0022f7a:	80 fb 15             	cmp    bl,0x15
c0022f7d:	77 13                	ja     c0022f92 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f7f:	0f b6 d2             	movzx  edx,dl
c0022f82:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022f8a:	0f b6 d3             	movzx  edx,bl
c0022f8d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022f91:	ec                   	in     al,dx
c0022f92:	83 c4 1c             	add    esp,0x1c
c0022f95:	5b                   	pop    ebx
c0022f96:	5e                   	pop    esi
c0022f97:	5f                   	pop    edi
c0022f98:	5d                   	pop    ebp
c0022f99:	c3                   	ret    

c0022f9a <IDE::waitInterrupt(unsigned char)>:
c0022f9a:	55                   	push   ebp
c0022f9b:	57                   	push   edi
c0022f9c:	56                   	push   esi
c0022f9d:	53                   	push   ebx
c0022f9e:	31 db                	xor    ebx,ebx
c0022fa0:	83 ec 0c             	sub    esp,0xc
c0022fa3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022fa7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022fac:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022fb4:	89 e8                	mov    eax,ebp
c0022fb6:	84 c0                	test   al,al
c0022fb8:	75 34                	jne    c0022fee <IDE::waitInterrupt(unsigned char)+0x54>
c0022fba:	52                   	push   edx
c0022fbb:	6a 0c                	push   0xc
c0022fbd:	56                   	push   esi
c0022fbe:	57                   	push   edi
c0022fbf:	e8 28 ff ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0022fc4:	83 c4 10             	add    esp,0x10
c0022fc7:	a8 01                	test   al,0x1
c0022fc9:	75 2b                	jne    c0022ff6 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022fcb:	f6 c3 04             	test   bl,0x4
c0022fce:	75 16                	jne    c0022fe6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022fd0:	83 fb 32             	cmp    ebx,0x32
c0022fd3:	7e 11                	jle    c0022fe6 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022fd5:	50                   	push   eax
c0022fd6:	50                   	push   eax
c0022fd7:	6a 00                	push   0x0
c0022fd9:	68 80 96 98 00       	push   0x989680
c0022fde:	e8 c6 ab ff ff       	call   c001dba9 <nanoSleep(unsigned long long)>
c0022fe3:	83 c4 10             	add    esp,0x10
c0022fe6:	83 fb 3c             	cmp    ebx,0x3c
c0022fe9:	74 0b                	je     c0022ff6 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022feb:	43                   	inc    ebx
c0022fec:	eb be                	jmp    c0022fac <IDE::waitInterrupt(unsigned char)+0x12>
c0022fee:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022ff6:	83 c4 0c             	add    esp,0xc
c0022ff9:	89 e8                	mov    eax,ebp
c0022ffb:	5b                   	pop    ebx
c0022ffc:	5e                   	pop    esi
c0022ffd:	5f                   	pop    edi
c0022ffe:	5d                   	pop    ebp
c0022fff:	c3                   	ret    

c0023000 <ideChannel0IRQHandler(regs*, void*)>:
c0023000:	83 ec 10             	sub    esp,0x10
c0023003:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023007:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002300e:	6a 07                	push   0x7
c0023010:	6a 00                	push   0x0
c0023012:	50                   	push   eax
c0023013:	e8 d4 fe ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023018:	83 c4 1c             	add    esp,0x1c
c002301b:	c3                   	ret    

c002301c <ideChannel1IRQHandler(regs*, void*)>:
c002301c:	83 ec 10             	sub    esp,0x10
c002301f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023023:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002302a:	6a 07                	push   0x7
c002302c:	6a 01                	push   0x1
c002302e:	50                   	push   eax
c002302f:	e8 b8 fe ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023034:	83 c4 1c             	add    esp,0x1c
c0023037:	c3                   	ret    

c0023038 <IDE::enableIRQs(unsigned char, bool)>:
c0023038:	57                   	push   edi
c0023039:	56                   	push   esi
c002303a:	be 04 00 00 00       	mov    esi,0x4
c002303f:	53                   	push   ebx
c0023040:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023045:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023049:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002304e:	0f 94 c0             	sete   al
c0023051:	d1 e0                	shl    eax,1
c0023053:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002305a:	0f b6 c0             	movzx  eax,al
c002305d:	50                   	push   eax
c002305e:	6a 0c                	push   0xc
c0023060:	57                   	push   edi
c0023061:	53                   	push   ebx
c0023062:	e8 c5 fd ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023067:	83 c4 10             	add    esp,0x10
c002306a:	50                   	push   eax
c002306b:	6a 0c                	push   0xc
c002306d:	57                   	push   edi
c002306e:	53                   	push   ebx
c002306f:	e8 78 fe ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023074:	83 c4 10             	add    esp,0x10
c0023077:	4e                   	dec    esi
c0023078:	75 f0                	jne    c002306a <IDE::enableIRQs(unsigned char, bool)+0x32>
c002307a:	5b                   	pop    ebx
c002307b:	5e                   	pop    esi
c002307c:	5f                   	pop    edi
c002307d:	c3                   	ret    

c002307e <IDE::open(int, int, void*)>:
c002307e:	55                   	push   ebp
c002307f:	57                   	push   edi
c0023080:	56                   	push   esi
c0023081:	53                   	push   ebx
c0023082:	83 ec 1c             	sub    esp,0x1c
c0023085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023089:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023092:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002309b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00230a2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00230a9:	0f 85 b0 02 00 00    	jne    c002335f <IDE::open(int, int, void*)+0x2e1>
c00230af:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00230b5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00230b9:	83 e0 7f             	and    eax,0x7f
c00230bc:	3c 05                	cmp    al,0x5
c00230be:	74 04                	je     c00230c4 <IDE::open(int, int, void*)+0x46>
c00230c0:	3c 0f                	cmp    al,0xf
c00230c2:	75 32                	jne    c00230f6 <IDE::open(int, int, void*)+0x78>
c00230c4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00230ca:	83 e0 fc             	and    eax,0xfffffffc
c00230cd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00230d4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00230da:	83 e0 fc             	and    eax,0xfffffffc
c00230dd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00230e4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00230ea:	83 e0 fc             	and    eax,0xfffffffc
c00230ed:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00230f4:	eb 14                	jmp    c002310a <IDE::open(int, int, void*)+0x8c>
c00230f6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023100:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002310a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023111:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023118:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002311c:	89 c6                	mov    esi,eax
c002311e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023123:	c1 e6 10             	shl    esi,0x10
c0023126:	89 e8                	mov    eax,ebp
c0023128:	89 fa                	mov    edx,edi
c002312a:	c1 e0 0b             	shl    eax,0xb
c002312d:	09 f0                	or     eax,esi
c002312f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023136:	c1 e6 08             	shl    esi,0x8
c0023139:	09 c6                	or     esi,eax
c002313b:	89 f0                	mov    eax,esi
c002313d:	0d 08 00 00 80       	or     eax,0x80000008
c0023142:	ef                   	out    dx,eax
c0023143:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023148:	89 ca                	mov    edx,ecx
c002314a:	ed                   	in     eax,dx
c002314b:	c1 e8 10             	shr    eax,0x10
c002314e:	3d ff ff 00 00       	cmp    eax,0xffff
c0023153:	0f 84 f5 00 00 00    	je     c002324e <IDE::open(int, int, void*)+0x1d0>
c0023159:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002315f:	89 fa                	mov    edx,edi
c0023161:	89 f0                	mov    eax,esi
c0023163:	ef                   	out    dx,eax
c0023164:	b0 fe                	mov    al,0xfe
c0023166:	89 ca                	mov    edx,ecx
c0023168:	ee                   	out    dx,al
c0023169:	89 f0                	mov    eax,esi
c002316b:	89 fa                	mov    edx,edi
c002316d:	ef                   	out    dx,eax
c002316e:	89 ca                	mov    edx,ecx
c0023170:	ed                   	in     eax,dx
c0023171:	3c fe                	cmp    al,0xfe
c0023173:	0f 85 a9 00 00 00    	jne    c0023222 <IDE::open(int, int, void*)+0x1a4>
c0023179:	8b 15 48 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d748
c002317f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023186:	74 33                	je     c00231bb <IDE::open(int, int, void*)+0x13d>
c0023188:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002318e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023192:	40                   	inc    eax
c0023193:	83 ec 0c             	sub    esp,0xc
c0023196:	0f b6 c0             	movzx  eax,al
c0023199:	50                   	push   eax
c002319a:	55                   	push   ebp
c002319b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002319f:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00231a5:	51                   	push   ecx
c00231a6:	e8 53 48 ff ff       	call   c00179fe <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00231ab:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00231b0:	83 c4 1c             	add    esp,0x1c
c00231b3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00231b9:	eb 0a                	jmp    c00231c5 <IDE::open(int, int, void*)+0x147>
c00231bb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00231c5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00231cc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00231d3:	c1 e1 10             	shl    ecx,0x10
c00231d6:	c1 e0 08             	shl    eax,0x8
c00231d9:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231de:	09 c1                	or     ecx,eax
c00231e0:	89 fa                	mov    edx,edi
c00231e2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00231e9:	c1 e0 0b             	shl    eax,0xb
c00231ec:	09 c1                	or     ecx,eax
c00231ee:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00231f4:	89 c8                	mov    eax,ecx
c00231f6:	ef                   	out    dx,eax
c00231f7:	be fc 0c 00 00       	mov    esi,0xcfc
c00231fc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023202:	89 f2                	mov    edx,esi
c0023204:	ee                   	out    dx,al
c0023205:	89 c8                	mov    eax,ecx
c0023207:	89 fa                	mov    edx,edi
c0023209:	ef                   	out    dx,eax
c002320a:	89 f2                	mov    edx,esi
c002320c:	ed                   	in     eax,dx
c002320d:	0f b6 c0             	movzx  eax,al
c0023210:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023216:	74 46                	je     c002325e <IDE::open(int, int, void*)+0x1e0>
c0023218:	83 ec 0c             	sub    esp,0xc
c002321b:	68 a0 be 02 c0       	push   0xc002bea0
c0023220:	eb 34                	jmp    c0023256 <IDE::open(int, int, void*)+0x1d8>
c0023222:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002322b:	75 17                	jne    c0023244 <IDE::open(int, int, void*)+0x1c6>
c002322d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023232:	74 07                	je     c002323b <IDE::open(int, int, void*)+0x1bd>
c0023234:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023239:	75 09                	jne    c0023244 <IDE::open(int, int, void*)+0x1c6>
c002323b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023242:	eb 1a                	jmp    c002325e <IDE::open(int, int, void*)+0x1e0>
c0023244:	83 ec 0c             	sub    esp,0xc
c0023247:	68 a8 be 02 c0       	push   0xc002bea8
c002324c:	eb 08                	jmp    c0023256 <IDE::open(int, int, void*)+0x1d8>
c002324e:	83 ec 0c             	sub    esp,0xc
c0023251:	68 d9 be 02 c0       	push   0xc002bed9
c0023256:	e8 ea 6a ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c002325b:	83 c4 10             	add    esp,0x10
c002325e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023265:	79 1a                	jns    c0023281 <IDE::open(int, int, void*)+0x203>
c0023267:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002326d:	83 e0 fc             	and    eax,0xfffffffc
c0023270:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023277:	83 c0 08             	add    eax,0x8
c002327a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023281:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023287:	89 c2                	mov    edx,eax
c0023289:	83 e2 0f             	and    edx,0xf
c002328c:	66 83 fa 08          	cmp    dx,0x8
c0023290:	75 0a                	jne    c002329c <IDE::open(int, int, void*)+0x21e>
c0023292:	83 e8 02             	sub    eax,0x2
c0023295:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002329c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00232a2:	89 c2                	mov    edx,eax
c00232a4:	83 e2 0f             	and    edx,0xf
c00232a7:	66 83 fa 08          	cmp    dx,0x8
c00232ab:	75 0a                	jne    c00232b7 <IDE::open(int, int, void*)+0x239>
c00232ad:	83 e8 02             	sub    eax,0x2
c00232b0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232b7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00232be:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00232c5:	89 d0                	mov    eax,edx
c00232c7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232ca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232ce:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00232d2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00232d5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00232da:	0f b6 c9             	movzx  ecx,cl
c00232dd:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00232e4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00232e7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00232eb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00232ef:	8d 50 02             	lea    edx,[eax+0x2]
c00232f2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00232f7:	0f b6 d2             	movzx  edx,dl
c00232fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023300:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023303:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023307:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002330b:	8d 48 03             	lea    ecx,[eax+0x3]
c002330e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023313:	0f b6 c9             	movzx  ecx,cl
c0023316:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002331c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002331f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023323:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023327:	8d 50 04             	lea    edx,[eax+0x4]
c002332a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023330:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023335:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002333c:	66 85 f6             	test   si,si
c002333f:	74 5b                	je     c002339c <IDE::open(int, int, void*)+0x31e>
c0023341:	0f b6 d2             	movzx  edx,dl
c0023344:	83 c0 05             	add    eax,0x5
c0023347:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002334a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002334e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023352:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023358:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002335d:	eb 3d                	jmp    c002339c <IDE::open(int, int, void*)+0x31e>
c002335f:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023365:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002336c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023373:	66 05 06 02          	add    ax,0x206
c0023377:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002337e:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023385:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002338c:	66 05 06 02          	add    ax,0x206
c0023390:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023397:	e9 e5 fe ff ff       	jmp    c0023281 <IDE::open(int, int, void*)+0x203>
c002339c:	50                   	push   eax
c002339d:	50                   	push   eax
c002339e:	6a 00                	push   0x0
c00233a0:	53                   	push   ebx
c00233a1:	e8 60 fa ff ff       	call   c0022e06 <IDE::prepareInterrupt(unsigned char)>
c00233a6:	5a                   	pop    edx
c00233a7:	59                   	pop    ecx
c00233a8:	6a 01                	push   0x1
c00233aa:	53                   	push   ebx
c00233ab:	e8 56 fa ff ff       	call   c0022e06 <IDE::prepareInterrupt(unsigned char)>
c00233b0:	83 c4 0c             	add    esp,0xc
c00233b3:	6a 00                	push   0x0
c00233b5:	6a 00                	push   0x0
c00233b7:	53                   	push   ebx
c00233b8:	e8 7b fc ff ff       	call   c0023038 <IDE::enableIRQs(unsigned char, bool)>
c00233bd:	83 c4 0c             	add    esp,0xc
c00233c0:	6a 00                	push   0x0
c00233c2:	6a 01                	push   0x1
c00233c4:	53                   	push   ebx
c00233c5:	e8 6e fc ff ff       	call   c0023038 <IDE::enableIRQs(unsigned char, bool)>
c00233ca:	83 c4 10             	add    esp,0x10
c00233cd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00233d4:	74 34                	je     c002340a <IDE::open(int, int, void*)+0x38c>
c00233d6:	83 ec 0c             	sub    esp,0xc
c00233d9:	53                   	push   ebx
c00233da:	6a 01                	push   0x1
c00233dc:	68 00 30 02 c0       	push   0xc0023000
c00233e1:	6a 0e                	push   0xe
c00233e3:	53                   	push   ebx
c00233e4:	e8 a1 05 ff ff       	call   c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00233e9:	83 c4 14             	add    esp,0x14
c00233ec:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233f2:	53                   	push   ebx
c00233f3:	6a 01                	push   0x1
c00233f5:	68 1c 30 02 c0       	push   0xc002301c
c00233fa:	6a 0f                	push   0xf
c00233fc:	53                   	push   ebx
c00233fd:	e8 88 05 ff ff       	call   c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023402:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023408:	eb 38                	jmp    c0023442 <IDE::open(int, int, void*)+0x3c4>
c002340a:	83 ec 0c             	sub    esp,0xc
c002340d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023417:	53                   	push   ebx
c0023418:	6a 00                	push   0x0
c002341a:	68 00 30 02 c0       	push   0xc0023000
c002341f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023425:	53                   	push   ebx
c0023426:	e8 5f 05 ff ff       	call   c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002342b:	83 c4 14             	add    esp,0x14
c002342e:	53                   	push   ebx
c002342f:	6a 00                	push   0x0
c0023431:	68 1c 30 02 c0       	push   0xc002301c
c0023436:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002343c:	53                   	push   ebx
c002343d:	e8 48 05 ff ff       	call   c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023442:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023444:	83 c4 20             	add    esp,0x20
c0023447:	83 ec 0c             	sub    esp,0xc
c002344a:	53                   	push   ebx
c002344b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002344e:	83 c4 0c             	add    esp,0xc
c0023451:	6a 07                	push   0x7
c0023453:	6a 00                	push   0x0
c0023455:	53                   	push   ebx
c0023456:	e8 91 fa ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c002345b:	83 c4 0c             	add    esp,0xc
c002345e:	6a 07                	push   0x7
c0023460:	6a 01                	push   0x1
c0023462:	53                   	push   ebx
c0023463:	e8 84 fa ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023468:	83 c4 0c             	add    esp,0xc
c002346b:	6a 01                	push   0x1
c002346d:	6a 00                	push   0x0
c002346f:	53                   	push   ebx
c0023470:	e8 c3 fb ff ff       	call   c0023038 <IDE::enableIRQs(unsigned char, bool)>
c0023475:	83 c4 0c             	add    esp,0xc
c0023478:	6a 01                	push   0x1
c002347a:	6a 01                	push   0x1
c002347c:	53                   	push   ebx
c002347d:	e8 b6 fb ff ff       	call   c0023038 <IDE::enableIRQs(unsigned char, bool)>
c0023482:	83 c4 2c             	add    esp,0x2c
c0023485:	31 c0                	xor    eax,eax
c0023487:	5b                   	pop    ebx
c0023488:	5e                   	pop    esi
c0023489:	5f                   	pop    edi
c002348a:	5d                   	pop    ebp
c002348b:	c3                   	ret    

c002348c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002348c:	55                   	push   ebp
c002348d:	57                   	push   edi
c002348e:	56                   	push   esi
c002348f:	53                   	push   ebx
c0023490:	83 ec 1c             	sub    esp,0x1c
c0023493:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023497:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002349b:	8d 50 f8             	lea    edx,[eax-0x8]
c002349e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00234a2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00234a6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00234aa:	80 fa 03             	cmp    dl,0x3
c00234ad:	77 5d                	ja     c002350c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00234af:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00234b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234b7:	0f b6 db             	movzx  ebx,bl
c00234ba:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00234bd:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00234c1:	83 ca 80             	or     edx,0xffffff80
c00234c4:	0f b6 d2             	movzx  edx,dl
c00234c7:	52                   	push   edx
c00234c8:	6a 0c                	push   0xc
c00234ca:	53                   	push   ebx
c00234cb:	56                   	push   esi
c00234cc:	e8 5b f9 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234d1:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00234d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00234da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00234de:	0f b6 c0             	movzx  eax,al
c00234e1:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00234e5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00234e7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00234ec:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00234f0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00234f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00234f8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023500:	83 c4 2c             	add    esp,0x2c
c0023503:	5b                   	pop    ebx
c0023504:	5e                   	pop    esi
c0023505:	5f                   	pop    edi
c0023506:	5d                   	pop    ebp
c0023507:	e9 20 f9 ff ff       	jmp    c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002350c:	3c 07                	cmp    al,0x7
c002350e:	77 10                	ja     c0023520 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023510:	0f b6 db             	movzx  ebx,bl
c0023513:	0f b6 d0             	movzx  edx,al
c0023516:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002351e:	eb 2d                	jmp    c002354d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023520:	3c 0d                	cmp    al,0xd
c0023522:	77 13                	ja     c0023537 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023524:	0f b6 db             	movzx  ebx,bl
c0023527:	0f b6 c0             	movzx  eax,al
c002352a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023531:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023535:	eb 16                	jmp    c002354d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023537:	3c 15                	cmp    al,0x15
c0023539:	77 14                	ja     c002354f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002353b:	0f b6 db             	movzx  ebx,bl
c002353e:	0f b6 c0             	movzx  eax,al
c0023541:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023549:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002354d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002354f:	83 c4 1c             	add    esp,0x1c
c0023552:	5b                   	pop    ebx
c0023553:	5e                   	pop    esi
c0023554:	5f                   	pop    edi
c0023555:	5d                   	pop    ebp
c0023556:	c3                   	ret    
c0023557:	90                   	nop

c0023558 <IDE::detect()>:
c0023558:	55                   	push   ebp
c0023559:	57                   	push   edi
c002355a:	56                   	push   esi
c002355b:	53                   	push   ebx
c002355c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023562:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023569:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023570:	0f 85 9d 02 00 00    	jne    c0023813 <IDE::detect()+0x2bb>
c0023576:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002357d:	31 f6                	xor    esi,esi
c002357f:	31 ed                	xor    ebp,ebp
c0023581:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023589:	89 e8                	mov    eax,ebp
c002358b:	c1 e0 06             	shl    eax,0x6
c002358e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023596:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002359a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002359e:	c1 e0 04             	shl    eax,0x4
c00235a1:	83 c8 a0             	or     eax,0xffffffa0
c00235a4:	0f b6 c0             	movzx  eax,al
c00235a7:	50                   	push   eax
c00235a8:	6a 06                	push   0x6
c00235aa:	56                   	push   esi
c00235ab:	53                   	push   ebx
c00235ac:	e8 7b f8 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235b1:	83 c4 0c             	add    esp,0xc
c00235b4:	6a 0c                	push   0xc
c00235b6:	56                   	push   esi
c00235b7:	53                   	push   ebx
c00235b8:	e8 2f f9 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00235bd:	83 c4 0c             	add    esp,0xc
c00235c0:	6a 0c                	push   0xc
c00235c2:	56                   	push   esi
c00235c3:	53                   	push   ebx
c00235c4:	e8 23 f9 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00235c9:	83 c4 0c             	add    esp,0xc
c00235cc:	6a 0c                	push   0xc
c00235ce:	56                   	push   esi
c00235cf:	53                   	push   ebx
c00235d0:	e8 17 f9 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00235d5:	83 c4 0c             	add    esp,0xc
c00235d8:	6a 0c                	push   0xc
c00235da:	56                   	push   esi
c00235db:	53                   	push   ebx
c00235dc:	e8 0b f9 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00235e1:	68 ec 00 00 00       	push   0xec
c00235e6:	6a 07                	push   0x7
c00235e8:	56                   	push   esi
c00235e9:	53                   	push   ebx
c00235ea:	e8 3d f8 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ef:	83 c4 1c             	add    esp,0x1c
c00235f2:	6a 0c                	push   0xc
c00235f4:	56                   	push   esi
c00235f5:	53                   	push   ebx
c00235f6:	e8 f1 f8 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00235fb:	83 c4 0c             	add    esp,0xc
c00235fe:	6a 0c                	push   0xc
c0023600:	56                   	push   esi
c0023601:	53                   	push   ebx
c0023602:	e8 e5 f8 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023607:	83 c4 0c             	add    esp,0xc
c002360a:	6a 0c                	push   0xc
c002360c:	56                   	push   esi
c002360d:	53                   	push   ebx
c002360e:	e8 d9 f8 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023613:	83 c4 0c             	add    esp,0xc
c0023616:	6a 0c                	push   0xc
c0023618:	56                   	push   esi
c0023619:	53                   	push   ebx
c002361a:	e8 cd f8 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c002361f:	83 c4 0c             	add    esp,0xc
c0023622:	6a 0c                	push   0xc
c0023624:	56                   	push   esi
c0023625:	53                   	push   ebx
c0023626:	e8 c1 f8 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c002362b:	83 c4 10             	add    esp,0x10
c002362e:	84 c0                	test   al,al
c0023630:	0f 84 63 01 00 00    	je     c0023799 <IDE::detect()+0x241>
c0023636:	31 ff                	xor    edi,edi
c0023638:	50                   	push   eax
c0023639:	6a 0c                	push   0xc
c002363b:	56                   	push   esi
c002363c:	53                   	push   ebx
c002363d:	e8 aa f8 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023642:	83 c4 10             	add    esp,0x10
c0023645:	a8 01                	test   al,0x1
c0023647:	0f 85 6d 01 00 00    	jne    c00237ba <IDE::detect()+0x262>
c002364d:	84 c0                	test   al,al
c002364f:	78 04                	js     c0023655 <IDE::detect()+0xfd>
c0023651:	a8 08                	test   al,0x8
c0023653:	75 27                	jne    c002367c <IDE::detect()+0x124>
c0023655:	47                   	inc    edi
c0023656:	81 ff 17 01 00 00    	cmp    edi,0x117
c002365c:	7e da                	jle    c0023638 <IDE::detect()+0xe0>
c002365e:	50                   	push   eax
c002365f:	50                   	push   eax
c0023660:	6a 00                	push   0x0
c0023662:	68 40 4b 4c 00       	push   0x4c4b40
c0023667:	e8 3d a5 ff ff       	call   c001dba9 <nanoSleep(unsigned long long)>
c002366c:	83 c4 10             	add    esp,0x10
c002366f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023675:	75 c1                	jne    c0023638 <IDE::detect()+0xe0>
c0023677:	e9 3e 01 00 00       	jmp    c00237ba <IDE::detect()+0x262>
c002367c:	31 c9                	xor    ecx,ecx
c002367e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023682:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023686:	83 ec 0c             	sub    esp,0xc
c0023689:	68 80 00 00 00       	push   0x80
c002368e:	57                   	push   edi
c002368f:	6a 00                	push   0x0
c0023691:	56                   	push   esi
c0023692:	53                   	push   ebx
c0023693:	e8 f4 fd ff ff       	call   c002348c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023698:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002369d:	89 e8                	mov    eax,ebp
c002369f:	89 d1                	mov    ecx,edx
c00236a1:	c1 e0 06             	shl    eax,0x6
c00236a4:	01 d8                	add    eax,ebx
c00236a6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00236ad:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00236b4:	89 f2                	mov    edx,esi
c00236b6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00236bc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00236c0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00236c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236ca:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00236d1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00236d9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00236e0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00236e8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00236ee:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00236f5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00236fb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00236ff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023703:	83 c4 20             	add    esp,0x20
c0023706:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023709:	83 c0 02             	add    eax,0x2
c002370c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023712:	83 c7 02             	add    edi,0x2
c0023715:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023718:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002371e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023722:	75 e2                	jne    c0023706 <IDE::detect()+0x1ae>
c0023724:	89 e8                	mov    eax,ebp
c0023726:	c1 e0 06             	shl    eax,0x6
c0023729:	01 d8                	add    eax,ebx
c002372b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023731:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023738:	66 c1 ea 09          	shr    dx,0x9
c002373c:	83 e2 01             	and    edx,0x1
c002373f:	84 c9                	test   cl,cl
c0023741:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023747:	75 22                	jne    c002376b <IDE::detect()+0x213>
c0023749:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023750:	74 46                	je     c0023798 <IDE::detect()+0x240>
c0023752:	83 ec 0c             	sub    esp,0xc
c0023755:	68 7c 01 00 00       	push   0x17c
c002375a:	e8 3a be fe ff       	call   c000f599 <malloc>
c002375f:	89 c7                	mov    edi,eax
c0023761:	89 04 24             	mov    DWORD PTR [esp],eax
c0023764:	e8 15 05 00 00       	call   c0023c7e <ATA::ATA()>
c0023769:	eb 17                	jmp    c0023782 <IDE::detect()+0x22a>
c002376b:	83 ec 0c             	sub    esp,0xc
c002376e:	68 80 01 00 00       	push   0x180
c0023773:	e8 21 be fe ff       	call   c000f599 <malloc>
c0023778:	89 c7                	mov    edi,eax
c002377a:	89 04 24             	mov    DWORD PTR [esp],eax
c002377d:	e8 04 0b 00 00       	call   c0024286 <ATAPI::ATAPI()>
c0023782:	5a                   	pop    edx
c0023783:	59                   	pop    ecx
c0023784:	57                   	push   edi
c0023785:	53                   	push   ebx
c0023786:	e8 87 02 ff ff       	call   c0013a12 <Device::addChild(Device*)>
c002378b:	8b 07                	mov    eax,DWORD PTR [edi]
c002378d:	53                   	push   ebx
c002378e:	55                   	push   ebp
c002378f:	6a 00                	push   0x0
c0023791:	57                   	push   edi
c0023792:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023795:	83 c4 20             	add    esp,0x20
c0023798:	45                   	inc    ebp
c0023799:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002379e:	74 0d                	je     c00237ad <IDE::detect()+0x255>
c00237a0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00237a8:	e9 dc fd ff ff       	jmp    c0023589 <IDE::detect()+0x31>
c00237ad:	4e                   	dec    esi
c00237ae:	74 63                	je     c0023813 <IDE::detect()+0x2bb>
c00237b0:	be 01 00 00 00       	mov    esi,0x1
c00237b5:	e9 c7 fd ff ff       	jmp    c0023581 <IDE::detect()+0x29>
c00237ba:	50                   	push   eax
c00237bb:	6a 04                	push   0x4
c00237bd:	56                   	push   esi
c00237be:	53                   	push   ebx
c00237bf:	e8 28 f7 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00237c4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00237c8:	83 c4 0c             	add    esp,0xc
c00237cb:	6a 05                	push   0x5
c00237cd:	56                   	push   esi
c00237ce:	53                   	push   ebx
c00237cf:	e8 18 f7 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00237d4:	83 c4 10             	add    esp,0x10
c00237d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00237db:	80 fa 14             	cmp    dl,0x14
c00237de:	75 04                	jne    c00237e4 <IDE::detect()+0x28c>
c00237e0:	3c eb                	cmp    al,0xeb
c00237e2:	eb 07                	jmp    c00237eb <IDE::detect()+0x293>
c00237e4:	3c 96                	cmp    al,0x96
c00237e6:	75 b1                	jne    c0023799 <IDE::detect()+0x241>
c00237e8:	80 fa 69             	cmp    dl,0x69
c00237eb:	75 ac                	jne    c0023799 <IDE::detect()+0x241>
c00237ed:	68 a1 00 00 00       	push   0xa1
c00237f2:	6a 07                	push   0x7
c00237f4:	56                   	push   esi
c00237f5:	53                   	push   ebx
c00237f6:	e8 31 f6 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237fb:	5f                   	pop    edi
c00237fc:	58                   	pop    eax
c00237fd:	6a 00                	push   0x0
c00237ff:	68 40 42 0f 00       	push   0xf4240
c0023804:	e8 a0 a3 ff ff       	call   c001dba9 <nanoSleep(unsigned long long)>
c0023809:	83 c4 10             	add    esp,0x10
c002380c:	b1 01                	mov    cl,0x1
c002380e:	e9 6b fe ff ff       	jmp    c002367e <IDE::detect()+0x126>
c0023813:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023819:	5b                   	pop    ebx
c002381a:	5e                   	pop    esi
c002381b:	5f                   	pop    edi
c002381c:	5d                   	pop    ebp
c002381d:	c3                   	ret    

c002381e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002381e:	55                   	push   ebp
c002381f:	57                   	push   edi
c0023820:	56                   	push   esi
c0023821:	53                   	push   ebx
c0023822:	83 ec 1c             	sub    esp,0x1c
c0023825:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023829:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002382d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023831:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023835:	88 c3                	mov    bl,al
c0023837:	84 c0                	test   al,al
c0023839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002383d:	0f 84 81 00 00 00    	je     c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023843:	83 ec 0c             	sub    esp,0xc
c0023846:	68 03 bf 02 c0       	push   0xc002bf03
c002384b:	e8 89 ed fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0023850:	83 c4 10             	add    esp,0x10
c0023853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023857:	3c 01                	cmp    al,0x1
c0023859:	74 63                	je     c00238be <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c002385b:	3c 02                	cmp    al,0x2
c002385d:	75 53                	jne    c00238b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002385f:	d1 e6                	shl    esi,1
c0023861:	09 ee                	or     esi,ebp
c0023863:	50                   	push   eax
c0023864:	89 f0                	mov    eax,esi
c0023866:	6a 01                	push   0x1
c0023868:	0f b6 f0             	movzx  esi,al
c002386b:	c1 e6 06             	shl    esi,0x6
c002386e:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023876:	50                   	push   eax
c0023877:	57                   	push   edi
c0023878:	e8 6f f6 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c002387d:	83 c4 10             	add    esp,0x10
c0023880:	a8 01                	test   al,0x1
c0023882:	74 02                	je     c0023886 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023884:	b3 07                	mov    bl,0x7
c0023886:	a8 02                	test   al,0x2
c0023888:	74 02                	je     c002388c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c002388a:	b3 03                	mov    bl,0x3
c002388c:	a8 04                	test   al,0x4
c002388e:	74 02                	je     c0023892 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023890:	b3 14                	mov    bl,0x14
c0023892:	a8 08                	test   al,0x8
c0023894:	74 02                	je     c0023898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023896:	b3 03                	mov    bl,0x3
c0023898:	a8 10                	test   al,0x10
c002389a:	74 02                	je     c002389e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c002389c:	b3 15                	mov    bl,0x15
c002389e:	a8 20                	test   al,0x20
c00238a0:	74 02                	je     c00238a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00238a2:	b3 03                	mov    bl,0x3
c00238a4:	a8 40                	test   al,0x40
c00238a6:	74 02                	je     c00238aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00238a8:	b3 16                	mov    bl,0x16
c00238aa:	84 c0                	test   al,al
c00238ac:	79 16                	jns    c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238ae:	b3 0d                	mov    bl,0xd
c00238b0:	eb 12                	jmp    c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238b2:	3c 03                	cmp    al,0x3
c00238b4:	74 0c                	je     c00238c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00238b6:	3c 04                	cmp    al,0x4
c00238b8:	75 0a                	jne    c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238ba:	b3 08                	mov    bl,0x8
c00238bc:	eb 06                	jmp    c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238be:	b3 13                	mov    bl,0x13
c00238c0:	eb 02                	jmp    c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238c2:	b3 17                	mov    bl,0x17
c00238c4:	83 c4 1c             	add    esp,0x1c
c00238c7:	88 d8                	mov    al,bl
c00238c9:	5b                   	pop    ebx
c00238ca:	5e                   	pop    esi
c00238cb:	5f                   	pop    edi
c00238cc:	5d                   	pop    ebp
c00238cd:	c3                   	ret    

c00238ce <IDE::polling(unsigned char, unsigned int)>:
c00238ce:	57                   	push   edi
c00238cf:	56                   	push   esi
c00238d0:	53                   	push   ebx
c00238d1:	bb 04 00 00 00       	mov    ebx,0x4
c00238d6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00238da:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00238df:	52                   	push   edx
c00238e0:	6a 0c                	push   0xc
c00238e2:	56                   	push   esi
c00238e3:	57                   	push   edi
c00238e4:	e8 03 f6 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00238e9:	83 c4 10             	add    esp,0x10
c00238ec:	4b                   	dec    ebx
c00238ed:	75 f0                	jne    c00238df <IDE::polling(unsigned char, unsigned int)+0x11>
c00238ef:	bb a0 86 01 00       	mov    ebx,0x186a0
c00238f4:	50                   	push   eax
c00238f5:	6a 0c                	push   0xc
c00238f7:	56                   	push   esi
c00238f8:	57                   	push   edi
c00238f9:	e8 ee f5 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00238fe:	83 c4 10             	add    esp,0x10
c0023901:	a8 01                	test   al,0x1
c0023903:	75 17                	jne    c002391c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023905:	a8 20                	test   al,0x20
c0023907:	75 0f                	jne    c0023918 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023909:	4b                   	dec    ebx
c002390a:	74 10                	je     c002391c <IDE::polling(unsigned char, unsigned int)+0x4e>
c002390c:	84 c0                	test   al,al
c002390e:	78 e4                	js     c00238f4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023910:	a8 08                	test   al,0x8
c0023912:	74 e0                	je     c00238f4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023914:	31 c0                	xor    eax,eax
c0023916:	eb 06                	jmp    c002391e <IDE::polling(unsigned char, unsigned int)+0x50>
c0023918:	b0 01                	mov    al,0x1
c002391a:	eb 02                	jmp    c002391e <IDE::polling(unsigned char, unsigned int)+0x50>
c002391c:	b0 02                	mov    al,0x2
c002391e:	5b                   	pop    ebx
c002391f:	5e                   	pop    esi
c0023920:	5f                   	pop    edi
c0023921:	c3                   	ret    

c0023922 <SATABus::close(int, int, void*)>:
c0023922:	31 c0                	xor    eax,eax
c0023924:	c3                   	ret    
c0023925:	90                   	nop

c0023926 <SATABus::detect()>:
c0023926:	c3                   	ret    
c0023927:	90                   	nop

c0023928 <SATABus::SATABus()>:
c0023928:	83 ec 0c             	sub    esp,0xc
c002392b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002392f:	83 ec 08             	sub    esp,0x8
c0023932:	68 3c bf 02 c0       	push   0xc002bf3c
c0023937:	50                   	push   eax
c0023938:	e8 83 04 ff ff       	call   c0013dc0 <HardDiskController::HardDiskController(char const*)>
c002393d:	83 c4 10             	add    esp,0x10
c0023940:	ba 90 bf 02 c0       	mov    edx,0xc002bf90
c0023945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023949:	89 10                	mov    DWORD PTR [eax],edx
c002394b:	83 ec 0c             	sub    esp,0xc
c002394e:	6a 50                	push   0x50
c0023950:	e8 b6 c0 fe ff       	call   c000fa0b <Phys::allocateContiguousPages(int)>
c0023955:	83 c4 10             	add    esp,0x10
c0023958:	89 c2                	mov    edx,eax
c002395a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002395e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023964:	83 ec 0c             	sub    esp,0xc
c0023967:	6a 50                	push   0x50
c0023969:	e8 55 d8 fe ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c002396e:	83 c4 10             	add    esp,0x10
c0023971:	89 c2                	mov    edx,eax
c0023973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023977:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002397d:	a1 b0 d8 02 c0       	mov    eax,ds:0xc002d8b0
c0023982:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023986:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002398c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023990:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023996:	83 ec 0c             	sub    esp,0xc
c0023999:	6a 03                	push   0x3
c002399b:	6a 50                	push   0x50
c002399d:	51                   	push   ecx
c002399e:	52                   	push   edx
c002399f:	50                   	push   eax
c00239a0:	e8 d1 e2 fe ff       	call   c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00239a5:	83 c4 20             	add    esp,0x20
c00239a8:	90                   	nop
c00239a9:	83 c4 0c             	add    esp,0xc
c00239ac:	c3                   	ret    
c00239ad:	90                   	nop

c00239ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00239ae:	83 ec 0c             	sub    esp,0xc
c00239b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239b5:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00239b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00239bb:	09 c2                	or     edx,eax
c00239bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00239c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00239c9:	31 c0                	xor    eax,eax
c00239cb:	c1 e9 08             	shr    ecx,0x8
c00239ce:	83 e1 0f             	and    ecx,0xf
c00239d1:	39 c8                	cmp    eax,ecx
c00239d3:	74 0a                	je     c00239df <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00239d5:	f6 c2 01             	test   dl,0x1
c00239d8:	74 18                	je     c00239f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00239da:	d1 ea                	shr    edx,1
c00239dc:	40                   	inc    eax
c00239dd:	eb f2                	jmp    c00239d1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00239df:	83 ec 0c             	sub    esp,0xc
c00239e2:	68 60 bf 02 c0       	push   0xc002bf60
c00239e7:	e8 59 63 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00239ec:	83 c4 10             	add    esp,0x10
c00239ef:	83 c8 ff             	or     eax,0xffffffff
c00239f2:	83 c4 0c             	add    esp,0xc
c00239f5:	c3                   	ret    

c00239f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00239f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00239fa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00239fd:	89 c2                	mov    edx,eax
c00239ff:	c1 ea 08             	shr    edx,0x8
c0023a02:	83 e2 0f             	and    edx,0xf
c0023a05:	fe ca                	dec    dl
c0023a07:	75 31                	jne    c0023a3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a09:	83 e0 0f             	and    eax,0xf
c0023a0c:	3c 03                	cmp    al,0x3
c0023a0e:	75 2a                	jne    c0023a3a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a10:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023a13:	b8 02 00 00 00       	mov    eax,0x2
c0023a18:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023a1e:	74 1c                	je     c0023a3c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a20:	b8 04 00 00 00       	mov    eax,0x4
c0023a25:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023a2b:	74 0f                	je     c0023a3c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a2d:	31 c0                	xor    eax,eax
c0023a2f:	83 fa 03             	cmp    edx,0x3
c0023a32:	0f 94 c0             	sete   al
c0023a35:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023a39:	c3                   	ret    
c0023a3a:	31 c0                	xor    eax,eax
c0023a3c:	c3                   	ret    
c0023a3d:	90                   	nop

c0023a3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a45:	0f ba e2 0f          	bt     edx,0xf
c0023a49:	72 f7                	jb     c0023a42 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023a4b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a4e:	83 ca 10             	or     edx,0x10
c0023a51:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a57:	83 ca 01             	or     edx,0x1
c0023a5a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a5d:	c3                   	ret    

c0023a5e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a62:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a65:	83 e2 fe             	and    edx,0xfffffffe
c0023a68:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a6b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a6e:	83 e2 ef             	and    edx,0xffffffef
c0023a71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a77:	0f ba e2 0e          	bt     edx,0xe
c0023a7b:	72 f7                	jb     c0023a74 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a7d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a80:	0f ba e2 0f          	bt     edx,0xf
c0023a84:	72 ee                	jb     c0023a74 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023a86:	c3                   	ret    
c0023a87:	90                   	nop

c0023a88 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023a88:	55                   	push   ebp
c0023a89:	57                   	push   edi
c0023a8a:	56                   	push   esi
c0023a8b:	53                   	push   ebx
c0023a8c:	83 ec 1c             	sub    esp,0x1c
c0023a8f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a93:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a97:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023a9b:	53                   	push   ebx
c0023a9c:	89 fd                	mov    ebp,edi
c0023a9e:	56                   	push   esi
c0023a9f:	c1 e5 0a             	shl    ebp,0xa
c0023aa2:	e8 b7 ff ff ff       	call   c0023a5e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023aa7:	83 ec 0c             	sub    esp,0xc
c0023aaa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ab0:	01 e8                	add    eax,ebp
c0023ab2:	89 03                	mov    DWORD PTR [ebx],eax
c0023ab4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ab6:	68 00 04 00 00       	push   0x400
c0023abb:	6a 00                	push   0x0
c0023abd:	50                   	push   eax
c0023abe:	e8 8d cc fd ff       	call   c0000750 <memset>
c0023ac3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ac9:	89 fa                	mov    edx,edi
c0023acb:	01 e8                	add    eax,ebp
c0023acd:	c1 e7 0d             	shl    edi,0xd
c0023ad0:	89 03                	mov    DWORD PTR [ebx],eax
c0023ad2:	c1 e2 08             	shl    edx,0x8
c0023ad5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023adc:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ae2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ae6:	89 d0                	mov    eax,edx
c0023ae8:	83 c4 1c             	add    esp,0x1c
c0023aeb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023af1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023af4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023af7:	68 00 01 00 00       	push   0x100
c0023afc:	6a 00                	push   0x0
c0023afe:	50                   	push   eax
c0023aff:	e8 4c cc fd ff       	call   c0000750 <memset>
c0023b04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b08:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023b0e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023b14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b18:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023b1b:	83 c4 10             	add    esp,0x10
c0023b1e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023b25:	31 ff                	xor    edi,edi
c0023b27:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023b2d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b37:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023b3d:	83 c5 20             	add    ebp,0x20
c0023b40:	01 f8                	add    eax,edi
c0023b42:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b45:	52                   	push   edx
c0023b46:	68 00 01 00 00       	push   0x100
c0023b4b:	6a 00                	push   0x0
c0023b4d:	50                   	push   eax
c0023b4e:	e8 fd cb fd ff       	call   c0000750 <memset>
c0023b53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023b57:	83 c4 10             	add    esp,0x10
c0023b5a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023b60:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023b67:	01 f8                	add    eax,edi
c0023b69:	81 c7 00 01 00 00    	add    edi,0x100
c0023b6f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b72:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023b78:	75 b3                	jne    c0023b2d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023b7a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023b7e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023b82:	83 c4 1c             	add    esp,0x1c
c0023b85:	5b                   	pop    ebx
c0023b86:	5e                   	pop    esi
c0023b87:	5f                   	pop    edi
c0023b88:	5d                   	pop    ebp
c0023b89:	e9 b0 fe ff ff       	jmp    c0023a3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023b8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023b8e:	55                   	push   ebp
c0023b8f:	57                   	push   edi
c0023b90:	56                   	push   esi
c0023b91:	53                   	push   ebx
c0023b92:	31 db                	xor    ebx,ebx
c0023b94:	83 ec 0c             	sub    esp,0xc
c0023b97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023b9b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023b9f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ba2:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ba8:	74 7a                	je     c0023c24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023baa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023bae:	89 d8                	mov    eax,ebx
c0023bb0:	c1 e0 07             	shl    eax,0x7
c0023bb3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023bba:	55                   	push   ebp
c0023bbb:	56                   	push   esi
c0023bbc:	e8 35 fe ff ff       	call   c00239f6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023bc1:	5a                   	pop    edx
c0023bc2:	83 f8 01             	cmp    eax,0x1
c0023bc5:	59                   	pop    ecx
c0023bc6:	75 21                	jne    c0023be9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023bc8:	50                   	push   eax
c0023bc9:	53                   	push   ebx
c0023bca:	55                   	push   ebp
c0023bcb:	56                   	push   esi
c0023bcc:	e8 b7 fe ff ff       	call   c0023a88 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023bd1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023bd8:	e8 bc b9 fe ff       	call   c000f599 <malloc>
c0023bdd:	89 c5                	mov    ebp,eax
c0023bdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023be2:	e8 03 0d 00 00       	call   c00248ea <SATA::SATA()>
c0023be7:	eb 24                	jmp    c0023c0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023be9:	83 f8 04             	cmp    eax,0x4
c0023bec:	75 36                	jne    c0023c24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023bee:	51                   	push   ecx
c0023bef:	53                   	push   ebx
c0023bf0:	55                   	push   ebp
c0023bf1:	56                   	push   esi
c0023bf2:	e8 91 fe ff ff       	call   c0023a88 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023bf7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023bfe:	e8 96 b9 fe ff       	call   c000f599 <malloc>
c0023c03:	89 c5                	mov    ebp,eax
c0023c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c08:	e8 53 10 00 00       	call   c0024c60 <SATAPI::SATAPI()>
c0023c0d:	58                   	pop    eax
c0023c0e:	5a                   	pop    edx
c0023c0f:	55                   	push   ebp
c0023c10:	56                   	push   esi
c0023c11:	e8 fc fd fe ff       	call   c0013a12 <Device::addChild(Device*)>
c0023c16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023c19:	56                   	push   esi
c0023c1a:	6a 00                	push   0x0
c0023c1c:	53                   	push   ebx
c0023c1d:	55                   	push   ebp
c0023c1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023c21:	83 c4 20             	add    esp,0x20
c0023c24:	d1 ef                	shr    edi,1
c0023c26:	43                   	inc    ebx
c0023c27:	83 fb 20             	cmp    ebx,0x20
c0023c2a:	0f 85 72 ff ff ff    	jne    c0023ba2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023c30:	83 c4 0c             	add    esp,0xc
c0023c33:	5b                   	pop    ebx
c0023c34:	5e                   	pop    esi
c0023c35:	5f                   	pop    edi
c0023c36:	5d                   	pop    ebp
c0023c37:	c3                   	ret    

c0023c38 <SATABus::open(int, int, void*)>:
c0023c38:	83 ec 14             	sub    esp,0x14
c0023c3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c3f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023c45:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023c4b:	52                   	push   edx
c0023c4c:	50                   	push   eax
c0023c4d:	e8 3c ff ff ff       	call   c0023b8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023c52:	31 c0                	xor    eax,eax
c0023c54:	83 c4 1c             	add    esp,0x1c
c0023c57:	c3                   	ret    

c0023c58 <ATA::close(int, int, void*)>:
c0023c58:	83 ec 0c             	sub    esp,0xc
c0023c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c65:	85 c0                	test   eax,eax
c0023c67:	74 0c                	je     c0023c75 <ATA::close(int, int, void*)+0x1d>
c0023c69:	83 ec 0c             	sub    esp,0xc
c0023c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c6e:	50                   	push   eax
c0023c6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c72:	83 c4 10             	add    esp,0x10
c0023c75:	31 c0                	xor    eax,eax
c0023c77:	83 c4 0c             	add    esp,0xc
c0023c7a:	c3                   	ret    
c0023c7b:	90                   	nop

c0023c7c <ATA::powerSaving(PowerSavingLevel)>:
c0023c7c:	c3                   	ret    
c0023c7d:	90                   	nop

c0023c7e <ATA::ATA()>:
c0023c7e:	83 ec 0c             	sub    esp,0xc
c0023c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c85:	83 ec 04             	sub    esp,0x4
c0023c88:	68 00 02 00 00       	push   0x200
c0023c8d:	68 59 c0 02 c0       	push   0xc002c059
c0023c92:	50                   	push   eax
c0023c93:	e8 b0 01 ff ff       	call   c0013e48 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c98:	83 c4 10             	add    esp,0x10
c0023c9b:	ba dc bf 02 c0       	mov    edx,0xc002bfdc
c0023ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca4:	89 10                	mov    DWORD PTR [eax],edx
c0023ca6:	90                   	nop
c0023ca7:	83 c4 0c             	add    esp,0xc
c0023caa:	c3                   	ret    
c0023cab:	90                   	nop

c0023cac <ATA::flush(bool)>:
c0023cac:	53                   	push   ebx
c0023cad:	83 ec 08             	sub    esp,0x8
c0023cb0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023cb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cb9:	19 c0                	sbb    eax,eax
c0023cbb:	83 e0 fd             	and    eax,0xfffffffd
c0023cbe:	05 ea 00 00 00       	add    eax,0xea
c0023cc3:	50                   	push   eax
c0023cc4:	6a 07                	push   0x7
c0023cc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ccd:	50                   	push   eax
c0023cce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cd4:	e8 53 f1 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cd9:	83 c4 0c             	add    esp,0xc
c0023cdc:	6a 00                	push   0x0
c0023cde:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ce5:	50                   	push   eax
c0023ce6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cec:	e8 dd fb ff ff       	call   c00238ce <IDE::polling(unsigned char, unsigned int)>
c0023cf1:	83 c4 18             	add    esp,0x18
c0023cf4:	5b                   	pop    ebx
c0023cf5:	c3                   	ret    

c0023cf6 <ATA::readyForCommand()>:
c0023cf6:	56                   	push   esi
c0023cf7:	53                   	push   ebx
c0023cf8:	31 db                	xor    ebx,ebx
c0023cfa:	50                   	push   eax
c0023cfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023cff:	50                   	push   eax
c0023d00:	6a 0c                	push   0xc
c0023d02:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d09:	50                   	push   eax
c0023d0a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023d10:	e8 d7 f1 ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c0023d15:	83 c4 10             	add    esp,0x10
c0023d18:	a8 88                	test   al,0x88
c0023d1a:	74 23                	je     c0023d3f <ATA::readyForCommand()+0x49>
c0023d1c:	43                   	inc    ebx
c0023d1d:	83 fb 63             	cmp    ebx,0x63
c0023d20:	7e dd                	jle    c0023cff <ATA::readyForCommand()+0x9>
c0023d22:	51                   	push   ecx
c0023d23:	51                   	push   ecx
c0023d24:	6a 00                	push   0x0
c0023d26:	68 40 42 0f 00       	push   0xf4240
c0023d2b:	e8 79 9e ff ff       	call   c001dba9 <nanoSleep(unsigned long long)>
c0023d30:	83 c4 10             	add    esp,0x10
c0023d33:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023d39:	75 c4                	jne    c0023cff <ATA::readyForCommand()+0x9>
c0023d3b:	31 c0                	xor    eax,eax
c0023d3d:	eb 02                	jmp    c0023d41 <ATA::readyForCommand()+0x4b>
c0023d3f:	b0 01                	mov    al,0x1
c0023d41:	5a                   	pop    edx
c0023d42:	5b                   	pop    ebx
c0023d43:	5e                   	pop    esi
c0023d44:	c3                   	ret    
c0023d45:	90                   	nop

c0023d46 <ATA::access(unsigned long long, int, void*, bool)>:
c0023d46:	55                   	push   ebp
c0023d47:	57                   	push   edi
c0023d48:	56                   	push   esi
c0023d49:	53                   	push   ebx
c0023d4a:	83 ec 2c             	sub    esp,0x2c
c0023d4d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023d51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023d55:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023d59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d5d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023d61:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d69:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023d6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d7d:	c1 e0 06             	shl    eax,0x6
c0023d80:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023d88:	74 5d                	je     c0023de7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023d8a:	89 fa                	mov    edx,edi
c0023d8c:	89 f0                	mov    eax,esi
c0023d8e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023d92:	c1 ea 1c             	shr    edx,0x1c
c0023d95:	89 d1                	mov    ecx,edx
c0023d97:	09 c1                	or     ecx,eax
c0023d99:	74 25                	je     c0023dc0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d9b:	31 ed                	xor    ebp,ebp
c0023d9d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023da4:	89 fa                	mov    edx,edi
c0023da6:	89 f0                	mov    eax,esi
c0023da8:	0f ad d0             	shrd   eax,edx,cl
c0023dab:	d3 ea                	shr    edx,cl
c0023dad:	f6 c1 20             	test   cl,0x20
c0023db0:	74 02                	je     c0023db4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023db2:	89 d0                	mov    eax,edx
c0023db4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023db8:	45                   	inc    ebp
c0023db9:	83 fd 06             	cmp    ebp,0x6
c0023dbc:	75 df                	jne    c0023d9d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023dbe:	eb 76                	jmp    c0023e36 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023dc0:	89 f0                	mov    eax,esi
c0023dc2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023dc7:	89 fa                	mov    edx,edi
c0023dc9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023dd0:	0f ac d0 10          	shrd   eax,edx,0x10
c0023dd4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023dd9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023ddd:	c1 ee 18             	shr    esi,0x18
c0023de0:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023de5:	eb 56                	jmp    c0023e3d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023de7:	6a 00                	push   0x0
c0023de9:	6a 3f                	push   0x3f
c0023deb:	57                   	push   edi
c0023dec:	56                   	push   esi
c0023ded:	e8 22 29 00 00       	call   c0026714 <__umoddi3>
c0023df2:	83 c4 10             	add    esp,0x10
c0023df5:	40                   	inc    eax
c0023df6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023dfa:	6a 00                	push   0x0
c0023dfc:	68 f0 03 00 00       	push   0x3f0
c0023e01:	57                   	push   edi
c0023e02:	56                   	push   esi
c0023e03:	e8 0c 28 00 00       	call   c0026614 <__udivdi3>
c0023e08:	83 c4 10             	add    esp,0x10
c0023e0b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023e10:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023e17:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023e1c:	6a 00                	push   0x0
c0023e1e:	6a 3f                	push   0x3f
c0023e20:	57                   	push   edi
c0023e21:	56                   	push   esi
c0023e22:	e8 ed 27 00 00       	call   c0026614 <__udivdi3>
c0023e27:	83 c4 10             	add    esp,0x10
c0023e2a:	89 c6                	mov    esi,eax
c0023e2c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023e31:	83 e6 0f             	and    esi,0xf
c0023e34:	eb 07                	jmp    c0023e3d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023e36:	31 f6                	xor    esi,esi
c0023e38:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023e3d:	bf 01 00 00 00       	mov    edi,0x1
c0023e42:	50                   	push   eax
c0023e43:	6a 00                	push   0x0
c0023e45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e4c:	50                   	push   eax
c0023e4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023e51:	e8 e2 f1 ff ff       	call   c0023038 <IDE::enableIRQs(unsigned char, bool)>
c0023e56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e59:	e8 98 fe ff ff       	call   c0023cf6 <ATA::readyForCommand()>
c0023e5e:	83 c4 10             	add    esp,0x10
c0023e61:	84 c0                	test   al,al
c0023e63:	0f 84 5a 02 00 00    	je     c00240c3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e69:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023e6f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e75:	c1 e0 04             	shl    eax,0x4
c0023e78:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023e7f:	09 c6                	or     esi,eax
c0023e81:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023e86:	75 05                	jne    c0023e8d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023e88:	83 ce a0             	or     esi,0xffffffa0
c0023e8b:	eb 03                	jmp    c0023e90 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023e8d:	83 ce e0             	or     esi,0xffffffe0
c0023e90:	89 f0                	mov    eax,esi
c0023e92:	0f b6 f0             	movzx  esi,al
c0023e95:	56                   	push   esi
c0023e96:	6a 06                	push   0x6
c0023e98:	51                   	push   ecx
c0023e99:	52                   	push   edx
c0023e9a:	e8 8d ef ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9f:	83 c4 10             	add    esp,0x10
c0023ea2:	6a 00                	push   0x0
c0023ea4:	6a 01                	push   0x1
c0023ea6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ead:	50                   	push   eax
c0023eae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eb4:	e8 73 ef ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb9:	83 c4 10             	add    esp,0x10
c0023ebc:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ec1:	75 6e                	jne    c0023f31 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023ec3:	6a 00                	push   0x0
c0023ec5:	6a 08                	push   0x8
c0023ec7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ece:	50                   	push   eax
c0023ecf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ed5:	e8 52 ef ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eda:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023edf:	50                   	push   eax
c0023ee0:	6a 09                	push   0x9
c0023ee2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee9:	50                   	push   eax
c0023eea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ef0:	e8 37 ef ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef5:	83 c4 20             	add    esp,0x20
c0023ef8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023efd:	50                   	push   eax
c0023efe:	6a 0a                	push   0xa
c0023f00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f07:	50                   	push   eax
c0023f08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f0e:	e8 19 ef ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f13:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023f18:	50                   	push   eax
c0023f19:	6a 0b                	push   0xb
c0023f1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f22:	50                   	push   eax
c0023f23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f29:	e8 fe ee ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f2e:	83 c4 20             	add    esp,0x20
c0023f31:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023f36:	50                   	push   eax
c0023f37:	6a 02                	push   0x2
c0023f39:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f40:	50                   	push   eax
c0023f41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f47:	e8 e0 ee ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f4c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023f51:	50                   	push   eax
c0023f52:	6a 03                	push   0x3
c0023f54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f5b:	50                   	push   eax
c0023f5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f62:	e8 c5 ee ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f67:	83 c4 20             	add    esp,0x20
c0023f6a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023f6f:	50                   	push   eax
c0023f70:	6a 04                	push   0x4
c0023f72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f79:	50                   	push   eax
c0023f7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f80:	e8 a7 ee ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023f8a:	50                   	push   eax
c0023f8b:	6a 05                	push   0x5
c0023f8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f94:	50                   	push   eax
c0023f95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f9b:	e8 8c ee ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fa0:	83 c4 20             	add    esp,0x20
c0023fa3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fa8:	0f 94 c0             	sete   al
c0023fab:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023fb0:	74 09                	je     c0023fbb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023fb2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023fb9:	eb 07                	jmp    c0023fc2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023fbb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023fc2:	0f b6 c0             	movzx  eax,al
c0023fc5:	50                   	push   eax
c0023fc6:	6a 07                	push   0x7
c0023fc8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fcf:	50                   	push   eax
c0023fd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fd6:	e8 51 ee ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fdb:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023fdf:	83 c4 10             	add    esp,0x10
c0023fe2:	85 f6                	test   esi,esi
c0023fe4:	0f 84 ba 00 00 00    	je     c00240a4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023fea:	50                   	push   eax
c0023feb:	6a 01                	push   0x1
c0023fed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff4:	50                   	push   eax
c0023ff5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ffb:	e8 ce f8 ff ff       	call   c00238ce <IDE::polling(unsigned char, unsigned int)>
c0024000:	83 c4 10             	add    esp,0x10
c0024003:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024009:	84 c0                	test   al,al
c002400b:	74 2c                	je     c0024039 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c002400d:	0f b6 f8             	movzx  edi,al
c0024010:	0f b6 d2             	movzx  edx,dl
c0024013:	57                   	push   edi
c0024014:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002401b:	50                   	push   eax
c002401c:	52                   	push   edx
c002401d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024023:	e8 f6 f7 ff ff       	call   c002381e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024028:	c7 04 24 b4 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfb4
c002402f:	e8 a5 e5 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0024034:	e9 87 00 00 00       	jmp    c00240c0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024039:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002403e:	74 33                	je     c0024073 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024040:	31 ed                	xor    ebp,ebp
c0024042:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024046:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002404a:	50                   	push   eax
c002404b:	50                   	push   eax
c002404c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024053:	50                   	push   eax
c0024054:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002405a:	e8 bb ed ff ff       	call   c0022e1a <IDE::getBase(unsigned char)>
c002405f:	89 c2                	mov    edx,eax
c0024061:	89 f8                	mov    eax,edi
c0024063:	66 ef                	out    dx,ax
c0024065:	45                   	inc    ebp
c0024066:	83 c4 10             	add    esp,0x10
c0024069:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002406f:	75 d1                	jne    c0024042 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024071:	eb 23                	jmp    c0024096 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024073:	0f b6 d2             	movzx  edx,dl
c0024076:	51                   	push   ecx
c0024077:	51                   	push   ecx
c0024078:	52                   	push   edx
c0024079:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002407f:	e8 96 ed ff ff       	call   c0022e1a <IDE::getBase(unsigned char)>
c0024084:	b9 00 01 00 00       	mov    ecx,0x100
c0024089:	89 c2                	mov    edx,eax
c002408b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002408f:	fc                   	cld    
c0024090:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024093:	83 c4 10             	add    esp,0x10
c0024096:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002409e:	4e                   	dec    esi
c002409f:	e9 3e ff ff ff       	jmp    c0023fe2 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00240a4:	31 ff                	xor    edi,edi
c00240a6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240ab:	74 16                	je     c00240c3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00240ad:	50                   	push   eax
c00240ae:	50                   	push   eax
c00240af:	31 c0                	xor    eax,eax
c00240b1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00240b6:	0f 94 c0             	sete   al
c00240b9:	50                   	push   eax
c00240ba:	53                   	push   ebx
c00240bb:	e8 ec fb ff ff       	call   c0023cac <ATA::flush(bool)>
c00240c0:	83 c4 10             	add    esp,0x10
c00240c3:	83 c4 2c             	add    esp,0x2c
c00240c6:	89 f8                	mov    eax,edi
c00240c8:	5b                   	pop    ebx
c00240c9:	5e                   	pop    esi
c00240ca:	5f                   	pop    edi
c00240cb:	5d                   	pop    ebp
c00240cc:	c3                   	ret    
c00240cd:	90                   	nop

c00240ce <ATA::read(unsigned long long, int, void*)>:
c00240ce:	57                   	push   edi
c00240cf:	b8 04 00 00 00       	mov    eax,0x4
c00240d4:	56                   	push   esi
c00240d5:	53                   	push   ebx
c00240d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00240de:	8d 7a ff             	lea    edi,[edx-0x1]
c00240e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00240e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00240e9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00240ef:	77 25                	ja     c0024116 <ATA::read(unsigned long long, int, void*)+0x48>
c00240f1:	b8 06 00 00 00       	mov    eax,0x6
c00240f6:	85 f6                	test   esi,esi
c00240f8:	74 1c                	je     c0024116 <ATA::read(unsigned long long, int, void*)+0x48>
c00240fa:	50                   	push   eax
c00240fb:	50                   	push   eax
c00240fc:	6a 00                	push   0x0
c00240fe:	56                   	push   esi
c00240ff:	52                   	push   edx
c0024100:	53                   	push   ebx
c0024101:	51                   	push   ecx
c0024102:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024106:	e8 3b fc ff ff       	call   c0023d46 <ATA::access(unsigned long long, int, void*, bool)>
c002410b:	83 c4 20             	add    esp,0x20
c002410e:	85 c0                	test   eax,eax
c0024110:	0f 95 c0             	setne  al
c0024113:	0f b6 c0             	movzx  eax,al
c0024116:	5b                   	pop    ebx
c0024117:	5e                   	pop    esi
c0024118:	5f                   	pop    edi
c0024119:	c3                   	ret    

c002411a <ATA::write(unsigned long long, int, void*)>:
c002411a:	57                   	push   edi
c002411b:	b8 04 00 00 00       	mov    eax,0x4
c0024120:	56                   	push   esi
c0024121:	53                   	push   ebx
c0024122:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024126:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002412a:	8d 7a ff             	lea    edi,[edx-0x1]
c002412d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024131:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024135:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002413b:	77 25                	ja     c0024162 <ATA::write(unsigned long long, int, void*)+0x48>
c002413d:	b8 06 00 00 00       	mov    eax,0x6
c0024142:	85 f6                	test   esi,esi
c0024144:	74 1c                	je     c0024162 <ATA::write(unsigned long long, int, void*)+0x48>
c0024146:	50                   	push   eax
c0024147:	50                   	push   eax
c0024148:	6a 01                	push   0x1
c002414a:	56                   	push   esi
c002414b:	52                   	push   edx
c002414c:	53                   	push   ebx
c002414d:	51                   	push   ecx
c002414e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024152:	e8 ef fb ff ff       	call   c0023d46 <ATA::access(unsigned long long, int, void*, bool)>
c0024157:	83 c4 20             	add    esp,0x20
c002415a:	85 c0                	test   eax,eax
c002415c:	0f 95 c0             	setne  al
c002415f:	0f b6 c0             	movzx  eax,al
c0024162:	5b                   	pop    ebx
c0024163:	5e                   	pop    esi
c0024164:	5f                   	pop    edi
c0024165:	c3                   	ret    

c0024166 <ATA::detectCHS()>:
c0024166:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002416a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024170:	c1 e0 06             	shl    eax,0x6
c0024173:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024179:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024183:	c7 44 24 04 bf bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bfbf
c002418b:	e9 b5 5b ff ff       	jmp    c0019d45 <Krnl::panic(char const*)>

c0024190 <ATA::open(int, int, void*)>:
c0024190:	53                   	push   ebx
c0024191:	83 ec 08             	sub    esp,0x8
c0024194:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024198:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002419c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00241a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00241ac:	c1 e0 06             	shl    eax,0x6
c00241af:	01 d0                	add    eax,edx
c00241b1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00241b8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00241be:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00241c5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00241cf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00241d5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00241dc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00241e3:	75 0c                	jne    c00241f1 <ATA::open(int, int, void*)+0x61>
c00241e5:	83 ec 0c             	sub    esp,0xc
c00241e8:	53                   	push   ebx
c00241e9:	e8 78 ff ff ff       	call   c0024166 <ATA::detectCHS()>
c00241ee:	83 c4 10             	add    esp,0x10
c00241f1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00241f7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00241fd:	c1 e0 06             	shl    eax,0x6
c0024200:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024207:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024211:	d1 e8                	shr    eax,1
c0024213:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024219:	6a 04                	push   0x4
c002421b:	6a 0c                	push   0xc
c002421d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024224:	50                   	push   eax
c0024225:	52                   	push   edx
c0024226:	e8 01 ec ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002422b:	90                   	nop
c002422c:	90                   	nop
c002422d:	6a 00                	push   0x0
c002422f:	6a 0c                	push   0xc
c0024231:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024238:	50                   	push   eax
c0024239:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002423f:	e8 e8 eb ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024244:	83 c4 14             	add    esp,0x14
c0024247:	53                   	push   ebx
c0024248:	e8 63 fc fe ff       	call   c0013eb0 <PhysicalDisk::startCache()>
c002424d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024250:	e8 dd 1e ff ff       	call   c0016132 <createPartitionsForDisk(PhysicalDisk*)>
c0024255:	31 c0                	xor    eax,eax
c0024257:	83 c4 18             	add    esp,0x18
c002425a:	5b                   	pop    ebx
c002425b:	c3                   	ret    

c002425c <ATAPI::write(unsigned long long, int, void*)>:
c002425c:	b8 03 00 00 00       	mov    eax,0x3
c0024261:	c3                   	ret    

c0024262 <ATAPI::close(int, int, void*)>:
c0024262:	83 ec 0c             	sub    esp,0xc
c0024265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024269:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002426f:	85 c0                	test   eax,eax
c0024271:	74 0c                	je     c002427f <ATAPI::close(int, int, void*)+0x1d>
c0024273:	83 ec 0c             	sub    esp,0xc
c0024276:	8b 10                	mov    edx,DWORD PTR [eax]
c0024278:	50                   	push   eax
c0024279:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002427c:	83 c4 10             	add    esp,0x10
c002427f:	31 c0                	xor    eax,eax
c0024281:	83 c4 0c             	add    esp,0xc
c0024284:	c3                   	ret    
c0024285:	90                   	nop

c0024286 <ATAPI::ATAPI()>:
c0024286:	83 ec 0c             	sub    esp,0xc
c0024289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002428d:	83 ec 04             	sub    esp,0x4
c0024290:	68 00 08 00 00       	push   0x800
c0024295:	68 f9 c0 02 c0       	push   0xc002c0f9
c002429a:	50                   	push   eax
c002429b:	e8 a8 fb fe ff       	call   c0013e48 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00242a0:	83 c4 10             	add    esp,0x10
c00242a3:	ba 14 c0 02 c0       	mov    edx,0xc002c014
c00242a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242ac:	89 10                	mov    DWORD PTR [eax],edx
c00242ae:	90                   	nop
c00242af:	83 c4 0c             	add    esp,0xc
c00242b2:	c3                   	ret    
c00242b3:	90                   	nop

c00242b4 <ATAPI::readyForCommand()>:
c00242b4:	56                   	push   esi
c00242b5:	53                   	push   ebx
c00242b6:	31 db                	xor    ebx,ebx
c00242b8:	50                   	push   eax
c00242b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00242bd:	50                   	push   eax
c00242be:	6a 0c                	push   0xc
c00242c0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242c7:	50                   	push   eax
c00242c8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242ce:	e8 19 ec ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00242d3:	83 c4 10             	add    esp,0x10
c00242d6:	a8 88                	test   al,0x88
c00242d8:	74 23                	je     c00242fd <ATAPI::readyForCommand()+0x49>
c00242da:	43                   	inc    ebx
c00242db:	83 fb 63             	cmp    ebx,0x63
c00242de:	7e dd                	jle    c00242bd <ATAPI::readyForCommand()+0x9>
c00242e0:	51                   	push   ecx
c00242e1:	51                   	push   ecx
c00242e2:	6a 00                	push   0x0
c00242e4:	68 40 42 0f 00       	push   0xf4240
c00242e9:	e8 bb 98 ff ff       	call   c001dba9 <nanoSleep(unsigned long long)>
c00242ee:	83 c4 10             	add    esp,0x10
c00242f1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00242f7:	75 c4                	jne    c00242bd <ATAPI::readyForCommand()+0x9>
c00242f9:	31 c0                	xor    eax,eax
c00242fb:	eb 02                	jmp    c00242ff <ATAPI::readyForCommand()+0x4b>
c00242fd:	b0 01                	mov    al,0x1
c00242ff:	5a                   	pop    edx
c0024300:	5b                   	pop    ebx
c0024301:	5e                   	pop    esi
c0024302:	c3                   	ret    
c0024303:	90                   	nop

c0024304 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024304:	55                   	push   ebp
c0024305:	57                   	push   edi
c0024306:	56                   	push   esi
c0024307:	53                   	push   ebx
c0024308:	83 ec 20             	sub    esp,0x20
c002430b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002430f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024313:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024317:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002431b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002431f:	6a 01                	push   0x1
c0024321:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024328:	50                   	push   eax
c0024329:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002432f:	e8 04 ed ff ff       	call   c0023038 <IDE::enableIRQs(unsigned char, bool)>
c0024334:	5e                   	pop    esi
c0024335:	58                   	pop    eax
c0024336:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002433d:	50                   	push   eax
c002433e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024344:	e8 bd ea ff ff       	call   c0022e06 <IDE::prepareInterrupt(unsigned char)>
c0024349:	89 3c 24             	mov    DWORD PTR [esp],edi
c002434c:	e8 63 ff ff ff       	call   c00242b4 <ATAPI::readyForCommand()>
c0024351:	83 c4 10             	add    esp,0x10
c0024354:	84 c0                	test   al,al
c0024356:	75 0a                	jne    c0024362 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024358:	bb 01 00 00 00       	mov    ebx,0x1
c002435d:	e9 57 02 00 00       	jmp    c00245b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024362:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024368:	c1 e0 04             	shl    eax,0x4
c002436b:	0f b6 c0             	movzx  eax,al
c002436e:	50                   	push   eax
c002436f:	6a 06                	push   0x6
c0024371:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024378:	50                   	push   eax
c0024379:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002437f:	e8 a8 ea ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024384:	6a 00                	push   0x0
c0024386:	6a 01                	push   0x1
c0024388:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002438f:	50                   	push   eax
c0024390:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024396:	e8 91 ea ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002439b:	83 c4 20             	add    esp,0x20
c002439e:	0f b6 c3             	movzx  eax,bl
c00243a1:	0f b6 df             	movzx  ebx,bh
c00243a4:	50                   	push   eax
c00243a5:	6a 04                	push   0x4
c00243a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243ae:	50                   	push   eax
c00243af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243b5:	e8 72 ea ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ba:	53                   	push   ebx
c00243bb:	6a 05                	push   0x5
c00243bd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243c4:	50                   	push   eax
c00243c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243cb:	e8 5c ea ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243d0:	83 c4 20             	add    esp,0x20
c00243d3:	68 a0 00 00 00       	push   0xa0
c00243d8:	6a 07                	push   0x7
c00243da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243e1:	50                   	push   eax
c00243e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243e8:	e8 3f ea ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ed:	83 c4 0c             	add    esp,0xc
c00243f0:	6a 01                	push   0x1
c00243f2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243f9:	50                   	push   eax
c00243fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024400:	e8 c9 f4 ff ff       	call   c00238ce <IDE::polling(unsigned char, unsigned int)>
c0024405:	83 c4 10             	add    esp,0x10
c0024408:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002440e:	84 c0                	test   al,al
c0024410:	74 23                	je     c0024435 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024412:	0f b6 d8             	movzx  ebx,al
c0024415:	0f b6 d2             	movzx  edx,dl
c0024418:	53                   	push   ebx
c0024419:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024420:	50                   	push   eax
c0024421:	52                   	push   edx
c0024422:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024428:	e8 f1 f3 ff ff       	call   c002381e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002442d:	83 c4 10             	add    esp,0x10
c0024430:	e9 84 01 00 00       	jmp    c00245b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024435:	0f b6 d2             	movzx  edx,dl
c0024438:	53                   	push   ebx
c0024439:	53                   	push   ebx
c002443a:	52                   	push   edx
c002443b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024441:	e8 d4 e9 ff ff       	call   c0022e1a <IDE::getBase(unsigned char)>
c0024446:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002444a:	b9 06 00 00 00       	mov    ecx,0x6
c002444f:	89 c2                	mov    edx,eax
c0024451:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024454:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024458:	83 c4 10             	add    esp,0x10
c002445b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024461:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024468:	85 db                	test   ebx,ebx
c002446a:	0f 84 ec 00 00 00    	je     c002455c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024470:	51                   	push   ecx
c0024471:	51                   	push   ecx
c0024472:	52                   	push   edx
c0024473:	50                   	push   eax
c0024474:	e8 21 eb ff ff       	call   c0022f9a <IDE::waitInterrupt(unsigned char)>
c0024479:	83 c4 10             	add    esp,0x10
c002447c:	84 c0                	test   al,al
c002447e:	0f 84 d4 fe ff ff    	je     c0024358 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024484:	56                   	push   esi
c0024485:	56                   	push   esi
c0024486:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002448d:	50                   	push   eax
c002448e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024494:	e8 6d e9 ff ff       	call   c0022e06 <IDE::prepareInterrupt(unsigned char)>
c0024499:	83 c4 0c             	add    esp,0xc
c002449c:	6a 04                	push   0x4
c002449e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244a5:	50                   	push   eax
c00244a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ac:	e8 3b ea ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00244b1:	83 c4 0c             	add    esp,0xc
c00244b4:	89 c6                	mov    esi,eax
c00244b6:	6a 05                	push   0x5
c00244b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244bf:	50                   	push   eax
c00244c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c6:	e8 21 ea ff ff       	call   c0022eec <IDE::read(unsigned char, unsigned char)>
c00244cb:	89 f1                	mov    ecx,esi
c00244cd:	0f b6 c0             	movzx  eax,al
c00244d0:	0f b6 f1             	movzx  esi,cl
c00244d3:	c1 e0 08             	shl    eax,0x8
c00244d6:	09 c6                	or     esi,eax
c00244d8:	d1 fe                	sar    esi,1
c00244da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00244de:	83 c4 10             	add    esp,0x10
c00244e1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00244e6:	74 41                	je     c0024529 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00244e8:	31 c9                	xor    ecx,ecx
c00244ea:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244f0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244f7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00244fb:	75 0a                	jne    c0024507 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00244fd:	01 c9                	add    ecx,ecx
c00244ff:	01 cd                	add    ebp,ecx
c0024501:	4b                   	dec    ebx
c0024502:	e9 54 ff ff ff       	jmp    c002445b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024507:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002450c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024510:	51                   	push   ecx
c0024511:	51                   	push   ecx
c0024512:	52                   	push   edx
c0024513:	50                   	push   eax
c0024514:	e8 01 e9 ff ff       	call   c0022e1a <IDE::getBase(unsigned char)>
c0024519:	89 c2                	mov    edx,eax
c002451b:	89 f0                	mov    eax,esi
c002451d:	66 ef                	out    dx,ax
c002451f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024523:	83 c4 10             	add    esp,0x10
c0024526:	41                   	inc    ecx
c0024527:	eb c1                	jmp    c00244ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024529:	31 f6                	xor    esi,esi
c002452b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024531:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024538:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002453c:	75 06                	jne    c0024544 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002453e:	01 f6                	add    esi,esi
c0024540:	01 f5                	add    ebp,esi
c0024542:	eb bd                	jmp    c0024501 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024544:	51                   	push   ecx
c0024545:	51                   	push   ecx
c0024546:	52                   	push   edx
c0024547:	50                   	push   eax
c0024548:	e8 cd e8 ff ff       	call   c0022e1a <IDE::getBase(unsigned char)>
c002454d:	89 c2                	mov    edx,eax
c002454f:	66 ed                	in     ax,dx
c0024551:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024556:	83 c4 10             	add    esp,0x10
c0024559:	46                   	inc    esi
c002455a:	eb cf                	jmp    c002452b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002455c:	51                   	push   ecx
c002455d:	51                   	push   ecx
c002455e:	52                   	push   edx
c002455f:	50                   	push   eax
c0024560:	e8 35 ea ff ff       	call   c0022f9a <IDE::waitInterrupt(unsigned char)>
c0024565:	83 c4 10             	add    esp,0x10
c0024568:	84 c0                	test   al,al
c002456a:	0f 84 e8 fd ff ff    	je     c0024358 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024570:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024575:	52                   	push   edx
c0024576:	52                   	push   edx
c0024577:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002457e:	50                   	push   eax
c002457f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024585:	e8 7c e8 ff ff       	call   c0022e06 <IDE::prepareInterrupt(unsigned char)>
c002458a:	83 c4 10             	add    esp,0x10
c002458d:	50                   	push   eax
c002458e:	50                   	push   eax
c002458f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024596:	50                   	push   eax
c0024597:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002459d:	e8 78 e8 ff ff       	call   c0022e1a <IDE::getBase(unsigned char)>
c00245a2:	8d 50 07             	lea    edx,[eax+0x7]
c00245a5:	ec                   	in     al,dx
c00245a6:	83 c4 10             	add    esp,0x10
c00245a9:	a8 88                	test   al,0x88
c00245ab:	74 0a                	je     c00245b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00245ad:	4b                   	dec    ebx
c00245ae:	75 dd                	jne    c002458d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00245b0:	bb 02 00 00 00       	mov    ebx,0x2
c00245b5:	eb 02                	jmp    c00245b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245b7:	31 db                	xor    ebx,ebx
c00245b9:	83 c4 1c             	add    esp,0x1c
c00245bc:	89 d8                	mov    eax,ebx
c00245be:	5b                   	pop    ebx
c00245bf:	5e                   	pop    esi
c00245c0:	5f                   	pop    edi
c00245c1:	5d                   	pop    ebp
c00245c2:	c3                   	ret    
c00245c3:	90                   	nop

c00245c4 <ATAPI::diskRemoved()>:
c00245c4:	83 ec 18             	sub    esp,0x18
c00245c7:	68 05 c1 02 c0       	push   0xc002c105
c00245cc:	e8 08 e0 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00245d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245d5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00245dc:	83 c4 1c             	add    esp,0x1c
c00245df:	c3                   	ret    

c00245e0 <ATAPI::eject()>:
c00245e0:	57                   	push   edi
c00245e1:	b9 03 00 00 00       	mov    ecx,0x3
c00245e6:	53                   	push   ebx
c00245e7:	83 ec 14             	sub    esp,0x14
c00245ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00245ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00245f2:	fc                   	cld    
c00245f3:	31 c0                	xor    eax,eax
c00245f5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00245f7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00245fc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024601:	50                   	push   eax
c0024602:	50                   	push   eax
c0024603:	6a 00                	push   0x0
c0024605:	6a 00                	push   0x0
c0024607:	6a 00                	push   0x0
c0024609:	6a 02                	push   0x2
c002460b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002460f:	50                   	push   eax
c0024610:	53                   	push   ebx
c0024611:	e8 ee fc ff ff       	call   c0024304 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024616:	83 c4 14             	add    esp,0x14
c0024619:	53                   	push   ebx
c002461a:	e8 a5 ff ff ff       	call   c00245c4 <ATAPI::diskRemoved()>
c002461f:	83 c4 24             	add    esp,0x24
c0024622:	31 c0                	xor    eax,eax
c0024624:	5b                   	pop    ebx
c0024625:	5f                   	pop    edi
c0024626:	c3                   	ret    
c0024627:	90                   	nop

c0024628 <ATAPI::diskInserted()>:
c0024628:	53                   	push   ebx
c0024629:	83 ec 14             	sub    esp,0x14
c002462c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024630:	68 1c c1 02 c0       	push   0xc002c11c
c0024635:	e8 9f df fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c002463a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024641:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024644:	e8 67 f8 fe ff       	call   c0013eb0 <PhysicalDisk::startCache()>
c0024649:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002464d:	83 c4 18             	add    esp,0x18
c0024650:	5b                   	pop    ebx
c0024651:	e9 dc 1a ff ff       	jmp    c0016132 <createPartitionsForDisk(PhysicalDisk*)>

c0024656 <ATAPI::detectMedia()>:
c0024656:	56                   	push   esi
c0024657:	53                   	push   ebx
c0024658:	83 ec 28             	sub    esp,0x28
c002465b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002465f:	6a 0c                	push   0xc
c0024661:	6a 00                	push   0x0
c0024663:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024667:	56                   	push   esi
c0024668:	e8 e3 c0 fd ff       	call   c0000750 <memset>
c002466d:	58                   	pop    eax
c002466e:	5a                   	pop    edx
c002466f:	6a 00                	push   0x0
c0024671:	6a 00                	push   0x0
c0024673:	6a 00                	push   0x0
c0024675:	6a 00                	push   0x0
c0024677:	56                   	push   esi
c0024678:	53                   	push   ebx
c0024679:	e8 86 fc ff ff       	call   c0024304 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002467e:	83 c4 1c             	add    esp,0x1c
c0024681:	6a 0c                	push   0xc
c0024683:	6a 00                	push   0x0
c0024685:	56                   	push   esi
c0024686:	e8 c5 c0 fd ff       	call   c0000750 <memset>
c002468b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024690:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024695:	59                   	pop    ecx
c0024696:	58                   	pop    eax
c0024697:	6a 01                	push   0x1
c0024699:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002469d:	50                   	push   eax
c002469e:	6a 00                	push   0x0
c00246a0:	6a 12                	push   0x12
c00246a2:	56                   	push   esi
c00246a3:	53                   	push   ebx
c00246a4:	e8 5b fc ff ff       	call   c0024304 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00246ad:	83 c4 20             	add    esp,0x20
c00246b0:	83 e0 7f             	and    eax,0x7f
c00246b3:	3c 70                	cmp    al,0x70
c00246b5:	74 15                	je     c00246cc <ATAPI::detectMedia()+0x76>
c00246b7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246be:	75 0c                	jne    c00246cc <ATAPI::detectMedia()+0x76>
c00246c0:	83 ec 0c             	sub    esp,0xc
c00246c3:	53                   	push   ebx
c00246c4:	e8 5f ff ff ff       	call   c0024628 <ATAPI::diskInserted()>
c00246c9:	83 c4 10             	add    esp,0x10
c00246cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00246d0:	83 e0 0f             	and    eax,0xf
c00246d3:	3c 02                	cmp    al,0x2
c00246d5:	75 1b                	jne    c00246f2 <ATAPI::detectMedia()+0x9c>
c00246d7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00246dc:	75 2d                	jne    c002470b <ATAPI::detectMedia()+0xb5>
c00246de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246e5:	74 24                	je     c002470b <ATAPI::detectMedia()+0xb5>
c00246e7:	83 ec 0c             	sub    esp,0xc
c00246ea:	53                   	push   ebx
c00246eb:	e8 d4 fe ff ff       	call   c00245c4 <ATAPI::diskRemoved()>
c00246f0:	eb 16                	jmp    c0024708 <ATAPI::detectMedia()+0xb2>
c00246f2:	84 c0                	test   al,al
c00246f4:	75 15                	jne    c002470b <ATAPI::detectMedia()+0xb5>
c00246f6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246fd:	75 0c                	jne    c002470b <ATAPI::detectMedia()+0xb5>
c00246ff:	83 ec 0c             	sub    esp,0xc
c0024702:	53                   	push   ebx
c0024703:	e8 20 ff ff ff       	call   c0024628 <ATAPI::diskInserted()>
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	83 c4 24             	add    esp,0x24
c002470e:	5b                   	pop    ebx
c002470f:	5e                   	pop    esi
c0024710:	c3                   	ret    
c0024711:	90                   	nop

c0024712 <ATAPI::open(int, int, void*)>:
c0024712:	53                   	push   ebx
c0024713:	83 ec 08             	sub    esp,0x8
c0024716:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002471a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002471e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024722:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024728:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002472e:	c1 e0 06             	shl    eax,0x6
c0024731:	01 d0                	add    eax,edx
c0024733:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002473a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024740:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024747:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024751:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024757:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002475e:	6a 04                	push   0x4
c0024760:	6a 0c                	push   0xc
c0024762:	51                   	push   ecx
c0024763:	52                   	push   edx
c0024764:	e8 c3 e6 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024769:	90                   	nop
c002476a:	90                   	nop
c002476b:	6a 00                	push   0x0
c002476d:	6a 0c                	push   0xc
c002476f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024776:	50                   	push   eax
c0024777:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002477d:	e8 aa e6 ff ff       	call   c0022e2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024782:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024789:	83 c4 14             	add    esp,0x14
c002478c:	53                   	push   ebx
c002478d:	e8 c4 fe ff ff       	call   c0024656 <ATAPI::detectMedia()>
c0024792:	31 c0                	xor    eax,eax
c0024794:	83 c4 18             	add    esp,0x18
c0024797:	5b                   	pop    ebx
c0024798:	c3                   	ret    
c0024799:	90                   	nop

c002479a <ATAPI::read(unsigned long long, int, void*)>:
c002479a:	55                   	push   ebp
c002479b:	57                   	push   edi
c002479c:	56                   	push   esi
c002479d:	53                   	push   ebx
c002479e:	83 ec 1c             	sub    esp,0x1c
c00247a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00247a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00247a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00247ad:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247b4:	74 41                	je     c00247f7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00247b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247ba:	b9 03 00 00 00       	mov    ecx,0x3
c00247bf:	fc                   	cld    
c00247c0:	31 c0                	xor    eax,eax
c00247c2:	86 fb                	xchg   bl,bh
c00247c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247c6:	c1 c3 10             	rol    ebx,0x10
c00247c9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00247ce:	89 e8                	mov    eax,ebp
c00247d0:	86 fb                	xchg   bl,bh
c00247d2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00247d6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00247da:	50                   	push   eax
c00247db:	50                   	push   eax
c00247dc:	55                   	push   ebp
c00247dd:	c1 e5 0b             	shl    ebp,0xb
c00247e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00247e4:	6a 00                	push   0x0
c00247e6:	55                   	push   ebp
c00247e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247eb:	50                   	push   eax
c00247ec:	56                   	push   esi
c00247ed:	e8 12 fb ff ff       	call   c0024304 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247f2:	83 c4 20             	add    esp,0x20
c00247f5:	eb 1a                	jmp    c0024811 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00247f7:	83 ec 0c             	sub    esp,0xc
c00247fa:	56                   	push   esi
c00247fb:	e8 56 fe ff ff       	call   c0024656 <ATAPI::detectMedia()>
c0024800:	83 c4 10             	add    esp,0x10
c0024803:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002480a:	75 aa                	jne    c00247b6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002480c:	b8 02 00 00 00       	mov    eax,0x2
c0024811:	83 c4 1c             	add    esp,0x1c
c0024814:	5b                   	pop    ebx
c0024815:	5e                   	pop    esi
c0024816:	5f                   	pop    edi
c0024817:	5d                   	pop    ebp
c0024818:	c3                   	ret    
c0024819:	90                   	nop

c002481a <SATA::close(int, int, void*)>:
c002481a:	83 ec 0c             	sub    esp,0xc
c002481d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024821:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024827:	85 c0                	test   eax,eax
c0024829:	74 0c                	je     c0024837 <SATA::close(int, int, void*)+0x1d>
c002482b:	83 ec 0c             	sub    esp,0xc
c002482e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024830:	50                   	push   eax
c0024831:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024834:	83 c4 10             	add    esp,0x10
c0024837:	31 c0                	xor    eax,eax
c0024839:	83 c4 0c             	add    esp,0xc
c002483c:	c3                   	ret    
c002483d:	90                   	nop

c002483e <SATA::powerSaving(PowerSavingLevel)>:
c002483e:	c3                   	ret    
c002483f:	90                   	nop

c0024840 <SATA::open(int, int, void*)>:
c0024840:	56                   	push   esi
c0024841:	53                   	push   ebx
c0024842:	50                   	push   eax
c0024843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002484b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024855:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002485b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024865:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024869:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024873:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024879:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024880:	e8 b8 b0 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024885:	89 c6                	mov    esi,eax
c0024887:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002488d:	81 c6 00 10 00 00    	add    esi,0x1000
c0024893:	e8 a5 b0 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024898:	39 c6                	cmp    esi,eax
c002489a:	74 10                	je     c00248ac <SATA::open(int, int, void*)+0x6c>
c002489c:	83 ec 0c             	sub    esp,0xc
c002489f:	68 44 c0 02 c0       	push   0xc002c044
c00248a4:	e8 9c 54 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00248a9:	83 c4 10             	add    esp,0x10
c00248ac:	83 ec 0c             	sub    esp,0xc
c00248af:	6a 02                	push   0x2
c00248b1:	e8 0d c9 fe ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c00248b6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248bc:	6a 03                	push   0x3
c00248be:	50                   	push   eax
c00248bf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00248c5:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c00248cb:	e8 b0 d0 fe ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c00248d0:	83 c4 14             	add    esp,0x14
c00248d3:	53                   	push   ebx
c00248d4:	e8 d7 f5 fe ff       	call   c0013eb0 <PhysicalDisk::startCache()>
c00248d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00248dc:	e8 51 18 ff ff       	call   c0016132 <createPartitionsForDisk(PhysicalDisk*)>
c00248e1:	83 c4 14             	add    esp,0x14
c00248e4:	31 c0                	xor    eax,eax
c00248e6:	5b                   	pop    ebx
c00248e7:	5e                   	pop    esi
c00248e8:	c3                   	ret    
c00248e9:	90                   	nop

c00248ea <SATA::SATA()>:
c00248ea:	83 ec 0c             	sub    esp,0xc
c00248ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f1:	83 ec 04             	sub    esp,0x4
c00248f4:	68 00 02 00 00       	push   0x200
c00248f9:	68 58 c0 02 c0       	push   0xc002c058
c00248fe:	50                   	push   eax
c00248ff:	e8 44 f5 fe ff       	call   c0013e48 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024904:	83 c4 10             	add    esp,0x10
c0024907:	ba c8 c0 02 c0       	mov    edx,0xc002c0c8
c002490c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024910:	89 10                	mov    DWORD PTR [eax],edx
c0024912:	90                   	nop
c0024913:	83 c4 0c             	add    esp,0xc
c0024916:	c3                   	ret    
c0024917:	90                   	nop

c0024918 <SATA::access(unsigned long long, int, void*, bool)>:
c0024918:	55                   	push   ebp
c0024919:	57                   	push   edi
c002491a:	56                   	push   esi
c002491b:	53                   	push   ebx
c002491c:	83 ec 2c             	sub    esp,0x2c
c002491f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024923:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024927:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002492b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002492f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024933:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002493c:	7e 10                	jle    c002494e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002493e:	83 ec 0c             	sub    esp,0xc
c0024941:	68 68 c0 02 c0       	push   0xc002c068
c0024946:	e8 fa 53 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c002494b:	83 c4 10             	add    esp,0x10
c002494e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024954:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002495a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024960:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024964:	89 d0                	mov    eax,edx
c0024966:	c1 e0 07             	shl    eax,0x7
c0024969:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002496d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024977:	51                   	push   ecx
c0024978:	8d 42 02             	lea    eax,[edx+0x2]
c002497b:	51                   	push   ecx
c002497c:	c1 e0 07             	shl    eax,0x7
c002497f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024983:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024987:	50                   	push   eax
c0024988:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002498e:	e8 1b f0 ff ff       	call   c00239ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024993:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024997:	83 c4 10             	add    esp,0x10
c002499a:	b8 01 00 00 00       	mov    eax,0x1
c002499f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00249a4:	0f 84 cb 01 00 00    	je     c0024b75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00249aa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00249ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249b2:	c1 e0 09             	shl    eax,0x9
c00249b5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00249ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00249be:	74 0e                	je     c00249ce <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00249c0:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00249c6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00249ca:	89 c1                	mov    ecx,eax
c00249cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00249ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00249d2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00249d8:	8d 42 02             	lea    eax,[edx+0x2]
c00249db:	c1 e0 07             	shl    eax,0x7
c00249de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00249e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00249e4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249ea:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00249f4:	c1 e1 05             	shl    ecx,0x5
c00249f7:	01 c8                	add    eax,ecx
c00249f9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00249fd:	83 e1 01             	and    ecx,0x1
c0024a00:	89 ce                	mov    esi,ecx
c0024a02:	8a 08                	mov    cl,BYTE PTR [eax]
c0024a04:	c1 e6 06             	shl    esi,0x6
c0024a07:	83 e1 bf             	and    ecx,0xffffffbf
c0024a0a:	09 f1                	or     ecx,esi
c0024a0c:	88 08                	mov    BYTE PTR [eax],cl
c0024a0e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024a10:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024a16:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024a1c:	89 08                	mov    DWORD PTR [eax],ecx
c0024a1e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024a24:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024a2a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024a30:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024a33:	50                   	push   eax
c0024a34:	68 90 00 00 00       	push   0x90
c0024a39:	6a 00                	push   0x0
c0024a3b:	56                   	push   esi
c0024a3c:	e8 0f bd fd ff       	call   c0000750 <memset>
c0024a41:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a47:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024a4b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024a51:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024a55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a59:	83 c4 10             	add    esp,0x10
c0024a5c:	48                   	dec    eax
c0024a5d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024a62:	89 c1                	mov    ecx,eax
c0024a64:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024a6a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a6f:	09 c8                	or     eax,ecx
c0024a71:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024a77:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024a7a:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024a81:	66 25 00 7f          	and    ax,0x7f00
c0024a85:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a89:	66 0d 27 80          	or     ax,0x8027
c0024a8d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024a92:	66 89 06             	mov    WORD PTR [esi],ax
c0024a95:	19 c0                	sbb    eax,eax
c0024a97:	83 e0 f0             	and    eax,0xfffffff0
c0024a9a:	83 c0 35             	add    eax,0x35
c0024a9d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024aa0:	89 e8                	mov    eax,ebp
c0024aa2:	c1 e8 10             	shr    eax,0x10
c0024aa5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024aa8:	89 e8                	mov    eax,ebp
c0024aaa:	c1 e8 18             	shr    eax,0x18
c0024aad:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024ab0:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024ab4:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024abb:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024abe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ac2:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024ac6:	89 d6                	mov    esi,edx
c0024ac8:	31 c0                	xor    eax,eax
c0024aca:	c1 e6 07             	shl    esi,0x7
c0024acd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024ad1:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024ad7:	80 e1 88             	and    cl,0x88
c0024ada:	74 0a                	je     c0024ae6 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024adc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ae1:	74 0a                	je     c0024aed <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024ae3:	40                   	inc    eax
c0024ae4:	eb eb                	jmp    c0024ad1 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024ae6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024aeb:	75 0a                	jne    c0024af7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024aed:	83 ec 0c             	sub    esp,0xc
c0024af0:	68 a1 c0 02 c0       	push   0xc002c0a1
c0024af5:	eb 56                	jmp    c0024b4d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024af7:	b8 01 00 00 00       	mov    eax,0x1
c0024afc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024b00:	c1 e2 07             	shl    edx,0x7
c0024b03:	d3 e0                	shl    eax,cl
c0024b05:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024b09:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024b0f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024b15:	85 c8                	test   eax,ecx
c0024b17:	74 20                	je     c0024b39 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024b19:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024b1f:	0f ba e1 1e          	bt     ecx,0x1e
c0024b23:	73 ea                	jae    c0024b0f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024b25:	83 ec 0c             	sub    esp,0xc
c0024b28:	68 af c0 02 c0       	push   0xc002c0af
c0024b2d:	e8 13 52 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0024b32:	83 c4 10             	add    esp,0x10
c0024b35:	31 c0                	xor    eax,eax
c0024b37:	eb 3c                	jmp    c0024b75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b39:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024b3f:	0f ba e0 1e          	bt     eax,0x1e
c0024b43:	73 17                	jae    c0024b5c <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024b45:	83 ec 0c             	sub    esp,0xc
c0024b48:	68 af c0 02 c0       	push   0xc002c0af
c0024b4d:	e8 f3 51 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0024b52:	83 c4 10             	add    esp,0x10
c0024b55:	b8 01 00 00 00       	mov    eax,0x1
c0024b5a:	eb 19                	jmp    c0024b75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b5c:	31 c0                	xor    eax,eax
c0024b5e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b63:	75 10                	jne    c0024b75 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b65:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024b6b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024b6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b75:	83 c4 2c             	add    esp,0x2c
c0024b78:	5b                   	pop    ebx
c0024b79:	5e                   	pop    esi
c0024b7a:	5f                   	pop    edi
c0024b7b:	5d                   	pop    ebp
c0024b7c:	c3                   	ret    
c0024b7d:	90                   	nop

c0024b7e <SATA::read(unsigned long long, int, void*)>:
c0024b7e:	57                   	push   edi
c0024b7f:	b8 04 00 00 00       	mov    eax,0x4
c0024b84:	56                   	push   esi
c0024b85:	53                   	push   ebx
c0024b86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b8e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024b91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024b95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024b99:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024b9f:	77 25                	ja     c0024bc6 <SATA::read(unsigned long long, int, void*)+0x48>
c0024ba1:	b8 06 00 00 00       	mov    eax,0x6
c0024ba6:	85 f6                	test   esi,esi
c0024ba8:	74 1c                	je     c0024bc6 <SATA::read(unsigned long long, int, void*)+0x48>
c0024baa:	50                   	push   eax
c0024bab:	50                   	push   eax
c0024bac:	6a 00                	push   0x0
c0024bae:	56                   	push   esi
c0024baf:	52                   	push   edx
c0024bb0:	53                   	push   ebx
c0024bb1:	51                   	push   ecx
c0024bb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024bb6:	e8 5d fd ff ff       	call   c0024918 <SATA::access(unsigned long long, int, void*, bool)>
c0024bbb:	83 c4 20             	add    esp,0x20
c0024bbe:	85 c0                	test   eax,eax
c0024bc0:	0f 95 c0             	setne  al
c0024bc3:	0f b6 c0             	movzx  eax,al
c0024bc6:	5b                   	pop    ebx
c0024bc7:	5e                   	pop    esi
c0024bc8:	5f                   	pop    edi
c0024bc9:	c3                   	ret    

c0024bca <SATA::write(unsigned long long, int, void*)>:
c0024bca:	55                   	push   ebp
c0024bcb:	b8 04 00 00 00       	mov    eax,0x4
c0024bd0:	57                   	push   edi
c0024bd1:	56                   	push   esi
c0024bd2:	53                   	push   ebx
c0024bd3:	83 ec 0c             	sub    esp,0xc
c0024bd6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024bda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024bde:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024be1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024be5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024be9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024bef:	77 3d                	ja     c0024c2e <SATA::write(unsigned long long, int, void*)+0x64>
c0024bf1:	b8 06 00 00 00       	mov    eax,0x6
c0024bf6:	85 ed                	test   ebp,ebp
c0024bf8:	74 34                	je     c0024c2e <SATA::write(unsigned long long, int, void*)+0x64>
c0024bfa:	c1 e3 09             	shl    ebx,0x9
c0024bfd:	01 eb                	add    ebx,ebp
c0024bff:	89 d6                	mov    esi,edx
c0024c01:	89 cf                	mov    edi,ecx
c0024c03:	83 c6 01             	add    esi,0x1
c0024c06:	83 d7 00             	adc    edi,0x0
c0024c09:	50                   	push   eax
c0024c0a:	50                   	push   eax
c0024c0b:	6a 01                	push   0x1
c0024c0d:	55                   	push   ebp
c0024c0e:	81 c5 00 02 00 00    	add    ebp,0x200
c0024c14:	6a 01                	push   0x1
c0024c16:	51                   	push   ecx
c0024c17:	52                   	push   edx
c0024c18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c1c:	e8 f7 fc ff ff       	call   c0024918 <SATA::access(unsigned long long, int, void*, bool)>
c0024c21:	83 c4 20             	add    esp,0x20
c0024c24:	89 f2                	mov    edx,esi
c0024c26:	89 f9                	mov    ecx,edi
c0024c28:	39 dd                	cmp    ebp,ebx
c0024c2a:	75 d3                	jne    c0024bff <SATA::write(unsigned long long, int, void*)+0x35>
c0024c2c:	31 c0                	xor    eax,eax
c0024c2e:	83 c4 0c             	add    esp,0xc
c0024c31:	5b                   	pop    ebx
c0024c32:	5e                   	pop    esi
c0024c33:	5f                   	pop    edi
c0024c34:	5d                   	pop    ebp
c0024c35:	c3                   	ret    

c0024c36 <SATAPI::write(unsigned long long, int, void*)>:
c0024c36:	b8 03 00 00 00       	mov    eax,0x3
c0024c3b:	c3                   	ret    

c0024c3c <SATAPI::close(int, int, void*)>:
c0024c3c:	83 ec 0c             	sub    esp,0xc
c0024c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c49:	85 c0                	test   eax,eax
c0024c4b:	74 0c                	je     c0024c59 <SATAPI::close(int, int, void*)+0x1d>
c0024c4d:	83 ec 0c             	sub    esp,0xc
c0024c50:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c52:	50                   	push   eax
c0024c53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c56:	83 c4 10             	add    esp,0x10
c0024c59:	31 c0                	xor    eax,eax
c0024c5b:	83 c4 0c             	add    esp,0xc
c0024c5e:	c3                   	ret    
c0024c5f:	90                   	nop

c0024c60 <SATAPI::SATAPI()>:
c0024c60:	83 ec 0c             	sub    esp,0xc
c0024c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c67:	83 ec 04             	sub    esp,0x4
c0024c6a:	68 00 08 00 00       	push   0x800
c0024c6f:	68 f8 c0 02 c0       	push   0xc002c0f8
c0024c74:	50                   	push   eax
c0024c75:	e8 ce f1 fe ff       	call   c0013e48 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c7a:	83 c4 10             	add    esp,0x10
c0024c7d:	ba a4 c1 02 c0       	mov    edx,0xc002c1a4
c0024c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c86:	89 10                	mov    DWORD PTR [eax],edx
c0024c88:	90                   	nop
c0024c89:	83 c4 0c             	add    esp,0xc
c0024c8c:	c3                   	ret    
c0024c8d:	90                   	nop

c0024c8e <SATAPI::diskRemoved()>:
c0024c8e:	83 ec 18             	sub    esp,0x18
c0024c91:	68 04 c1 02 c0       	push   0xc002c104
c0024c96:	e8 3e d9 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0024c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c9f:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024ca6:	83 c4 1c             	add    esp,0x1c
c0024ca9:	c3                   	ret    

c0024caa <SATAPI::diskInserted()>:
c0024caa:	53                   	push   ebx
c0024cab:	83 ec 14             	sub    esp,0x14
c0024cae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024cb2:	68 1b c1 02 c0       	push   0xc002c11b
c0024cb7:	e8 1d d9 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0024cbc:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cc6:	e8 e5 f1 fe ff       	call   c0013eb0 <PhysicalDisk::startCache()>
c0024ccb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024ccf:	83 c4 18             	add    esp,0x18
c0024cd2:	5b                   	pop    ebx
c0024cd3:	e9 5a 14 ff ff       	jmp    c0016132 <createPartitionsForDisk(PhysicalDisk*)>

c0024cd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cd8:	55                   	push   ebp
c0024cd9:	57                   	push   edi
c0024cda:	56                   	push   esi
c0024cdb:	53                   	push   ebx
c0024cdc:	83 ec 34             	sub    esp,0x34
c0024cdf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024ce3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ce7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024ceb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024cef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024cf3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024cf9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d03:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024d09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d0d:	c1 e0 07             	shl    eax,0x7
c0024d10:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d18:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d26:	8d 58 02             	lea    ebx,[eax+0x2]
c0024d29:	c1 e3 07             	shl    ebx,0x7
c0024d2c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024d30:	53                   	push   ebx
c0024d31:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d37:	e8 72 ec ff ff       	call   c00239ae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024d40:	83 c4 10             	add    esp,0x10
c0024d43:	b8 01 00 00 00       	mov    eax,0x1
c0024d48:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024d4d:	0f 84 85 01 00 00    	je     c0024ed8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024d53:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d5b:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d61:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d6b:	c1 e1 05             	shl    ecx,0x5
c0024d6e:	01 c8                	add    eax,ecx
c0024d70:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d72:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d78:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d7e:	89 08                	mov    DWORD PTR [eax],ecx
c0024d80:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d86:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d8c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d92:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d95:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024d98:	50                   	push   eax
c0024d99:	68 90 00 00 00       	push   0x90
c0024d9e:	6a 00                	push   0x0
c0024da0:	53                   	push   ebx
c0024da1:	e8 aa b9 fd ff       	call   c0000750 <memset>
c0024da6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024daa:	b9 0c 00 00 00       	mov    ecx,0xc
c0024daf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024db1:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024db7:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024dbb:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024dc1:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dc5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024dc9:	48                   	dec    eax
c0024dca:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024dcf:	89 c1                	mov    ecx,eax
c0024dd1:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dd7:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ddc:	09 c8                	or     eax,ecx
c0024dde:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024de4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024de7:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024dee:	66 25 00 7f          	and    ax,0x7f00
c0024df2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024df6:	66 0d 27 80          	or     ax,0x8027
c0024dfa:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024dfe:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e01:	89 d0                	mov    eax,edx
c0024e03:	c1 ea 18             	shr    edx,0x18
c0024e06:	c1 e8 10             	shr    eax,0x10
c0024e09:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024e0c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e0f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024e13:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e1a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e1d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024e21:	83 c4 10             	add    esp,0x10
c0024e24:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e28:	31 c0                	xor    eax,eax
c0024e2a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024e2e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024e34:	80 e2 88             	and    dl,0x88
c0024e37:	74 0a                	je     c0024e43 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e39:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e3e:	74 0a                	je     c0024e4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024e40:	40                   	inc    eax
c0024e41:	eb eb                	jmp    c0024e2e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024e43:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e48:	75 0f                	jne    c0024e59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024e4a:	83 ec 0c             	sub    esp,0xc
c0024e4d:	68 a1 c0 02 c0       	push   0xc002c0a1
c0024e52:	e8 ee 4e ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0024e57:	eb 3f                	jmp    c0024e98 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024e59:	ba 01 00 00 00       	mov    edx,0x1
c0024e5e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e66:	d3 e2                	shl    edx,cl
c0024e68:	c1 e0 07             	shl    eax,0x7
c0024e6b:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024e71:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e75:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024e7b:	85 ca                	test   edx,ecx
c0024e7d:	74 23                	je     c0024ea2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024e7f:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024e85:	0f ba e1 1e          	bt     ecx,0x1e
c0024e89:	73 ea                	jae    c0024e75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024e8b:	83 ec 0c             	sub    esp,0xc
c0024e8e:	68 33 c1 02 c0       	push   0xc002c133
c0024e93:	e8 41 d7 fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c0024e98:	83 c4 10             	add    esp,0x10
c0024e9b:	b8 01 00 00 00       	mov    eax,0x1
c0024ea0:	eb 36                	jmp    c0024ed8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024ea2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024ea8:	0f ba e0 1e          	bt     eax,0x1e
c0024eac:	73 0a                	jae    c0024eb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024eae:	83 ec 0c             	sub    esp,0xc
c0024eb1:	68 46 c1 02 c0       	push   0xc002c146
c0024eb6:	eb db                	jmp    c0024e93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024eb8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024ebd:	74 17                	je     c0024ed6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024ebf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024ec4:	74 10                	je     c0024ed6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024ec6:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024ecc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024ed0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024ed4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ed6:	31 c0                	xor    eax,eax
c0024ed8:	83 c4 2c             	add    esp,0x2c
c0024edb:	5b                   	pop    ebx
c0024edc:	5e                   	pop    esi
c0024edd:	5f                   	pop    edi
c0024ede:	5d                   	pop    ebp
c0024edf:	c3                   	ret    

c0024ee0 <SATAPI::eject()>:
c0024ee0:	57                   	push   edi
c0024ee1:	b9 03 00 00 00       	mov    ecx,0x3
c0024ee6:	53                   	push   ebx
c0024ee7:	83 ec 14             	sub    esp,0x14
c0024eea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024eee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024ef2:	fc                   	cld    
c0024ef3:	31 c0                	xor    eax,eax
c0024ef5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ef7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024efc:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024f01:	50                   	push   eax
c0024f02:	6a 00                	push   0x0
c0024f04:	6a 00                	push   0x0
c0024f06:	6a 00                	push   0x0
c0024f08:	6a 00                	push   0x0
c0024f0a:	6a 02                	push   0x2
c0024f0c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f10:	50                   	push   eax
c0024f11:	53                   	push   ebx
c0024f12:	e8 c1 fd ff ff       	call   c0024cd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f17:	83 c4 14             	add    esp,0x14
c0024f1a:	53                   	push   ebx
c0024f1b:	e8 6e fd ff ff       	call   c0024c8e <SATAPI::diskRemoved()>
c0024f20:	83 c4 24             	add    esp,0x24
c0024f23:	31 c0                	xor    eax,eax
c0024f25:	5b                   	pop    ebx
c0024f26:	5f                   	pop    edi
c0024f27:	c3                   	ret    

c0024f28 <SATAPI::detectMedia()>:
c0024f28:	56                   	push   esi
c0024f29:	53                   	push   ebx
c0024f2a:	83 ec 28             	sub    esp,0x28
c0024f2d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f31:	6a 0c                	push   0xc
c0024f33:	6a 00                	push   0x0
c0024f35:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f39:	56                   	push   esi
c0024f3a:	e8 11 b8 fd ff       	call   c0000750 <memset>
c0024f3f:	83 c4 0c             	add    esp,0xc
c0024f42:	6a 00                	push   0x0
c0024f44:	6a 00                	push   0x0
c0024f46:	6a 00                	push   0x0
c0024f48:	6a 00                	push   0x0
c0024f4a:	6a 00                	push   0x0
c0024f4c:	56                   	push   esi
c0024f4d:	53                   	push   ebx
c0024f4e:	e8 85 fd ff ff       	call   c0024cd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f53:	83 c4 1c             	add    esp,0x1c
c0024f56:	6a 0c                	push   0xc
c0024f58:	6a 00                	push   0x0
c0024f5a:	56                   	push   esi
c0024f5b:	e8 f0 b7 fd ff       	call   c0000750 <memset>
c0024f60:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f65:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f6a:	83 c4 0c             	add    esp,0xc
c0024f6d:	6a 01                	push   0x1
c0024f6f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f73:	50                   	push   eax
c0024f74:	6a 00                	push   0x0
c0024f76:	6a 00                	push   0x0
c0024f78:	6a 12                	push   0x12
c0024f7a:	56                   	push   esi
c0024f7b:	53                   	push   ebx
c0024f7c:	e8 57 fd ff ff       	call   c0024cd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f81:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024f85:	83 c4 20             	add    esp,0x20
c0024f88:	83 e0 7f             	and    eax,0x7f
c0024f8b:	3c 70                	cmp    al,0x70
c0024f8d:	74 15                	je     c0024fa4 <SATAPI::detectMedia()+0x7c>
c0024f8f:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f96:	75 0c                	jne    c0024fa4 <SATAPI::detectMedia()+0x7c>
c0024f98:	83 ec 0c             	sub    esp,0xc
c0024f9b:	53                   	push   ebx
c0024f9c:	e8 09 fd ff ff       	call   c0024caa <SATAPI::diskInserted()>
c0024fa1:	83 c4 10             	add    esp,0x10
c0024fa4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024fa8:	83 e0 0f             	and    eax,0xf
c0024fab:	3c 02                	cmp    al,0x2
c0024fad:	75 1b                	jne    c0024fca <SATAPI::detectMedia()+0xa2>
c0024faf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024fb4:	75 2d                	jne    c0024fe3 <SATAPI::detectMedia()+0xbb>
c0024fb6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fbd:	74 24                	je     c0024fe3 <SATAPI::detectMedia()+0xbb>
c0024fbf:	83 ec 0c             	sub    esp,0xc
c0024fc2:	53                   	push   ebx
c0024fc3:	e8 c6 fc ff ff       	call   c0024c8e <SATAPI::diskRemoved()>
c0024fc8:	eb 16                	jmp    c0024fe0 <SATAPI::detectMedia()+0xb8>
c0024fca:	84 c0                	test   al,al
c0024fcc:	75 15                	jne    c0024fe3 <SATAPI::detectMedia()+0xbb>
c0024fce:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fd5:	75 0c                	jne    c0024fe3 <SATAPI::detectMedia()+0xbb>
c0024fd7:	83 ec 0c             	sub    esp,0xc
c0024fda:	53                   	push   ebx
c0024fdb:	e8 ca fc ff ff       	call   c0024caa <SATAPI::diskInserted()>
c0024fe0:	83 c4 10             	add    esp,0x10
c0024fe3:	83 c4 24             	add    esp,0x24
c0024fe6:	5b                   	pop    ebx
c0024fe7:	5e                   	pop    esi
c0024fe8:	c3                   	ret    
c0024fe9:	90                   	nop

c0024fea <SATAPI::open(int, int, void*)>:
c0024fea:	56                   	push   esi
c0024feb:	53                   	push   ebx
c0024fec:	50                   	push   eax
c0024fed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ff5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024fff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025005:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002500f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025013:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002501d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025023:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002502a:	e8 0e a9 fe ff       	call   c000f93d <Phys::allocatePage()>
c002502f:	89 c6                	mov    esi,eax
c0025031:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025037:	81 c6 00 10 00 00    	add    esi,0x1000
c002503d:	e8 fb a8 fe ff       	call   c000f93d <Phys::allocatePage()>
c0025042:	39 c6                	cmp    esi,eax
c0025044:	74 10                	je     c0025056 <SATAPI::open(int, int, void*)+0x6c>
c0025046:	83 ec 0c             	sub    esp,0xc
c0025049:	68 5b c1 02 c0       	push   0xc002c15b
c002504e:	e8 f2 4c ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0025053:	83 c4 10             	add    esp,0x10
c0025056:	83 ec 0c             	sub    esp,0xc
c0025059:	6a 02                	push   0x2
c002505b:	e8 63 c1 fe ff       	call   c00111c3 <Virt::allocateKernelVirtualPages(int)>
c0025060:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025066:	6a 03                	push   0x3
c0025068:	50                   	push   eax
c0025069:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002506f:	ff 35 b0 d8 02 c0    	push   DWORD PTR ds:0xc002d8b0
c0025075:	e8 06 c9 fe ff       	call   c0011980 <VAS::mapPage(unsigned long, unsigned long, int)>
c002507a:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025081:	83 c4 14             	add    esp,0x14
c0025084:	53                   	push   ebx
c0025085:	e8 9e fe ff ff       	call   c0024f28 <SATAPI::detectMedia()>
c002508a:	83 c4 14             	add    esp,0x14
c002508d:	31 c0                	xor    eax,eax
c002508f:	5b                   	pop    ebx
c0025090:	5e                   	pop    esi
c0025091:	c3                   	ret    

c0025092 <SATAPI::read(unsigned long long, int, void*)>:
c0025092:	55                   	push   ebp
c0025093:	57                   	push   edi
c0025094:	56                   	push   esi
c0025095:	53                   	push   ebx
c0025096:	83 ec 1c             	sub    esp,0x1c
c0025099:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002509d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250a5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250ac:	74 19                	je     c00250c7 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00250ae:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00250b3:	7e 2e                	jle    c00250e3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250b5:	83 ec 0c             	sub    esp,0xc
c00250b8:	68 71 c1 02 c0       	push   0xc002c171
c00250bd:	e8 83 4c ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	eb 1c                	jmp    c00250e3 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250c7:	83 ec 0c             	sub    esp,0xc
c00250ca:	55                   	push   ebp
c00250cb:	e8 58 fe ff ff       	call   c0024f28 <SATAPI::detectMedia()>
c00250d0:	83 c4 10             	add    esp,0x10
c00250d3:	b8 02 00 00 00       	mov    eax,0x2
c00250d8:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250df:	75 cd                	jne    c00250ae <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00250e1:	eb 49                	jmp    c002512c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00250e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250e7:	b9 03 00 00 00       	mov    ecx,0x3
c00250ec:	fc                   	cld    
c00250ed:	31 c0                	xor    eax,eax
c00250ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250f1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00250f6:	89 d8                	mov    eax,ebx
c00250f8:	86 e0                	xchg   al,ah
c00250fa:	c1 c0 10             	rol    eax,0x10
c00250fd:	86 e0                	xchg   al,ah
c00250ff:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025103:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025107:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002510b:	50                   	push   eax
c002510c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025110:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025114:	56                   	push   esi
c0025115:	53                   	push   ebx
c0025116:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002511a:	c1 e0 0b             	shl    eax,0xb
c002511d:	50                   	push   eax
c002511e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025122:	50                   	push   eax
c0025123:	55                   	push   ebp
c0025124:	e8 af fb ff ff       	call   c0024cd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025129:	83 c4 20             	add    esp,0x20
c002512c:	83 c4 1c             	add    esp,0x1c
c002512f:	5b                   	pop    ebx
c0025130:	5e                   	pop    esi
c0025131:	5f                   	pop    edi
c0025132:	5d                   	pop    ebp
c0025133:	c3                   	ret    

c0025134 <AVX::open(int, int, void*)>:
c0025134:	83 ec 0c             	sub    esp,0xc
c0025137:	e8 3c 11 00 00       	call   c0026278 <avxInit>
c002513c:	b8 00 00 00 00       	mov    eax,0x0
c0025141:	83 c4 0c             	add    esp,0xc
c0025144:	c3                   	ret    
c0025145:	90                   	nop

c0025146 <AVX::close(int, int, void*)>:
c0025146:	83 ec 0c             	sub    esp,0xc
c0025149:	e8 2b 11 00 00       	call   c0026279 <avxClose>
c002514e:	b8 00 00 00 00       	mov    eax,0x0
c0025153:	83 c4 0c             	add    esp,0xc
c0025156:	c3                   	ret    
c0025157:	90                   	nop

c0025158 <AVX::available()>:
c0025158:	83 ec 0c             	sub    esp,0xc
c002515b:	e8 10 11 00 00       	call   c0026270 <avxDetect>
c0025160:	85 c0                	test   eax,eax
c0025162:	0f 95 c0             	setne  al
c0025165:	83 c4 0c             	add    esp,0xc
c0025168:	c3                   	ret    
c0025169:	90                   	nop

c002516a <AVX::save(void*)>:
c002516a:	83 ec 0c             	sub    esp,0xc
c002516d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025171:	83 ec 0c             	sub    esp,0xc
c0025174:	50                   	push   eax
c0025175:	e8 fc 10 00 00       	call   c0026276 <avxSave>
c002517a:	83 c4 10             	add    esp,0x10
c002517d:	90                   	nop
c002517e:	83 c4 0c             	add    esp,0xc
c0025181:	c3                   	ret    

c0025182 <AVX::load(void*)>:
c0025182:	83 ec 0c             	sub    esp,0xc
c0025185:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025189:	83 ec 0c             	sub    esp,0xc
c002518c:	50                   	push   eax
c002518d:	e8 e5 10 00 00       	call   c0026277 <avxLoad>
c0025192:	83 c4 10             	add    esp,0x10
c0025195:	90                   	nop
c0025196:	83 c4 0c             	add    esp,0xc
c0025199:	c3                   	ret    

c002519a <AVX::AVX()>:
c002519a:	83 ec 0c             	sub    esp,0xc
c002519d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a1:	83 ec 08             	sub    esp,0x8
c00251a4:	68 d4 c1 02 c0       	push   0xc002c1d4
c00251a9:	50                   	push   eax
c00251aa:	e8 77 ed fe ff       	call   c0013f26 <FPU::FPU(char const*)>
c00251af:	83 c4 10             	add    esp,0x10
c00251b2:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c00251b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251bb:	89 10                	mov    DWORD PTR [eax],edx
c00251bd:	90                   	nop
c00251be:	83 c4 0c             	add    esp,0xc
c00251c1:	c3                   	ret    

c00251c2 <MMX::available()>:
c00251c2:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00251c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251cd:	83 e0 20             	and    eax,0x20
c00251d0:	84 c0                	test   al,al
c00251d2:	0f 95 c0             	setne  al
c00251d5:	c3                   	ret    

c00251d6 <MMX::open(int, int, void*)>:
c00251d6:	83 ec 0c             	sub    esp,0xc
c00251d9:	e8 24 11 00 00       	call   c0026302 <x87Init>
c00251de:	b8 00 00 00 00       	mov    eax,0x0
c00251e3:	83 c4 0c             	add    esp,0xc
c00251e6:	c3                   	ret    
c00251e7:	90                   	nop

c00251e8 <MMX::close(int, int, void*)>:
c00251e8:	83 ec 0c             	sub    esp,0xc
c00251eb:	e8 2c 11 00 00       	call   c002631c <x87Close>
c00251f0:	b8 00 00 00 00       	mov    eax,0x0
c00251f5:	83 c4 0c             	add    esp,0xc
c00251f8:	c3                   	ret    
c00251f9:	90                   	nop

c00251fa <MMX::save(void*)>:
c00251fa:	83 ec 0c             	sub    esp,0xc
c00251fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025201:	83 ec 0c             	sub    esp,0xc
c0025204:	50                   	push   eax
c0025205:	e8 e7 10 00 00       	call   c00262f1 <x87Save>
c002520a:	83 c4 10             	add    esp,0x10
c002520d:	90                   	nop
c002520e:	83 c4 0c             	add    esp,0xc
c0025211:	c3                   	ret    

c0025212 <MMX::load(void*)>:
c0025212:	83 ec 0c             	sub    esp,0xc
c0025215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025219:	83 ec 0c             	sub    esp,0xc
c002521c:	50                   	push   eax
c002521d:	e8 d8 10 00 00       	call   c00262fa <x87Load>
c0025222:	83 c4 10             	add    esp,0x10
c0025225:	90                   	nop
c0025226:	83 c4 0c             	add    esp,0xc
c0025229:	c3                   	ret    

c002522a <MMX::MMX()>:
c002522a:	83 ec 0c             	sub    esp,0xc
c002522d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025231:	83 ec 08             	sub    esp,0x8
c0025234:	68 14 c2 02 c0       	push   0xc002c214
c0025239:	50                   	push   eax
c002523a:	e8 e7 ec fe ff       	call   c0013f26 <FPU::FPU(char const*)>
c002523f:	83 c4 10             	add    esp,0x10
c0025242:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0025247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524b:	89 10                	mov    DWORD PTR [eax],edx
c002524d:	90                   	nop
c002524e:	83 c4 0c             	add    esp,0xc
c0025251:	c3                   	ret    

c0025252 <SSE::open(int, int, void*)>:
c0025252:	83 ec 0c             	sub    esp,0xc
c0025255:	e8 5a 10 00 00       	call   c00262b4 <sseInit>
c002525a:	b8 00 00 00 00       	mov    eax,0x0
c002525f:	83 c4 0c             	add    esp,0xc
c0025262:	c3                   	ret    
c0025263:	90                   	nop

c0025264 <SSE::close(int, int, void*)>:
c0025264:	83 ec 0c             	sub    esp,0xc
c0025267:	e8 58 10 00 00       	call   c00262c4 <sseClose>
c002526c:	b8 00 00 00 00       	mov    eax,0x0
c0025271:	83 c4 0c             	add    esp,0xc
c0025274:	c3                   	ret    
c0025275:	90                   	nop

c0025276 <SSE::available()>:
c0025276:	83 ec 1c             	sub    esp,0x1c
c0025279:	e8 12 10 00 00       	call   c0026290 <absolutelyNoChanceInHell>
c002527e:	85 c0                	test   eax,eax
c0025280:	0f 95 c0             	setne  al
c0025283:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025287:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002528b:	83 c4 1c             	add    esp,0x1c
c002528e:	c3                   	ret    
c002528f:	90                   	nop

c0025290 <SSE::save(void*)>:
c0025290:	83 ec 0c             	sub    esp,0xc
c0025293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025297:	83 ec 0c             	sub    esp,0xc
c002529a:	50                   	push   eax
c002529b:	e8 08 10 00 00       	call   c00262a8 <sseSave>
c00252a0:	83 c4 10             	add    esp,0x10
c00252a3:	90                   	nop
c00252a4:	83 c4 0c             	add    esp,0xc
c00252a7:	c3                   	ret    

c00252a8 <SSE::load(void*)>:
c00252a8:	83 ec 0c             	sub    esp,0xc
c00252ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252af:	83 ec 0c             	sub    esp,0xc
c00252b2:	50                   	push   eax
c00252b3:	e8 f6 0f 00 00       	call   c00262ae <sseLoad>
c00252b8:	83 c4 10             	add    esp,0x10
c00252bb:	90                   	nop
c00252bc:	83 c4 0c             	add    esp,0xc
c00252bf:	c3                   	ret    

c00252c0 <SSE::SSE()>:
c00252c0:	83 ec 0c             	sub    esp,0xc
c00252c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c7:	83 ec 08             	sub    esp,0x8
c00252ca:	68 54 c2 02 c0       	push   0xc002c254
c00252cf:	50                   	push   eax
c00252d0:	e8 51 ec fe ff       	call   c0013f26 <FPU::FPU(char const*)>
c00252d5:	83 c4 10             	add    esp,0x10
c00252d8:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c00252dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e1:	89 10                	mov    DWORD PTR [eax],edx
c00252e3:	90                   	nop
c00252e4:	83 c4 0c             	add    esp,0xc
c00252e7:	c3                   	ret    

c00252e8 <x87::open(int, int, void*)>:
c00252e8:	83 ec 0c             	sub    esp,0xc
c00252eb:	e8 12 10 00 00       	call   c0026302 <x87Init>
c00252f0:	b8 00 00 00 00       	mov    eax,0x0
c00252f5:	83 c4 0c             	add    esp,0xc
c00252f8:	c3                   	ret    
c00252f9:	90                   	nop

c00252fa <x87::close(int, int, void*)>:
c00252fa:	83 ec 0c             	sub    esp,0xc
c00252fd:	e8 1a 10 00 00       	call   c002631c <x87Close>
c0025302:	b8 00 00 00 00       	mov    eax,0x0
c0025307:	83 c4 0c             	add    esp,0xc
c002530a:	c3                   	ret    
c002530b:	90                   	nop

c002530c <x87::available()>:
c002530c:	83 ec 0c             	sub    esp,0xc
c002530f:	e8 c2 0f 00 00       	call   c00262d6 <x87Detect>
c0025314:	85 c0                	test   eax,eax
c0025316:	0f 95 c0             	setne  al
c0025319:	83 c4 0c             	add    esp,0xc
c002531c:	c3                   	ret    
c002531d:	90                   	nop

c002531e <x87::save(void*)>:
c002531e:	83 ec 0c             	sub    esp,0xc
c0025321:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025325:	83 ec 0c             	sub    esp,0xc
c0025328:	50                   	push   eax
c0025329:	e8 c3 0f 00 00       	call   c00262f1 <x87Save>
c002532e:	83 c4 10             	add    esp,0x10
c0025331:	90                   	nop
c0025332:	83 c4 0c             	add    esp,0xc
c0025335:	c3                   	ret    

c0025336 <x87::load(void*)>:
c0025336:	83 ec 0c             	sub    esp,0xc
c0025339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002533d:	83 ec 0c             	sub    esp,0xc
c0025340:	50                   	push   eax
c0025341:	e8 b4 0f 00 00       	call   c00262fa <x87Load>
c0025346:	83 c4 10             	add    esp,0x10
c0025349:	90                   	nop
c002534a:	83 c4 0c             	add    esp,0xc
c002534d:	c3                   	ret    

c002534e <x87::x87()>:
c002534e:	83 ec 0c             	sub    esp,0xc
c0025351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025355:	83 ec 08             	sub    esp,0x8
c0025358:	68 94 c2 02 c0       	push   0xc002c294
c002535d:	50                   	push   eax
c002535e:	e8 c3 eb fe ff       	call   c0013f26 <FPU::FPU(char const*)>
c0025363:	83 c4 10             	add    esp,0x10
c0025366:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c002536b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536f:	89 10                	mov    DWORD PTR [eax],edx
c0025371:	90                   	nop
c0025372:	83 c4 0c             	add    esp,0xc
c0025375:	c3                   	ret    

c0025376 <APIC::disable()>:
c0025376:	90                   	nop
c0025377:	c3                   	ret    

c0025378 <APIC::close(int, int, void*)>:
c0025378:	55                   	push   ebp
c0025379:	89 e5                	mov    ebp,esp
c002537b:	83 ec 08             	sub    esp,0x8
c002537e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025381:	8b 00                	mov    eax,DWORD PTR [eax]
c0025383:	83 c0 3c             	add    eax,0x3c
c0025386:	8b 00                	mov    eax,DWORD PTR [eax]
c0025388:	83 ec 0c             	sub    esp,0xc
c002538b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002538e:	ff d0                	call   eax
c0025390:	83 c4 10             	add    esp,0x10
c0025393:	b8 00 00 00 00       	mov    eax,0x0
c0025398:	c9                   	leave  
c0025399:	c3                   	ret    

c002539a <IOAPIC::close(int, int, void*)>:
c002539a:	b8 00 00 00 00       	mov    eax,0x0
c002539f:	c3                   	ret    

c00253a0 <APIC::io_wait()>:
c00253a0:	eb 00                	jmp    c00253a2 <APIC::io_wait()+0x2>
c00253a2:	eb 00                	jmp    c00253a4 <APIC::io_wait()+0x4>
c00253a4:	90                   	nop
c00253a5:	c3                   	ret    

c00253a6 <APIC::getBase()>:
c00253a6:	55                   	push   ebp
c00253a7:	89 e5                	mov    ebp,esp
c00253a9:	83 ec 18             	sub    esp,0x18
c00253ac:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00253b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253b7:	83 e0 08             	and    eax,0x8
c00253ba:	84 c0                	test   al,al
c00253bc:	75 07                	jne    c00253c5 <APIC::getBase()+0x1f>
c00253be:	b8 00 00 00 00       	mov    eax,0x0
c00253c3:	eb 21                	jmp    c00253e6 <APIC::getBase()+0x40>
c00253c5:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00253ca:	83 ec 08             	sub    esp,0x8
c00253cd:	6a 1b                	push   0x1b
c00253cf:	50                   	push   eax
c00253d0:	e8 6b 97 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00253d5:	83 c4 10             	add    esp,0x10
c00253d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00253e6:	c9                   	leave  
c00253e7:	c3                   	ret    

c00253e8 <APIC::eoi(unsigned char)>:
c00253e8:	55                   	push   ebp
c00253e9:	89 e5                	mov    ebp,esp
c00253eb:	83 ec 28             	sub    esp,0x28
c00253ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00253f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00253f4:	83 ec 0c             	sub    esp,0xc
c00253f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253fa:	e8 a7 ff ff ff       	call   c00253a6 <APIC::getBase()>
c00253ff:	83 c4 10             	add    esp,0x10
c0025402:	05 b0 00 00 00       	add    eax,0xb0
c0025407:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002540a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002540d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025413:	90                   	nop
c0025414:	c9                   	leave  
c0025415:	c3                   	ret    

c0025416 <APIC::open(int, int, void*)>:
c0025416:	55                   	push   ebp
c0025417:	89 e5                	mov    ebp,esp
c0025419:	57                   	push   edi
c002541a:	56                   	push   esi
c002541b:	53                   	push   ebx
c002541c:	83 ec 2c             	sub    esp,0x2c
c002541f:	83 ec 0c             	sub    esp,0xc
c0025422:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025425:	e8 7c ff ff ff       	call   c00253a6 <APIC::getBase()>
c002542a:	83 c4 10             	add    esp,0x10
c002542d:	89 c2                	mov    edx,eax
c002542f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025432:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025438:	0f b6 f8             	movzx  edi,al
c002543b:	89 d0                	mov    eax,edx
c002543d:	ba 00 00 00 00       	mov    edx,0x0
c0025442:	89 c1                	mov    ecx,eax
c0025444:	80 e5 ff             	and    ch,0xff
c0025447:	89 cb                	mov    ebx,ecx
c0025449:	0f b6 f2             	movzx  esi,dl
c002544c:	89 d8                	mov    eax,ebx
c002544e:	89 f2                	mov    edx,esi
c0025450:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025453:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025456:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002545a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002545e:	83 e0 00             	and    eax,0x0
c0025461:	09 d0                	or     eax,edx
c0025463:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002546a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025470:	8d 50 01             	lea    edx,[eax+0x1]
c0025473:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025476:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002547c:	0f b6 d0             	movzx  edx,al
c002547f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025482:	83 c2 08             	add    edx,0x8
c0025485:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025489:	0f b6 c9             	movzx  ecx,cl
c002548c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025492:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025496:	83 ec 0c             	sub    esp,0xc
c0025499:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002549c:	e8 05 ff ff ff       	call   c00253a6 <APIC::getBase()>
c00254a1:	83 c4 10             	add    esp,0x10
c00254a4:	05 f0 00 00 00       	add    eax,0xf0
c00254a9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00254ac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254af:	8b 00                	mov    eax,DWORD PTR [eax]
c00254b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00254b4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00254bb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254c2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254c5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254c8:	89 10                	mov    DWORD PTR [eax],edx
c00254ca:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254d1:	a1 10 00 03 c0       	mov    eax,ds:0xc0030010
c00254d6:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00254d9:	7d 7c                	jge    c0025557 <APIC::open(int, int, void*)+0x141>
c00254db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254de:	8b 04 85 20 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcffe0]
c00254e5:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00254e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254eb:	8b 04 85 20 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcffe0]
c00254f2:	c1 e8 08             	shr    eax,0x8
c00254f5:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00254f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254fc:	8b 04 85 20 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcffe0]
c0025503:	c1 e8 18             	shr    eax,0x18
c0025506:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025509:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002550d:	75 40                	jne    c002554f <APIC::open(int, int, void*)+0x139>
c002550f:	83 ec 0c             	sub    esp,0xc
c0025512:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025515:	e8 8c fe ff ff       	call   c00253a6 <APIC::getBase()>
c002551a:	83 c4 10             	add    esp,0x10
c002551d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025521:	75 07                	jne    c002552a <APIC::open(int, int, void*)+0x114>
c0025523:	ba 60 03 00 00       	mov    edx,0x360
c0025528:	eb 05                	jmp    c002552f <APIC::open(int, int, void*)+0x119>
c002552a:	ba 50 03 00 00       	mov    edx,0x350
c002552f:	01 d0                	add    eax,edx
c0025531:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025534:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025537:	8b 00                	mov    eax,DWORD PTR [eax]
c0025539:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002553c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025543:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025547:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002554a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002554d:	89 10                	mov    DWORD PTR [eax],edx
c002554f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025552:	e9 7a ff ff ff       	jmp    c00254d1 <APIC::open(int, int, void*)+0xbb>
c0025557:	b8 00 00 00 00       	mov    eax,0x0
c002555c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002555f:	5b                   	pop    ebx
c0025560:	5e                   	pop    esi
c0025561:	5f                   	pop    edi
c0025562:	5d                   	pop    ebp
c0025563:	c3                   	ret    

c0025564 <IOAPIC::IOAPIC()>:
c0025564:	83 ec 0c             	sub    esp,0xc
c0025567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556b:	83 ec 08             	sub    esp,0x8
c002556e:	68 d4 c2 02 c0       	push   0xc002c2d4
c0025573:	50                   	push   eax
c0025574:	e8 9d e6 fe ff       	call   c0013c16 <Device::Device(char const*)>
c0025579:	83 c4 10             	add    esp,0x10
c002557c:	ba fc c3 02 c0       	mov    edx,0xc002c3fc
c0025581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025585:	89 10                	mov    DWORD PTR [eax],edx
c0025587:	90                   	nop
c0025588:	83 c4 0c             	add    esp,0xc
c002558b:	c3                   	ret    

c002558c <APIC::APIC()>:
c002558c:	53                   	push   ebx
c002558d:	83 ec 18             	sub    esp,0x18
c0025590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025594:	83 ec 08             	sub    esp,0x8
c0025597:	68 dc c2 02 c0       	push   0xc002c2dc
c002559c:	50                   	push   eax
c002559d:	e8 de ed fe ff       	call   c0014380 <InterruptController::InterruptController(char const*)>
c00255a2:	83 c4 10             	add    esp,0x10
c00255a5:	ba b4 c3 02 c0       	mov    edx,0xc002c3b4
c00255aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255ae:	89 10                	mov    DWORD PTR [eax],edx
c00255b0:	a0 e0 1a 03 c0       	mov    al,ds:0xc0031ae0
c00255b5:	83 f0 01             	xor    eax,0x1
c00255b8:	84 c0                	test   al,al
c00255ba:	0f 84 a1 00 00 00    	je     c0025661 <APIC::APIC()+0xd5>
c00255c0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255c5:	a0 c0 00 03 c0       	mov    al,ds:0xc00300c0
c00255ca:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255ce:	0f 83 86 00 00 00    	jae    c002565a <APIC::APIC()+0xce>
c00255d4:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00255dc:	83 ec 0c             	sub    esp,0xc
c00255df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00255e3:	e8 b1 9f fe ff       	call   c000f599 <malloc>
c00255e8:	83 c4 10             	add    esp,0x10
c00255eb:	89 c3                	mov    ebx,eax
c00255ed:	83 ec 0c             	sub    esp,0xc
c00255f0:	53                   	push   ebx
c00255f1:	e8 6e ff ff ff       	call   c0025564 <IOAPIC::IOAPIC()>
c00255f6:	83 c4 10             	add    esp,0x10
c00255f9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00255fd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025602:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025606:	89 14 85 c0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce540],edx
c002560d:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c0025612:	40                   	inc    eax
c0025613:	a3 a0 1a 03 c0       	mov    ds:0xc0031aa0,eax
c0025618:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c002561d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025623:	83 ec 08             	sub    esp,0x8
c0025626:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002562a:	50                   	push   eax
c002562b:	e8 e2 e3 fe ff       	call   c0013a12 <Device::addChild(Device*)>
c0025630:	83 c4 10             	add    esp,0x10
c0025633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025637:	8b 00                	mov    eax,DWORD PTR [eax]
c0025639:	83 c0 08             	add    eax,0x8
c002563c:	8b 00                	mov    eax,DWORD PTR [eax]
c002563e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025643:	6a 00                	push   0x0
c0025645:	6a 00                	push   0x0
c0025647:	52                   	push   edx
c0025648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002564c:	ff d0                	call   eax
c002564e:	83 c4 10             	add    esp,0x10
c0025651:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025655:	e9 6b ff ff ff       	jmp    c00255c5 <APIC::APIC()+0x39>
c002565a:	c6 05 e0 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ae0,0x1
c0025661:	90                   	nop
c0025662:	83 c4 18             	add    esp,0x18
c0025665:	5b                   	pop    ebx
c0025666:	c3                   	ret    
c0025667:	90                   	nop

c0025668 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025668:	55                   	push   ebp
c0025669:	89 e5                	mov    ebp,esp
c002566b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002566e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025674:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025677:	72 1d                	jb     c0025696 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002567c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025685:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002568b:	01 d0                	add    eax,edx
c002568d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025690:	73 04                	jae    c0025696 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025692:	b0 01                	mov    al,0x1
c0025694:	eb 02                	jmp    c0025698 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025696:	b0 00                	mov    al,0x0
c0025698:	5d                   	pop    ebp
c0025699:	c3                   	ret    

c002569a <IOAPIC::read(int)>:
c002569a:	55                   	push   ebp
c002569b:	89 e5                	mov    ebp,esp
c002569d:	83 ec 10             	sub    esp,0x10
c00256a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256a9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256af:	0f b6 d0             	movzx  edx,al
c00256b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256b5:	89 10                	mov    DWORD PTR [eax],edx
c00256b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256ba:	83 c0 10             	add    eax,0x10
c00256bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00256bf:	c9                   	leave  
c00256c0:	c3                   	ret    
c00256c1:	90                   	nop

c00256c2 <IOAPIC::open(int, int, void*)>:
c00256c2:	55                   	push   ebp
c00256c3:	89 e5                	mov    ebp,esp
c00256c5:	57                   	push   edi
c00256c6:	56                   	push   esi
c00256c7:	53                   	push   ebx
c00256c8:	83 ec 0c             	sub    esp,0xc
c00256cb:	83 ec 0c             	sub    esp,0xc
c00256ce:	68 07 c3 02 c0       	push   0xc002c307
c00256d3:	e8 01 cf fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c00256d8:	83 c4 10             	add    esp,0x10
c00256db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256e1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00256e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256f0:	8b 14 85 00 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcff00]
c00256f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025703:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025709:	8b 14 85 80 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfe80]
c0025710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025713:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002571c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025725:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002572b:	0f b6 f8             	movzx  edi,al
c002572e:	89 d0                	mov    eax,edx
c0025730:	ba 00 00 00 00       	mov    edx,0x0
c0025735:	89 c1                	mov    ecx,eax
c0025737:	80 e5 ff             	and    ch,0xff
c002573a:	89 cb                	mov    ebx,ecx
c002573c:	0f b6 f2             	movzx  esi,dl
c002573f:	89 d8                	mov    eax,ebx
c0025741:	89 f2                	mov    edx,esi
c0025743:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025746:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025749:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002574d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025751:	83 e0 00             	and    eax,0x0
c0025754:	09 d0                	or     eax,edx
c0025756:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002575a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002575d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025763:	8d 50 01             	lea    edx,[eax+0x1]
c0025766:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025769:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002576f:	0f b6 d0             	movzx  edx,al
c0025772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025775:	83 c2 08             	add    edx,0x8
c0025778:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002577c:	0f b6 c9             	movzx  ecx,cl
c002577f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025785:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025789:	83 ec 08             	sub    esp,0x8
c002578c:	6a 01                	push   0x1
c002578e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025791:	e8 04 ff ff ff       	call   c002569a <IOAPIC::read(int)>
c0025796:	83 c4 10             	add    esp,0x10
c0025799:	c1 f8 10             	sar    eax,0x10
c002579c:	0f b6 c0             	movzx  eax,al
c002579f:	8d 50 01             	lea    edx,[eax+0x1]
c00257a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257a5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00257ab:	b8 00 00 00 00       	mov    eax,0x0
c00257b0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257b3:	5b                   	pop    ebx
c00257b4:	5e                   	pop    esi
c00257b5:	5f                   	pop    edi
c00257b6:	5d                   	pop    ebp
c00257b7:	c3                   	ret    

c00257b8 <IOAPIC::write(int, int)>:
c00257b8:	55                   	push   ebp
c00257b9:	89 e5                	mov    ebp,esp
c00257bb:	83 ec 10             	sub    esp,0x10
c00257be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257c7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257cd:	0f b6 d0             	movzx  edx,al
c00257d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257d3:	89 10                	mov    DWORD PTR [eax],edx
c00257d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257d8:	8d 50 10             	lea    edx,[eax+0x10]
c00257db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257de:	89 02                	mov    DWORD PTR [edx],eax
c00257e0:	90                   	nop
c00257e1:	c9                   	leave  
c00257e2:	c3                   	ret    
c00257e3:	90                   	nop

c00257e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00257e4:	55                   	push   ebp
c00257e5:	89 e5                	mov    ebp,esp
c00257e7:	53                   	push   ebx
c00257e8:	83 ec 2c             	sub    esp,0x2c
c00257eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257ee:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00257f1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00257f4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00257f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025800:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025803:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025806:	88 d8                	mov    al,bl
c0025808:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002580b:	88 c8                	mov    al,cl
c002580d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025810:	88 d0                	mov    al,dl
c0025812:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025815:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025819:	83 c0 08             	add    eax,0x8
c002581c:	01 c0                	add    eax,eax
c002581e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025821:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025825:	83 c0 08             	add    eax,0x8
c0025828:	01 c0                	add    eax,eax
c002582a:	40                   	inc    eax
c002582b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002582e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025831:	50                   	push   eax
c0025832:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025835:	e8 60 fe ff ff       	call   c002569a <IOAPIC::read(int)>
c002583a:	83 c4 08             	add    esp,0x8
c002583d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025840:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025847:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002584a:	c1 e0 18             	shl    eax,0x18
c002584d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025850:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025853:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025856:	52                   	push   edx
c0025857:	50                   	push   eax
c0025858:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585b:	e8 58 ff ff ff       	call   c00257b8 <IOAPIC::write(int, int)>
c0025860:	83 c4 0c             	add    esp,0xc
c0025863:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025866:	50                   	push   eax
c0025867:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002586a:	e8 2b fe ff ff       	call   c002569a <IOAPIC::read(int)>
c002586f:	83 c4 08             	add    esp,0x8
c0025872:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025875:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002587c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025883:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002588a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002588e:	74 09                	je     c0025899 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025890:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025897:	eb 07                	jmp    c00258a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025899:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00258a0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00258a4:	74 09                	je     c00258af <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00258a6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00258ad:	eb 07                	jmp    c00258b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00258af:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00258b6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00258bd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00258c1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258c4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258ca:	52                   	push   edx
c00258cb:	50                   	push   eax
c00258cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258cf:	e8 e4 fe ff ff       	call   c00257b8 <IOAPIC::write(int, int)>
c00258d4:	83 c4 0c             	add    esp,0xc
c00258d7:	90                   	nop
c00258d8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00258db:	c9                   	leave  
c00258dc:	c3                   	ret    
c00258dd:	90                   	nop

c00258de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00258de:	55                   	push   ebp
c00258df:	89 e5                	mov    ebp,esp
c00258e1:	57                   	push   edi
c00258e2:	56                   	push   esi
c00258e3:	53                   	push   ebx
c00258e4:	83 ec 2c             	sub    esp,0x2c
c00258e7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258ea:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258ed:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00258f1:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00258f5:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258f9:	74 5a                	je     c0025955 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00258fb:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00258ff:	7f 44                	jg     c0025945 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025901:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025904:	05 a0 c9 02 c0       	add    eax,0xc002c9a0
c0025909:	8a 00                	mov    al,BYTE PTR [eax]
c002590b:	0f b6 c0             	movzx  eax,al
c002590e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025911:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025914:	66 8b 84 00 a0 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcff60]
c002591c:	0f b7 c0             	movzx  eax,ax
c002591f:	83 e0 02             	and    eax,0x2
c0025922:	85 c0                	test   eax,eax
c0025924:	74 04                	je     c002592a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025926:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002592a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002592d:	66 8b 84 00 a0 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcff60]
c0025935:	0f b7 c0             	movzx  eax,ax
c0025938:	83 e0 08             	and    eax,0x8
c002593b:	85 c0                	test   eax,eax
c002593d:	74 16                	je     c0025955 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002593f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025943:	eb 10                	jmp    c0025955 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025945:	83 ec 0c             	sub    esp,0xc
c0025948:	68 18 c3 02 c0       	push   0xc002c318
c002594d:	e8 f3 43 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0025952:	83 c4 10             	add    esp,0x10
c0025955:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025959:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002595e:	83 ec 08             	sub    esp,0x8
c0025961:	50                   	push   eax
c0025962:	68 50 c3 02 c0       	push   0xc002c350
c0025967:	e8 6d cc fe ff       	call   c00125d9 <Dbg::kprintf(char const*, ...)>
c002596c:	83 c4 10             	add    esp,0x10
c002596f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025976:	a1 a0 1a 03 c0       	mov    eax,ds:0xc0031aa0
c002597b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002597e:	7d 67                	jge    c00259e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025980:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025983:	8b 04 85 c0 1a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce540]
c002598a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002598d:	83 ec 08             	sub    esp,0x8
c0025990:	52                   	push   edx
c0025991:	50                   	push   eax
c0025992:	e8 d1 fc ff ff       	call   c0025668 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025997:	83 c4 10             	add    esp,0x10
c002599a:	84 c0                	test   al,al
c002599c:	74 44                	je     c00259e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002599e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259a1:	8b 1c 85 c0 1a 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce540]
c00259a8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00259ac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259af:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00259b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259b6:	83 c0 20             	add    eax,0x20
c00259b9:	0f b6 f0             	movzx  esi,al
c00259bc:	b8 00 00 00 00       	mov    eax,0x0
c00259c1:	99                   	cdq    
c00259c2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259c5:	0f b6 c9             	movzx  ecx,cl
c00259c8:	83 ec 04             	sub    esp,0x4
c00259cb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259ce:	57                   	push   edi
c00259cf:	56                   	push   esi
c00259d0:	52                   	push   edx
c00259d1:	50                   	push   eax
c00259d2:	51                   	push   ecx
c00259d3:	53                   	push   ebx
c00259d4:	e8 0b fe ff ff       	call   c00257e4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00259d9:	83 c4 20             	add    esp,0x20
c00259dc:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00259e0:	eb 05                	jmp    c00259e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259e2:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00259e5:	eb 8f                	jmp    c0025976 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00259e7:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00259ea:	83 f0 01             	xor    eax,0x1
c00259ed:	84 c0                	test   al,al
c00259ef:	74 10                	je     c0025a01 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00259f1:	83 ec 0c             	sub    esp,0xc
c00259f4:	68 67 c3 02 c0       	push   0xc002c367
c00259f9:	e8 47 43 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00259fe:	83 c4 10             	add    esp,0x10
c0025a01:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025a05:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025a0c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025a10:	7f 65                	jg     c0025a77 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a18:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a1f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a22:	01 ca                	add    edx,ecx
c0025a24:	83 c2 54             	add    edx,0x54
c0025a27:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a2b:	85 c0                	test   eax,eax
c0025a2d:	75 43                	jne    c0025a72 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a35:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a3c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a3f:	01 ca                	add    edx,ecx
c0025a41:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a44:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a47:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a51:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a58:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a5b:	01 ca                	add    edx,ecx
c0025a5d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a63:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a66:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a6d:	83 e8 20             	sub    eax,0x20
c0025a70:	eb 1a                	jmp    c0025a8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a72:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a75:	eb 95                	jmp    c0025a0c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a77:	83 ec 0c             	sub    esp,0xc
c0025a7a:	68 74 c3 02 c0       	push   0xc002c374
c0025a7f:	e8 c1 42 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0025a84:	83 c4 10             	add    esp,0x10
c0025a87:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025a8c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a8f:	5b                   	pop    ebx
c0025a90:	5e                   	pop    esi
c0025a91:	5f                   	pop    edi
c0025a92:	5d                   	pop    ebp
c0025a93:	c3                   	ret    

c0025a94 <PIC::disable()>:
c0025a94:	55                   	push   ebp
c0025a95:	89 e5                	mov    ebp,esp
c0025a97:	83 ec 10             	sub    esp,0x10
c0025a9a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025aa0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025aa4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025aa7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025aab:	ee                   	out    dx,al
c0025aac:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ab2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025ab6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ab9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025abd:	ee                   	out    dx,al
c0025abe:	90                   	nop
c0025abf:	c9                   	leave  
c0025ac0:	c3                   	ret    
c0025ac1:	90                   	nop

c0025ac2 <PIC::close(int, int, void*)>:
c0025ac2:	55                   	push   ebp
c0025ac3:	89 e5                	mov    ebp,esp
c0025ac5:	83 ec 08             	sub    esp,0x8
c0025ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0025acd:	83 c0 3c             	add    eax,0x3c
c0025ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ad8:	ff d0                	call   eax
c0025ada:	83 c4 10             	add    esp,0x10
c0025add:	b8 00 00 00 00       	mov    eax,0x0
c0025ae2:	c9                   	leave  
c0025ae3:	c3                   	ret    

c0025ae4 <PIC::PIC()>:
c0025ae4:	83 ec 0c             	sub    esp,0xc
c0025ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aeb:	83 ec 08             	sub    esp,0x8
c0025aee:	68 20 c4 02 c0       	push   0xc002c420
c0025af3:	50                   	push   eax
c0025af4:	e8 87 e8 fe ff       	call   c0014380 <InterruptController::InterruptController(char const*)>
c0025af9:	83 c4 10             	add    esp,0x10
c0025afc:	ba 4c c4 02 c0       	mov    edx,0xc002c44c
c0025b01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b05:	89 10                	mov    DWORD PTR [eax],edx
c0025b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b11:	0f b6 d0             	movzx  edx,al
c0025b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b18:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b29:	0f b6 d0             	movzx  edx,al
c0025b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b30:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b3f:	8d 50 01             	lea    edx,[eax+0x1]
c0025b42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b46:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b4c:	0f b6 d0             	movzx  edx,al
c0025b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b57:	83 e1 3f             	and    ecx,0x3f
c0025b5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b68:	0f b6 d0             	movzx  edx,al
c0025b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b80:	0f b6 d0             	movzx  edx,al
c0025b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b87:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b96:	8d 50 01             	lea    edx,[eax+0x1]
c0025b99:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b9d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025ba3:	0f b6 d0             	movzx  edx,al
c0025ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025baa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025bae:	83 e1 3f             	and    ecx,0x3f
c0025bb1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025bb5:	90                   	nop
c0025bb6:	83 c4 0c             	add    esp,0xc
c0025bb9:	c3                   	ret    

c0025bba <PIC::ioWait()>:
c0025bba:	eb 00                	jmp    c0025bbc <PIC::ioWait()+0x2>
c0025bbc:	eb 00                	jmp    c0025bbe <PIC::ioWait()+0x4>
c0025bbe:	90                   	nop
c0025bbf:	c3                   	ret    

c0025bc0 <PIC::getIRQReg(int)>:
c0025bc0:	55                   	push   ebp
c0025bc1:	89 e5                	mov    ebp,esp
c0025bc3:	83 ec 10             	sub    esp,0x10
c0025bc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bc9:	0f b6 c0             	movzx  eax,al
c0025bcc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bd2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bd5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bd8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bdc:	ee                   	out    dx,al
c0025bdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be0:	0f b6 c0             	movzx  eax,al
c0025be3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025be9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025bec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025bef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025bf3:	ee                   	out    dx,al
c0025bf4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025bfa:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025bfe:	89 c2                	mov    edx,eax
c0025c00:	ec                   	in     al,dx
c0025c01:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025c04:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c07:	0f b6 c0             	movzx  eax,al
c0025c0a:	c1 e0 08             	shl    eax,0x8
c0025c0d:	89 c1                	mov    ecx,eax
c0025c0f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025c15:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025c19:	89 c2                	mov    edx,eax
c0025c1b:	ec                   	in     al,dx
c0025c1c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025c1f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c22:	0f b6 c0             	movzx  eax,al
c0025c25:	09 c8                	or     eax,ecx
c0025c27:	c9                   	leave  
c0025c28:	c3                   	ret    
c0025c29:	90                   	nop

c0025c2a <PIC::eoi(unsigned char)>:
c0025c2a:	55                   	push   ebp
c0025c2b:	89 e5                	mov    ebp,esp
c0025c2d:	83 ec 14             	sub    esp,0x14
c0025c30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c33:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c36:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c3a:	75 1e                	jne    c0025c5a <PIC::eoi(unsigned char)+0x30>
c0025c3c:	6a 0b                	push   0xb
c0025c3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c41:	e8 7a ff ff ff       	call   c0025bc0 <PIC::getIRQReg(int)>
c0025c46:	83 c4 08             	add    esp,0x8
c0025c49:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c4d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c51:	25 80 00 00 00       	and    eax,0x80
c0025c56:	85 c0                	test   eax,eax
c0025c58:	74 5f                	je     c0025cb9 <PIC::eoi(unsigned char)+0x8f>
c0025c5a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c5e:	75 2d                	jne    c0025c8d <PIC::eoi(unsigned char)+0x63>
c0025c60:	6a 0b                	push   0xb
c0025c62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c65:	e8 56 ff ff ff       	call   c0025bc0 <PIC::getIRQReg(int)>
c0025c6a:	83 c4 08             	add    esp,0x8
c0025c6d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c71:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c74:	66 85 c0             	test   ax,ax
c0025c77:	78 14                	js     c0025c8d <PIC::eoi(unsigned char)+0x63>
c0025c79:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025c7f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025c83:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c86:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c8a:	ee                   	out    dx,al
c0025c8b:	eb 2d                	jmp    c0025cba <PIC::eoi(unsigned char)+0x90>
c0025c8d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c91:	76 12                	jbe    c0025ca5 <PIC::eoi(unsigned char)+0x7b>
c0025c93:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c99:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025c9d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ca0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ca4:	ee                   	out    dx,al
c0025ca5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cab:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025caf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cb2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cb6:	ee                   	out    dx,al
c0025cb7:	eb 01                	jmp    c0025cba <PIC::eoi(unsigned char)+0x90>
c0025cb9:	90                   	nop
c0025cba:	c9                   	leave  
c0025cbb:	c3                   	ret    

c0025cbc <PIC::remap()>:
c0025cbc:	55                   	push   ebp
c0025cbd:	89 e5                	mov    ebp,esp
c0025cbf:	83 ec 48             	sub    esp,0x48
c0025cc2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025cc9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cd0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cd6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025cd9:	89 c2                	mov    edx,eax
c0025cdb:	ec                   	in     al,dx
c0025cdc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025cdf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025ce2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025ce5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025ceb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025cee:	89 c2                	mov    edx,eax
c0025cf0:	ec                   	in     al,dx
c0025cf1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025cf4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025cf7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025cfa:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025d00:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025d04:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025d07:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025d0a:	ee                   	out    dx,al
c0025d0b:	83 ec 0c             	sub    esp,0xc
c0025d0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d11:	e8 a4 fe ff ff       	call   c0025bba <PIC::ioWait()>
c0025d16:	83 c4 10             	add    esp,0x10
c0025d19:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025d1f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d23:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d26:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d29:	ee                   	out    dx,al
c0025d2a:	83 ec 0c             	sub    esp,0xc
c0025d2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d30:	e8 85 fe ff ff       	call   c0025bba <PIC::ioWait()>
c0025d35:	83 c4 10             	add    esp,0x10
c0025d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d3b:	0f b6 c0             	movzx  eax,al
c0025d3e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d44:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d47:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d4a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d4d:	ee                   	out    dx,al
c0025d4e:	83 ec 0c             	sub    esp,0xc
c0025d51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d54:	e8 61 fe ff ff       	call   c0025bba <PIC::ioWait()>
c0025d59:	83 c4 10             	add    esp,0x10
c0025d5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d5f:	0f b6 c0             	movzx  eax,al
c0025d62:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d68:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d6b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d6e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d71:	ee                   	out    dx,al
c0025d72:	83 ec 0c             	sub    esp,0xc
c0025d75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d78:	e8 3d fe ff ff       	call   c0025bba <PIC::ioWait()>
c0025d7d:	83 c4 10             	add    esp,0x10
c0025d80:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025d86:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025d8a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025d8d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025d90:	ee                   	out    dx,al
c0025d91:	83 ec 0c             	sub    esp,0xc
c0025d94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d97:	e8 1e fe ff ff       	call   c0025bba <PIC::ioWait()>
c0025d9c:	83 c4 10             	add    esp,0x10
c0025d9f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025da5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025da9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025dac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025daf:	ee                   	out    dx,al
c0025db0:	83 ec 0c             	sub    esp,0xc
c0025db3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db6:	e8 ff fd ff ff       	call   c0025bba <PIC::ioWait()>
c0025dbb:	83 c4 10             	add    esp,0x10
c0025dbe:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025dc4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025dc8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025dcb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025dce:	ee                   	out    dx,al
c0025dcf:	83 ec 0c             	sub    esp,0xc
c0025dd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dd5:	e8 e0 fd ff ff       	call   c0025bba <PIC::ioWait()>
c0025dda:	83 c4 10             	add    esp,0x10
c0025ddd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025de3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025de7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025dea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ded:	ee                   	out    dx,al
c0025dee:	83 ec 0c             	sub    esp,0xc
c0025df1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025df4:	e8 c1 fd ff ff       	call   c0025bba <PIC::ioWait()>
c0025df9:	83 c4 10             	add    esp,0x10
c0025dfc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025e00:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025e06:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025e09:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025e0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e0f:	ee                   	out    dx,al
c0025e10:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025e14:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025e1a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025e1d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025e20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e23:	ee                   	out    dx,al
c0025e24:	90                   	nop
c0025e25:	c9                   	leave  
c0025e26:	c3                   	ret    
c0025e27:	90                   	nop

c0025e28 <PIC::open(int, int, void*)>:
c0025e28:	55                   	push   ebp
c0025e29:	89 e5                	mov    ebp,esp
c0025e2b:	83 ec 18             	sub    esp,0x18
c0025e2e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e34:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e38:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e3b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e3f:	ee                   	out    dx,al
c0025e40:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e46:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e4a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e4d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e51:	ee                   	out    dx,al
c0025e52:	83 ec 0c             	sub    esp,0xc
c0025e55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e58:	e8 5f fe ff ff       	call   c0025cbc <PIC::remap()>
c0025e5d:	83 c4 10             	add    esp,0x10
c0025e60:	b8 00 00 00 00       	mov    eax,0x0
c0025e65:	c9                   	leave  
c0025e66:	c3                   	ret    
c0025e67:	90                   	nop

c0025e68 <APICTimer::close(int, int, void*)>:
c0025e68:	b8 00 00 00 00       	mov    eax,0x0
c0025e6d:	c3                   	ret    

c0025e6e <apicTimerHandler(regs*, void*)>:
c0025e6e:	83 ec 0c             	sub    esp,0xc
c0025e71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e77:	99                   	cdq    
c0025e78:	52                   	push   edx
c0025e79:	50                   	push   eax
c0025e7a:	6a 00                	push   0x0
c0025e7c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025e81:	e8 8e 07 00 00       	call   c0026614 <__udivdi3>
c0025e86:	83 c4 10             	add    esp,0x10
c0025e89:	83 ec 08             	sub    esp,0x8
c0025e8c:	52                   	push   edx
c0025e8d:	50                   	push   eax
c0025e8e:	e8 44 06 ff ff       	call   c00164d7 <timerHandler(unsigned long long)>
c0025e93:	83 c4 10             	add    esp,0x10
c0025e96:	90                   	nop
c0025e97:	83 c4 0c             	add    esp,0xc
c0025e9a:	c3                   	ret    
c0025e9b:	90                   	nop

c0025e9c <APICTimer::write(int)>:
c0025e9c:	53                   	push   ebx
c0025e9d:	83 ec 28             	sub    esp,0x28
c0025ea0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025ea4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025ea8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025eae:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0025eb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025eb9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ebf:	83 ec 0c             	sub    esp,0xc
c0025ec2:	50                   	push   eax
c0025ec3:	e8 de f4 ff ff       	call   c00253a6 <APIC::getBase()>
c0025ec8:	83 c4 10             	add    esp,0x10
c0025ecb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ecf:	a1 b0 dd 02 c0       	mov    eax,ds:0xc002ddb0
c0025ed4:	8b 15 b4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddb4
c0025eda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ede:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ee2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ee6:	05 e0 03 00 00       	add    eax,0x3e0
c0025eeb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ef1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ef5:	05 80 03 00 00       	add    eax,0x380
c0025efa:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025f00:	fb                   	sti    
c0025f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025f09:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025f0e:	83 d2 00             	adc    edx,0x0
c0025f11:	89 c1                	mov    ecx,eax
c0025f13:	89 d3                	mov    ebx,edx
c0025f15:	a1 b0 dd 02 c0       	mov    eax,ds:0xc002ddb0
c0025f1a:	8b 15 b4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddb4
c0025f20:	39 c8                	cmp    eax,ecx
c0025f22:	89 d0                	mov    eax,edx
c0025f24:	19 d8                	sbb    eax,ebx
c0025f26:	73 02                	jae    c0025f2a <APICTimer::write(int)+0x8e>
c0025f28:	eb d7                	jmp    c0025f01 <APICTimer::write(int)+0x65>
c0025f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f2e:	05 20 03 00 00       	add    eax,0x320
c0025f33:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f3d:	05 90 03 00 00       	add    eax,0x390
c0025f42:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f44:	f7 d0                	not    eax
c0025f46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f4a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f52:	ba 00 00 00 00       	mov    edx,0x0
c0025f57:	f7 f3                	div    ebx
c0025f59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f67:	0d 00 00 02 00       	or     eax,0x20000
c0025f6c:	89 c2                	mov    edx,eax
c0025f6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f72:	05 20 03 00 00       	add    eax,0x320
c0025f77:	89 10                	mov    DWORD PTR [eax],edx
c0025f79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f7d:	05 e0 03 00 00       	add    eax,0x3e0
c0025f82:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f8c:	05 80 03 00 00       	add    eax,0x380
c0025f91:	89 c2                	mov    edx,eax
c0025f93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f97:	89 02                	mov    DWORD PTR [edx],eax
c0025f99:	90                   	nop
c0025f9a:	83 c4 28             	add    esp,0x28
c0025f9d:	5b                   	pop    ebx
c0025f9e:	c3                   	ret    
c0025f9f:	90                   	nop

c0025fa0 <APICTimer::open(int, int, void*)>:
c0025fa0:	57                   	push   edi
c0025fa1:	56                   	push   esi
c0025fa2:	53                   	push   ebx
c0025fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fa9:	83 c0 24             	add    eax,0x24
c0025fac:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fae:	83 ec 08             	sub    esp,0x8
c0025fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fb9:	ff d0                	call   eax
c0025fbb:	83 c4 10             	add    esp,0x10
c0025fbe:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0025fc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fc9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fcf:	83 ec 0c             	sub    esp,0xc
c0025fd2:	50                   	push   eax
c0025fd3:	e8 ce f3 ff ff       	call   c00253a6 <APIC::getBase()>
c0025fd8:	83 c4 10             	add    esp,0x10
c0025fdb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025feb:	0f b6 f8             	movzx  edi,al
c0025fee:	89 d0                	mov    eax,edx
c0025ff0:	ba 00 00 00 00       	mov    edx,0x0
c0025ff5:	89 c1                	mov    ecx,eax
c0025ff7:	80 e5 ff             	and    ch,0xff
c0025ffa:	89 cb                	mov    ebx,ecx
c0025ffc:	0f b6 f2             	movzx  esi,dl
c0025fff:	89 d8                	mov    eax,ebx
c0026001:	89 f2                	mov    edx,esi
c0026003:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026007:	8d 5f 08             	lea    ebx,[edi+0x8]
c002600a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002600e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026012:	83 e0 00             	and    eax,0x0
c0026015:	09 d0                	or     eax,edx
c0026017:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002601b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026025:	8d 50 01             	lea    edx,[eax+0x1]
c0026028:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002602c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026032:	0f b6 d0             	movzx  edx,al
c0026035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026039:	83 c2 08             	add    edx,0x8
c002603c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026040:	0f b6 c9             	movzx  ecx,cl
c0026043:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026049:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002604d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026051:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026055:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002605f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026063:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026069:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002606d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026073:	83 ec 0c             	sub    esp,0xc
c0026076:	51                   	push   ecx
c0026077:	6a 01                	push   0x1
c0026079:	68 6e 5e 02 c0       	push   0xc0025e6e
c002607e:	52                   	push   edx
c002607f:	50                   	push   eax
c0026080:	e8 05 d9 fe ff       	call   c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026085:	83 c4 20             	add    esp,0x20
c0026088:	89 c2                	mov    edx,eax
c002608a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026094:	b8 00 00 00 00       	mov    eax,0x0
c0026099:	5b                   	pop    ebx
c002609a:	5e                   	pop    esi
c002609b:	5f                   	pop    edi
c002609c:	c3                   	ret    
c002609d:	90                   	nop

c002609e <APICTimer::APICTimer()>:
c002609e:	83 ec 0c             	sub    esp,0xc
c00260a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260a5:	83 ec 08             	sub    esp,0x8
c00260a8:	68 8c c4 02 c0       	push   0xc002c48c
c00260ad:	50                   	push   eax
c00260ae:	e8 95 03 ff ff       	call   c0016448 <Timer::Timer(char const*)>
c00260b3:	83 c4 10             	add    esp,0x10
c00260b6:	ba a0 c4 02 c0       	mov    edx,0xc002c4a0
c00260bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260bf:	89 10                	mov    DWORD PTR [eax],edx
c00260c1:	90                   	nop
c00260c2:	83 c4 0c             	add    esp,0xc
c00260c5:	c3                   	ret    

c00260c6 <PIT::write(int)>:
c00260c6:	83 ec 10             	sub    esp,0x10
c00260c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260d1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00260db:	a3 e4 1a 03 c0       	mov    ds:0xc0031ae4,eax
c00260e0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00260e5:	99                   	cdq    
c00260e6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00260ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00260ee:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00260f5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00260fa:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00260fe:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026103:	ee                   	out    dx,al
c0026104:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026108:	0f b6 c0             	movzx  eax,al
c002610b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026112:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026116:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002611a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002611f:	ee                   	out    dx,al
c0026120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026124:	c1 f8 08             	sar    eax,0x8
c0026127:	0f b6 c0             	movzx  eax,al
c002612a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026131:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026135:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026139:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002613e:	ee                   	out    dx,al
c002613f:	90                   	nop
c0026140:	83 c4 10             	add    esp,0x10
c0026143:	c3                   	ret    

c0026144 <pitHandler(regs*, void*)>:
c0026144:	83 ec 0c             	sub    esp,0xc
c0026147:	a1 e4 1a 03 c0       	mov    eax,ds:0xc0031ae4
c002614c:	99                   	cdq    
c002614d:	52                   	push   edx
c002614e:	50                   	push   eax
c002614f:	6a 00                	push   0x0
c0026151:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026156:	e8 b9 04 00 00       	call   c0026614 <__udivdi3>
c002615b:	83 c4 10             	add    esp,0x10
c002615e:	83 ec 08             	sub    esp,0x8
c0026161:	52                   	push   edx
c0026162:	50                   	push   eax
c0026163:	e8 6f 03 ff ff       	call   c00164d7 <timerHandler(unsigned long long)>
c0026168:	83 c4 10             	add    esp,0x10
c002616b:	90                   	nop
c002616c:	83 c4 0c             	add    esp,0xc
c002616f:	c3                   	ret    

c0026170 <PIT::open(int, int, void*)>:
c0026170:	83 ec 0c             	sub    esp,0xc
c0026173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026177:	8b 00                	mov    eax,DWORD PTR [eax]
c0026179:	83 c0 24             	add    eax,0x24
c002617c:	8b 00                	mov    eax,DWORD PTR [eax]
c002617e:	83 ec 08             	sub    esp,0x8
c0026181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026189:	ff d0                	call   eax
c002618b:	83 c4 10             	add    esp,0x10
c002618e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026192:	83 ec 0c             	sub    esp,0xc
c0026195:	6a 00                	push   0x0
c0026197:	6a 01                	push   0x1
c0026199:	68 44 61 02 c0       	push   0xc0026144
c002619e:	6a 00                	push   0x0
c00261a0:	50                   	push   eax
c00261a1:	e8 e4 d7 fe ff       	call   c001398a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261a6:	83 c4 20             	add    esp,0x20
c00261a9:	89 c2                	mov    edx,eax
c00261ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261af:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261b5:	b8 00 00 00 00       	mov    eax,0x0
c00261ba:	83 c4 0c             	add    esp,0xc
c00261bd:	c3                   	ret    

c00261be <PIT::close(int, int, void*)>:
c00261be:	83 ec 0c             	sub    esp,0xc
c00261c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c5:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d3:	6a 01                	push   0x1
c00261d5:	68 44 61 02 c0       	push   0xc0026144
c00261da:	6a 00                	push   0x0
c00261dc:	50                   	push   eax
c00261dd:	e8 f2 d7 fe ff       	call   c00139d4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00261e2:	83 c4 10             	add    esp,0x10
c00261e5:	b8 00 00 00 00       	mov    eax,0x0
c00261ea:	83 c4 0c             	add    esp,0xc
c00261ed:	c3                   	ret    

c00261ee <PIT::PIT()>:
c00261ee:	83 ec 0c             	sub    esp,0xc
c00261f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f5:	83 ec 08             	sub    esp,0x8
c00261f8:	68 c8 c4 02 c0       	push   0xc002c4c8
c00261fd:	50                   	push   eax
c00261fe:	e8 45 02 ff ff       	call   c0016448 <Timer::Timer(char const*)>
c0026203:	83 c4 10             	add    esp,0x10
c0026206:	ba f0 c4 02 c0       	mov    edx,0xc002c4f0
c002620b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620f:	89 10                	mov    DWORD PTR [eax],edx
c0026211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026215:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002621b:	0f b6 d0             	movzx  edx,al
c002621e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026222:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026233:	0f b6 d0             	movzx  edx,al
c0026236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002623f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026243:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026249:	8d 50 01             	lea    edx,[eax+0x1]
c002624c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026250:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026256:	0f b6 d0             	movzx  edx,al
c0026259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002625d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026261:	83 e1 3f             	and    ecx,0x3f
c0026264:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026268:	90                   	nop
c0026269:	83 c4 0c             	add    esp,0xc
c002626c:	c3                   	ret    
c002626d:	66 90                	xchg   ax,ax
c002626f:	90                   	nop

c0026270 <avxDetect>:
c0026270:	b8 00 00 00 00       	mov    eax,0x0
c0026275:	c3                   	ret    

c0026276 <avxSave>:
c0026276:	c3                   	ret    

c0026277 <avxLoad>:
c0026277:	c3                   	ret    

c0026278 <avxInit>:
c0026278:	c3                   	ret    

c0026279 <avxClose>:
c0026279:	c3                   	ret    

c002627a <wouldSheSayYes>:
c002627a:	c3                   	ret    
c002627b:	49                   	dec    ecx
c002627c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026280:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026284:	75 20                	jne    c00262a6 <sseDetect.noSSE+0x1>
c0026286:	4e                   	dec    esi
c0026287:	79 61                	jns    c00262ea <x87Detect+0x14>
c0026289:	68 2e 2e 2e 00       	push   0x2e2e2e
c002628e:	66 90                	xchg   ax,ax

c0026290 <absolutelyNoChanceInHell>:
c0026290:	b8 01 00 00 00       	mov    eax,0x1
c0026295:	0f a2                	cpuid  
c0026297:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002629d:	74 06                	je     c00262a5 <sseDetect.noSSE>
c002629f:	b8 01 00 00 00       	mov    eax,0x1
c00262a4:	c3                   	ret    

c00262a5 <sseDetect.noSSE>:
c00262a5:	31 c0                	xor    eax,eax
c00262a7:	c3                   	ret    

c00262a8 <sseSave>:
c00262a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00262ad:	c3                   	ret    

c00262ae <sseLoad>:
c00262ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00262b3:	c3                   	ret    

c00262b4 <sseInit>:
c00262b4:	e8 49 00 00 00       	call   c0026302 <x87Init>
c00262b9:	0f 20 e0             	mov    eax,cr4
c00262bc:	66 0d 00 06          	or     ax,0x600
c00262c0:	0f 22 e0             	mov    cr4,eax
c00262c3:	c3                   	ret    

c00262c4 <sseClose>:
c00262c4:	c3                   	ret    
c00262c5:	66 90                	xchg   ax,ax
c00262c7:	66 90                	xchg   ax,ax
c00262c9:	66 90                	xchg   ax,ax
c00262cb:	66 90                	xchg   ax,ax
c00262cd:	66 90                	xchg   ax,ax
c00262cf:	90                   	nop

c00262d0 <value_37F>:
c00262d0:	7f 03                	jg     c00262d5 <value_37A+0x1>

c00262d2 <value_37E>:
c00262d2:	7e 03                	jle    c00262d7 <x87Detect+0x1>

c00262d4 <value_37A>:
c00262d4:	7a 03                	jp     c00262d9 <x87Detect+0x3>

c00262d6 <x87Detect>:
c00262d6:	b8 01 00 00 00       	mov    eax,0x1
c00262db:	0f a2                	cpuid  
c00262dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00262e3:	74 06                	je     c00262eb <x87Detect.nox87>
c00262e5:	b8 01 00 00 00       	mov    eax,0x1
c00262ea:	c3                   	ret    

c00262eb <x87Detect.nox87>:
c00262eb:	b8 00 00 00 00       	mov    eax,0x0
c00262f0:	c3                   	ret    

c00262f1 <x87Save>:
c00262f1:	55                   	push   ebp
c00262f2:	89 e5                	mov    ebp,esp
c00262f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00262f8:	c9                   	leave  
c00262f9:	c3                   	ret    

c00262fa <x87Load>:
c00262fa:	55                   	push   ebp
c00262fb:	89 e5                	mov    ebp,esp
c00262fd:	dd 65 08             	frstor [ebp+0x8]
c0026300:	c9                   	leave  
c0026301:	c3                   	ret    

c0026302 <x87Init>:
c0026302:	9b db e3             	finit  
c0026305:	0f 20 c0             	mov    eax,cr0
c0026308:	66 25 fb ff          	and    ax,0xfffb
c002630c:	66 0d 22 00          	or     ax,0x22
c0026310:	0f 22 c0             	mov    cr0,eax
c0026313:	0f 06                	clts   
c0026315:	d9 2d d4 62 02 c0    	fldcw  WORD PTR ds:0xc00262d4
c002631b:	c3                   	ret    

c002631c <x87Close>:
c002631c:	c3                   	ret    
c002631d:	66 90                	xchg   ax,ax
c002631f:	90                   	nop

c0026320 <__do_global_ctors_aux>:
c0026320:	a1 14 8f 02 c0       	mov    eax,ds:0xc0028f14
c0026325:	83 f8 ff             	cmp    eax,0xffffffff
c0026328:	74 1a                	je     c0026344 <__do_global_ctors_aux+0x24>
c002632a:	55                   	push   ebp
c002632b:	89 e5                	mov    ebp,esp
c002632d:	53                   	push   ebx
c002632e:	52                   	push   edx
c002632f:	bb 14 8f 02 c0       	mov    ebx,0xc0028f14
c0026334:	ff d0                	call   eax
c0026336:	83 eb 04             	sub    ebx,0x4
c0026339:	8b 03                	mov    eax,DWORD PTR [ebx]
c002633b:	83 f8 ff             	cmp    eax,0xffffffff
c002633e:	75 f4                	jne    c0026334 <__do_global_ctors_aux+0x14>
c0026340:	58                   	pop    eax
c0026341:	5b                   	pop    ebx
c0026342:	5d                   	pop    ebp
c0026343:	c3                   	ret    
c0026344:	c3                   	ret    
c0026345:	66 90                	xchg   ax,ax
c0026347:	90                   	nop

c0026348 <__divdi3>:
c0026348:	55                   	push   ebp
c0026349:	57                   	push   edi
c002634a:	56                   	push   esi
c002634b:	53                   	push   ebx
c002634c:	83 ec 1c             	sub    esp,0x1c
c002634f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026353:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026357:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002635a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002635e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026362:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026366:	85 db                	test   ebx,ebx
c0026368:	0f 88 8e 00 00 00    	js     c00263fc <__divdi3+0xb4>
c002636e:	89 dd                	mov    ebp,ebx
c0026370:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026378:	89 d3                	mov    ebx,edx
c002637a:	85 d2                	test   edx,edx
c002637c:	79 0d                	jns    c002638b <__divdi3+0x43>
c002637e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026382:	f7 d8                	neg    eax
c0026384:	83 d2 00             	adc    edx,0x0
c0026387:	f7 da                	neg    edx
c0026389:	89 d3                	mov    ebx,edx
c002638b:	89 c7                	mov    edi,eax
c002638d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026390:	85 db                	test   ebx,ebx
c0026392:	75 48                	jne    c00263dc <__divdi3+0x94>
c0026394:	39 ef                	cmp    edi,ebp
c0026396:	76 24                	jbe    c00263bc <__divdi3+0x74>
c0026398:	89 ea                	mov    edx,ebp
c002639a:	f7 f7                	div    edi
c002639c:	89 c1                	mov    ecx,eax
c002639e:	31 f6                	xor    esi,esi
c00263a0:	89 c8                	mov    eax,ecx
c00263a2:	89 f2                	mov    edx,esi
c00263a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00263a8:	85 c9                	test   ecx,ecx
c00263aa:	74 07                	je     c00263b3 <__divdi3+0x6b>
c00263ac:	f7 d8                	neg    eax
c00263ae:	83 d2 00             	adc    edx,0x0
c00263b1:	f7 da                	neg    edx
c00263b3:	83 c4 1c             	add    esp,0x1c
c00263b6:	5b                   	pop    ebx
c00263b7:	5e                   	pop    esi
c00263b8:	5f                   	pop    edi
c00263b9:	5d                   	pop    ebp
c00263ba:	c3                   	ret    
c00263bb:	90                   	nop
c00263bc:	85 ff                	test   edi,edi
c00263be:	75 0b                	jne    c00263cb <__divdi3+0x83>
c00263c0:	b8 01 00 00 00       	mov    eax,0x1
c00263c5:	31 d2                	xor    edx,edx
c00263c7:	f7 f3                	div    ebx
c00263c9:	89 c7                	mov    edi,eax
c00263cb:	31 d2                	xor    edx,edx
c00263cd:	89 e8                	mov    eax,ebp
c00263cf:	f7 f7                	div    edi
c00263d1:	89 c6                	mov    esi,eax
c00263d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263d6:	f7 f7                	div    edi
c00263d8:	89 c1                	mov    ecx,eax
c00263da:	eb c4                	jmp    c00263a0 <__divdi3+0x58>
c00263dc:	39 eb                	cmp    ebx,ebp
c00263de:	77 3c                	ja     c002641c <__divdi3+0xd4>
c00263e0:	0f bd f3             	bsr    esi,ebx
c00263e3:	83 f6 1f             	xor    esi,0x1f
c00263e6:	75 40                	jne    c0026428 <__divdi3+0xe0>
c00263e8:	39 eb                	cmp    ebx,ebp
c00263ea:	72 09                	jb     c00263f5 <__divdi3+0xad>
c00263ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00263ef:	0f 87 97 00 00 00    	ja     c002648c <__divdi3+0x144>
c00263f5:	b9 01 00 00 00       	mov    ecx,0x1
c00263fa:	eb a4                	jmp    c00263a0 <__divdi3+0x58>
c00263fc:	f7 d9                	neg    ecx
c00263fe:	83 d3 00             	adc    ebx,0x0
c0026401:	f7 db                	neg    ebx
c0026403:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026406:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002640a:	89 dd                	mov    ebp,ebx
c002640c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026414:	e9 5f ff ff ff       	jmp    c0026378 <__divdi3+0x30>
c0026419:	8d 76 00             	lea    esi,[esi+0x0]
c002641c:	31 f6                	xor    esi,esi
c002641e:	31 c9                	xor    ecx,ecx
c0026420:	e9 7b ff ff ff       	jmp    c00263a0 <__divdi3+0x58>
c0026425:	8d 76 00             	lea    esi,[esi+0x0]
c0026428:	b8 20 00 00 00       	mov    eax,0x20
c002642d:	29 f0                	sub    eax,esi
c002642f:	89 f1                	mov    ecx,esi
c0026431:	d3 e3                	shl    ebx,cl
c0026433:	89 fa                	mov    edx,edi
c0026435:	88 c1                	mov    cl,al
c0026437:	d3 ea                	shr    edx,cl
c0026439:	09 da                	or     edx,ebx
c002643b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002643f:	89 f1                	mov    ecx,esi
c0026441:	d3 e7                	shl    edi,cl
c0026443:	89 eb                	mov    ebx,ebp
c0026445:	88 c1                	mov    cl,al
c0026447:	d3 eb                	shr    ebx,cl
c0026449:	89 f1                	mov    ecx,esi
c002644b:	d3 e5                	shl    ebp,cl
c002644d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026450:	88 c1                	mov    cl,al
c0026452:	d3 ea                	shr    edx,cl
c0026454:	09 d5                	or     ebp,edx
c0026456:	89 e8                	mov    eax,ebp
c0026458:	89 da                	mov    edx,ebx
c002645a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002645e:	89 d3                	mov    ebx,edx
c0026460:	89 c5                	mov    ebp,eax
c0026462:	f7 e7                	mul    edi
c0026464:	39 d3                	cmp    ebx,edx
c0026466:	72 18                	jb     c0026480 <__divdi3+0x138>
c0026468:	74 0a                	je     c0026474 <__divdi3+0x12c>
c002646a:	89 e9                	mov    ecx,ebp
c002646c:	31 f6                	xor    esi,esi
c002646e:	e9 2d ff ff ff       	jmp    c00263a0 <__divdi3+0x58>
c0026473:	90                   	nop
c0026474:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026477:	89 f1                	mov    ecx,esi
c0026479:	d3 e7                	shl    edi,cl
c002647b:	39 c7                	cmp    edi,eax
c002647d:	73 eb                	jae    c002646a <__divdi3+0x122>
c002647f:	90                   	nop
c0026480:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026483:	31 f6                	xor    esi,esi
c0026485:	e9 16 ff ff ff       	jmp    c00263a0 <__divdi3+0x58>
c002648a:	66 90                	xchg   ax,ax
c002648c:	31 c9                	xor    ecx,ecx
c002648e:	e9 0d ff ff ff       	jmp    c00263a0 <__divdi3+0x58>
c0026493:	90                   	nop

c0026494 <__moddi3>:
c0026494:	55                   	push   ebp
c0026495:	57                   	push   edi
c0026496:	56                   	push   esi
c0026497:	53                   	push   ebx
c0026498:	83 ec 2c             	sub    esp,0x2c
c002649b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002649f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00264a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00264a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00264ab:	85 db                	test   ebx,ebx
c00264ad:	0f 88 85 00 00 00    	js     c0026538 <__moddi3+0xa4>
c00264b3:	89 de                	mov    esi,ebx
c00264b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00264bd:	89 d7                	mov    edi,edx
c00264bf:	85 d2                	test   edx,edx
c00264c1:	79 09                	jns    c00264cc <__moddi3+0x38>
c00264c3:	f7 d8                	neg    eax
c00264c5:	83 d2 00             	adc    edx,0x0
c00264c8:	f7 da                	neg    edx
c00264ca:	89 d7                	mov    edi,edx
c00264cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264d0:	89 cd                	mov    ebp,ecx
c00264d2:	85 ff                	test   edi,edi
c00264d4:	75 52                	jne    c0026528 <__moddi3+0x94>
c00264d6:	89 c3                	mov    ebx,eax
c00264d8:	39 f0                	cmp    eax,esi
c00264da:	76 24                	jbe    c0026500 <__moddi3+0x6c>
c00264dc:	89 c8                	mov    eax,ecx
c00264de:	89 f2                	mov    edx,esi
c00264e0:	f7 f3                	div    ebx
c00264e2:	89 d6                	mov    esi,edx
c00264e4:	89 f0                	mov    eax,esi
c00264e6:	31 d2                	xor    edx,edx
c00264e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264ec:	85 c9                	test   ecx,ecx
c00264ee:	74 07                	je     c00264f7 <__moddi3+0x63>
c00264f0:	f7 d8                	neg    eax
c00264f2:	83 d2 00             	adc    edx,0x0
c00264f5:	f7 da                	neg    edx
c00264f7:	83 c4 2c             	add    esp,0x2c
c00264fa:	5b                   	pop    ebx
c00264fb:	5e                   	pop    esi
c00264fc:	5f                   	pop    edi
c00264fd:	5d                   	pop    ebp
c00264fe:	c3                   	ret    
c00264ff:	90                   	nop
c0026500:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026504:	85 db                	test   ebx,ebx
c0026506:	75 0d                	jne    c0026515 <__moddi3+0x81>
c0026508:	b8 01 00 00 00       	mov    eax,0x1
c002650d:	31 d2                	xor    edx,edx
c002650f:	f7 f7                	div    edi
c0026511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026515:	89 f0                	mov    eax,esi
c0026517:	31 d2                	xor    edx,edx
c0026519:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002651d:	f7 f7                	div    edi
c002651f:	89 e8                	mov    eax,ebp
c0026521:	f7 f7                	div    edi
c0026523:	89 d6                	mov    esi,edx
c0026525:	eb bd                	jmp    c00264e4 <__moddi3+0x50>
c0026527:	90                   	nop
c0026528:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002652c:	39 f7                	cmp    edi,esi
c002652e:	76 20                	jbe    c0026550 <__moddi3+0xbc>
c0026530:	89 c8                	mov    eax,ecx
c0026532:	89 f2                	mov    edx,esi
c0026534:	eb b2                	jmp    c00264e8 <__moddi3+0x54>
c0026536:	66 90                	xchg   ax,ax
c0026538:	f7 d9                	neg    ecx
c002653a:	83 d3 00             	adc    ebx,0x0
c002653d:	f7 db                	neg    ebx
c002653f:	89 de                	mov    esi,ebx
c0026541:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026549:	e9 6f ff ff ff       	jmp    c00264bd <__moddi3+0x29>
c002654e:	66 90                	xchg   ax,ax
c0026550:	0f bd c7             	bsr    eax,edi
c0026553:	83 f0 1f             	xor    eax,0x1f
c0026556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002655a:	75 24                	jne    c0026580 <__moddi3+0xec>
c002655c:	39 f7                	cmp    edi,esi
c002655e:	72 06                	jb     c0026566 <__moddi3+0xd2>
c0026560:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026564:	77 0c                	ja     c0026572 <__moddi3+0xde>
c0026566:	89 e9                	mov    ecx,ebp
c0026568:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002656c:	19 fe                	sbb    esi,edi
c002656e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026576:	89 f2                	mov    edx,esi
c0026578:	e9 6b ff ff ff       	jmp    c00264e8 <__moddi3+0x54>
c002657d:	8d 76 00             	lea    esi,[esi+0x0]
c0026580:	b8 20 00 00 00       	mov    eax,0x20
c0026585:	89 c2                	mov    edx,eax
c0026587:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002658b:	29 da                	sub    edx,ebx
c002658d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026591:	88 d9                	mov    cl,bl
c0026593:	d3 e7                	shl    edi,cl
c0026595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026599:	88 d1                	mov    cl,dl
c002659b:	d3 e8                	shr    eax,cl
c002659d:	09 c7                	or     edi,eax
c002659f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00265a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265a7:	89 d8                	mov    eax,ebx
c00265a9:	88 d9                	mov    cl,bl
c00265ab:	d3 e7                	shl    edi,cl
c00265ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265b1:	89 f3                	mov    ebx,esi
c00265b3:	88 d1                	mov    cl,dl
c00265b5:	d3 eb                	shr    ebx,cl
c00265b7:	89 c7                	mov    edi,eax
c00265b9:	88 c1                	mov    cl,al
c00265bb:	d3 e6                	shl    esi,cl
c00265bd:	89 e8                	mov    eax,ebp
c00265bf:	88 d1                	mov    cl,dl
c00265c1:	d3 e8                	shr    eax,cl
c00265c3:	09 f0                	or     eax,esi
c00265c5:	89 f9                	mov    ecx,edi
c00265c7:	d3 e5                	shl    ebp,cl
c00265c9:	89 da                	mov    edx,ebx
c00265cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265cf:	89 d3                	mov    ebx,edx
c00265d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265d5:	89 c6                	mov    esi,eax
c00265d7:	89 d1                	mov    ecx,edx
c00265d9:	39 d3                	cmp    ebx,edx
c00265db:	72 27                	jb     c0026604 <__moddi3+0x170>
c00265dd:	74 21                	je     c0026600 <__moddi3+0x16c>
c00265df:	29 f5                	sub    ebp,esi
c00265e1:	19 cb                	sbb    ebx,ecx
c00265e3:	89 de                	mov    esi,ebx
c00265e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00265e9:	d3 e6                	shl    esi,cl
c00265eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00265ef:	89 f9                	mov    ecx,edi
c00265f1:	d3 ed                	shr    ebp,cl
c00265f3:	09 ee                	or     esi,ebp
c00265f5:	89 f0                	mov    eax,esi
c00265f7:	d3 eb                	shr    ebx,cl
c00265f9:	89 da                	mov    edx,ebx
c00265fb:	e9 e8 fe ff ff       	jmp    c00264e8 <__moddi3+0x54>
c0026600:	39 c5                	cmp    ebp,eax
c0026602:	73 db                	jae    c00265df <__moddi3+0x14b>
c0026604:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026608:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002660c:	89 d1                	mov    ecx,edx
c002660e:	89 c6                	mov    esi,eax
c0026610:	eb cd                	jmp    c00265df <__moddi3+0x14b>
c0026612:	66 90                	xchg   ax,ax

c0026614 <__udivdi3>:
c0026614:	55                   	push   ebp
c0026615:	57                   	push   edi
c0026616:	56                   	push   esi
c0026617:	53                   	push   ebx
c0026618:	83 ec 1c             	sub    esp,0x1c
c002661b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002661f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026623:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026627:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002662b:	85 d2                	test   edx,edx
c002662d:	75 41                	jne    c0026670 <__udivdi3+0x5c>
c002662f:	39 f7                	cmp    edi,esi
c0026631:	76 15                	jbe    c0026648 <__udivdi3+0x34>
c0026633:	89 e8                	mov    eax,ebp
c0026635:	89 f2                	mov    edx,esi
c0026637:	f7 f7                	div    edi
c0026639:	31 db                	xor    ebx,ebx
c002663b:	89 da                	mov    edx,ebx
c002663d:	83 c4 1c             	add    esp,0x1c
c0026640:	5b                   	pop    ebx
c0026641:	5e                   	pop    esi
c0026642:	5f                   	pop    edi
c0026643:	5d                   	pop    ebp
c0026644:	c3                   	ret    
c0026645:	8d 76 00             	lea    esi,[esi+0x0]
c0026648:	89 f9                	mov    ecx,edi
c002664a:	85 ff                	test   edi,edi
c002664c:	75 0b                	jne    c0026659 <__udivdi3+0x45>
c002664e:	b8 01 00 00 00       	mov    eax,0x1
c0026653:	31 d2                	xor    edx,edx
c0026655:	f7 f7                	div    edi
c0026657:	89 c1                	mov    ecx,eax
c0026659:	31 d2                	xor    edx,edx
c002665b:	89 f0                	mov    eax,esi
c002665d:	f7 f1                	div    ecx
c002665f:	89 c3                	mov    ebx,eax
c0026661:	89 e8                	mov    eax,ebp
c0026663:	f7 f1                	div    ecx
c0026665:	89 da                	mov    edx,ebx
c0026667:	83 c4 1c             	add    esp,0x1c
c002666a:	5b                   	pop    ebx
c002666b:	5e                   	pop    esi
c002666c:	5f                   	pop    edi
c002666d:	5d                   	pop    ebp
c002666e:	c3                   	ret    
c002666f:	90                   	nop
c0026670:	39 f2                	cmp    edx,esi
c0026672:	77 1c                	ja     c0026690 <__udivdi3+0x7c>
c0026674:	0f bd da             	bsr    ebx,edx
c0026677:	83 f3 1f             	xor    ebx,0x1f
c002667a:	75 24                	jne    c00266a0 <__udivdi3+0x8c>
c002667c:	39 f2                	cmp    edx,esi
c002667e:	72 08                	jb     c0026688 <__udivdi3+0x74>
c0026680:	39 ef                	cmp    edi,ebp
c0026682:	0f 87 84 00 00 00    	ja     c002670c <__udivdi3+0xf8>
c0026688:	b8 01 00 00 00       	mov    eax,0x1
c002668d:	eb ac                	jmp    c002663b <__udivdi3+0x27>
c002668f:	90                   	nop
c0026690:	31 db                	xor    ebx,ebx
c0026692:	31 c0                	xor    eax,eax
c0026694:	89 da                	mov    edx,ebx
c0026696:	83 c4 1c             	add    esp,0x1c
c0026699:	5b                   	pop    ebx
c002669a:	5e                   	pop    esi
c002669b:	5f                   	pop    edi
c002669c:	5d                   	pop    ebp
c002669d:	c3                   	ret    
c002669e:	66 90                	xchg   ax,ax
c00266a0:	b8 20 00 00 00       	mov    eax,0x20
c00266a5:	29 d8                	sub    eax,ebx
c00266a7:	88 d9                	mov    cl,bl
c00266a9:	d3 e2                	shl    edx,cl
c00266ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00266af:	89 fa                	mov    edx,edi
c00266b1:	88 c1                	mov    cl,al
c00266b3:	d3 ea                	shr    edx,cl
c00266b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266b9:	09 d1                	or     ecx,edx
c00266bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266bf:	88 d9                	mov    cl,bl
c00266c1:	d3 e7                	shl    edi,cl
c00266c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266c7:	89 f7                	mov    edi,esi
c00266c9:	88 c1                	mov    cl,al
c00266cb:	d3 ef                	shr    edi,cl
c00266cd:	88 d9                	mov    cl,bl
c00266cf:	d3 e6                	shl    esi,cl
c00266d1:	89 ea                	mov    edx,ebp
c00266d3:	88 c1                	mov    cl,al
c00266d5:	d3 ea                	shr    edx,cl
c00266d7:	09 d6                	or     esi,edx
c00266d9:	89 f0                	mov    eax,esi
c00266db:	89 fa                	mov    edx,edi
c00266dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266e1:	89 d7                	mov    edi,edx
c00266e3:	89 c6                	mov    esi,eax
c00266e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266e9:	39 d7                	cmp    edi,edx
c00266eb:	72 13                	jb     c0026700 <__udivdi3+0xec>
c00266ed:	74 09                	je     c00266f8 <__udivdi3+0xe4>
c00266ef:	89 f0                	mov    eax,esi
c00266f1:	31 db                	xor    ebx,ebx
c00266f3:	e9 43 ff ff ff       	jmp    c002663b <__udivdi3+0x27>
c00266f8:	88 d9                	mov    cl,bl
c00266fa:	d3 e5                	shl    ebp,cl
c00266fc:	39 c5                	cmp    ebp,eax
c00266fe:	73 ef                	jae    c00266ef <__udivdi3+0xdb>
c0026700:	8d 46 ff             	lea    eax,[esi-0x1]
c0026703:	31 db                	xor    ebx,ebx
c0026705:	e9 31 ff ff ff       	jmp    c002663b <__udivdi3+0x27>
c002670a:	66 90                	xchg   ax,ax
c002670c:	31 c0                	xor    eax,eax
c002670e:	e9 28 ff ff ff       	jmp    c002663b <__udivdi3+0x27>
c0026713:	90                   	nop

c0026714 <__umoddi3>:
c0026714:	55                   	push   ebp
c0026715:	57                   	push   edi
c0026716:	56                   	push   esi
c0026717:	53                   	push   ebx
c0026718:	83 ec 1c             	sub    esp,0x1c
c002671b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002671f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026723:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026727:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002672b:	89 da                	mov    edx,ebx
c002672d:	85 c0                	test   eax,eax
c002672f:	75 37                	jne    c0026768 <__umoddi3+0x54>
c0026731:	39 df                	cmp    edi,ebx
c0026733:	76 13                	jbe    c0026748 <__umoddi3+0x34>
c0026735:	89 f0                	mov    eax,esi
c0026737:	f7 f7                	div    edi
c0026739:	89 d0                	mov    eax,edx
c002673b:	31 d2                	xor    edx,edx
c002673d:	83 c4 1c             	add    esp,0x1c
c0026740:	5b                   	pop    ebx
c0026741:	5e                   	pop    esi
c0026742:	5f                   	pop    edi
c0026743:	5d                   	pop    ebp
c0026744:	c3                   	ret    
c0026745:	8d 76 00             	lea    esi,[esi+0x0]
c0026748:	89 fd                	mov    ebp,edi
c002674a:	85 ff                	test   edi,edi
c002674c:	75 0b                	jne    c0026759 <__umoddi3+0x45>
c002674e:	b8 01 00 00 00       	mov    eax,0x1
c0026753:	31 d2                	xor    edx,edx
c0026755:	f7 f7                	div    edi
c0026757:	89 c5                	mov    ebp,eax
c0026759:	89 d8                	mov    eax,ebx
c002675b:	31 d2                	xor    edx,edx
c002675d:	f7 f5                	div    ebp
c002675f:	89 f0                	mov    eax,esi
c0026761:	f7 f5                	div    ebp
c0026763:	89 d0                	mov    eax,edx
c0026765:	eb d4                	jmp    c002673b <__umoddi3+0x27>
c0026767:	90                   	nop
c0026768:	89 f1                	mov    ecx,esi
c002676a:	39 d8                	cmp    eax,ebx
c002676c:	76 0a                	jbe    c0026778 <__umoddi3+0x64>
c002676e:	89 f0                	mov    eax,esi
c0026770:	83 c4 1c             	add    esp,0x1c
c0026773:	5b                   	pop    ebx
c0026774:	5e                   	pop    esi
c0026775:	5f                   	pop    edi
c0026776:	5d                   	pop    ebp
c0026777:	c3                   	ret    
c0026778:	0f bd e8             	bsr    ebp,eax
c002677b:	83 f5 1f             	xor    ebp,0x1f
c002677e:	75 1c                	jne    c002679c <__umoddi3+0x88>
c0026780:	39 d8                	cmp    eax,ebx
c0026782:	72 04                	jb     c0026788 <__umoddi3+0x74>
c0026784:	39 f7                	cmp    edi,esi
c0026786:	77 08                	ja     c0026790 <__umoddi3+0x7c>
c0026788:	89 da                	mov    edx,ebx
c002678a:	29 fe                	sub    esi,edi
c002678c:	19 c2                	sbb    edx,eax
c002678e:	89 f1                	mov    ecx,esi
c0026790:	89 c8                	mov    eax,ecx
c0026792:	83 c4 1c             	add    esp,0x1c
c0026795:	5b                   	pop    ebx
c0026796:	5e                   	pop    esi
c0026797:	5f                   	pop    edi
c0026798:	5d                   	pop    ebp
c0026799:	c3                   	ret    
c002679a:	66 90                	xchg   ax,ax
c002679c:	ba 20 00 00 00       	mov    edx,0x20
c00267a1:	29 ea                	sub    edx,ebp
c00267a3:	89 e9                	mov    ecx,ebp
c00267a5:	d3 e0                	shl    eax,cl
c00267a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00267ab:	89 f8                	mov    eax,edi
c00267ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267b1:	88 d1                	mov    cl,dl
c00267b3:	d3 e8                	shr    eax,cl
c00267b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267b9:	09 c1                	or     ecx,eax
c00267bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267bf:	89 e9                	mov    ecx,ebp
c00267c1:	d3 e7                	shl    edi,cl
c00267c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267c7:	89 d8                	mov    eax,ebx
c00267c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267cd:	88 d1                	mov    cl,dl
c00267cf:	d3 e8                	shr    eax,cl
c00267d1:	89 c7                	mov    edi,eax
c00267d3:	89 e9                	mov    ecx,ebp
c00267d5:	d3 e3                	shl    ebx,cl
c00267d7:	89 f0                	mov    eax,esi
c00267d9:	88 d1                	mov    cl,dl
c00267db:	d3 e8                	shr    eax,cl
c00267dd:	09 d8                	or     eax,ebx
c00267df:	89 e9                	mov    ecx,ebp
c00267e1:	d3 e6                	shl    esi,cl
c00267e3:	89 f3                	mov    ebx,esi
c00267e5:	89 fa                	mov    edx,edi
c00267e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267eb:	89 d1                	mov    ecx,edx
c00267ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267f1:	89 c6                	mov    esi,eax
c00267f3:	89 d7                	mov    edi,edx
c00267f5:	39 d1                	cmp    ecx,edx
c00267f7:	72 27                	jb     c0026820 <__umoddi3+0x10c>
c00267f9:	74 21                	je     c002681c <__umoddi3+0x108>
c00267fb:	89 ca                	mov    edx,ecx
c00267fd:	29 f3                	sub    ebx,esi
c00267ff:	19 fa                	sbb    edx,edi
c0026801:	89 d0                	mov    eax,edx
c0026803:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026807:	d3 e0                	shl    eax,cl
c0026809:	89 e9                	mov    ecx,ebp
c002680b:	d3 eb                	shr    ebx,cl
c002680d:	09 d8                	or     eax,ebx
c002680f:	d3 ea                	shr    edx,cl
c0026811:	83 c4 1c             	add    esp,0x1c
c0026814:	5b                   	pop    ebx
c0026815:	5e                   	pop    esi
c0026816:	5f                   	pop    edi
c0026817:	5d                   	pop    ebp
c0026818:	c3                   	ret    
c0026819:	8d 76 00             	lea    esi,[esi+0x0]
c002681c:	39 c3                	cmp    ebx,eax
c002681e:	73 db                	jae    c00267fb <__umoddi3+0xe7>
c0026820:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026824:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026828:	89 d7                	mov    edi,edx
c002682a:	89 c6                	mov    esi,eax
c002682c:	eb cd                	jmp    c00267fb <__umoddi3+0xe7>

c002682e <__addsf3>:
c002682e:	55                   	push   ebp
c002682f:	89 e5                	mov    ebp,esp
c0026831:	57                   	push   edi
c0026832:	56                   	push   esi
c0026833:	53                   	push   ebx
c0026834:	83 ec 08             	sub    esp,0x8
c0026837:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002683a:	89 fa                	mov    edx,edi
c002683c:	89 f8                	mov    eax,edi
c002683e:	c1 f8 17             	sar    eax,0x17
c0026841:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026844:	c1 e2 08             	shl    edx,0x8
c0026847:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002684d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026850:	89 de                	mov    esi,ebx
c0026852:	c1 fe 17             	sar    esi,0x17
c0026855:	c1 e3 08             	shl    ebx,0x8
c0026858:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002685e:	31 f0                	xor    eax,esi
c0026860:	0f 88 3b 01 00 00    	js     c00269a1 <__addsf3+0x173>
c0026866:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026869:	29 f1                	sub    ecx,esi
c002686b:	85 c9                	test   ecx,ecx
c002686d:	7e 54                	jle    c00268c3 <__addsf3+0x95>
c002686f:	89 f0                	mov    eax,esi
c0026871:	84 c0                	test   al,al
c0026873:	75 10                	jne    c0026885 <__addsf3+0x57>
c0026875:	85 db                	test   ebx,ebx
c0026877:	0f 84 aa 02 00 00    	je     c0026b27 <__addsf3+0x2f9>
c002687d:	49                   	dec    ecx
c002687e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026881:	74 38                	je     c00268bb <__addsf3+0x8d>
c0026883:	eb 13                	jmp    c0026898 <__addsf3+0x6a>
c0026885:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026888:	f7 d0                	not    eax
c002688a:	84 c0                	test   al,al
c002688c:	0f 84 95 02 00 00    	je     c0026b27 <__addsf3+0x2f9>
c0026892:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026898:	83 f9 1f             	cmp    ecx,0x1f
c002689b:	0f 8f 86 02 00 00    	jg     c0026b27 <__addsf3+0x2f9>
c00268a1:	89 de                	mov    esi,ebx
c00268a3:	d3 ee                	shr    esi,cl
c00268a5:	b8 20 00 00 00       	mov    eax,0x20
c00268aa:	29 c8                	sub    eax,ecx
c00268ac:	89 c1                	mov    ecx,eax
c00268ae:	d3 e3                	shl    ebx,cl
c00268b0:	31 c0                	xor    eax,eax
c00268b2:	85 db                	test   ebx,ebx
c00268b4:	0f 95 c0             	setne  al
c00268b7:	09 f0                	or     eax,esi
c00268b9:	01 d0                	add    eax,edx
c00268bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268be:	e9 b6 00 00 00       	jmp    c0026979 <__addsf3+0x14b>
c00268c3:	74 5c                	je     c0026921 <__addsf3+0xf3>
c00268c5:	89 f1                	mov    ecx,esi
c00268c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268d1:	75 14                	jne    c00268e7 <__addsf3+0xb9>
c00268d3:	85 d2                	test   edx,edx
c00268d5:	0f 84 4c 02 00 00    	je     c0026b27 <__addsf3+0x2f9>
c00268db:	49                   	dec    ecx
c00268dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268df:	0f 84 94 00 00 00    	je     c0026979 <__addsf3+0x14b>
c00268e5:	eb 12                	jmp    c00268f9 <__addsf3+0xcb>
c00268e7:	89 f0                	mov    eax,esi
c00268e9:	f7 d0                	not    eax
c00268eb:	84 c0                	test   al,al
c00268ed:	0f 84 34 02 00 00    	je     c0026b27 <__addsf3+0x2f9>
c00268f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00268f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268fc:	83 f9 1f             	cmp    ecx,0x1f
c00268ff:	0f 8f 22 02 00 00    	jg     c0026b27 <__addsf3+0x2f9>
c0026905:	89 d7                	mov    edi,edx
c0026907:	d3 ef                	shr    edi,cl
c0026909:	b8 20 00 00 00       	mov    eax,0x20
c002690e:	29 c8                	sub    eax,ecx
c0026910:	89 c1                	mov    ecx,eax
c0026912:	d3 e2                	shl    edx,cl
c0026914:	31 c0                	xor    eax,eax
c0026916:	85 d2                	test   edx,edx
c0026918:	0f 95 c0             	setne  al
c002691b:	09 f8                	or     eax,edi
c002691d:	01 d8                	add    eax,ebx
c002691f:	eb 58                	jmp    c0026979 <__addsf3+0x14b>
c0026921:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026924:	8d 70 01             	lea    esi,[eax+0x1]
c0026927:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002692d:	75 32                	jne    c0026961 <__addsf3+0x133>
c002692f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026933:	75 1f                	jne    c0026954 <__addsf3+0x126>
c0026935:	85 d2                	test   edx,edx
c0026937:	0f 84 e0 01 00 00    	je     c0026b1d <__addsf3+0x2ef>
c002693d:	85 db                	test   ebx,ebx
c002693f:	0f 84 e2 01 00 00    	je     c0026b27 <__addsf3+0x2f9>
c0026945:	89 d0                	mov    eax,edx
c0026947:	01 d8                	add    eax,ebx
c0026949:	0f 89 a9 01 00 00    	jns    c0026af8 <__addsf3+0x2ca>
c002694f:	e9 9d 01 00 00       	jmp    c0026af1 <__addsf3+0x2c3>
c0026954:	85 d2                	test   edx,edx
c0026956:	0f 85 cb 01 00 00    	jne    c0026b27 <__addsf3+0x2f9>
c002695c:	e9 bc 01 00 00       	jmp    c0026b1d <__addsf3+0x2ef>
c0026961:	31 c0                	xor    eax,eax
c0026963:	89 f1                	mov    ecx,esi
c0026965:	f7 d1                	not    ecx
c0026967:	84 c9                	test   cl,cl
c0026969:	0f 84 90 01 00 00    	je     c0026aff <__addsf3+0x2d1>
c002696f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026972:	d1 e8                	shr    eax,1
c0026974:	e9 86 01 00 00       	jmp    c0026aff <__addsf3+0x2d1>
c0026979:	85 c0                	test   eax,eax
c002697b:	0f 89 7e 01 00 00    	jns    c0026aff <__addsf3+0x2d1>
c0026981:	46                   	inc    esi
c0026982:	89 f2                	mov    edx,esi
c0026984:	f7 d2                	not    edx
c0026986:	84 d2                	test   dl,dl
c0026988:	0f 84 6f 01 00 00    	je     c0026afd <__addsf3+0x2cf>
c002698e:	89 c2                	mov    edx,eax
c0026990:	83 e2 01             	and    edx,0x1
c0026993:	d1 e8                	shr    eax,1
c0026995:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002699a:	09 d0                	or     eax,edx
c002699c:	e9 5e 01 00 00       	jmp    c0026aff <__addsf3+0x2d1>
c00269a1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00269a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269a8:	89 f0                	mov    eax,esi
c00269aa:	0f b6 c0             	movzx  eax,al
c00269ad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269b0:	29 c1                	sub    ecx,eax
c00269b2:	85 c9                	test   ecx,ecx
c00269b4:	7e 55                	jle    c0026a0b <__addsf3+0x1dd>
c00269b6:	85 c0                	test   eax,eax
c00269b8:	75 11                	jne    c00269cb <__addsf3+0x19d>
c00269ba:	85 db                	test   ebx,ebx
c00269bc:	0f 84 65 01 00 00    	je     c0026b27 <__addsf3+0x2f9>
c00269c2:	49                   	dec    ecx
c00269c3:	75 19                	jne    c00269de <__addsf3+0x1b0>
c00269c5:	89 d0                	mov    eax,edx
c00269c7:	29 d8                	sub    eax,ebx
c00269c9:	eb 38                	jmp    c0026a03 <__addsf3+0x1d5>
c00269cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269ce:	f7 d0                	not    eax
c00269d0:	84 c0                	test   al,al
c00269d2:	0f 84 4f 01 00 00    	je     c0026b27 <__addsf3+0x2f9>
c00269d8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269de:	83 f9 1f             	cmp    ecx,0x1f
c00269e1:	0f 8f 40 01 00 00    	jg     c0026b27 <__addsf3+0x2f9>
c00269e7:	89 de                	mov    esi,ebx
c00269e9:	d3 ee                	shr    esi,cl
c00269eb:	b8 20 00 00 00       	mov    eax,0x20
c00269f0:	29 c8                	sub    eax,ecx
c00269f2:	89 c1                	mov    ecx,eax
c00269f4:	d3 e3                	shl    ebx,cl
c00269f6:	31 c0                	xor    eax,eax
c00269f8:	85 db                	test   ebx,ebx
c00269fa:	0f 95 c0             	setne  al
c00269fd:	09 f0                	or     eax,esi
c00269ff:	29 c2                	sub    edx,eax
c0026a01:	89 d0                	mov    eax,edx
c0026a03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a06:	e9 af 00 00 00       	jmp    c0026aba <__addsf3+0x28c>
c0026a0b:	74 5c                	je     c0026a69 <__addsf3+0x23b>
c0026a0d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026a10:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a13:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a17:	75 14                	jne    c0026a2d <__addsf3+0x1ff>
c0026a19:	85 d2                	test   edx,edx
c0026a1b:	0f 84 06 01 00 00    	je     c0026b27 <__addsf3+0x2f9>
c0026a21:	48                   	dec    eax
c0026a22:	75 1b                	jne    c0026a3f <__addsf3+0x211>
c0026a24:	89 d8                	mov    eax,ebx
c0026a26:	29 d0                	sub    eax,edx
c0026a28:	e9 8d 00 00 00       	jmp    c0026aba <__addsf3+0x28c>
c0026a2d:	89 f1                	mov    ecx,esi
c0026a2f:	f7 d1                	not    ecx
c0026a31:	84 c9                	test   cl,cl
c0026a33:	0f 84 ee 00 00 00    	je     c0026b27 <__addsf3+0x2f9>
c0026a39:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a42:	83 f8 1f             	cmp    eax,0x1f
c0026a45:	0f 8f dc 00 00 00    	jg     c0026b27 <__addsf3+0x2f9>
c0026a4b:	89 d7                	mov    edi,edx
c0026a4d:	88 c1                	mov    cl,al
c0026a4f:	d3 ef                	shr    edi,cl
c0026a51:	b9 20 00 00 00       	mov    ecx,0x20
c0026a56:	29 c1                	sub    ecx,eax
c0026a58:	d3 e2                	shl    edx,cl
c0026a5a:	31 c0                	xor    eax,eax
c0026a5c:	85 d2                	test   edx,edx
c0026a5e:	0f 95 c0             	setne  al
c0026a61:	09 f8                	or     eax,edi
c0026a63:	29 c3                	sub    ebx,eax
c0026a65:	89 d8                	mov    eax,ebx
c0026a67:	eb 51                	jmp    c0026aba <__addsf3+0x28c>
c0026a69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a6c:	40                   	inc    eax
c0026a6d:	a8 fe                	test   al,0xfe
c0026a6f:	75 3d                	jne    c0026aae <__addsf3+0x280>
c0026a71:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a75:	0f 85 a7 00 00 00    	jne    c0026b22 <__addsf3+0x2f4>
c0026a7b:	85 d2                	test   edx,edx
c0026a7d:	75 12                	jne    c0026a91 <__addsf3+0x263>
c0026a7f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a82:	85 db                	test   ebx,ebx
c0026a84:	0f 85 9d 00 00 00    	jne    c0026b27 <__addsf3+0x2f9>
c0026a8a:	31 ff                	xor    edi,edi
c0026a8c:	e9 96 00 00 00       	jmp    c0026b27 <__addsf3+0x2f9>
c0026a91:	85 db                	test   ebx,ebx
c0026a93:	0f 84 8e 00 00 00    	je     c0026b27 <__addsf3+0x2f9>
c0026a99:	89 d0                	mov    eax,edx
c0026a9b:	29 d8                	sub    eax,ebx
c0026a9d:	79 06                	jns    c0026aa5 <__addsf3+0x277>
c0026a9f:	89 d8                	mov    eax,ebx
c0026aa1:	29 d0                	sub    eax,edx
c0026aa3:	eb 5a                	jmp    c0026aff <__addsf3+0x2d1>
c0026aa5:	bf 00 00 00 00       	mov    edi,0x0
c0026aaa:	74 7b                	je     c0026b27 <__addsf3+0x2f9>
c0026aac:	eb 4a                	jmp    c0026af8 <__addsf3+0x2ca>
c0026aae:	89 d0                	mov    eax,edx
c0026ab0:	29 d8                	sub    eax,ebx
c0026ab2:	79 12                	jns    c0026ac6 <__addsf3+0x298>
c0026ab4:	89 d8                	mov    eax,ebx
c0026ab6:	29 d0                	sub    eax,edx
c0026ab8:	eb 09                	jmp    c0026ac3 <__addsf3+0x295>
c0026aba:	85 c0                	test   eax,eax
c0026abc:	79 41                	jns    c0026aff <__addsf3+0x2d1>
c0026abe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ac3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ac6:	31 f6                	xor    esi,esi
c0026ac8:	85 c0                	test   eax,eax
c0026aca:	74 33                	je     c0026aff <__addsf3+0x2d1>
c0026acc:	0f bd c8             	bsr    ecx,eax
c0026acf:	83 f1 1f             	xor    ecx,0x1f
c0026ad2:	d3 e0                	shl    eax,cl
c0026ad4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ad8:	39 ca                	cmp    edx,ecx
c0026ada:	7f 10                	jg     c0026aec <__addsf3+0x2be>
c0026adc:	29 d1                	sub    ecx,edx
c0026ade:	41                   	inc    ecx
c0026adf:	d3 e8                	shr    eax,cl
c0026ae1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ae4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026aea:	eb 13                	jmp    c0026aff <__addsf3+0x2d1>
c0026aec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026aef:	29 ce                	sub    esi,ecx
c0026af1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026af6:	eb 07                	jmp    c0026aff <__addsf3+0x2d1>
c0026af8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026afb:	eb 02                	jmp    c0026aff <__addsf3+0x2d1>
c0026afd:	31 c0                	xor    eax,eax
c0026aff:	89 c2                	mov    edx,eax
c0026b01:	c1 ea 08             	shr    edx,0x8
c0026b04:	a8 7f                	test   al,0x7f
c0026b06:	0f 95 c1             	setne  cl
c0026b09:	09 d1                	or     ecx,edx
c0026b0b:	83 e1 01             	and    ecx,0x1
c0026b0e:	c1 e8 07             	shr    eax,0x7
c0026b11:	21 c8                	and    eax,ecx
c0026b13:	c1 e6 17             	shl    esi,0x17
c0026b16:	09 d6                	or     esi,edx
c0026b18:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026b1b:	eb 0a                	jmp    c0026b27 <__addsf3+0x2f9>
c0026b1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b20:	eb 05                	jmp    c0026b27 <__addsf3+0x2f9>
c0026b22:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026b27:	89 f8                	mov    eax,edi
c0026b29:	5a                   	pop    edx
c0026b2a:	59                   	pop    ecx
c0026b2b:	5b                   	pop    ebx
c0026b2c:	5e                   	pop    esi
c0026b2d:	5f                   	pop    edi
c0026b2e:	5d                   	pop    ebp
c0026b2f:	c3                   	ret    

c0026b30 <__subsf3>:
c0026b30:	55                   	push   ebp
c0026b31:	89 e5                	mov    ebp,esp
c0026b33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b36:	05 00 00 00 80       	add    eax,0x80000000
c0026b3b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b3e:	5d                   	pop    ebp
c0026b3f:	e9 ea fc ff ff       	jmp    c002682e <__addsf3>

c0026b44 <__negsf2>:
c0026b44:	55                   	push   ebp
c0026b45:	89 e5                	mov    ebp,esp
c0026b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b4a:	05 00 00 00 80       	add    eax,0x80000000
c0026b4f:	5d                   	pop    ebp
c0026b50:	c3                   	ret    

c0026b51 <__mulsf3>:
c0026b51:	55                   	push   ebp
c0026b52:	89 e5                	mov    ebp,esp
c0026b54:	57                   	push   edi
c0026b55:	56                   	push   esi
c0026b56:	53                   	push   ebx
c0026b57:	83 ec 1c             	sub    esp,0x1c
c0026b5a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b5d:	89 f0                	mov    eax,esi
c0026b5f:	89 f1                	mov    ecx,esi
c0026b61:	c1 f9 17             	sar    ecx,0x17
c0026b64:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b67:	c1 e0 08             	shl    eax,0x8
c0026b6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b6f:	89 c1                	mov    ecx,eax
c0026b71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b74:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b77:	89 c7                	mov    edi,eax
c0026b79:	c1 ff 17             	sar    edi,0x17
c0026b7c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b80:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b83:	89 f8                	mov    eax,edi
c0026b85:	0f b6 c0             	movzx  eax,al
c0026b88:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026b8b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026b8f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b92:	42                   	inc    edx
c0026b93:	80 e2 fe             	and    dl,0xfe
c0026b96:	75 7b                	jne    c0026c13 <__mulsf3+0xc2>
c0026b98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026b9c:	74 54                	je     c0026bf2 <__mulsf3+0xa1>
c0026b9e:	85 c9                	test   ecx,ecx
c0026ba0:	0f 85 64 01 00 00    	jne    c0026d0a <__mulsf3+0x1b9>
c0026ba6:	8d 57 01             	lea    edx,[edi+0x1]
c0026ba9:	80 e2 fe             	and    dl,0xfe
c0026bac:	75 1f                	jne    c0026bcd <__mulsf3+0x7c>
c0026bae:	85 c0                	test   eax,eax
c0026bb0:	b8 00 00 00 00       	mov    eax,0x0
c0026bb5:	74 29                	je     c0026be0 <__mulsf3+0x8f>
c0026bb7:	53                   	push   ebx
c0026bb8:	53                   	push   ebx
c0026bb9:	50                   	push   eax
c0026bba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bbd:	e8 96 05 00 00       	call   c0027158 <__nesf2>
c0026bc2:	83 c4 10             	add    esp,0x10
c0026bc5:	85 c0                	test   eax,eax
c0026bc7:	0f 85 3a 01 00 00    	jne    c0026d07 <__mulsf3+0x1b6>
c0026bcd:	85 ff                	test   edi,edi
c0026bcf:	0f 89 35 01 00 00    	jns    c0026d0a <__mulsf3+0x1b9>
c0026bd5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026bdb:	e9 2a 01 00 00       	jmp    c0026d0a <__mulsf3+0x1b9>
c0026be0:	51                   	push   ecx
c0026be1:	51                   	push   ecx
c0026be2:	50                   	push   eax
c0026be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026be6:	e8 6d 05 00 00       	call   c0027158 <__nesf2>
c0026beb:	83 c4 10             	add    esp,0x10
c0026bee:	85 c0                	test   eax,eax
c0026bf0:	eb 15                	jmp    c0026c07 <__mulsf3+0xb6>
c0026bf2:	85 c9                	test   ecx,ecx
c0026bf4:	74 0b                	je     c0026c01 <__mulsf3+0xb0>
c0026bf6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026bf9:	01 c9                	add    ecx,ecx
c0026bfb:	78 16                	js     c0026c13 <__mulsf3+0xc2>
c0026bfd:	89 d3                	mov    ebx,edx
c0026bff:	eb f5                	jmp    c0026bf6 <__mulsf3+0xa5>
c0026c01:	89 f8                	mov    eax,edi
c0026c03:	f7 d0                	not    eax
c0026c05:	84 c0                	test   al,al
c0026c07:	75 c4                	jne    c0026bcd <__mulsf3+0x7c>
c0026c09:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026c0e:	e9 f7 00 00 00       	jmp    c0026d0a <__mulsf3+0x1b9>
c0026c13:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c16:	c1 e6 08             	shl    esi,0x8
c0026c19:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026c1f:	8d 57 01             	lea    edx,[edi+0x1]
c0026c22:	80 e2 fe             	and    dl,0xfe
c0026c25:	75 63                	jne    c0026c8a <__mulsf3+0x139>
c0026c27:	85 c0                	test   eax,eax
c0026c29:	74 2f                	je     c0026c5a <__mulsf3+0x109>
c0026c2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c2f:	0f 89 d2 00 00 00    	jns    c0026d07 <__mulsf3+0x1b6>
c0026c35:	52                   	push   edx
c0026c36:	52                   	push   edx
c0026c37:	6a 00                	push   0x0
c0026c39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c3c:	e8 dc 04 00 00       	call   c002711d <__eqsf2>
c0026c41:	83 c4 10             	add    esp,0x10
c0026c44:	85 c0                	test   eax,eax
c0026c46:	0f 85 bb 00 00 00    	jne    c0026d07 <__mulsf3+0x1b6>
c0026c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c4f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c55:	e9 b0 00 00 00       	jmp    c0026d0a <__mulsf3+0x1b9>
c0026c5a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c5d:	50                   	push   eax
c0026c5e:	50                   	push   eax
c0026c5f:	6a 00                	push   0x0
c0026c61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c64:	e8 b4 04 00 00       	call   c002711d <__eqsf2>
c0026c69:	83 c4 10             	add    esp,0x10
c0026c6c:	85 c0                	test   eax,eax
c0026c6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c71:	75 0c                	jne    c0026c7f <__mulsf3+0x12e>
c0026c73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c77:	0f 89 8a 00 00 00    	jns    c0026d07 <__mulsf3+0x1b6>
c0026c7d:	eb cd                	jmp    c0026c4c <__mulsf3+0xfb>
c0026c7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c82:	01 f6                	add    esi,esi
c0026c84:	78 04                	js     c0026c8a <__mulsf3+0x139>
c0026c86:	89 c3                	mov    ebx,eax
c0026c88:	eb f5                	jmp    c0026c7f <__mulsf3+0x12e>
c0026c8a:	89 c8                	mov    eax,ecx
c0026c8c:	0d 00 00 00 80       	or     eax,0x80000000
c0026c91:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c97:	f7 e6                	mul    esi
c0026c99:	85 c0                	test   eax,eax
c0026c9b:	0f 95 c0             	setne  al
c0026c9e:	0f b6 c0             	movzx  eax,al
c0026ca1:	09 c2                	or     edx,eax
c0026ca3:	78 03                	js     c0026ca8 <__mulsf3+0x157>
c0026ca5:	01 d2                	add    edx,edx
c0026ca7:	4b                   	dec    ebx
c0026ca8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026cae:	7f 22                	jg     c0026cd2 <__mulsf3+0x181>
c0026cb0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026cb6:	85 db                	test   ebx,ebx
c0026cb8:	7f 23                	jg     c0026cdd <__mulsf3+0x18c>
c0026cba:	83 fb e9             	cmp    ebx,0xffffffe9
c0026cbd:	7c 1a                	jl     c0026cd9 <__mulsf3+0x188>
c0026cbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026cca:	29 d9                	sub    ecx,ebx
c0026ccc:	d3 ea                	shr    edx,cl
c0026cce:	31 db                	xor    ebx,ebx
c0026cd0:	eb 0b                	jmp    c0026cdd <__mulsf3+0x18c>
c0026cd2:	bb ff 00 00 00       	mov    ebx,0xff
c0026cd7:	eb 02                	jmp    c0026cdb <__mulsf3+0x18a>
c0026cd9:	31 db                	xor    ebx,ebx
c0026cdb:	31 d2                	xor    edx,edx
c0026cdd:	89 d0                	mov    eax,edx
c0026cdf:	c1 e8 08             	shr    eax,0x8
c0026ce2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ce5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026ceb:	09 fb                	or     ebx,edi
c0026ced:	c1 e3 17             	shl    ebx,0x17
c0026cf0:	09 c3                	or     ebx,eax
c0026cf2:	f6 c2 7f             	test   dl,0x7f
c0026cf5:	0f 95 c1             	setne  cl
c0026cf8:	09 c8                	or     eax,ecx
c0026cfa:	83 e0 01             	and    eax,0x1
c0026cfd:	c1 ea 07             	shr    edx,0x7
c0026d00:	21 c2                	and    edx,eax
c0026d02:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026d05:	eb 03                	jmp    c0026d0a <__mulsf3+0x1b9>
c0026d07:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026d0a:	89 f0                	mov    eax,esi
c0026d0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d0f:	5b                   	pop    ebx
c0026d10:	5e                   	pop    esi
c0026d11:	5f                   	pop    edi
c0026d12:	5d                   	pop    ebp
c0026d13:	c3                   	ret    

c0026d14 <__divsf3>:
c0026d14:	55                   	push   ebp
c0026d15:	89 e5                	mov    ebp,esp
c0026d17:	57                   	push   edi
c0026d18:	56                   	push   esi
c0026d19:	53                   	push   ebx
c0026d1a:	83 ec 1c             	sub    esp,0x1c
c0026d1d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d20:	89 d8                	mov    eax,ebx
c0026d22:	89 d9                	mov    ecx,ebx
c0026d24:	c1 f9 17             	sar    ecx,0x17
c0026d27:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d2a:	c1 e0 08             	shl    eax,0x8
c0026d2d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d32:	89 c1                	mov    ecx,eax
c0026d34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d3a:	89 c7                	mov    edi,eax
c0026d3c:	c1 ff 17             	sar    edi,0x17
c0026d3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d46:	89 f8                	mov    eax,edi
c0026d48:	0f b6 c0             	movzx  eax,al
c0026d4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d4e:	29 c6                	sub    esi,eax
c0026d50:	83 c6 7f             	add    esi,0x7f
c0026d53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d56:	42                   	inc    edx
c0026d57:	80 e2 fe             	and    dl,0xfe
c0026d5a:	0f 85 9c 00 00 00    	jne    c0026dfc <__divsf3+0xe8>
c0026d60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d64:	74 33                	je     c0026d99 <__divsf3+0x85>
c0026d66:	85 c9                	test   ecx,ecx
c0026d68:	0f 85 c7 01 00 00    	jne    c0026f35 <__divsf3+0x221>
c0026d6e:	8d 57 01             	lea    edx,[edi+0x1]
c0026d71:	80 e2 fe             	and    dl,0xfe
c0026d74:	75 2f                	jne    c0026da5 <__divsf3+0x91>
c0026d76:	85 c0                	test   eax,eax
c0026d78:	74 2b                	je     c0026da5 <__divsf3+0x91>
c0026d7a:	51                   	push   ecx
c0026d7b:	51                   	push   ecx
c0026d7c:	6a 00                	push   0x0
c0026d7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d81:	e8 d2 03 00 00       	call   c0027158 <__nesf2>
c0026d86:	83 c4 10             	add    esp,0x10
c0026d89:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d8c:	85 c0                	test   eax,eax
c0026d8e:	0f 85 a1 01 00 00    	jne    c0026f35 <__divsf3+0x221>
c0026d94:	e9 92 01 00 00       	jmp    c0026f2b <__divsf3+0x217>
c0026d99:	85 c9                	test   ecx,ecx
c0026d9b:	75 1b                	jne    c0026db8 <__divsf3+0xa4>
c0026d9d:	8d 57 01             	lea    edx,[edi+0x1]
c0026da0:	80 e2 fe             	and    dl,0xfe
c0026da3:	74 1e                	je     c0026dc3 <__divsf3+0xaf>
c0026da5:	85 ff                	test   edi,edi
c0026da7:	0f 89 88 01 00 00    	jns    c0026f35 <__divsf3+0x221>
c0026dad:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026db3:	e9 7d 01 00 00       	jmp    c0026f35 <__divsf3+0x221>
c0026db8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026dbb:	01 c9                	add    ecx,ecx
c0026dbd:	78 3d                	js     c0026dfc <__divsf3+0xe8>
c0026dbf:	89 d6                	mov    esi,edx
c0026dc1:	eb f5                	jmp    c0026db8 <__divsf3+0xa4>
c0026dc3:	85 c0                	test   eax,eax
c0026dc5:	b8 00 00 00 00       	mov    eax,0x0
c0026dca:	74 18                	je     c0026de4 <__divsf3+0xd0>
c0026dcc:	52                   	push   edx
c0026dcd:	52                   	push   edx
c0026dce:	50                   	push   eax
c0026dcf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dd2:	e8 81 03 00 00       	call   c0027158 <__nesf2>
c0026dd7:	83 c4 10             	add    esp,0x10
c0026dda:	85 c0                	test   eax,eax
c0026ddc:	0f 85 50 01 00 00    	jne    c0026f32 <__divsf3+0x21e>
c0026de2:	eb c1                	jmp    c0026da5 <__divsf3+0x91>
c0026de4:	56                   	push   esi
c0026de5:	56                   	push   esi
c0026de6:	50                   	push   eax
c0026de7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dea:	e8 69 03 00 00       	call   c0027158 <__nesf2>
c0026def:	83 c4 10             	add    esp,0x10
c0026df2:	85 c0                	test   eax,eax
c0026df4:	0f 84 31 01 00 00    	je     c0026f2b <__divsf3+0x217>
c0026dfa:	eb a9                	jmp    c0026da5 <__divsf3+0x91>
c0026dfc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026dff:	c1 e3 08             	shl    ebx,0x8
c0026e02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e08:	8d 57 01             	lea    edx,[edi+0x1]
c0026e0b:	80 e2 fe             	and    dl,0xfe
c0026e0e:	75 71                	jne    c0026e81 <__divsf3+0x16d>
c0026e10:	85 c0                	test   eax,eax
c0026e12:	ba 00 00 00 00       	mov    edx,0x0
c0026e17:	74 2f                	je     c0026e48 <__divsf3+0x134>
c0026e19:	51                   	push   ecx
c0026e1a:	51                   	push   ecx
c0026e1b:	52                   	push   edx
c0026e1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e1f:	e8 f9 02 00 00       	call   c002711d <__eqsf2>
c0026e24:	83 c4 10             	add    esp,0x10
c0026e27:	85 c0                	test   eax,eax
c0026e29:	0f 85 03 01 00 00    	jne    c0026f32 <__divsf3+0x21e>
c0026e2f:	31 d2                	xor    edx,edx
c0026e31:	89 d3                	mov    ebx,edx
c0026e33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e36:	31 f8                	xor    eax,edi
c0026e38:	0f 89 f7 00 00 00    	jns    c0026f35 <__divsf3+0x221>
c0026e3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e43:	e9 ed 00 00 00       	jmp    c0026f35 <__divsf3+0x221>
c0026e48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e4b:	50                   	push   eax
c0026e4c:	50                   	push   eax
c0026e4d:	52                   	push   edx
c0026e4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e51:	e8 c7 02 00 00       	call   c002711d <__eqsf2>
c0026e56:	83 c4 10             	add    esp,0x10
c0026e59:	85 c0                	test   eax,eax
c0026e5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e5e:	75 16                	jne    c0026e76 <__divsf3+0x162>
c0026e60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e63:	31 fb                	xor    ebx,edi
c0026e65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e71:	e9 bf 00 00 00       	jmp    c0026f35 <__divsf3+0x221>
c0026e76:	8d 46 01             	lea    eax,[esi+0x1]
c0026e79:	01 db                	add    ebx,ebx
c0026e7b:	78 04                	js     c0026e81 <__divsf3+0x16d>
c0026e7d:	89 c6                	mov    esi,eax
c0026e7f:	eb f5                	jmp    c0026e76 <__divsf3+0x162>
c0026e81:	89 c8                	mov    eax,ecx
c0026e83:	0d 00 00 00 80       	or     eax,0x80000000
c0026e88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e8e:	31 d2                	xor    edx,edx
c0026e90:	39 d8                	cmp    eax,ebx
c0026e92:	72 07                	jb     c0026e9b <__divsf3+0x187>
c0026e94:	29 d8                	sub    eax,ebx
c0026e96:	ba 01 00 00 00       	mov    edx,0x1
c0026e9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026ea2:	01 d2                	add    edx,edx
c0026ea4:	89 c1                	mov    ecx,eax
c0026ea6:	01 c0                	add    eax,eax
c0026ea8:	85 c9                	test   ecx,ecx
c0026eaa:	78 04                	js     c0026eb0 <__divsf3+0x19c>
c0026eac:	39 c3                	cmp    ebx,eax
c0026eae:	77 05                	ja     c0026eb5 <__divsf3+0x1a1>
c0026eb0:	29 d8                	sub    eax,ebx
c0026eb2:	83 ca 01             	or     edx,0x1
c0026eb5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026eb8:	75 e8                	jne    c0026ea2 <__divsf3+0x18e>
c0026eba:	85 c0                	test   eax,eax
c0026ebc:	0f 95 c0             	setne  al
c0026ebf:	0f b6 c0             	movzx  eax,al
c0026ec2:	c1 e2 06             	shl    edx,0x6
c0026ec5:	09 c2                	or     edx,eax
c0026ec7:	78 03                	js     c0026ecc <__divsf3+0x1b8>
c0026ec9:	01 d2                	add    edx,edx
c0026ecb:	4e                   	dec    esi
c0026ecc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026ed2:	7f 22                	jg     c0026ef6 <__divsf3+0x1e2>
c0026ed4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026eda:	85 f6                	test   esi,esi
c0026edc:	7f 23                	jg     c0026f01 <__divsf3+0x1ed>
c0026ede:	83 fe e9             	cmp    esi,0xffffffe9
c0026ee1:	7c 1a                	jl     c0026efd <__divsf3+0x1e9>
c0026ee3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ee9:	b9 01 00 00 00       	mov    ecx,0x1
c0026eee:	29 f1                	sub    ecx,esi
c0026ef0:	d3 ea                	shr    edx,cl
c0026ef2:	31 f6                	xor    esi,esi
c0026ef4:	eb 0b                	jmp    c0026f01 <__divsf3+0x1ed>
c0026ef6:	be ff 00 00 00       	mov    esi,0xff
c0026efb:	eb 02                	jmp    c0026eff <__divsf3+0x1eb>
c0026efd:	31 f6                	xor    esi,esi
c0026eff:	31 d2                	xor    edx,edx
c0026f01:	89 d0                	mov    eax,edx
c0026f03:	c1 e8 08             	shr    eax,0x8
c0026f06:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f09:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f0f:	09 fe                	or     esi,edi
c0026f11:	c1 e6 17             	shl    esi,0x17
c0026f14:	09 c6                	or     esi,eax
c0026f16:	f6 c2 7f             	test   dl,0x7f
c0026f19:	0f 95 c1             	setne  cl
c0026f1c:	09 c8                	or     eax,ecx
c0026f1e:	83 e0 01             	and    eax,0x1
c0026f21:	c1 ea 07             	shr    edx,0x7
c0026f24:	21 c2                	and    edx,eax
c0026f26:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f29:	eb 0a                	jmp    c0026f35 <__divsf3+0x221>
c0026f2b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f30:	eb 03                	jmp    c0026f35 <__divsf3+0x221>
c0026f32:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f35:	89 d8                	mov    eax,ebx
c0026f37:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f3a:	5b                   	pop    ebx
c0026f3b:	5e                   	pop    esi
c0026f3c:	5f                   	pop    edi
c0026f3d:	5d                   	pop    ebp
c0026f3e:	c3                   	ret    

c0026f3f <__floatsisf>:
c0026f3f:	55                   	push   ebp
c0026f40:	89 e5                	mov    ebp,esp
c0026f42:	53                   	push   ebx
c0026f43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f46:	85 d2                	test   edx,edx
c0026f48:	7e 2b                	jle    c0026f75 <__floatsisf+0x36>
c0026f4a:	0f bd ca             	bsr    ecx,edx
c0026f4d:	83 f1 1f             	xor    ecx,0x1f
c0026f50:	d3 e2                	shl    edx,cl
c0026f52:	89 d0                	mov    eax,edx
c0026f54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f59:	89 c3                	mov    ebx,eax
c0026f5b:	c1 eb 08             	shr    ebx,0x8
c0026f5e:	80 e2 7f             	and    dl,0x7f
c0026f61:	0f 95 c2             	setne  dl
c0026f64:	09 da                	or     edx,ebx
c0026f66:	83 e2 01             	and    edx,0x1
c0026f69:	c1 e8 07             	shr    eax,0x7
c0026f6c:	21 c2                	and    edx,eax
c0026f6e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f73:	eb 32                	jmp    c0026fa7 <__floatsisf+0x68>
c0026f75:	b8 00 00 00 00       	mov    eax,0x0
c0026f7a:	74 34                	je     c0026fb0 <__floatsisf+0x71>
c0026f7c:	f7 da                	neg    edx
c0026f7e:	0f bd ca             	bsr    ecx,edx
c0026f81:	83 f1 1f             	xor    ecx,0x1f
c0026f84:	d3 e2                	shl    edx,cl
c0026f86:	89 d0                	mov    eax,edx
c0026f88:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f8d:	89 c3                	mov    ebx,eax
c0026f8f:	c1 eb 08             	shr    ebx,0x8
c0026f92:	80 e2 7f             	and    dl,0x7f
c0026f95:	0f 95 c2             	setne  dl
c0026f98:	09 da                	or     edx,ebx
c0026f9a:	83 e2 01             	and    edx,0x1
c0026f9d:	c1 e8 07             	shr    eax,0x7
c0026fa0:	21 c2                	and    edx,eax
c0026fa2:	b8 9e 01 00 00       	mov    eax,0x19e
c0026fa7:	29 c8                	sub    eax,ecx
c0026fa9:	c1 e0 17             	shl    eax,0x17
c0026fac:	09 d8                	or     eax,ebx
c0026fae:	01 d0                	add    eax,edx
c0026fb0:	5b                   	pop    ebx
c0026fb1:	5d                   	pop    ebp
c0026fb2:	c3                   	ret    

c0026fb3 <__floatunsisf>:
c0026fb3:	55                   	push   ebp
c0026fb4:	89 e5                	mov    ebp,esp
c0026fb6:	53                   	push   ebx
c0026fb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fba:	31 c0                	xor    eax,eax
c0026fbc:	85 d2                	test   edx,edx
c0026fbe:	74 32                	je     c0026ff2 <__floatunsisf+0x3f>
c0026fc0:	0f bd ca             	bsr    ecx,edx
c0026fc3:	83 f1 1f             	xor    ecx,0x1f
c0026fc6:	d3 e2                	shl    edx,cl
c0026fc8:	89 d0                	mov    eax,edx
c0026fca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fcf:	89 c3                	mov    ebx,eax
c0026fd1:	c1 eb 08             	shr    ebx,0x8
c0026fd4:	80 e2 7f             	and    dl,0x7f
c0026fd7:	0f 95 c2             	setne  dl
c0026fda:	09 da                	or     edx,ebx
c0026fdc:	83 e2 01             	and    edx,0x1
c0026fdf:	c1 e8 07             	shr    eax,0x7
c0026fe2:	21 c2                	and    edx,eax
c0026fe4:	b8 9e 00 00 00       	mov    eax,0x9e
c0026fe9:	29 c8                	sub    eax,ecx
c0026feb:	c1 e0 17             	shl    eax,0x17
c0026fee:	09 d8                	or     eax,ebx
c0026ff0:	01 d0                	add    eax,edx
c0026ff2:	5b                   	pop    ebx
c0026ff3:	5d                   	pop    ebp
c0026ff4:	c3                   	ret    

c0026ff5 <__fixsfsi>:
c0026ff5:	55                   	push   ebp
c0026ff6:	89 e5                	mov    ebp,esp
c0026ff8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026ffb:	89 d1                	mov    ecx,edx
c0026ffd:	c1 e1 08             	shl    ecx,0x8
c0027000:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027006:	c1 fa 17             	sar    edx,0x17
c0027009:	78 1c                	js     c0027027 <__fixsfsi+0x32>
c002700b:	83 ea 7f             	sub    edx,0x7f
c002700e:	31 c0                	xor    eax,eax
c0027010:	83 fa 1e             	cmp    edx,0x1e
c0027013:	77 40                	ja     c0027055 <__fixsfsi+0x60>
c0027015:	89 c8                	mov    eax,ecx
c0027017:	0d 00 00 00 80       	or     eax,0x80000000
c002701c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027021:	29 d1                	sub    ecx,edx
c0027023:	d3 e8                	shr    eax,cl
c0027025:	eb 2e                	jmp    c0027055 <__fixsfsi+0x60>
c0027027:	31 c0                	xor    eax,eax
c0027029:	81 c2 81 00 00 00    	add    edx,0x81
c002702f:	78 24                	js     c0027055 <__fixsfsi+0x60>
c0027031:	83 fa 1e             	cmp    edx,0x1e
c0027034:	7e 09                	jle    c002703f <__fixsfsi+0x4a>
c0027036:	83 fa 1f             	cmp    edx,0x1f
c0027039:	75 18                	jne    c0027053 <__fixsfsi+0x5e>
c002703b:	85 c9                	test   ecx,ecx
c002703d:	75 14                	jne    c0027053 <__fixsfsi+0x5e>
c002703f:	89 c8                	mov    eax,ecx
c0027041:	0d 00 00 00 80       	or     eax,0x80000000
c0027046:	b9 1f 00 00 00       	mov    ecx,0x1f
c002704b:	29 d1                	sub    ecx,edx
c002704d:	d3 e8                	shr    eax,cl
c002704f:	f7 d8                	neg    eax
c0027051:	eb 02                	jmp    c0027055 <__fixsfsi+0x60>
c0027053:	31 c0                	xor    eax,eax
c0027055:	5d                   	pop    ebp
c0027056:	c3                   	ret    

c0027057 <__fixunssfsi>:
c0027057:	55                   	push   ebp
c0027058:	89 e5                	mov    ebp,esp
c002705a:	53                   	push   ebx
c002705b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002705e:	89 d3                	mov    ebx,edx
c0027060:	c1 fb 17             	sar    ebx,0x17
c0027063:	83 eb 7f             	sub    ebx,0x7f
c0027066:	31 c0                	xor    eax,eax
c0027068:	83 fb 1f             	cmp    ebx,0x1f
c002706b:	77 18                	ja     c0027085 <__fixunssfsi+0x2e>
c002706d:	89 d0                	mov    eax,edx
c002706f:	c1 e0 08             	shl    eax,0x8
c0027072:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027077:	0d 00 00 00 80       	or     eax,0x80000000
c002707c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027081:	29 d9                	sub    ecx,ebx
c0027083:	d3 e8                	shr    eax,cl
c0027085:	5b                   	pop    ebx
c0027086:	5d                   	pop    ebp
c0027087:	c3                   	ret    

c0027088 <__cmpsf2>:
c0027088:	55                   	push   ebp
c0027089:	89 e5                	mov    ebp,esp
c002708b:	57                   	push   edi
c002708c:	56                   	push   esi
c002708d:	53                   	push   ebx
c002708e:	83 ec 24             	sub    esp,0x24
c0027091:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027094:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027097:	e8 4f 10 00 00       	call   c00280eb <__truncdfsf2>
c002709c:	5a                   	pop    edx
c002709d:	59                   	pop    ecx
c002709e:	89 c3                	mov    ebx,eax
c00270a0:	c1 e8 17             	shr    eax,0x17
c00270a3:	0f b6 f0             	movzx  esi,al
c00270a6:	89 d8                	mov    eax,ebx
c00270a8:	c1 e8 1f             	shr    eax,0x1f
c00270ab:	31 c6                	xor    esi,eax
c00270ad:	c1 e3 08             	shl    ebx,0x8
c00270b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270b6:	e8 30 10 00 00       	call   c00280eb <__truncdfsf2>
c00270bb:	83 c4 10             	add    esp,0x10
c00270be:	89 c1                	mov    ecx,eax
c00270c0:	c1 e9 17             	shr    ecx,0x17
c00270c3:	0f b6 c9             	movzx  ecx,cl
c00270c6:	89 c7                	mov    edi,eax
c00270c8:	c1 ef 1f             	shr    edi,0x1f
c00270cb:	89 ca                	mov    edx,ecx
c00270cd:	31 fa                	xor    edx,edi
c00270cf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00270d2:	c1 e0 08             	shl    eax,0x8
c00270d5:	89 c2                	mov    edx,eax
c00270d7:	89 d8                	mov    eax,ebx
c00270d9:	09 d0                	or     eax,edx
c00270db:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270e0:	09 f0                	or     eax,esi
c00270e2:	75 08                	jne    c00270ec <__cmpsf2+0x64>
c00270e4:	31 c0                	xor    eax,eax
c00270e6:	39 f9                	cmp    ecx,edi
c00270e8:	75 0c                	jne    c00270f6 <__cmpsf2+0x6e>
c00270ea:	eb 29                	jmp    c0027115 <__cmpsf2+0x8d>
c00270ec:	b8 01 00 00 00       	mov    eax,0x1
c00270f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270f4:	7f 1f                	jg     c0027115 <__cmpsf2+0x8d>
c00270f6:	83 c8 ff             	or     eax,0xffffffff
c00270f9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270fc:	7c 17                	jl     c0027115 <__cmpsf2+0x8d>
c00270fe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027104:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002710a:	b8 01 00 00 00       	mov    eax,0x1
c002710f:	39 d3                	cmp    ebx,edx
c0027111:	77 02                	ja     c0027115 <__cmpsf2+0x8d>
c0027113:	19 c0                	sbb    eax,eax
c0027115:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027118:	5b                   	pop    ebx
c0027119:	5e                   	pop    esi
c002711a:	5f                   	pop    edi
c002711b:	5d                   	pop    ebp
c002711c:	c3                   	ret    

c002711d <__eqsf2>:
c002711d:	55                   	push   ebp
c002711e:	89 e5                	mov    ebp,esp
c0027120:	83 ec 24             	sub    esp,0x24
c0027123:	6a 01                	push   0x1
c0027125:	83 ec 0c             	sub    esp,0xc
c0027128:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002712b:	e8 df 10 00 00       	call   c002820f <__extendsfdf2>
c0027130:	83 c4 10             	add    esp,0x10
c0027133:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027136:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027139:	52                   	push   edx
c002713a:	50                   	push   eax
c002713b:	50                   	push   eax
c002713c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002713f:	e8 cb 10 00 00       	call   c002820f <__extendsfdf2>
c0027144:	59                   	pop    ecx
c0027145:	59                   	pop    ecx
c0027146:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027149:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002714c:	52                   	push   edx
c002714d:	50                   	push   eax
c002714e:	e8 35 ff ff ff       	call   c0027088 <__cmpsf2>
c0027153:	83 c4 20             	add    esp,0x20
c0027156:	c9                   	leave  
c0027157:	c3                   	ret    

c0027158 <__nesf2>:
c0027158:	eb c3                	jmp    c002711d <__eqsf2>

c002715a <__gtsf2>:
c002715a:	55                   	push   ebp
c002715b:	89 e5                	mov    ebp,esp
c002715d:	83 ec 24             	sub    esp,0x24
c0027160:	6a ff                	push   0xffffffff
c0027162:	83 ec 0c             	sub    esp,0xc
c0027165:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027168:	e8 a2 10 00 00       	call   c002820f <__extendsfdf2>
c002716d:	83 c4 10             	add    esp,0x10
c0027170:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027173:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027176:	52                   	push   edx
c0027177:	50                   	push   eax
c0027178:	50                   	push   eax
c0027179:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002717c:	e8 8e 10 00 00       	call   c002820f <__extendsfdf2>
c0027181:	59                   	pop    ecx
c0027182:	59                   	pop    ecx
c0027183:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027186:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027189:	52                   	push   edx
c002718a:	50                   	push   eax
c002718b:	e8 f8 fe ff ff       	call   c0027088 <__cmpsf2>
c0027190:	83 c4 20             	add    esp,0x20
c0027193:	c9                   	leave  
c0027194:	c3                   	ret    

c0027195 <__gesf2>:
c0027195:	eb c3                	jmp    c002715a <__gtsf2>

c0027197 <__ltsf2>:
c0027197:	eb 84                	jmp    c002711d <__eqsf2>

c0027199 <__lesf2>:
c0027199:	eb 82                	jmp    c002711d <__eqsf2>

c002719b <__adddf3>:
c002719b:	55                   	push   ebp
c002719c:	89 e5                	mov    ebp,esp
c002719e:	57                   	push   edi
c002719f:	56                   	push   esi
c00271a0:	53                   	push   ebx
c00271a1:	83 ec 24             	sub    esp,0x24
c00271a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00271a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00271aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00271ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00271b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00271b6:	89 c8                	mov    eax,ecx
c00271b8:	89 ce                	mov    esi,ecx
c00271ba:	c1 fe 14             	sar    esi,0x14
c00271bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00271c0:	89 fb                	mov    ebx,edi
c00271c2:	89 fa                	mov    edx,edi
c00271c4:	c1 e2 0b             	shl    edx,0xb
c00271c7:	c1 e0 0b             	shl    eax,0xb
c00271ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271cf:	c1 eb 15             	shr    ebx,0x15
c00271d2:	09 d8                	or     eax,ebx
c00271d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00271d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00271da:	c1 fe 14             	sar    esi,0x14
c00271dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00271e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00271e3:	89 f3                	mov    ebx,esi
c00271e5:	c1 e3 0b             	shl    ebx,0xb
c00271e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00271eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00271ee:	c1 e3 0b             	shl    ebx,0xb
c00271f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00271f7:	c1 ee 15             	shr    esi,0x15
c00271fa:	09 f3                	or     ebx,esi
c00271fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00271ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027202:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027205:	0f 88 5f 02 00 00    	js     c002746a <__adddf3+0x2cf>
c002720b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002720e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027211:	85 db                	test   ebx,ebx
c0027213:	0f 8e c7 00 00 00    	jle    c00272e0 <__adddf3+0x145>
c0027219:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027220:	75 1a                	jne    c002723c <__adddf3+0xa1>
c0027222:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027225:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027228:	0f 84 b2 05 00 00    	je     c00277e0 <__adddf3+0x645>
c002722e:	4b                   	dec    ebx
c002722f:	75 23                	jne    c0027254 <__adddf3+0xb9>
c0027231:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027234:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027237:	e9 99 00 00 00       	jmp    c00272d5 <__adddf3+0x13a>
c002723c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002723f:	f7 d6                	not    esi
c0027241:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027247:	0f 84 93 05 00 00    	je     c00277e0 <__adddf3+0x645>
c002724d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027254:	83 fb 1f             	cmp    ebx,0x1f
c0027257:	7e 42                	jle    c002729b <__adddf3+0x100>
c0027259:	83 fb 3f             	cmp    ebx,0x3f
c002725c:	0f 8f 7e 05 00 00    	jg     c00277e0 <__adddf3+0x645>
c0027262:	83 e3 1f             	and    ebx,0x1f
c0027265:	89 d9                	mov    ecx,ebx
c0027267:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002726a:	d3 ef                	shr    edi,cl
c002726c:	31 db                	xor    ebx,ebx
c002726e:	85 c9                	test   ecx,ecx
c0027270:	74 15                	je     c0027287 <__adddf3+0xec>
c0027272:	be 20 00 00 00       	mov    esi,0x20
c0027277:	29 ce                	sub    esi,ecx
c0027279:	89 f1                	mov    ecx,esi
c002727b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002727e:	d3 e6                	shl    esi,cl
c0027280:	31 db                	xor    ebx,ebx
c0027282:	85 f6                	test   esi,esi
c0027284:	0f 95 c3             	setne  bl
c0027287:	31 c9                	xor    ecx,ecx
c0027289:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002728d:	0f 95 c1             	setne  cl
c0027290:	09 cf                	or     edi,ecx
c0027292:	09 fb                	or     ebx,edi
c0027294:	01 da                	add    edx,ebx
c0027296:	83 d0 00             	adc    eax,0x0
c0027299:	eb 3a                	jmp    c00272d5 <__adddf3+0x13a>
c002729b:	bf 20 00 00 00       	mov    edi,0x20
c00272a0:	29 df                	sub    edi,ebx
c00272a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272a8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272ab:	d3 e6                	shl    esi,cl
c00272ad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272b0:	88 d9                	mov    cl,bl
c00272b2:	d3 ef                	shr    edi,cl
c00272b4:	09 fe                	or     esi,edi
c00272b6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272b9:	88 d9                	mov    cl,bl
c00272bb:	d3 ef                	shr    edi,cl
c00272bd:	89 fb                	mov    ebx,edi
c00272bf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272c2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272c5:	d3 e7                	shl    edi,cl
c00272c7:	85 ff                	test   edi,edi
c00272c9:	0f 95 c1             	setne  cl
c00272cc:	0f b6 c9             	movzx  ecx,cl
c00272cf:	09 ce                	or     esi,ecx
c00272d1:	01 f2                	add    edx,esi
c00272d3:	11 d8                	adc    eax,ebx
c00272d5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272db:	e9 52 01 00 00       	jmp    c0027432 <__adddf3+0x297>
c00272e0:	0f 84 d5 00 00 00    	je     c00273bb <__adddf3+0x220>
c00272e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00272e9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00272ec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272ef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272f2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272f9:	75 20                	jne    c002731b <__adddf3+0x180>
c00272fb:	89 d6                	mov    esi,edx
c00272fd:	09 c6                	or     esi,eax
c00272ff:	0f 84 db 04 00 00    	je     c00277e0 <__adddf3+0x645>
c0027305:	4b                   	dec    ebx
c0027306:	75 29                	jne    c0027331 <__adddf3+0x196>
c0027308:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002730b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002730e:	01 d1                	add    ecx,edx
c0027310:	11 c6                	adc    esi,eax
c0027312:	89 f0                	mov    eax,esi
c0027314:	89 ca                	mov    edx,ecx
c0027316:	e9 17 01 00 00       	jmp    c0027432 <__adddf3+0x297>
c002731b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002731e:	f7 d6                	not    esi
c0027320:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027326:	0f 84 b4 04 00 00    	je     c00277e0 <__adddf3+0x645>
c002732c:	0d 00 00 00 80       	or     eax,0x80000000
c0027331:	83 fb 1f             	cmp    ebx,0x1f
c0027334:	7e 48                	jle    c002737e <__adddf3+0x1e3>
c0027336:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027339:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002733c:	83 fb 3f             	cmp    ebx,0x3f
c002733f:	0f 8f 9b 04 00 00    	jg     c00277e0 <__adddf3+0x645>
c0027345:	83 e3 1f             	and    ebx,0x1f
c0027348:	89 d9                	mov    ecx,ebx
c002734a:	89 c7                	mov    edi,eax
c002734c:	d3 ef                	shr    edi,cl
c002734e:	31 db                	xor    ebx,ebx
c0027350:	85 c9                	test   ecx,ecx
c0027352:	74 12                	je     c0027366 <__adddf3+0x1cb>
c0027354:	be 20 00 00 00       	mov    esi,0x20
c0027359:	29 ce                	sub    esi,ecx
c002735b:	89 f1                	mov    ecx,esi
c002735d:	d3 e0                	shl    eax,cl
c002735f:	31 db                	xor    ebx,ebx
c0027361:	85 c0                	test   eax,eax
c0027363:	0f 95 c3             	setne  bl
c0027366:	31 c0                	xor    eax,eax
c0027368:	85 d2                	test   edx,edx
c002736a:	0f 95 c0             	setne  al
c002736d:	09 c7                	or     edi,eax
c002736f:	09 fb                	or     ebx,edi
c0027371:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027374:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027377:	01 da                	add    edx,ebx
c0027379:	83 d6 00             	adc    esi,0x0
c002737c:	eb 39                	jmp    c00273b7 <__adddf3+0x21c>
c002737e:	be 20 00 00 00       	mov    esi,0x20
c0027383:	29 de                	sub    esi,ebx
c0027385:	89 c7                	mov    edi,eax
c0027387:	89 f1                	mov    ecx,esi
c0027389:	d3 e7                	shl    edi,cl
c002738b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002738e:	89 d7                	mov    edi,edx
c0027390:	88 d9                	mov    cl,bl
c0027392:	d3 ef                	shr    edi,cl
c0027394:	89 f9                	mov    ecx,edi
c0027396:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027399:	09 cf                	or     edi,ecx
c002739b:	88 d9                	mov    cl,bl
c002739d:	d3 e8                	shr    eax,cl
c002739f:	89 f1                	mov    ecx,esi
c00273a1:	d3 e2                	shl    edx,cl
c00273a3:	85 d2                	test   edx,edx
c00273a5:	0f 95 c2             	setne  dl
c00273a8:	0f b6 d2             	movzx  edx,dl
c00273ab:	09 d7                	or     edi,edx
c00273ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273b3:	01 fa                	add    edx,edi
c00273b5:	11 c6                	adc    esi,eax
c00273b7:	89 f0                	mov    eax,esi
c00273b9:	eb 77                	jmp    c0027432 <__adddf3+0x297>
c00273bb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273be:	46                   	inc    esi
c00273bf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273c2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273c8:	75 41                	jne    c002740b <__adddf3+0x270>
c00273ca:	89 d3                	mov    ebx,edx
c00273cc:	09 c3                	or     ebx,eax
c00273ce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273d5:	75 27                	jne    c00273fe <__adddf3+0x263>
c00273d7:	85 db                	test   ebx,ebx
c00273d9:	0f 84 fb 03 00 00    	je     c00277da <__adddf3+0x63f>
c00273df:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273e2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273e5:	0f 84 f5 03 00 00    	je     c00277e0 <__adddf3+0x645>
c00273eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273f1:	85 c0                	test   eax,eax
c00273f3:	0f 89 91 03 00 00    	jns    c002778a <__adddf3+0x5ef>
c00273f9:	e9 85 03 00 00       	jmp    c0027783 <__adddf3+0x5e8>
c00273fe:	85 db                	test   ebx,ebx
c0027400:	0f 85 da 03 00 00    	jne    c00277e0 <__adddf3+0x645>
c0027406:	e9 cf 03 00 00       	jmp    c00277da <__adddf3+0x63f>
c002740b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002740e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027411:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027414:	f7 d1                	not    ecx
c0027416:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002741c:	0f 84 70 03 00 00    	je     c0027792 <__adddf3+0x5f7>
c0027422:	d1 ea                	shr    edx,1
c0027424:	89 c1                	mov    ecx,eax
c0027426:	c1 e1 1f             	shl    ecx,0x1f
c0027429:	09 ca                	or     edx,ecx
c002742b:	d1 e8                	shr    eax,1
c002742d:	e9 6f 03 00 00       	jmp    c00277a1 <__adddf3+0x606>
c0027432:	85 c0                	test   eax,eax
c0027434:	0f 89 67 03 00 00    	jns    c00277a1 <__adddf3+0x606>
c002743a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002743d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027440:	f7 d1                	not    ecx
c0027442:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027448:	0f 84 44 03 00 00    	je     c0027792 <__adddf3+0x5f7>
c002744e:	89 d1                	mov    ecx,edx
c0027450:	d1 e9                	shr    ecx,1
c0027452:	83 e2 01             	and    edx,0x1
c0027455:	09 ca                	or     edx,ecx
c0027457:	89 c1                	mov    ecx,eax
c0027459:	c1 e1 1f             	shl    ecx,0x1f
c002745c:	09 ca                	or     edx,ecx
c002745e:	d1 e8                	shr    eax,1
c0027460:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027465:	e9 37 03 00 00       	jmp    c00277a1 <__adddf3+0x606>
c002746a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002746d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027473:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027476:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027479:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002747f:	29 de                	sub    esi,ebx
c0027481:	85 f6                	test   esi,esi
c0027483:	0f 8e bd 00 00 00    	jle    c0027546 <__adddf3+0x3ab>
c0027489:	85 db                	test   ebx,ebx
c002748b:	75 17                	jne    c00274a4 <__adddf3+0x309>
c002748d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027490:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027493:	0f 84 47 03 00 00    	je     c00277e0 <__adddf3+0x645>
c0027499:	4e                   	dec    esi
c002749a:	75 20                	jne    c00274bc <__adddf3+0x321>
c002749c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002749f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00274a2:	eb 5b                	jmp    c00274ff <__adddf3+0x364>
c00274a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274a7:	f7 d3                	not    ebx
c00274a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274af:	0f 84 2b 03 00 00    	je     c00277e0 <__adddf3+0x645>
c00274b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274bc:	83 fe 1f             	cmp    esi,0x1f
c00274bf:	7e 49                	jle    c002750a <__adddf3+0x36f>
c00274c1:	83 fe 3f             	cmp    esi,0x3f
c00274c4:	0f 8f 16 03 00 00    	jg     c00277e0 <__adddf3+0x645>
c00274ca:	83 e6 1f             	and    esi,0x1f
c00274cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274d0:	89 f1                	mov    ecx,esi
c00274d2:	d3 ef                	shr    edi,cl
c00274d4:	31 db                	xor    ebx,ebx
c00274d6:	85 f6                	test   esi,esi
c00274d8:	74 13                	je     c00274ed <__adddf3+0x352>
c00274da:	b9 20 00 00 00       	mov    ecx,0x20
c00274df:	29 f1                	sub    ecx,esi
c00274e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e4:	d3 e6                	shl    esi,cl
c00274e6:	31 db                	xor    ebx,ebx
c00274e8:	85 f6                	test   esi,esi
c00274ea:	0f 95 c3             	setne  bl
c00274ed:	31 c9                	xor    ecx,ecx
c00274ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274f3:	0f 95 c1             	setne  cl
c00274f6:	09 cf                	or     edi,ecx
c00274f8:	09 fb                	or     ebx,edi
c00274fa:	29 da                	sub    edx,ebx
c00274fc:	83 d8 00             	sbb    eax,0x0
c00274ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027502:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027505:	e9 aa 01 00 00       	jmp    c00276b4 <__adddf3+0x519>
c002750a:	bf 20 00 00 00       	mov    edi,0x20
c002750f:	29 f7                	sub    edi,esi
c0027511:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027514:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027517:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002751a:	d3 e3                	shl    ebx,cl
c002751c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002751f:	89 f1                	mov    ecx,esi
c0027521:	d3 ef                	shr    edi,cl
c0027523:	09 fb                	or     ebx,edi
c0027525:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027528:	89 f1                	mov    ecx,esi
c002752a:	d3 ef                	shr    edi,cl
c002752c:	89 fe                	mov    esi,edi
c002752e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027531:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027534:	d3 e7                	shl    edi,cl
c0027536:	85 ff                	test   edi,edi
c0027538:	0f 95 c1             	setne  cl
c002753b:	0f b6 c9             	movzx  ecx,cl
c002753e:	09 cb                	or     ebx,ecx
c0027540:	29 da                	sub    edx,ebx
c0027542:	19 f0                	sbb    eax,esi
c0027544:	eb b9                	jmp    c00274ff <__adddf3+0x364>
c0027546:	0f 84 cd 00 00 00    	je     c0027619 <__adddf3+0x47e>
c002754c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002754f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027552:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027555:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027559:	75 1b                	jne    c0027576 <__adddf3+0x3db>
c002755b:	89 d6                	mov    esi,edx
c002755d:	09 c6                	or     esi,eax
c002755f:	0f 84 7b 02 00 00    	je     c00277e0 <__adddf3+0x645>
c0027565:	4b                   	dec    ebx
c0027566:	75 24                	jne    c002758c <__adddf3+0x3f1>
c0027568:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002756b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002756e:	29 d1                	sub    ecx,edx
c0027570:	19 c6                	sbb    esi,eax
c0027572:	89 ca                	mov    edx,ecx
c0027574:	eb 61                	jmp    c00275d7 <__adddf3+0x43c>
c0027576:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027579:	f7 d6                	not    esi
c002757b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027581:	0f 84 59 02 00 00    	je     c00277e0 <__adddf3+0x645>
c0027587:	0d 00 00 00 80       	or     eax,0x80000000
c002758c:	83 fb 1f             	cmp    ebx,0x1f
c002758f:	7e 4d                	jle    c00275de <__adddf3+0x443>
c0027591:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027594:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027597:	83 fb 3f             	cmp    ebx,0x3f
c002759a:	0f 8f 40 02 00 00    	jg     c00277e0 <__adddf3+0x645>
c00275a0:	83 e3 1f             	and    ebx,0x1f
c00275a3:	89 d9                	mov    ecx,ebx
c00275a5:	89 c7                	mov    edi,eax
c00275a7:	d3 ef                	shr    edi,cl
c00275a9:	31 db                	xor    ebx,ebx
c00275ab:	85 c9                	test   ecx,ecx
c00275ad:	74 12                	je     c00275c1 <__adddf3+0x426>
c00275af:	be 20 00 00 00       	mov    esi,0x20
c00275b4:	29 ce                	sub    esi,ecx
c00275b6:	89 f1                	mov    ecx,esi
c00275b8:	d3 e0                	shl    eax,cl
c00275ba:	31 db                	xor    ebx,ebx
c00275bc:	85 c0                	test   eax,eax
c00275be:	0f 95 c3             	setne  bl
c00275c1:	31 c0                	xor    eax,eax
c00275c3:	85 d2                	test   edx,edx
c00275c5:	0f 95 c0             	setne  al
c00275c8:	09 c7                	or     edi,eax
c00275ca:	09 fb                	or     ebx,edi
c00275cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275d2:	29 da                	sub    edx,ebx
c00275d4:	83 de 00             	sbb    esi,0x0
c00275d7:	89 f0                	mov    eax,esi
c00275d9:	e9 d6 00 00 00       	jmp    c00276b4 <__adddf3+0x519>
c00275de:	be 20 00 00 00       	mov    esi,0x20
c00275e3:	29 de                	sub    esi,ebx
c00275e5:	89 c7                	mov    edi,eax
c00275e7:	89 f1                	mov    ecx,esi
c00275e9:	d3 e7                	shl    edi,cl
c00275eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275ee:	89 d7                	mov    edi,edx
c00275f0:	88 d9                	mov    cl,bl
c00275f2:	d3 ef                	shr    edi,cl
c00275f4:	89 f9                	mov    ecx,edi
c00275f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275f9:	09 cf                	or     edi,ecx
c00275fb:	88 d9                	mov    cl,bl
c00275fd:	d3 e8                	shr    eax,cl
c00275ff:	89 f1                	mov    ecx,esi
c0027601:	d3 e2                	shl    edx,cl
c0027603:	85 d2                	test   edx,edx
c0027605:	0f 95 c2             	setne  dl
c0027608:	0f b6 d2             	movzx  edx,dl
c002760b:	09 d7                	or     edi,edx
c002760d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027610:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027613:	29 fa                	sub    edx,edi
c0027615:	19 c6                	sbb    esi,eax
c0027617:	eb be                	jmp    c00275d7 <__adddf3+0x43c>
c0027619:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002761c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002761f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027625:	75 6a                	jne    c0027691 <__adddf3+0x4f6>
c0027627:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002762b:	75 58                	jne    c0027685 <__adddf3+0x4ea>
c002762d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027630:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027633:	89 d6                	mov    esi,edx
c0027635:	09 c6                	or     esi,eax
c0027637:	75 17                	jne    c0027650 <__adddf3+0x4b5>
c0027639:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002763c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002763f:	85 db                	test   ebx,ebx
c0027641:	0f 85 99 01 00 00    	jne    c00277e0 <__adddf3+0x645>
c0027647:	31 ff                	xor    edi,edi
c0027649:	31 c9                	xor    ecx,ecx
c002764b:	e9 90 01 00 00       	jmp    c00277e0 <__adddf3+0x645>
c0027650:	85 db                	test   ebx,ebx
c0027652:	0f 84 88 01 00 00    	je     c00277e0 <__adddf3+0x645>
c0027658:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002765b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002765e:	85 c0                	test   eax,eax
c0027660:	79 10                	jns    c0027672 <__adddf3+0x4d7>
c0027662:	31 c9                	xor    ecx,ecx
c0027664:	f7 da                	neg    edx
c0027666:	0f 95 c1             	setne  cl
c0027669:	01 c8                	add    eax,ecx
c002766b:	f7 d8                	neg    eax
c002766d:	e9 2f 01 00 00       	jmp    c00277a1 <__adddf3+0x606>
c0027672:	31 ff                	xor    edi,edi
c0027674:	31 c9                	xor    ecx,ecx
c0027676:	89 c3                	mov    ebx,eax
c0027678:	09 d3                	or     ebx,edx
c002767a:	0f 84 60 01 00 00    	je     c00277e0 <__adddf3+0x645>
c0027680:	e9 05 01 00 00       	jmp    c002778a <__adddf3+0x5ef>
c0027685:	31 ff                	xor    edi,edi
c0027687:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002768c:	e9 4f 01 00 00       	jmp    c00277e0 <__adddf3+0x645>
c0027691:	89 c1                	mov    ecx,eax
c0027693:	89 d0                	mov    eax,edx
c0027695:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027698:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002769b:	89 ca                	mov    edx,ecx
c002769d:	85 c9                	test   ecx,ecx
c002769f:	79 2c                	jns    c00276cd <__adddf3+0x532>
c00276a1:	31 c9                	xor    ecx,ecx
c00276a3:	f7 d8                	neg    eax
c00276a5:	0f 95 c1             	setne  cl
c00276a8:	01 ca                	add    edx,ecx
c00276aa:	f7 da                	neg    edx
c00276ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00276af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276b2:	eb 19                	jmp    c00276cd <__adddf3+0x532>
c00276b4:	85 c0                	test   eax,eax
c00276b6:	0f 89 e5 00 00 00    	jns    c00277a1 <__adddf3+0x606>
c00276bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276c1:	89 c1                	mov    ecx,eax
c00276c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276c9:	89 d0                	mov    eax,edx
c00276cb:	89 ca                	mov    edx,ecx
c00276cd:	85 d2                	test   edx,edx
c00276cf:	74 59                	je     c002772a <__adddf3+0x58f>
c00276d1:	0f bd da             	bsr    ebx,edx
c00276d4:	83 f3 1f             	xor    ebx,0x1f
c00276d7:	88 d9                	mov    cl,bl
c00276d9:	d3 e2                	shl    edx,cl
c00276db:	bf 20 00 00 00       	mov    edi,0x20
c00276e0:	89 f9                	mov    ecx,edi
c00276e2:	29 d9                	sub    ecx,ebx
c00276e4:	89 c6                	mov    esi,eax
c00276e6:	d3 ee                	shr    esi,cl
c00276e8:	09 d6                	or     esi,edx
c00276ea:	88 d9                	mov    cl,bl
c00276ec:	d3 e0                	shl    eax,cl
c00276ee:	89 c2                	mov    edx,eax
c00276f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276f3:	25 ff 07 00 00       	and    eax,0x7ff
c00276f8:	39 d8                	cmp    eax,ebx
c00276fa:	7f 22                	jg     c002771e <__adddf3+0x583>
c00276fc:	29 c3                	sub    ebx,eax
c00276fe:	43                   	inc    ebx
c00276ff:	88 d9                	mov    cl,bl
c0027701:	d3 ea                	shr    edx,cl
c0027703:	29 df                	sub    edi,ebx
c0027705:	89 f9                	mov    ecx,edi
c0027707:	89 f0                	mov    eax,esi
c0027709:	d3 e0                	shl    eax,cl
c002770b:	09 c2                	or     edx,eax
c002770d:	89 f0                	mov    eax,esi
c002770f:	88 d9                	mov    cl,bl
c0027711:	d3 e8                	shr    eax,cl
c0027713:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027716:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002771c:	eb 6f                	jmp    c002778d <__adddf3+0x5f2>
c002771e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027721:	29 d8                	sub    eax,ebx
c0027723:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027726:	89 f0                	mov    eax,esi
c0027728:	eb 59                	jmp    c0027783 <__adddf3+0x5e8>
c002772a:	85 c0                	test   eax,eax
c002772c:	74 6a                	je     c0027798 <__adddf3+0x5fd>
c002772e:	0f bd c8             	bsr    ecx,eax
c0027731:	83 f1 1f             	xor    ecx,0x1f
c0027734:	d3 e0                	shl    eax,cl
c0027736:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027739:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002773f:	83 c1 20             	add    ecx,0x20
c0027742:	39 cb                	cmp    ebx,ecx
c0027744:	7f 35                	jg     c002777b <__adddf3+0x5e0>
c0027746:	29 d9                	sub    ecx,ebx
c0027748:	8d 71 01             	lea    esi,[ecx+0x1]
c002774b:	83 fe 1f             	cmp    esi,0x1f
c002774e:	7e 09                	jle    c0027759 <__adddf3+0x5be>
c0027750:	83 e9 1f             	sub    ecx,0x1f
c0027753:	d3 e8                	shr    eax,cl
c0027755:	89 c3                	mov    ebx,eax
c0027757:	eb 11                	jmp    c002776a <__adddf3+0x5cf>
c0027759:	b9 20 00 00 00       	mov    ecx,0x20
c002775e:	29 f1                	sub    ecx,esi
c0027760:	89 c3                	mov    ebx,eax
c0027762:	d3 e3                	shl    ebx,cl
c0027764:	89 f1                	mov    ecx,esi
c0027766:	d3 e8                	shr    eax,cl
c0027768:	89 c2                	mov    edx,eax
c002776a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002776d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027772:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027775:	89 d0                	mov    eax,edx
c0027777:	89 da                	mov    edx,ebx
c0027779:	eb 26                	jmp    c00277a1 <__adddf3+0x606>
c002777b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002777e:	29 cf                	sub    edi,ecx
c0027780:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027783:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027788:	eb 17                	jmp    c00277a1 <__adddf3+0x606>
c002778a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002778d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027790:	eb 0f                	jmp    c00277a1 <__adddf3+0x606>
c0027792:	31 d2                	xor    edx,edx
c0027794:	31 c0                	xor    eax,eax
c0027796:	eb 09                	jmp    c00277a1 <__adddf3+0x606>
c0027798:	89 c2                	mov    edx,eax
c002779a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00277a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277a4:	c1 e1 14             	shl    ecx,0x14
c00277a7:	89 c3                	mov    ebx,eax
c00277a9:	c1 eb 0b             	shr    ebx,0xb
c00277ac:	09 d9                	or     ecx,ebx
c00277ae:	89 d3                	mov    ebx,edx
c00277b0:	c1 eb 0b             	shr    ebx,0xb
c00277b3:	c1 e0 15             	shl    eax,0x15
c00277b6:	09 d8                	or     eax,ebx
c00277b8:	89 c7                	mov    edi,eax
c00277ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00277c0:	0f 95 c0             	setne  al
c00277c3:	89 c6                	mov    esi,eax
c00277c5:	09 f3                	or     ebx,esi
c00277c7:	83 e3 01             	and    ebx,0x1
c00277ca:	c1 ea 0a             	shr    edx,0xa
c00277cd:	21 da                	and    edx,ebx
c00277cf:	89 f8                	mov    eax,edi
c00277d1:	01 d0                	add    eax,edx
c00277d3:	83 d1 00             	adc    ecx,0x0
c00277d6:	89 c7                	mov    edi,eax
c00277d8:	eb 06                	jmp    c00277e0 <__adddf3+0x645>
c00277da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277e0:	89 f8                	mov    eax,edi
c00277e2:	89 ca                	mov    edx,ecx
c00277e4:	83 c4 24             	add    esp,0x24
c00277e7:	5b                   	pop    ebx
c00277e8:	5e                   	pop    esi
c00277e9:	5f                   	pop    edi
c00277ea:	5d                   	pop    ebp
c00277eb:	c3                   	ret    

c00277ec <__subdf3>:
c00277ec:	55                   	push   ebp
c00277ed:	89 e5                	mov    ebp,esp
c00277ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00277f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00277fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00277fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027801:	5d                   	pop    ebp
c0027802:	e9 94 f9 ff ff       	jmp    c002719b <__adddf3>

c0027807 <__negdf2>:
c0027807:	55                   	push   ebp
c0027808:	89 e5                	mov    ebp,esp
c002780a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002780d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027810:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027816:	5d                   	pop    ebp
c0027817:	c3                   	ret    

c0027818 <__muldf3>:
c0027818:	55                   	push   ebp
c0027819:	89 e5                	mov    ebp,esp
c002781b:	57                   	push   edi
c002781c:	56                   	push   esi
c002781d:	53                   	push   ebx
c002781e:	83 ec 24             	sub    esp,0x24
c0027821:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027824:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027827:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002782a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002782d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027830:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027833:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027836:	89 c8                	mov    eax,ecx
c0027838:	c1 f8 14             	sar    eax,0x14
c002783b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002783e:	89 f8                	mov    eax,edi
c0027840:	89 fb                	mov    ebx,edi
c0027842:	c1 e3 0b             	shl    ebx,0xb
c0027845:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027848:	c1 e1 0b             	shl    ecx,0xb
c002784b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027851:	c1 e8 15             	shr    eax,0x15
c0027854:	09 c1                	or     ecx,eax
c0027856:	89 d6                	mov    esi,edx
c0027858:	89 d0                	mov    eax,edx
c002785a:	c1 f8 14             	sar    eax,0x14
c002785d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027860:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027863:	89 c3                	mov    ebx,eax
c0027865:	c1 e3 0b             	shl    ebx,0xb
c0027868:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002786b:	c1 e6 0b             	shl    esi,0xb
c002786e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027874:	c1 e8 15             	shr    eax,0x15
c0027877:	09 c6                	or     esi,eax
c0027879:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002787c:	25 ff 07 00 00       	and    eax,0x7ff
c0027881:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027884:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027887:	25 ff 07 00 00       	and    eax,0x7ff
c002788c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002788f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027892:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027895:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002789c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002789f:	40                   	inc    eax
c00278a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00278a5:	0f 85 8d 00 00 00    	jne    c0027938 <__muldf3+0x120>
c00278ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278ae:	09 c8                	or     eax,ecx
c00278b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00278b4:	74 44                	je     c00278fa <__muldf3+0xe2>
c00278b6:	85 c0                	test   eax,eax
c00278b8:	0f 85 31 02 00 00    	jne    c0027aef <__muldf3+0x2d7>
c00278be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278c1:	40                   	inc    eax
c00278c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00278c7:	75 13                	jne    c00278dc <__muldf3+0xc4>
c00278c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278cc:	09 f1                	or     ecx,esi
c00278ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278d2:	74 22                	je     c00278f6 <__muldf3+0xde>
c00278d4:	85 c9                	test   ecx,ecx
c00278d6:	0f 85 0d 02 00 00    	jne    c0027ae9 <__muldf3+0x2d1>
c00278dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00278e0:	0f 89 09 02 00 00    	jns    c0027aef <__muldf3+0x2d7>
c00278e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00278e9:	05 00 00 00 80       	add    eax,0x80000000
c00278ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278f1:	e9 f9 01 00 00       	jmp    c0027aef <__muldf3+0x2d7>
c00278f6:	85 c9                	test   ecx,ecx
c00278f8:	eb 2e                	jmp    c0027928 <__muldf3+0x110>
c00278fa:	85 c0                	test   eax,eax
c00278fc:	74 20                	je     c002791e <__muldf3+0x106>
c00278fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027901:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027904:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027907:	c1 ef 1f             	shr    edi,0x1f
c002790a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002790d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027910:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027913:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027916:	09 f9                	or     ecx,edi
c0027918:	78 1e                	js     c0027938 <__muldf3+0x120>
c002791a:	89 c3                	mov    ebx,eax
c002791c:	eb e0                	jmp    c00278fe <__muldf3+0xe6>
c002791e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027921:	f7 d0                	not    eax
c0027923:	a9 ff 07 00 00       	test   eax,0x7ff
c0027928:	75 b2                	jne    c00278dc <__muldf3+0xc4>
c002792a:	31 ff                	xor    edi,edi
c002792c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027933:	e9 b7 01 00 00       	jmp    c0027aef <__muldf3+0x2d7>
c0027938:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002793b:	40                   	inc    eax
c002793c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027941:	75 57                	jne    c002799a <__muldf3+0x182>
c0027943:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027946:	09 f0                	or     eax,esi
c0027948:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002794c:	74 23                	je     c0027971 <__muldf3+0x159>
c002794e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027952:	0f 89 91 01 00 00    	jns    c0027ae9 <__muldf3+0x2d1>
c0027958:	85 c0                	test   eax,eax
c002795a:	0f 85 89 01 00 00    	jne    c0027ae9 <__muldf3+0x2d1>
c0027960:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027963:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027969:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002796c:	e9 7e 01 00 00       	jmp    c0027aef <__muldf3+0x2d7>
c0027971:	85 c0                	test   eax,eax
c0027973:	75 0c                	jne    c0027981 <__muldf3+0x169>
c0027975:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027979:	0f 89 6a 01 00 00    	jns    c0027ae9 <__muldf3+0x2d1>
c002797f:	eb df                	jmp    c0027960 <__muldf3+0x148>
c0027981:	01 f6                	add    esi,esi
c0027983:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027986:	c1 ea 1f             	shr    edx,0x1f
c0027989:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002798c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002798f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027992:	09 d6                	or     esi,edx
c0027994:	78 04                	js     c002799a <__muldf3+0x182>
c0027996:	89 c3                	mov    ebx,eax
c0027998:	eb e7                	jmp    c0027981 <__muldf3+0x169>
c002799a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00279a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00279a6:	89 c8                	mov    eax,ecx
c00279a8:	f7 e6                	mul    esi
c00279aa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00279ad:	89 c7                	mov    edi,eax
c00279af:	89 c8                	mov    eax,ecx
c00279b1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00279b7:	89 c1                	mov    ecx,eax
c00279b9:	89 f0                	mov    eax,esi
c00279bb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00279be:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00279c1:	89 c6                	mov    esi,eax
c00279c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279c6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279cc:	31 c0                	xor    eax,eax
c00279ce:	01 f1                	add    ecx,esi
c00279d0:	0f 92 c0             	setb   al
c00279d3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00279d6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279d9:	83 d6 00             	adc    esi,0x0
c00279dc:	01 c7                	add    edi,eax
c00279de:	83 d6 00             	adc    esi,0x0
c00279e1:	01 ca                	add    edx,ecx
c00279e3:	0f 92 c1             	setb   cl
c00279e6:	0f b6 c9             	movzx  ecx,cl
c00279e9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00279ec:	83 d6 00             	adc    esi,0x0
c00279ef:	01 cf                	add    edi,ecx
c00279f1:	83 d6 00             	adc    esi,0x0
c00279f4:	31 c9                	xor    ecx,ecx
c00279f6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00279f9:	0f 95 c1             	setne  cl
c00279fc:	09 cf                	or     edi,ecx
c00279fe:	85 f6                	test   esi,esi
c0027a00:	78 0c                	js     c0027a0e <__muldf3+0x1f6>
c0027a02:	01 f6                	add    esi,esi
c0027a04:	89 f8                	mov    eax,edi
c0027a06:	c1 e8 1f             	shr    eax,0x1f
c0027a09:	09 c6                	or     esi,eax
c0027a0b:	01 ff                	add    edi,edi
c0027a0d:	4b                   	dec    ebx
c0027a0e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027a14:	0f 8f 85 00 00 00    	jg     c0027a9f <__muldf3+0x287>
c0027a1a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027a20:	85 db                	test   ebx,ebx
c0027a22:	0f 8f 84 00 00 00    	jg     c0027aac <__muldf3+0x294>
c0027a28:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a2b:	7c 79                	jl     c0027aa6 <__muldf3+0x28e>
c0027a2d:	ba 01 00 00 00       	mov    edx,0x1
c0027a32:	29 da                	sub    edx,ebx
c0027a34:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a3a:	83 fa 1f             	cmp    edx,0x1f
c0027a3d:	7e 30                	jle    c0027a6f <__muldf3+0x257>
c0027a3f:	83 fa 20             	cmp    edx,0x20
c0027a42:	75 0b                	jne    c0027a4f <__muldf3+0x237>
c0027a44:	31 c0                	xor    eax,eax
c0027a46:	85 ff                	test   edi,edi
c0027a48:	0f 95 c0             	setne  al
c0027a4b:	89 c7                	mov    edi,eax
c0027a4d:	eb 1a                	jmp    c0027a69 <__muldf3+0x251>
c0027a4f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a52:	89 f0                	mov    eax,esi
c0027a54:	d3 e0                	shl    eax,cl
c0027a56:	09 f8                	or     eax,edi
c0027a58:	0f 95 c0             	setne  al
c0027a5b:	0f b6 c0             	movzx  eax,al
c0027a5e:	89 c7                	mov    edi,eax
c0027a60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a65:	29 d9                	sub    ecx,ebx
c0027a67:	d3 ee                	shr    esi,cl
c0027a69:	09 f7                	or     edi,esi
c0027a6b:	31 db                	xor    ebx,ebx
c0027a6d:	eb 3b                	jmp    c0027aaa <__muldf3+0x292>
c0027a6f:	83 c3 1f             	add    ebx,0x1f
c0027a72:	89 f0                	mov    eax,esi
c0027a74:	88 d9                	mov    cl,bl
c0027a76:	d3 e0                	shl    eax,cl
c0027a78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a7b:	89 f8                	mov    eax,edi
c0027a7d:	88 d1                	mov    cl,dl
c0027a7f:	d3 e8                	shr    eax,cl
c0027a81:	89 c1                	mov    ecx,eax
c0027a83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a86:	09 c8                	or     eax,ecx
c0027a88:	88 d9                	mov    cl,bl
c0027a8a:	d3 e7                	shl    edi,cl
c0027a8c:	31 db                	xor    ebx,ebx
c0027a8e:	85 ff                	test   edi,edi
c0027a90:	0f 95 c3             	setne  bl
c0027a93:	89 df                	mov    edi,ebx
c0027a95:	09 c7                	or     edi,eax
c0027a97:	88 d1                	mov    cl,dl
c0027a99:	d3 ee                	shr    esi,cl
c0027a9b:	31 db                	xor    ebx,ebx
c0027a9d:	eb 0d                	jmp    c0027aac <__muldf3+0x294>
c0027a9f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027aa4:	eb 02                	jmp    c0027aa8 <__muldf3+0x290>
c0027aa6:	31 db                	xor    ebx,ebx
c0027aa8:	31 ff                	xor    edi,edi
c0027aaa:	31 f6                	xor    esi,esi
c0027aac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027aaf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027ab2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ab7:	09 c3                	or     ebx,eax
c0027ab9:	c1 e3 14             	shl    ebx,0x14
c0027abc:	89 f0                	mov    eax,esi
c0027abe:	c1 e8 0b             	shr    eax,0xb
c0027ac1:	09 c3                	or     ebx,eax
c0027ac3:	89 f8                	mov    eax,edi
c0027ac5:	c1 e8 0b             	shr    eax,0xb
c0027ac8:	c1 e6 15             	shl    esi,0x15
c0027acb:	09 c6                	or     esi,eax
c0027acd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027ad3:	0f 95 c1             	setne  cl
c0027ad6:	09 c8                	or     eax,ecx
c0027ad8:	83 e0 01             	and    eax,0x1
c0027adb:	c1 ef 0a             	shr    edi,0xa
c0027ade:	21 c7                	and    edi,eax
c0027ae0:	01 f7                	add    edi,esi
c0027ae2:	83 d3 00             	adc    ebx,0x0
c0027ae5:	89 da                	mov    edx,ebx
c0027ae7:	eb 03                	jmp    c0027aec <__muldf3+0x2d4>
c0027ae9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027aec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027aef:	89 f8                	mov    eax,edi
c0027af1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027af4:	83 c4 24             	add    esp,0x24
c0027af7:	5b                   	pop    ebx
c0027af8:	5e                   	pop    esi
c0027af9:	5f                   	pop    edi
c0027afa:	5d                   	pop    ebp
c0027afb:	c3                   	ret    

c0027afc <__divdf3>:
c0027afc:	55                   	push   ebp
c0027afd:	89 e5                	mov    ebp,esp
c0027aff:	57                   	push   edi
c0027b00:	56                   	push   esi
c0027b01:	53                   	push   ebx
c0027b02:	83 ec 2c             	sub    esp,0x2c
c0027b05:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b17:	89 ce                	mov    esi,ecx
c0027b19:	89 c8                	mov    eax,ecx
c0027b1b:	c1 f8 14             	sar    eax,0x14
c0027b1e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b21:	89 f8                	mov    eax,edi
c0027b23:	89 fb                	mov    ebx,edi
c0027b25:	c1 e3 0b             	shl    ebx,0xb
c0027b28:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b2b:	c1 e6 0b             	shl    esi,0xb
c0027b2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b34:	c1 e8 15             	shr    eax,0x15
c0027b37:	09 c6                	or     esi,eax
c0027b39:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b3f:	89 c2                	mov    edx,eax
c0027b41:	c1 fa 14             	sar    edx,0x14
c0027b44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b47:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b4a:	89 de                	mov    esi,ebx
c0027b4c:	c1 e6 0b             	shl    esi,0xb
c0027b4f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b52:	c1 e0 0b             	shl    eax,0xb
c0027b55:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b5a:	c1 eb 15             	shr    ebx,0x15
c0027b5d:	09 d8                	or     eax,ebx
c0027b5f:	89 c2                	mov    edx,eax
c0027b61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b64:	25 ff 07 00 00       	and    eax,0x7ff
c0027b69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b6c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b6f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b75:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027b78:	29 d8                	sub    eax,ebx
c0027b7a:	05 ff 03 00 00       	add    eax,0x3ff
c0027b7f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b82:	46                   	inc    esi
c0027b83:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b89:	0f 85 a5 00 00 00    	jne    c0027c34 <__divdf3+0x138>
c0027b8f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b92:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027b95:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027b99:	74 2a                	je     c0027bc5 <__divdf3+0xc9>
c0027b9b:	85 f6                	test   esi,esi
c0027b9d:	0f 85 cc 02 00 00    	jne    c0027e6f <__divdf3+0x373>
c0027ba3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba6:	40                   	inc    eax
c0027ba7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bac:	75 26                	jne    c0027bd4 <__divdf3+0xd8>
c0027bae:	85 db                	test   ebx,ebx
c0027bb0:	74 22                	je     c0027bd4 <__divdf3+0xd8>
c0027bb2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027bb5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027bb8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027bbb:	09 d0                	or     eax,edx
c0027bbd:	0f 85 ac 02 00 00    	jne    c0027e6f <__divdf3+0x373>
c0027bc3:	eb 63                	jmp    c0027c28 <__divdf3+0x12c>
c0027bc5:	85 f6                	test   esi,esi
c0027bc7:	75 22                	jne    c0027beb <__divdf3+0xef>
c0027bc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bcc:	40                   	inc    eax
c0027bcd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bd2:	74 36                	je     c0027c0a <__divdf3+0x10e>
c0027bd4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027bd8:	0f 89 91 02 00 00    	jns    c0027e6f <__divdf3+0x373>
c0027bde:	89 f8                	mov    eax,edi
c0027be0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027be6:	e9 80 02 00 00       	jmp    c0027e6b <__divdf3+0x36f>
c0027beb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bee:	01 f6                	add    esi,esi
c0027bf0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027bf3:	c1 ef 1f             	shr    edi,0x1f
c0027bf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027bf9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027bfc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027bff:	09 f7                	or     edi,esi
c0027c01:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027c04:	78 2e                	js     c0027c34 <__divdf3+0x138>
c0027c06:	89 c8                	mov    eax,ecx
c0027c08:	eb e1                	jmp    c0027beb <__divdf3+0xef>
c0027c0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c0d:	09 d0                	or     eax,edx
c0027c0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c13:	74 0f                	je     c0027c24 <__divdf3+0x128>
c0027c15:	85 c0                	test   eax,eax
c0027c17:	74 bb                	je     c0027bd4 <__divdf3+0xd8>
c0027c19:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c1c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c1f:	e9 4b 02 00 00       	jmp    c0027e6f <__divdf3+0x373>
c0027c24:	85 c0                	test   eax,eax
c0027c26:	75 ac                	jne    c0027bd4 <__divdf3+0xd8>
c0027c28:	31 ff                	xor    edi,edi
c0027c2a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c2f:	e9 3b 02 00 00       	jmp    c0027e6f <__divdf3+0x373>
c0027c34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c37:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c3a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c40:	75 6b                	jne    c0027cad <__divdf3+0x1b1>
c0027c42:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c45:	09 d6                	or     esi,edx
c0027c47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c4b:	74 28                	je     c0027c75 <__divdf3+0x179>
c0027c4d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c50:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c53:	85 f6                	test   esi,esi
c0027c55:	0f 85 14 02 00 00    	jne    c0027e6f <__divdf3+0x373>
c0027c5b:	31 ff                	xor    edi,edi
c0027c5d:	31 c9                	xor    ecx,ecx
c0027c5f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c62:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c65:	0f 89 04 02 00 00    	jns    c0027e6f <__divdf3+0x373>
c0027c6b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c70:	e9 fa 01 00 00       	jmp    c0027e6f <__divdf3+0x373>
c0027c75:	85 f6                	test   esi,esi
c0027c77:	75 1b                	jne    c0027c94 <__divdf3+0x198>
c0027c79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c7c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c7f:	25 00 00 00 80       	and    eax,0x80000000
c0027c84:	31 c9                	xor    ecx,ecx
c0027c86:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027c8b:	89 cf                	mov    edi,ecx
c0027c8d:	89 c1                	mov    ecx,eax
c0027c8f:	e9 db 01 00 00       	jmp    c0027e6f <__divdf3+0x373>
c0027c94:	01 d2                	add    edx,edx
c0027c96:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c99:	c1 eb 1f             	shr    ebx,0x1f
c0027c9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c9f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027ca2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027ca5:	09 da                	or     edx,ebx
c0027ca7:	78 04                	js     c0027cad <__divdf3+0x1b1>
c0027ca9:	89 c8                	mov    eax,ecx
c0027cab:	eb e7                	jmp    c0027c94 <__divdf3+0x198>
c0027cad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cb0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027cb6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cbc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027cbf:	39 d6                	cmp    esi,edx
c0027cc1:	77 0d                	ja     c0027cd0 <__divdf3+0x1d4>
c0027cc3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027cc6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027cc9:	72 1b                	jb     c0027ce6 <__divdf3+0x1ea>
c0027ccb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027cce:	75 16                	jne    c0027ce6 <__divdf3+0x1ea>
c0027cd0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cd3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cd6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027cd9:	83 de 00             	sbb    esi,0x0
c0027cdc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027cdf:	ba 01 00 00 00       	mov    edx,0x1
c0027ce4:	eb 02                	jmp    c0027ce8 <__divdf3+0x1ec>
c0027ce6:	31 d2                	xor    edx,edx
c0027ce8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027cef:	31 ff                	xor    edi,edi
c0027cf1:	01 ff                	add    edi,edi
c0027cf3:	89 d1                	mov    ecx,edx
c0027cf5:	c1 e9 1f             	shr    ecx,0x1f
c0027cf8:	09 cf                	or     edi,ecx
c0027cfa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027cfd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027d00:	89 da                	mov    edx,ebx
c0027d02:	89 f3                	mov    ebx,esi
c0027d04:	8d 34 36             	lea    esi,[esi+esi*1]
c0027d07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d0a:	c1 e9 1f             	shr    ecx,0x1f
c0027d0d:	09 ce                	or     esi,ecx
c0027d0f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d12:	01 c9                	add    ecx,ecx
c0027d14:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027d17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d1a:	85 db                	test   ebx,ebx
c0027d1c:	78 29                	js     c0027d47 <__divdf3+0x24b>
c0027d1e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027d21:	72 07                	jb     c0027d2a <__divdf3+0x22e>
c0027d23:	75 3c                	jne    c0027d61 <__divdf3+0x265>
c0027d25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d28:	77 37                	ja     c0027d61 <__divdf3+0x265>
c0027d2a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d2d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d30:	31 d2                	xor    edx,edx
c0027d32:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d35:	0f 97 c2             	seta   dl
c0027d38:	29 d6                	sub    esi,edx
c0027d3a:	89 d9                	mov    ecx,ebx
c0027d3c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d45:	eb 17                	jmp    c0027d5e <__divdf3+0x262>
c0027d47:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d4a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d50:	0f 97 c1             	seta   cl
c0027d53:	0f b6 c9             	movzx  ecx,cl
c0027d56:	29 ce                	sub    esi,ecx
c0027d58:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d5b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d5e:	83 ca 01             	or     edx,0x1
c0027d61:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d64:	75 8b                	jne    c0027cf1 <__divdf3+0x1f5>
c0027d66:	c1 e7 09             	shl    edi,0x9
c0027d69:	89 d1                	mov    ecx,edx
c0027d6b:	c1 e9 17             	shr    ecx,0x17
c0027d6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d71:	09 f3                	or     ebx,esi
c0027d73:	0f 95 c3             	setne  bl
c0027d76:	0f b6 db             	movzx  ebx,bl
c0027d79:	c1 e2 09             	shl    edx,0x9
c0027d7c:	09 d3                	or     ebx,edx
c0027d7e:	89 ca                	mov    edx,ecx
c0027d80:	09 fa                	or     edx,edi
c0027d82:	78 0c                	js     c0027d90 <__divdf3+0x294>
c0027d84:	01 d2                	add    edx,edx
c0027d86:	89 d9                	mov    ecx,ebx
c0027d88:	c1 e9 1f             	shr    ecx,0x1f
c0027d8b:	09 ca                	or     edx,ecx
c0027d8d:	01 db                	add    ebx,ebx
c0027d8f:	48                   	dec    eax
c0027d90:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027d95:	0f 8f 83 00 00 00    	jg     c0027e1e <__divdf3+0x322>
c0027d9b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027da1:	85 c0                	test   eax,eax
c0027da3:	0f 8f 82 00 00 00    	jg     c0027e2b <__divdf3+0x32f>
c0027da9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027dac:	7c 77                	jl     c0027e25 <__divdf3+0x329>
c0027dae:	be 01 00 00 00       	mov    esi,0x1
c0027db3:	29 c6                	sub    esi,eax
c0027db5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027dbb:	83 fe 1f             	cmp    esi,0x1f
c0027dbe:	7e 2f                	jle    c0027def <__divdf3+0x2f3>
c0027dc0:	83 fe 20             	cmp    esi,0x20
c0027dc3:	75 0a                	jne    c0027dcf <__divdf3+0x2d3>
c0027dc5:	85 db                	test   ebx,ebx
c0027dc7:	0f 95 c3             	setne  bl
c0027dca:	0f b6 db             	movzx  ebx,bl
c0027dcd:	eb 1a                	jmp    c0027de9 <__divdf3+0x2ed>
c0027dcf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027dd2:	89 d7                	mov    edi,edx
c0027dd4:	d3 e7                	shl    edi,cl
c0027dd6:	89 f9                	mov    ecx,edi
c0027dd8:	09 d9                	or     ecx,ebx
c0027dda:	0f 95 c3             	setne  bl
c0027ddd:	0f b6 db             	movzx  ebx,bl
c0027de0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027de5:	29 c1                	sub    ecx,eax
c0027de7:	d3 ea                	shr    edx,cl
c0027de9:	09 d3                	or     ebx,edx
c0027deb:	31 c0                	xor    eax,eax
c0027ded:	eb 3a                	jmp    c0027e29 <__divdf3+0x32d>
c0027def:	83 c0 1f             	add    eax,0x1f
c0027df2:	89 d7                	mov    edi,edx
c0027df4:	88 c1                	mov    cl,al
c0027df6:	d3 e7                	shl    edi,cl
c0027df8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027dfb:	89 df                	mov    edi,ebx
c0027dfd:	89 f1                	mov    ecx,esi
c0027dff:	d3 ef                	shr    edi,cl
c0027e01:	89 f9                	mov    ecx,edi
c0027e03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e06:	09 cf                	or     edi,ecx
c0027e08:	88 c1                	mov    cl,al
c0027e0a:	d3 e3                	shl    ebx,cl
c0027e0c:	85 db                	test   ebx,ebx
c0027e0e:	0f 95 c3             	setne  bl
c0027e11:	0f b6 db             	movzx  ebx,bl
c0027e14:	09 fb                	or     ebx,edi
c0027e16:	89 f1                	mov    ecx,esi
c0027e18:	d3 ea                	shr    edx,cl
c0027e1a:	31 c0                	xor    eax,eax
c0027e1c:	eb 0d                	jmp    c0027e2b <__divdf3+0x32f>
c0027e1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027e23:	eb 02                	jmp    c0027e27 <__divdf3+0x32b>
c0027e25:	31 c0                	xor    eax,eax
c0027e27:	31 db                	xor    ebx,ebx
c0027e29:	31 d2                	xor    edx,edx
c0027e2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e37:	09 c8                	or     eax,ecx
c0027e39:	c1 e0 14             	shl    eax,0x14
c0027e3c:	89 d1                	mov    ecx,edx
c0027e3e:	c1 e9 0b             	shr    ecx,0xb
c0027e41:	09 c8                	or     eax,ecx
c0027e43:	89 c6                	mov    esi,eax
c0027e45:	89 d9                	mov    ecx,ebx
c0027e47:	c1 e9 0b             	shr    ecx,0xb
c0027e4a:	c1 e2 15             	shl    edx,0x15
c0027e4d:	09 ca                	or     edx,ecx
c0027e4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e55:	0f 95 c0             	setne  al
c0027e58:	09 c1                	or     ecx,eax
c0027e5a:	83 e1 01             	and    ecx,0x1
c0027e5d:	c1 eb 0a             	shr    ebx,0xa
c0027e60:	21 cb                	and    ebx,ecx
c0027e62:	01 d3                	add    ebx,edx
c0027e64:	89 d8                	mov    eax,ebx
c0027e66:	83 d6 00             	adc    esi,0x0
c0027e69:	89 f2                	mov    edx,esi
c0027e6b:	89 c7                	mov    edi,eax
c0027e6d:	89 d1                	mov    ecx,edx
c0027e6f:	89 f8                	mov    eax,edi
c0027e71:	89 ca                	mov    edx,ecx
c0027e73:	83 c4 2c             	add    esp,0x2c
c0027e76:	5b                   	pop    ebx
c0027e77:	5e                   	pop    esi
c0027e78:	5f                   	pop    edi
c0027e79:	5d                   	pop    ebp
c0027e7a:	c3                   	ret    

c0027e7b <__floatsidf>:
c0027e7b:	55                   	push   ebp
c0027e7c:	89 e5                	mov    ebp,esp
c0027e7e:	56                   	push   esi
c0027e7f:	53                   	push   ebx
c0027e80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e83:	85 db                	test   ebx,ebx
c0027e85:	7e 15                	jle    c0027e9c <__floatsidf+0x21>
c0027e87:	0f bd cb             	bsr    ecx,ebx
c0027e8a:	83 f1 1f             	xor    ecx,0x1f
c0027e8d:	d3 e3                	shl    ebx,cl
c0027e8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e95:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e9a:	eb 21                	jmp    c0027ebd <__floatsidf+0x42>
c0027e9c:	b8 00 00 00 00       	mov    eax,0x0
c0027ea1:	ba 00 00 00 00       	mov    edx,0x0
c0027ea6:	74 2a                	je     c0027ed2 <__floatsidf+0x57>
c0027ea8:	f7 db                	neg    ebx
c0027eaa:	0f bd cb             	bsr    ecx,ebx
c0027ead:	83 f1 1f             	xor    ecx,0x1f
c0027eb0:	d3 e3                	shl    ebx,cl
c0027eb2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027eb8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027ebd:	29 c8                	sub    eax,ecx
c0027ebf:	c1 e0 14             	shl    eax,0x14
c0027ec2:	89 c1                	mov    ecx,eax
c0027ec4:	89 de                	mov    esi,ebx
c0027ec6:	c1 ee 0b             	shr    esi,0xb
c0027ec9:	09 f1                	or     ecx,esi
c0027ecb:	89 ca                	mov    edx,ecx
c0027ecd:	c1 e3 15             	shl    ebx,0x15
c0027ed0:	89 d8                	mov    eax,ebx
c0027ed2:	5b                   	pop    ebx
c0027ed3:	5e                   	pop    esi
c0027ed4:	5d                   	pop    ebp
c0027ed5:	c3                   	ret    

c0027ed6 <__floatunsidf>:
c0027ed6:	55                   	push   ebp
c0027ed7:	89 e5                	mov    ebp,esp
c0027ed9:	56                   	push   esi
c0027eda:	53                   	push   ebx
c0027edb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027ede:	85 db                	test   ebx,ebx
c0027ee0:	74 2a                	je     c0027f0c <__floatunsidf+0x36>
c0027ee2:	0f bd cb             	bsr    ecx,ebx
c0027ee5:	83 f1 1f             	xor    ecx,0x1f
c0027ee8:	d3 e3                	shl    ebx,cl
c0027eea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ef0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ef5:	29 c8                	sub    eax,ecx
c0027ef7:	c1 e0 14             	shl    eax,0x14
c0027efa:	89 c1                	mov    ecx,eax
c0027efc:	89 de                	mov    esi,ebx
c0027efe:	c1 ee 0b             	shr    esi,0xb
c0027f01:	09 f1                	or     ecx,esi
c0027f03:	89 ca                	mov    edx,ecx
c0027f05:	c1 e3 15             	shl    ebx,0x15
c0027f08:	89 d8                	mov    eax,ebx
c0027f0a:	eb 04                	jmp    c0027f10 <__floatunsidf+0x3a>
c0027f0c:	31 c0                	xor    eax,eax
c0027f0e:	31 d2                	xor    edx,edx
c0027f10:	5b                   	pop    ebx
c0027f11:	5e                   	pop    esi
c0027f12:	5d                   	pop    ebp
c0027f13:	c3                   	ret    

c0027f14 <__fixdfsi>:
c0027f14:	55                   	push   ebp
c0027f15:	89 e5                	mov    ebp,esp
c0027f17:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f1a:	89 d1                	mov    ecx,edx
c0027f1c:	c1 e1 0b             	shl    ecx,0xb
c0027f1f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f28:	c1 e8 15             	shr    eax,0x15
c0027f2b:	09 c1                	or     ecx,eax
c0027f2d:	c1 fa 14             	sar    edx,0x14
c0027f30:	78 1f                	js     c0027f51 <__fixdfsi+0x3d>
c0027f32:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f38:	31 c0                	xor    eax,eax
c0027f3a:	83 fa 1e             	cmp    edx,0x1e
c0027f3d:	77 40                	ja     c0027f7f <__fixdfsi+0x6b>
c0027f3f:	89 c8                	mov    eax,ecx
c0027f41:	0d 00 00 00 80       	or     eax,0x80000000
c0027f46:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f4b:	29 d1                	sub    ecx,edx
c0027f4d:	d3 e8                	shr    eax,cl
c0027f4f:	eb 2e                	jmp    c0027f7f <__fixdfsi+0x6b>
c0027f51:	31 c0                	xor    eax,eax
c0027f53:	81 c2 01 04 00 00    	add    edx,0x401
c0027f59:	78 24                	js     c0027f7f <__fixdfsi+0x6b>
c0027f5b:	83 fa 1e             	cmp    edx,0x1e
c0027f5e:	7e 09                	jle    c0027f69 <__fixdfsi+0x55>
c0027f60:	83 fa 1f             	cmp    edx,0x1f
c0027f63:	75 18                	jne    c0027f7d <__fixdfsi+0x69>
c0027f65:	85 c9                	test   ecx,ecx
c0027f67:	75 14                	jne    c0027f7d <__fixdfsi+0x69>
c0027f69:	89 c8                	mov    eax,ecx
c0027f6b:	0d 00 00 00 80       	or     eax,0x80000000
c0027f70:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f75:	29 d1                	sub    ecx,edx
c0027f77:	d3 e8                	shr    eax,cl
c0027f79:	f7 d8                	neg    eax
c0027f7b:	eb 02                	jmp    c0027f7f <__fixdfsi+0x6b>
c0027f7d:	31 c0                	xor    eax,eax
c0027f7f:	5d                   	pop    ebp
c0027f80:	c3                   	ret    

c0027f81 <__fixunsdfsi>:
c0027f81:	55                   	push   ebp
c0027f82:	89 e5                	mov    ebp,esp
c0027f84:	53                   	push   ebx
c0027f85:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027f88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f8b:	89 d3                	mov    ebx,edx
c0027f8d:	c1 fb 14             	sar    ebx,0x14
c0027f90:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027f96:	31 c0                	xor    eax,eax
c0027f98:	83 fb 1f             	cmp    ebx,0x1f
c0027f9b:	77 1d                	ja     c0027fba <__fixunsdfsi+0x39>
c0027f9d:	89 d0                	mov    eax,edx
c0027f9f:	c1 e0 0b             	shl    eax,0xb
c0027fa2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fa7:	c1 e9 15             	shr    ecx,0x15
c0027faa:	09 c8                	or     eax,ecx
c0027fac:	0d 00 00 00 80       	or     eax,0x80000000
c0027fb1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fb6:	29 d9                	sub    ecx,ebx
c0027fb8:	d3 e8                	shr    eax,cl
c0027fba:	5b                   	pop    ebx
c0027fbb:	5d                   	pop    ebp
c0027fbc:	c3                   	ret    

c0027fbd <__cmpdf2>:
c0027fbd:	55                   	push   ebp
c0027fbe:	89 e5                	mov    ebp,esp
c0027fc0:	57                   	push   edi
c0027fc1:	56                   	push   esi
c0027fc2:	53                   	push   ebx
c0027fc3:	83 ec 0c             	sub    esp,0xc
c0027fc6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027fc9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fcc:	89 ca                	mov    edx,ecx
c0027fce:	c1 ea 14             	shr    edx,0x14
c0027fd1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027fd7:	89 cb                	mov    ebx,ecx
c0027fd9:	c1 fb 1f             	sar    ebx,0x1f
c0027fdc:	31 da                	xor    edx,ebx
c0027fde:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fe1:	89 df                	mov    edi,ebx
c0027fe3:	c1 e7 0b             	shl    edi,0xb
c0027fe6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fe9:	c1 e1 0b             	shl    ecx,0xb
c0027fec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ff2:	c1 eb 15             	shr    ebx,0x15
c0027ff5:	09 d9                	or     ecx,ebx
c0027ff7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027ffa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027ffd:	89 ce                	mov    esi,ecx
c0027fff:	c1 ee 14             	shr    esi,0x14
c0028002:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028008:	89 cb                	mov    ebx,ecx
c002800a:	c1 fb 1f             	sar    ebx,0x1f
c002800d:	31 de                	xor    esi,ebx
c002800f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028012:	89 df                	mov    edi,ebx
c0028014:	c1 e7 0b             	shl    edi,0xb
c0028017:	c1 e1 0b             	shl    ecx,0xb
c002801a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028020:	c1 eb 15             	shr    ebx,0x15
c0028023:	09 d9                	or     ecx,ebx
c0028025:	89 d3                	mov    ebx,edx
c0028027:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002802d:	43                   	inc    ebx
c002802e:	83 fb 01             	cmp    ebx,0x1
c0028031:	77 08                	ja     c002803b <__cmpdf2+0x7e>
c0028033:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028036:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028039:	75 68                	jne    c00280a3 <__cmpdf2+0xe6>
c002803b:	89 f3                	mov    ebx,esi
c002803d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028043:	43                   	inc    ebx
c0028044:	83 fb 01             	cmp    ebx,0x1
c0028047:	77 06                	ja     c002804f <__cmpdf2+0x92>
c0028049:	89 fb                	mov    ebx,edi
c002804b:	09 cb                	or     ebx,ecx
c002804d:	75 54                	jne    c00280a3 <__cmpdf2+0xe6>
c002804f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028052:	09 f8                	or     eax,edi
c0028054:	09 c8                	or     eax,ecx
c0028056:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028059:	75 12                	jne    c002806d <__cmpdf2+0xb0>
c002805b:	8d 42 01             	lea    eax,[edx+0x1]
c002805e:	83 f8 01             	cmp    eax,0x1
c0028061:	77 0a                	ja     c002806d <__cmpdf2+0xb0>
c0028063:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028066:	31 c0                	xor    eax,eax
c0028068:	83 fb 01             	cmp    ebx,0x1
c002806b:	76 36                	jbe    c00280a3 <__cmpdf2+0xe6>
c002806d:	b8 01 00 00 00       	mov    eax,0x1
c0028072:	39 f2                	cmp    edx,esi
c0028074:	7f 2d                	jg     c00280a3 <__cmpdf2+0xe6>
c0028076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002807b:	7c 26                	jl     c00280a3 <__cmpdf2+0xe6>
c002807d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028080:	77 07                	ja     c0028089 <__cmpdf2+0xcc>
c0028082:	72 16                	jb     c002809a <__cmpdf2+0xdd>
c0028084:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028087:	76 0a                	jbe    c0028093 <__cmpdf2+0xd6>
c0028089:	89 d0                	mov    eax,edx
c002808b:	c1 f8 1f             	sar    eax,0x1f
c002808e:	83 c8 01             	or     eax,0x1
c0028091:	eb 10                	jmp    c00280a3 <__cmpdf2+0xe6>
c0028093:	b8 00 00 00 00       	mov    eax,0x0
c0028098:	73 09                	jae    c00280a3 <__cmpdf2+0xe6>
c002809a:	89 d0                	mov    eax,edx
c002809c:	c1 f8 1f             	sar    eax,0x1f
c002809f:	83 e0 02             	and    eax,0x2
c00280a2:	48                   	dec    eax
c00280a3:	83 c4 0c             	add    esp,0xc
c00280a6:	5b                   	pop    ebx
c00280a7:	5e                   	pop    esi
c00280a8:	5f                   	pop    edi
c00280a9:	5d                   	pop    ebp
c00280aa:	c3                   	ret    

c00280ab <__eqdf2>:
c00280ab:	55                   	push   ebp
c00280ac:	89 e5                	mov    ebp,esp
c00280ae:	50                   	push   eax
c00280af:	6a 01                	push   0x1
c00280b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280bd:	e8 fb fe ff ff       	call   c0027fbd <__cmpdf2>
c00280c2:	83 c4 18             	add    esp,0x18
c00280c5:	c9                   	leave  
c00280c6:	c3                   	ret    

c00280c7 <__nedf2>:
c00280c7:	eb e2                	jmp    c00280ab <__eqdf2>

c00280c9 <__gtdf2>:
c00280c9:	55                   	push   ebp
c00280ca:	89 e5                	mov    ebp,esp
c00280cc:	50                   	push   eax
c00280cd:	6a ff                	push   0xffffffff
c00280cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280db:	e8 dd fe ff ff       	call   c0027fbd <__cmpdf2>
c00280e0:	83 c4 18             	add    esp,0x18
c00280e3:	c9                   	leave  
c00280e4:	c3                   	ret    

c00280e5 <__gedf2>:
c00280e5:	eb e2                	jmp    c00280c9 <__gtdf2>

c00280e7 <__ltdf2>:
c00280e7:	eb c2                	jmp    c00280ab <__eqdf2>

c00280e9 <__ledf2>:
c00280e9:	eb c0                	jmp    c00280ab <__eqdf2>

c00280eb <__truncdfsf2>:
c00280eb:	55                   	push   ebp
c00280ec:	89 e5                	mov    ebp,esp
c00280ee:	57                   	push   edi
c00280ef:	56                   	push   esi
c00280f0:	53                   	push   ebx
c00280f1:	83 ec 0c             	sub    esp,0xc
c00280f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280f7:	89 d1                	mov    ecx,edx
c00280f9:	c1 f9 14             	sar    ecx,0x14
c00280fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280ff:	89 df                	mov    edi,ebx
c0028101:	c1 e7 0b             	shl    edi,0xb
c0028104:	89 d0                	mov    eax,edx
c0028106:	c1 e0 0b             	shl    eax,0xb
c0028109:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002810e:	c1 eb 15             	shr    ebx,0x15
c0028111:	09 d8                	or     eax,ebx
c0028113:	89 cb                	mov    ebx,ecx
c0028115:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002811b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028121:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028127:	0f 86 9e 00 00 00    	jbe    c00281cb <__truncdfsf2+0xe0>
c002812d:	85 db                	test   ebx,ebx
c002812f:	75 0a                	jne    c002813b <__truncdfsf2+0x50>
c0028131:	c1 fa 17             	sar    edx,0x17
c0028134:	30 d2                	xor    dl,dl
c0028136:	e9 84 00 00 00       	jmp    c00281bf <__truncdfsf2+0xd4>
c002813b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028141:	83 fe 83             	cmp    esi,0xffffff83
c0028144:	7d 4b                	jge    c0028191 <__truncdfsf2+0xa6>
c0028146:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002814b:	29 f1                	sub    ecx,esi
c002814d:	83 f9 1f             	cmp    ecx,0x1f
c0028150:	7f 6b                	jg     c00281bd <__truncdfsf2+0xd2>
c0028152:	0d 00 00 00 80       	or     eax,0x80000000
c0028157:	89 c3                	mov    ebx,eax
c0028159:	d3 eb                	shr    ebx,cl
c002815b:	be 01 00 00 00       	mov    esi,0x1
c0028160:	d3 e6                	shl    esi,cl
c0028162:	4e                   	dec    esi
c0028163:	21 f0                	and    eax,esi
c0028165:	09 f8                	or     eax,edi
c0028167:	0f 95 c0             	setne  al
c002816a:	0f b6 c0             	movzx  eax,al
c002816d:	09 c3                	or     ebx,eax
c002816f:	89 d9                	mov    ecx,ebx
c0028171:	c1 e9 08             	shr    ecx,0x8
c0028174:	f6 c3 7f             	test   bl,0x7f
c0028177:	0f 95 c0             	setne  al
c002817a:	09 c8                	or     eax,ecx
c002817c:	83 e0 01             	and    eax,0x1
c002817f:	c1 eb 07             	shr    ebx,0x7
c0028182:	21 c3                	and    ebx,eax
c0028184:	81 e2 00 00 00 80    	and    edx,0x80000000
c002818a:	09 d1                	or     ecx,edx
c002818c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002818f:	eb 76                	jmp    c0028207 <__truncdfsf2+0x11c>
c0028191:	83 c6 80             	add    esi,0xffffff80
c0028194:	7e 1d                	jle    c00281b3 <__truncdfsf2+0xc8>
c0028196:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002819c:	75 0b                	jne    c00281a9 <__truncdfsf2+0xbe>
c002819e:	09 f8                	or     eax,edi
c00281a0:	74 09                	je     c00281ab <__truncdfsf2+0xc0>
c00281a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00281a7:	eb 02                	jmp    c00281ab <__truncdfsf2+0xc0>
c00281a9:	31 c0                	xor    eax,eax
c00281ab:	c1 fa 17             	sar    edx,0x17
c00281ae:	80 ca ff             	or     dl,0xff
c00281b1:	eb 0e                	jmp    c00281c1 <__truncdfsf2+0xd6>
c00281b3:	c1 fa 1f             	sar    edx,0x1f
c00281b6:	c1 e2 08             	shl    edx,0x8
c00281b9:	09 ca                	or     edx,ecx
c00281bb:	eb 04                	jmp    c00281c1 <__truncdfsf2+0xd6>
c00281bd:	31 d2                	xor    edx,edx
c00281bf:	31 c0                	xor    eax,eax
c00281c1:	c1 e2 17             	shl    edx,0x17
c00281c4:	c1 e8 08             	shr    eax,0x8
c00281c7:	09 d0                	or     eax,edx
c00281c9:	eb 3c                	jmp    c0028207 <__truncdfsf2+0x11c>
c00281cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00281d1:	89 ca                	mov    edx,ecx
c00281d3:	c1 fa 0b             	sar    edx,0xb
c00281d6:	c1 e2 08             	shl    edx,0x8
c00281d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00281dc:	31 db                	xor    ebx,ebx
c00281de:	85 ff                	test   edi,edi
c00281e0:	0f 95 c3             	setne  bl
c00281e3:	09 d8                	or     eax,ebx
c00281e5:	89 c3                	mov    ebx,eax
c00281e7:	c1 eb 08             	shr    ebx,0x8
c00281ea:	a8 7f                	test   al,0x7f
c00281ec:	0f 95 c2             	setne  dl
c00281ef:	89 d6                	mov    esi,edx
c00281f1:	09 de                	or     esi,ebx
c00281f3:	83 e6 01             	and    esi,0x1
c00281f6:	c1 e8 07             	shr    eax,0x7
c00281f9:	21 f0                	and    eax,esi
c00281fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00281fe:	09 ca                	or     edx,ecx
c0028200:	c1 e2 17             	shl    edx,0x17
c0028203:	09 da                	or     edx,ebx
c0028205:	01 d0                	add    eax,edx
c0028207:	83 c4 0c             	add    esp,0xc
c002820a:	5b                   	pop    ebx
c002820b:	5e                   	pop    esi
c002820c:	5f                   	pop    edi
c002820d:	5d                   	pop    ebp
c002820e:	c3                   	ret    

c002820f <__extendsfdf2>:
c002820f:	55                   	push   ebp
c0028210:	89 e5                	mov    ebp,esp
c0028212:	57                   	push   edi
c0028213:	56                   	push   esi
c0028214:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028217:	89 d1                	mov    ecx,edx
c0028219:	c1 f9 17             	sar    ecx,0x17
c002821c:	c1 e2 08             	shl    edx,0x8
c002821f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028225:	89 c8                	mov    eax,ecx
c0028227:	80 e4 f8             	and    ah,0xf8
c002822a:	8d 71 01             	lea    esi,[ecx+0x1]
c002822d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028233:	75 27                	jne    c002825c <__extendsfdf2+0x4d>
c0028235:	81 e1 ff 00 00 00    	and    ecx,0xff
c002823b:	75 18                	jne    c0028255 <__extendsfdf2+0x46>
c002823d:	85 d2                	test   edx,edx
c002823f:	74 20                	je     c0028261 <__extendsfdf2+0x52>
c0028241:	41                   	inc    ecx
c0028242:	01 d2                	add    edx,edx
c0028244:	79 fb                	jns    c0028241 <__extendsfdf2+0x32>
c0028246:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002824c:	29 c8                	sub    eax,ecx
c002824e:	05 81 03 00 00       	add    eax,0x381
c0028253:	eb 0c                	jmp    c0028261 <__extendsfdf2+0x52>
c0028255:	05 00 07 00 00       	add    eax,0x700
c002825a:	eb 05                	jmp    c0028261 <__extendsfdf2+0x52>
c002825c:	05 80 03 00 00       	add    eax,0x380
c0028261:	c1 e0 14             	shl    eax,0x14
c0028264:	89 c1                	mov    ecx,eax
c0028266:	89 d0                	mov    eax,edx
c0028268:	c1 e8 0b             	shr    eax,0xb
c002826b:	09 c1                	or     ecx,eax
c002826d:	c1 e2 15             	shl    edx,0x15
c0028270:	89 d0                	mov    eax,edx
c0028272:	89 ca                	mov    edx,ecx
c0028274:	5e                   	pop    esi
c0028275:	5f                   	pop    edi
c0028276:	5d                   	pop    ebp
c0028277:	c3                   	ret    
c0028278:	66 90                	xchg   ax,ax
c002827a:	66 90                	xchg   ax,ax
c002827c:	66 90                	xchg   ax,ax
c002827e:	66 90                	xchg   ax,ax

c0028280 <fabs>:
c0028280:	83 ec 0c             	sub    esp,0xc
c0028283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028287:	89 04 24             	mov    DWORD PTR [esp],eax
c002828a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002828e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028293:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028297:	dd 04 24             	fld    QWORD PTR [esp]
c002829a:	83 c4 0c             	add    esp,0xc
c002829d:	c3                   	ret    
c002829e:	66 90                	xchg   ax,ax

c00282a0 <lrint>:
c00282a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00282a4:	83 ec 04             	sub    esp,0x4
c00282a7:	db 1c 24             	fistp  DWORD PTR [esp]
c00282aa:	58                   	pop    eax
c00282ab:	c3                   	ret    

c00282ac <lrintf>:
c00282ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00282b0:	83 ec 04             	sub    esp,0x4
c00282b3:	db 1c 24             	fistp  DWORD PTR [esp]
c00282b6:	58                   	pop    eax
c00282b7:	c3                   	ret    

Disassembly of section .init:

c00282b8 <_init>:
c00282b8:	55                   	push   ebp
c00282b9:	89 e5                	mov    ebp,esp
c00282bb:	e8 58 7e fd ff       	call   c0000118 <frame_dummy>
c00282c0:	e8 5b e0 ff ff       	call   c0026320 <__do_global_ctors_aux>
c00282c5:	5d                   	pop    ebp
c00282c6:	c3                   	ret    

Disassembly of section .fini:

c00282c7 <_fini>:
c00282c7:	55                   	push   ebp
c00282c8:	89 e5                	mov    ebp,esp
c00282ca:	e8 d9 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00282cf:	5d                   	pop    ebp
c00282d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00282d2 <Computer::~Computer()>:
c00282d2:	83 ec 0c             	sub    esp,0xc
c00282d5:	ba 5c 9e 02 c0       	mov    edx,0xc0029e5c
c00282da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282de:	89 10                	mov    DWORD PTR [eax],edx
c00282e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e4:	83 ec 0c             	sub    esp,0xc
c00282e7:	50                   	push   eax
c00282e8:	e8 f3 b5 fe ff       	call   c00138e0 <Device::~Device()>
c00282ed:	83 c4 10             	add    esp,0x10
c00282f0:	90                   	nop
c00282f1:	83 c4 0c             	add    esp,0xc
c00282f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00282f6 <Computer::~Computer()>:
c00282f6:	83 ec 0c             	sub    esp,0xc
c00282f9:	83 ec 0c             	sub    esp,0xc
c00282fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028300:	e8 cd ff ff ff       	call   c00282d2 <Computer::~Computer()>
c0028305:	83 c4 10             	add    esp,0x10
c0028308:	83 ec 08             	sub    esp,0x8
c002830b:	68 ec 01 00 00       	push   0x1ec
c0028310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028314:	e8 e8 a1 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028319:	83 c4 10             	add    esp,0x10
c002831c:	83 c4 0c             	add    esp,0xc
c002831f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028320 <idleCommon()>:
c0028320:	83 ec 0c             	sub    esp,0xc
c0028323:	fa                   	cli    
c0028324:	ff 05 68 0c 03 c0    	inc    DWORD PTR ds:0xc0030c68
c002832a:	e8 a0 55 ff ff       	call   c001d8cf <schedule()>
c002832f:	a1 68 0c 03 c0       	mov    eax,ds:0xc0030c68
c0028334:	48                   	dec    eax
c0028335:	a3 68 0c 03 c0       	mov    ds:0xc0030c68,eax
c002833a:	75 01                	jne    c002833d <idleCommon()+0x1d>
c002833c:	fb                   	sti    
c002833d:	83 c4 0c             	add    esp,0xc
c0028340:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028342 <LinkedList<UnixFile>::~LinkedList()>:
c0028342:	90                   	nop
c0028343:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028344 <LinkedList<UnixFile>::LinkedList()>:
c0028344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028348:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002834e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028352:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002835d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028368:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002836e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028372:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002837d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028384:	90                   	nop
c0028385:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028386 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028386:	83 ec 0c             	sub    esp,0xc
c0028389:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002838e:	75 10                	jne    c00283a0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028390:	83 ec 0c             	sub    esp,0xc
c0028393:	68 68 a0 02 c0       	push   0xc002a068
c0028398:	e8 a8 19 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c002839d:	83 c4 10             	add    esp,0x10
c00283a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00283a6:	85 c0                	test   eax,eax
c00283a8:	74 34                	je     c00283de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283b1:	85 c0                	test   eax,eax
c00283b3:	74 29                	je     c00283de <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283dc:	eb 65                	jmp    c0028443 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00283e4:	85 c0                	test   eax,eax
c00283e6:	75 4b                	jne    c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ef:	85 c0                	test   eax,eax
c00283f1:	75 40                	jne    c0028433 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283fb:	89 10                	mov    DWORD PTR [eax],edx
c00283fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028405:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002840f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002841d:	85 c0                	test   eax,eax
c002841f:	74 22                	je     c0028443 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028421:	83 ec 0c             	sub    esp,0xc
c0028424:	68 8a a0 02 c0       	push   0xc002a08a
c0028429:	e8 17 19 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c002842e:	83 c4 10             	add    esp,0x10
c0028431:	eb 10                	jmp    c0028443 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028433:	83 ec 0c             	sub    esp,0xc
c0028436:	68 94 a0 02 c0       	push   0xc002a094
c002843b:	e8 05 19 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028440:	83 c4 10             	add    esp,0x10
c0028443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028447:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002844a:	8d 50 01             	lea    edx,[eax+0x1]
c002844d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028451:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028454:	90                   	nop
c0028455:	83 c4 0c             	add    esp,0xc
c0028458:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002845a <LinkedList<UnixFile>::getFirstElement()>:
c002845a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002845e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028460:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028462 <LinkedList<UnixFile>::removeFirst()>:
c0028462:	83 ec 0c             	sub    esp,0xc
c0028465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028469:	8b 00                	mov    eax,DWORD PTR [eax]
c002846b:	85 c0                	test   eax,eax
c002846d:	75 12                	jne    c0028481 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002846f:	83 ec 0c             	sub    esp,0xc
c0028472:	68 a0 a0 02 c0       	push   0xc002a0a0
c0028477:	e8 c9 18 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c002847c:	83 c4 10             	add    esp,0x10
c002847f:	eb 7e                	jmp    c00284ff <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028485:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028488:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002848b:	85 c0                	test   eax,eax
c002848d:	74 10                	je     c002849f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002848f:	83 ec 0c             	sub    esp,0xc
c0028492:	68 eb a0 02 c0       	push   0xc002a0eb
c0028497:	e8 a9 18 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c002849c:	83 c4 10             	add    esp,0x10
c002849f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00284a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284a8:	85 c0                	test   eax,eax
c00284aa:	75 33                	jne    c00284df <LinkedList<UnixFile>::removeFirst()+0x7d>
c00284ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284c8:	83 f8 01             	cmp    eax,0x1
c00284cb:	74 21                	je     c00284ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284cd:	83 ec 0c             	sub    esp,0xc
c00284d0:	68 c4 a0 02 c0       	push   0xc002a0c4
c00284d5:	e8 6b 18 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00284da:	83 c4 10             	add    esp,0x10
c00284dd:	eb 0f                	jmp    c00284ee <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00284e5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	89 10                	mov    DWORD PTR [eax],edx
c00284ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284f5:	8d 50 ff             	lea    edx,[eax-0x1]
c00284f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284ff:	83 c4 0c             	add    esp,0xc
c0028502:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028504 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028508:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002850b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002850c <DriverlessDevice::~DriverlessDevice()>:
c002850c:	ba 7c a8 02 c0       	mov    edx,0xc002a87c
c0028511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028515:	89 10                	mov    DWORD PTR [eax],edx
c0028517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002851b:	50                   	push   eax
c002851c:	e8 bf b3 fe ff       	call   c00138e0 <Device::~Device()>
c0028521:	83 c4 04             	add    esp,0x4
c0028524:	90                   	nop
c0028525:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028526 <DriverlessDevice::~DriverlessDevice()>:
c0028526:	83 ec 0c             	sub    esp,0xc
c0028529:	83 ec 0c             	sub    esp,0xc
c002852c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028530:	e8 d7 ff ff ff       	call   c002850c <DriverlessDevice::~DriverlessDevice()>
c0028535:	83 c4 10             	add    esp,0x10
c0028538:	83 ec 08             	sub    esp,0x8
c002853b:	68 58 01 00 00       	push   0x158
c0028540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028544:	e8 b8 9f fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028549:	83 c4 10             	add    esp,0x10
c002854c:	83 c4 0c             	add    esp,0xc
c002854f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028550 <LinkedList<Device>::addElement(Device*)>:
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028558:	75 10                	jne    c002856a <LinkedList<Device>::addElement(Device*)+0x1a>
c002855a:	83 ec 0c             	sub    esp,0xc
c002855d:	68 68 a0 02 c0       	push   0xc002a068
c0028562:	e8 de 17 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028567:	83 c4 10             	add    esp,0x10
c002856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028570:	85 c0                	test   eax,eax
c0028572:	74 3a                	je     c00285ae <LinkedList<Device>::addElement(Device*)+0x5e>
c0028574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857b:	85 c0                	test   eax,eax
c002857d:	74 2f                	je     c00285ae <LinkedList<Device>::addElement(Device*)+0x5e>
c002857f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028583:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028586:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002858a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028594:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028598:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002859b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285a2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285ac:	eb 68                	jmp    c0028616 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285b4:	85 c0                	test   eax,eax
c00285b6:	75 4e                	jne    c0028606 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285bf:	85 c0                	test   eax,eax
c00285c1:	75 43                	jne    c0028606 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285cb:	89 10                	mov    DWORD PTR [eax],edx
c00285cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285df:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f0:	85 c0                	test   eax,eax
c00285f2:	74 22                	je     c0028616 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285f4:	83 ec 0c             	sub    esp,0xc
c00285f7:	68 8a a0 02 c0       	push   0xc002a08a
c00285fc:	e8 44 17 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028601:	83 c4 10             	add    esp,0x10
c0028604:	eb 10                	jmp    c0028616 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028606:	83 ec 0c             	sub    esp,0xc
c0028609:	68 94 a0 02 c0       	push   0xc002a094
c002860e:	e8 32 17 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028613:	83 c4 10             	add    esp,0x10
c0028616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002861d:	8d 50 01             	lea    edx,[eax+0x1]
c0028620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028624:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028627:	90                   	nop
c0028628:	83 c4 0c             	add    esp,0xc
c002862b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002862c <LinkedList<Device>::LinkedList()>:
c002862c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028630:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002863a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028641:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028645:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002864c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028650:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002865a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028665:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002866c:	90                   	nop
c002866d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002866e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002866e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028672:	8b 00                	mov    eax,DWORD PTR [eax]
c0028674:	85 c0                	test   eax,eax
c0028676:	75 0e                	jne    c0028686 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002867c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002867f:	85 c0                	test   eax,eax
c0028681:	75 03                	jne    c0028686 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028683:	b0 01                	mov    al,0x1
c0028685:	c3                   	ret    
c0028686:	b0 00                	mov    al,0x0
c0028688:	90                   	nop
c0028689:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002868a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002868a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002868e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028690:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028692 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028692:	83 ec 0c             	sub    esp,0xc
c0028695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028699:	8b 00                	mov    eax,DWORD PTR [eax]
c002869b:	85 c0                	test   eax,eax
c002869d:	75 15                	jne    c00286b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002869f:	83 ec 0c             	sub    esp,0xc
c00286a2:	68 a0 a0 02 c0       	push   0xc002a0a0
c00286a7:	e8 99 16 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00286ac:	83 c4 10             	add    esp,0x10
c00286af:	e9 88 00 00 00       	jmp    c002873c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286be:	85 c0                	test   eax,eax
c00286c0:	0f 95 c0             	setne  al
c00286c3:	84 c0                	test   al,al
c00286c5:	74 10                	je     c00286d7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00286c7:	83 ec 0c             	sub    esp,0xc
c00286ca:	68 eb a0 02 c0       	push   0xc002a0eb
c00286cf:	e8 71 16 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00286d4:	83 c4 10             	add    esp,0x10
c00286d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286db:	8b 00                	mov    eax,DWORD PTR [eax]
c00286dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286e0:	85 c0                	test   eax,eax
c00286e2:	0f 94 c0             	sete   al
c00286e5:	84 c0                	test   al,al
c00286e7:	74 33                	je     c002871c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00286e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028702:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028705:	83 f8 01             	cmp    eax,0x1
c0028708:	74 21                	je     c002872b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002870a:	83 ec 0c             	sub    esp,0xc
c002870d:	68 c4 a0 02 c0       	push   0xc002a0c4
c0028712:	e8 2e 16 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028717:	83 c4 10             	add    esp,0x10
c002871a:	eb 0f                	jmp    c002872b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002871c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028720:	8b 00                	mov    eax,DWORD PTR [eax]
c0028722:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	89 10                	mov    DWORD PTR [eax],edx
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028732:	8d 50 ff             	lea    edx,[eax-0x1]
c0028735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028739:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002873c:	83 c4 0c             	add    esp,0xc
c002873f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028740 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028740:	83 ec 0c             	sub    esp,0xc
c0028743:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028748:	75 10                	jne    c002875a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002874a:	83 ec 0c             	sub    esp,0xc
c002874d:	68 68 a0 02 c0       	push   0xc002a068
c0028752:	e8 ee 15 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028757:	83 c4 10             	add    esp,0x10
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028760:	85 c0                	test   eax,eax
c0028762:	74 34                	je     c0028798 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002876b:	85 c0                	test   eax,eax
c002876d:	74 29                	je     c0028798 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002876f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028773:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028776:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002877a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002877d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028785:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002878f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028796:	eb 65                	jmp    c00287fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 00                	mov    eax,DWORD PTR [eax]
c002879e:	85 c0                	test   eax,eax
c00287a0:	75 4b                	jne    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a9:	85 c0                	test   eax,eax
c00287ab:	75 40                	jne    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 10                	mov    DWORD PTR [eax],edx
c00287b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287d7:	85 c0                	test   eax,eax
c00287d9:	74 22                	je     c00287fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287db:	83 ec 0c             	sub    esp,0xc
c00287de:	68 8a a0 02 c0       	push   0xc002a08a
c00287e3:	e8 5d 15 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00287e8:	83 c4 10             	add    esp,0x10
c00287eb:	eb 10                	jmp    c00287fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287ed:	83 ec 0c             	sub    esp,0xc
c00287f0:	68 94 a0 02 c0       	push   0xc002a094
c00287f5:	e8 4b 15 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00287fa:	83 c4 10             	add    esp,0x10
c00287fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028801:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028804:	8d 50 01             	lea    edx,[eax+0x1]
c0028807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002880e:	90                   	nop
c002880f:	83 c4 0c             	add    esp,0xc
c0028812:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028814 <ACPI::~ACPI()>:
c0028814:	83 ec 0c             	sub    esp,0xc
c0028817:	ba e8 b0 02 c0       	mov    edx,0xc002b0e8
c002881c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028820:	89 10                	mov    DWORD PTR [eax],edx
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	83 ec 0c             	sub    esp,0xc
c0028829:	50                   	push   eax
c002882a:	e8 b1 b0 fe ff       	call   c00138e0 <Device::~Device()>
c002882f:	83 c4 10             	add    esp,0x10
c0028832:	90                   	nop
c0028833:	83 c4 0c             	add    esp,0xc
c0028836:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028838 <ACPI::~ACPI()>:
c0028838:	83 ec 0c             	sub    esp,0xc
c002883b:	83 ec 0c             	sub    esp,0xc
c002883e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028842:	e8 cd ff ff ff       	call   c0028814 <ACPI::~ACPI()>
c0028847:	83 c4 10             	add    esp,0x10
c002884a:	83 ec 08             	sub    esp,0x8
c002884d:	68 64 12 00 00       	push   0x1264
c0028852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028856:	e8 a6 9c fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c002885b:	83 c4 10             	add    esp,0x10
c002885e:	83 c4 0c             	add    esp,0xc
c0028861:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028862 <LinkedList<Device>::~LinkedList()>:
c0028862:	90                   	nop
c0028863:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028864 <LinkedList<Device>::isEmpty()>:
c0028864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028868:	8b 00                	mov    eax,DWORD PTR [eax]
c002886a:	85 c0                	test   eax,eax
c002886c:	75 0e                	jne    c002887c <LinkedList<Device>::isEmpty()+0x18>
c002886e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028872:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028875:	85 c0                	test   eax,eax
c0028877:	75 03                	jne    c002887c <LinkedList<Device>::isEmpty()+0x18>
c0028879:	b0 01                	mov    al,0x1
c002887b:	c3                   	ret    
c002887c:	b0 00                	mov    al,0x0
c002887e:	90                   	nop
c002887f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028880 <LinkedList<Device>::getFirstElement()>:
c0028880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028884:	8b 00                	mov    eax,DWORD PTR [eax]
c0028886:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028888 <LinkedList<Device>::removeFirst()>:
c0028888:	83 ec 0c             	sub    esp,0xc
c002888b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028891:	85 c0                	test   eax,eax
c0028893:	75 15                	jne    c00288aa <LinkedList<Device>::removeFirst()+0x22>
c0028895:	83 ec 0c             	sub    esp,0xc
c0028898:	68 a0 a0 02 c0       	push   0xc002a0a0
c002889d:	e8 a3 14 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00288a2:	83 c4 10             	add    esp,0x10
c00288a5:	e9 87 00 00 00       	jmp    c0028931 <LinkedList<Device>::removeFirst()+0xa9>
c00288aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288b7:	85 c0                	test   eax,eax
c00288b9:	74 10                	je     c00288cb <LinkedList<Device>::removeFirst()+0x43>
c00288bb:	83 ec 0c             	sub    esp,0xc
c00288be:	68 eb a0 02 c0       	push   0xc002a0eb
c00288c3:	e8 7d 14 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c00288c8:	83 c4 10             	add    esp,0x10
c00288cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00288d1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288d7:	85 c0                	test   eax,eax
c00288d9:	75 33                	jne    c002890e <LinkedList<Device>::removeFirst()+0x86>
c00288db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f7:	83 f8 01             	cmp    eax,0x1
c00288fa:	74 24                	je     c0028920 <LinkedList<Device>::removeFirst()+0x98>
c00288fc:	83 ec 0c             	sub    esp,0xc
c00288ff:	68 c4 a0 02 c0       	push   0xc002a0c4
c0028904:	e8 3c 14 ff ff       	call   c0019d45 <Krnl::panic(char const*)>
c0028909:	83 c4 10             	add    esp,0x10
c002890c:	eb 12                	jmp    c0028920 <LinkedList<Device>::removeFirst()+0x98>
c002890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028912:	8b 00                	mov    eax,DWORD PTR [eax]
c0028914:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	89 10                	mov    DWORD PTR [eax],edx
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028927:	8d 50 ff             	lea    edx,[eax-0x1]
c002892a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028931:	83 c4 0c             	add    esp,0xc
c0028934:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028936 <CPU::~CPU()>:
c0028936:	83 ec 0c             	sub    esp,0xc
c0028939:	ba 38 b3 02 c0       	mov    edx,0xc002b338
c002893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028942:	89 10                	mov    DWORD PTR [eax],edx
c0028944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028948:	83 ec 0c             	sub    esp,0xc
c002894b:	50                   	push   eax
c002894c:	e8 8f af fe ff       	call   c00138e0 <Device::~Device()>
c0028951:	83 c4 10             	add    esp,0x10
c0028954:	90                   	nop
c0028955:	83 c4 0c             	add    esp,0xc
c0028958:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002895a <CPU::~CPU()>:
c002895a:	83 ec 0c             	sub    esp,0xc
c002895d:	83 ec 0c             	sub    esp,0xc
c0028960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028964:	e8 cd ff ff ff       	call   c0028936 <CPU::~CPU()>
c0028969:	83 c4 10             	add    esp,0x10
c002896c:	83 ec 08             	sub    esp,0x8
c002896f:	68 98 11 00 00       	push   0x1198
c0028974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028978:	e8 84 9b fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c002897d:	83 c4 10             	add    esp,0x10
c0028980:	83 c4 0c             	add    esp,0xc
c0028983:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028984 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028984:	90                   	nop
c0028985:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028986 <ThreadControlBlock::ThreadControlBlock()>:
c0028986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002898a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028995:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002899c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00289a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ab:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00289b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289b6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00289bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00289c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00289cd:	90                   	nop
c00289ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00289d0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00289d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00289f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a09:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a10:	90                   	nop
c0028a11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028a12 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a19:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028a1a <Vm::_FPUState::_FPUState()>:
c0028a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a1e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028a25:	90                   	nop
c0028a26:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028a28 <PCI::~PCI()>:
c0028a28:	83 ec 0c             	sub    esp,0xc
c0028a2b:	ba 64 be 02 c0       	mov    edx,0xc002be64
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	89 10                	mov    DWORD PTR [eax],edx
c0028a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3a:	83 ec 0c             	sub    esp,0xc
c0028a3d:	50                   	push   eax
c0028a3e:	e8 6d a8 fe ff       	call   c00132b0 <Bus::~Bus()>
c0028a43:	83 c4 10             	add    esp,0x10
c0028a46:	90                   	nop
c0028a47:	83 c4 0c             	add    esp,0xc
c0028a4a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028a4c <PCI::~PCI()>:
c0028a4c:	83 ec 0c             	sub    esp,0xc
c0028a4f:	83 ec 0c             	sub    esp,0xc
c0028a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a56:	e8 cd ff ff ff       	call   c0028a28 <PCI::~PCI()>
c0028a5b:	83 c4 10             	add    esp,0x10
c0028a5e:	83 ec 08             	sub    esp,0x8
c0028a61:	68 5c 01 00 00       	push   0x15c
c0028a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a6a:	e8 92 9a fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028a6f:	83 c4 10             	add    esp,0x10
c0028a72:	83 c4 0c             	add    esp,0xc
c0028a75:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028a76 <IDE::~IDE()>:
c0028a76:	83 ec 0c             	sub    esp,0xc
c0028a79:	ba 18 bf 02 c0       	mov    edx,0xc002bf18
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	89 10                	mov    DWORD PTR [eax],edx
c0028a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a88:	83 ec 0c             	sub    esp,0xc
c0028a8b:	50                   	push   eax
c0028a8c:	e8 65 b3 fe ff       	call   c0013df6 <HardDiskController::~HardDiskController()>
c0028a91:	83 c4 10             	add    esp,0x10
c0028a94:	90                   	nop
c0028a95:	83 c4 0c             	add    esp,0xc
c0028a98:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028a9a <IDE::~IDE()>:
c0028a9a:	83 ec 0c             	sub    esp,0xc
c0028a9d:	83 ec 0c             	sub    esp,0xc
c0028aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa4:	e8 cd ff ff ff       	call   c0028a76 <IDE::~IDE()>
c0028aa9:	83 c4 10             	add    esp,0x10
c0028aac:	83 ec 08             	sub    esp,0x8
c0028aaf:	68 70 02 00 00       	push   0x270
c0028ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ab8:	e8 44 9a fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028abd:	83 c4 10             	add    esp,0x10
c0028ac0:	83 c4 0c             	add    esp,0xc
c0028ac3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028ac4 <SATABus::~SATABus()>:
c0028ac4:	83 ec 0c             	sub    esp,0xc
c0028ac7:	ba 90 bf 02 c0       	mov    edx,0xc002bf90
c0028acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad0:	89 10                	mov    DWORD PTR [eax],edx
c0028ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad6:	83 ec 0c             	sub    esp,0xc
c0028ad9:	50                   	push   eax
c0028ada:	e8 17 b3 fe ff       	call   c0013df6 <HardDiskController::~HardDiskController()>
c0028adf:	83 c4 10             	add    esp,0x10
c0028ae2:	90                   	nop
c0028ae3:	83 c4 0c             	add    esp,0xc
c0028ae6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ae8 <SATABus::~SATABus()>:
c0028ae8:	83 ec 0c             	sub    esp,0xc
c0028aeb:	83 ec 0c             	sub    esp,0xc
c0028aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af2:	e8 cd ff ff ff       	call   c0028ac4 <SATABus::~SATABus()>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	83 ec 08             	sub    esp,0x8
c0028afd:	68 64 01 00 00       	push   0x164
c0028b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b06:	e8 f6 99 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028b0b:	83 c4 10             	add    esp,0x10
c0028b0e:	83 c4 0c             	add    esp,0xc
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028b12 <ATA::~ATA()>:
c0028b12:	83 ec 0c             	sub    esp,0xc
c0028b15:	ba dc bf 02 c0       	mov    edx,0xc002bfdc
c0028b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1e:	89 10                	mov    DWORD PTR [eax],edx
c0028b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b24:	83 ec 0c             	sub    esp,0xc
c0028b27:	50                   	push   eax
c0028b28:	e8 ab b3 fe ff       	call   c0013ed8 <PhysicalDisk::~PhysicalDisk()>
c0028b2d:	83 c4 10             	add    esp,0x10
c0028b30:	90                   	nop
c0028b31:	83 c4 0c             	add    esp,0xc
c0028b34:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028b36 <ATA::~ATA()>:
c0028b36:	83 ec 0c             	sub    esp,0xc
c0028b39:	83 ec 0c             	sub    esp,0xc
c0028b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b40:	e8 cd ff ff ff       	call   c0028b12 <ATA::~ATA()>
c0028b45:	83 c4 10             	add    esp,0x10
c0028b48:	83 ec 08             	sub    esp,0x8
c0028b4b:	68 7c 01 00 00       	push   0x17c
c0028b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b54:	e8 a8 99 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028b59:	83 c4 10             	add    esp,0x10
c0028b5c:	83 c4 0c             	add    esp,0xc
c0028b5f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028b60 <ATAPI::~ATAPI()>:
c0028b60:	83 ec 0c             	sub    esp,0xc
c0028b63:	ba 14 c0 02 c0       	mov    edx,0xc002c014
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	89 10                	mov    DWORD PTR [eax],edx
c0028b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b72:	83 ec 0c             	sub    esp,0xc
c0028b75:	50                   	push   eax
c0028b76:	e8 5d b3 fe ff       	call   c0013ed8 <PhysicalDisk::~PhysicalDisk()>
c0028b7b:	83 c4 10             	add    esp,0x10
c0028b7e:	90                   	nop
c0028b7f:	83 c4 0c             	add    esp,0xc
c0028b82:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028b84 <ATAPI::~ATAPI()>:
c0028b84:	83 ec 0c             	sub    esp,0xc
c0028b87:	83 ec 0c             	sub    esp,0xc
c0028b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b8e:	e8 cd ff ff ff       	call   c0028b60 <ATAPI::~ATAPI()>
c0028b93:	83 c4 10             	add    esp,0x10
c0028b96:	83 ec 08             	sub    esp,0x8
c0028b99:	68 80 01 00 00       	push   0x180
c0028b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ba2:	e8 5a 99 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028ba7:	83 c4 10             	add    esp,0x10
c0028baa:	83 c4 0c             	add    esp,0xc
c0028bad:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028bae <SATA::~SATA()>:
c0028bae:	83 ec 0c             	sub    esp,0xc
c0028bb1:	ba c8 c0 02 c0       	mov    edx,0xc002c0c8
c0028bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bba:	89 10                	mov    DWORD PTR [eax],edx
c0028bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc0:	83 ec 0c             	sub    esp,0xc
c0028bc3:	50                   	push   eax
c0028bc4:	e8 0f b3 fe ff       	call   c0013ed8 <PhysicalDisk::~PhysicalDisk()>
c0028bc9:	83 c4 10             	add    esp,0x10
c0028bcc:	90                   	nop
c0028bcd:	83 c4 0c             	add    esp,0xc
c0028bd0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028bd2 <SATA::~SATA()>:
c0028bd2:	83 ec 0c             	sub    esp,0xc
c0028bd5:	83 ec 0c             	sub    esp,0xc
c0028bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bdc:	e8 cd ff ff ff       	call   c0028bae <SATA::~SATA()>
c0028be1:	83 c4 10             	add    esp,0x10
c0028be4:	83 ec 08             	sub    esp,0x8
c0028be7:	68 7c 01 00 00       	push   0x17c
c0028bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bf0:	e8 0c 99 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028bf5:	83 c4 10             	add    esp,0x10
c0028bf8:	83 c4 0c             	add    esp,0xc
c0028bfb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028bfc <SATAPI::~SATAPI()>:
c0028bfc:	83 ec 0c             	sub    esp,0xc
c0028bff:	ba a4 c1 02 c0       	mov    edx,0xc002c1a4
c0028c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c08:	89 10                	mov    DWORD PTR [eax],edx
c0028c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0e:	83 ec 0c             	sub    esp,0xc
c0028c11:	50                   	push   eax
c0028c12:	e8 c1 b2 fe ff       	call   c0013ed8 <PhysicalDisk::~PhysicalDisk()>
c0028c17:	83 c4 10             	add    esp,0x10
c0028c1a:	90                   	nop
c0028c1b:	83 c4 0c             	add    esp,0xc
c0028c1e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028c20 <SATAPI::~SATAPI()>:
c0028c20:	83 ec 0c             	sub    esp,0xc
c0028c23:	83 ec 0c             	sub    esp,0xc
c0028c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2a:	e8 cd ff ff ff       	call   c0028bfc <SATAPI::~SATAPI()>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	83 ec 08             	sub    esp,0x8
c0028c35:	68 80 01 00 00       	push   0x180
c0028c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c3e:	e8 be 98 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028c43:	83 c4 10             	add    esp,0x10
c0028c46:	83 c4 0c             	add    esp,0xc
c0028c49:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028c4a <AVX::~AVX()>:
c0028c4a:	83 ec 0c             	sub    esp,0xc
c0028c4d:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0028c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c56:	89 10                	mov    DWORD PTR [eax],edx
c0028c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5c:	83 ec 0c             	sub    esp,0xc
c0028c5f:	50                   	push   eax
c0028c60:	e8 f7 b2 fe ff       	call   c0013f5c <FPU::~FPU()>
c0028c65:	83 c4 10             	add    esp,0x10
c0028c68:	90                   	nop
c0028c69:	83 c4 0c             	add    esp,0xc
c0028c6c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028c6e <AVX::~AVX()>:
c0028c6e:	83 ec 0c             	sub    esp,0xc
c0028c71:	83 ec 0c             	sub    esp,0xc
c0028c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c78:	e8 cd ff ff ff       	call   c0028c4a <AVX::~AVX()>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	83 ec 08             	sub    esp,0x8
c0028c83:	68 58 01 00 00       	push   0x158
c0028c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c8c:	e8 70 98 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028c91:	83 c4 10             	add    esp,0x10
c0028c94:	83 c4 0c             	add    esp,0xc
c0028c97:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028c98 <MMX::~MMX()>:
c0028c98:	83 ec 0c             	sub    esp,0xc
c0028c9b:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0028ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca4:	89 10                	mov    DWORD PTR [eax],edx
c0028ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028caa:	83 ec 0c             	sub    esp,0xc
c0028cad:	50                   	push   eax
c0028cae:	e8 a9 b2 fe ff       	call   c0013f5c <FPU::~FPU()>
c0028cb3:	83 c4 10             	add    esp,0x10
c0028cb6:	90                   	nop
c0028cb7:	83 c4 0c             	add    esp,0xc
c0028cba:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028cbc <MMX::~MMX()>:
c0028cbc:	83 ec 0c             	sub    esp,0xc
c0028cbf:	83 ec 0c             	sub    esp,0xc
c0028cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc6:	e8 cd ff ff ff       	call   c0028c98 <MMX::~MMX()>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	83 ec 08             	sub    esp,0x8
c0028cd1:	68 58 01 00 00       	push   0x158
c0028cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cda:	e8 22 98 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028cdf:	83 c4 10             	add    esp,0x10
c0028ce2:	83 c4 0c             	add    esp,0xc
c0028ce5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ce6 <SSE::~SSE()>:
c0028ce6:	83 ec 0c             	sub    esp,0xc
c0028ce9:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c0028cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf2:	89 10                	mov    DWORD PTR [eax],edx
c0028cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cf8:	83 ec 0c             	sub    esp,0xc
c0028cfb:	50                   	push   eax
c0028cfc:	e8 5b b2 fe ff       	call   c0013f5c <FPU::~FPU()>
c0028d01:	83 c4 10             	add    esp,0x10
c0028d04:	90                   	nop
c0028d05:	83 c4 0c             	add    esp,0xc
c0028d08:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028d0a <SSE::~SSE()>:
c0028d0a:	83 ec 0c             	sub    esp,0xc
c0028d0d:	83 ec 0c             	sub    esp,0xc
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 cd ff ff ff       	call   c0028ce6 <SSE::~SSE()>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 ec 08             	sub    esp,0x8
c0028d1f:	68 58 01 00 00       	push   0x158
c0028d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d28:	e8 d4 97 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028d2d:	83 c4 10             	add    esp,0x10
c0028d30:	83 c4 0c             	add    esp,0xc
c0028d33:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028d34 <x87::~x87()>:
c0028d34:	83 ec 0c             	sub    esp,0xc
c0028d37:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0028d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d40:	89 10                	mov    DWORD PTR [eax],edx
c0028d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d46:	83 ec 0c             	sub    esp,0xc
c0028d49:	50                   	push   eax
c0028d4a:	e8 0d b2 fe ff       	call   c0013f5c <FPU::~FPU()>
c0028d4f:	83 c4 10             	add    esp,0x10
c0028d52:	90                   	nop
c0028d53:	83 c4 0c             	add    esp,0xc
c0028d56:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028d58 <x87::~x87()>:
c0028d58:	83 ec 0c             	sub    esp,0xc
c0028d5b:	83 ec 0c             	sub    esp,0xc
c0028d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d62:	e8 cd ff ff ff       	call   c0028d34 <x87::~x87()>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	83 ec 08             	sub    esp,0x8
c0028d6d:	68 58 01 00 00       	push   0x158
c0028d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d76:	e8 86 97 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028d7b:	83 c4 10             	add    esp,0x10
c0028d7e:	83 c4 0c             	add    esp,0xc
c0028d81:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028d82 <IOAPIC::~IOAPIC()>:
c0028d82:	83 ec 0c             	sub    esp,0xc
c0028d85:	ba fc c3 02 c0       	mov    edx,0xc002c3fc
c0028d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8e:	89 10                	mov    DWORD PTR [eax],edx
c0028d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d94:	83 ec 0c             	sub    esp,0xc
c0028d97:	50                   	push   eax
c0028d98:	e8 43 ab fe ff       	call   c00138e0 <Device::~Device()>
c0028d9d:	83 c4 10             	add    esp,0x10
c0028da0:	90                   	nop
c0028da1:	83 c4 0c             	add    esp,0xc
c0028da4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028da6 <IOAPIC::~IOAPIC()>:
c0028da6:	83 ec 0c             	sub    esp,0xc
c0028da9:	83 ec 0c             	sub    esp,0xc
c0028dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db0:	e8 cd ff ff ff       	call   c0028d82 <IOAPIC::~IOAPIC()>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	83 ec 08             	sub    esp,0x8
c0028dbb:	68 68 01 00 00       	push   0x168
c0028dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc4:	e8 38 97 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028dc9:	83 c4 10             	add    esp,0x10
c0028dcc:	83 c4 0c             	add    esp,0xc
c0028dcf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028dd0 <APIC::~APIC()>:
c0028dd0:	83 ec 0c             	sub    esp,0xc
c0028dd3:	ba b4 c3 02 c0       	mov    edx,0xc002c3b4
c0028dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ddc:	89 10                	mov    DWORD PTR [eax],edx
c0028dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de2:	83 ec 0c             	sub    esp,0xc
c0028de5:	50                   	push   eax
c0028de6:	e8 3b b6 fe ff       	call   c0014426 <InterruptController::~InterruptController()>
c0028deb:	83 c4 10             	add    esp,0x10
c0028dee:	90                   	nop
c0028def:	83 c4 0c             	add    esp,0xc
c0028df2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028df4 <APIC::~APIC()>:
c0028df4:	83 ec 0c             	sub    esp,0xc
c0028df7:	83 ec 0c             	sub    esp,0xc
c0028dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfe:	e8 cd ff ff ff       	call   c0028dd0 <APIC::~APIC()>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	83 ec 08             	sub    esp,0x8
c0028e09:	68 58 21 00 00       	push   0x2158
c0028e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e12:	e8 ea 96 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028e17:	83 c4 10             	add    esp,0x10
c0028e1a:	83 c4 0c             	add    esp,0xc
c0028e1d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028e1e <PIC::~PIC()>:
c0028e1e:	83 ec 0c             	sub    esp,0xc
c0028e21:	ba 4c c4 02 c0       	mov    edx,0xc002c44c
c0028e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2a:	89 10                	mov    DWORD PTR [eax],edx
c0028e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	50                   	push   eax
c0028e34:	e8 ed b5 fe ff       	call   c0014426 <InterruptController::~InterruptController()>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	90                   	nop
c0028e3d:	83 c4 0c             	add    esp,0xc
c0028e40:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028e42 <PIC::~PIC()>:
c0028e42:	83 ec 0c             	sub    esp,0xc
c0028e45:	83 ec 0c             	sub    esp,0xc
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 cd ff ff ff       	call   c0028e1e <PIC::~PIC()>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 ec 08             	sub    esp,0x8
c0028e57:	68 58 21 00 00       	push   0x2158
c0028e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e60:	e8 9c 96 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028e65:	83 c4 10             	add    esp,0x10
c0028e68:	83 c4 0c             	add    esp,0xc
c0028e6b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028e6c <APICTimer::~APICTimer()>:
c0028e6c:	83 ec 0c             	sub    esp,0xc
c0028e6f:	ba a0 c4 02 c0       	mov    edx,0xc002c4a0
c0028e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e78:	89 10                	mov    DWORD PTR [eax],edx
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	83 ec 0c             	sub    esp,0xc
c0028e81:	50                   	push   eax
c0028e82:	e8 f7 d5 fe ff       	call   c001647e <Timer::~Timer()>
c0028e87:	83 c4 10             	add    esp,0x10
c0028e8a:	90                   	nop
c0028e8b:	83 c4 0c             	add    esp,0xc
c0028e8e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028e90 <APICTimer::~APICTimer()>:
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	83 ec 0c             	sub    esp,0xc
c0028e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9a:	e8 cd ff ff ff       	call   c0028e6c <APICTimer::~APICTimer()>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	83 ec 08             	sub    esp,0x8
c0028ea5:	68 60 01 00 00       	push   0x160
c0028eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eae:	e8 4e 96 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028eb3:	83 c4 10             	add    esp,0x10
c0028eb6:	83 c4 0c             	add    esp,0xc
c0028eb9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028eba <PIT::~PIT()>:
c0028eba:	83 ec 0c             	sub    esp,0xc
c0028ebd:	ba f0 c4 02 c0       	mov    edx,0xc002c4f0
c0028ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec6:	89 10                	mov    DWORD PTR [eax],edx
c0028ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ecc:	83 ec 0c             	sub    esp,0xc
c0028ecf:	50                   	push   eax
c0028ed0:	e8 a9 d5 fe ff       	call   c001647e <Timer::~Timer()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	90                   	nop
c0028ed9:	83 c4 0c             	add    esp,0xc
c0028edc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028ede <PIT::~PIT()>:
c0028ede:	83 ec 0c             	sub    esp,0xc
c0028ee1:	83 ec 0c             	sub    esp,0xc
c0028ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee8:	e8 cd ff ff ff       	call   c0028eba <PIT::~PIT()>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	83 ec 08             	sub    esp,0x8
c0028ef3:	68 5c 01 00 00       	push   0x15c
c0028ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efc:	e8 00 96 fe ff       	call   c0012501 <operator delete(void*, unsigned long)>
c0028f01:	83 c4 10             	add    esp,0x10
c0028f04:	83 c4 0c             	add    esp,0xc
c0028f07:	c3                   	ret    
